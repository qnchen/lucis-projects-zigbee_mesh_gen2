###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  15:51:52
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0001
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDObject.c" -D ZTOOL_P1 -D MT_TASK -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_RESTORE -D
#        NV_INIT -D NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D OPEN_FCS -D
#        MAKE_CRC_SHDW -lC "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\List\ZDObject.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\Obj\ZDObject.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2014-08-04 18:42:36 -0700 (Mon, 04 Aug 2014) $
      4            Revision:       $Revision: 39656 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          /*********************************************************************
     84           * TYPEDEFS
     85           */
     86          #if defined ( REFLECTOR )
     87          typedef struct
     88          {
     89            byte SrcTransSeq;
     90            zAddrType_t SrcAddr;
     91            uint16 LocalCoordinator;
     92            byte epIntf;
     93            uint16 ProfileID;
     94            byte numInClusters;
     95            uint16 *inClusters;
     96            byte numOutClusters;
     97            uint16 *outClusters;
     98            byte SecurityUse;
     99            byte status;
    100          } ZDO_EDBind_t;
    101          #endif // defined ( REFLECTOR )
    102          
    103          enum
    104          {
    105            ZDMATCH_INIT,           // Initialized
    106            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    107            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    108          };
    109          
    110          enum
    111          {
    112            ZDMATCH_SENDING_NOT,
    113            ZDMATCH_SENDING_UNBIND,
    114            ZDMATCH_SENDING_BIND
    115          };
    116          
    117          /*********************************************************************
    118           * GLOBAL VARIABLES
    119           */
    120          
    121          /*********************************************************************
    122           * EXTERNAL VARIABLES
    123           */
    124          
    125          /*********************************************************************
    126           * EXTERNAL FUNCTIONS
    127           */
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    133          
    134          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    136          #endif
    137          
    138          #if defined ( MANAGED_SCAN )
    139            uint32 managedScanNextChannel = 0;
    140            uint32 managedScanChannelMask = 0;
    141            uint8  managedScanTimesPerChannel = 0;
    142          #endif
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          int16 zdpExternalStateTaskID = -1;
   \                     zdpExternalStateTaskID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zdpExternalStateTaskID>`
   \   000002                REQUIRE __INIT_XDATA_I
    149          
    150          /*********************************************************************
    151           * LOCAL FUNCTIONS
    152           */
    153          static void ZDODeviceSetup( void );
    154          #ifdef PANID_INCREASE
    155          static void ZDOChannelScan( void );  //chaokw
    156          #endif
    157          #if defined ( MANAGED_SCAN )
    158            static void ZDOManagedScan_Next( void );
    159          #endif
    160          #if defined ( REFLECTOR )
    161            static void ZDO_RemoveEndDeviceBind( void );
    162            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    163          #endif
    164          #if ( ZG_BUILD_COORDINATOR_TYPE )
    165            static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    166                                                 byte numList2, uint16 *list2, uint16 *pMatches );
    167            static void ZDO_RemoveMatchMemory( void );
    168            static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    169            static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    170          #endif
    171          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    172          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    173          
    174          /*********************************************************************
    175           * @fn          ZDO_Init
    176           *
    177           * @brief       ZDObject and ZDProfile initialization.
    178           *
    179           * @param       none
    180           *
    181           * @return      none
    182           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    183          void ZDO_Init( void )
   \                     ZDO_Init:
    184          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    185            // Initialize ZD items
    186            #if defined ( REFLECTOR )
    187            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    188            #endif
    189          
    190            // Initialize default ZDO_UseExtendedPANID to the APS one.
    191            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    192          
    193            // Setup the device - type of device to create.
    194            ZDODeviceSetup();
   \   000016                ; Setup parameters for call to function NLME_CoordinatorInit
   \   000016   12....       LCALL   `??NLME_CoordinatorInit::?relay`; Banked call to: NLME_CoordinatorInit
   \   000019                ; Setup parameters for call to function APS_ReflectorInit
   \   000019   12....       LCALL   `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
    195          }
   \   00001C   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    196          
    197          #if defined ( MANAGED_SCAN )
    198          /*********************************************************************
    199           * @fn      ZDOManagedScan_Next()
    200           *
    201           * @brief   Setup a managed scan.
    202           *
    203           * @param   none
    204           *
    205           * @return  none
    206           */
    207          static void ZDOManagedScan_Next( void )
    208          {
    209            // Is it the first time
    210            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    211            {
    212              // Setup the defaults
    213              managedScanNextChannel  = 1;
    214          
    215              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    216                managedScanNextChannel <<= 1;
    217          
    218              managedScanChannelMask = managedScanNextChannel;
    219              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    220            }
    221            else
    222            {
    223              // Do we need to go to the next channel
    224              if ( managedScanTimesPerChannel == 0 )
    225              {
    226                // Find next active channel
    227                managedScanChannelMask  = managedScanNextChannel;
    228                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    229              }
    230              else
    231              {
    232                managedScanTimesPerChannel--;
    233          
    234                if ( managedScanTimesPerChannel == 0 )
    235                {
    236                  managedScanNextChannel  <<= 1;
    237                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    238                    managedScanNextChannel <<= 1;
    239          
    240                  if ( managedScanNextChannel == 0 )
    241                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    242                }
    243              }
    244            }
    245          }
    246          #endif // MANAGED_SCAN
    247          
    248          /*********************************************************************
    249           * @fn      ZDODeviceSetup()
    250           *
    251           * @brief   Call set functions depending on the type of device compiled.
    252           *
    253           * @param   none
    254           *
    255           * @return  none
    256           */
    257          static void ZDODeviceSetup( void )
    258          {
    259            if ( ZG_BUILD_COORDINATOR_TYPE )
    260            {
    261              NLME_CoordinatorInit();
    262            }
    263          
    264          #if defined ( REFLECTOR )
    265            APS_ReflectorInit();
    266          #endif
    267          
    268            if ( ZG_BUILD_JOINING_TYPE )
    269            {
    270              NLME_DeviceJoiningInit();
    271            }
    272          }
    273          
    274          #ifdef PANID_INCREASE
    275          /*********************************************************************
    276           * @fn      ZDOChannelScan()
    277           *
    278           * @brief   ZDOChannelScan.
    279           *
    280           * @param   none
    281           *
    282           * @return  none
    283           */
    284          static void ZDOChannelScan( void )
    285          {
    286          	static uint8 scanTimesPerChannel = 0;
    287          	static uint32 scanChannel = 0;
    288          
    289          	if (0 == scanTimesPerChannel++)
    290          	{
    291          		while (0 == (DEFAULT_CHANLIST & scanChannel))
    292          		{
    293          			scanChannel <<= 1;
    294          			if (0 == scanChannel)
    295          			{
    296          			 	// Default channel 0x0B
    297          				scanChannel = 0x00000800;
    298          			}
    299          		}
    300          
    301          		zgDefaultChannelList = DEFAULT_CHANLIST & scanChannel;
    302          		// Error channel
    303          		if (0 == zgDefaultChannelList)
    304          		{
    305          			zgDefaultChannelList = DEFAULT_CHANLIST;
    306          		}
    307          
    308          		if (0 == scanChannel)
    309          		{
    310          			// Default channel 0x0B
    311          			scanChannel = 0x00000800;
    312          		}
    313          		else
    314          		{
    315          		 	// Next scan channel
    316          			scanChannel <<= 1;
    317          		}
    318          	}
    319          	else if (SCAN_TIMES_PER_CHANNEL == scanTimesPerChannel)
    320          	{
    321          		scanTimesPerChannel = 0;
    322          	}
    323          }
    324          #endif
    325          
    326          /*********************************************************************
    327           * @fn          ZDO_StartDevice
    328           *
    329           * @brief       This function starts a device in a network.
    330           *
    331           * @param       logicalType     - Device type to start
    332           *              startMode       - indicates mode of device startup
    333           *              beaconOrder     - indicates time betwen beacons
    334           *              superframeOrder - indicates length of active superframe
    335           *
    336           * @return      none
    337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    338          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A..         MOV     ?V0,R2
   \   000009   EB           MOV     A,R3
   \   00000A   FE           MOV     R6,A
    340            ZStatus_t ret;
    341          #if defined ( ZIGBEE_FREQ_AGILITY )
    342            static uint8 discRetries = 0;
    343          #endif
    344          #if defined ( ZIGBEE_COMMISSIONING )
    345            static uint8 scanCnt = 0;
    346          #endif
    347          
    348            ret = ZUnsupportedMode;
    349          
    350            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
   \   00000B   EF           MOV     A,R7
   \   00000C   6003         JZ      $+5
   \   00000E   02....       LJMP    ??ZDO_StartDevice_0 & 0xFFFF
    351            {
    352              //chaokw panid
    353              if ((_NIB.nwkPanId >= (ZDAPP_CONFIG_PAN_ID + PANID_INCREASE_CNT))
    354                || (zgConfigPANID >= (ZDAPP_CONFIG_PAN_ID + PANID_INCREASE_CNT)))
   \   000011   90....       MOV     DPTR,#_NIB + 33
   \   000014   C3           CLR     C
   \   000015   E0           MOVX    A,@DPTR
   \   000016   9407         SUBB    A,#0x7
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   9400         SUBB    A,#0x0
   \   00001C   500D         JNC     ??ZDO_StartDevice_1
   \   00001E   90....       MOV     DPTR,#zgConfigPANID
   \   000021   C3           CLR     C
   \   000022   E0           MOVX    A,@DPTR
   \   000023   9407         SUBB    A,#0x7
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   9400         SUBB    A,#0x0
   \   000029   4011         JC      ??ZDO_StartDevice_2
    355              {
    356                _NIB.nwkPanId = ZDAPP_CONFIG_PAN_ID;
   \                     ??ZDO_StartDevice_1:
   \   00002B   90....       MOV     DPTR,#_NIB + 33
   \   00002E   7401         MOV     A,#0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
    357                zgConfigPANID = _NIB.nwkPanId;
   \   000034   90....       MOV     DPTR,#zgConfigPANID
   \   000037   04           INC     A
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   E4           CLR     A
   \   00003B   F0           MOVX    @DPTR,A
    358              }
    359              if ( startMode == MODE_HARD )
   \                     ??ZDO_StartDevice_2:
   \   00003C   7402         MOV     A,#0x2
   \   00003E   65..         XRL     A,?V0
   \   000040   703D         JNZ     ??ZDO_StartDevice_3
    360              {
    361                devState = DEV_COORD_STARTING;
   \   000042   90....       MOV     DPTR,#devState
   \   000045   7408         MOV     A,#0x8
   \   000047   F0           MOVX    @DPTR,A
    362                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    363                                                    zgDefaultStartingScanDuration, beaconOrder,
    364                                                    superframeOrder, false );
   \   000048                ; Setup parameters for call to function NLME_NetworkFormationRequest
   \   000048   75..00       MOV     ?V2,#0x0
   \   00004B   78..         MOV     R0,#?V2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000050   EC           MOV     A,R4
   \   000051   F5..         MOV     ?V2,A
   \   000053   78..         MOV     R0,#?V2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   EE           MOV     A,R6
   \   000059   F5..         MOV     ?V2,A
   \   00005B   78..         MOV     R0,#?V2
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   90....       MOV     DPTR,#zgDefaultChannelList
   \   000063   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000066   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   7C..         MOV     R4,#zgApsUseExtendedPANID & 0xff
   \   00006D   7D..         MOV     R5,#(zgApsUseExtendedPANID >> 8) & 0xff
   \   00006F   90....       MOV     DPTR,#zgConfigPANID
   \   000072   12....       LCALL   ??Subroutine233_0 & 0xFFFF
    365              }
   \                     ??CrossCallReturnLabel_424:
   \   000075   12....       LCALL   `??NLME_NetworkFormationRequest::?relay`; Banked call to: NLME_NetworkFormationRequest
   \   000078   7407         MOV     A,#0x7
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007D   8014         SJMP    ??ZDO_StartDevice_4
    366              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_3:
   \   00007F   7401         MOV     A,#0x1
   \   000081   65..         XRL     A,?V0
   \   000083   7013         JNZ     ??ZDO_StartDevice_5
    367              {
    368                // Just start the coordinator
    369                devState = DEV_COORD_STARTING;
   \   000085   90....       MOV     DPTR,#devState
   \   000088   7408         MOV     A,#0x8
   \   00008A   F0           MOVX    @DPTR,A
    370                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
   \   00008B                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00008B   7B00         MOV     R3,#0x0
   \   00008D   EE           MOV     A,R6
   \   00008E   FA           MOV     R2,A
   \   00008F   F9           MOV     R1,A
   \   000090   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \                     ??ZDO_StartDevice_4:
   \   000093   E9           MOV     A,R1
    371              }
    372              else
    373              {
    374          #if defined( LCD_SUPPORTED )
    375                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    376          #endif
    377              }
    378            }
    379          
    380            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
    381            {
    382              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
    383              {
    384                devState = DEV_NWK_DISC;
    385          
    386            #if defined( MANAGED_SCAN )
    387                ZDOManagedScan_Next();
    388                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    389            #else
    390                //ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
    391                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, BEACON_ORDER_15_MSEC );  //chaokw
    392              #if defined ( ZIGBEE_FREQ_AGILITY )
    393                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    394                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    395                {
    396                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    397                  // change will not be recieved. On these devices or routers that have
    398                  // lost the network, an active scan shall be conducted on the Default
    399                  // Channel list using the extended PANID to find the network. If the
    400                  // extended PANID isn't found using the Default Channel list, an scan
    401                  // should be completed using all channels.
    402                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    403                }
    404              #endif // ZIGBEE_FREQ_AGILITY
    405              #if defined ( ZIGBEE_COMMISSIONING )
    406                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
    407                {
    408                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    409                  // application specific means, the device shall conduct an active scan
    410                  // on the Default Channel list and join the PAN with the same
    411                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    412                  // on all channels.
    413                  // When devices rejoin the network and the PAN is not found from
    414                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    415                }
    416              #endif // ZIGBEE_COMMISSIONING
    417            #endif
    418              }
    419              else if ( startMode == MODE_RESUME )
    420              {
    421                if ( logicalType == NODETYPE_ROUTER )
    422                {
    423                  ZMacScanCnf_t scanCnf;
    424                  devState = DEV_NWK_ORPHAN;
    425          
    426                  /* if router and nvram is available, fake successful orphan scan */
    427                  scanCnf.hdr.Status = ZSUCCESS;
    428                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
    429                  scanCnf.UnscannedChannels = 0;
    430                  scanCnf.ResultListSize = 0;
    431                  nwk_ScanJoiningOrphan(&scanCnf);
    432          
    433                  ret = ZSuccess;
    434                }
    435                else
    436                {
    437                  devState = DEV_NWK_ORPHAN;
    438                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    439                                                zgDefaultStartingScanDuration );
    440                }
    441              }
    442              else
    443              {
    444          #if defined( LCD_SUPPORTED )
    445                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    446          #endif
    447              }
    448          
    449          #ifdef PANID_INCREASE  //chaokw panid
    450          	if ( ret == ZSuccess )
    451          	{
    452          		ZDOChannelScan();
    453          		if ( zgScanNwkCount )
    454          		{
    455          			zgConfigPANID = _NIB.nwkPanId = zgConfigPANID_Table[(zgScanNwkCount - 1) / ZG_NWK_DISCOVERY_COUNT];
    456          		}
    457          		else
    458          		{
    459          			zgConfigPANID = _NIB.nwkPanId = zgConfigPANID_Table[zgScanNwkCount / ZG_NWK_DISCOVERY_COUNT];
    460          		}
    461          		if ( zgScanNwkCount++ >= PANID_INCREASE_CNT * ZG_NWK_DISCOVERY_COUNT )
    462          		{
    463          			zgScanNwkCount = 0;
    464          		}
    465          	}
    466          #endif
    467          
    468            }
    469          
    470            if ( ret != ZSuccess )
   \   000094   700D         JNZ     ??ZDO_StartDevice_0
   \   000096   8022         SJMP    ??ZDO_StartDevice_6
   \                     ??ZDO_StartDevice_5:
   \   000098                ; Setup parameters for call to function HalLcdWriteScreen
   \   000098   7C..         MOV     R4,#`?<Constant "MODE unknown">` & 0xff
   \   00009A   7D..         MOV     R5,#(`?<Constant "MODE unknown">` >> 8) & 0xff
   \   00009C   7A..         MOV     R2,#`?<Constant "StartDevice ERR">` & 0xff
   \   00009E   7B..         MOV     R3,#(`?<Constant "StartDevice ERR">` >> 8) & 0xff
   \   0000A0   12....       LCALL   `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    471            {
    472              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_0:
   \   0000A3                ; Setup parameters for call to function osal_start_timerEx
   \   0000A3   90....       MOV     DPTR,#__Constant_3e8
   \   0000A6   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000A9   7A01         MOV     R2,#0x1
   \   0000AB   7B00         MOV     R3,#0x0
   \   0000AD   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F9           MOV     R1,A
   \   0000B2   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000B5   7404         MOV     A,#0x4
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
    473            }
    474          }
   \                     ??ZDO_StartDevice_6:
   \   0000BA   7F03         MOV     R7,#0x3
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_673:
   \   000003   FB           MOV     R3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine252_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    475          
    476          /**************************************************************************************************
    477           * @fn          zdoSendStateChangeMsg
    478           *
    479           * @brief       Helper function for ZDO_UpdateNwkStatus.
    480           *
    481           * input parameters
    482           *
    483           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    484           * @param       state - The current device state.
    485           *
    486           * output parameters
    487           *
    488           * None.
    489           *
    490           * @return      None.
    491           **************************************************************************************************
    492           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    493          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
   \                     zdoSendStateChangeMsg:
    494          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    495            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
   \   000009                ; Setup parameters for call to function osal_msg_find
   \   000009   7AD1         MOV     R2,#-0x2f
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
    496          
    497            if (NULL == pMsg)
   \   000013   E582         MOV     A,DPL
   \   000015   4583         ORL     A,DPH
   \   000017   702A         JNZ     ??zdoSendStateChangeMsg_0
    498            {
    499              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
   \   000019                ; Setup parameters for call to function osal_msg_allocate
   \   000019   7A02         MOV     R2,#0x2
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000020   EA           MOV     A,R2
   \   000021   4B           ORL     A,R3
   \   000022   700E         JNZ     ??zdoSendStateChangeMsg_1
    500              {
    501                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    502                // try again later when more Heap may be available.
    503                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   7A10         MOV     R2,#0x10
   \   000026   7B00         MOV     R3,#0x0
   \   000028   90....       MOV     DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000030   8014         SJMP    ??zdoSendStateChangeMsg_2
    504              }
    505              else
    506              {
    507                pMsg->event = ZDO_STATE_CHANGE;
   \                     ??zdoSendStateChangeMsg_1:
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   74D1         MOV     A,#-0x2f
   \   000038   F0           MOVX    @DPTR,A
    508                pMsg->status = state;
   \   000039   EF           MOV     A,R7
   \   00003A   A3           INC     DPTR
   \   00003B   F0           MOVX    @DPTR,A
    509          
    510                (void)osal_msg_send(taskId, (uint8 *)pMsg);
   \   00003C                ; Setup parameters for call to function osal_msg_send
   \   00003C   EE           MOV     A,R6
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000041   8003         SJMP    ??zdoSendStateChangeMsg_2
    511              }
    512            }
    513            else
    514            {
    515              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    516              pMsg->status = state;
   \                     ??zdoSendStateChangeMsg_0:
   \   000043   EF           MOV     A,R7
   \   000044   A3           INC     DPTR
   \   000045   F0           MOVX    @DPTR,A
    517            }
    518          }
   \                     ??zdoSendStateChangeMsg_2:
   \   000046   02....       LJMP    ??Subroutine204_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    519          
    520          /**************************************************************************************************
    521           * @fn          ZDO_UpdateNwkStatus
    522           *
    523           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    524           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    525           *              than one registered EndPoint, it will only receive one notification per state
    526           *              change. Although the device may go through a sequence of state changes, the
    527           *              Application task may only receive notification of the final, steady-state state
    528           *              because it has the lowest priority and never even runs to receive the intermediate
    529           *              state change notifications.
    530           *
    531           * input parameters
    532           *
    533           * @param       state - The current device state.
    534           *
    535           * output parameters
    536           *
    537           * None.
    538           *
    539           * @return      None.
    540           **************************************************************************************************
    541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    542          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    543          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    544            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   00000D   8023         SJMP    ??ZDO_UpdateNwkStatus_0
    545          
    546          #if defined MT_ZDO_CB_FUNC
    547            if ( zdpExternalStateTaskID == -1 )
    548            {
    549              zdpExternalStateTaskID = MT_TaskID;
    550            }
    551          #endif
    552          
    553            while (pItem != NULL)
    554            {
    555              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_UpdateNwkStatus_1:
   \   00000F   8E82         MOV     DPL,R6
   \   000011   8F83         MOV     DPH,R7
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000017   600F         JZ      ??ZDO_UpdateNwkStatus_2
    556              {
    557                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \   000019                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   12....       LCALL   ?Subroutine61 & 0xFFFF
    558              }
   \                     ??CrossCallReturnLabel_366:
   \   000022   FA           MOV     R2,A
   \   000023   A9..         MOV     R1,?V0
   \   000025   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    559          
    560              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   12....       LCALL   ??Subroutine237_0 & 0xFFFF
    561            }
   \                     ??CrossCallReturnLabel_465:
   \   00002F   E8           MOV     A,R0
   \   000030   FE           MOV     R6,A
   \   000031   E9           MOV     A,R1
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000032   FF           MOV     R7,A
   \   000033   EE           MOV     A,R6
   \   000034   4F           ORL     A,R7
   \   000035   70D8         JNZ     ??ZDO_UpdateNwkStatus_1
    562            
    563            if ( zdpExternalStateTaskID != -1 )
   \   000037   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F4           CPL     A
   \   00003C   7003         JNZ     ??ZDO_UpdateNwkStatus_3
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F4           CPL     A
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000041   600A         JZ      ??ZDO_UpdateNwkStatus_4
    564            {  
    565              zdoSendStateChangeMsg( state, zdpExternalStateTaskID );
   \   000043                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000043   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FA           MOV     R2,A
   \   000048   A9..         MOV     R1,?V0
   \   00004A   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    566            }
    567            
    568            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_4:
   \   00004D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00004D   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000050   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000053   12....       LCALL   ?Subroutine49 & 0xFFFF
    569            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_315:
   \   000056                ; Setup parameters for call to function NLME_GetExtAddr
   \   000056   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    570          }
   \   000059                REQUIRE ?Subroutine2
   \   000059                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine205_0
   \   000001                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006                REQUIRE ??Subroutine219_0
   \   000006                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine220_0
   \   000001                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine194:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET
    571          
    572          #if defined ( REFLECTOR )
    573          /*********************************************************************
    574           * @fn          ZDO_RemoveEndDeviceBind
    575           *
    576           * @brief       Remove the end device bind
    577           *
    578           * @param  none
    579           *
    580           * @return      none
    581           */
    582          static void ZDO_RemoveEndDeviceBind( void )
    583          {
    584            if ( ZDO_EDBind != NULL )
    585            {
    586              // Free the RAM
    587              if ( ZDO_EDBind->inClusters != NULL )
    588              {
    589                osal_mem_free( ZDO_EDBind->inClusters );
    590              }
    591              if ( ZDO_EDBind->outClusters != NULL )
    592              {
    593                osal_mem_free( ZDO_EDBind->outClusters );
    594              }
    595              osal_mem_free( ZDO_EDBind );
    596              ZDO_EDBind = NULL;
    597            }
    598          }
    599          #endif // REFLECTOR
    600          
    601          #if defined ( REFLECTOR )
    602          /*********************************************************************
    603           * @fn          ZDO_RemoveEndDeviceBind
    604           *
    605           * @brief       Remove the end device bind
    606           *
    607           * @param  none
    608           *
    609           * @return      none
    610           */
    611          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    612          {
    613            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    614          
    615          #if defined( LCD_SUPPORTED )
    616            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    617            if ( Status == ZDP_SUCCESS )
    618            {
    619              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    620            }
    621            else
    622            {
    623              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    624            }
    625          #endif
    626          
    627          }
    628          #endif // REFLECTOR
    629          
    630          #if ( ZG_BUILD_COORDINATOR_TYPE )
    631          /*********************************************************************
    632           * @fn          ZDO_CompareClusterLists
    633           *
    634           * @brief       Compare one list to another list
    635           *
    636           * @param       numList1 - number of items in list 1
    637           * @param       list1 - first list of cluster IDs
    638           * @param       numList2 - number of items in list 2
    639           * @param       list2 - second list of cluster IDs
    640           * @param       pMatches - buffer to put matches
    641           *
    642           * @return      number of matches
    643           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    644          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    645                                    byte numList2, uint16 *list2, uint16 *pMatches )
    646          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8C..         MOV     ?V4,R4
    647            byte x, y;
    648            uint16 z;
    649            byte numMatches = 0;
   \   000009   75..00       MOV     ?V0,#0x0
    650          
    651            // Check the first in against the seconds out
    652            for ( x = 0; x < numList1; x++ )
   \   00000C   75..00       MOV     ?V1,#0x0
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   00001F   803C         SJMP    ??ZDO_CompareClusterLists_0
    653            {
    654              for ( y = 0; y < numList2; y++ )
    655              {
    656                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000021   A8..         MOV     R0,?V2
   \   000023   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000026   F5..         MOV     ?V6,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V7,A
    657                if ( list1[x] == z )
   \   00002C   A8..         MOV     R0,?V1
   \   00002E   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000031   F583         MOV     DPH,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   65..         XRL     A,?V6
   \   000036   7004         JNZ     ??ZDO_CompareClusterLists_2
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   65..         XRL     A,?V7
   \                     ??ZDO_CompareClusterLists_2:
   \   00003C   7014         JNZ     ??ZDO_CompareClusterLists_3
    658                {
    659                  pMatches[numMatches++] = z;
   \   00003E   12....       LCALL   ?Subroutine116 & 0xFFFF
    660                }
    661              }
   \                     ??CrossCallReturnLabel_312:
   \   000041   EE           MOV     A,R6
   \   000042   28           ADD     A,R0
   \   000043   F582         MOV     DPL,A
   \   000045   EF           MOV     A,R7
   \   000046   39           ADDC    A,R1
   \   000047   F583         MOV     DPH,A
   \   000049   E5..         MOV     A,?V6
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E5..         MOV     A,?V7
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   05..         INC     ?V0
   \                     ??ZDO_CompareClusterLists_3:
   \   000052   05..         INC     ?V2
   \                     ??ZDO_CompareClusterLists_4:
   \   000054   E5..         MOV     A,?V2
   \   000056   C3           CLR     C
   \   000057   95..         SUBB    A,?V4
   \   000059   40C6         JC      ??ZDO_CompareClusterLists_1
   \   00005B   05..         INC     ?V1
   \                     ??ZDO_CompareClusterLists_0:
   \   00005D   E5..         MOV     A,?V1
   \   00005F   C3           CLR     C
   \   000060   95..         SUBB    A,?V3
   \   000062   5005         JNC     ??ZDO_CompareClusterLists_5
   \   000064   75..00       MOV     ?V2,#0x0
   \   000067   80EB         SJMP    ??ZDO_CompareClusterLists_4
    662            }
    663          
    664            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   000069   A9..         MOV     R1,?V0
   \   00006B   80..         SJMP    ??Subroutine201_0
    665          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   A8..         MOV     R0,?V0
   \   000002                REQUIRE ??Subroutine200_0
   \   000002                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   28           ADD     A,R0
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   39           ADDC    A,R1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   EC           MOV     A,R4
   \   000007   28           ADD     A,R0
   \   000008   F582         MOV     DPL,A
   \   00000A   ED           MOV     A,R5
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000003   FC           MOV     R4,A
   \   000004   E9           MOV     A,R1
   \   000005   FD           MOV     R5,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000003   FE           MOV     R6,A
   \   000004   E9           MOV     A,R1
   \   000005   FF           MOV     R7,A
   \   000006   22           RET
    666          #endif // ZG_BUILD_COORDINATOR_TYPE
    667          
    668          /*********************************************************************
    669           * Utility functions
    670           */
    671          
    672          /*********************************************************************
    673           * @fn          ZDO_CompareByteLists
    674           *
    675           * @brief       Compares two lists for matches.
    676           *
    677           * @param       ACnt  - number of entries in list A
    678           * @param       AList  - List A
    679           * @param       BCnt  - number of entries in list B
    680           * @param       BList  - List B
    681           *
    682           * @return      true if a match is found
    683           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    684          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    685          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8C..         MOV     ?V2,R4
    686            byte x, y;
    687          
    688            for ( x = 0; x < ACnt; x++ )
   \   000009   75..00       MOV     ?V0,#0x0
   \   00000C   740C         MOV     A,#0xc
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000014   8002         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000016   05..         INC     ?V0
   \                     ??ZDO_AnyClusterMatches_0:
   \   000018   E5..         MOV     A,?V0
   \   00001A   C3           CLR     C
   \   00001B   95..         SUBB    A,?V3
   \   00001D   5028         JNC     ??ZDO_AnyClusterMatches_2
    689            {
    690              for ( y = 0; y < BCnt; y++ )
   \   00001F   75..00       MOV     ?V1,#0x0
   \   000022   8002         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000024   05..         INC     ?V1
   \                     ??ZDO_AnyClusterMatches_3:
   \   000026   E5..         MOV     A,?V1
   \   000028   C3           CLR     C
   \   000029   95..         SUBB    A,?V2
   \   00002B   50E9         JNC     ??ZDO_AnyClusterMatches_1
    691              {
    692                if ( AList[x] == BList[y] )
   \   00002D   A8..         MOV     R0,?V0
   \   00002F   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000032   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   000035   FF           MOV     R7,A
   \   000036   A8..         MOV     R0,?V1
   \   000038   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   00003B   6E           XRL     A,R6
   \   00003C   7003         JNZ     ??ZDO_AnyClusterMatches_5
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6F           XRL     A,R7
   \                     ??ZDO_AnyClusterMatches_5:
   \   000041   70E1         JNZ     ??ZDO_AnyClusterMatches_4
    693                {
    694                  return true;
   \   000043   7901         MOV     R1,#0x1
   \   000045   8002         SJMP    ??ZDO_AnyClusterMatches_6
    695                }
    696              }
    697            }
    698          
    699            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   000047   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000049   80..         SJMP    ??Subroutine202_0
    700          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine249_0
   \   000002                ; // Fall through to label ??Subroutine249_0
    701          
    702          /*********************************************************************
    703           * Callback functions from ZDProfile
    704           */
    705          
    706          /*********************************************************************
    707           * @fn          ZDO_ProcessNodeDescReq
    708           *
    709           * @brief       This function processes and responds to the
    710           *              Node_Desc_req message.
    711           *
    712           * @param       inMsg - incoming message
    713           *
    714           * @return      none
    715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    716          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    717          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine59 & 0xFFFF
    718            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    719            NodeDescriptorFormat_t *desc = NULL;
    720          
    721            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_91:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    722            {
    723              desc = &ZDO_Config_Node_Descriptor;
    724            }
    725          
    726            if ( desc != NULL )
    727            {
    728              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessNodeDescReq_2
    729            }
    730            else
    731            {
    732              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    733                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0,#0x2
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine64 & 0xFFFF
    734            }
   \                     ??CrossCallReturnLabel_100:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    735          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000045   80..         SJMP    ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_581:
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   7C80         MOV     R4,#-0x80
   \   00000A   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000007   FC           MOV     R4,A
   \   000008   E4           CLR     A
   \   000009   39           ADDC    A,R1
   \   00000A   FD           MOV     R5,A
   \   00000B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6C           XRL     A,R4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   EE           MOV     A,R6
   \   000008   240F         ADD     A,#0xf
   \   00000A   F582         MOV     DPL,A
   \   00000C   E4           CLR     A
   \   00000D   3F           ADDC    A,R7
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000006   F9           MOV     R1,A
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_668:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine195:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine247_0
   \   000001                ; // Fall through to label ??Subroutine247_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   240E         ADD     A,#0xe
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_675:
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   C8           XCH     A,R0
   \   000006   F9           MOV     R1,A
   \   000007   EA           MOV     A,R2
   \   000008   28           ADD     A,R0
   \   000009   22           RET
    736          
    737          /*********************************************************************
    738           * @fn          ZDO_ProcessPowerDescReq
    739           *
    740           * @brief       This function processes and responds to the
    741           *              Node_Power_req message.
    742           *
    743           * @param       inMsg  - incoming request
    744           *
    745           * @return      none
    746           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    747          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    748          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine59 & 0xFFFF
    749            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    750            NodePowerDescriptorFormat_t *desc = NULL;
    751          
    752            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_92:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    753            {
    754              desc = &ZDO_Config_Power_Descriptor;
    755            }
    756          
    757            if ( desc != NULL )
    758            {
    759              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessPowerDescReq_2
    760            }
    761            else
    762            {
    763              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    764                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0,#0x3
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine64 & 0xFFFF
    765            }
   \                     ??CrossCallReturnLabel_101:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    766          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000045   80..         SJMP    ??Subroutine204_0
    767          
    768          /*********************************************************************
    769           * @fn          ZDO_ProcessSimpleDescReq
    770           *
    771           * @brief       This function processes and responds to the
    772           *              Simple_Desc_req message.
    773           *
    774           * @param       inMsg - incoming message (request)
    775           *
    776           * @return      none
    777           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine203_0
   \   000002                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine204_0
   \   000003                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    778          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    779          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    780            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   12....       LCALL   ?Subroutine34 & 0xFFFF
    781            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_45:
   \   00001A   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   00001D   FC           MOV     R4,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FB           MOV     R3,A
   \   000021   EC           MOV     A,R4
   \   000022   FA           MOV     R2,A
    782            byte endPoint = inMsg->asdu[2];
   \   000023   8882         MOV     DPL,R0
   \   000025   8983         MOV     DPH,R1
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
    783            byte free = false;
   \   00002B   75..00       MOV     ?V1,#0x0
    784            byte stat = ZDP_SUCCESS;
   \   00002E   75..00       MOV     ?V0,#0x0
    785          
    786            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   000031   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000033   74FF         MOV     A,#-0x1
   \   000035   69           XRL     A,R1
   \   000036   7005         JNZ     ??ZDO_ProcessSimpleDescReq_1
    787            {
    788              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000038   75..82       MOV     ?V0,#-0x7e
   \   00003B   802A         SJMP    ??ZDO_ProcessSimpleDescReq_2
    789            }
    790            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003D   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6A           XRL     A,R2
   \   000042   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000047   701B         JNZ     ??ZDO_ProcessSimpleDescReq_4
    791            {
    792              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000049                ; Setup parameters for call to function afFindSimpleDesc
   \   000049   AA..         MOV     R2,?XSP + 0
   \   00004B   AB..         MOV     R3,?XSP + 1
   \   00004D   12....       LCALL   `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   000050   E9           MOV     A,R1
   \   000051   FA           MOV     R2,A
    793              if ( sDesc == NULL )
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   00005B   7003         JNZ     ??ZDO_ProcessSimpleDescReq_5
    794              {
    795                stat = ZDP_NOT_ACTIVE;
   \   00005D   75..83       MOV     ?V0,#-0x7d
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   000060   8A..         MOV     ?V1,R2
   \   000062   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    796              }
    797            }
    798            else
    799            {
    800              if ( ZSTACK_ROUTER_BUILD )
    801              {
    802                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   000064   75..81       MOV     ?V0,#-0x7f
    803              }
    804              else if ( ZSTACK_END_DEVICE_BUILD )
    805              {
    806                stat = ZDP_INVALID_REQTYPE;
    807              }
    808            }
    809          
    810            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000067                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   000070   FD           MOV     R5,A
   \   000071   A9..         MOV     R1,?V0
   \   000073   EE           MOV     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
    811          
    812            if ( free && sDesc )
   \   00007A   E5..         MOV     A,?V1
   \   00007C   6011         JZ      ??ZDO_ProcessSimpleDescReq_6
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000087   6006         JZ      ??ZDO_ProcessSimpleDescReq_6
    813            {
    814              osal_mem_free( sDesc );
   \   000089                ; Setup parameters for call to function osal_mem_free
   \   000089   12....       LCALL   ??Subroutine232_0 & 0xFFFF
    815            }
   \                     ??CrossCallReturnLabel_446:
   \   00008C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    816          }
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   00008F   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000003   49           ORL     A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine233_0
   \   000006                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    817          
    818          /*********************************************************************
    819           * @fn          ZDO_ProcessActiveEPReq
    820           *
    821           * @brief       This function processes and responds to the
    822           *              Active_EP_req message.
    823           *
    824           * @param       inMsg  - incoming message (request)
    825           *
    826           * @return      none
    827           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    828          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    829          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    830            byte cnt = 0;
   \   000009   75..00       MOV     ?V0,#0x0
    831            uint16 aoi;
    832            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V1,#0x0
    833          
    834            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000012   F5..         MOV     ?V2,A
   \   000014   E4           CLR     A
   \   000015   39           ADDC    A,R1
   \   000016   F5..         MOV     ?V3,A
    835          
    836            if ( aoi == NLME_GetShortAddr() )
   \   000018                ; Setup parameters for call to function NLME_GetShortAddr
   \   000018   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001B   EA           MOV     A,R2
   \   00001C   65..         XRL     A,?V2
   \   00001E   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000020   EB           MOV     A,R3
   \   000021   65..         XRL     A,?V3
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000023   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    837            {
    838              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000025                ; Setup parameters for call to function afNumEndPoints
   \   000025   12....       LCALL   `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   000028   E9           MOV     A,R1
   \   000029   14           DEC     A
   \   00002A   F5..         MOV     ?V0,A
    839              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002C                ; Setup parameters for call to function afEndPoints
   \   00002C   7901         MOV     R1,#0x1
   \   00002E   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000030   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000032   12....       LCALL   `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   000035   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    840            }
    841            else
    842            {
    843              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000037   75..80       MOV     ?V1,#-0x80
    844            }
    845          
    846            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    847                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00003A                ; Setup parameters for call to function ZDP_EPRsp
   \   00003A   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   00003D   F5..         MOV     ?V4,A
   \   00003F   78..         MOV     R0,#?V4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   000047   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   00004A   78..         MOV     R0,#?V4
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   78..         MOV     R0,#?V0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   78..         MOV     R0,#?V2
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   E5..         MOV     A,?V1
   \   00005B   F5..         MOV     ?V0,A
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000065   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000068   F9           MOV     R1,A
   \   000069   7A05         MOV     R2,#0x5
   \   00006B   7B80         MOV     R3,#-0x80
   \   00006D   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000070   7407         MOV     A,#0x7
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
    848          }
   \   000075   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FD           MOV     R5,A
   \   000007   EE           MOV     A,R6
   \   000008   240F         ADD     A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003                REQUIRE ??Subroutine240_0
   \   000003                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    849          
    850          /*********************************************************************
    851           * @fn          ZDO_ConvertOTAClusters
    852           *
    853           * @brief       This function will convert the over-the-air cluster list
    854           *              format to an internal format.
    855           *
    856           * @param       inMsg  - incoming message (request)
    857           *
    858           * @return      pointer to incremented inBuf
    859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    861          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
    862            uint8 x;
    863          
    864            for ( x = 0; x < cnt; x++ )
   \   000007   75..00       MOV     ?V0,#0x0
   \   00000A   8029         SJMP    ??ZDO_ConvertOTAClusters_0
    865            {
    866              // convert ota format to internal
    867              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   000013   F8           MOV     R0,A
   \   000014   E4           CLR     A
   \   000015   C8           XCH     A,R0
   \   000016   F9           MOV     R1,A
   \   000017   EE           MOV     A,R6
   \   000018   28           ADD     A,R0
   \   000019   E4           CLR     A
   \   00001A   39           ADDC    A,R1
   \   00001B   FF           MOV     R7,A
   \   00001C   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   00001F   EC           MOV     A,R4
   \   000020   28           ADD     A,R0
   \   000021   F582         MOV     DPL,A
   \   000023   ED           MOV     A,R5
   \   000024   39           ADDC    A,R1
   \   000025   F583         MOV     DPH,A
   \   000027   EE           MOV     A,R6
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   EF           MOV     A,R7
   \   00002B   F0           MOVX    @DPTR,A
    868              inBuf += sizeof( uint16 );
   \   00002C   EA           MOV     A,R2
   \   00002D   2402         ADD     A,#0x2
   \   00002F   FA           MOV     R2,A
   \   000030   5001         JNC     ??ZDO_ConvertOTAClusters_2
   \   000032   0B           INC     R3
    869            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   000033   05..         INC     ?V0
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000035   E5..         MOV     A,?V0
   \   000037   C3           CLR     C
   \   000038   95..         SUBB    A,?V1
   \   00003A   40D0         JC      ??ZDO_ConvertOTAClusters_1
    870            return ( inBuf );
   \   00003C   02....       LJMP    ??Subroutine204_0 & 0xFFFF
    871          }
    872          
    873          /*********************************************************************
    874           * @fn          ZDO_ProcessMatchDescReq
    875           *
    876           * @brief       This function processes and responds to the
    877           *              Match_Desc_req message.
    878           *
    879           * @param       inMsg  - incoming message (request)
    880           *
    881           * @return      none
    882           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    883          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    884          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V14,R2
   \   00000C   8B..         MOV     ?V15,R3
    885            uint8 epCnt = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    886            uint8 numInClusters;
    887            uint16 *inClusters = NULL;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    888            uint8 numOutClusters;
    889            uint16 *outClusters = NULL;
   \   00001F   04           INC     A
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   F0           MOVX    @DPTR,A
    890            epList_t *epDesc;
    891            SimpleDescriptionFormat_t *sDesc = NULL;
    892            uint8 allocated;
    893            uint8 *msg;
    894            uint16 aoi;
    895            uint16 profileID;
    896          
    897            // Parse the incoming message
    898            msg = inMsg->asdu;
   \   000027   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   00002A   35..         ADDC    A,?V15
   \   00002C   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00002F   F5..         MOV     ?V3,A
    899            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   000031   85..82       MOV     DPL,?V2
   \   000034   F583         MOV     DPH,A
   \   000036   12....       LCALL   ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_665:
   \   000039   FE           MOV     R6,A
   \   00003A   E4           CLR     A
   \   00003B   39           ADDC    A,R1
   \   00003C   FF           MOV     R7,A
    900            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   00003D   85..82       MOV     DPL,?V2
   \   000040   85..83       MOV     DPH,?V3
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FA           MOV     R2,A
   \   000047   85..82       MOV     DPL,?V2
   \   00004A   85..83       MOV     DPH,?V3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   EA           MOV     A,R2
   \   000053   F5..         MOV     ?V0,A
   \   000055   E4           CLR     A
   \   000056   39           ADDC    A,R1
   \   000057   F5..         MOV     ?V1,A
    901            msg += 4;
    902          
    903            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000059                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000059   EE           MOV     A,R6
   \   00005A   FA           MOV     R2,A
   \   00005B   EF           MOV     A,R7
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000060   E9           MOV     A,R1
   \   000061   6401         XRL     A,#0x1
   \   000063   6016         JZ      ??ZDO_ProcessMatchDescReq_0
    904            {
    905              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    906                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    907              return;
    908            }
    909            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   000065                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00006C   E9           MOV     A,R1
   \   00006D   703D         JNZ     ??ZDO_ProcessMatchDescReq_1
   \   00006F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000072   E0           MOVX    A,@DPTR
   \   000073   6E           XRL     A,R6
   \   000074   7003         JNZ     ??ZDO_ProcessMatchDescReq_2
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000079   6031         JZ      ??ZDO_ProcessMatchDescReq_1
    910            {
    911              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    912                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   00007B                ; Setup parameters for call to function ZDP_EPRsp
   \   00007B   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000081   E4           CLR     A
   \   000082   F5..         MOV     ?V0,A
   \   000084   F5..         MOV     ?V1,A
   \   000086   78..         MOV     R0,#?V0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000093   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000096   75..80       MOV     ?V0,#-0x80
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   0000A1   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000A4   7407         MOV     A,#0x7
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
    913              return;
   \   0000A9   02....       LJMP    ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
    914            }
    915          
    916            if ((numInClusters = *msg++) &&
    917                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   0000AC   85..82       MOV     DPL,?V2
   \   0000AF   85..83       MOV     DPH,?V3
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F5..         MOV     ?V8,A
   \   0000B9   E5..         MOV     A,?V2
   \   0000BB   2405         ADD     A,#0x5
   \   0000BD   F5..         MOV     ?V2,A
   \   0000BF   5002         JNC     ??ZDO_ProcessMatchDescReq_4
   \   0000C1   05..         INC     ?V3
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000C3   E5..         MOV     A,?V8
   \   0000C5   6029         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0000C7                ; Setup parameters for call to function osal_mem_alloc
   \   0000C7   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   0000CA   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000CD   7403         MOV     A,#0x3
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   0000DB   6013         JZ      ??ZDO_ProcessMatchDescReq_5
    918            {
    919              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000DD                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000DD   7403         MOV     A,#0x3
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   12....       LCALL   ?Subroutine104 & 0xFFFF
    920            }
   \                     ??CrossCallReturnLabel_162:
   \   0000E5   A9..         MOV     R1,?V8
   \   0000E7   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000EA   8A..         MOV     ?V2,R2
   \   0000EC   8B..         MOV     ?V3,R3
   \   0000EE   8003         SJMP    ??ZDO_ProcessMatchDescReq_6
    921            else
    922            {
    923              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0000F0   75..00       MOV     ?V8,#0x0
    924            }
    925          
    926            if ((numOutClusters = *msg++) &&
    927                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   0000F3   85..82       MOV     DPL,?V2
   \   0000F6   85..83       MOV     DPH,?V3
   \   0000F9   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   0000FC   6027         JZ      ??ZDO_ProcessMatchDescReq_7
   \   0000FE                ; Setup parameters for call to function osal_mem_alloc
   \   0000FE   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   000101   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000104   7401         MOV     A,#0x1
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   00010C   7401         MOV     A,#0x1
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000114   600F         JZ      ??ZDO_ProcessMatchDescReq_7
    928            {
    929              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   000116                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000116   7401         MOV     A,#0x1
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   12....       LCALL   ?Subroutine104 & 0xFFFF
    930            }
   \                     ??CrossCallReturnLabel_163:
   \   00011E   A9..         MOV     R1,?V7
   \   000120   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000123   8003         SJMP    ??ZDO_ProcessMatchDescReq_8
    931            else
    932            {
    933              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000125   75..00       MOV     ?V7,#0x0
    934            }
    935          
    936            // First count the number of endpoints that match.
    937            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000128   90....       MOV     DPTR,#epList
   \   00012B   805C         SJMP    ??ZDO_ProcessMatchDescReq_9
    938            while ( epDesc )
    939            {
    940              // Don't search endpoint 0 and check if response is allowed
    941              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    942              {
    943                if ( epDesc->pfnDescCB )
    944                {
    945                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    946                  allocated = TRUE;
    947                }
    948                else
    949                {
    950                  sDesc = epDesc->epDesc->simpleDesc;
    951                  allocated = FALSE;
    952                }
    953          
    954                // Allow specific ProfileId or Wildcard ProfileID
    955                if ( sDesc && ( ( sDesc->AppProfId == profileID ) || ( profileID == ZDO_WILDCARD_PROFILE_ID ) ) )
    956                {
    957                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    958          
    959                  // Are there matching input clusters?
    960                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    961                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    962                      // Are there matching output clusters?
    963                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    964                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    965                  {
    966                    // Notify the endpoint of the match.
    967                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    968                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    969          
    970                    if (pRspSent)
    971                    {
    972                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    973                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    974                      pRspSent->numInClusters = numInClusters;
    975                      pRspSent->numOutClusters = numOutClusters;
    976          
    977                      if (numInClusters)
    978                      {
    979                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    980                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    981                      }
    982                      else
    983                      {
    984                        pRspSent->pInClusters = NULL;
    985                      }
    986          
    987                      if (numOutClusters)
    988                      {
    989                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    990                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    991                      }
    992                      else
    993                      {
    994                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   00012D   85..82       MOV     DPL,?V2
   \   000130   85..83       MOV     DPH,?V3
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   E4           CLR     A
   \   00013C   F0           MOVX    @DPTR,A
   \   00013D   A3           INC     DPTR
   \   00013E   F0           MOVX    @DPTR,A
    995                      }
    996          
    997                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00013F                ; Setup parameters for call to function osal_msg_send
   \   00013F   AA..         MOV     R2,?V2
   \   000141   AB..         MOV     R3,?V3
   \   000143   85..82       MOV     DPL,?V12
   \   000146   85..83       MOV     DPH,?V13
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   F8           MOV     R0,A
   \   00014D   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000150   F9           MOV     R1,A
   \   000151   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    998                    }
    999          
   1000                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   000154   85..82       MOV     DPL,?V10
   \   000157   85..83       MOV     DPH,?V11
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   C0E0         PUSH    A
   \   00015D   85..82       MOV     DPL,?XSP + 0
   \   000160   85..83       MOV     DPH,?XSP + 1
   \   000163   E0           MOVX    A,@DPTR
   \   000164   F8           MOV     R0,A
   \   000165   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   000167   28           ADD     A,R0
   \   000168   F582         MOV     DPL,A
   \   00016A   E4           CLR     A
   \   00016B   34..         ADDC    A,#(ZDOBuildBuf >> 8) & 0xff
   \   00016D   F583         MOV     DPH,A
   \   00016F   D0E0         POP     A
   \   000171   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000174   04           INC     A
   \   000175   F0           MOVX    @DPTR,A
   1001                  }
   1002                }
   1003          
   1004                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000176   E5..         MOV     A,?V9
   \   000178   A2E0         MOV     C,0xE0 /* A   */.0
   \   00017A   5007         JNC     ??ZDO_ProcessMatchDescReq_14
   1005                {
   1006                  osal_mem_free( sDesc );
   \   00017C                ; Setup parameters for call to function osal_mem_free
   \   00017C   AA..         MOV     R2,?V10
   \   00017E   AB..         MOV     R3,?V11
   \   000180   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1007                }
   1008              }
   1009              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000183   85..82       MOV     DPL,?V12
   \   000186   85..83       MOV     DPH,?V13
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   F5..         MOV     ?V12,A
   \   00018C   A3           INC     DPTR
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   F5..         MOV     ?V13,A
   \   000190   E5..         MOV     A,?V12
   \   000192   45..         ORL     A,?V13
   \   000194   7003         JNZ     $+5
   \   000196   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   000199   85..82       MOV     DPL,?V12
   \   00019C   85..83       MOV     DPH,?V13
   \   00019F   A3           INC     DPTR
   \   0001A0   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   0001A3   60DE         JZ      ??ZDO_ProcessMatchDescReq_14
   \   0001A5   85..82       MOV     DPL,?V12
   \   0001A8   85..83       MOV     DPH,?V13
   \   0001AB   A3           INC     DPTR
   \   0001AC   A3           INC     DPTR
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001B6   50CB         JNC     ??ZDO_ProcessMatchDescReq_14
   \   0001B8   85..82       MOV     DPL,?V12
   \   0001BB   85..83       MOV     DPH,?V13
   \   0001BE   A3           INC     DPTR
   \   0001BF   A3           INC     DPTR
   \   0001C0   A3           INC     DPTR
   \   0001C1   A3           INC     DPTR
   \   0001C2   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   0001C5   85..82       MOV     DPL,?V12
   \   0001C8   85..83       MOV     DPH,?V13
   \   0001CB   A3           INC     DPTR
   \   0001CC   A3           INC     DPTR
   \   0001CD   601F         JZ      ??ZDO_ProcessMatchDescReq_16
   \   0001CF                ; Setup parameters for indirect call
   \   0001CF   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   0001D2   FA           MOV     R2,A
   \   0001D3   7901         MOV     R1,#0x1
   \   0001D5   85..82       MOV     DPL,?V12
   \   0001D8   85..83       MOV     DPH,?V13
   \   0001DB   A3           INC     DPTR
   \   0001DC   A3           INC     DPTR
   \   0001DD   A3           INC     DPTR
   \   0001DE   A3           INC     DPTR
   \   0001DF   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   0001E2   12....       LCALL   ?CALL_IND
   \   0001E5   8A..         MOV     ?V10,R2
   \   0001E7   8B..         MOV     ?V11,R3
   \   0001E9   75..01       MOV     ?V9,#0x1
   \   0001EC   8010         SJMP    ??ZDO_ProcessMatchDescReq_17
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   0001EE   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   F5..         MOV     ?V10,A
   \   0001F7   A3           INC     DPTR
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   F5..         MOV     ?V11,A
   \   0001FB   75..00       MOV     ?V9,#0x0
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   0001FE   E5..         MOV     A,?V10
   \   000200   45..         ORL     A,?V11
   \   000202   7003         JNZ     $+5
   \   000204   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \   000207   85..82       MOV     DPL,?V10
   \   00020A   85..83       MOV     DPH,?V11
   \   00020D   A3           INC     DPTR
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   65..         XRL     A,?V0
   \   000211   7004         JNZ     ??ZDO_ProcessMatchDescReq_18
   \   000213   A3           INC     DPTR
   \   000214   E0           MOVX    A,@DPTR
   \   000215   65..         XRL     A,?V1
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000217   600F         JZ      ??ZDO_ProcessMatchDescReq_19
   \   000219   74FF         MOV     A,#-0x1
   \   00021B   65..         XRL     A,?V0
   \   00021D   7004         JNZ     ??ZDO_ProcessMatchDescReq_20
   \   00021F   74FF         MOV     A,#-0x1
   \   000221   65..         XRL     A,?V1
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   000223   6003         JZ      $+5
   \   000225   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   000228                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000228   85..82       MOV     DPL,?V10
   \   00022B   85..83       MOV     DPH,?V11
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000238   85..82       MOV     DPL,?V10
   \   00023B   85..83       MOV     DPH,?V11
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   E0           MOVX    A,@DPTR
   \   000245   FC           MOV     R4,A
   \   000246   7405         MOV     A,#0x5
   \   000248   12....       LCALL   ?XSTACK_DISP0_8
   \   00024B   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   00024E   A9..         MOV     R1,?V8
   \   000250   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000253   7402         MOV     A,#0x2
   \   000255   12....       LCALL   ?DEALLOC_XSTACK8
   \   000258   E9           MOV     A,R1
   \   000259   703C         JNZ     ??ZDO_ProcessMatchDescReq_21
   \   00025B                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   00025B   85..82       MOV     DPL,?V10
   \   00025E   85..83       MOV     DPH,?V11
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   A3           INC     DPTR
   \   000264   A3           INC     DPTR
   \   000265   A3           INC     DPTR
   \   000266   A3           INC     DPTR
   \   000267   A3           INC     DPTR
   \   000268   A3           INC     DPTR
   \   000269   A3           INC     DPTR
   \   00026A   A3           INC     DPTR
   \   00026B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00026E   85..82       MOV     DPL,?V10
   \   000271   85..83       MOV     DPH,?V11
   \   000274   A3           INC     DPTR
   \   000275   A3           INC     DPTR
   \   000276   A3           INC     DPTR
   \   000277   A3           INC     DPTR
   \   000278   A3           INC     DPTR
   \   000279   A3           INC     DPTR
   \   00027A   A3           INC     DPTR
   \   00027B   A3           INC     DPTR
   \   00027C   A3           INC     DPTR
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   FC           MOV     R4,A
   \   00027F   7403         MOV     A,#0x3
   \   000281   12....       LCALL   ?XSTACK_DISP0_8
   \   000284   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000287   A9..         MOV     R1,?V7
   \   000289   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00028C   7402         MOV     A,#0x2
   \   00028E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000291   E9           MOV     A,R1
   \   000292   7003         JNZ     $+5
   \   000294   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   000297                ; Setup parameters for call to function osal_msg_allocate
   \   000297   E5..         MOV     A,?V7
   \   000299   25..         ADD     A,?V8
   \   00029B   C3           CLR     C
   \   00029C   33           RLC     A
   \   00029D   240A         ADD     A,#0xa
   \   00029F   FA           MOV     R2,A
   \   0002A0   7B00         MOV     R3,#0x0
   \   0002A2   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0002A5   8A..         MOV     ?V2,R2
   \   0002A7   8B..         MOV     ?V3,R3
   \   0002A9   EA           MOV     A,R2
   \   0002AA   45..         ORL     A,?V3
   \   0002AC   7003         JNZ     $+5
   \   0002AE   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   0002B1   8A82         MOV     DPL,R2
   \   0002B3   8B83         MOV     DPH,R3
   \   0002B5   74D2         MOV     A,#-0x2e
   \   0002B7   F0           MOVX    @DPTR,A
   \   0002B8   85..82       MOV     DPL,?V14
   \   0002BB   85..83       MOV     DPH,?V15
   \   0002BE   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   0002C1   8A82         MOV     DPL,R2
   \   0002C3   8B83         MOV     DPH,R3
   \   0002C5   A3           INC     DPTR
   \   0002C6   A3           INC     DPTR
   \   0002C7   E8           MOV     A,R0
   \   0002C8   F0           MOVX    @DPTR,A
   \   0002C9   A3           INC     DPTR
   \   0002CA   E9           MOV     A,R1
   \   0002CB   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0002CE   A3           INC     DPTR
   \   0002CF   E5..         MOV     A,?V8
   \   0002D1   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0002D4   E5..         MOV     A,?V7
   \   0002D6   F0           MOVX    @DPTR,A
   \   0002D7   E5..         MOV     A,?V8
   \   0002D9   602F         JZ      ??ZDO_ProcessMatchDescReq_22
   \   0002DB   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   0002DE   35..         ADDC    A,?V3
   \   0002E0   FB           MOV     R3,A
   \   0002E1   85..82       MOV     DPL,?V2
   \   0002E4   85..83       MOV     DPH,?V3
   \   0002E7   A3           INC     DPTR
   \   0002E8   A3           INC     DPTR
   \   0002E9   A3           INC     DPTR
   \   0002EA   A3           INC     DPTR
   \   0002EB   A3           INC     DPTR
   \   0002EC   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0002EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F2   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   0002F5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002F8   AC..         MOV     R4,?V8
   \   0002FA   EC           MOV     A,R4
   \   0002FB   2C           ADD     A,R4
   \   0002FC   FC           MOV     R4,A
   \   0002FD   E4           CLR     A
   \   0002FE   33           RLC     A
   \   0002FF   FD           MOV     R5,A
   \   000300   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000303   7403         MOV     A,#0x3
   \   000305   12....       LCALL   ?DEALLOC_XSTACK8
   \   000308   800D         SJMP    ??ZDO_ProcessMatchDescReq_23
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   00030A   8A82         MOV     DPL,R2
   \   00030C   8B83         MOV     DPH,R3
   \   00030E   A3           INC     DPTR
   \   00030F   A3           INC     DPTR
   \   000310   A3           INC     DPTR
   \   000311   A3           INC     DPTR
   \   000312   A3           INC     DPTR
   \   000313   E4           CLR     A
   \   000314   F0           MOVX    @DPTR,A
   \   000315   A3           INC     DPTR
   \   000316   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   000317   E5..         MOV     A,?V7
   \   000319   7003         JNZ     $+5
   \   00031B   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
   \   00031E   A8..         MOV     R0,?V8
   \   000320   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000323   E5..         MOV     A,?V2
   \   000325   28           ADD     A,R0
   \   000326   F8           MOV     R0,A
   \   000327   E5..         MOV     A,?V3
   \   000329   39           ADDC    A,R1
   \   00032A   F9           MOV     R1,A
   \   00032B   E8           MOV     A,R0
   \   00032C   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   00032F   39           ADDC    A,R1
   \   000330   FB           MOV     R3,A
   \   000331   85..82       MOV     DPL,?V2
   \   000334   85..83       MOV     DPH,?V3
   \   000337   A3           INC     DPTR
   \   000338   A3           INC     DPTR
   \   000339   A3           INC     DPTR
   \   00033A   A3           INC     DPTR
   \   00033B   A3           INC     DPTR
   \   00033C   A3           INC     DPTR
   \   00033D   A3           INC     DPTR
   \   00033E   A3           INC     DPTR
   \   00033F   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000342                ; Setup parameters for call to function osal_memcpy
   \   000342   7401         MOV     A,#0x1
   \   000344   12....       LCALL   ?XSTACK_DISP0_8
   \   000347   12....       LCALL   ?Subroutine87 & 0xFFFF
   1010            }
   \                     ??CrossCallReturnLabel_142:
   \   00034A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00034D   AC..         MOV     R4,?V7
   \   00034F   EC           MOV     A,R4
   \   000350   2C           ADD     A,R4
   \   000351   FC           MOV     R4,A
   \   000352   E4           CLR     A
   \   000353   33           RLC     A
   \   000354   FD           MOV     R5,A
   \   000355   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000358   7403         MOV     A,#0x3
   \   00035A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00035D   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   1011          
   1012            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   000360   85..82       MOV     DPL,?XSP + 0
   \   000363   85..83       MOV     DPH,?XSP + 1
   \   000366   E0           MOVX    A,@DPTR
   \   000367   603E         JZ      ??ZDO_ProcessMatchDescReq_24
   1013            {
   1014              // Send the message if at least one match found.
   1015              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
   1016                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   000369                ; Setup parameters for call to function ZDP_EPRsp
   \   000369   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   00036C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00036F   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000372   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000375   78..         MOV     R0,#?V0
   \   000377   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00037A   7403         MOV     A,#0x3
   \   00037C   12....       LCALL   ?XSTACK_DISP0_8
   \   00037F   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000382   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000385   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000388   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00038B   75..00       MOV     ?V0,#0x0
   \   00038E   78..         MOV     R0,#?V0
   \   000390   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000393   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000396   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000399   7407         MOV     A,#0x7
   \   00039B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00039E   E9           MOV     A,R1
   \   00039F   7050         JNZ     ??ZDO_ProcessMatchDescReq_25
   1017              {
   1018          #if defined( LCD_SUPPORTED )
   1019                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   \   0003A1                ; Setup parameters for call to function HalLcdWriteScreen
   \   0003A1   7C..         MOV     R4,#`?<Constant "Rsp Sent">` & 0xff
   \   0003A3   7D..         MOV     R5,#(`?<Constant "Rsp Sent">` >> 8) & 0xff
   \   0003A5   8043         SJMP    ??ZDO_ProcessMatchDescReq_26
   1020          #endif
   1021              }
   1022            }
   1023            else
   1024            {
   1025              // No match found
   1026              if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   0003A7                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   0003A7   EE           MOV     A,R6
   \   0003A8   FA           MOV     R2,A
   \   0003A9   EF           MOV     A,R7
   \   0003AA   FB           MOV     R3,A
   \   0003AB   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   0003AE   E9           MOV     A,R1
   \   0003AF   7035         JNZ     ??ZDO_ProcessMatchDescReq_27
   1027              {
   1028                // send response message with match length = 0
   1029                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
   1030                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   0003B1                ; Setup parameters for call to function ZDP_EPRsp
   \   0003B1   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   0003B4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003B7   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   0003BA   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   0003BD   78..         MOV     R0,#?V0
   \   0003BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003C2   75..00       MOV     ?V0,#0x0
   \   0003C5   78..         MOV     R0,#?V0
   \   0003C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003CA   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0003CD   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0003D0   78..         MOV     R0,#?V0
   \   0003D2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003D5   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   0003D8   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0003DB   7407         MOV     A,#0x7
   \   0003DD   12....       LCALL   ?DEALLOC_XSTACK8
   1031          #if defined( LCD_SUPPORTED )
   1032                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
   \   0003E0                ; Setup parameters for call to function HalLcdWriteScreen
   \   0003E0   7C..         MOV     R4,#`?<Constant "Rsp Non Matched">` & 0xff
   \   0003E2   7D..         MOV     R5,#(`?<Constant "Rsp Non Matched">` >> 8) & 0xff
   \   0003E4   8004         SJMP    ??ZDO_ProcessMatchDescReq_26
   1033          #endif
   1034              }
   1035              else
   1036              {
   1037                // no response mesage for broadcast message
   1038          #if defined( LCD_SUPPORTED )
   1039                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   0003E6                ; Setup parameters for call to function HalLcdWriteScreen
   \   0003E6   7C..         MOV     R4,#`?<Constant "Non Matched">` & 0xff
   \   0003E8   7D..         MOV     R5,#(`?<Constant "Non Matched">` >> 8) & 0xff
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   0003EA   7A..         MOV     R2,#`?<Constant "Match Desc Req">` & 0xff
   \   0003EC   7B..         MOV     R3,#(`?<Constant "Match Desc Req">` >> 8) & 0xff
   \   0003EE   12....       LCALL   `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
   1040          #endif
   1041              }
   1042            }
   1043          
   1044            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   0003F1   7403         MOV     A,#0x3
   \   0003F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F6   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   0003F9   600B         JZ      ??ZDO_ProcessMatchDescReq_28
   1045            {
   1046              osal_mem_free( inClusters );
   \   0003FB                ; Setup parameters for call to function osal_mem_free
   \   0003FB   7403         MOV     A,#0x3
   \   0003FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000400   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   1047            }
   \                     ??CrossCallReturnLabel_427:
   \   000403   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1048          
   1049            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_28:
   \   000406   7401         MOV     A,#0x1
   \   000408   12....       LCALL   ?XSTACK_DISP0_8
   \   00040B   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   00040E   600B         JZ      ??ZDO_ProcessMatchDescReq_3
   1050            {
   1051              osal_mem_free( outClusters );
   \   000410                ; Setup parameters for call to function osal_mem_free
   \   000410   7401         MOV     A,#0x1
   \   000412   12....       LCALL   ?XSTACK_DISP0_8
   \   000415   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   1052            }
   \                     ??CrossCallReturnLabel_428:
   \   000418   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1053          }
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   00041B   7405         MOV     A,#0x5
   \   00041D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000420   7F10         MOV     R7,#0x10
   \   000422   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   000003   FD           MOV     R5,A
   \   000004   AA..         MOV     R2,?V2
   \   000006   AB..         MOV     R3,?V3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   E5..         MOV     A,?V14
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V15
   \   000008   FD           MOV     R5,A
   \   000009   E5..         MOV     A,?V14
   \   00000B   240F         ADD     A,#0xf
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   35..         ADDC    A,?V15
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   7A06         MOV     R2,#0x6
   \   000018   7B80         MOV     R3,#-0x80
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   75..00       MOV     ?V6,#0x0
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine206_0
   \   000002                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000005   7403         MOV     A,#0x3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   E5..         MOV     A,?V14
   \   000002   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   000005   35..         ADDC    A,?V15
   \   000007                REQUIRE ??Subroutine208_0
   \   000007                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine209_0
   \   000002                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine215_0
   \   000001                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine237_0
   \   000002                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine250_0
   \   000001                ; // Fall through to label ??Subroutine250_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   240A         ADD     A,#0xa
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine255_0:
   \   000000   2413         ADD     A,#0x13
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V7,A
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V2,DPL
   \   000007   8583..       MOV     ?V3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine258_0:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine262_0:
   \   000000   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_669:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
   1054          
   1055          #if defined ( REFLECTOR )
   1056          /*********************************************************************
   1057           * @fn      ZDO_ProcessBindUnbindReq()
   1058           *
   1059           * @brief   Called to process a Bind or Unbind Request message.
   1060           *
   1061           * @param   inMsg  - incoming message (request)
   1062           * @param   pReq - place to put parsed information
   1063           *
   1064           * @return  none
   1065           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1066          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
   1067          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1068            zAddrType_t SourceAddr;       // Binding Source addres
   1069            byte bindStat;
   1070          
   1071            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
   1072            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP101_8
   \   00001D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1073          
   1074            // If the local device is not the primary binding cache
   1075            // check the src address of the bind request.
   1076            // If it is not the local device's extended address
   1077            // discard the request.
   1078            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
   1079                  (pReq->dstAddress.addrMode != Addr64Bit &&
   1080                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000023   8A..         MOV     ?V2,R2
   \   000025   8B..         MOV     ?V3,R3
   \   000027   AC..         MOV     R4,?V2
   \   000029   AD..         MOV     R5,?V3
   \   00002B                ; Setup parameters for call to function sAddrExtCmp
   \   00002B   7403         MOV     A,#0x3
   \   00002D   12....       LCALL   ?XSTACK_DISP101_8
   \   000030   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000033   E9           MOV     A,R1
   \   000034   600A         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   000036   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000039   6010         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6401         XRL     A,#0x1
   \   00003E   600B         JZ      ??ZDO_ProcessBindUnbindReq_1
   1081            {
   1082              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   7484         MOV     A,#-0x7c
   \   000048   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1083            }
   1084            else
   1085            {
   1086              // Check source & destination endpoints
   1087              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
   1088                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1089                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6013         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00005A   F4           CPL     A
   \   00005B   6010         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00005D   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000060   7016         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000062   EE           MOV     A,R6
   \   000063   2414         ADD     A,#0x14
   \   000065   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000068   6003         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00006A   F4           CPL     A
   \   00006B   700B         JNZ     ??ZDO_ProcessBindUnbindReq_4
   1090              {
   1091                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   7482         MOV     A,#-0x7e
   \   000075   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1092              }
   1093              else
   1094              {
   1095                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   000078   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   6421         XRL     A,#0x21
   \   00007E   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   000082   6003         JZ      $+5
   \   000084   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
   1096                {
   1097                  // Assume the table is full
   1098                  bindStat = ZDP_TABLE_FULL;
   \   000087   85..82       MOV     DPL,?XSP + 0
   \   00008A   85..83       MOV     DPH,?XSP + 1
   \   00008D   748C         MOV     A,#-0x74
   \   00008F   12....       LCALL   ?Subroutine34 & 0xFFFF
   1099          
   1100          #if defined( APP_TP ) || defined( APP_TP2 )
   1101                  // For ZigBee Conformance Testing
   1102                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1103          #endif
   1104                  {
   1105          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1106                    uint16 nwkAddr;
   1107          
   1108                    // Verifies that a valid NWK address exists for the device
   1109                    // before creating a Binding entry. If NWK address does not
   1110                    // exist the request is sent out and the BindReq is saved, to
   1111                    // create the Bind Entry once the NwkAddrRsp is received
   1112                    if ( ( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1113                         ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE ) )
   \                     ??CrossCallReturnLabel_46:
   \   000092   6403         XRL     A,#0x3
   \   000094   6003         JZ      $+5
   \   000096   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   \   000099                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000099   7401         MOV     A,#0x1
   \   00009B   12....       LCALL   ?XSTACK_DISP102_8
   \   00009E   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   0000A1   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   0000A4   E9           MOV     A,R1
   \   0000A5   6003         JZ      $+5
   \   0000A7   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   1114                    {
   1115                      // find an empty bind slot in the pending Bind Req list
   1116                      ZDO_PendingBindReq_t *pPendingBind;
   1117          
   1118                      if ( ( pPendingBind = ZDApp_GetEmptyPendingBindReq() ) != NULL )
   \   0000AA                ; Setup parameters for call to function ZDApp_GetEmptyPendingBindReq
   \   0000AA   12....       LCALL   `??ZDApp_GetEmptyPendingBindReq::?relay`; Banked call to: ZDApp_GetEmptyPendingBindReq
   \   0000AD   8A..         MOV     ?V2,R2
   \   0000AF   8B..         MOV     ?V3,R3
   \   0000B1   EA           MOV     A,R2
   \   0000B2   45..         ORL     A,?V3
   \   0000B4   7003         JNZ     $+5
   \   0000B6   02....       LJMP    ??ZDO_ProcessBindUnbindReq_8 & 0xFFFF
   1119                      {
   1120                        // copy the received request into the empty slot and all required info
   1121                        osal_memcpy( &(pPendingBind->bindReq), pReq, sizeof( ZDO_BindUnbindReq_t ) );
   \   0000B9                ; Setup parameters for call to function osal_memcpy
   \   0000B9   8E..         MOV     ?V4,R6
   \   0000BB   8F..         MOV     ?V5,R7
   \   0000BD   75..00       MOV     ?V6,#0x0
   \   0000C0   78..         MOV     R0,#?V4
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C5   7C15         MOV     R4,#0x15
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CC   7403         MOV     A,#0x3
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
   1122          
   1123                        pPendingBind->srcAddr = inMsg->srcAddr;
   \   0000D1   85..82       MOV     DPL,?V0
   \   0000D4   85..83       MOV     DPH,?V1
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   E5..         MOV     A,?V2
   \   0000DB   2415         ADD     A,#0x15
   \   0000DD   FC           MOV     R4,A
   \   0000DE   E4           CLR     A
   \   0000DF   35..         ADDC    A,?V3
   \   0000E1   FD           MOV     R5,A
   \   0000E2   7409         MOV     A,#0x9
   \   0000E4   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1124                        pPendingBind->securityUse = inMsg->SecurityUse;
   \   0000E7   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   0000EA   C0E0         PUSH    A
   \   0000EC   E5..         MOV     A,?V2
   \   0000EE   241E         ADD     A,#0x1e
   \   0000F0   F582         MOV     DPL,A
   \   0000F2   E4           CLR     A
   \   0000F3   35..         ADDC    A,?V3
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   D0E0         POP     A
   \   0000F9   12....       LCALL   ?Subroutine29 & 0xFFFF
   1125                        pPendingBind->transSeq = inMsg->TransSeq;
   \                     ??CrossCallReturnLabel_35:
   \   0000FC   C0E0         PUSH    A
   \   0000FE   E5..         MOV     A,?V2
   \   000100   241F         ADD     A,#0x1f
   \   000102   F582         MOV     DPL,A
   \   000104   E4           CLR     A
   \   000105   35..         ADDC    A,?V3
   \   000107   F583         MOV     DPH,A
   \   000109   D0E0         POP     A
   \   00010B   F0           MOVX    @DPTR,A
   1126                        pPendingBind->age = MAX_TIME_ADDR_REQ;
   \   00010C   E5..         MOV     A,?V2
   \   00010E   2420         ADD     A,#0x20
   \   000110   F582         MOV     DPL,A
   \   000112   E4           CLR     A
   \   000113   35..         ADDC    A,?V3
   \   000115   F583         MOV     DPH,A
   \   000117   7405         MOV     A,#0x5
   \   000119   F0           MOVX    @DPTR,A
   1127          
   1128                        // create an entry in Address Manager
   1129                        ( void )bindAddrIndexGet( &(pReq->dstAddress) );
   \   00011A   EE           MOV     A,R6
   \   00011B   240B         ADD     A,#0xb
   \   00011D   FE           MOV     R6,A
   \   00011E   5001         JNC     ??ZDO_ProcessBindUnbindReq_9
   \   000120   0F           INC     R7
   \                     ??ZDO_ProcessBindUnbindReq_9:
   \   000121                ; Setup parameters for call to function bindAddrIndexGet
   \   000121   FA           MOV     R2,A
   \   000122   EF           MOV     A,R7
   \   000123   FB           MOV     R3,A
   \   000124   12....       LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   1130          
   1131                        ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000127                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000127   7D00         MOV     R5,#0x0
   \   000129   7C00         MOV     R4,#0x0
   \   00012B   7900         MOV     R1,#0x0
   \   00012D   EE           MOV     A,R6
   \   00012E   FA           MOV     R2,A
   \   00012F   EF           MOV     A,R7
   \   000130   FB           MOV     R3,A
   \   000131   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   1132          
   1133                        osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   1134                                            AGE_OUT_PEND_BIND_REQ_DELAY );
   \   000134                ; Setup parameters for call to function osal_start_timerEx
   \   000134   90....       MOV     DPTR,#__Constant_3e8
   \   000137   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00013A   7A00         MOV     R2,#0x0
   \   00013C   7B10         MOV     R3,#0x10
   \   00013E   90....       MOV     DPTR,#ZDAppTaskID
   \   000141   E0           MOVX    A,@DPTR
   \   000142   F9           MOV     R1,A
   \   000143   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000146   7404         MOV     A,#0x4
   \   000148   12....       LCALL   ?DEALLOC_XSTACK8
   1135                        return;
   \   00014B   8078         SJMP    ??ZDO_ProcessBindUnbindReq_10
   1136                      }
   1137                    }
   1138                    // Add Bind entry
   1139                    else if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1140                                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   00014D                ; Setup parameters for call to function APSME_BindRequest
   \   00014D   12....       LCALL   ?Subroutine127 & 0xFFFF
   1141                    {
   1142                      // valid entry
   1143                      bindStat = ZDP_SUCCESS;
   1144          
   1145                      // Notify to save info into NV
   1146                      ZDApp_NVUpdate();
   1147                    }
   1148          #else // ZDP_BIND_SKIP_VALIDATION  is defined
   1149                    // Create binding entry first independently of existance of  valid NWK addres
   1150                    // if NWK address does not exist a request is sent out
   1151                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1152                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   1153                    {
   1154                      uint16 nwkAddr;
   1155          
   1156                      // valid entry
   1157                      bindStat = ZDP_SUCCESS;
   1158          
   1159                      // Notify to save info into NV
   1160                      ZDApp_NVUpdate();
   1161          
   1162                      // Check for the destination address
   1163                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   1164                      {
   1165                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   1166                        {
   1167                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1168                        }
   1169                      }
   1170                    }
   1171          #endif
   1172                  }
   1173                }
   \                     ??CrossCallReturnLabel_199:
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000153   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000156   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   000159   7401         MOV     A,#0x1
   \   00015B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015E   E9           MOV     A,R1
   \   00015F   702C         JNZ     ??ZDO_ProcessBindUnbindReq_8
   \   000161   8014         SJMP    ??ZDO_ProcessBindUnbindReq_11
   1174                else // Unbind_req
   1175                {
   1176                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1177                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   000163                ; Setup parameters for call to function APSME_UnBindRequest
   \   000163   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000166   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000169   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00016C   12....       LCALL   `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   00016F   7401         MOV     A,#0x1
   \   000171   12....       LCALL   ?DEALLOC_XSTACK8
   \   000174   E9           MOV     A,R1
   \   000175   700D         JNZ     ??ZDO_ProcessBindUnbindReq_12
   1178                  {
   1179                    bindStat = ZDP_SUCCESS;
   \                     ??ZDO_ProcessBindUnbindReq_11:
   \   000177   85..82       MOV     DPL,?XSP + 0
   \   00017A   85..83       MOV     DPH,?XSP + 1
   \   00017D   E4           CLR     A
   \   00017E   F0           MOVX    @DPTR,A
   1180          
   1181                    // Notify to save info into NV
   1182                    ZDApp_NVUpdate();
   \   00017F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00017F   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000182   8009         SJMP    ??ZDO_ProcessBindUnbindReq_8
   1183                  }
   1184                  else
   1185                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_12:
   \   000184   85..82       MOV     DPL,?XSP + 0
   \   000187   85..83       MOV     DPH,?XSP + 1
   \   00018A   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   00018C   F0           MOVX    @DPTR,A
   1186                }
   1187              }
   1188            }
   1189          
   1190            // Send back a response message
   1191            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1192                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1193                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   00018D                ; Setup parameters for call to function ZDP_SendData
   \   00018D   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000190   F5..         MOV     ?V2,A
   \   000192   78..         MOV     R0,#?V2
   \   000194   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000197   7401         MOV     A,#0x1
   \   000199   12....       LCALL   ?XSTACK_DISP100_8
   \   00019C   88..         MOV     ?V2,R0
   \   00019E   89..         MOV     ?V3,R1
   \   0001A0   78..         MOV     R0,#?V2
   \   0001A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A5   E5..         MOV     A,?V0
   \   0001A7   240C         ADD     A,#0xc
   \   0001A9   F582         MOV     DPL,A
   \   0001AB   E4           CLR     A
   \   0001AC   35..         ADDC    A,?V1
   \   0001AE   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   0001B1   4480         ORL     A,#0x80
   \   0001B3   F5..         MOV     ?V3,A
   \   0001B5   78..         MOV     R0,#?V2
   \   0001B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BA   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   0001BD   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0001C0   7405         MOV     A,#0x5
   \   0001C2   12....       LCALL   ?DEALLOC_XSTACK8
   1194          }
   \                     ??ZDO_ProcessBindUnbindReq_10:
   \   0001C5   740C         MOV     A,#0xc
   \   0001C7                REQUIRE ?Subroutine9
   \   0001C7                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   80..         SJMP    ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V2,A
   \   000007   78..         MOV     R0,#?V2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   6403         XRL     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FD           MOV     R5,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E5..         MOV     A,?V0
   \   000003   240F         ADD     A,#0xf
   \   000005   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine217_0
   \   000003                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   35..         ADDC    A,?V1
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   7901         MOV     R1,#0x1
   \   000002   E5..         MOV     A,?V0
   \   000004   2402         ADD     A,#0x2
   \   000006   FC           MOV     R4,A
   \   000007   E4           CLR     A
   \   000008   35..         ADDC    A,?V1
   \   00000A   FD           MOV     R5,A
   \   00000B   E5..         MOV     A,?V0
   \   00000D   240F         ADD     A,#0xf
   \   00000F   FA           MOV     R2,A
   \   000010   E4           CLR     A
   \   000011   35..         ADDC    A,?V1
   \   000013   FB           MOV     R3,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   E5..         MOV     A,?V0
   \   000002   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_580:
   \   000005   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   2414         ADD     A,#0x14
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   E5..         MOV     A,?V0
   \   000002   240C         ADD     A,#0xc
   \   000004                REQUIRE ??Subroutine244_0
   \   000004                ; // Fall through to label ??Subroutine244_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine245_0
   \   000003                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   35..         ADDC    A,?V1
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
   1195          #endif // REFLECTOR
   1196          
   1197          /*********************************************************************
   1198           * @fn      ZDO_UpdateAddrManager
   1199           *
   1200           * @brief   Update the Address Manager.
   1201           *
   1202           * @param   nwkAddr - network address
   1203           * @param   extAddr - extended address
   1204           *
   1205           * @return  none
   1206           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1207          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1208          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1209            AddrMgrEntry_t addrEntry;
   1210          
   1211            // Update the address manager
   1212            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1213            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC     A
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine45 & 0xFFFF
   1214            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_70:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   AA82         MOV     R2,DPL
   \   00001D   AB83         MOV     R3,DPH
   \   00001F   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1215            AddrMgrEntryUpdate( &addrEntry );
   \   000022                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000022   AA..         MOV     R2,?XSP + 0
   \   000024   AB..         MOV     R3,?XSP + 1
   \   000026   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1216          }
   \   000029   740D         MOV     A,#0xd
   \   00002B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002E   02....       LJMP    ?Subroutine0 & 0xFFFF
   1217          
   1218          /*********************************************************************
   1219           * @fn      ZDO_ProcessServerDiscReq
   1220           *
   1221           * @brief   Process the Server_Discovery_req message.
   1222           *
   1223           * @param   inMsg  - incoming message (request)
   1224           *
   1225           * @return  none
   1226           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1227          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1228          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine75 & 0xFFFF
   1229            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1230            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_118:
   \   000008   FA           MOV     R2,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   EA           MOV     A,R2
   \   00000D   F8           MOV     R0,A
   \   00000E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   58           ANL     A,R0
   \   000013   F5..         MOV     ?V0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   59           ANL     A,R1
   \   000018   F5..         MOV     ?V1,A
   1231          
   1232            if ( matchMask )
   \   00001A   E5..         MOV     A,?V0
   \   00001C   45..         ORL     A,?V1
   \   00001E   601C         JZ      ??ZDO_ProcessServerDiscReq_0
   1233            {
   1234              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1235                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000020                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000028   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002B   12....       LCALL   ?Subroutine128 & 0xFFFF
   1236            }
   \                     ??CrossCallReturnLabel_508:
   \   00002E   FD           MOV     R5,A
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000034   12....       LCALL   `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   000037   7404         MOV     A,#0x4
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   1237          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00003C   02....       LJMP    ??Subroutine204_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   EE           MOV     A,R6
   \   000005   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_621:
   \   000008   3F           ADDC    A,R7
   \   000009   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003                REQUIRE ??Subroutine222_0
   \   000003                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   22           RET
   1238          
   1239          #if defined ( ZIGBEE_CHILD_AGING )
   1240          /*********************************************************************
   1241           * @fn          ZDO_ProcessEndDeviceTimeoutReq
   1242           *
   1243           * @brief       This function processes and responds to the
   1244           *              End_Device_Timeout_Req message.
   1245           *
   1246           * @param       inMsg  - incoming message (request)
   1247           *
   1248           * @return      none
   1249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine202_0
   \   000003                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1250          void ZDO_ProcessEndDeviceTimeoutReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessEndDeviceTimeoutReq:
   1251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1252            uint8 stat = ZDP_SUCCESS;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   1253            uint8 *ieee = NULL;
   1254            uint16 reqTimeout;
   1255          
   1256            // Only process this message if Child Table Management is enabled OR
   1257            // If message was broadcast OR multicast OR
   1258            // if the NWK src and the MAC src are not the same) drop message
   1259            if ( ( zgChildAgingEnable == FALSE ) ||
   1260                 ( inMsg->wasBroadcast == TRUE ) ||
   1261                 ( inMsg->srcAddr.addr.shortAddr != inMsg->macSrcAddr ) )
   \   000016   90....       MOV     DPTR,#zgChildAgingEnable
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   601F         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   00001C   EE           MOV     A,R6
   \   00001D   240B         ADD     A,#0xb
   \   00001F   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000022   6401         XRL     A,#0x1
   \   000024   6015         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   00002D   EE           MOV     A,R6
   \   00002E   2415         ADD     A,#0x15
   \   000030   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000033   68           XRL     A,R0
   \   000034   7003         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_1
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   69           XRL     A,R1
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_1:
   \   000039   6003         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_2
   1262            {
   1263              // the message does not come from a child, drop it
   1264              return;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_0:
   \   00003B   02....       LJMP    ??ZDO_ProcessEndDeviceTimeoutReq_3 & 0xFFFF
   1265            }
   1266          
   1267            ieee = inMsg->asdu;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_2:
   \   00003E   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000041   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   000044   E8           MOV     A,R0
   \   000045   FA           MOV     R2,A
   \   000046   E9           MOV     A,R1
   \   000047   FB           MOV     R3,A
   1268          
   1269            reqTimeout = BUILD_UINT16( inMsg->asdu[Z_EXTADDR_LEN], inMsg->asdu[Z_EXTADDR_LEN+1] );
   \   000048   8882         MOV     DPL,R0
   \   00004A   8983         MOV     DPH,R1
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FC           MOV     R4,A
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   \   000065   E4           CLR     A
   \   000066   C8           XCH     A,R0
   \   000067   F9           MOV     R1,A
   \   000068   EC           MOV     A,R4
   \   000069   28           ADD     A,R0
   \   00006A   F5..         MOV     ?V0,A
   \   00006C   E4           CLR     A
   \   00006D   39           ADDC    A,R1
   \   00006E   F5..         MOV     ?V1,A
   1270          
   1271            if ( ( ( reqTimeout < ZDO_MIN_REQ_TIMEOUT ) || ( reqTimeout > ZDO_MAX_REQ_TIMEOUT ) ) ||
   1272                 ( ZSTACK_END_DEVICE_BUILD ) )
   \   000070   EC           MOV     A,R4
   \   000071   45..         ORL     A,?V1
   \   000073   6008         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_4
   \   000075   EC           MOV     A,R4
   \   000076   9471         SUBB    A,#0x71
   \   000078   E9           MOV     A,R1
   \   000079   9408         SUBB    A,#0x8
   \   00007B   400A         JC      ??ZDO_ProcessEndDeviceTimeoutReq_5
   1273            {
   1274              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_4:
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   7480         MOV     A,#-0x80
   \   000085   8038         SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_6
   1275            }
   1276            else
   1277            {
   1278              associated_devices_t *pAssoc;
   1279          
   1280              if ( ( ( pAssoc = AssocGetWithExt( ieee ) ) != NULL ) &&
   1281                   ( ( pAssoc->nodeRelation >= CHILD_RFD ) &&
   1282                     ( pAssoc->nodeRelation <= CHILD_RFD_RX_IDLE ) ) )
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_5:
   \   000087                ; Setup parameters for call to function AssocGetWithExt
   \   000087   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   00008A   8A..         MOV     ?V2,R2
   \   00008C   8B..         MOV     ?V3,R3
   \   00008E   A8..         MOV     R0,?V2
   \   000090   A9..         MOV     R1,?V3
   \   000092   E8           MOV     A,R0
   \   000093   49           ORL     A,R1
   \   000094   6021         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_7
   \   000096   8882         MOV     DPL,R0
   \   000098   8983         MOV     DPH,R1
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   6016         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_7
   \   0000A1   C3           CLR     C
   \   0000A2   9403         SUBB    A,#0x3
   \   0000A4   5011         JNC     ??ZDO_ProcessEndDeviceTimeoutReq_7
   1283              {
   1284                pAssoc->timeoutCounter = reqTimeout;
   \   0000A6   E8           MOV     A,R0
   \   0000A7   2412         ADD     A,#0x12
   \   0000A9   12....       LCALL   ?Subroutine115 & 0xFFFF
   1285                pAssoc->endDevKaTimeout = reqTimeout;
   \                     ??CrossCallReturnLabel_179:
   \   0000AC   E8           MOV     A,R0
   \   0000AD   2414         ADD     A,#0x14
   \   0000AF   12....       LCALL   ?Subroutine115 & 0xFFFF
   1286          
   1287                // Set event to save NV
   1288                ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_180:
   \   0000B2                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000B2   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   0000B5   8009         SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_8
   1289              }
   1290              else
   1291              {
   1292                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_7:
   \   0000B7   85..82       MOV     DPL,?XSP + 0
   \   0000BA   85..83       MOV     DPH,?XSP + 1
   \   0000BD   7481         MOV     A,#-0x7f
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_6:
   \   0000BF   F0           MOVX    @DPTR,A
   1293              }
   1294          
   1295            }
   1296          
   1297            ZDP_EndDeviceTimeoutRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
   1298                                     inMsg->SecurityUse );
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_8:
   \   0000C0                ; Setup parameters for call to function ZDP_SendData
   \   0000C0   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   0000C3   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C9   7401         MOV     A,#0x1
   \   0000CB   12....       LCALL   ?XSTACK_DISP100_8
   \   0000CE   88..         MOV     ?V0,R0
   \   0000D0   89..         MOV     ?V1,R1
   \   0000D2   78..         MOV     R0,#?V0
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D7   75..1F       MOV     ?V0,#0x1f
   \   0000DA   75..80       MOV     ?V1,#-0x80
   \   0000DD   78..         MOV     R0,#?V0
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E2   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   0000E5   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000E8   7405         MOV     A,#0x5
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   1299          }
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_3:
   \   0000ED   7401         MOV     A,#0x1
   \   0000EF   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   39           ADDC    A,R1
   \   000004   F583         MOV     DPH,A
   \   000006   E5..         MOV     A,?V0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E5..         MOV     A,?V1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   7901         MOV     R1,#0x1
   \   000002                REQUIRE ??Subroutine221_0
   \   000002                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   000003   3F           ADDC    A,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003   22           RET
   1300          #endif // ZIGBEE_CHILD_AGING
   1301          
   1302          /*********************************************************************
   1303           * Call Back Functions from APS  - API
   1304           */
   1305          
   1306          /*********************************************************************
   1307           * @fn          ZDO_EndDeviceTimeoutCB
   1308           *
   1309           * @brief       This function handles the binding timer for the End
   1310           *              Device Bind command.
   1311           *
   1312           * @param       none
   1313           *
   1314           * @return      none
   1315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1316          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1317          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1318          #if defined ( REFLECTOR )
   1319            byte stat;
   1320            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1321            {
   1322              stat = ZDO_EDBind->status;
   1323          
   1324              // Send the response message to the first sent
   1325              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1326                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C8           XCH     A,R0
   \   000017   2416         ADD     A,#0x16
   \   000019   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000025   F583         MOV     DPH,A
   \   000027   8882         MOV     DPL,R0
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C0E0         PUSH    A
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   D0E0         POP     A
   \   000033   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000036   C8           XCH     A,R0
   \   000037   2415         ADD     A,#0x15
   \   000039   F582         MOV     DPL,A
   \   00003B   E4           CLR     A
   \   00003C   38           ADDC    A,R0
   \   00003D   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000043   7401         MOV     A,#0x1
   \   000045   12....       LCALL   ?XSTACK_DISP100_8
   \   000048   88..         MOV     ?V0,R0
   \   00004A   89..         MOV     ?V1,R1
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   75..20       MOV     ?V0,#0x20
   \   000054   75..80       MOV     ?V1,#-0x80
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   7901         MOV     R1,#0x1
   \   00005E   90....       MOV     DPTR,#ZDO_EDBind
   \   000061   E0           MOVX    A,@DPTR
   \   000062   29           ADD     A,R1
   \   000063   FC           MOV     R4,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   3400         ADDC    A,#0x0
   \   000068   FD           MOV     R5,A
   \   000069   7406         MOV     A,#0x6
   \   00006B   12....       LCALL   ?XSTACK_DISP101_8
   \   00006E   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000071   7405         MOV     A,#0x5
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076                ; Setup parameters for call to function HalLcdWriteString
   \   000076   7901         MOV     R1,#0x1
   \   000078   7A..         MOV     R2,#`?<Constant "End Device Bind">` & 0xff
   \   00007A   7B..         MOV     R3,#(`?<Constant "End Device Bind">` >> 8) & 0xff
   \   00007C   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00007F   85..82       MOV     DPL,?XSP + 0
   \   000082   85..83       MOV     DPH,?XSP + 1
   \   000085   E0           MOVX    A,@DPTR
   \   000086   7903         MOV     R1,#0x3
   \   000088   7006         JNZ     ??ZDO_EndDeviceTimeoutCB_1
   \   00008A                ; Setup parameters for call to function HalLcdWriteString
   \   00008A   7A..         MOV     R2,#`?<Constant "Success Sent">` & 0xff
   \   00008C   7B..         MOV     R3,#(`?<Constant "Success Sent">` >> 8) & 0xff
   \   00008E   8004         SJMP    ??ZDO_EndDeviceTimeoutCB_2
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   000090                ; Setup parameters for call to function HalLcdWriteString
   \   000090   7A..         MOV     R2,#`?<Constant "Timeout">` & 0xff
   \   000092   7B..         MOV     R3,#(`?<Constant "Timeout">` >> 8) & 0xff
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   000094   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1327          
   1328              ZDO_RemoveEndDeviceBind();
   \   000097   90....       MOV     DPTR,#ZDO_EDBind
   \   00009A   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   00009D   604C         JZ      ??ZDO_EndDeviceTimeoutCB_0
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   C8           XCH     A,R0
   \   0000A1   2410         ADD     A,#0x10
   \   0000A3   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   0000A6   6014         JZ      ??ZDO_EndDeviceTimeoutCB_3
   \   0000A8                ; Setup parameters for call to function osal_mem_free
   \   0000A8   90....       MOV     DPTR,#ZDO_EDBind
   \   0000AB   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   0000AE   2410         ADD     A,#0x10
   \   0000B0   F582         MOV     DPL,A
   \   0000B2   E4           CLR     A
   \   0000B3   38           ADDC    A,R0
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   0000B9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_3:
   \   0000BC   90....       MOV     DPTR,#ZDO_EDBind
   \   0000BF   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   0000C2   2413         ADD     A,#0x13
   \   0000C4   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   0000C7   6012         JZ      ??ZDO_EndDeviceTimeoutCB_4
   \   0000C9                ; Setup parameters for call to function osal_mem_free
   \   0000C9   90....       MOV     DPTR,#ZDO_EDBind
   \   0000CC   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   0000CF   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   0000D2   38           ADDC    A,R0
   \   0000D3   F583         MOV     DPH,A
   \   0000D5   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   0000D8   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_4:
   \   0000DB                ; Setup parameters for call to function osal_mem_free
   \   0000DB   90....       MOV     DPTR,#ZDO_EDBind
   \   0000DE   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   0000E1   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E4   90....       MOV     DPTR,#ZDO_EDBind
   \   0000E7   E4           CLR     A
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   F0           MOVX    @DPTR,A
   1329            }
   1330          #endif  // REFLECTOR
   1331          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000EB   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   90....       MOV     DPTR,#ZDO_EDBind
   \   000004   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004                REQUIRE ??Subroutine223_0
   \   000004                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine224_0
   \   000002                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_576:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C8           XCH     A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   000003   22           RET
   1332          
   1333          /*********************************************************************
   1334           * Optional Management Messages
   1335           */
   1336          
   1337          /*********************************************************************
   1338           * @fn          ZDO_ProcessMgmtLqiReq
   1339           *
   1340           * @brief       This function handles parsing the incoming Management
   1341           *              LQI request and generate the response.
   1342           *
   1343           *   Note:      This function will limit the number of items returned
   1344           *              to ZDO_MAX_LQI_ITEMS items.
   1345           *
   1346           * @param       inMsg - incoming message (request)
   1347           *
   1348           * @return      none
   1349           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1350          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1351          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V12,R2
   \   00000C   8B..         MOV     ?V13,R3
   1352            byte x;
   1353            byte index;
   1354            byte numItems;
   1355            byte maxItems;
   1356            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV     ?V10,#0x0
   \   000011   75..00       MOV     ?V11,#0x0
   1357            ZDP_MgmtLqiItem_t* item;
   1358            neighborEntry_t    entry;
   1359            byte aItems;
   1360            associated_devices_t *aDevice;
   1361            AddrMgrEntry_t  nwkEntry;
   1362            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000017   35..         ADDC    A,?V13
   \   000019   F583         MOV     DPH,A
   \   00001B   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   00001E   F5..         MOV     ?V6,A
   1363          
   1364            // Get the number of neighbor items
   1365            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000020                ; Setup parameters for call to function NLME_GetRequest
   \   000020   AC..         MOV     R4,?XSP + 0
   \   000022   AD..         MOV     R5,?XSP + 1
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B00         MOV     R3,#0x0
   \   000028   799C         MOV     R1,#-0x64
   \   00002A   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1366          
   1367            // Get the number of associated items
   1368            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00002D                ; Setup parameters for call to function AssocCount
   \   00002D   7A04         MOV     R2,#0x4
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   `??AssocCount::?relay`; Banked call to: AssocCount
   \   000034   EA           MOV     A,R2
   \   000035   F5..         MOV     ?V4,A
   1369          
   1370            // Total number of items
   1371            maxItems += aItems;
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   2A           ADD     A,R2
   \   00003F   F0           MOVX    @DPTR,A
   1372          
   1373            // Start with the supplied index
   1374            if ( maxItems > StartIndex )
   \   000040   F8           MOV     R0,A
   \   000041   E5..         MOV     A,?V6
   \   000043   C3           CLR     C
   \   000044   98           SUBB    A,R0
   \   000045   4003         JC      $+5
   \   000047   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1375            {
   1376              numItems = maxItems - StartIndex;
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C3           CLR     C
   \   00004C   95..         SUBB    A,?V6
   \   00004E   F5..         MOV     ?V1,A
   1377          
   1378              // limit the size of the list
   1379              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000050   C3           CLR     C
   \   000051   9404         SUBB    A,#0x4
   \   000053   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1380                numItems = ZDO_MAX_LQI_ITEMS;
   \   000055   75..03       MOV     ?V1,#0x3
   1381          
   1382              // Allocate the memory to build the table
   1383              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1384                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   E5..         MOV     A,?V1
   \   00005A   75F01A       MOV     B,#0x1a
   \   00005D   A4           MUL     AB
   \   00005E   FA           MOV     R2,A
   \   00005F   ABF0         MOV     R3,B
   \   000061   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000064   8A..         MOV     ?V10,R2
   \   000066   8B..         MOV     ?V11,R3
   1385          
   1386              if ( table != NULL )
   \   000068   EA           MOV     A,R2
   \   000069   45..         ORL     A,?V11
   \   00006B   7003         JNZ     $+5
   \   00006D   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1387              {
   1388                x = 0;
   \   000070   75..00       MOV     ?V5,#0x0
   1389                item = table;
   \   000073   AE..         MOV     R6,?V10
   \   000075   AF..         MOV     R7,?V11
   1390                index = StartIndex;
   \   000077   85....       MOV     ?V0,?V6
   \   00007A   807E         SJMP    ??ZDO_ProcessMgmtLqiReq_3
   1391          
   1392                // Loop through associated items and build list
   1393                for ( ; x < numItems; x++ )
   1394                {
   1395                  if ( index < aItems )
   1396                  {
   1397                    // get next associated device
   1398                    aDevice = AssocFindDevice( index++ );
   1399          
   1400                    // set basic fields
   1401                    item->panID   = _NIB.nwkPanId;
   1402                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1403                    item->nwkAddr = aDevice->shortAddr;
   1404                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1405                    item->depth   = 0xFF;
   1406                    item->lqi     = aDevice->linkInfo.rxLqi;
   1407          
   1408                    // set extented address
   1409                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1410                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1411          
   1412                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1413                    {
   1414                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1415                    }
   1416                    else
   1417                    {
   1418                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00007C                ; Setup parameters for call to function osal_memset
   \   00007C   12....       LCALL   ?Subroutine138 & 0xFFFF
   1419                    }
   \                     ??CrossCallReturnLabel_339:
   \   00007F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1420          
   1421                    // use association info to set other fields
   1422                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   000082   85..82       MOV     DPL,?V2
   \   000085   85..83       MOV     DPH,?V3
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   702D         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1423                    {
   1424                      if (  aDevice->shortAddr == 0 )
   \   00008F   85..82       MOV     DPL,?V2
   \   000092   85..83       MOV     DPH,?V3
   \   000095   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000098   700C         JNZ     ??ZDO_ProcessMgmtLqiReq_7
   1425                      {
   1426                        item->devType = ZDP_MGMT_DT_COORD;
   \   00009A   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   00009D   F0           MOVX    @DPTR,A
   1427                        item->depth = 0;
   \   00009E   EE           MOV     A,R6
   \   00009F   2418         ADD     A,#0x18
   \   0000A1   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   1428                      }
   \                     ??CrossCallReturnLabel_490:
   \   0000A4   8010         SJMP    ??ZDO_ProcessMgmtLqiReq_8
   1429                      else
   1430                      {
   1431                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000A6   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   0000A9   F0           MOVX    @DPTR,A
   1432                        item->depth = _NIB.nodeDepth - 1;
   \   0000AA   90....       MOV     DPTR,#_NIB + 52
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   14           DEC     A
   \   0000AF   C0E0         PUSH    A
   \   0000B1   12....       LCALL   ?Subroutine143 & 0xFFFF
   1433                      }
   1434          
   1435                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1436                      item->relation = ZDP_MGMT_REL_PARENT;
   1437                    }
   \                     ??CrossCallReturnLabel_232:
   \   0000B4   D0E0         POP     A
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000B6   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B9   E4           CLR     A
   \   0000BA   8034         SJMP    ??CrossCallReturnLabel_342
   1438                    else
   1439                    {
   1440                      // If not parent, then it's a child
   1441                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000BC   90....       MOV     DPTR,#_NIB + 52
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   04           INC     A
   \   0000C1   C0E0         PUSH    A
   \   0000C3   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   0000C6   D0E0         POP     A
   \   0000C8   12....       LCALL   ?Subroutine17 & 0xFFFF
   1442          
   1443                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_13:
   \   0000CB   C3           CLR     C
   \   0000CC   9403         SUBB    A,#0x3
   \   0000CE   EE           MOV     A,R6
   \   0000CF   4003         JC      $+5
   \   0000D1   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_9 & 0xFFFF
   1444                      {
   1445                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000D4   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   1446          
   1447                        if ( aDevice->nodeRelation == CHILD_RFD )
   1448                        {
   1449                          item->rxOnIdle = FALSE;
   1450                        }
   1451                        else
   1452                        {
   1453                          item->rxOnIdle = TRUE;
   1454                        }
   1455                      }
   \                     ??CrossCallReturnLabel_513:
   \   0000D7   7402         MOV     A,#0x2
   \   0000D9   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000DC   6401         XRL     A,#0x1
   \   0000DE   7003         JNZ     $+5
   \   0000E0   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1456                      else
   1457                      {
   1458                        item->devType = ZDP_MGMT_DT_ROUTER;
   1459          
   1460                        if ( aDevice->nodeRelation == CHILD_FFD )
   1461                        {
   1462                          item->rxOnIdle = FALSE;
   1463                        }
   1464                        else
   1465                        {
   1466                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0000E3   EE           MOV     A,R6
   \   0000E4   2415         ADD     A,#0x15
   \   0000E6   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   1467                        }
   \                     ??CrossCallReturnLabel_341:
   \   0000E9   F0           MOVX    @DPTR,A
   1468                      }
   1469          
   1470                      item->relation = ZDP_MGMT_REL_CHILD;
   \   0000EA   EE           MOV     A,R6
   \   0000EB   2416         ADD     A,#0x16
   \   0000ED   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   0000F0   F0           MOVX    @DPTR,A
   1471                    }
   1472          
   1473                    item++;
   \   0000F1   EE           MOV     A,R6
   \   0000F2   241A         ADD     A,#0x1a
   \   0000F4   FE           MOV     R6,A
   \   0000F5   5001         JNC     ??ZDO_ProcessMgmtLqiReq_12
   \   0000F7   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   0000F8   05..         INC     ?V5
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   0000FA   E5..         MOV     A,?V5
   \   0000FC   C3           CLR     C
   \   0000FD   95..         SUBB    A,?V1
   \   0000FF   4003         JC      $+5
   \   000101   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   \   000104   E5..         MOV     A,?V0
   \   000106   C3           CLR     C
   \   000107   95..         SUBB    A,?V4
   \   000109   4003         JC      $+5
   \   00010B   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_14 & 0xFFFF
   \   00010E                ; Setup parameters for call to function AssocFindDevice
   \   00010E   AA..         MOV     R2,?V0
   \   000110   7B00         MOV     R3,#0x0
   \   000112   12....       LCALL   `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   000115   8A..         MOV     ?V2,R2
   \   000117   8B..         MOV     ?V3,R3
   \   000119   05..         INC     ?V0
   \   00011B   90....       MOV     DPTR,#_NIB + 33
   \   00011E   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000121   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000124   85..82       MOV     DPL,?V2
   \   000127   85..83       MOV     DPH,?V3
   \   00012A   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   00012D   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000130   E8           MOV     A,R0
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A3           INC     DPTR
   \   000133   E9           MOV     A,R1
   \   000134   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000137   85..82       MOV     DPL,?V2
   \   00013A   85..83       MOV     DPH,?V3
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   C0E0         PUSH    A
   \   00014A   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   00014D   D0E0         POP     A
   \   00014F   F0           MOVX    @DPTR,A
   \   000150   7401         MOV     A,#0x1
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   E4           CLR     A
   \   000156   F0           MOVX    @DPTR,A
   \   000157   85..82       MOV     DPL,?V2
   \   00015A   85..83       MOV     DPH,?V3
   \   00015D   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   000160   7402         MOV     A,#0x2
   \   000162   12....       LCALL   ?XSTACK_DISP0_8
   \   000165   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_631:
   \   000168                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000168   7401         MOV     A,#0x1
   \   00016A   12....       LCALL   ?XSTACK_DISP101_8
   \   00016D   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000170   E9           MOV     A,R1
   \   000171   6401         XRL     A,#0x1
   \   000173   6003         JZ      $+5
   \   000175   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   000178                ; Setup parameters for call to function sAddrExtCpy
   \   000178   7404         MOV     A,#0x4
   \   00017A   12....       LCALL   ?XSTACK_DISP0_8
   \   00017D   AC82         MOV     R4,DPL
   \   00017F   AD83         MOV     R5,DPH
   \   000181   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000184   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000187   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   00018A   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00018D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000190   6403         XRL     A,#0x3
   \   000192   6003         JZ      $+5
   \   000194   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   000197   EE           MOV     A,R6
   \   000198   2415         ADD     A,#0x15
   \   00019A   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   1474                  }
   \                     ??CrossCallReturnLabel_491:
   \   00019D   02....       LJMP    ??CrossCallReturnLabel_341 & 0xFFFF
   1475                  else
   1476                  {
   1477                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0001A0   E5..         MOV     A,?V4
   \   0001A2   C3           CLR     C
   \   0001A3   95..         SUBB    A,?V6
   \   0001A5   4005         JC      ??ZDO_ProcessMgmtLqiReq_15
   1478                      // Start with 1st neighbor
   1479                      index = 0;
   \   0001A7   75..00       MOV     ?V0,#0x0
   \   0001AA   801D         SJMP    ??ZDO_ProcessMgmtLqiReq_16
   1480                    else
   1481                      // Start with >1st neighbor
   1482                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001AC   E5..         MOV     A,?V6
   \   0001AE   C3           CLR     C
   \   0001AF   95..         SUBB    A,?V4
   \   0001B1   F5..         MOV     ?V0,A
   \   0001B3   8014         SJMP    ??ZDO_ProcessMgmtLqiReq_16
   1483                    break;
   1484                  }
   1485                }
   1486          
   1487                // Loop through neighbor items and finish list
   1488                for ( ; x < numItems; x++ )
   1489                {
   1490                  // Add next neighbor table item
   1491                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1492          
   1493                  // set ZDP_MgmtLqiItem_t fields
   1494                  item->panID    = entry.panId;
   1495                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1496                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1497                  item->nwkAddr  = entry.neighborAddress;
   1498                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1499                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1500                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1501                  item->depth    = 0xFF;
   1502                  item->lqi      = entry.linkInfo.rxLqi;
   1503          
   1504                  if ( item->nwkAddr == 0 )
   1505                  {
   1506                    item->devType = ZDP_MGMT_DT_COORD;
   1507                  }
   1508                  else
   1509                  {
   1510                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001B5   12....       LCALL   ?Subroutine125 & 0xFFFF
   1511                  }
   \                     ??CrossCallReturnLabel_345:
   \   0001B8   F0           MOVX    @DPTR,A
   1512          
   1513                  item++;
   \   0001B9   EE           MOV     A,R6
   \   0001BA   241A         ADD     A,#0x1a
   \   0001BC   FE           MOV     R6,A
   \   0001BD   5001         JNC     ??ZDO_ProcessMgmtLqiReq_18
   \   0001BF   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0001C0   05..         INC     ?V5
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   0001C2   E5..         MOV     A,?V5
   \   0001C4   C3           CLR     C
   \   0001C5   95..         SUBB    A,?V1
   \   0001C7   505C         JNC     ??ZDO_ProcessMgmtLqiReq_2
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001C9                ; Setup parameters for call to function NLME_GetRequest
   \   0001C9   740E         MOV     A,#0xe
   \   0001CB   12....       LCALL   ?XSTACK_DISP102_8
   \   0001CE   AA..         MOV     R2,?V0
   \   0001D0   7B00         MOV     R3,#0x0
   \   0001D2   7987         MOV     R1,#-0x79
   \   0001D4   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0001D7   05..         INC     ?V0
   \   0001D9   7418         MOV     A,#0x18
   \   0001DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DE   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001E1   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001E4                ; Setup parameters for call to function osal_memset
   \   0001E4   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   0001E7   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0001EA   EE           MOV     A,R6
   \   0001EB   2412         ADD     A,#0x12
   \   0001ED   F8           MOV     R0,A
   \   0001EE   E4           CLR     A
   \   0001EF   3F           ADDC    A,R7
   \   0001F0   F9           MOV     R1,A
   \   0001F1   740E         MOV     A,#0xe
   \   0001F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F6   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   0001F9   8882         MOV     DPL,R0
   \   0001FB   8983         MOV     DPH,R1
   \   0001FD   EA           MOV     A,R2
   \   0001FE   F0           MOVX    @DPTR,A
   \   0001FF   A3           INC     DPTR
   \   000200   EB           MOV     A,R3
   \   000201   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000204   7403         MOV     A,#0x3
   \   000206   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000209   741D         MOV     A,#0x1d
   \   00020B   12....       LCALL   ?XSTACK_DISP0_8
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   C0E0         PUSH    A
   \   000211   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000214   D0E0         POP     A
   \   000216   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000219   E8           MOV     A,R0
   \   00021A   49           ORL     A,R1
   \   00021B   7098         JNZ     ??ZDO_ProcessMgmtLqiReq_17
   \   00021D   12....       LCALL   ?Subroutine129 & 0xFFFF
   1514                }
   1515              }
   1516            }
   \                     ??CrossCallReturnLabel_494:
   \   000220   8096         SJMP    ??CrossCallReturnLabel_345
   1517            else
   1518            {
   1519              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000222   75..00       MOV     ?V1,#0x0
   1520            }
   1521          
   1522            // Send response
   1523            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1524                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   000225                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   000225   75..00       MOV     ?V2,#0x0
   \   000228   78..         MOV     R0,#?V2
   \   00022A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00022D   78..         MOV     R0,#?V10
   \   00022F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000232   78..         MOV     R0,#?V1
   \   000234   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000237   E5..         MOV     A,?V6
   \   000239   F5..         MOV     ?V1,A
   \   00023B   78..         MOV     R0,#?V1
   \   00023D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000240   7405         MOV     A,#0x5
   \   000242   12....       LCALL   ?XSTACK_DISP0_8
   \   000245   E0           MOVX    A,@DPTR
   \   000246   FD           MOV     R5,A
   \   000247   7C00         MOV     R4,#0x0
   \   000249   E5..         MOV     A,?V12
   \   00024B   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   00024E   35..         ADDC    A,?V13
   \   000250   FB           MOV     R3,A
   \   000251   E5..         MOV     A,?V12
   \   000253   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000256   35..         ADDC    A,?V13
   \   000258   F583         MOV     DPH,A
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   F9           MOV     R1,A
   \   00025C   12....       LCALL   `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   00025F   7405         MOV     A,#0x5
   \   000261   12....       LCALL   ?DEALLOC_XSTACK8
   1525          
   1526            if ( table )
   \   000264   E5..         MOV     A,?V10
   \   000266   45..         ORL     A,?V11
   \   000268   6007         JZ      ??ZDO_ProcessMgmtLqiReq_19
   1527            {
   1528              osal_mem_free( table );
   \   00026A                ; Setup parameters for call to function osal_mem_free
   \   00026A   AA..         MOV     R2,?V10
   \   00026C   AB..         MOV     R3,?V11
   \   00026E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1529            }
   1530          }
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   000271   7425         MOV     A,#0x25
   \   000273   12....       LCALL   ?DEALLOC_XSTACK8
   \   000276                REQUIRE ?Subroutine7
   \   000276                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   EE           MOV     A,R6
   \   000001   2419         ADD     A,#0x19
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   12....       LCALL   ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   EE           MOV     A,R6
   \   000001   2418         ADD     A,#0x18
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine210_0
   \   000001                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   2412         ADD     A,#0x12
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   7C08         MOV     R4,#0x8
   \   000002   7D00         MOV     R5,#0x0
   \   000004   79FF         MOV     R1,#-0x1
   \   000006                REQUIRE ??Subroutine211_0
   \   000006                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   000004   3F           ADDC    A,R7
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine212_0
   \   000001                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   2414         ADD     A,#0x14
   \   000002                REQUIRE ??Subroutine213_0
   \   000002                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_642:
   \   00000A                ; Setup parameters for call to function sAddrExtCpy
   \   00000A                ; Setup parameters for call to function sAddrExtCpy
   \   00000A   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00000C   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   00000E   EE           MOV     A,R6
   \   00000F   2402         ADD     A,#0x2
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   FB           MOV     R3,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine216_0
   \   000001                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000003   7402         MOV     A,#0x2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   EE           MOV     A,R6
   \   000007   2416         ADD     A,#0x16
   \   000009   F582         MOV     DPL,A
   \   00000B   E4           CLR     A
   \   00000C   3F           ADDC    A,R7
   \   00000D   F583         MOV     DPH,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   12....       LCALL   ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000010   74FF         MOV     A,#-0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003                REQUIRE ??Subroutine239_0
   \   000003                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E4           CLR     A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine197:
   \   000000   2415         ADD     A,#0x15
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   2402         ADD     A,#0x2
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000003   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine256_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine257_0
   \   000001                ; // Fall through to label ??Subroutine257_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine257_0:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_645:
   \   000003   22           RET
   1531          
   1532          /*********************************************************************
   1533           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1534           *
   1535           * @brief       This function handles parsing the incoming Management
   1536           *              Network Discover request and starts the request.
   1537           *
   1538           * @param       inMsg - incoming message (request)
   1539           *
   1540           * @return      none
   1541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   8A..         MOV     ?V0,R2
   \   000002   8B..         MOV     ?V1,R3
   \   000004                REQUIRE ??Subroutine214_0
   \   000004                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1542          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1543          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine122 & 0xFFFF
   1544            NLME_ScanFields_t scan;
   1545            uint8             index;
   1546            uint8             *msg;
   1547          
   1548            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_346:
   \   00000D   35..         ADDC    A,?V1
   \   00000F   12....       LCALL   ?Subroutine89 & 0xFFFF
   1549            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_145:
   \   000012   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000015   EA           MOV     A,R2
   \   000016   F8           MOV     R0,A
   \   000017   EB           MOV     A,R3
   \   000018   F9           MOV     R1,A
   \   000019   EC           MOV     A,R4
   \   00001A   FA           MOV     R2,A
   \   00001B   ED           MOV     A,R5
   \   00001C   FB           MOV     R3,A
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   12....       LCALL   ?XSTORE_R0123
   1550            msg += 4;
   1551            scan.duration = *msg++;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C0E0         PUSH    A
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   D0E0         POP     A
   \   000038   12....       LCALL   ?Subroutine36 & 0xFFFF
   1552            index         = *msg;
   \                     ??CrossCallReturnLabel_49:
   \   00003B   F8           MOV     R0,A
   1553            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   00003C   7405         MOV     A,#0x5
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   7401         MOV     A,#0x1
   \   000043   F0           MOVX    @DPTR,A
   1554            scan.scanApp  = NLME_DISC_SCAN;
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7401         MOV     A,#0x1
   \   00004B   F0           MOVX    @DPTR,A
   1555          
   1556            // Save off the information to be used for the response
   1557            zdappMgmtNwkDiscReqInProgress          = true;
   \   00004C   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   00004F   F0           MOVX    @DPTR,A
   1558            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000050   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000053   04           INC     A
   \   000054   12....       LCALL   ?Subroutine40 & 0xFFFF
   1559            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_58:
   \   000057   FA           MOV     R2,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FB           MOV     R3,A
   \   00005B   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00005E   12....       LCALL   ?Subroutine49 & 0xFFFF
   1560            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_318:
   \   000061   E8           MOV     A,R0
   \   000062   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000065   12....       LCALL   ?Subroutine29 & 0xFFFF
   1561            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \                     ??CrossCallReturnLabel_36:
   \   000068   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   00006B   F0           MOVX    @DPTR,A
   1562          
   1563            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   00006C                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   00006C   AA..         MOV     R2,?XSP + 0
   \   00006E   AB..         MOV     R3,?XSP + 1
   \   000070   12....       LCALL   `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   000073   E9           MOV     A,R1
   \   000074   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1564            {
   1565              NLME_NwkDiscTerm();
   \   000076                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000076   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1566          
   1567              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1568            }
   1569          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000079   7407         MOV     A,#0x7
   \   00007B   02....       LJMP    ??Subroutine203_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FF           MOV     R7,A
   \   000007                ; Setup parameters for call to function osal_build_uint32
   \   000007                ; Setup parameters for call to function osal_build_uint32
   \   000007   7904         MOV     R1,#0x4
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   22           RET
   1570          
   1571          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1572          /*********************************************************************
   1573           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1574           *
   1575           * @brief       This function finishes the processing of the Management
   1576           *              Network Discover Request and generates the response.
   1577           *
   1578           *   Note:      This function will limit the number of items returned
   1579           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1580           *
   1581           * @param       ResultCountSrcAddr - source of the request
   1582           * @param       msg - pointer to incoming message
   1583           * @param       SecurityUse -
   1584           *
   1585           * @return      none
   1586           */
   1587          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1588          {
   1589            byte count, i, ResultCount = 0;
   1590            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1591          
   1592            NetworkList = nwk_getNwkDescList();
   1593          
   1594            // Count the number of nwk descriptors in the list
   1595            pList = nwk_getNwkDescList();
   1596            while (pList)
   1597            {
   1598              ResultCount++;
   1599              pList = pList->nextDesc;
   1600            }
   1601          
   1602            if ( ZSTACK_ROUTER_BUILD )
   1603            {
   1604              // Look for my PanID.
   1605              pList = nwk_getNwkDescList();
   1606              while ( pList )
   1607              {
   1608                if ( pList->panId == _NIB.nwkPanId )
   1609                {
   1610                  break;
   1611                }
   1612          
   1613          
   1614                if ( !pList->nextDesc )
   1615                {
   1616                  break;
   1617                }
   1618                pList = pList->nextDesc;
   1619              }
   1620          
   1621          
   1622              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1623              // prepend it.
   1624              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1625              {
   1626                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1627                if ( newDesc )
   1628                {
   1629                  byte pJoin;
   1630          
   1631                  newDesc->panId = _NIB.nwkPanId;
   1632                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1633                  newDesc->version = NLME_GetProtocolVersion();
   1634                  newDesc->stackProfile = zgStackProfile;
   1635          
   1636                  //Extended PanID
   1637                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1638          
   1639                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1640                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1641                                                     INVALID_NODE_ADDR);
   1642          
   1643                  newDesc->nextDesc = NetworkList;
   1644                  NetworkList = newDesc;
   1645                  ResultCount++;
   1646                }
   1647              }
   1648            }
   1649          
   1650            // Calc the count and apply a max count.
   1651            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1652            {
   1653              count = 0;
   1654            }
   1655            else
   1656            {
   1657              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1658              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1659              {
   1660                count = ZDO_MAX_NWKDISC_ITEMS;
   1661              }
   1662          
   1663              // Move the list pointer up to the start index.
   1664              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1665              {
   1666                NetworkList = NetworkList->nextDesc;
   1667              }
   1668            }
   1669          
   1670            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1671                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1672                                zdappMgmtNwkDiscStartIndex,
   1673                                count,
   1674                                NetworkList,
   1675                                false );
   1676          
   1677            if ( ZSTACK_ROUTER_BUILD )
   1678            {
   1679              if ( newDesc != NULL )
   1680              {
   1681                osal_mem_free( newDesc );
   1682              }
   1683            }
   1684          
   1685            NLME_NwkDiscTerm();
   1686          }
   1687          #endif
   1688          
   1689          /*********************************************************************
   1690           * @fn          ZDO_ProcessMgmtRtgReq
   1691           *
   1692           * @brief       This function finishes the processing of the Management
   1693           *              Routing Request and generates the response.
   1694           *
   1695           *   Note:      This function will limit the number of items returned
   1696           *              to ZDO_MAX_RTG_ITEMS items.
   1697           *
   1698           * @param       inMsg - incoming message (request)
   1699           *
   1700           * @return      none
   1701           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1702          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1703          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1704            byte x;
   1705            byte maxNumItems;
   1706            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1707            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V6,R6
   \   000012   8E..         MOV     ?V7,R6
   1708            rtgItem_t *pList;
   1709            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000017   35..         ADDC    A,?V3
   \   000019   F583         MOV     DPH,A
   \   00001B   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   00001E   FF           MOV     R7,A
   1710          
   1711            // Get the number of table items
   1712            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   00001F                ; Setup parameters for call to function NLME_GetRequest
   \   00001F   AC..         MOV     R4,?XSP + 0
   \   000021   AD..         MOV     R5,?XSP + 1
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   799D         MOV     R1,#-0x63
   \   000029   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1713          
   1714            if ( maxNumItems > StartIndex )
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   EF           MOV     A,R7
   \   000035   C3           CLR     C
   \   000036   98           SUBB    A,R0
   \   000037   4003         JC      $+5
   \   000039   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
   1715            {
   1716              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C3           CLR     C
   \   00003E   9F           SUBB    A,R7
   \   00003F   FE           MOV     R6,A
   1717          
   1718              // limit the size of the list
   1719              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   000040   C3           CLR     C
   \   000041   940B         SUBB    A,#0xb
   \   000043   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1720              {
   1721                numItems = ZDO_MAX_RTG_ITEMS;
   \   000045   7E0A         MOV     R6,#0xa
   1722              }
   1723          
   1724              // Allocate the memory to build the table
   1725              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000047                ; Setup parameters for call to function osal_mem_alloc
   \   000047   EE           MOV     A,R6
   \   000048   75F007       MOV     B,#0x7
   \   00004B   A4           MUL     AB
   \   00004C   FA           MOV     R2,A
   \   00004D   ABF0         MOV     R3,B
   \   00004F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000052   8A..         MOV     ?V0,R2
   \   000054   8B..         MOV     ?V1,R3
   \   000056   8A..         MOV     ?V6,R2
   \   000058   8B..         MOV     ?V7,R3
   1726          
   1727              if ( pBuf != NULL )
   \   00005A   EA           MOV     A,R2
   \   00005B   45..         ORL     A,?V7
   \   00005D   6079         JZ      ??ZDO_ProcessMgmtRtgReq_2
   1728              {
   1729                // Convert buffer to list
   1730                pList = (rtgItem_t *)pBuf;
   1731          
   1732                // Loop through items and build list
   1733                for ( x = 0; x < numItems; x++ )
   \   00005F   75..00       MOV     ?V4,#0x0
   \   000062   801A         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1734                {
   1735                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1736          
   1737                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1738                  switch( pList->status )
   1739                  {
   1740                    case RT_ACTIVE:
   1741                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1742                      break;
   1743          
   1744                    case RT_DISC:
   1745                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1746                      break;
   1747          
   1748                    case RT_LINK_FAIL:
   1749                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   1750                      break;
   1751          
   1752                    case RT_INIT:
   1753                    case RT_REPAIR:
   1754                    default:
   1755                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000064   85..82       MOV     DPL,?V0
   \   000067   85..83       MOV     DPH,?V1
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000071   F0           MOVX    @DPTR,A
   1756                      break;
   1757                  }
   1758          
   1759                  // Increment pointer to next record
   1760                  pList++;
   \   000072   E5..         MOV     A,?V0
   \   000074   2407         ADD     A,#0x7
   \   000076   F5..         MOV     ?V0,A
   \   000078   5002         JNC     ??ZDO_ProcessMgmtRtgReq_6
   \   00007A   05..         INC     ?V1
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   00007C   05..         INC     ?V4
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   00007E   E5..         MOV     A,?V4
   \   000080   C3           CLR     C
   \   000081   9E           SUBB    A,R6
   \   000082   5056         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   000084                ; Setup parameters for call to function NLME_GetRequest
   \   000084   AC..         MOV     R4,?V0
   \   000086   AD..         MOV     R5,?V1
   \   000088   E5..         MOV     A,?V4
   \   00008A   2F           ADD     A,R7
   \   00008B   FA           MOV     R2,A
   \   00008C   E4           CLR     A
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   FB           MOV     R3,A
   \   000090   798B         MOV     R1,#-0x75
   \   000092   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000095   85..82       MOV     DPL,?V0
   \   000098   85..83       MOV     DPH,?V1
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   14           DEC     A
   \   0000A2   6008         JZ      ??ZDO_ProcessMgmtRtgReq_7
   \   0000A4   14           DEC     A
   \   0000A5   6013         JZ      ??ZDO_ProcessMgmtRtgReq_8
   \   0000A7   14           DEC     A
   \   0000A8   601F         JZ      ??ZDO_ProcessMgmtRtgReq_9
   \   0000AA   80B8         SJMP    ??ZDO_ProcessMgmtRtgReq_4
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   0000AC   85..82       MOV     DPL,?V0
   \   0000AF   85..83       MOV     DPH,?V1
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E4           CLR     A
   \   0000B8   80B7         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   0000BA   85..82       MOV     DPL,?V0
   \   0000BD   85..83       MOV     DPH,?V1
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   7401         MOV     A,#0x1
   \   0000C7   80A8         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   0000C9   85..82       MOV     DPL,?V0
   \   0000CC   85..83       MOV     DPH,?V1
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   7402         MOV     A,#0x2
   \   0000D6   8099         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   1761                }
   1762              }
   1763              else
   1764              {
   1765                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000D8   7E00         MOV     R6,#0x0
   1766              }
   1767            }
   1768          
   1769            // Send response
   1770            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1771                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000DA                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000DA   75..00       MOV     ?V0,#0x0
   \   0000DD   78..         MOV     R0,#?V0
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E2   78..         MOV     R0,#?V6
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E7   EE           MOV     A,R6
   \   0000E8   F5..         MOV     ?V0,A
   \   0000EA   78..         MOV     R0,#?V0
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EF   EF           MOV     A,R7
   \   0000F0   F5..         MOV     ?V0,A
   \   0000F2   78..         MOV     R0,#?V0
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F7   7405         MOV     A,#0x5
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   FD           MOV     R5,A
   \   0000FE   7C00         MOV     R4,#0x0
   \   000100   E5..         MOV     A,?V2
   \   000102   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   000105   35..         ADDC    A,?V3
   \   000107   FB           MOV     R3,A
   \   000108   E5..         MOV     A,?V2
   \   00010A   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00010D   35..         ADDC    A,?V3
   \   00010F   F583         MOV     DPH,A
   \   000111   E0           MOVX    A,@DPTR
   \   000112   F9           MOV     R1,A
   \   000113   12....       LCALL   `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   000116   7405         MOV     A,#0x5
   \   000118   12....       LCALL   ?DEALLOC_XSTACK8
   1772          
   1773            if ( pBuf != NULL )
   \   00011B   E5..         MOV     A,?V6
   \   00011D   45..         ORL     A,?V7
   \   00011F   6007         JZ      ??ZDO_ProcessMgmtRtgReq_10
   1774            {
   1775              osal_mem_free( pBuf );
   \   000121                ; Setup parameters for call to function osal_mem_free
   \   000121   AA..         MOV     R2,?V6
   \   000123   AB..         MOV     R3,?V7
   \   000125   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1776            }
   1777          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   000128   7401         MOV     A,#0x1
   \   00012A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012D   02....       LJMP    ??Subroutine201_0 & 0xFFFF
   1778          
   1779          /*********************************************************************
   1780           * @fn          ZDO_ProcessMgmtBindReq
   1781           *
   1782           * @brief       This function finishes the processing of the Management
   1783           *              Bind Request and generates the response.
   1784           *
   1785           *   Note:      This function will limit the number of items returned
   1786           *              to ZDO_MAX_BIND_ITEMS items.
   1787           *
   1788           * @param       inMsg - incoming message (request)
   1789           *
   1790           * @return      none
   1791           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1792          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1793          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   1794          #if defined ( REFLECTOR )
   1795            byte x;
   1796            uint16 maxNumItems;
   1797            uint16 numItems;
   1798            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV     ?V8,#0x0
   \   000011   75..00       MOV     ?V9,#0x0
   1799            apsBindingItem_t *pList;
   1800            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000017   35..         ADDC    A,?V5
   \   000019   F583         MOV     DPH,A
   \   00001B   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   00001E   F5..         MOV     ?V2,A
   1801            uint8 status;
   1802          
   1803            // Get the number of table items
   1804            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000020                ; Setup parameters for call to function APSME_GetRequest
   \   000020   AC..         MOV     R4,?XSP + 0
   \   000022   AD..         MOV     R5,?XSP + 1
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B00         MOV     R3,#0x0
   \   000028   79A3         MOV     R1,#-0x5d
   \   00002A   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1805          
   1806            if ( maxNumItems > StartIndex )
   \   00002D   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   000030   C3           CLR     C
   \   000031   E5..         MOV     A,?V2
   \   000033   9A           SUBB    A,R2
   \   000034   E4           CLR     A
   \   000035   9B           SUBB    A,R3
   \   000036   507A         JNC     ??ZDO_ProcessMgmtBindReq_0
   1807            {
   1808              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   A8..         MOV     R0,?V2
   \   000040   E0           MOVX    A,@DPTR
   \   000041   C3           CLR     C
   \   000042   98           SUBB    A,R0
   \   000043   FE           MOV     R6,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   9400         SUBB    A,#0x0
   \   000048   FF           MOV     R7,A
   1809            }
   1810            else
   1811            {
   1812              numItems = 0;
   1813            }
   1814          
   1815            // limit the size of the list
   1816            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000049   C3           CLR     C
   \   00004A   EE           MOV     A,R6
   \   00004B   9404         SUBB    A,#0x4
   \   00004D   EF           MOV     A,R7
   \   00004E   9400         SUBB    A,#0x0
   \   000050   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1817            {
   1818              numItems = ZDO_MAX_BIND_ITEMS;
   \   000052   7E03         MOV     R6,#0x3
   \   000054   7F00         MOV     R7,#0x0
   \   000056   8004         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1819            }
   1820          
   1821            // Allocate the memory to build the table
   1822            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000058   EE           MOV     A,R6
   \   000059   4F           ORL     A,R7
   \   00005A   6056         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   00005C                ; Setup parameters for call to function osal_mem_alloc
   \   00005C   EE           MOV     A,R6
   \   00005D   FA           MOV     R2,A
   \   00005E   EF           MOV     A,R7
   \   00005F   FB           MOV     R3,A
   \   000060   EA           MOV     A,R2
   \   000061   75F015       MOV     B,#0x15
   \   000064   A4           MUL     AB
   \   000065   FA           MOV     R2,A
   \   000066   A8F0         MOV     R0,B
   \   000068   75F015       MOV     B,#0x15
   \   00006B   EB           MOV     A,R3
   \   00006C   A4           MUL     AB
   \   00006D   28           ADD     A,R0
   \   00006E   FB           MOV     R3,A
   \   00006F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000072   8A..         MOV     ?V0,R2
   \   000074   8B..         MOV     ?V1,R3
   \   000076   8A..         MOV     ?V8,R2
   \   000078   8B..         MOV     ?V9,R3
   \   00007A   EA           MOV     A,R2
   \   00007B   45..         ORL     A,?V9
   \   00007D   6033         JZ      ??ZDO_ProcessMgmtBindReq_0
   1823            {
   1824              status = ZSuccess;
   \   00007F   75..00       MOV     ?V3,#0x0
   1825          
   1826              // Convert buffer to list
   1827              pList = (apsBindingItem_t *)pBuf;
   1828          
   1829              // Loop through items and build list
   1830              for ( x = 0; x < numItems; x++ )
   \   000082   75..00       MOV     ?V6,#0x0
   \   000085   801F         SJMP    ??ZDO_ProcessMgmtBindReq_3
   1831              {
   1832                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   000087                ; Setup parameters for call to function APSME_GetRequest
   \   000087   AC..         MOV     R4,?V0
   \   000089   AD..         MOV     R5,?V1
   \   00008B   A8..         MOV     R0,?V2
   \   00008D   E5..         MOV     A,?V6
   \   00008F   28           ADD     A,R0
   \   000090   FA           MOV     R2,A
   \   000091   E4           CLR     A
   \   000092   3400         ADDC    A,#0x0
   \   000094   FB           MOV     R3,A
   \   000095   79A2         MOV     R1,#-0x5e
   \   000097   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1833                pList++;
   \   00009A   E5..         MOV     A,?V0
   \   00009C   2415         ADD     A,#0x15
   \   00009E   F5..         MOV     ?V0,A
   \   0000A0   5002         JNC     ??ZDO_ProcessMgmtBindReq_5
   \   0000A2   05..         INC     ?V1
   1834              }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000A4   05..         INC     ?V6
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   0000A6   C3           CLR     C
   \   0000A7   E5..         MOV     A,?V6
   \   0000A9   9E           SUBB    A,R6
   \   0000AA   E4           CLR     A
   \   0000AB   9F           SUBB    A,R7
   \   0000AC   40D9         JC      ??ZDO_ProcessMgmtBindReq_4
   \   0000AE   EE           MOV     A,R6
   \   0000AF   F9           MOV     R1,A
   \   0000B0   8005         SJMP    ??ZDO_ProcessMgmtBindReq_6
   1835          
   1836            }
   1837            else
   1838            {
   1839              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000B2   75..8B       MOV     ?V3,#-0x75
   1840              numItems = 0;
   \   0000B5   7900         MOV     R1,#0x0
   1841            }
   1842          
   1843            // Send response
   1844            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1845                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000B7                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000B7   75..00       MOV     ?V0,#0x0
   \   0000BA   78..         MOV     R0,#?V0
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BF   78..         MOV     R0,#?V8
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   E9           MOV     A,R1
   \   0000C5   F5..         MOV     ?V0,A
   \   0000C7   78..         MOV     R0,#?V0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CC   E5..         MOV     A,?V2
   \   0000CE   F5..         MOV     ?V0,A
   \   0000D0   78..         MOV     R0,#?V0
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D5   7405         MOV     A,#0x5
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   FD           MOV     R5,A
   \   0000DC   AC..         MOV     R4,?V3
   \   0000DE   E5..         MOV     A,?V4
   \   0000E0   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   0000E3   35..         ADDC    A,?V5
   \   0000E5   FB           MOV     R3,A
   \   0000E6   E5..         MOV     A,?V4
   \   0000E8   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   0000EB   35..         ADDC    A,?V5
   \   0000ED   F583         MOV     DPH,A
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F9           MOV     R1,A
   \   0000F1   12....       LCALL   `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   0000F4   7405         MOV     A,#0x5
   \   0000F6   12....       LCALL   ?DEALLOC_XSTACK8
   1846          
   1847            if ( pBuf )
   \   0000F9   E5..         MOV     A,?V8
   \   0000FB   45..         ORL     A,?V9
   \   0000FD   6007         JZ      ??ZDO_ProcessMgmtBindReq_7
   1848            {
   1849              osal_mem_free( pBuf );
   \   0000FF                ; Setup parameters for call to function osal_mem_free
   \   0000FF   AA..         MOV     R2,?V8
   \   000101   AB..         MOV     R3,?V9
   \   000103   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1850            }
   1851          #else
   1852            (void)inMsg;
   1853          #endif
   1854          }
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   000106   7402         MOV     A,#0x2
   \   000108                REQUIRE ?Subroutine8
   \   000108                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine218_0
   \   000003                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1855          
   1856          /*********************************************************************
   1857           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1858           *
   1859           * @brief       This function finishes the processing of the Management
   1860           *              Direct Join Request and generates the response.
   1861           *
   1862           * @param       inMsg - incoming message (request)
   1863           *
   1864           * @return      none
   1865           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1866          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1867          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1868            uint8 *deviceAddr;
   1869            uint8 capInfo;
   1870            uint8 stat;
   1871          
   1872            // Parse the message
   1873            deviceAddr = inMsg->asdu;
   1874            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1875          
   1876            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \   00000E   EE           MOV     A,R6
   \   00000F   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000012   3F           ADDC    A,R7
   \   000013   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   000023   E9           MOV     A,R1
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   F0           MOVX    @DPTR,A
   1877          
   1878            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00002B                ; Setup parameters for call to function ZDP_SendData
   \   00002B   75..00       MOV     ?V0,#0x0
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000033   7401         MOV     A,#0x1
   \   000035   12....       LCALL   ?XSTACK_DISP100_8
   \   000038   88..         MOV     ?V0,R0
   \   00003A   89..         MOV     ?V1,R1
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   75..35       MOV     ?V0,#0x35
   \   000044   75..80       MOV     ?V1,#-0x80
   \   000047   78..         MOV     R0,#?V0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   00004F   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000052   7405         MOV     A,#0x5
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   1879          }
   \   000057                REQUIRE ?Subroutine10
   \   000057                ; // Fall through to label ?Subroutine10

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine203_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine231_0
   \   000002                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000003                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET
   1880          
   1881          /*********************************************************************
   1882           * @fn          ZDO_ProcessMgmtLeaveReq
   1883           *
   1884           * @brief       This function processes a Management Leave Request
   1885           *              and generates the response.
   1886           *
   1887           * @param       inMsg - incoming message (request)
   1888           *
   1889           * @return      none
   1890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1891          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1892          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine122 & 0xFFFF
   1893            NLME_LeaveReq_t req;
   1894            ZStatus_t       status;
   1895            uint8           option;
   1896            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_347:
   \   00000D   35..         ADDC    A,?V1
   \   00000F   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   000012   FF           MOV     R7,A
   1897          
   1898            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1899                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \   000013                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00001A   E9           MOV     A,R1
   \   00001B   6017         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   00001D                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001D   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000020   8A..         MOV     ?V2,R2
   \   000022   8B..         MOV     ?V3,R3
   \   000024   AC..         MOV     R4,?V2
   \   000026   AD..         MOV     R5,?V3
   \   000028                ; Setup parameters for call to function sAddrExtCmp
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002F   E9           MOV     A,R1
   \   000030   6401         XRL     A,#0x1
   \   000032   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1900            {
   1901              // Remove this device
   1902              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1903            }
   1904            else
   1905            {
   1906              // Remove child device
   1907              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   EE           MOV     A,R6
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   EF           MOV     A,R7
   1908            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000047   12....       LCALL   ?Subroutine25 & 0xFFFF
   1909          
   1910            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_27:
   \   00004A   F8           MOV     R0,A
   1911            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   00004B   A2E6         MOV     C,0xE0 /* A   */.6
   \   00004D   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1912            {
   1913              req.removeChildren = TRUE;
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
   1914            }
   1915          
   1916            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000057   E8           MOV     A,R0
   \   000058   A2E7         MOV     C,0xE0 /* A   */.7
   \   00005A   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1917            {
   1918               req.rejoin = TRUE;
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   7401         MOV     A,#0x1
   \   000063   F0           MOVX    @DPTR,A
   1919            }
   1920          
   1921            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000064   7405         MOV     A,#0x5
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
   1922          
   1923            status = NLME_LeaveReq( &req );
   \   00006B                ; Setup parameters for call to function NLME_LeaveReq
   \   00006B   04           INC     A
   \   00006C   12....       LCALL   ?XSTACK_DISP101_8
   \   00006F   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   000072   E9           MOV     A,R1
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   F0           MOVX    @DPTR,A
   1924          
   1925            if ( ZG_BUILD_ENDDEVICE_TYPE )
   1926            {
   1927              // Stop polling and get ready to reset
   1928              NLME_SetPollRate( 0 );
   1929            }
   1930          
   1931            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   00007A                ; Setup parameters for call to function ZDP_SendData
   \   00007A   75..00       MOV     ?V2,#0x0
   \   00007D   78..         MOV     R0,#?V2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000082   7401         MOV     A,#0x1
   \   000084   12....       LCALL   ?XSTACK_DISP100_8
   \   000087   88..         MOV     ?V2,R0
   \   000089   89..         MOV     ?V3,R1
   \   00008B   78..         MOV     R0,#?V2
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   75..34       MOV     ?V2,#0x34
   \   000093   75..80       MOV     ?V3,#-0x80
   \   000096   78..         MOV     R0,#?V2
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00009E   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000A1   7405         MOV     A,#0x5
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   1932          }
   \   0000A6   7406         MOV     A,#0x6
   \   0000A8   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1933          
   1934          
   1935          /*********************************************************************
   1936           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1937           *
   1938           * @brief       This function processes a Management Permit Join Request
   1939           *              and generates the response.
   1940           *
   1941           * @param       inMsg - incoming message (request)
   1942           *
   1943           * @return      none
   1944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1945          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1946          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine75 & 0xFFFF
   1947            uint8 stat;
   1948            uint8 duration;
   1949            uint8 tcsig;
   1950          
   1951            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   \                     ??CrossCallReturnLabel_119:
   \   00000D   F5..         MOV     ?V1,A
   1952            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0,A
   1953          
   1954            // Set the network layer permit join duration
   1955            stat = (byte) NLME_PermitJoiningRequest( duration );
   \   000013                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000013   A9..         MOV     R1,?V1
   \   000015   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000018   E9           MOV     A,R1
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   F0           MOVX    @DPTR,A
   1956          
   1957            // Handle the Trust Center Significance
   1958            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1959            {
   1960              if ( tcsig == TRUE )
   \   000020   7401         MOV     A,#0x1
   \   000022   65..         XRL     A,?V0
   \   000024   7005         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   1961              {
   1962                ZDSecMgrPermitJoining( duration );
   \   000026                ; Setup parameters for call to function ZDSecMgrPermitJoining
   \   000026   A9..         MOV     R1,?V1
   \   000028   12....       LCALL   `??ZDSecMgrPermitJoining::?relay`; Banked call to: ZDSecMgrPermitJoining
   1963              }
   1964            }
   1965          
   1966            // Send a response if unicast
   1967            if ( !inMsg->wasBroadcast )
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00002B   EE           MOV     A,R6
   \   00002C   240B         ADD     A,#0xb
   \   00002E   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000031   702C         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_1
   1968            {
   1969              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000033                ; Setup parameters for call to function ZDP_SendData
   \   000033   75..00       MOV     ?V0,#0x0
   \   000036   78..         MOV     R0,#?V0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003B   7401         MOV     A,#0x1
   \   00003D   12....       LCALL   ?XSTACK_DISP100_8
   \   000040   88..         MOV     ?V0,R0
   \   000042   89..         MOV     ?V1,R1
   \   000044   78..         MOV     R0,#?V0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   75..36       MOV     ?V0,#0x36
   \   00004C   75..80       MOV     ?V1,#-0x80
   \   00004F   78..         MOV     R0,#?V0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   12....       LCALL   ?Subroutine124 & 0xFFFF
   1970            }
   \                     ??CrossCallReturnLabel_374:
   \   000057   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00005A   7405         MOV     A,#0x5
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   1971          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   00005F   02....       LJMP    ?Subroutine10 & 0xFFFF
   1972          
   1973          /*
   1974           * This function stub allows the next higher layer to be notified of
   1975           * a permit joining timeout.
   1976           */
   1977          /*********************************************************************
   1978           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1979           *
   1980           * @brief       This function stub allows the next higher layer to be
   1981           *              notified of a permit joining timeout. Currently, this
   1982           *              directly bypasses the APS layer.
   1983           *
   1984           * @param       none
   1985           *
   1986           * @return      none
   1987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1988          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1989          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1990            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1991            // Currently, only the ZDSecMgr needs to be notified
   1992            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1993            {
   1994              ZDSecMgrPermitJoiningTimeout();
   1995            }
   1996            #endif
   1997          }
   \   000000   02....       LJMP    ?BRET
   1998          
   1999          /*********************************************************************
   2000           * @fn          ZDO_ProcessUserDescReq
   2001           *
   2002           * @brief       This function finishes the processing of the User
   2003           *              Descriptor Request and generates the response.
   2004           *
   2005           * @param       inMsg - incoming message (request)
   2006           *
   2007           * @return      none
   2008           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2009          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   2010          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2011            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000011   F5..         MOV     ?V0,A
   \   000013   E4           CLR     A
   \   000014   39           ADDC    A,R1
   \   000015   F5..         MOV     ?V1,A
   2012            UserDescriptorFormat_t userDesc;
   2013          
   2014            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   2015                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000017   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   65..         XRL     A,?V0
   \   00001D   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   65..         XRL     A,?V1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000023   7052         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   A8..         MOV     R0,?XSP + 0
   \   000027   A9..         MOV     R1,?XSP + 1
   \   000029   88..         MOV     ?V2,R0
   \   00002B   89..         MOV     ?V3,R1
   \   00002D   78..         MOV     R0,#?V2
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   75..11       MOV     ?V2,#0x11
   \   000035   75..00       MOV     ?V3,#0x0
   \   000038   78..         MOV     R0,#?V2
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV     R4,#0x0
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7A81         MOV     R2,#-0x7f
   \   000043   7B00         MOV     R3,#0x0
   \   000045   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000048   7404         MOV     A,#0x4
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004D   E9           MOV     A,R1
   \   00004E   7027         JNZ     ??ZDO_ProcessUserDescReq_1
   2016            {
   2017              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   000050                ; Setup parameters for call to function ZDP_UserDescRsp
   \   000050   75..00       MOV     ?V2,#0x0
   \   000053   78..         MOV     R0,#?V2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   7401         MOV     A,#0x1
   \   00005A   12....       LCALL   ?XSTACK_DISP100_8
   \   00005D   88..         MOV     ?V2,R0
   \   00005F   89..         MOV     ?V3,R1
   \   000061   78..         MOV     R0,#?V2
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   AC..         MOV     R4,?V0
   \   000068   AD..         MOV     R5,?V1
   \   00006A   12....       LCALL   ?Subroutine123 & 0xFFFF
   2018            }
   \                     ??CrossCallReturnLabel_195:
   \   00006D   12....       LCALL   `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   000070   7403         MOV     A,#0x3
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
   \   000075   8021         SJMP    ??ZDO_ProcessUserDescReq_2
   2019            else
   2020            {
   2021              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   2022                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000077                ; Setup parameters for call to function ZDP_GenericRsp
   \   000077   75..11       MOV     ?V2,#0x11
   \   00007A   75..80       MOV     ?V3,#-0x80
   \   00007D   78..         MOV     R0,#?V2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   12....       LCALL   ?Subroutine128 & 0xFFFF
   2023            }
   \                     ??CrossCallReturnLabel_509:
   \   00008A   FD           MOV     R5,A
   \   00008B   7C84         MOV     R4,#-0x7c
   \   00008D   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000090   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000093   7404         MOV     A,#0x4
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   2024          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   000098   7411         MOV     A,#0x11
   \   00009A   02....       LJMP    ?Subroutine4 & 0xFFFF
   2025          
   2026          /*********************************************************************
   2027           * @fn          ZDO_ProcessUserDescSet
   2028           *
   2029           * @brief       This function finishes the processing of the User
   2030           *              Descriptor Set and generates the response.
   2031           *
   2032           * @param       inMsg - incoming message (request)
   2033           *
   2034           * @return      none
   2035           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2036          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   2037          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine75 & 0xFFFF
   2038            uint8 *msg;
   2039            uint16 aoi;
   2040            UserDescriptorFormat_t userDesc;
   2041            uint8 outMsg[3];
   2042            uint8 status;
   2043          
   2044            msg = inMsg->asdu;
   2045            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_120:
   \   00000D   FC           MOV     R4,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   \   000011   E4           CLR     A
   \   000012   CA           XCH     A,R2
   \   000013   FB           MOV     R3,A
   \   000014   EC           MOV     A,R4
   \   000015   2A           ADD     A,R2
   \   000016   F5..         MOV     ?V0,A
   \   000018   E4           CLR     A
   \   000019   3B           ADDC    A,R3
   \   00001A   F5..         MOV     ?V1,A
   2046          
   2047            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   00001C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   65..         XRL     A,?V0
   \   000022   7004         JNZ     ??ZDO_ProcessUserDescSet_0
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   65..         XRL     A,?V1
   \                     ??ZDO_ProcessUserDescSet_0:
   \   000028   6003         JZ      $+5
   \   00002A   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   2048            {
   2049              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   9410         SUBB    A,#0x10
   \   000036   500F         JNC     ??ZDO_ProcessUserDescSet_2
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   8008         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   7410         MOV     A,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   E0           MOVX    A,@DPTR
   \   000051   C0E0         PUSH    A
   \   000053   7404         MOV     A,#0x4
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   D0E0         POP     A
   \   00005A   12....       LCALL   ?Subroutine42 & 0xFFFF
   2050              msg ++;  // increment one for the length field
   2051          
   2052              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_62:
   \   00005D   A982         MOV     R1,DPL
   \   00005F   AA83         MOV     R2,DPH
   \   000061   89..         MOV     ?V4,R1
   \   000063   8A..         MOV     ?V5,R2
   \   000065   75..00       MOV     ?V6,#0x0
   \   000068   78..         MOV     R0,#?V4
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006D   7407         MOV     A,#0x7
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   E0           MOVX    A,@DPTR
   \   000073   FC           MOV     R4,A
   \   000074   7D00         MOV     R5,#0x0
   \   000076   7408         MOV     A,#0x8
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   AA82         MOV     R2,DPL
   \   00007D   AB83         MOV     R3,DPH
   \   00007F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000082   7403         MOV     A,#0x3
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   2053              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000087                ; Setup parameters for call to function osal_nv_write
   \   000087   7404         MOV     A,#0x4
   \   000089   12....       LCALL   ?XSTACK_DISP100_8
   \   00008C   88..         MOV     ?V2,R0
   \   00008E   89..         MOV     ?V3,R1
   \   000090   78..         MOV     R0,#?V2
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   75..11       MOV     ?V2,#0x11
   \   000098   75..00       MOV     ?V3,#0x0
   \   00009B   78..         MOV     R0,#?V2
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   7C00         MOV     R4,#0x0
   \   0000A2   7D00         MOV     R5,#0x0
   \   0000A4   7A81         MOV     R2,#-0x7f
   \   0000A6   7B00         MOV     R3,#0x0
   \   0000A8   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000AB   7404         MOV     A,#0x4
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   2054              if ( userDesc.len != 0 )
   \   0000B0   7404         MOV     A,#0x4
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000B9   6005         JZ      ??ZDO_ProcessUserDescSet_4
   2055              {
   2056                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   D2E4         SETB    0xE0 /* A   */.4
   \   0000BE   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   2057              }
   2058              else
   2059              {
   2060                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   C2E4         CLR     0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000C3   F0           MOVX    @DPTR,A
   2061              }
   2062          
   2063              status = ZDP_SUCCESS;
   \   0000C4   85..82       MOV     DPL,?XSP + 0
   \   0000C7   85..83       MOV     DPH,?XSP + 1
   \   0000CA   E4           CLR     A
   \   0000CB   8008         SJMP    ??ZDO_ProcessUserDescSet_6
   2064            }
   2065            else
   2066            {
   2067              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000CD   85..82       MOV     DPL,?XSP + 0
   \   0000D0   85..83       MOV     DPH,?XSP + 1
   \   0000D3   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000D5   F0           MOVX    @DPTR,A
   2068            }
   2069          
   2070            outMsg[0] = status;
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   C0E0         PUSH    A
   \   0000D9   7401         MOV     A,#0x1
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
   2071            outMsg[1] = LO_UINT16( aoi );
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   E5..         MOV     A,?V0
   \   0000E8   F0           MOVX    @DPTR,A
   2072            outMsg[2] = LO_UINT16( aoi );
   \   0000E9   7403         MOV     A,#0x3
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   E5..         MOV     A,?V0
   \   0000F0   F0           MOVX    @DPTR,A
   2073          
   2074            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   2075                         inMsg->SecurityUse );
   \   0000F1                ; Setup parameters for call to function ZDP_SendData
   \   0000F1   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0000F4   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FA   7402         MOV     A,#0x2
   \   0000FC   12....       LCALL   ?XSTACK_DISP100_8
   \   0000FF   88..         MOV     ?V0,R0
   \   000101   89..         MOV     ?V1,R1
   \   000103   78..         MOV     R0,#?V0
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   75..14       MOV     ?V0,#0x14
   \   00010B   75..80       MOV     ?V1,#-0x80
   \   00010E   78..         MOV     R0,#?V0
   \   000110   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000113   7903         MOV     R1,#0x3
   \   000115   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000118   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00011B   7405         MOV     A,#0x5
   \   00011D   12....       LCALL   ?DEALLOC_XSTACK8
   2076          }
   \   000120   7415         MOV     A,#0x15
   \   000122   02....       LJMP    ?Subroutine9 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   12....       LCALL   ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET
   2077          
   2078          /*********************************************************************
   2079           * @fn          ZDO_ProcessDeviceAnnce
   2080           *
   2081           * @brief       This function processes a device annouce message.
   2082           *
   2083           * @param       inMsg - incoming message
   2084           *
   2085           * @return      none
   2086           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2087          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )  //chaokw
   \                     ZDO_ProcessDeviceAnnce:
   2088          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2089            ZDO_DeviceAnnce_t Annce;
   2090            AddrMgrEntry_t addrEntry;
   2091            uint8 parentExt[Z_EXTADDR_LEN];
   2092          
   2093            // Parse incoming message
   2094            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000E                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   2095          
   2096            if ( ZSTACK_END_DEVICE_BUILD )
   2097            {
   2098              // Make sure the message didn't come from myself - end device only
   2099              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   2100              {
   2101                return;
   2102              }
   2103            }
   2104          
   2105          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2106            // Clean up the neighbor table
   2107            nwkNeighborRemoveAllStranded();
   \   000015                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000015   12....       LCALL   `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   2108          
   2109            // If address conflict is detected, no need to update the address manager
   2110            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   000018                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   000020   12....       LCALL   `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   000023   E9           MOV     A,R1
   \   000024   6401         XRL     A,#0x1
   \   000026   7003         JNZ     $+5
   \   000028   02....       LJMP    ??ZDO_ProcessDeviceAnnce_0 & 0xFFFF
   2111            {
   2112              return;
   2113            }
   2114          #endif
   2115          
   2116          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2117            // Check for parent's address
   2118            NLME_GetCoordExtAddr( parentExt );
   \   00002B                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00002B   7418         MOV     A,#0x18
   \   00002D   12....       LCALL   ?XSTACK_DISP101_8
   \   000030   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   2119            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   000033                ; Setup parameters for call to function sAddrExtCmp
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   AC82         MOV     R4,DPL
   \   00003A   AD83         MOV     R5,DPH
   \   00003C   7418         MOV     A,#0x18
   \   00003E   12....       LCALL   ?XSTACK_DISP101_8
   \   000041   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000044   E9           MOV     A,R1
   \   000045   6032         JZ      ??ZDO_ProcessDeviceAnnce_1
   2120            {
   2121              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000047                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000047   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00004A   8A..         MOV     ?V0,R2
   \   00004C   8B..         MOV     ?V1,R3
   \   00004E   A8..         MOV     R0,?V0
   \   000050   A9..         MOV     R1,?V1
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   68           XRL     A,R0
   \   00005A   7003         JNZ     ??ZDO_ProcessDeviceAnnce_2
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   00005F   6018         JZ      ??ZDO_ProcessDeviceAnnce_1
   2122              {
   2123                // Set the Parent's MAC's new short address
   2124                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   00006A   90....       MOV     DPTR,#_NIB + 23
   \   00006D   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   2125                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_632:
   \   000070                ; Setup parameters for call to function ZMacSetReq
   \   000070   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   000072   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   000074   794B         MOV     R1,#0x4b
   \   000076   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2126              }
   2127            }
   2128          
   2129            if ( ZSTACK_ROUTER_BUILD )
   2130            {
   2131              // If the device annce comes from a end device child that has moved
   2132              // to another parent, remove it from associated device list
   2133          
   2134              // If the dev annce is coming from other device's children,
   2135              // (The dev annce from its own children shall be unicast to itself,
   2136              // So check the mac destination address)
   2137              // Remove it from the associated device list. If it is not
   2138              // a child, no action will be taken in AssocRemove() anyway.
   2139              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   000079                ; Setup parameters for call to function NLME_GetShortAddr
   \   000079   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00007C   8A..         MOV     ?V0,R2
   \   00007E   8B..         MOV     ?V1,R3
   \   000080   A8..         MOV     R0,?V0
   \   000082   A9..         MOV     R1,?V1
   \   000084   EE           MOV     A,R6
   \   000085   2411         ADD     A,#0x11
   \   000087   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   00008A   68           XRL     A,R0
   \   00008B   7003         JNZ     ??ZDO_ProcessDeviceAnnce_3
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   000090   605C         JZ      ??ZDO_ProcessDeviceAnnce_4
   2140              {
   2141                associated_devices_t *dev_ptr;
   2142          
   2143                // If it's an end device child
   2144                dev_ptr = AssocGetWithExt( Annce.extAddr );
   \   000092                ; Setup parameters for call to function AssocGetWithExt
   \   000092   7402         MOV     A,#0x2
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   AA82         MOV     R2,DPL
   \   000099   AB83         MOV     R3,DPH
   \   00009B   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   00009E   8A..         MOV     ?V0,R2
   \   0000A0   8B..         MOV     ?V1,R3
   \   0000A2   A8..         MOV     R0,?V0
   \   0000A4   A9..         MOV     R1,?V1
   2145                if ( dev_ptr )
   \   0000A6   E8           MOV     A,R0
   \   0000A7   49           ORL     A,R1
   \   0000A8   6026         JZ      ??ZDO_ProcessDeviceAnnce_5
   2146                {
   2147                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2148                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   0000AA   8882         MOV     DPL,R0
   \   0000AC   8983         MOV     DPH,R1
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   6401         XRL     A,#0x1
   \   0000B5   600D         JZ      ??ZDO_ProcessDeviceAnnce_6
   \   0000B7   8882         MOV     DPL,R0
   \   0000B9   8983         MOV     DPH,R1
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   6402         XRL     A,#0x2
   \   0000C2   700C         JNZ     ??ZDO_ProcessDeviceAnnce_5
   2149                  {
   2150                    AssocRemove( Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   0000C4                ; Setup parameters for call to function AssocRemove
   \   0000C4   7402         MOV     A,#0x2
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   AA82         MOV     R2,DPL
   \   0000CB   AB83         MOV     R3,DPH
   \   0000CD   12....       LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
   2151                  }
   2152                }
   2153          
   2154          #if defined ( ZIGBEE_CHILD_AGING )
   2155                // Remove the address from the SrcMatch table,
   2156                // just in case the device was aged out by Child Management Table process
   2157                if ( ( pNwkNotMyChildListDelete != NULL ) &&
   2158                     ( zgChildAgingEnable == TRUE ) )
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   0000D0   90....       MOV     DPTR,#pNwkNotMyChildListDelete
   \   0000D3   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   0000D6   6016         JZ      ??ZDO_ProcessDeviceAnnce_4
   \   0000D8   90....       MOV     DPTR,#zgChildAgingEnable
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   6401         XRL     A,#0x1
   \   0000DE   700E         JNZ     ??ZDO_ProcessDeviceAnnce_4
   2159                {
   2160                  pNwkNotMyChildListDelete( Annce.nwkAddr );
   \   0000E0                ; Setup parameters for indirect call
   \   0000E0   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   2161                }
   2162          #endif // ZIGBEE_CHILD_AGING
   2163              }
   \                     ??CrossCallReturnLabel_448:
   \   0000E3   90....       MOV     DPTR,#pNwkNotMyChildListDelete + 1
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F583         MOV     DPH,A
   \   0000E9   8882         MOV     DPL,R0
   \   0000EB   12....       LCALL   ?CALL_IND
   2164          
   2165              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   0000EE                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000EE   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000F1   8A..         MOV     ?V0,R2
   \   0000F3   8B..         MOV     ?V1,R3
   \   0000F5   A8..         MOV     R0,?V0
   \   0000F7   A9..         MOV     R1,?V1
   \   0000F9   85..82       MOV     DPL,?XSP + 0
   \   0000FC   85..83       MOV     DPH,?XSP + 1
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   68           XRL     A,R0
   \   000101   7003         JNZ     ??ZDO_ProcessDeviceAnnce_7
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_7:
   \   000106   6011         JZ      ??ZDO_ProcessDeviceAnnce_8
   2166              {
   2167                // If an associated device is found with matched extended Address,
   2168                // update its short address
   2169                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   \   000108                ; Setup parameters for call to function AssocChangeNwkAddr
   \   000108   7402         MOV     A,#0x2
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000110   12....       LCALL   `??AssocChangeNwkAddr::?relay`; Banked call to: AssocChangeNwkAddr
   \   000113   E9           MOV     A,R1
   \   000114   6003         JZ      ??ZDO_ProcessDeviceAnnce_8
   2170                {
   2171                  // Set event to save NV
   2172                  ZDApp_NVUpdate();
   \   000116                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000116   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2173                }
   2174              }
   2175            }
   2176          
   2177            // Update the neighbor table
   2178            nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_8:
   \   000119                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   000119   7402         MOV     A,#0x2
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000121   12....       LCALL   `??nwkNeighborUpdateNwkAddr::?relay`; Banked call to: nwkNeighborUpdateNwkAddr
   2179          
   2180            // Assume that the device has moved, remove existing routing entries
   2181            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \   000124                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   000124   7900         MOV     R1,#0x0
   \   000126   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000129   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2182          
   2183          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   2184          
   2185            // Fill in the extended address in address manager if we don't have it already.
   2186            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   00012C   740B         MOV     A,#0xb
   \   00012E   12....       LCALL   ?XSTACK_DISP0_8
   \   000131   E4           CLR     A
   \   000132   12....       LCALL   ?Subroutine27 & 0xFFFF
   2187            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_29:
   \   000135   F8           MOV     R0,A
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   F9           MOV     R1,A
   \   000139   740C         MOV     A,#0xc
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   2188            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_633:
   \   000141                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000141   740B         MOV     A,#0xb
   \   000143   12....       LCALL   ?XSTACK_DISP101_8
   \   000146   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000149   E9           MOV     A,R1
   \   00014A   603F         JZ      ??ZDO_ProcessDeviceAnnce_9
   2189            {
   2190              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   00014C                ; Setup parameters for call to function osal_memset
   \   00014C   7C08         MOV     R4,#0x8
   \   00014E   7D00         MOV     R5,#0x0
   \   000150   7900         MOV     R1,#0x0
   \   000152   7418         MOV     A,#0x18
   \   000154   12....       LCALL   ?XSTACK_DISP101_8
   \   000157   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2191              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   00015A                ; Setup parameters for call to function sAddrExtCmp
   \   00015A   740E         MOV     A,#0xe
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   AC82         MOV     R4,DPL
   \   000161   AD83         MOV     R5,DPH
   \   000163   7418         MOV     A,#0x18
   \   000165   12....       LCALL   ?XSTACK_DISP101_8
   \   000168   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00016B   E9           MOV     A,R1
   \   00016C   601D         JZ      ??ZDO_ProcessDeviceAnnce_9
   2192              {
   2193                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   00016E                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00016E   7402         MOV     A,#0x2
   \   000170   12....       LCALL   ?XSTACK_DISP0_8
   \   000173   AC82         MOV     R4,DPL
   \   000175   AD83         MOV     R5,DPH
   \   000177   740E         MOV     A,#0xe
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   AA82         MOV     R2,DPL
   \   00017E   AB83         MOV     R3,DPH
   \   000180   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2194                AddrMgrEntryUpdate( &addrEntry );
   \   000183                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000183   740B         MOV     A,#0xb
   \   000185   12....       LCALL   ?XSTACK_DISP101_8
   \   000188   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2195              }
   2196            }
   2197          
   2198            // Update the short address in address manager if it's been changed
   2199            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_9:
   \   00018B                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00018B   7402         MOV     A,#0x2
   \   00018D   12....       LCALL   ?XSTACK_DISP0_8
   \   000190   AC82         MOV     R4,DPL
   \   000192   AD83         MOV     R5,DPH
   \   000194   740E         MOV     A,#0xe
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   AA82         MOV     R2,DPL
   \   00019B   AB83         MOV     R3,DPH
   \   00019D   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2200            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   0001A0                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   0001A0   740B         MOV     A,#0xb
   \   0001A2   12....       LCALL   ?XSTACK_DISP101_8
   \   0001A5   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   0001A8   E9           MOV     A,R1
   \   0001A9   6030         JZ      ??ZDO_ProcessDeviceAnnce_0
   2201            {
   2202              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   0001AB   740C         MOV     A,#0xc
   \   0001AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B0   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   0001B3   85..82       MOV     DPL,?XSP + 0
   \   0001B6   85..83       MOV     DPH,?XSP + 1
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   68           XRL     A,R0
   \   0001BB   7003         JNZ     ??ZDO_ProcessDeviceAnnce_10
   \   0001BD   A3           INC     DPTR
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_10:
   \   0001C0   6019         JZ      ??ZDO_ProcessDeviceAnnce_0
   2203              {
   2204                addrEntry.nwkAddr = Annce.nwkAddr;
   \   0001C2   85..82       MOV     DPL,?XSP + 0
   \   0001C5   85..83       MOV     DPH,?XSP + 1
   \   0001C8   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   0001CB   740C         MOV     A,#0xc
   \   0001CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D0   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   2205                AddrMgrEntryUpdate( &addrEntry );
   \                     ??CrossCallReturnLabel_634:
   \   0001D3                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   0001D3   740B         MOV     A,#0xb
   \   0001D5   12....       LCALL   ?XSTACK_DISP101_8
   \   0001D8   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2206              }
   2207            }
   2208          }
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   0001DB   7420         MOV     A,#0x20
   \   0001DD   02....       LJMP    ??Subroutine203_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004                REQUIRE ??Subroutine232_0
   \   000004                ; // Fall through to label ??Subroutine232_0
   2209          
   2210          /*********************************************************************
   2211           * @fn          ZDO_BuildSimpleDescBuf
   2212           *
   2213           * @brief       Build a byte sequence representation of a Simple Descriptor.
   2214           *
   2215           * @param       buf  - pointer to a byte array big enough for data.
   2216           * @param       desc - SimpleDescriptionFormat_t *
   2217           *
   2218           * @return      none
   2219           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2220          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2221          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2222            byte cnt;
   2223            uint16 *ptr;
   2224          
   2225            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   00000C   F0           MOVX    @DPTR,A
   2226            *buf++ = HI_UINT16( desc->AppProfId );
   \   00000D   8C82         MOV     DPL,R4
   \   00000F   8D83         MOV     DPH,R5
   \   000011   A3           INC     DPTR
   \   000012   A882         MOV     R0,DPL
   \   000014   A983         MOV     R1,DPH
   \   000016   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000019   12....       LCALL   ?Subroutine32 & 0xFFFF
   2227            *buf++ = LO_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_41:
   \   00001C   F0           MOVX    @DPTR,A
   2228            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   00001D   EC           MOV     A,R4
   \   00001E   2403         ADD     A,#0x3
   \   000020   F8           MOV     R0,A
   \   000021   E4           CLR     A
   \   000022   3D           ADDC    A,R5
   \   000023   F9           MOV     R1,A
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ?Subroutine32 & 0xFFFF
   2229            *buf++ = LO_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_42:
   \   000030   12....       LCALL   ?Subroutine43 & 0xFFFF
   2230          
   2231            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_65:
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C4           SWAP    A
   \   000035   54F0         ANL     A,#0xf0
   \   000037   8A82         MOV     DPL,R2
   \   000039   8B83         MOV     DPH,R3
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine43 & 0xFFFF
   2232          
   2233            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_66:
   \   000041   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   EA           MOV     A,R2
   \   00004C   2407         ADD     A,#0x7
   \   00004E   FA           MOV     R2,A
   \   00004F   5001         JNC     ??ZDO_BuildSimpleDescBuf_0
   \   000051   0B           INC     R3
   2234            ptr = desc->pAppInClusterList;
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000052   8C82         MOV     DPL,R4
   \   000054   8D83         MOV     DPH,R5
   \   000056   12....       LCALL   ?Subroutine103 & 0xFFFF
   2235            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_478:
   \   000059   7E00         MOV     R6,#0x0
   \   00005B   800E         SJMP    ??ZDO_BuildSimpleDescBuf_1
   2236            {
   2237              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   00005D   12....       LCALL   ?Subroutine19 & 0xFFFF
   2238              *buf++ = LO_UINT16( *ptr );
   2239            }
   \                     ??CrossCallReturnLabel_18:
   \   000060   5001         JNC     ??ZDO_BuildSimpleDescBuf_3
   \   000062   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   000063   E8           MOV     A,R0
   \   000064   2402         ADD     A,#0x2
   \   000066   F8           MOV     R0,A
   \   000067   5001         JNC     ??ZDO_BuildSimpleDescBuf_4
   \   000069   09           INC     R1
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   00006A   0E           INC     R6
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   00006B   8C82         MOV     DPL,R4
   \   00006D   8D83         MOV     DPH,R5
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   FF           MOV     R7,A
   \   000077   EE           MOV     A,R6
   \   000078   C3           CLR     C
   \   000079   9F           SUBB    A,R7
   \   00007A   40E1         JC      ??ZDO_BuildSimpleDescBuf_2
   2240          
   2241            *buf++ = desc->AppNumOutClusters;
   \   00007C   8C82         MOV     DPL,R4
   \   00007E   8D83         MOV     DPH,R5
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   AA82         MOV     R2,DPL
   \   00008F   AB83         MOV     R3,DPH
   2242            ptr = desc->pAppOutClusterList;
   \   000091   8C82         MOV     DPL,R4
   \   000093   8D83         MOV     DPH,R5
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   12....       LCALL   ?Subroutine103 & 0xFFFF
   2243            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_479:
   \   00009B   7E00         MOV     R6,#0x0
   \   00009D   800E         SJMP    ??ZDO_BuildSimpleDescBuf_5
   2244            {
   2245              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_6:
   \   00009F   12....       LCALL   ?Subroutine19 & 0xFFFF
   2246              *buf++ = LO_UINT16( *ptr );
   2247            }
   \                     ??CrossCallReturnLabel_19:
   \   0000A2   5001         JNC     ??ZDO_BuildSimpleDescBuf_7
   \   0000A4   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_7:
   \   0000A5   E8           MOV     A,R0
   \   0000A6   2402         ADD     A,#0x2
   \   0000A8   F8           MOV     R0,A
   \   0000A9   5001         JNC     ??ZDO_BuildSimpleDescBuf_8
   \   0000AB   09           INC     R1
   \                     ??ZDO_BuildSimpleDescBuf_8:
   \   0000AC   0E           INC     R6
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000AD   8C82         MOV     DPL,R4
   \   0000AF   8D83         MOV     DPH,R5
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   FF           MOV     R7,A
   \   0000BC   EE           MOV     A,R6
   \   0000BD   C3           CLR     C
   \   0000BE   9F           SUBB    A,R7
   \   0000BF   40DE         JC      ??ZDO_BuildSimpleDescBuf_6
   2248          }
   \   0000C1   02....       LJMP    ??Subroutine204_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine225_0
   \   000001                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   EA           MOV     A,R2
   \   00000F   2402         ADD     A,#0x2
   \   000011   FA           MOV     R2,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine236_0
   \   000005                ; // Fall through to label ??Subroutine236_0
   2249          
   2250          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2251          /*********************************************************************
   2252           * @fn      ZDO_MatchEndDeviceBind()
   2253           *
   2254           * @brief
   2255           *
   2256           *   Called to match end device binding requests
   2257           *
   2258           * @param  bindReq  - binding request information
   2259           * @param  SecurityUse - Security enable/disable
   2260           *
   2261           * @return  none
   2262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2263          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   2264          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2265            zAddrType_t dstAddr;
   2266            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0,#0x0
   2267            uint8 status;
   2268          
   2269            // Is this the first request?
   2270            if ( matchED == NULL )
   \   000011   90....       MOV     DPTR,#matchED
   \   000014   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000017   7050         JNZ     ??ZDO_MatchEndDeviceBind_0
   2271            {
   2272              // Create match info structure
   2273              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   7A37         MOV     R2,#0x37
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000020   90....       MOV     DPTR,#matchED
   \   000023   EA           MOV     A,R2
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   EB           MOV     A,R3
   \   000027   12....       LCALL   ?Subroutine37 & 0xFFFF
   2274              if ( matchED )
   \                     ??CrossCallReturnLabel_51:
   \   00002A   6019         JZ      ??ZDO_MatchEndDeviceBind_1
   2275              {
   2276                // Clear the structure
   2277                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00002C                ; Setup parameters for call to function osal_memset
   \   00002C   7C37         MOV     R4,#0x37
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   7900         MOV     R1,#0x0
   \   000032   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2278          
   2279                // Copy the first request's information
   2280                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000035                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000035   EE           MOV     A,R6
   \   000036   FC           MOV     R4,A
   \   000037   EF           MOV     A,R7
   \   000038   FD           MOV     R5,A
   \   000039   90....       MOV     DPTR,#matchED
   \   00003C   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   2281                {
   2282                  status = ZDP_NO_ENTRY;
   2283                  sendRsp = TRUE;
   2284                }
   2285              }
   \                     ??CrossCallReturnLabel_433:
   \   00003F   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   000042   E9           MOV     A,R1
   \   000043   700B         JNZ     ??ZDO_MatchEndDeviceBind_2
   2286              else
   2287              {
   2288                status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   7488         MOV     A,#-0x78
   \   00004D   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2289                sendRsp = TRUE;
   2290              }
   2291          
   2292              if ( !sendRsp )
   2293              {
   2294                // Set into the correct state
   2295                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   000050   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   000053   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000056   7401         MOV     A,#0x1
   \   000058   F0           MOVX    @DPTR,A
   2296          
   2297                // Setup the timeout
   2298                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000059                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000059   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   00005B   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   00005D   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000060   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   2299              }
   2300            }
   \                     ??CrossCallReturnLabel_434:
   \   000063   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   000066   02....       LJMP    ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   2301            else
   2302            {
   2303                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C8           XCH     A,R0
   \   00006B   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   00006E   7402         MOV     A,#0x2
   \   000070   F0           MOVX    @DPTR,A
   2304          
   2305                // Copy the 2nd request's information
   2306                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   000071                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000071   EE           MOV     A,R6
   \   000072   FC           MOV     R4,A
   \   000073   EF           MOV     A,R7
   \   000074   FD           MOV     R5,A
   \   000075   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000078   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   00007B   E9           MOV     A,R1
   \   00007C   700C         JNZ     ??ZDO_MatchEndDeviceBind_5
   2307                {
   2308                  status = ZDP_NO_ENTRY;
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   7488         MOV     A,#-0x78
   \   000086   F0           MOVX    @DPTR,A
   2309                  sendRsp = TRUE;
   \   000087   75..01       MOV     ?V0,#0x1
   2310                }
   2311          
   2312                // Make a source match for ed1
   2313                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2314                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2315                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   00008A                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   00008A   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   00008D   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   000090   78..         MOV     R0,#?V2
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000098   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00009B   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   00009E   2428         ADD     A,#0x28
   \   0000A0   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   0000A3   FC           MOV     R4,A
   \   0000A4   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0000A7   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   0000AA   2414         ADD     A,#0x14
   \   0000AC   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   0000AF   F9           MOV     R1,A
   \   0000B0   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B8   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   0000BB   12....       LCALL   ?Subroutine23 & 0xFFFF
   2316                if ( matchED->ed1numMatched )
   \                     ??CrossCallReturnLabel_418:
   \   0000BE   2431         ADD     A,#0x31
   \   0000C0   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   0000C3   6043         JZ      ??ZDO_MatchEndDeviceBind_6
   \   0000C5                ; Setup parameters for call to function osal_mem_alloc
   \   0000C5   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000C8   FA           MOV     R2,A
   \   0000C9   E4           CLR     A
   \   0000CA   33           RLC     A
   \   0000CB   FB           MOV     R3,A
   2317                {
   2318                  // Save the match list
   2319                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000CC   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000CF   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   0000D2   CC           XCH     A,R4
   \   0000D3   2432         ADD     A,#0x32
   \   0000D5   12....       LCALL   ?Subroutine46 & 0xFFFF
   2320                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_415:
   \   0000D8   6022         JZ      ??ZDO_MatchEndDeviceBind_7
   2321                  {
   2322                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000DA                ; Setup parameters for call to function osal_memcpy
   \   0000DA   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   0000DD   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   0000E0   75..00       MOV     ?V6,#0x0
   \   0000E3   78..         MOV     R0,#?V4
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E8   12....       LCALL   ?Subroutine57 & 0xFFFF
   2323                  }
   \                     ??CrossCallReturnLabel_86:
   \   0000EB   FC           MOV     R4,A
   \   0000EC   E4           CLR     A
   \   0000ED   33           RLC     A
   \   0000EE   FD           MOV     R5,A
   \   0000EF   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000F2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F5   7403         MOV     A,#0x3
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   800C         SJMP    ??ZDO_MatchEndDeviceBind_6
   2324                  else
   2325                  {
   2326                    // Allocation error, stop
   2327                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   0000FC   85..82       MOV     DPL,?XSP + 0
   \   0000FF   85..83       MOV     DPH,?XSP + 1
   \   000102   7488         MOV     A,#-0x78
   \   000104   F0           MOVX    @DPTR,A
   2328                    sendRsp = TRUE;
   \   000105   75..01       MOV     ?V0,#0x1
   2329                  }
   2330                }
   2331          
   2332                // Make a source match for ed2
   2333                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2334                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2335                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   000108                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000108   78..         MOV     R0,#?V2
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000110   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000113   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   000116   2411         ADD     A,#0x11
   \   000118   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00011B   FC           MOV     R4,A
   \   00011C   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00011F   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   000122   242B         ADD     A,#0x2b
   \   000124   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000127   F9           MOV     R1,A
   \   000128   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   00012B   7404         MOV     A,#0x4
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000130   E9           MOV     A,R1
   \   000131   F8           MOV     R0,A
   \   000132   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   000135   2434         ADD     A,#0x34
   \   000137   12....       LCALL   ?Subroutine23 & 0xFFFF
   2336                if ( matchED->ed2numMatched )
   \                     ??CrossCallReturnLabel_419:
   \   00013A   2434         ADD     A,#0x34
   \   00013C   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00013F   6035         JZ      ??ZDO_MatchEndDeviceBind_8
   \   000141                ; Setup parameters for call to function osal_mem_alloc
   \   000141   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000144   FA           MOV     R2,A
   \   000145   E4           CLR     A
   \   000146   33           RLC     A
   \   000147   FB           MOV     R3,A
   2337                {
   2338                  // Save the match list
   2339                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000148   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00014B   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   00014E   CC           XCH     A,R4
   \   00014F   2435         ADD     A,#0x35
   \   000151   12....       LCALL   ?Subroutine46 & 0xFFFF
   2340                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_416:
   \   000154   6042         JZ      ??ZDO_MatchEndDeviceBind_9
   2341                  {
   2342                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000156                ; Setup parameters for call to function osal_memcpy
   \   000156   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   000159   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   00015C   75..00       MOV     ?V6,#0x0
   \   00015F   78..         MOV     R0,#?V4
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000164   12....       LCALL   ?Subroutine58 & 0xFFFF
   2343                  }
   \                     ??CrossCallReturnLabel_89:
   \   000167   FC           MOV     R4,A
   \   000168   E4           CLR     A
   \   000169   33           RLC     A
   \   00016A   FD           MOV     R5,A
   \   00016B   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00016E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000171   7403         MOV     A,#0x3
   \   000173   12....       LCALL   ?DEALLOC_XSTACK8
   2344                  else
   2345                  {
   2346                    // Allocation error, stop
   2347                    status = ZDP_NO_ENTRY;
   2348                    sendRsp = TRUE;
   2349                  }
   2350                }
   2351          
   2352                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   000176   E5..         MOV     A,?V0
   \   000178   A2E0         MOV     C,0xE0 /* A   */.0
   \   00017A   4025         JC      ??ZDO_MatchEndDeviceBind_10
   \   00017C   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   00017F   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000182   7008         JNZ     ??ZDO_MatchEndDeviceBind_11
   \   000184   90....       MOV     DPTR,#matchED
   \   000187   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00018A   6015         JZ      ??ZDO_MatchEndDeviceBind_10
   2353                {
   2354                  // Do the first unbind/bind state
   2355                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   00018C                ; Setup parameters for call to function ZDMatchSendState
   \   00018C   7B00         MOV     R3,#0x0
   \   00018E   7A00         MOV     R2,#0x0
   \   000190   7900         MOV     R1,#0x0
   \   000192   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2356                }
   2357                else
   2358                {
   2359                  status = ZDP_NO_MATCH;
   2360                  sendRsp = TRUE;
   2361                }
   2362            }
   2363          
   2364            if ( sendRsp )
   \   000195   02....       LJMP    ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   000198   85..82       MOV     DPL,?XSP + 0
   \   00019B   85..83       MOV     DPH,?XSP + 1
   \   00019E   7488         MOV     A,#-0x78
   \   0001A0   F0           MOVX    @DPTR,A
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   0001A1   85..82       MOV     DPL,?XSP + 0
   \   0001A4   85..83       MOV     DPH,?XSP + 1
   \   0001A7   7486         MOV     A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   0001A9   F0           MOVX    @DPTR,A
   2365            {
   2366              // send response to this requester
   2367              dstAddr.addrMode = Addr16Bit;
   \   0001AA   7409         MOV     A,#0x9
   \   0001AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AF   7402         MOV     A,#0x2
   \   0001B1   12....       LCALL   ?Subroutine53 & 0xFFFF
   2368              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \                     ??CrossCallReturnLabel_81:
   \   0001B4   F8           MOV     R0,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   F9           MOV     R1,A
   \   0001B8   7401         MOV     A,#0x1
   \   0001BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   2369              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_635:
   \   0001C0                ; Setup parameters for call to function ZDP_SendData
   \   0001C0   8E82         MOV     DPL,R6
   \   0001C2   8F83         MOV     DPH,R7
   \   0001C4   A3           INC     DPTR
   \   0001C5   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   0001C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CB   7401         MOV     A,#0x1
   \   0001CD   12....       LCALL   ?XSTACK_DISP100_8
   \   0001D0   88..         MOV     ?V0,R0
   \   0001D2   89..         MOV     ?V1,R1
   \   0001D4   78..         MOV     R0,#?V0
   \   0001D6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D9   75..20       MOV     ?V0,#0x20
   \   0001DC   75..80       MOV     ?V1,#-0x80
   \   0001DF   78..         MOV     R0,#?V0
   \   0001E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E4   7901         MOV     R1,#0x1
   \   0001E6   7406         MOV     A,#0x6
   \   0001E8   12....       LCALL   ?XSTACK_DISP102_8
   \   0001EB   EE           MOV     A,R6
   \   0001EC   FA           MOV     R2,A
   \   0001ED   EF           MOV     A,R7
   \   0001EE   FB           MOV     R3,A
   \   0001EF   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0001F2   7405         MOV     A,#0x5
   \   0001F4   12....       LCALL   ?DEALLOC_XSTACK8
   2370          
   2371              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001F7   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0001FA   7042         JNZ     ??ZDO_MatchEndDeviceBind_12
   2372              {
   2373                // send response to first requester
   2374                dstAddr.addrMode = Addr16Bit;
   \   0001FC   7409         MOV     A,#0x9
   \   0001FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000201   7402         MOV     A,#0x2
   \   000203   F0           MOVX    @DPTR,A
   2375                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \   000204   12....       LCALL   ?Subroutine76 & 0xFFFF
   2376                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2377              }
   \                     ??CrossCallReturnLabel_121:
   \   000207   12....       LCALL   ?XSTACK_DISP0_8
   \   00020A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00020D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000210   7401         MOV     A,#0x1
   \   000212   12....       LCALL   ?XSTACK_DISP100_8
   \   000215   88..         MOV     ?V0,R0
   \   000217   89..         MOV     ?V1,R1
   \   000219   78..         MOV     R0,#?V0
   \   00021B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021E   75..20       MOV     ?V0,#0x20
   \   000221   75..80       MOV     ?V1,#-0x80
   \   000224   78..         MOV     R0,#?V0
   \   000226   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000229   7901         MOV     R1,#0x1
   \   00022B   7406         MOV     A,#0x6
   \   00022D   12....       LCALL   ?XSTACK_DISP102_8
   \   000230   90....       MOV     DPTR,#matchED
   \   000233   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000236   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000239   7405         MOV     A,#0x5
   \   00023B   12....       LCALL   ?DEALLOC_XSTACK8
   2378          
   2379              // Process ended - release memory used
   2380              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   00023E                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00023E   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2381            }
   2382          }
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   000241   740A         MOV     A,#0xa
   \   000243   02....       LJMP    ?Subroutine9 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   242E         ADD     A,#0x2e
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine226_0
   \   000003                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_571:
   \   000003   2431         ADD     A,#0x31
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3C           ADDC    A,R4
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine227_0
   \   000006                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine228_0
   \   000006                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000003   C8           XCH     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine229_0
   \   000001                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   90....       MOV     DPTR,#matchED
   \   000004   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   000003   2412         ADD     A,#0x12
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   000003   2429         ADD     A,#0x29
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   000003   2435         ADD     A,#0x35
   \   000005   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   000003   242C         ADD     A,#0x2c
   \   000005   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   000003   2432         ADD     A,#0x32
   \   000005   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004                REQUIRE ??Subroutine230_0
   \   000004                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   000003   2415         ADD     A,#0x15
   \   000005   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2417         ADD     A,#0x17
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine238_0
   \   000003                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   000003   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   6402         XRL     A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   00000B   7401         MOV     A,#0x1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_574:
   \   000003   2434         ADD     A,#0x34
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000006   25E0         ADD     A,0xE0 /* A   */
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   25E0         ADD     A,0xE0 /* A   */
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_573:
   \   000006   2431         ADD     A,#0x31
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   38           ADDC    A,R0
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   49           ORL     A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000006   F583         MOV     DPH,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0,A
   \   00000E   78..         MOV     R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   EA           MOV     A,R2
   \   000001   F8           MOV     R0,A
   \   000002   EB           MOV     A,R3
   \   000003   F9           MOV     R1,A
   \   000004   90....       MOV     DPTR,#matchED
   \   000007                REQUIRE ??Subroutine243_0
   \   000007                ; // Fall through to label ??Subroutine243_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine246_0
   \   000003                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   2383          
   2384          /*********************************************************************
   2385           * @fn      ZDO_RemoveMatchMemory()
   2386           *
   2387           * @brief   Called to clear the memory used for the end device bind.
   2388           *
   2389           * @param  none
   2390           *
   2391           * @return  none
   2392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2393          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2394          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2395            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   00000A   6075         JZ      ??ZDO_RemoveMatchMemory_0
   2396            {
   2397              if ( matchED->ed2Matched != NULL )
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   C8           XCH     A,R0
   \   00000E   2435         ADD     A,#0x35
   \   000010   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000013   6006         JZ      ??ZDO_RemoveMatchMemory_1
   2398              {
   2399                osal_mem_free( matchED->ed2Matched );
   \   000015                ; Setup parameters for call to function osal_mem_free
   \   000015   12....       LCALL   ?Subroutine73 & 0xFFFF
   2400              }
   \                     ??CrossCallReturnLabel_117:
   \   000018   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2401              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_1:
   \   00001B   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   00001E   2432         ADD     A,#0x32
   \   000020   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000023   6006         JZ      ??ZDO_RemoveMatchMemory_2
   2402              {
   2403                osal_mem_free( matchED->ed1Matched );
   \   000025                ; Setup parameters for call to function osal_mem_free
   \   000025   12....       LCALL   ?Subroutine71 & 0xFFFF
   2404              }
   \                     ??CrossCallReturnLabel_113:
   \   000028   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2405              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_2:
   \   00002B   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   00002E   2412         ADD     A,#0x12
   \   000030   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000033   6009         JZ      ??ZDO_RemoveMatchMemory_3
   2406              {
   2407                osal_mem_free( matchED->ed1.inClusters );
   \   000035                ; Setup parameters for call to function osal_mem_free
   \   000035   12....       LCALL   ?Subroutine84 & 0xFFFF
   2408              }
   \                     ??CrossCallReturnLabel_136:
   \   000038   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   00003B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2409              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   00003E   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000041   2415         ADD     A,#0x15
   \   000043   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000046   6006         JZ      ??ZDO_RemoveMatchMemory_4
   2410              {
   2411                osal_mem_free( matchED->ed1.outClusters );
   \   000048                ; Setup parameters for call to function osal_mem_free
   \   000048   12....       LCALL   ?Subroutine70 & 0xFFFF
   2412              }
   \                     ??CrossCallReturnLabel_111:
   \   00004B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2413              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   00004E   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   000051   2429         ADD     A,#0x29
   \   000053   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000056   6009         JZ      ??ZDO_RemoveMatchMemory_5
   2414              {
   2415                osal_mem_free( matchED->ed2.inClusters );
   \   000058                ; Setup parameters for call to function osal_mem_free
   \   000058   12....       LCALL   ?Subroutine83 & 0xFFFF
   2416              }
   \                     ??CrossCallReturnLabel_134:
   \   00005B   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   00005E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2417              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000061   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_559:
   \   000064   242C         ADD     A,#0x2c
   \   000066   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000069   6006         JZ      ??ZDO_RemoveMatchMemory_6
   2418              {
   2419                osal_mem_free( matchED->ed2.outClusters );
   \   00006B                ; Setup parameters for call to function osal_mem_free
   \   00006B   12....       LCALL   ?Subroutine72 & 0xFFFF
   2420              }
   \                     ??CrossCallReturnLabel_115:
   \   00006E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2421          
   2422              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_6:
   \   000071                ; Setup parameters for call to function osal_mem_free
   \   000071   90....       MOV     DPTR,#matchED
   \   000074   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000077   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2423              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \   00007A   90....       MOV     DPTR,#matchED
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   F0           MOVX    @DPTR,A
   2424            }
   2425          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   000081                REQUIRE ?Subroutine0
   \   000081                ; // Fall through to label ?Subroutine0
   2426          
   2427          /*********************************************************************
   2428           * @fn      ZDO_CopyMatchInfo()
   2429           *
   2430           * @brief   Called to copy memory used for the end device bind.
   2431           *
   2432           * @param  srcReq - source information
   2433           * @param  dstReq - destination location
   2434           *
   2435           * @return  TRUE if copy was successful.
   2436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2437          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2438          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2439            uint8 allOK = TRUE;
   \   00000D   75..01       MOV     ?V2,#0x1
   2440          
   2441            // Copy bind information into the match info structure
   2442            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8C..         MOV     ?V4,R4
   \   000012   8D..         MOV     ?V5,R5
   \   000014   75..00       MOV     ?V6,#0x0
   \   000017   78..         MOV     R0,#?V4
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001C   7C17         MOV     R4,#0x17
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000023   7403         MOV     A,#0x3
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   2443          
   2444            // Initialize the destination cluster pointers
   2445            destReq->inClusters = NULL;
   \   000028   12....       LCALL   ?Subroutine18 & 0xFFFF
   2446            destReq->outClusters = NULL;
   2447          
   2448            // Copy input cluster IDs
   2449            if ( srcReq->numInClusters )
   \                     ??CrossCallReturnLabel_16:
   \   00002B   E5..         MOV     A,?V0
   \   00002D   2411         ADD     A,#0x11
   \   00002F   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6037         JZ      ??ZDO_CopyMatchInfo_0
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   2450            {
   2451              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \                     ??CrossCallReturnLabel_648:
   \   000038   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV     ?V4,R2
   \   00003D   8B..         MOV     ?V5,R3
   \   00003F   A8..         MOV     R0,?V4
   \   000041   A9..         MOV     R1,?V5
   \   000043   12....       LCALL   ?Subroutine21 & 0xFFFF
   2452              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_460:
   \   000046   6021         JZ      ??ZDO_CopyMatchInfo_1
   2453              {
   2454                // Copy the clusters
   2455                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2456                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   000048                ; Setup parameters for call to function osal_memcpy
   \   000048   E5..         MOV     A,?V0
   \   00004A   2412         ADD     A,#0x12
   \   00004C   12....       LCALL   ?Subroutine105 & 0xFFFF
   2457              }
   \                     ??CrossCallReturnLabel_164:
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000052   E5..         MOV     A,?V0
   \   000054   2411         ADD     A,#0x11
   \   000056   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000059   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   00005C   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   00005F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000062   7403         MOV     A,#0x3
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   \   000067   8003         SJMP    ??ZDO_CopyMatchInfo_0
   2458              else
   2459              {
   2460                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   000069   75..00       MOV     ?V2,#0x0
   2461              }
   2462            }
   2463          
   2464            // Copy output cluster IDs
   2465            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   00006C   E5..         MOV     A,?V0
   \   00006E   2414         ADD     A,#0x14
   \   000070   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   000073   E0           MOVX    A,@DPTR
   \   000074   6035         JZ      ??ZDO_CopyMatchInfo_2
   \   000076                ; Setup parameters for call to function osal_mem_alloc
   \   000076   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   2466            {
   2467              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \                     ??CrossCallReturnLabel_649:
   \   000079   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00007C   8A..         MOV     ?V4,R2
   \   00007E   8B..         MOV     ?V5,R3
   \   000080   A8..         MOV     R0,?V4
   \   000082   A9..         MOV     R1,?V5
   \   000084   EE           MOV     A,R6
   \   000085   2415         ADD     A,#0x15
   \   000087   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   2468              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_461:
   \   00008A   6055         JZ      ??ZDO_CopyMatchInfo_3
   2469              {
   2470                // Copy the clusters
   2471                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2472                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   00008C                ; Setup parameters for call to function osal_memcpy
   \   00008C   E5..         MOV     A,?V0
   \   00008E   2415         ADD     A,#0x15
   \   000090   12....       LCALL   ?Subroutine105 & 0xFFFF
   2473              }
   \                     ??CrossCallReturnLabel_165:
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000096   E5..         MOV     A,?V0
   \   000098   2414         ADD     A,#0x14
   \   00009A   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00009D   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   0000A0   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   0000A3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A6   7403         MOV     A,#0x3
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   2474              else
   2475              {
   2476                allOK = FALSE;
   2477              }
   2478            }
   2479          
   2480            if ( allOK == FALSE )
   \                     ??ZDO_CopyMatchInfo_2:
   \   0000AB   E5..         MOV     A,?V2
   \   0000AD   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000AF   402B         JC      ??ZDO_CopyMatchInfo_4
   2481            {
   2482              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_5:
   \   0000B1   EE           MOV     A,R6
   \   0000B2   2412         ADD     A,#0x12
   \   0000B4   F582         MOV     DPL,A
   \   0000B6   E4           CLR     A
   \   0000B7   3F           ADDC    A,R7
   \   0000B8   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   0000BB   6009         JZ      ??ZDO_CopyMatchInfo_6
   2483              {
   2484                osal_mem_free( destReq->inClusters );
   \   0000BD                ; Setup parameters for call to function osal_mem_free
   \   0000BD   12....       LCALL   ?Subroutine139 & 0xFFFF
   2485              }
   \                     ??CrossCallReturnLabel_335:
   \   0000C0   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   0000C3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2486              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_6:
   \   0000C6   EE           MOV     A,R6
   \   0000C7   2415         ADD     A,#0x15
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   E4           CLR     A
   \   0000CC   3F           ADDC    A,R7
   \   0000CD   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   0000D0   600A         JZ      ??ZDO_CopyMatchInfo_4
   2487              {
   2488                osal_mem_free( destReq->outClusters );
   \   0000D2                ; Setup parameters for call to function osal_mem_free
   \   0000D2   EE           MOV     A,R6
   \   0000D3   12....       LCALL   ?Subroutine141 & 0xFFFF
   2489              }
   2490            }
   \                     ??CrossCallReturnLabel_219:
   \   0000D6   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   0000D9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2491          
   2492            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_4:
   \   0000DC   A9..         MOV     R1,?V2
   \   0000DE   02....       LJMP    ??Subroutine207_0 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_3:
   \   0000E1   75..00       MOV     ?V2,#0x0
   \   0000E4   80CB         SJMP    ??ZDO_CopyMatchInfo_5
   2493          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000003   25E0         ADD     A,0xE0 /* A   */
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   33           RLC     A
   \   000008   FD           MOV     R5,A
   \   000009   EE           MOV     A,R6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000003   F5..         MOV     ?V4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V5,A
   \   000009   78..         MOV     R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   EE           MOV     A,R6
   \   000001   2412         ADD     A,#0x12
   \   000003                REQUIRE ??Subroutine234_0
   \   000003                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine235_0
   \   000006                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_644:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   00000A   E4           CLR     A
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET
   2494          
   2495          /*********************************************************************
   2496           * @fn      ZDMatchSendState()
   2497           *
   2498           * @brief   State machine for the End device match message algorithm.
   2499           *
   2500           * @param  reason - state of algoritm
   2501           * @param  status - initial message status
   2502           * @param  TransSeq - next transaction sequence number
   2503           *
   2504           * @return  FALSE if error and we are not currently matching, TRUE
   2505           *          if success.
   2506           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2507          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2508          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V3,R1
   \   00000C   8A..         MOV     ?V6,R2
   \   00000E   8B..         MOV     ?V7,R3
   2509            uint8 *dstIEEEAddr = NULL;
   \   000010   75..00       MOV     ?V4,#0x0
   \   000013   75..00       MOV     ?V5,#0x0
   2510            uint8 dstEP = 0xFF;
   \   000016   75..FF       MOV     ?V2,#-0x1
   2511            zAddrType_t dstAddr;
   2512            zAddrType_t destinationAddr;
   2513            uint16 msgType;
   2514            uint16 clusterID = 0xFFFF;
   \   000019   75..FF       MOV     ?V8,#-0x1
   \   00001C   75..FF       MOV     ?V9,#-0x1
   2515            ZDEndDeviceBind_t *ed = NULL;
   \   00001F   75..00       MOV     ?V0,#0x0
   \   000022   75..00       MOV     ?V1,#0x0
   2516            uint8 rspStatus = ZDP_SUCCESS;
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   E4           CLR     A
   \   00002C   12....       LCALL   ?Subroutine37 & 0xFFFF
   2517          
   2518            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_52:
   \   00002F   6017         JZ      ??ZDMatchSendState_0
   2519            {
   2520              return ( FALSE );
   2521            }
   2522          
   2523            // Check sequence number
   2524            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \   000031   7403         MOV     A,#0x3
   \   000033   65..         XRL     A,?V3
   \   000035   6006         JZ      ??ZDMatchSendState_1
   \   000037   7402         MOV     A,#0x2
   \   000039   65..         XRL     A,?V3
   \   00003B   7010         JNZ     ??ZDMatchSendState_2
   2525            {
   2526              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_1:
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C8           XCH     A,R0
   \   00003F   2430         ADD     A,#0x30
   \   000041   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000044   65..         XRL     A,?V7
   \   000046   6005         JZ      ??ZDMatchSendState_2
   2527              {
   2528                return( FALSE ); // ignore the message
   \                     ??ZDMatchSendState_0:
   \   000048   7900         MOV     R1,#0x0
   \   00004A   02....       LJMP    ??ZDMatchSendState_3 & 0xFFFF
   2529              }
   2530            }
   2531          
   2532            // turn off timer
   2533            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_2:
   \   00004D                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00004D   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   00004F   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000051   7A00         MOV     R2,#0x0
   \   000053   7B00         MOV     R3,#0x0
   \   000055   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   2534          
   2535            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   000058   7401         MOV     A,#0x1
   \   00005A   65..         XRL     A,?V3
   \   00005C   700A         JNZ     ??ZDMatchSendState_4
   2536            {
   2537              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   7485         MOV     A,#-0x7b
   \   000066   803D         SJMP    ??ZDMatchSendState_5
   2538            }
   2539          
   2540            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_4:
   \   000068   E5..         MOV     A,?V3
   \   00006A   6006         JZ      ??ZDMatchSendState_6
   \   00006C   7403         MOV     A,#0x3
   \   00006E   65..         XRL     A,?V3
   \   000070   7019         JNZ     ??ZDMatchSendState_7
   2541            {
   2542              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_6:
   \   000072   90....       MOV     DPTR,#matchED
   \   000075   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000078   F0           MOVX    @DPTR,A
   2543          
   2544              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   000079   7403         MOV     A,#0x3
   \   00007B   65..         XRL     A,?V3
   \   00007D   7029         JNZ     ??ZDMatchSendState_8
   \   00007F   E5..         MOV     A,?V6
   \   000081   6029         JZ      ??ZDMatchSendState_9
   2545              {
   2546                rspStatus = status;
   \   000083   85..82       MOV     DPL,?XSP + 0
   \   000086   85..83       MOV     DPH,?XSP + 1
   \   000089   801A         SJMP    ??ZDMatchSendState_5
   2547              }
   2548            }
   2549            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_7:
   \   00008B   7402         MOV     A,#0x2
   \   00008D   65..         XRL     A,?V3
   \   00008F   701B         JNZ     ??ZDMatchSendState_9
   2550            {
   2551              if ( status == ZDP_SUCCESS )
   \   000091   E5..         MOV     A,?V6
   \   000093   90....       MOV     DPTR,#matchED
   \   000096   7005         JNZ     ??ZDMatchSendState_10
   2552              {
   2553                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   000098   12....       LCALL   ?Subroutine80 & 0xFFFF
   2554              }
   \                     ??CrossCallReturnLabel_130:
   \   00009B   8008         SJMP    ??ZDMatchSendState_5
   2555              else
   2556              {
   2557                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_10:
   \   00009D   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   2558              }
   2559            }
   \                     ??CrossCallReturnLabel_547:
   \   0000A0   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   0000A3   7402         MOV     A,#0x2
   \                     ??ZDMatchSendState_5:
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   8004         SJMP    ??ZDMatchSendState_9
   2560          
   2561            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_8:
   \   0000A8   E5..         MOV     A,?V3
   \   0000AA   601E         JZ      ??ZDMatchSendState_11
   \                     ??ZDMatchSendState_9:
   \   0000AC   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0000AF   7019         JNZ     ??ZDMatchSendState_11
   2562            {
   2563              // Move to the next cluster ID
   2564              if ( matchED->ed1numMatched )
   \   0000B1   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000B4   6005         JZ      ??ZDMatchSendState_12
   2565              {
   2566                matchED->ed1numMatched--;
   \   0000B6   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   2567              }
   \                     ??CrossCallReturnLabel_412:
   \   0000B9   800A         SJMP    ??ZDMatchSendState_13
   2568              else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_12:
   \   0000BB   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000BE   600A         JZ      ??ZDMatchSendState_11
   2569              {
   2570                matchED->ed2numMatched--;
   \   0000C0   12....       LCALL   ?Subroutine91 & 0xFFFF
   2571              }
   2572            }
   \                     ??CrossCallReturnLabel_560:
   \   0000C3   2434         ADD     A,#0x34
   \                     ??ZDMatchSendState_13:
   \   0000C5   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0000C8   14           DEC     A
   \   0000C9   F0           MOVX    @DPTR,A
   2573          
   2574            // What message do we send now
   2575            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_11:
   \   0000CA   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0000CD   6018         JZ      ??ZDMatchSendState_14
   2576            {
   2577              ed = &(matchED->ed1);
   \   0000CF   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   2578              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \                     ??CrossCallReturnLabel_510:
   \   0000D2   12....       LCALL   ?Subroutine57 & 0xFFFF
   2579              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2580              dstEP = matchED->ed2.endpoint;
   2581            }
   \                     ??CrossCallReturnLabel_87:
   \   0000D5   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_671:
   \   0000D8   CA           XCH     A,R2
   \   0000D9   2432         ADD     A,#0x32
   \   0000DB   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000DE   241D         ADD     A,#0x1d
   \   0000E0   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0000E3   2425         ADD     A,#0x25
   \   0000E5   8026         SJMP    ??ZDMatchSendState_15
   2582            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_14:
   \   0000E7   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000EA   6026         JZ      ??ZDMatchSendState_16
   2583            {
   2584              ed = &(matchED->ed2);
   \   0000EC   90....       MOV     DPTR,#matchED
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   2417         ADD     A,#0x17
   \   0000F2   F5..         MOV     ?V0,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   3400         ADDC    A,#0x0
   \   0000F8   F5..         MOV     ?V1,A
   2585              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \   0000FA   12....       LCALL   ?Subroutine58 & 0xFFFF
   2586              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2587              dstEP = matchED->ed1.endpoint;
   2588            }
   \                     ??CrossCallReturnLabel_90:
   \   0000FD   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_672:
   \   000100   CA           XCH     A,R2
   \   000101   2435         ADD     A,#0x35
   \   000103   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000106   2406         ADD     A,#0x6
   \   000108   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00010B   240E         ADD     A,#0xe
   \                     ??ZDMatchSendState_15:
   \   00010D   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000110   F5..         MOV     ?V2,A
   2589          
   2590            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_16:
   \   000112   7409         MOV     A,#0x9
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   7402         MOV     A,#0x2
   \   000119   12....       LCALL   ?Subroutine27 & 0xFFFF
   2591          
   2592            // Send the next message
   2593            if ( (rspStatus == ZDP_SUCCESS) && ed )
   \                     ??CrossCallReturnLabel_30:
   \   00011C   6003         JZ      $+5
   \   00011E   02....       LJMP    ??ZDMatchSendState_17 & 0xFFFF
   \   000121   E5..         MOV     A,?V0
   \   000123   45..         ORL     A,?V1
   \   000125   7003         JNZ     $+5
   \   000127   02....       LJMP    ??ZDMatchSendState_17 & 0xFFFF
   2594            {
   2595              // Send unbind/bind message to source
   2596              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   00012A   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00012D   7004         JNZ     ??ZDMatchSendState_18
   2597              {
   2598                msgType = Unbind_req;
   \   00012F   7E22         MOV     R6,#0x22
   \   000131   8002         SJMP    ??ZDMatchSendState_19
   2599              }
   2600              else
   2601              {
   2602                msgType = Bind_req;
   \                     ??ZDMatchSendState_18:
   \   000133   7E21         MOV     R6,#0x21
   2603              }
   2604          
   2605              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_19:
   \   000135   85..82       MOV     DPL,?V0
   \   000138   85..83       MOV     DPH,?V1
   \   00013B   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   00013E   7401         MOV     A,#0x1
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   2606          
   2607              // Save off the transaction sequence number
   2608              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_636:
   \   000146   90....       MOV     DPTR,#ZDP_TransID
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   C0E0         PUSH    A
   \   00014C   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   00014F   2430         ADD     A,#0x30
   \   000151   F582         MOV     DPL,A
   \   000153   E4           CLR     A
   \   000154   38           ADDC    A,R0
   \   000155   F583         MOV     DPH,A
   \   000157   D0E0         POP     A
   \   000159   F0           MOVX    @DPTR,A
   2609          
   2610              destinationAddr.addrMode = Addr64Bit;
   \   00015A   7412         MOV     A,#0x12
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   7403         MOV     A,#0x3
   \   000161   F0           MOVX    @DPTR,A
   2611              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000162                ; Setup parameters for call to function sAddrExtCpy
   \   000162   AC..         MOV     R4,?V4
   \   000164   AD..         MOV     R5,?V5
   \   000166   740A         MOV     A,#0xa
   \   000168   12....       LCALL   ?XSTACK_DISP101_8
   \   00016B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2612          
   2613              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2614                  &destinationAddr, dstEP, ed->SecurityUse );
   \   00016E                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00016E   85..82       MOV     DPL,?V0
   \   000171   85..83       MOV     DPH,?V1
   \   000174   A3           INC     DPTR
   \   000175   E0           MOVX    A,@DPTR
   \   000176   F5..         MOV     ?V4,A
   \   000178   78..         MOV     R0,#?V4
   \   00017A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00017D   78..         MOV     R0,#?V2
   \   00017F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000182   740C         MOV     A,#0xc
   \   000184   12....       LCALL   ?XSTACK_DISP100_8
   \   000187   88..         MOV     ?V4,R0
   \   000189   89..         MOV     ?V5,R1
   \   00018B   78..         MOV     R0,#?V4
   \   00018D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000190   78..         MOV     R0,#?V8
   \   000192   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000195   E5..         MOV     A,?V0
   \   000197   2406         ADD     A,#0x6
   \   000199   F5..         MOV     ?V4,A
   \   00019B   E4           CLR     A
   \   00019C   35..         ADDC    A,?V1
   \   00019E   F5..         MOV     ?V5,A
   \   0001A0   78..         MOV     R0,#?V4
   \   0001A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A5   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   0001A8   F9           MOV     R1,A
   \   0001A9   7409         MOV     A,#0x9
   \   0001AB   12....       LCALL   ?XSTACK_DISP102_8
   \   0001AE   EE           MOV     A,R6
   \   0001AF   FA           MOV     R2,A
   \   0001B0   7B00         MOV     R3,#0x0
   \   0001B2   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001B5   7408         MOV     A,#0x8
   \   0001B7   12....       LCALL   ?DEALLOC_XSTACK8
   2615          
   2616              // Set timeout for response
   2617              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001BA                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001BA   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   0001BC   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   0001BE   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   0001C1   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   2618            }
   \                     ??CrossCallReturnLabel_443:
   \   0001C4   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   0001C7   02....       LJMP    ??ZDMatchSendState_20 & 0xFFFF
   2619            else
   2620            {
   2621              // Send the response messages to requesting devices
   2622              // send response to first requester
   2623              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_17:
   \   0001CA   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0001CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D0   12....       LCALL   ?Subroutine15 & 0xFFFF
   2624              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_9:
   \   0001D3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D6   7401         MOV     A,#0x1
   \   0001D8   12....       LCALL   ?XSTACK_DISP100_8
   \   0001DB   88..         MOV     ?V0,R0
   \   0001DD   89..         MOV     ?V1,R1
   \   0001DF   78..         MOV     R0,#?V0
   \   0001E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E4   75..20       MOV     ?V0,#0x20
   \   0001E7   75..80       MOV     ?V1,#-0x80
   \   0001EA   78..         MOV     R0,#?V0
   \   0001EC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EF   7901         MOV     R1,#0x1
   \   0001F1   7406         MOV     A,#0x6
   \   0001F3   12....       LCALL   ?XSTACK_DISP102_8
   \   0001F6   90....       MOV     DPTR,#matchED
   \   0001F9   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   0001FC   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0001FF   7405         MOV     A,#0x5
   \   000201   12....       LCALL   ?DEALLOC_XSTACK8
   2625          
   2626              // send response to second requester
   2627              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   000204   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000207   7050         JNZ     ??ZDMatchSendState_21
   2628              {
   2629                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   000209   12....       LCALL   ?Subroutine91 & 0xFFFF
   2630                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2631              }
   \                     ??CrossCallReturnLabel_562:
   \   00020C   2419         ADD     A,#0x19
   \   00020E   F582         MOV     DPL,A
   \   000210   E4           CLR     A
   \   000211   38           ADDC    A,R0
   \   000212   F583         MOV     DPH,A
   \   000214   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   000217   7401         MOV     A,#0x1
   \   000219   12....       LCALL   ?XSTACK_DISP0_8
   \   00021C   E8           MOV     A,R0
   \   00021D   F0           MOVX    @DPTR,A
   \   00021E   A3           INC     DPTR
   \   00021F   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000222   2418         ADD     A,#0x18
   \   000224   F582         MOV     DPL,A
   \   000226   E4           CLR     A
   \   000227   38           ADDC    A,R0
   \   000228   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   00022B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00022E   7401         MOV     A,#0x1
   \   000230   12....       LCALL   ?XSTACK_DISP100_8
   \   000233   88..         MOV     ?V0,R0
   \   000235   89..         MOV     ?V1,R1
   \   000237   78..         MOV     R0,#?V0
   \   000239   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023C   75..20       MOV     ?V0,#0x20
   \   00023F   75..80       MOV     ?V1,#-0x80
   \   000242   78..         MOV     R0,#?V0
   \   000244   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000247   7901         MOV     R1,#0x1
   \   000249   7406         MOV     A,#0x6
   \   00024B   12....       LCALL   ?XSTACK_DISP102_8
   \   00024E   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000251   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000254   7405         MOV     A,#0x5
   \   000256   12....       LCALL   ?DEALLOC_XSTACK8
   2632          
   2633              // Process ended - release memory used
   2634              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_21:
   \   000259                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000259   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2635            }
   2636          
   2637            return ( TRUE );
   \                     ??ZDMatchSendState_20:
   \   00025C   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_3:
   \   00025E   7413         MOV     A,#0x13
   \   000260   02....       LJMP    ?Subroutine8 & 0xFFFF
   2638          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   F5..         MOV     ?V4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V5,A
   \   000008   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_570:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   6401         XRL     A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_575:
   \   000003   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine198:
   \   000000   242F         ADD     A,#0x2f
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   90....       MOV     DPTR,#matchED
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3A           ADDC    A,R2
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   28           ADD     A,R0
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   39           ADDC    A,R1
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   24FE         ADD     A,#-0x2
   \   000010   F582         MOV     DPL,A
   \   000012   E9           MOV     A,R1
   \   000013   34FF         ADDC    A,#-0x1
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V8,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V9,A
   \   00001E   90....       MOV     DPTR,#matchED
   \   000021   E0           MOVX    A,@DPTR
   \   000022   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine199:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   90....       MOV     DPTR,#matchED
   \   000007                REQUIRE ??Subroutine252_0
   \   000007                ; // Fall through to label ??Subroutine252_0
   2639          
   2640          /*********************************************************************
   2641           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2642           *
   2643           * @brief   End device bind timeout.
   2644           *
   2645           * @param  none
   2646           *
   2647           * @return  none
   2648           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2649          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2650          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2651            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2652          }
   \   00000D   02....       LJMP    ?Subroutine0 & 0xFFFF
   2653          #endif // ZG_BUILD_COORDINATOR_TYPE
   2654          
   2655          /*********************************************************************
   2656           * ZDO MESSAGE PARSING API FUNCTIONS
   2657           */
   2658          
   2659          /*********************************************************************
   2660           * @fn          ZDO_ParseEndDeviceBindReq
   2661           *
   2662           * @brief       This function parses the End_Device_Bind_req message.
   2663           *
   2664           *     NOTE:  The clusters lists in bindReq are allocated in this
   2665           *            function and must be freed by that calling function.
   2666           *
   2667           * @param       inMsg  - incoming message (request)
   2668           * @param       bindReq - pointer to place to parse message to
   2669           *
   2670           * @return      none
   2671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2672          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2673          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2674            uint8 *msg;
   2675          
   2676            // Parse the message
   2677            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00000D   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000010   12....       LCALL   ?Subroutine38 & 0xFFFF
   2678            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_53:
   \   000013   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   2679            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_637:
   \   00001F   EA           MOV     A,R2
   \   000020   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   000023   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000026   A3           INC     DPTR
   \   000027   F0           MOVX    @DPTR,A
   2680            msg = inMsg->asdu;
   \   000028   12....       LCALL   ?Subroutine92 & 0xFFFF
   2681          
   2682            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_511:
   \   00002B   85..82       MOV     DPL,?V0
   \   00002E   F583         MOV     DPH,A
   \   000030   12....       LCALL   ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   2683            msg += 2;
   \                     ??CrossCallReturnLabel_625:
   \   00003E   E5..         MOV     A,?V0
   \   000040   2402         ADD     A,#0x2
   \   000042   F5..         MOV     ?V0,A
   \   000044   5002         JNC     ??ZDO_ParseEndDeviceBindReq_0
   \   000046   05..         INC     ?V1
   2684          
   2685            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   000048                ; Setup parameters for call to function sAddrExtCpy
   \   000048   FC           MOV     R4,A
   \   000049   AD..         MOV     R5,?V1
   \   00004B   EE           MOV     A,R6
   \   00004C   2406         ADD     A,#0x6
   \   00004E   FA           MOV     R2,A
   \   00004F   E4           CLR     A
   \   000050   3F           ADDC    A,R7
   \   000051   FB           MOV     R3,A
   \   000052   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2686            msg += Z_EXTADDR_LEN;
   2687          
   2688            bindReq->endpoint = *msg++;
   \   000055   85..82       MOV     DPL,?V0
   \   000058   85..83       MOV     DPH,?V1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C0E0         PUSH    A
   \   000066   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000069   F583         MOV     DPH,A
   \   00006B   D0E0         POP     A
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   E5..         MOV     A,?V0
   \   000070   2409         ADD     A,#0x9
   \   000072   F5..         MOV     ?V0,A
   \   000074   5002         JNC     ??ZDO_ParseEndDeviceBindReq_1
   \   000076   05..         INC     ?V1
   2689            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   000078   F582         MOV     DPL,A
   \   00007A   85..83       MOV     DPH,?V1
   \   00007D   12....       LCALL   ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   000080   F8           MOV     R0,A
   \   000081   EE           MOV     A,R6
   \   000082   240F         ADD     A,#0xf
   \   000084   12....       LCALL   ?Subroutine51 & 0xFFFF
   2690            msg += 2;
   2691          
   2692            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_638:
   \   000087   12....       LCALL   ?Subroutine18 & 0xFFFF
   2693            bindReq->outClusters = NULL;
   2694          
   2695            if ((bindReq->numInClusters = *msg++) &&
   2696                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_17:
   \   00008A   85..82       MOV     DPL,?V0
   \   00008D   85..83       MOV     DPH,?V1
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   FA           MOV     R2,A
   \   000094   EE           MOV     A,R6
   \   000095   2411         ADD     A,#0x11
   \   000097   F582         MOV     DPL,A
   \   000099   E4           CLR     A
   \   00009A   3F           ADDC    A,R7
   \   00009B   F583         MOV     DPH,A
   \   00009D   EA           MOV     A,R2
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   E5..         MOV     A,?V0
   \   0000A1   2403         ADD     A,#0x3
   \   0000A3   F5..         MOV     ?V0,A
   \   0000A5   5002         JNC     ??ZDO_ParseEndDeviceBindReq_2
   \   0000A7   05..         INC     ?V1
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   0000A9   EA           MOV     A,R2
   \   0000AA   6028         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   0000AC   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_652:
   \   0000AF   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B2   8A..         MOV     ?V2,R2
   \   0000B4   8B..         MOV     ?V3,R3
   \   0000B6   A8..         MOV     R0,?V2
   \   0000B8   A9..         MOV     R1,?V3
   \   0000BA   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   0000BD   6015         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2697            {
   2698              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000BF                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000BF   EE           MOV     A,R6
   \   0000C0   2412         ADD     A,#0x12
   \   0000C2   12....       LCALL   ?Subroutine97 & 0xFFFF
   2699            }
   \                     ??CrossCallReturnLabel_151:
   \   0000C5   2411         ADD     A,#0x11
   \   0000C7   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   0000CA   F9           MOV     R1,A
   \   0000CB   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000CE   8A..         MOV     ?V0,R2
   \   0000D0   8B..         MOV     ?V1,R3
   \   0000D2   8007         SJMP    ??ZDO_ParseEndDeviceBindReq_4
   2700            else
   2701            {
   2702              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000D4   EE           MOV     A,R6
   \   0000D5   2411         ADD     A,#0x11
   \   0000D7   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   2703            }
   \                     ??CrossCallReturnLabel_492:
   \   0000DA   F0           MOVX    @DPTR,A
   2704          
   2705            if ((bindReq->numOutClusters = *msg++) &&
   2706                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0000DB   85..82       MOV     DPL,?V0
   \   0000DE   85..83       MOV     DPH,?V1
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   FA           MOV     R2,A
   \   0000E3   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   0000E6   EA           MOV     A,R2
   \   0000E7   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000EA   8582..       MOV     ?V0,DPL
   \   0000ED   8583..       MOV     ?V1,DPH
   \   0000F0   602D         JZ      ??ZDO_ParseEndDeviceBindReq_5
   \   0000F2   EE           MOV     A,R6
   \   0000F3   2414         ADD     A,#0x14
   \   0000F5   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   0000F8   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_653:
   \   0000FB   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000FE   8A..         MOV     ?V2,R2
   \   000100   8B..         MOV     ?V3,R3
   \   000102   A8..         MOV     R0,?V2
   \   000104   A9..         MOV     R1,?V3
   \   000106   EE           MOV     A,R6
   \   000107   2415         ADD     A,#0x15
   \   000109   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   00010C   6011         JZ      ??ZDO_ParseEndDeviceBindReq_5
   2707            {
   2708              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   00010E                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00010E   EE           MOV     A,R6
   \   00010F   2415         ADD     A,#0x15
   \   000111   12....       LCALL   ?Subroutine97 & 0xFFFF
   2709            }
   \                     ??CrossCallReturnLabel_152:
   \   000114   2414         ADD     A,#0x14
   \   000116   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   000119   F9           MOV     R1,A
   \   00011A   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   00011D   8004         SJMP    ??ZDO_ParseEndDeviceBindReq_6
   2710            else
   2711            {
   2712              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   00011F   12....       LCALL   ?Subroutine129 & 0xFFFF
   2713            }
   \                     ??CrossCallReturnLabel_495:
   \   000122   F0           MOVX    @DPTR,A
   2714          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   000123   02....       LJMP    ??Subroutine202_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   3B           ADDC    A,R3
   \   000001   F583         MOV     DPH,A
   \   000003   E0           MOVX    A,@DPTR
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000009   FD           MOV     R5,A
   \   00000A   AA..         MOV     R2,?V0
   \   00000C   AB..         MOV     R3,?V1
   \   00000E   EE           MOV     A,R6
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000003                REQUIRE ??Subroutine241_0
   \   000003                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine242_0
   \   000001                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine251_0:
   \   000000   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_674:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine196:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine255_0
   \   000001                ; // Fall through to label ??Subroutine255_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine256_0
   \   000006                ; // Fall through to label ??Subroutine256_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   FA           MOV     R2,A
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                REQUIRE ??Subroutine258_0
   \   000001                ; // Fall through to label ??Subroutine258_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_622:
   \   000003   3B           ADDC    A,R3
   \   000004   F583         MOV     DPH,A
   \   000006   22           RET
   2715          
   2716          /*********************************************************************
   2717           * @fn          ZDO_ParseBindUnbindReq
   2718           *
   2719           * @brief       This function parses the Bind_req or Unbind_req message.
   2720           *
   2721           * @param       inMsg  - incoming message (request)
   2722           * @param       pReq - place to put parsed information
   2723           *
   2724           * @return      none
   2725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2726          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2727          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2728            uint8 *msg;
   2729          
   2730            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine92 & 0xFFFF
   2731            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_512:
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   AC..         MOV     R4,?V0
   \   00000E   FD           MOV     R5,A
   \   00000F   EE           MOV     A,R6
   \   000010   FA           MOV     R2,A
   \   000011   EF           MOV     A,R7
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2732            msg += Z_EXTADDR_LEN;
   2733            pReq->srcEndpoint = *msg++;
   \   000016   85..82       MOV     DPL,?V0
   \   000019   85..83       MOV     DPH,?V1
   \   00001C   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00001F   E5..         MOV     A,?V0
   \   000021   2409         ADD     A,#0x9
   \   000023   F5..         MOV     ?V0,A
   \   000025   5002         JNC     ??ZDO_ParseBindUnbindReq_0
   \   000027   05..         INC     ?V1
   2734            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000029   F582         MOV     DPL,A
   \   00002B   85..83       MOV     DPH,?V1
   \   00002E   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   E9           MOV     A,R1
   \   000034   12....       LCALL   ?Subroutine40 & 0xFFFF
   2735            msg += 2;
   2736            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_59:
   \   000037   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00003A   E5..         MOV     A,?V0
   \   00003C   2403         ADD     A,#0x3
   \   00003E   F5..         MOV     ?V0,A
   \   000040   5002         JNC     ??ZDO_ParseBindUnbindReq_1
   \   000042   05..         INC     ?V1
   2737            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000044   7403         MOV     A,#0x3
   \   000046   68           XRL     A,R0
   \   000047   7022         JNZ     ??ZDO_ParseBindUnbindReq_2
   2738            {
   2739              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   000049                ; Setup parameters for call to function sAddrExtCpy
   \   000049   AC..         MOV     R4,?V0
   \   00004B   AD..         MOV     R5,?V1
   \   00004D   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000050   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2740              msg += Z_EXTADDR_LEN;
   2741              pReq->dstEndpoint = *msg;
   \   000053   85..82       MOV     DPL,?V0
   \   000056   85..83       MOV     DPH,?V1
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   C0E0         PUSH    A
   \   000064   12....       LCALL   ?Subroutine137 & 0xFFFF
   2742            }
   \                     ??CrossCallReturnLabel_515:
   \   000067   D0E0         POP     A
   \   000069   8013         SJMP    ??ZDO_ParseBindUnbindReq_3
   2743            else
   2744            {
   2745              // copy group address
   2746              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   12....       LCALL   ?Subroutine94 & 0xFFFF
   2747            }
   \                     ??CrossCallReturnLabel_147:
   \   000074   F582         MOV     DPL,A
   \   000076   E4           CLR     A
   \   000077   3F           ADDC    A,R7
   \   000078   F583         MOV     DPH,A
   \   00007A   E8           MOV     A,R0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E9           MOV     A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   00007E   F0           MOVX    @DPTR,A
   2748          }
   \   00007F   02....       LJMP    ??Subroutine204_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000004   E8           MOV     A,R0
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   000003   F8           MOV     R0,A
   \   000004   EE           MOV     A,R6
   \   000005   240B         ADD     A,#0xb
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   22           RET
   2749          
   2750          /*********************************************************************
   2751           * @fn      ZDO_ParseAddrRsp
   2752           *
   2753           * @brief   Turns the inMsg (incoming message) into the out parsed
   2754           *          structure.
   2755           *
   2756           * @param   inMsg - incoming message
   2757           *
   2758           * @return  pointer to parsed structures.  This structure was
   2759           *          allocated using osal_mem_alloc, so it must be freed
   2760           *          by the calling function [osal_mem_free()].
   2761           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2762          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2763          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2764            ZDO_NwkIEEEAddrResp_t *rsp;
   2765            uint8 *msg;
   2766            byte cnt = 0;
   \   000009   75..00       MOV     ?V2,#0x0
   2767          
   2768            // Calculate the number of items in the list
   2769            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   00000C   EE           MOV     A,R6
   \   00000D   2410         ADD     A,#0x10
   \   00000F   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   000012   C3           CLR     C
   \   000013   940C         SUBB    A,#0xc
   \   000015   400D         JC      ??ZDO_ParseAddrRsp_0
   2770            {
   2771              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   000017   12....       LCALL   ?Subroutine121 & 0xFFFF
   2772            }
   \                     ??CrossCallReturnLabel_193:
   \   00001A   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   00001D   240B         ADD     A,#0xb
   \   00001F   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000022   F5..         MOV     ?V2,A
   2773            else
   2774            {
   2775              cnt = 0;
   2776            }
   2777          
   2778            // Make buffer
   2779            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   A8..         MOV     R0,?V2
   \   000026   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000029   E8           MOV     A,R0
   \   00002A   240D         ADD     A,#0xd
   \   00002C   FA           MOV     R2,A
   \   00002D   E4           CLR     A
   \   00002E   39           ADDC    A,R1
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV     ?V0,R2
   \   000035   8B..         MOV     ?V1,R3
   2780          
   2781            if ( rsp )
   \   000037   EA           MOV     A,R2
   \   000038   45..         ORL     A,?V1
   \   00003A   7003         JNZ     $+5
   \   00003C   02....       LJMP    ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2782            {
   2783              msg = inMsg->asdu;
   \   00003F   EE           MOV     A,R6
   \   000040   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000043   3F           ADDC    A,R7
   \   000044   12....       LCALL   ??Subroutine253_0 & 0xFFFF
   2784          
   2785              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_614:
   \   000047   F8           MOV     R0,A
   \   000048   8A82         MOV     DPL,R2
   \   00004A   8B83         MOV     DPH,R3
   \   00004C   12....       LCALL   ?Subroutine44 & 0xFFFF
   2786              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_67:
   \   00004F   6003         JZ      $+5
   \   000051   02....       LJMP    ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2787              {
   2788                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000054                ; Setup parameters for call to function sAddrExtCpy
   \   000054   EE           MOV     A,R6
   \   000055   FC           MOV     R4,A
   \   000056   EF           MOV     A,R7
   \   000057   FD           MOV     R5,A
   \   000058   EA           MOV     A,R2
   \   000059   2403         ADD     A,#0x3
   \   00005B   FA           MOV     R2,A
   \   00005C   E4           CLR     A
   \   00005D   35..         ADDC    A,?V1
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2789                msg += Z_EXTADDR_LEN;
   \   000063   EE           MOV     A,R6
   \   000064   2408         ADD     A,#0x8
   \   000066   FE           MOV     R6,A
   \   000067   5001         JNC     ??ZDO_ParseAddrRsp_2
   \   000069   0F           INC     R7
   2790                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   00006A   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   00006D   85..82       MOV     DPL,?V0
   \   000070   85..83       MOV     DPH,?V1
   \   000073   A3           INC     DPTR
   \   000074   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   2791          
   2792                msg += 2;
   2793                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_626:
   \   000077   E5..         MOV     A,?V0
   \   000079   240B         ADD     A,#0xb
   \   00007B   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   00007E   E4           CLR     A
   \   00007F   F0           MOVX    @DPTR,A
   2794          
   2795                // StartIndex field is only present if NumAssocDev field is non-zero.
   2796                if ( cnt > 0 )
   \   000080   E5..         MOV     A,?V2
   \   000082   6054         JZ      ??ZDO_ParseAddrRsp_1
   2797                {
   2798                  uint16 *pList = &(rsp->devList[0]);
   \   000084   E5..         MOV     A,?V0
   \   000086   240D         ADD     A,#0xd
   \   000088   F8           MOV     R0,A
   \   000089   E4           CLR     A
   \   00008A   35..         ADDC    A,?V1
   \   00008C   F9           MOV     R1,A
   2799                  byte n = cnt;
   2800          
   2801                  rsp->numAssocDevs = *msg++;
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   C0E0         PUSH    A
   \   000096   E5..         MOV     A,?V0
   \   000098   240B         ADD     A,#0xb
   \   00009A   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   00009D   D0E0         POP     A
   \   00009F   12....       LCALL   ?Subroutine22 & 0xFFFF
   2802                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_22:
   \   0000A2   C0E0         PUSH    A
   \   0000A4   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   0000A7   D0E0         POP     A
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   EE           MOV     A,R6
   \   0000AB   2404         ADD     A,#0x4
   \   0000AD   FE           MOV     R6,A
   \   0000AE   5001         JNC     ??ZDO_ParseAddrRsp_3
   \   0000B0   0F           INC     R7
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000B1   85....       MOV     ?V3,?V2
   2803          
   2804                  while ( n != 0 )
   2805                  {
   2806                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000B4   8E82         MOV     DPL,R6
   \   0000B6   8F83         MOV     DPH,R7
   \   0000B8   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   0000BB   FB           MOV     R3,A
   \   0000BC   EC           MOV     A,R4
   \   0000BD   8882         MOV     DPL,R0
   \   0000BF   8983         MOV     DPH,R1
   \   0000C1   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   0000C4   E8           MOV     A,R0
   \   0000C5   2402         ADD     A,#0x2
   \   0000C7   F8           MOV     R0,A
   \   0000C8   5001         JNC     ??ZDO_ParseAddrRsp_5
   \   0000CA   09           INC     R1
   2807                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000CB   EE           MOV     A,R6
   \   0000CC   2402         ADD     A,#0x2
   \   0000CE   FE           MOV     R6,A
   \   0000CF   5001         JNC     ??ZDO_ParseAddrRsp_6
   \   0000D1   0F           INC     R7
   2808                    n--;
   2809                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000D2   15..         DEC     ?V3
   \   0000D4   E5..         MOV     A,?V3
   \   0000D6   70DC         JNZ     ??ZDO_ParseAddrRsp_4
   2810                }
   2811              }
   2812            }
   2813          
   2814            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000D8   AA..         MOV     R2,?V0
   \   0000DA   AB..         MOV     R3,?V1
   \   0000DC   02....       LJMP    ?Subroutine5 & 0xFFFF
   2815          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine251_0
   \   000004                ; // Fall through to label ??Subroutine251_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine253_0:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FF           MOV     R7,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET
   2816          
   2817          /*********************************************************************
   2818           * @fn          ZDO_ParseNodeDescRsp
   2819           *
   2820           * @brief       This function parses the Node_Desc_rsp message.
   2821           *
   2822           * @param       inMsg - incoming message
   2823           * @param       pNDRsp - place to parse the message into
   2824           *
   2825           * @return      none
   2826           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2827          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2828          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2829            uint8 *msg;
   2830          
   2831            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine11 & 0xFFFF
   2832          
   2833            pNDRsp->status = *msg++;
   2834            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2835          
   2836            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2837            {
   2838              msg += 2;
   2839              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   00000D   E8           MOV     A,R0
   \   00000E   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   000011   39           ADDC    A,R1
   \   000012   FB           MOV     R3,A
   \   000013   EC           MOV     A,R4
   \   000014   2403         ADD     A,#0x3
   \   000016   FE           MOV     R6,A
   \   000017   E4           CLR     A
   \   000018   3D           ADDC    A,R5
   \   000019   FF           MOV     R7,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   5407         ANL     A,#0x7
   \   000021   F5..         MOV     ?V0,A
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   E0           MOVX    A,@DPTR
   \   000028   54F8         ANL     A,#0xf8
   \   00002A   45..         ORL     A,?V0
   \   00002C   12....       LCALL   ?Subroutine47 & 0xFFFF
   2840          
   2841              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_72:
   \   00002F   A2E3         MOV     C,0xE0 /* A   */.3
   \   000031   E4           CLR     A
   \   000032   33           RLC     A
   \   000033   F5..         MOV     ?V0,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   A2E3         MOV     C,0xE0 /* A   */.3
   \   000038   8F83         MOV     DPH,R7
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   92E3         MOV     0xE0 /* A   */.3,C
   \   00003F   12....       LCALL   ?Subroutine47 & 0xFFFF
   2842              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_73:
   \   000042   A2E4         MOV     C,0xE0 /* A   */.4
   \   000044   E4           CLR     A
   \   000045   33           RLC     A
   \   000046   F5..         MOV     ?V1,A
   \   000048   E0           MOVX    A,@DPTR
   \   000049   A2E4         MOV     C,0xE0 /* A   */.4
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   92E4         MOV     0xE0 /* A   */.4,C
   \   000052   F0           MOVX    @DPTR,A
   2843          
   2844              msg++;  // Reserved bits.
   2845              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000053   E8           MOV     A,R0
   \   000054   2403         ADD     A,#0x3
   \   000056   0A           INC     R2
   \   000057   E4           CLR     A
   \   000058   39           ADDC    A,R1
   \   000059   FB           MOV     R3,A
   \   00005A   EC           MOV     A,R4
   \   00005B   2404         ADD     A,#0x4
   \   00005D   0E           INC     R6
   \   00005E   E4           CLR     A
   \   00005F   3D           ADDC    A,R5
   \   000060   FF           MOV     R7,A
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   E0           MOVX    A,@DPTR
   \   000066   54F8         ANL     A,#0xf8
   \   000068   F5..         MOV     ?V2,A
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   5407         ANL     A,#0x7
   \   000071   45..         ORL     A,?V2
   \   000073   F5..         MOV     ?V2,A
   \   000075   12....       LCALL   ?Subroutine47 & 0xFFFF
   2846              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_74:
   \   000078   5407         ANL     A,#0x7
   \   00007A   FA           MOV     R2,A
   \   00007B   74F8         MOV     A,#-0x8
   \   00007D   55..         ANL     A,?V2
   \   00007F   4A           ORL     A,R2
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   12....       LCALL   ?Subroutine41 & 0xFFFF
   2847              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_60:
   \   000087   8C82         MOV     DPL,R4
   \   000089   8D83         MOV     DPH,R5
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   12....       LCALL   ?Subroutine42 & 0xFFFF
   2848              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_63:
   \   000093   A3           INC     DPTR
   \   000094   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_657:
   \   000097   12....       LCALL   ?Subroutine35 & 0xFFFF
   2849              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_47:
   \   00009A   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00009D   12....       LCALL   ?Subroutine35 & 0xFFFF
   2850              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_48:
   \   0000A0   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_658:
   \   0000A3   12....       LCALL   ?Subroutine30 & 0xFFFF
   2851              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_37:
   \   0000A6   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000A9   12....       LCALL   ?Subroutine30 & 0xFFFF
   2852              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_38:
   \   0000AC   A3           INC     DPTR
   \   0000AD   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   E8           MOV     A,R0
   \   0000BB   240A         ADD     A,#0xa
   \   0000BD   F8           MOV     R0,A
   \   0000BE   5001         JNC     ??ZDO_ParseNodeDescRsp_1
   \   0000C0   09           INC     R1
   2853              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   0000C1   8882         MOV     DPL,R0
   \   0000C3   8983         MOV     DPH,R1
   \   0000C5   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   0000C8   FB           MOV     R3,A
   \   0000C9   EE           MOV     A,R6
   \   0000CA   FA           MOV     R2,A
   \   0000CB   EC           MOV     A,R4
   \   0000CC   240B         ADD     A,#0xb
   \   0000CE   F582         MOV     DPL,A
   \   0000D0   E4           CLR     A
   \   0000D1   3D           ADDC    A,R5
   \   0000D2   F583         MOV     DPH,A
   \   0000D4   12....       LCALL   ?Subroutine49 & 0xFFFF
   2854              msg += 2;
   2855              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_319:
   \   0000D7   8882         MOV     DPL,R0
   \   0000D9   8983         MOV     DPH,R1
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   C0E0         PUSH    A
   \   0000E0   EC           MOV     A,R4
   \   0000E1   240D         ADD     A,#0xd
   \   0000E3   F582         MOV     DPL,A
   \   0000E5   E4           CLR     A
   \   0000E6   3D           ADDC    A,R5
   \   0000E7   F583         MOV     DPH,A
   \   0000E9   D0E0         POP     A
   \   0000EB   12....       LCALL   ?Subroutine42 & 0xFFFF
   2856              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   2857              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   2858            }
   \                     ??CrossCallReturnLabel_64:
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   C0E0         PUSH    A
   \   0000F1   EC           MOV     A,R4
   \   0000F2   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   0000F5   3D           ADDC    A,R5
   \   0000F6   F583         MOV     DPH,A
   \   0000F8   D0E0         POP     A
   \   0000FA   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000FD   C0E0         PUSH    A
   \   0000FF   EC           MOV     A,R4
   \   000100   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000103   3D           ADDC    A,R5
   \   000104   F583         MOV     DPH,A
   \   000106   D0E0         POP     A
   \   000108   F0           MOVX    @DPTR,A
   2859          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   000109   02....       LJMP    ??Subroutine202_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   12....       LCALL   ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   00000D   A3           INC     DPTR
   \   00000E   A882         MOV     R0,DPL
   \   000010   A983         MOV     R1,DPH
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FB           MOV     R3,A
   \   000017   EE           MOV     A,R6
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   EB           MOV     A,R3
   \   000020   F0           MOVX    @DPTR,A
   \   000021   8C82         MOV     DPL,R4
   \   000023   8D83         MOV     DPH,R5
   \   000025   E0           MOVX    A,@DPTR
   \   000026   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   000003   3B           ADDC    A,R3
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine259_0
   \   000001                ; // Fall through to label ??Subroutine259_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine259_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET
   2860          
   2861          /*********************************************************************
   2862           * @fn          ZDO_ParsePowerDescRsp
   2863           *
   2864           * @brief       This function parses the Power_Desc_rsp message.
   2865           *
   2866           * @param       inMsg  - incoming message
   2867           * @param       pNPRsp - place to parse the message into
   2868           *
   2869           * @return      none
   2870           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2871          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2872          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2873            uint8 *msg;
   2874          
   2875            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000008   12....       LCALL   ?Subroutine99 & 0xFFFF
   2876            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_156:
   \   00000B   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_654:
   \   00000E   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000011   AA82         MOV     R2,DPL
   \   000013   AB83         MOV     R3,DPH
   2877            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000015   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_592:
   \   000018   F9           MOV     R1,A
   \   000019   EE           MOV     A,R6
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   A3           INC     DPTR
   \   00001F   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   2878          
   2879            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_627:
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6003         JZ      $+5
   \   000029   02....       LJMP    ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2880            {
   2881              msg += 2;
   2882              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   00002C   EA           MOV     A,R2
   \   00002D   2402         ADD     A,#0x2
   \   00002F   F8           MOV     R0,A
   \   000030   E4           CLR     A
   \   000031   3B           ADDC    A,R3
   \   000032   F9           MOV     R1,A
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
   \   000037   EC           MOV     A,R4
   \   000038   2403         ADD     A,#0x3
   \   00003A   E4           CLR     A
   \   00003B   3D           ADDC    A,R5
   \   00003C   0C           INC     R4
   \   00003D   0C           INC     R4
   \   00003E   0C           INC     R4
   \   00003F   FD           MOV     R5,A
   \   000040   8C82         MOV     DPL,R4
   \   000042   8D83         MOV     DPH,R5
   \   000044   E0           MOVX    A,@DPTR
   \   000045   540F         ANL     A,#0xf
   \   000047   F5..         MOV     ?V2,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V3,A
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   E0           MOVX    A,@DPTR
   \   000052   C4           SWAP    A
   \   000053   540F         ANL     A,#0xf
   \   000055   F5..         MOV     ?V0,A
   \   000057   75..00       MOV     ?V1,#0x0
   \   00005A   7404         MOV     A,#0x4
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   12....       LCALL   ?S_SHL
   \   000061   E5..         MOV     A,?V2
   \   000063   45..         ORL     A,?V0
   \   000065   A9..         MOV     R1,?V3
   \   000067   8C82         MOV     DPL,R4
   \   000069   8D83         MOV     DPH,R5
   \   00006B   12....       LCALL   ?Subroutine31 & 0xFFFF
   2883              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_39:
   \   00006E   E5..         MOV     A,?V0
   \   000070   48           ORL     A,R0
   \   000071   F5..         MOV     ?V0,A
   \   000073   8C82         MOV     DPL,R4
   \   000075   8D83         MOV     DPH,R5
   \   000077   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   2884              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \                     ??CrossCallReturnLabel_628:
   \   00007A   EA           MOV     A,R2
   \   00007B   2403         ADD     A,#0x3
   \   00007D   E4           CLR     A
   \   00007E   3B           ADDC    A,R3
   \   00007F   0E           INC     R6
   \   000080   FF           MOV     R7,A
   \   000081   E5..         MOV     A,?V0
   \   000083   F5..         MOV     ?V2,A
   \   000085   E9           MOV     A,R1
   \   000086   540F         ANL     A,#0xf
   \   000088   F5..         MOV     ?V3,A
   \   00008A   8E82         MOV     DPL,R6
   \   00008C   8F83         MOV     DPH,R7
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   C4           SWAP    A
   \   000090   540F         ANL     A,#0xf
   \   000092   F5..         MOV     ?V0,A
   \   000094   740C         MOV     A,#0xc
   \   000096   78..         MOV     R0,#?V0
   \   000098   12....       LCALL   ?S_SHL
   \   00009B   E5..         MOV     A,?V3
   \   00009D   45..         ORL     A,?V1
   \   00009F   F9           MOV     R1,A
   \   0000A0   8C82         MOV     DPL,R4
   \   0000A2   8D83         MOV     DPH,R5
   \   0000A4   E5..         MOV     A,?V2
   \   0000A6   12....       LCALL   ?Subroutine31 & 0xFFFF
   2885              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   2886            }
   \                     ??CrossCallReturnLabel_40:
   \   0000A9   EA           MOV     A,R2
   \   0000AA   2404         ADD     A,#0x4
   \   0000AC   8C82         MOV     DPL,R4
   \   0000AE   8D83         MOV     DPH,R5
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   54F0         ANL     A,#0xf0
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   E8           MOV     A,R0
   \   0000B6   F9           MOV     R1,A
   \   0000B7   8C82         MOV     DPL,R4
   \   0000B9   8D83         MOV     DPH,R5
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   49           ORL     A,R1
   \   0000BE   F0           MOVX    @DPTR,A
   2887          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   0000BF   02....       LJMP    ??Subroutine202_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_640:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   540F         ANL     A,#0xf
   \   00000A   F8           MOV     R0,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   22           RET
   2888          
   2889          /*********************************************************************
   2890           * @fn          ZDO_ParseSimpleDescRsp
   2891           *
   2892           * @brief       This function parse the Simple_Desc_rsp message.
   2893           *
   2894           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2895           *         in the SimpleDescriptionFormat_t structure are allocated
   2896           *         and the calling function needs to free [osal_msg_free()]
   2897           *         these buffers.
   2898           *
   2899           * @param       inMsg  - incoming message
   2900           * @param       pSimpleDescRsp - place to parse the message into
   2901           *
   2902           * @return      none
   2903           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2904          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2905          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2906            uint8 *msg;
   2907          
   2908            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine11 & 0xFFFF
   2909            pSimpleDescRsp->status = *msg++;
   2910            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2911            msg += sizeof ( uint16 );
   2912            msg++; // Skip past the length field.
   2913          
   2914            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   000008   7011         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2915            {
   2916              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV     A,R4
   \   00000B   2403         ADD     A,#0x3
   \   00000D   FC           MOV     R4,A
   \   00000E   5001         JNC     ??ZDO_ParseSimpleDescRsp_1
   \   000010   0D           INC     R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000011   E8           MOV     A,R0
   \   000012   2403         ADD     A,#0x3
   \   000014   FA           MOV     R2,A
   \   000015   E4           CLR     A
   \   000016   39           ADDC    A,R1
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   2917            }
   2918          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001B   02....       LJMP    ?Subroutine2 & 0xFFFF
   2919          
   2920          /*********************************************************************
   2921           * @fn          ZDO_ParseEPListRsp
   2922           *
   2923           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2924           *
   2925           * @param       inMsg  - incoming message
   2926           *
   2927           * @return      none
   2928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine207_0
   \   000004                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2929          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2930          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   2931            ZDO_ActiveEndpointRsp_t *pRsp;
   2932            uint8 *msg;
   2933            uint8 Status;
   2934            uint8 cnt;
   2935          
   2936            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   2937            Status = *msg++;
   \   00000D   85..82       MOV     DPL,?V0
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V3,A
   \   000015   A3           INC     DPTR
   \   000016   8582..       MOV     ?V0,DPL
   \   000019   8583..       MOV     ?V1,DPH
   2938            cnt = msg[2];
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V2,A
   2939          
   2940            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   000024   3400         ADDC    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV     ?V4,R2
   \   00002C   8B..         MOV     ?V5,R3
   \   00002E   AE..         MOV     R6,?V4
   \   000030   AF..         MOV     R7,?V5
   2941            if ( pRsp )
   \   000032   EE           MOV     A,R6
   \   000033   4F           ORL     A,R7
   \   000034   6037         JZ      ??ZDO_ParseEPListRsp_0
   2942            {
   2943              pRsp->status = Status;
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   E5..         MOV     A,?V3
   \   00003C   F0           MOVX    @DPTR,A
   2944              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00003D   85..82       MOV     DPL,?V0
   \   000040   85..83       MOV     DPH,?V1
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FA           MOV     R2,A
   \   000045   12....       LCALL   ?Subroutine24 & 0xFFFF
   2945              msg += sizeof( uint16 );
   2946              pRsp->cnt = cnt;
   2947              msg++; // pass cnt
   2948              osal_memcpy( pRsp->epList, msg, cnt );
   \                     ??CrossCallReturnLabel_25:
   \   000048                ; Setup parameters for call to function osal_memcpy
   \   000048   85..82       MOV     DPL,?V0
   \   00004B   85..83       MOV     DPH,?V1
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A982         MOV     R1,DPL
   \   000053   AA83         MOV     R2,DPH
   \   000055   89..         MOV     ?V4,R1
   \   000057   8A..         MOV     ?V5,R2
   \   000059   88..         MOV     ?V6,R0
   \   00005B   78..         MOV     R0,#?V4
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000060   12....       LCALL   ?Subroutine187 & 0xFFFF
   2949            }
   \                     ??CrossCallReturnLabel_619:
   \   000063   3F           ADDC    A,R7
   \   000064   FB           MOV     R3,A
   \   000065   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
   2950          
   2951            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   00006D   02....       LJMP    ?Subroutine6 & 0xFFFF
   2952          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   AC..         MOV     R4,?V2
   \   000002   7D00         MOV     R5,#0x0
   \   000004   EE           MOV     A,R6
   \   000005                REQUIRE ??Subroutine254_0
   \   000005                ; // Fall through to label ??Subroutine254_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine254_0:
   \   000000   2404         ADD     A,#0x4
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00000F   A3           INC     DPTR
   \   000010   E5..         MOV     A,?V2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003   22           RET
   2953          
   2954          /*********************************************************************
   2955           * @fn          ZDO_ParseServerDiscRsp
   2956           *
   2957           * @brief       Parse the Server_Discovery_rsp message.
   2958           *
   2959           * @param       inMsg - incoming message.
   2960           * @param       pRsp - place to put the parsed information.
   2961           *
   2962           * @return      none
   2963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2964          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2965          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2966            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_670:
   \   000013   F583         MOV     DPH,A
   \   000015   8A82         MOV     DPL,R2
   \   000017   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_655:
   \   00001A   12....       LCALL   ?Subroutine39 & 0xFFFF
   2967            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_57:
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_659:
   \   00002C   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   2968          }
   \                     ??CrossCallReturnLabel_629:
   \   00002F   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine260_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   EA           MOV     A,R2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   A3           INC     DPTR
   \   000009   22           RET
   2969          
   2970          /*********************************************************************
   2971           * @fn          ZDO_ParseMgmtLqiRsp
   2972           *
   2973           * @brief       This function parses the incoming Management
   2974           *              LQI response
   2975           *
   2976           * @param       inMsg - incoming message
   2977           *
   2978           * @return      a pointer to parsed response structure (NULL if not allocated).
   2979           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2980           *          by the calling function [osal_mem_free()].
   2981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   AA..         MOV     R2,?V2
   \   000002   AB..         MOV     R3,?V3
   \   000004                REQUIRE ??Subroutine201_0
   \   000004                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   FC           MOV     R4,A
   \   000001   EF           MOV     A,R7
   \   000002   FD           MOV     R5,A
   \   000003   E5..         MOV     A,?V0
   \   000005                REQUIRE ??Subroutine248_0
   \   000005                ; // Fall through to label ??Subroutine248_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2982          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2983          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2984            ZDO_MgmtLqiRsp_t *pRsp;
   2985            uint8 status;
   2986            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V5,#0x0
   2987            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V4,#0x0
   2988            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V6,#0x0
   2989            uint8 *msg;
   2990          
   2991            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine56 & 0xFFFF
   2992          
   2993            status = *msg++;
   \                     ??CrossCallReturnLabel_610:
   \   000011   F5..         MOV     ?V7,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2994            if ( status == ZSuccess )
   \   000018   7017         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   2995            {
   2996              neighborLqiEntries = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V6,A
   2997              startIndex = *msg++;
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V5,A
   2998              neighborLqiCount = *msg++;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V4,A
   \   00002A   EE           MOV     A,R6
   \   00002B   2403         ADD     A,#0x3
   \   00002D   FE           MOV     R6,A
   \   00002E   5001         JNC     ??ZDO_ParseMgmtLqiRsp_0
   \   000030   0F           INC     R7
   2999            }
   3000          
   3001            // Allocate a buffer big enough to handle the list.
   3002            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   3003                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( ZDP_MgmtLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E5..         MOV     A,?V4
   \   000033   75F01A       MOV     B,#0x1a
   \   000036   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000039   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003C   8A..         MOV     ?V2,R2
   \   00003E   8B..         MOV     ?V3,R3
   3004            if ( pRsp )
   \   000040   EA           MOV     A,R2
   \   000041   45..         ORL     A,?V3
   \   000043   7003         JNZ     $+5
   \   000045   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   3005            {
   3006              uint8 x;
   3007              ZDP_MgmtLqiItem_t *pList = pRsp->list;
   \   000048   12....       LCALL   ?Subroutine148 & 0xFFFF
   3008              pRsp->status = status;
   \                     ??CrossCallReturnLabel_243:
   \   00004B   12....       LCALL   ?Subroutine12 & 0xFFFF
   3009              pRsp->neighborLqiEntries = neighborLqiEntries;
   3010              pRsp->startIndex = startIndex;
   3011              pRsp->neighborLqiCount = neighborLqiCount;
   3012          
   3013              for ( x = 0; x < neighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_2:
   \   00004E   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
   3014              {
   3015                uint8 tmp;
   3016          
   3017                pList->panID = 0; // This isn't in the record, why is it in the structure?
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   000051   85..82       MOV     DPL,?V0
   \   000054   85..83       MOV     DPH,?V1
   \   000057   E4           CLR     A
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   F0           MOVX    @DPTR,A
   3018                osal_cpyExtAddr(pList->extPanID, msg);   //Copy extended PAN ID
   \   00005B                ; Setup parameters for call to function sAddrExtCpy
   \   00005B   EE           MOV     A,R6
   \   00005C   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   00005F   35..         ADDC    A,?V1
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3019                msg += Z_EXTADDR_LEN;
   \   000065   EE           MOV     A,R6
   \   000066   2408         ADD     A,#0x8
   \   000068   FE           MOV     R6,A
   \   000069   5001         JNC     ??ZDO_ParseMgmtLqiRsp_4
   \   00006B   0F           INC     R7
   3020          
   3021                osal_cpyExtAddr(pList->extAddr, msg);   //Copy extended address
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   00006C                ; Setup parameters for call to function sAddrExtCpy
   \   00006C   FC           MOV     R4,A
   \   00006D   EF           MOV     A,R7
   \   00006E   FD           MOV     R5,A
   \   00006F   E5..         MOV     A,?V0
   \   000071   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   000074   35..         ADDC    A,?V1
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3022                msg += Z_EXTADDR_LEN;
   \   00007A   EE           MOV     A,R6
   \   00007B   2408         ADD     A,#0x8
   \   00007D   FE           MOV     R6,A
   \   00007E   5001         JNC     ??ZDO_ParseMgmtLqiRsp_5
   \   000080   0F           INC     R7
   3023          
   3024                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   000081   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000084   F8           MOV     R0,A
   \   000085   E5..         MOV     A,?V0
   \   000087   2412         ADD     A,#0x12
   \   000089   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   00008C   E8           MOV     A,R0
   \   00008D   12....       LCALL   ?Subroutine33 & 0xFFFF
   3025                msg += 2;
   3026          
   3027                tmp = *msg++;
   \                     ??CrossCallReturnLabel_43:
   \   000090   F8           MOV     R0,A
   3028                pList->devType = tmp & 0x03;
   \   000091   7403         MOV     A,#0x3
   \   000093   58           ANL     A,R0
   \   000094   C0E0         PUSH    A
   \   000096   E5..         MOV     A,?V0
   \   000098   2414         ADD     A,#0x14
   \   00009A   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   00009D   D0E0         POP     A
   \   00009F   F0           MOVX    @DPTR,A
   3029                pList->rxOnIdle = (tmp >> 2) & 0x03;
   \   0000A0   E8           MOV     A,R0
   \   0000A1   13           RRC     A
   \   0000A2   13           RRC     A
   \   0000A3   543F         ANL     A,#0x3f
   \   0000A5   5403         ANL     A,#0x3
   \   0000A7   C0E0         PUSH    A
   \   0000A9   E5..         MOV     A,?V0
   \   0000AB   2415         ADD     A,#0x15
   \   0000AD   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   0000B0   D0E0         POP     A
   \   0000B2   F0           MOVX    @DPTR,A
   3030                pList->relation = (tmp >> 4) & 0x07;
   \   0000B3   E8           MOV     A,R0
   \   0000B4   C4           SWAP    A
   \   0000B5   540F         ANL     A,#0xf
   \   0000B7   5407         ANL     A,#0x7
   \   0000B9   C0E0         PUSH    A
   \   0000BB   E5..         MOV     A,?V0
   \   0000BD   2416         ADD     A,#0x16
   \   0000BF   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   0000C2   D0E0         POP     A
   \   0000C4   12....       LCALL   ?Subroutine22 & 0xFFFF
   3031          
   3032                pList->permit = (*msg++) & 0x03;
   \                     ??CrossCallReturnLabel_23:
   \   0000C7   5403         ANL     A,#0x3
   \   0000C9   C0E0         PUSH    A
   \   0000CB   E5..         MOV     A,?V0
   \   0000CD   2417         ADD     A,#0x17
   \   0000CF   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   0000D2   D0E0         POP     A
   \   0000D4   12....       LCALL   ?Subroutine160 & 0xFFFF
   3033          
   3034                pList->depth = *msg++;
   \                     ??CrossCallReturnLabel_265:
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   C0E0         PUSH    A
   \   0000DB   E5..         MOV     A,?V0
   \   0000DD   2418         ADD     A,#0x18
   \   0000DF   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   0000E2   D0E0         POP     A
   \   0000E4   12....       LCALL   ?Subroutine36 & 0xFFFF
   3035          
   3036                pList->lqi = *msg++;
   \                     ??CrossCallReturnLabel_50:
   \   0000E7   C0E0         PUSH    A
   \   0000E9   E5..         MOV     A,?V0
   \   0000EB   2419         ADD     A,#0x19
   \   0000ED   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   0000F0   D0E0         POP     A
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   EE           MOV     A,R6
   \   0000F4   2406         ADD     A,#0x6
   \   0000F6   FE           MOV     R6,A
   \   0000F7   5001         JNC     ??ZDO_ParseMgmtLqiRsp_6
   \   0000F9   0F           INC     R7
   3037                pList++;
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   0000FA   E5..         MOV     A,?V0
   \   0000FC   241A         ADD     A,#0x1a
   \   0000FE   F5..         MOV     ?V0,A
   \   000100   5002         JNC     ??ZDO_ParseMgmtLqiRsp_7
   \   000102   05..         INC     ?V1
   3038              }
   \                     ??ZDO_ParseMgmtLqiRsp_7:
   \   000104   05..         INC     ?V5
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000106   E5..         MOV     A,?V5
   \   000108   C3           CLR     C
   \   000109   95..         SUBB    A,?V4
   \   00010B   5003         JNC     $+5
   \   00010D   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_3 & 0xFFFF
   3039            }
   3040          
   3041            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   000110   02....       LJMP    ?Subroutine3 & 0xFFFF
   3042          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   EA           MOV     A,R2
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V0,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V3
   \   000008   F5..         MOV     ?V1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003                REQUIRE ??Subroutine253_0
   \   000003                ; // Fall through to label ??Subroutine253_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   A4           MUL     AB
   \   000001   A9F0         MOV     R1,B
   \   000003   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_618:
   \   000006   39           ADDC    A,R1
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E5..         MOV     A,?V7
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V6
   \   00000A   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   00000D   A3           INC     DPTR
   \   00000E   E5..         MOV     A,?V5
   \   000010   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000013   E5..         MOV     A,?V4
   \   000015   F0           MOVX    @DPTR,A
   \   000016   75..00       MOV     ?V5,#0x0
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   3043          
   3044          /*********************************************************************
   3045           * @fn          ZDO_ParseMgmNwkDiscRsp
   3046           *
   3047           * @brief       This function parses the incoming Management
   3048           *              Network Discover response.
   3049           *
   3050           * @param       inMsg - incoming message
   3051           *
   3052           * @return      pointer to parsed response.  This structure was
   3053           *          allocated using osal_mem_alloc, so it must be freed
   3054           *          by the calling function [osal_mem_free()].
   3055           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3056          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   3057          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3058            ZDO_MgmNwkDiscRsp_t *pRsp;
   3059            uint8 status;
   3060            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   3061            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0,#0x0
   3062            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   3063            uint8 *msg;
   3064          
   3065            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine56 & 0xFFFF
   3066            status = *msg++;
   \                     ??CrossCallReturnLabel_611:
   \   000011   F5..         MOV     ?V5,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   3067          
   3068            if ( status == ZSuccess )
   \   000018   7017         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   3069            {
   3070              networkCount = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V1,A
   3071              startIndex = *msg++;
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0,A
   3072              networkListCount = *msg++;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V4,A
   \   00002A   EE           MOV     A,R6
   \   00002B   2403         ADD     A,#0x3
   \   00002D   FE           MOV     R6,A
   \   00002E   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_0
   \   000030   0F           INC     R7
   3073            }
   3074          
   3075            // Allocate a buffer big enough to handle the list.
   3076            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   3077                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   85....       MOV     ?V2,?V4
   \   000034   75..00       MOV     ?V3,#0x0
   \   000037   7404         MOV     A,#0x4
   \   000039   78..         MOV     R0,#?V2
   \   00003B   12....       LCALL   ?S_SHL
   \   00003E   E5..         MOV     A,?V2
   \   000040   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_616:
   \   000043   35..         ADDC    A,?V3
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000049   8A..         MOV     ?V2,R2
   \   00004B   8B..         MOV     ?V3,R3
   3078            if ( pRsp )
   \   00004D   EA           MOV     A,R2
   \   00004E   45..         ORL     A,?V3
   \   000050   7003         JNZ     $+5
   \   000052   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   3079            {
   3080              uint8 x;
   3081              mgmtNwkDiscItem_t *pList;
   3082          
   3083              pRsp->status = status;
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   E5..         MOV     A,?V5
   \   00005B   F0           MOVX    @DPTR,A
   3084              pRsp->networkCount = networkCount;
   \   00005C   A3           INC     DPTR
   \   00005D   E5..         MOV     A,?V1
   \   00005F   12....       LCALL   ?Subroutine38 & 0xFFFF
   3085              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_54:
   \   000062   E5..         MOV     A,?V0
   \   000064   12....       LCALL   ?Subroutine28 & 0xFFFF
   3086              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_33:
   \   000067   E5..         MOV     A,?V4
   \   000069   F0           MOVX    @DPTR,A
   3087              pList = pRsp->list;
   \   00006A   12....       LCALL   ?Subroutine148 & 0xFFFF
   3088          
   3089              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_244:
   \   00006D   75..00       MOV     ?V5,#0x0
   \   000070   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   3090              {
   3091                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000073                ; Setup parameters for call to function sAddrExtCpy
   \   000073   EE           MOV     A,R6
   \   000074   FC           MOV     R4,A
   \   000075   EF           MOV     A,R7
   \   000076   FD           MOV     R5,A
   \   000077   AA..         MOV     R2,?V0
   \   000079   AB..         MOV     R3,?V1
   \   00007B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3092                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   00007E   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000081   A3           INC     DPTR
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   E9           MOV     A,R1
   \   000085   12....       LCALL   ?Subroutine25 & 0xFFFF
   3093                msg += Z_EXTADDR_LEN;
   3094          
   3095                pList->logicalChannel = *msg++;
   \                     ??CrossCallReturnLabel_28:
   \   000088   85..82       MOV     DPL,?V0
   \   00008B   85..83       MOV     DPH,?V1
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   F0           MOVX    @DPTR,A
   3096                pList->stackProfile = (*msg) & 0x0F;
   \   000099   EE           MOV     A,R6
   \   00009A   2409         ADD     A,#0x9
   \   00009C   F8           MOV     R0,A
   \   00009D   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   0000A0   C0E0         PUSH    A
   \   0000A2   E5..         MOV     A,?V0
   \   0000A4   240B         ADD     A,#0xb
   \   0000A6   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   0000A9   D0E0         POP     A
   \   0000AB   12....       LCALL   ?Subroutine48 & 0xFFFF
   3097                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_75:
   \   0000AE   C0E0         PUSH    A
   \   0000B0   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   0000B3   D0E0         POP     A
   \   0000B5   F0           MOVX    @DPTR,A
   3098                pList->beaconOrder = (*msg) & 0x0F;
   \   0000B6   EE           MOV     A,R6
   \   0000B7   240A         ADD     A,#0xa
   \   0000B9   08           INC     R0
   \   0000BA   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   0000BD   C0E0         PUSH    A
   \   0000BF   E5..         MOV     A,?V0
   \   0000C1   240D         ADD     A,#0xd
   \   0000C3   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   0000C6   D0E0         POP     A
   \   0000C8   12....       LCALL   ?Subroutine48 & 0xFFFF
   3099                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_76:
   \   0000CB   C0E0         PUSH    A
   \   0000CD   E5..         MOV     A,?V0
   \   0000CF   240E         ADD     A,#0xe
   \   0000D1   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   0000D4   D0E0         POP     A
   \   0000D6   F0           MOVX    @DPTR,A
   3100                pList->permitJoining = *msg++;
   \   0000D7   EE           MOV     A,R6
   \   0000D8   240B         ADD     A,#0xb
   \   0000DA   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   0000DD   C0E0         PUSH    A
   \   0000DF   E5..         MOV     A,?V0
   \   0000E1   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0000E4   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   0000E7   D0E0         POP     A
   \   0000E9   F0           MOVX    @DPTR,A
   \   0000EA   EE           MOV     A,R6
   \   0000EB   240C         ADD     A,#0xc
   \   0000ED   FE           MOV     R6,A
   \   0000EE   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_4
   \   0000F0   0F           INC     R7
   3101                pList++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0000F1   E5..         MOV     A,?V0
   \   0000F3   2410         ADD     A,#0x10
   \   0000F5   F5..         MOV     ?V0,A
   \   0000F7   5002         JNC     ??ZDO_ParseMgmNwkDiscRsp_5
   \   0000F9   05..         INC     ?V1
   3102              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_5:
   \   0000FB   05..         INC     ?V5
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000FD   E5..         MOV     A,?V5
   \   0000FF   C3           CLR     C
   \   000100   95..         SUBB    A,?V4
   \   000102   5003         JNC     $+5
   \   000104   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_3 & 0xFFFF
   3103            }
   3104          
   3105            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   000107   02....       LJMP    ?Subroutine3 & 0xFFFF
   3106          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   E4           CLR     A
   \   000001   3F           ADDC    A,R7
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   540F         ANL     A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C4           SWAP    A
   \   000005   540F         ANL     A,#0xf
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   000007   85..82       MOV     DPL,?V0
   \   00000A   85..83       MOV     DPH,?V1
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   22           RET
   3107          
   3108          /*********************************************************************
   3109           * @fn          ZDO_ParseMgmtRtgRsp
   3110           *
   3111           * @brief       This function parses the incoming Management
   3112           *              Routing response.
   3113           *
   3114           * @param       inMsg - incoming message
   3115           *
   3116           * @return      a pointer to parsed response structure (NULL if not allocated).
   3117           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3118           *          by the calling function [osal_mem_free()].
   3119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3120          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   3121          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3122            ZDO_MgmtRtgRsp_t *pRsp;
   3123            uint8 status;
   3124            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   3125            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V1,#0x0
   3126            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0,#0x0
   3127            uint8 *msg;
   3128          
   3129            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine56 & 0xFFFF
   3130          
   3131            status = *msg++;
   \                     ??CrossCallReturnLabel_612:
   \   000011   F5..         MOV     ?V3,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   3132            if ( status == ZSuccess )
   \   000018   7015         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   3133            {
   3134              rtgCount = *msg++;
   \   00001A   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   3135              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_320:
   \   00001D   F5..         MOV     ?V1,A
   3136              rtgListCount = *msg++;
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0,A
   \   000028   EE           MOV     A,R6
   \   000029   2403         ADD     A,#0x3
   \   00002B   FE           MOV     R6,A
   \   00002C   5001         JNC     ??ZDO_ParseMgmtRtgRsp_0
   \   00002E   0F           INC     R7
   3137            }
   3138          
   3139            // Allocate a buffer big enough to handle the list
   3140            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   3141                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   E5..         MOV     A,?V0
   \   000031   75F007       MOV     B,#0x7
   \   000034   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000037   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3142            if ( pRsp )
   \   00003A   EA           MOV     A,R2
   \   00003B   4B           ORL     A,R3
   \   00003C   606D         JZ      ??ZDO_ParseMgmtRtgRsp_1
   3143            {
   3144              uint8 x;
   3145              rtgItem_t *pList = pRsp->list;
   \   00003E   EA           MOV     A,R2
   \   00003F   2404         ADD     A,#0x4
   \   000041   F8           MOV     R0,A
   \   000042   E4           CLR     A
   \   000043   3B           ADDC    A,R3
   \   000044   F9           MOV     R1,A
   3146              pRsp->status = status;
   \   000045   8A82         MOV     DPL,R2
   \   000047   8B83         MOV     DPH,R3
   \   000049   E5..         MOV     A,?V3
   \   00004B   F0           MOVX    @DPTR,A
   3147              pRsp->rtgCount = rtgCount;
   \   00004C   A3           INC     DPTR
   \   00004D   E5..         MOV     A,?V2
   \   00004F   12....       LCALL   ?Subroutine38 & 0xFFFF
   3148              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_55:
   \   000052   E5..         MOV     A,?V1
   \   000054   12....       LCALL   ?Subroutine28 & 0xFFFF
   3149              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_34:
   \   000057   E5..         MOV     A,?V0
   \   000059   F0           MOVX    @DPTR,A
   3150          
   3151              for ( x = 0; x < rtgListCount; x++ )
   \   00005A   75..00       MOV     ?V1,#0x0
   \   00005D   8045         SJMP    ??ZDO_ParseMgmtRtgRsp_2
   3152              {
   3153                uint8 statOpt;
   3154          
   3155                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   00005F   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   ED           MOV     A,R5
   \   000065   12....       LCALL   ?Subroutine53 & 0xFFFF
   3156                msg += 2;
   3157                statOpt = *msg++;
   \                     ??CrossCallReturnLabel_82:
   \   000068   FC           MOV     R4,A
   \   000069   EE           MOV     A,R6
   \   00006A   2403         ADD     A,#0x3
   \   00006C   FE           MOV     R6,A
   \   00006D   5001         JNC     ??ZDO_ParseMgmtRtgRsp_4
   \   00006F   0F           INC     R7
   3158                pList->status = (statOpt & 0x07);
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000070   7407         MOV     A,#0x7
   \   000072   5C           ANL     A,R4
   \   000073   8882         MOV     DPL,R0
   \   000075   8983         MOV     DPH,R1
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   F0           MOVX    @DPTR,A
   3159                pList->options = ((statOpt >> 3) & 0x07);
   \   00007D   EC           MOV     A,R4
   \   00007E   13           RRC     A
   \   00007F   13           RRC     A
   \   000080   13           RRC     A
   \   000081   541F         ANL     A,#0x1f
   \   000083   5407         ANL     A,#0x7
   \   000085   8882         MOV     DPL,R0
   \   000087   8983         MOV     DPH,R1
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   F0           MOVX    @DPTR,A
   3160                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \   000090   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   3161                msg += 2;
   \                     ??CrossCallReturnLabel_664:
   \   000098   5001         JNC     ??ZDO_ParseMgmtRtgRsp_5
   \   00009A   0F           INC     R7
   3162                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   00009B   E8           MOV     A,R0
   \   00009C   2407         ADD     A,#0x7
   \   00009E   F8           MOV     R0,A
   \   00009F   5001         JNC     ??ZDO_ParseMgmtRtgRsp_6
   \   0000A1   09           INC     R1
   3163              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   0000A2   05..         INC     ?V1
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   0000A4   E5..         MOV     A,?V1
   \   0000A6   C3           CLR     C
   \   0000A7   95..         SUBB    A,?V0
   \   0000A9   40B4         JC      ??ZDO_ParseMgmtRtgRsp_3
   3164            }
   3165          
   3166            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   0000AB                REQUIRE ?Subroutine5
   \   0000AB                ; // Fall through to label ?Subroutine5
   3167          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FD           MOV     R5,A
   \   00000A   E5..         MOV     A,?V2
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine261_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   ED           MOV     A,R5
   \   000003   F0           MOVX    @DPTR,A
   \   000004   EE           MOV     A,R6
   \   000005   2402         ADD     A,#0x2
   \   000007   FE           MOV     R6,A
   \   000008   22           RET
   3168          
   3169          /*********************************************************************
   3170           * @fn          ZDO_ParseMgmtBindRsp
   3171           *
   3172           * @brief       This function parses the incoming Management
   3173           *              Binding response.
   3174           *
   3175           * @param       inMsg - pointer to message to parse
   3176           *
   3177           * @return      a pointer to parsed response structure (NULL if not allocated).
   3178           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3179           *          by the calling function [osal_mem_free()].
   3180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3181          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   3182          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   3183            ZDO_MgmtBindRsp_t *pRsp;
   3184            uint8 status;
   3185            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V6,#0x0
   3186            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V5,#0x0
   3187            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   3188            uint8 *msg;
   3189          
   3190            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000011   12....       LCALL   ?Subroutine106 & 0xFFFF
   3191          
   3192            status = *msg++;
   \                     ??CrossCallReturnLabel_323:
   \   000014   85..82       MOV     DPL,?V2
   \   000017   F583         MOV     DPH,A
   \   000019   12....       LCALL   ?Subroutine96 & 0xFFFF
   3193            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_150:
   \   00001C   701C         JNZ     ??ZDO_ParseMgmtBindRsp_0
   3194            {
   3195              bindingCount = *msg++;
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V6,A
   3196              startIndex = *msg++;
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V5,A
   3197              bindingListCount = *msg++;
   \   000025   85..82       MOV     DPL,?V2
   \   000028   85..83       MOV     DPH,?V3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V4,A
   \   000030   E5..         MOV     A,?V2
   \   000032   2403         ADD     A,#0x3
   \   000034   F5..         MOV     ?V2,A
   \   000036   5002         JNC     ??ZDO_ParseMgmtBindRsp_0
   \   000038   05..         INC     ?V3
   3198            }
   3199          
   3200            // Allocate a buffer big enough to handle the list
   3201            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   3202                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   00003A                ; Setup parameters for call to function osal_mem_alloc
   \   00003A   E5..         MOV     A,?V4
   \   00003C   75F015       MOV     B,#0x15
   \   00003F   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000042   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000045   8A..         MOV     ?V0,R2
   \   000047   8B..         MOV     ?V1,R3
   3203            if ( pRsp )
   \   000049   EA           MOV     A,R2
   \   00004A   45..         ORL     A,?V1
   \   00004C   7003         JNZ     $+5
   \   00004E   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   3204            {
   3205              uint8 x;
   3206              apsBindingItem_t *pList = pRsp->list;
   \   000051   EA           MOV     A,R2
   \   000052   2404         ADD     A,#0x4
   \   000054   FE           MOV     R6,A
   \   000055   E4           CLR     A
   \   000056   35..         ADDC    A,?V1
   \   000058   FF           MOV     R7,A
   3207              pRsp->status = status;
   \   000059   12....       LCALL   ?Subroutine12 & 0xFFFF
   3208              pRsp->bindingCount = bindingCount;
   3209              pRsp->startIndex = startIndex;
   3210              pRsp->bindingListCount = bindingListCount;
   3211          
   3212              for ( x = 0; x < bindingListCount; x++ )
   \                     ??CrossCallReturnLabel_3:
   \   00005C   801F         SJMP    ??ZDO_ParseMgmtBindRsp_2
   3213              {
   3214                osal_cpyExtAddr( pList->srcAddr, msg );
   3215                msg += Z_EXTADDR_LEN;
   3216                pList->srcEP = *msg++;
   3217          
   3218                // Get the Cluster ID
   3219          
   3220                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   3221                msg += 2;
   3222                pList->dstAddr.addrMode = *msg++;
   3223                if ( pList->dstAddr.addrMode == Addr64Bit )
   3224                {
   3225                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   3226                  msg += Z_EXTADDR_LEN;
   3227                  pList->dstEP = *msg++;
   3228                }
   3229                else
   3230                {
   3231                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00005E   85..82       MOV     DPL,?V2
   \   000061   85..83       MOV     DPH,?V3
   \   000064   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000067   12....       LCALL   ?Subroutine51 & 0xFFFF
   3232                  msg += 2;
   \                     ??CrossCallReturnLabel_639:
   \   00006A   E5..         MOV     A,?V2
   \   00006C   2402         ADD     A,#0x2
   \   00006E   F5..         MOV     ?V2,A
   \   000070   5002         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   000072   05..         INC     ?V3
   3233                }
   3234          
   3235                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000074   EE           MOV     A,R6
   \   000075   2415         ADD     A,#0x15
   \   000077   FE           MOV     R6,A
   \   000078   5001         JNC     ??ZDO_ParseMgmtBindRsp_5
   \   00007A   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   00007B   05..         INC     ?V5
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   00007D   E5..         MOV     A,?V5
   \   00007F   C3           CLR     C
   \   000080   95..         SUBB    A,?V4
   \   000082   5072         JNC     ??ZDO_ParseMgmtBindRsp_1
   \   000084                ; Setup parameters for call to function sAddrExtCpy
   \   000084   AC..         MOV     R4,?V2
   \   000086   AD..         MOV     R5,?V3
   \   000088   EE           MOV     A,R6
   \   000089   FA           MOV     R2,A
   \   00008A   EF           MOV     A,R7
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00008F   85..82       MOV     DPL,?V2
   \   000092   85..83       MOV     DPH,?V3
   \   000095   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000098   E5..         MOV     A,?V2
   \   00009A   2409         ADD     A,#0x9
   \   00009C   F5..         MOV     ?V2,A
   \   00009E   5002         JNC     ??ZDO_ParseMgmtBindRsp_6
   \   0000A0   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   0000A2   F582         MOV     DPL,A
   \   0000A4   85..83       MOV     DPH,?V3
   \   0000A7   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000AA   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   0000AD   85..82       MOV     DPL,?V2
   \   0000B0   85..83       MOV     DPH,?V3
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   0000B9   E5..         MOV     A,?V2
   \   0000BB   2403         ADD     A,#0x3
   \   0000BD   F5..         MOV     ?V2,A
   \   0000BF   5002         JNC     ??ZDO_ParseMgmtBindRsp_7
   \   0000C1   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   0000C3   7403         MOV     A,#0x3
   \   0000C5   68           XRL     A,R0
   \   0000C6   7096         JNZ     ??ZDO_ParseMgmtBindRsp_3
   \   0000C8                ; Setup parameters for call to function sAddrExtCpy
   \   0000C8   AC..         MOV     R4,?V2
   \   0000CA   AD..         MOV     R5,?V3
   \   0000CC   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   0000CF   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000D2   85..82       MOV     DPL,?V2
   \   0000D5   85..83       MOV     DPH,?V3
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   C0E0         PUSH    A
   \   0000E3   12....       LCALL   ?Subroutine137 & 0xFFFF
   3236              }
   3237            }
   \                     ??CrossCallReturnLabel_516:
   \   0000E6   D0E0         POP     A
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   E5..         MOV     A,?V2
   \   0000EB   2409         ADD     A,#0x9
   \   0000ED   F5..         MOV     ?V2,A
   \   0000EF   5083         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   0000F1   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   0000F3   02....       LJMP    ??ZDO_ParseMgmtBindRsp_4 & 0xFFFF
   3238          
   3239            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000F6   AA..         MOV     R2,?V0
   \   0000F8   AB..         MOV     R3,?V1
   \   0000FA   02....       LJMP    ??Subroutine218_0 & 0xFFFF
   3240          }
   3241          
   3242          /*********************************************************************
   3243           * @fn          ZDO_ParseUserDescRsp
   3244           *
   3245           * @brief       This function parses the incoming User
   3246           *              Descriptor Response.
   3247           *
   3248           * @param       inMsg - incoming response message
   3249           *
   3250           * @return      a pointer to parsed response structure (NULL if not allocated).
   3251           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3252           *          by the calling function [osal_mem_free()].
   3253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3254          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3255          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   3256            ZDO_UserDescRsp_t *pRsp;
   3257            uint8 *msg;
   3258            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   3259          
   3260            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00000B   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   00000E   88..         MOV     ?V0,R0
   \   000010   89..         MOV     ?V1,R1
   3261          
   3262            if ( msg[0] == ZSuccess )
   \   000012   8882         MOV     DPL,R0
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   3263            {
   3264              descLen = msg[3];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V2,A
   3265            }
   3266          
   3267            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   E5..         MOV     A,?V2
   \   000021   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   000024   3400         ADDC    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV     ?V4,R2
   \   00002C   8B..         MOV     ?V5,R3
   \   00002E   AE..         MOV     R6,?V4
   \   000030   AF..         MOV     R7,?V5
   3268            if ( pRsp )
   \   000032   EE           MOV     A,R6
   \   000033   4F           ORL     A,R7
   \   000034   603D         JZ      ??ZDO_ParseUserDescRsp_1
   3269            {
   3270              pRsp->status = msg[0];
   \   000036   85..82       MOV     DPL,?V0
   \   000039   85..83       MOV     DPH,?V1
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   12....       LCALL   ?Subroutine54 & 0xFFFF
   3271              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_83:
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   \   000046   85..82       MOV     DPL,?V0
   \   000049   85..83       MOV     DPH,?V1
   \   00004C   A3           INC     DPTR
   \   00004D   12....       LCALL   ?Subroutine24 & 0xFFFF
   3272              pRsp->length = descLen;
   3273              if ( descLen )
   \                     ??CrossCallReturnLabel_26:
   \   000050   6021         JZ      ??ZDO_ParseUserDescRsp_1
   3274              {
   3275                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000052                ; Setup parameters for call to function osal_memcpy
   \   000052   E5..         MOV     A,?V0
   \   000054   2404         ADD     A,#0x4
   \   000056   5002         JNC     ??ZDO_ParseUserDescRsp_2
   \   000058   05..         INC     ?V1
   \                     ??ZDO_ParseUserDescRsp_2:
   \   00005A   F5..         MOV     ?V4,A
   \   00005C   85....       MOV     ?V5,?V1
   \   00005F   88..         MOV     ?V6,R0
   \   000061   78..         MOV     R0,#?V4
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000066   12....       LCALL   ?Subroutine187 & 0xFFFF
   3276              }
   3277            }
   \                     ??CrossCallReturnLabel_620:
   \   000069   3F           ADDC    A,R7
   \   00006A   FB           MOV     R3,A
   \   00006B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   3278          
   3279            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000073   02....       LJMP    ?Subroutine6 & 0xFFFF
   3280          }
   3281          
   3282          /*********************************************************************
   3283           * @fn          ZDO_ParseSimpleDescBuf
   3284           *
   3285           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3286           *
   3287           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3288           * @param       desc - SimpleDescriptionFormat_t *
   3289           *
   3290           *              This routine allocates storage for the cluster IDs because
   3291           *              they are 16-bit and need to be aligned to be properly processed.
   3292           *              This routine returns non-zero if an allocation fails.
   3293           *
   3294           *              NOTE: This means that the caller or user of the input structure
   3295           *                    is responsible for freeing the memory
   3296           *
   3297           * @return      0: success
   3298           *              1: failure due to malloc failure.
   3299           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3300          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3301          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3302            uint8 num, i;
   3303          
   3304            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_656:
   \   000014   12....       LCALL   ?Subroutine44 & 0xFFFF
   3305            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_68:
   \   000017   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_660:
   \   00001A   12....       LCALL   ?Subroutine50 & 0xFFFF
   3306            buf += 2;
   \                     ??CrossCallReturnLabel_77:
   \   00001D   5001         JNC     ??ZDO_ParseSimpleDescBuf_0
   \   00001F   0F           INC     R7
   3307            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_661:
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ?Subroutine33 & 0xFFFF
   3308            buf += 2;
   3309            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_44:
   \   00002C   C4           SWAP    A
   \   00002D   540F         ANL     A,#0xf
   3310          
   3311            desc->Reserved = 0;
   \   00002F   8C82         MOV     DPL,R4
   \   000031   8D83         MOV     DPH,R5
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   12....       LCALL   ?Subroutine22 & 0xFFFF
   3312            buf++;
   3313          
   3314            // move in input cluster list (if any). allocate aligned memory.
   3315            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_24:
   \   00003B   F5..         MOV     ?V4,A
   \   00003D   EE           MOV     A,R6
   \   00003E   2404         ADD     A,#0x4
   \   000040   FE           MOV     R6,A
   \   000041   5001         JNC     ??ZDO_ParseSimpleDescBuf_1
   \   000043   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000044   8C82         MOV     DPL,R4
   \   000046   8D83         MOV     DPH,R5
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E5..         MOV     A,?V4
   \   000050   F0           MOVX    @DPTR,A
   3316            if ( num )
   \   000051   6039         JZ      ??ZDO_ParseSimpleDescBuf_2
   3317            {
   3318              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000053                ; Setup parameters for call to function osal_mem_alloc
   \   000053   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_650:
   \   000056   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000059   E5..         MOV     A,?V0
   \   00005B   2407         ADD     A,#0x7
   \   00005D   F8           MOV     R0,A
   \   00005E   E4           CLR     A
   \   00005F   35..         ADDC    A,?V1
   \   000061   F9           MOV     R1,A
   \   000062   88..         MOV     ?V2,R0
   \   000064   89..         MOV     ?V3,R1
   \   000066   EA           MOV     A,R2
   \   000067   F8           MOV     R0,A
   \   000068   EB           MOV     A,R3
   \   000069   F9           MOV     R1,A
   \   00006A   85..82       MOV     DPL,?V2
   \   00006D   85..83       MOV     DPH,?V3
   \   000070   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000073   7003         JNZ     $+5
   \   000075   02....       LJMP    ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   3319              {
   3320                // malloc failed. we're done.
   3321                return 1;
   3322              }
   3323              for (i=0; i<num; ++i)
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   800A         SJMP    ??ZDO_ParseSimpleDescBuf_4
   3324              {
   3325                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   00007C   12....       LCALL   ?Subroutine62 & 0xFFFF
   3326                buf += 2;
   3327              }
   \                     ??CrossCallReturnLabel_95:
   \   00007F   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_662:
   \   000082   5001         JNC     ??ZDO_ParseSimpleDescBuf_6
   \   000084   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000085   0A           INC     R2
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   000086   EA           MOV     A,R2
   \   000087   C3           CLR     C
   \   000088   95..         SUBB    A,?V4
   \   00008A   40F0         JC      ??ZDO_ParseSimpleDescBuf_5
   3328            }
   3329          
   3330            // move in output cluster list (if any). allocate aligned memory.
   3331            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F5..         MOV     ?V2,A
   \   000093   A3           INC     DPTR
   \   000094   AE82         MOV     R6,DPL
   \   000096   AF83         MOV     R7,DPH
   \   000098   85..82       MOV     DPL,?V0
   \   00009B   85..83       MOV     DPH,?V1
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   F0           MOVX    @DPTR,A
   3332            if (num)
   \   0000A8   6070         JZ      ??ZDO_ParseSimpleDescBuf_7
   3333            {
   3334              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000AA                ; Setup parameters for call to function osal_mem_alloc
   \   0000AA   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   0000AD   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B0   8A..         MOV     ?V4,R2
   \   0000B2   8B..         MOV     ?V5,R3
   \   0000B4   A8..         MOV     R0,?V4
   \   0000B6   A9..         MOV     R1,?V5
   \   0000B8   85..82       MOV     DPL,?V0
   \   0000BB   85..83       MOV     DPH,?V1
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   0000CB   7036         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3335              {
   3336                // malloc failed. free input cluster list memory if there is any
   3337                if ( desc->pAppInClusterList != NULL )
   \   0000CD   85..82       MOV     DPL,?V0
   \   0000D0   85..83       MOV     DPH,?V1
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   0000DD   6020         JZ      ??ZDO_ParseSimpleDescBuf_3
   3338                {
   3339                  osal_mem_free(desc->pAppInClusterList);
   \   0000DF   E5..         MOV     A,?V0
   \   0000E1   2407         ADD     A,#0x7
   \   0000E3   F5..         MOV     ?V2,A
   \   0000E5   E4           CLR     A
   \   0000E6   35..         ADDC    A,?V1
   \   0000E8   F5..         MOV     ?V3,A
   \   0000EA                ; Setup parameters for call to function osal_mem_free
   \   0000EA   85..82       MOV     DPL,?V2
   \   0000ED   F583         MOV     DPH,A
   \   0000EF   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   0000F2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3340          
   3341                  desc->pAppInClusterList = NULL;
   \   0000F5   85..82       MOV     DPL,?V2
   \   0000F8   85..83       MOV     DPH,?V3
   \   0000FB   E4           CLR     A
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   F0           MOVX    @DPTR,A
   3342                }
   3343                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   0000FF   7901         MOV     R1,#0x1
   \   000101   8019         SJMP    ??ZDO_ParseSimpleDescBuf_9
   3344              }
   3345              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   000103   7A00         MOV     R2,#0x0
   \   000105   800D         SJMP    ??ZDO_ParseSimpleDescBuf_10
   3346              {
   3347                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   000107   12....       LCALL   ?Subroutine62 & 0xFFFF
   3348                buf += 2;
   3349              }
   \                     ??CrossCallReturnLabel_96:
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_663:
   \   000110   5001         JNC     ??ZDO_ParseSimpleDescBuf_12
   \   000112   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   000113   0A           INC     R2
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   000114   EA           MOV     A,R2
   \   000115   C3           CLR     C
   \   000116   95..         SUBB    A,?V2
   \   000118   40ED         JC      ??ZDO_ParseSimpleDescBuf_11
   3350            }
   3351            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   00011A   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   00011C   02....       LJMP    ?Subroutine5 & 0xFFFF
   3352          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002                REQUIRE ??Subroutine260_0
   \   000002                ; // Fall through to label ??Subroutine260_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   000007   F8           MOV     R0,A
   \   000008   E4           CLR     A
   \   000009   C8           XCH     A,R0
   \   00000A   F9           MOV     R1,A
   \   00000B   EC           MOV     A,R4
   \   00000C   28           ADD     A,R0
   \   00000D   E4           CLR     A
   \   00000E   39           ADDC    A,R1
   \   00000F   FD           MOV     R5,A
   \   000010   EA           MOV     A,R2
   \   000011   25E0         ADD     A,0xE0 /* A   */
   \   000013   F8           MOV     R0,A
   \   000014   E4           CLR     A
   \   000015   33           RLC     A
   \   000016   F9           MOV     R1,A
   \   000017   85..82       MOV     DPL,?V0
   \   00001A   85..83       MOV     DPH,?V1
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   28           ADD     A,R0
   \   000009   FB           MOV     R3,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   39           ADDC    A,R1
   \   00000D   8B82         MOV     DPL,R3
   \   00000F   F583         MOV     DPH,A
   \   000011   EC           MOV     A,R4
   \   000012                REQUIRE ??Subroutine261_0
   \   000012                ; // Fall through to label ??Subroutine261_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_641:
   \   000003   EE           MOV     A,R6
   \   000004   2402         ADD     A,#0x2
   \   000006   FE           MOV     R6,A
   \   000007   22           RET
   3353          
   3354          /*********************************************************************
   3355           * @fn          ZDO_ParseDeviceAnnce
   3356           *
   3357           * @brief       Parse a Device Announce message.
   3358           *
   3359           * @param       inMsg - Incoming message
   3360           * @param       pAnnce - place to put the parsed information
   3361           *
   3362           * @return      none
   3363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3364          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3365          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3366            uint8 *msg;
   3367          
   3368            // Parse incoming message
   3369            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00000C   12....       LCALL   ?Subroutine101 & 0xFFFF
   3370            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_159:
   \   00000F   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   000012   8C82         MOV     DPL,R4
   \   000014   8D83         MOV     DPH,R5
   \   000016   12....       LCALL   ?Subroutine50 & 0xFFFF
   3371            msg += 2;
   \                     ??CrossCallReturnLabel_78:
   \   000019   5001         JNC     ??ZDO_ParseDeviceAnnce_0
   \   00001B   0F           INC     R7
   3372            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   00001C                ; Setup parameters for call to function sAddrExtCpy
   \   00001C   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   00001F   35..         ADDC    A,?V1
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3373            msg += Z_EXTADDR_LEN;
   3374            pAnnce->capabilities = *msg;
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   F0           MOVX    @DPTR,A
   3375          }
   \   000034   02....       LJMP    ??Subroutine204_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   85..82       MOV     DPL,?V0
   \   000009   85..83       MOV     DPH,?V1
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   22           RET
   3376          
   3377          /*********************************************************************
   3378           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3379           *
   3380           * @brief       This function handles parsing of the incoming Management
   3381           *              Network Update notify.
   3382           *
   3383           * @param       inMsg - incoming message (request)
   3384           *
   3385           * @return      a pointer to parsed response structure (NULL if not allocated).
   3386           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3387           *          by the calling function [osal_mem_free()].
   3388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3389          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3390          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   3391            uint8 status;
   3392            uint32 scannedChannels = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   \   000008   75..00       MOV     ?V5,#0x0
   \   00000B   75..00       MOV     ?V6,#0x0
   \   00000E   75..00       MOV     ?V7,#0x0
   3393            uint16 totalTransmissions = 0;
   \   000011   75..00       MOV     ?V0,#0x0
   \   000014   75..00       MOV     ?V1,#0x0
   3394            uint16 transmissionFailures = 0;
   \   000017   75..00       MOV     ?V2,#0x0
   \   00001A   75..00       MOV     ?V3,#0x0
   3395            uint8 listCount = 0;
   \   00001D   75..00       MOV     ?V11,#0x0
   3396            uint8 *msg = inMsg->asdu;
   \   000020   12....       LCALL   ?Subroutine56 & 0xFFFF
   3397            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3398          
   3399            status = *msg++;
   \                     ??CrossCallReturnLabel_613:
   \   000023   F5..         MOV     ?V10,A
   \   000025   A3           INC     DPTR
   \   000026   AE82         MOV     R6,DPL
   \   000028   AF83         MOV     R7,DPH
   3400            if ( status == ZSuccess )
   \   00002A   7041         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
   3401            {
   3402              scannedChannels = osal_build_uint32( msg, 4 );
   \   00002C                ; Setup parameters for call to function osal_build_uint32
   \   00002C   7904         MOV     R1,#0x4
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000035   8A..         MOV     ?V4,R2
   \   000037   8B..         MOV     ?V5,R3
   \   000039   8C..         MOV     ?V6,R4
   \   00003B   8D..         MOV     ?V7,R5
   3403              msg += 4;
   \   00003D   EE           MOV     A,R6
   \   00003E   2404         ADD     A,#0x4
   \   000040   FE           MOV     R6,A
   \   000041   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000043   0F           INC     R7
   3404              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   000044   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_666:
   \   000047   F5..         MOV     ?V0,A
   \   000049   E4           CLR     A
   \   00004A   39           ADDC    A,R1
   \   00004B   F5..         MOV     ?V1,A
   3405              msg += 2;
   \   00004D   EE           MOV     A,R6
   \   00004E   2402         ADD     A,#0x2
   \   000050   FE           MOV     R6,A
   \   000051   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_2
   \   000053   0F           INC     R7
   3406              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   000054   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_667:
   \   000057   F5..         MOV     ?V2,A
   \   000059   E4           CLR     A
   \   00005A   39           ADDC    A,R1
   \   00005B   F5..         MOV     ?V3,A
   3407              msg += 2;
   3408              listCount = *msg++;
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F5..         MOV     ?V11,A
   \   000066   EE           MOV     A,R6
   \   000067   2403         ADD     A,#0x3
   \   000069   FE           MOV     R6,A
   \   00006A   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_0
   \   00006C   0F           INC     R7
   3409            }
   3410          
   3411            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   00006D                ; Setup parameters for call to function osal_mem_alloc
   \   00006D   E5..         MOV     A,?V11
   \   00006F   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   000072   3400         ADDC    A,#0x0
   \   000074   FB           MOV     R3,A
   \   000075   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000078   8A..         MOV     ?V8,R2
   \   00007A   8B..         MOV     ?V9,R3
   3412          
   3413            if ( pRsp )
   \   00007C   EA           MOV     A,R2
   \   00007D   45..         ORL     A,?V9
   \   00007F   604D         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_3
   3414            {
   3415              pRsp->status = status;
   \   000081   8A82         MOV     DPL,R2
   \   000083   8B83         MOV     DPH,R3
   \   000085   E5..         MOV     A,?V10
   \   000087   F0           MOVX    @DPTR,A
   3416              pRsp->scannedChannels = scannedChannels;
   \   000088   A3           INC     DPTR
   \   000089   78..         MOV     R0,#?V4
   \   00008B   12....       LCALL   ?L_MOV_TO_X
   3417              pRsp->totalTransmissions = totalTransmissions;
   \   00008E   8A82         MOV     DPL,R2
   \   000090   8B83         MOV     DPH,R3
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   E5..         MOV     A,?V0
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   E5..         MOV     A,?V1
   \   00009D   12....       LCALL   ?Subroutine16 & 0xFFFF
   3418              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_11:
   \   0000A0   E5..         MOV     A,?V2
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E5..         MOV     A,?V3
   \   0000A6   12....       LCALL   ?Subroutine16 & 0xFFFF
   3419              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_12:
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   E5..         MOV     A,?V11
   \   0000AD   F0           MOVX    @DPTR,A
   3420          
   3421              // Allocate a buffer big enough to handle the list.
   3422              if ( listCount > 0 )
   \   0000AE   601E         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_3
   3423              {
   3424                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   0000B0                ; Setup parameters for call to function osal_memcpy
   \   0000B0   8E..         MOV     ?V0,R6
   \   0000B2   8F..         MOV     ?V1,R7
   \   0000B4   75..00       MOV     ?V2,#0x0
   \   0000B7   78..         MOV     R0,#?V0
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BC   AC..         MOV     R4,?V11
   \   0000BE   7D00         MOV     R5,#0x0
   \   0000C0   12....       LCALL   ?Subroutine181 & 0xFFFF
   3425              }
   3426            }
   \                     ??CrossCallReturnLabel_599:
   \   0000C3   35..         ADDC    A,?V9
   \   0000C5   FB           MOV     R3,A
   \   0000C6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C9   7403         MOV     A,#0x3
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   3427          
   3428            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_3:
   \   0000CE   AA..         MOV     R2,?V8
   \   0000D0   AB..         MOV     R3,?V9
   \   0000D2   02....       LJMP    ?Subroutine7 & 0xFFFF
   3429          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine262_0
   \   000004                ; // Fall through to label ??Subroutine262_0
   3430          
   3431          /*********************************************************************
   3432           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3433           *
   3434           * @brief       This function handles parsing the incoming Management
   3435           *              Network Update request and starts the request (if needed).
   3436           *
   3437           * @param       inMsg - incoming message (request)
   3438           * @param       pReq - pointer to place to parse message to
   3439           *
   3440           * @return      none
   3441           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3442          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3443          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3444            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00000C   12....       LCALL   ?Subroutine89 & 0xFFFF
   3445          
   3446            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_146:
   \   00000F   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000012   EA           MOV     A,R2
   \   000013   F8           MOV     R0,A
   \   000014   EB           MOV     A,R3
   \   000015   F9           MOV     R1,A
   \   000016   EC           MOV     A,R4
   \   000017   FA           MOV     R2,A
   \   000018   ED           MOV     A,R5
   \   000019   FB           MOV     R3,A
   \   00001A   85..82       MOV     DPL,?V0
   \   00001D   85..83       MOV     DPH,?V1
   \   000020   12....       LCALL   ?XSTORE_R0123
   3447            msg += 4;
   3448            pReq->scanDuration = *msg++;
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   85..82       MOV     DPL,?V0
   \   000030   85..83       MOV     DPH,?V1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   F0           MOVX    @DPTR,A
   3449          
   3450            if ( pReq->scanDuration <= 0x05 )
   \   000038   C3           CLR     C
   \   000039   9406         SUBB    A,#0x6
   \   00003B   5009         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   3451            {
   3452              // Request is to scan over channelMask
   3453              pReq->scanCount = *msg;
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   12....       LCALL   ?Subroutine169 & 0xFFFF
   3454            }
   \                     ??CrossCallReturnLabel_275:
   \   000044   8040         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   3455            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000046   85..82       MOV     DPL,?V0
   \   000049   85..83       MOV     DPH,?V1
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   64FE         XRL     A,#0xfe
   \   000053   600E         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   000055   85..82       MOV     DPL,?V0
   \   000058   85..83       MOV     DPH,?V1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F4           CPL     A
   \   000061   7024         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3456            {
   3457              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3458              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   EE           MOV     A,R6
   \   00006C   2406         ADD     A,#0x6
   \   00006E   FE           MOV     R6,A
   \   00006F   5001         JNC     ??ZDO_ParseMgmtNwkUpdateReq_4
   \   000071   0F           INC     R7
   3459          
   3460              if ( pReq->scanDuration == 0xFF )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F4           CPL     A
   \   00007E   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3461              {
   3462                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000080   12....       LCALL   ?Subroutine67 & 0xFFFF
   3463              }
   3464            }
   \                     ??CrossCallReturnLabel_107:
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000086   F0           MOVX    @DPTR,A
   3465          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000087   02....       LJMP    ??Subroutine204_0 & 0xFFFF
   3466          
   3467          /*********************************************************************
   3468           * @fn          ZDO_ParseEndDeviceTimeoutRsp
   3469           *
   3470           * @brief       Parse the End_Device_Timeout_rsp message.
   3471           *
   3472           * @param       inMsg - incoming message.
   3473           * @param       pRsp - place to put the parsed information.
   3474           *
   3475           * @return      none
   3476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3477          void ZDO_ParseEndDeviceTimeoutRsp( zdoIncomingMsg_t *inMsg, uint16 *pRsp )
   \                     ZDO_ParseEndDeviceTimeoutRsp:
   3478          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3479            *pRsp = inMsg->asdu[0];
   \   000004   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000007   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   3480          }
   \   000012   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdpExternalStateTaskID>`:
   \   000000   FFFF         DW -1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdoSendStateChangeMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdoSendStateChangeMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CompareClusterLists::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessEndDeviceTimeoutReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessEndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_MatchEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveMatchMemory::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CopyMatchInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDMatchSendState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceBindMatchTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceTimeoutRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceTimeoutRsp

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StartDevice ERR">`:
   \   000000   53746172     DB "StartDevice ERR"
   \            74446576
   \            69636520
   \            45525200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MODE unknown">`:
   \   000000   4D4F4445     DB "MODE unknown"
   \            20756E6B
   \            6E6F776E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Bind">`:
   \   000000   456E6420     DB "End Device Bind"
   \            44657669
   \            63652042
   \            696E6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Success Sent">`:
   \   000000   53756363     DB "Success Sent"
   \            65737320
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Timeout">`:
   \   000000   54696D65     DB "Timeout"
   \            6F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match Desc Req">`:
   \   000000   4D617463     DB "Match Desc Req"
   \            68204465
   \            73632052
   \            657100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Sent">`:
   \   000000   52737020     DB "Rsp Sent"
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Non Matched">`:
   \   000000   52737020     DB "Rsp Non Matched"
   \            4E6F6E20
   \            4D617463
   \            68656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Non Matched">`:
   \   000000   4E6F6E20     DB "Non Matched"
   \            4D617463
   \            68656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   3481          
   3482          /*********************************************************************
   3483          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      1     70   ZDMatchSendState
        0     37   -> APS_SetEndDeviceBindTimeout
        0     37   -> ZDO_RemoveMatchMemory
        0     45   -> ZDP_BindUnbindReq
        0     42   -> ZDP_SendData
        0     37   -> sAddrExtCpy
      0     43   ZDO_AnyClusterMatches
      1     10   ZDO_BuildSimpleDescBuf
      0     45   ZDO_CompareClusterLists
      0     39   ZDO_ConvertOTAClusters
      0     43   ZDO_CopyMatchInfo
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      2      0   ZDO_EndDeviceBindMatchTimeoutCB
        2      0   -> ZDMatchSendState
      1     17   ZDO_EndDeviceTimeoutCB
        0     12   -> HalLcdWriteString
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_CoordinatorInit
        2      0   -> sAddrExtCpy
      1     30   ZDO_MatchEndDeviceBind
        0     25   -> APS_SetEndDeviceBindTimeout
        0     25   -> ZDMatchSendState
        0     29   -> ZDO_CompareClusterLists
        0     25   -> ZDO_CopyMatchInfo
        0     25   -> ZDO_RemoveMatchMemory
        0     30   -> ZDP_SendData
        0     25   -> osal_mem_alloc
        0     28   -> osal_memcpy
        0     25   -> osal_memset
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     52   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     18   ZDO_ParseEPListRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      1     12   ZDO_ParseEndDeviceBindReq
        0     12   -> ZDO_ConvertOTAClusters
        0     12   -> osal_mem_alloc
        0     12   -> sAddrExtCpy
      2      0   ZDO_ParseEndDeviceTimeoutRsp
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     18   ZDO_ParseMgmtBindRsp
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     25   ZDO_ParseMgmtNwkUpdateNotify
        0     22   -> osal_build_uint32
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      2     12   ZDO_ParseNodeDescRsp
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     23   ZDO_ParseSimpleDescBuf
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     18   ZDO_ParseUserDescRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      1     32   ZDO_ProcessBindUnbindReq
        0     28   -> APSME_BindRequest
        0     27   -> APSME_LookupNwkAddr
        0     28   -> APSME_UnBindRequest
        0     27   -> NLME_GetExtAddr
        0     27   -> ZDApp_GetEmptyPendingBindReq
        0     27   -> ZDApp_NVUpdate
        0     27   -> ZDP_NwkAddrReq
        0     32   -> ZDP_SendData
        0     27   -> bindAddrIndexGet
        0     30   -> osal_memcpy
        0     31   -> osal_start_timerEx
        0     27   -> sAddrExtCmp
        0     27   -> sAddrExtCpy
      0     42   ZDO_ProcessDeviceAnnce
        0     42   -> AddrMgrEntryLookupExt
        0     42   -> AddrMgrEntryLookupNwk
        0     42   -> AddrMgrEntryUpdate
        0     42   -> AddrMgrExtAddrSet
        0     42   -> AssocChangeNwkAddr
        0     42   -> AssocGetWithExt
        0     42   -> AssocRemove
        0     42   -> NLME_CheckNewAddrSet
        0     42   -> NLME_GetCoordExtAddr
        0     42   -> NLME_GetCoordShortAddr
        0     42   -> NLME_GetShortAddr
        0     42   -> RTG_RemoveRtgEntry
        0     42   -> ZDApp_NVUpdate
        0     42   -> ZDO_ParseDeviceAnnce
        0     42   -> ZMacSetReq
        0     42   -> nwkNeighborRemoveAllStranded
        0     42   -> nwkNeighborUpdateNwkAddr
        0     42   -> osal_memset
        0     42   -> sAddrExtCmp
      0     18   ZDO_ProcessEndDeviceTimeoutReq
        0     13   -> AssocGetWithExt
        0     13   -> ZDApp_NVUpdate
        0     18   -> ZDP_SendData
      1     36   ZDO_ProcessMatchDescReq
        0     29   -> HalLcdWriteScreen
        0     29   -> NLME_IsAddressBroadcast
        0     31   -> ZDO_AnyClusterMatches
        0     29   -> ZDO_ConvertOTAClusters
        0     36   -> ZDP_EPRsp
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     32   -> osal_memcpy
        0     29   -> osal_msg_allocate
        0     29   -> osal_msg_send
      0     25   ZDO_ProcessMgmtBindReq
        0     20   -> APSME_GetRequest
        0     25   -> ZDP_MgmtBindRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      1     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     23   -> ZDP_SendData
        0     18   -> sAddrExtCmp
      1     64   ZDO_ProcessMgmtLqiReq
        0     59   -> AddrMgrEntryLookupNwk
        0     59   -> AssocCount
        0     59   -> AssocFindDevice
        0     59   -> NLME_GetRequest
        0     64   -> ZDP_MgmtLqiRsp
        0     59   -> osal_mem_alloc
        0     59   -> osal_mem_free
        0     59   -> osal_memset
        0     59   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
        0     11   -> ZDSecMgrPermitJoining
      0     22   ZDO_ProcessMgmtRtgReq
        0     17   -> NLME_GetRequest
        0     22   -> ZDP_MgmtRtgRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0     33   ZDO_ProcessUserDescReq
        0     33   -> ZDP_GenericRsp
        0     32   -> ZDP_UserDescRsp
        0     33   -> osal_nv_read
      1     41   ZDO_ProcessUserDescSet
        0     41   -> ZDP_SendData
        0     39   -> osal_memcpy
        0     40   -> osal_nv_write
      2     37   ZDO_RemoveMatchMemory
        2      0   -> osal_mem_free
      0     18   ZDO_StartDevice
        0     11   -> HalLcdWriteScreen
        0     18   -> NLME_NetworkFormationRequest
        0     11   -> NLME_StartRouterRequest
        0     15   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      0      9   ZDO_UpdateNwkStatus
        0      9   -> NLME_GetExtAddr
        0      9   -> NLME_GetShortAddr
        0      9   -> zdoSendStateChangeMsg
      1     19   zdoSendStateChangeMsg
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_find
        0     10   -> osal_msg_send
        0     10   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "End Device Bind">
      13  ?<Constant "MODE unknown">
      15  ?<Constant "Match Desc Req">
      12  ?<Constant "Non Matched">
      16  ?<Constant "Rsp Non Matched">
       9  ?<Constant "Rsp Sent">
      16  ?<Constant "StartDevice ERR">
      13  ?<Constant "Success Sent">
       8  ?<Constant "Timeout">
       2  ?<Initializer for zdpExternalStateTaskID>
       7  ??Subroutine200_0
       5  ??Subroutine201_0
       5  ??Subroutine202_0
       3  ??Subroutine203_0
       5  ??Subroutine204_0
       5  ??Subroutine205_0
       6  ??Subroutine206_0
       5  ??Subroutine207_0
       2  ??Subroutine208_0
       6  ??Subroutine209_0
       4  ??Subroutine210_0
       7  ??Subroutine211_0
       2  ??Subroutine212_0
       9  ??Subroutine213_0
       1  ??Subroutine214_0
       4  ??Subroutine215_0
       5  ??Subroutine216_0
       6  ??Subroutine217_0
       5  ??Subroutine218_0
       1  ??Subroutine219_0
       5  ??Subroutine220_0
       8  ??Subroutine221_0
      10  ??Subroutine222_0
       2  ??Subroutine223_0
       5  ??Subroutine224_0
       6  ??Subroutine225_0
       6  ??Subroutine226_0
       6  ??Subroutine227_0
       5  ??Subroutine228_0
       8  ??Subroutine229_0
       2  ??Subroutine230_0
       5  ??Subroutine231_0
       6  ??Subroutine232_0
       4  ??Subroutine233_0
       6  ??Subroutine234_0
       6  ??Subroutine235_0
       2  ??Subroutine236_0
       4  ??Subroutine237_0
       4  ??Subroutine238_0
       8  ??Subroutine239_0
       8  ??Subroutine240_0
       8  ??Subroutine241_0
       4  ??Subroutine242_0
       5  ??Subroutine243_0
       3  ??Subroutine244_0
       5  ??Subroutine245_0
       4  ??Subroutine246_0
       6  ??Subroutine247_0
       5  ??Subroutine248_0
       5  ??Subroutine249_0
       5  ??Subroutine250_0
       4  ??Subroutine251_0
       5  ??Subroutine252_0
      13  ??Subroutine253_0
       5  ??Subroutine254_0
       6  ??Subroutine255_0
       1  ??Subroutine256_0
       4  ??Subroutine257_0
       7  ??Subroutine258_0
       6  ??Subroutine259_0
      10  ??Subroutine260_0
       9  ??Subroutine261_0
       4  ??Subroutine262_0
       7  ?Subroutine0
       2  ?Subroutine1
       5  ?Subroutine10
       4  ?Subroutine100
       7  ?Subroutine101
       7  ?Subroutine102
       5  ?Subroutine103
       9  ?Subroutine104
      12  ?Subroutine105
       2  ?Subroutine106
      13  ?Subroutine107
       7  ?Subroutine108
       1  ?Subroutine109
      39  ?Subroutine11
       2  ?Subroutine110
       4  ?Subroutine111
      11  ?Subroutine112
      16  ?Subroutine113
      13  ?Subroutine114
      14  ?Subroutine115
       2  ?Subroutine116
       4  ?Subroutine117
       6  ?Subroutine118
       7  ?Subroutine119
      26  ?Subroutine12
       4  ?Subroutine120
       4  ?Subroutine121
       4  ?Subroutine122
       4  ?Subroutine123
       2  ?Subroutine124
       1  ?Subroutine125
      11  ?Subroutine126
      10  ?Subroutine127
       3  ?Subroutine128
       3  ?Subroutine129
      20  ?Subroutine13
       9  ?Subroutine130
      21  ?Subroutine131
       6  ?Subroutine132
       5  ?Subroutine133
       5  ?Subroutine134
       1  ?Subroutine135
       4  ?Subroutine136
       1  ?Subroutine137
       6  ?Subroutine138
       1  ?Subroutine139
      16  ?Subroutine14
       8  ?Subroutine140
       4  ?Subroutine141
       8  ?Subroutine142
       4  ?Subroutine143
      10  ?Subroutine144
       9  ?Subroutine145
       4  ?Subroutine146
       9  ?Subroutine147
      11  ?Subroutine148
       1  ?Subroutine149
      17  ?Subroutine15
       9  ?Subroutine150
      10  ?Subroutine151
      13  ?Subroutine152
       8  ?Subroutine153
       6  ?Subroutine154
       6  ?Subroutine155
       7  ?Subroutine156
       1  ?Subroutine157
       9  ?Subroutine158
       4  ?Subroutine159
       8  ?Subroutine16
       4  ?Subroutine160
      15  ?Subroutine161
       4  ?Subroutine162
      16  ?Subroutine163
      13  ?Subroutine164
       8  ?Subroutine165
       7  ?Subroutine166
       3  ?Subroutine167
       6  ?Subroutine168
      18  ?Subroutine169
      13  ?Subroutine17
       3  ?Subroutine170
       6  ?Subroutine171
       7  ?Subroutine172
       5  ?Subroutine173
       1  ?Subroutine174
      19  ?Subroutine175
      11  ?Subroutine176
       5  ?Subroutine177
       4  ?Subroutine178
       7  ?Subroutine179
      15  ?Subroutine18
       5  ?Subroutine180
       1  ?Subroutine181
       9  ?Subroutine182
       3  ?Subroutine183
       9  ?Subroutine184
      10  ?Subroutine185
       9  ?Subroutine186
       5  ?Subroutine187
       9  ?Subroutine188
       6  ?Subroutine189
      19  ?Subroutine19
       9  ?Subroutine190
       7  ?Subroutine191
      10  ?Subroutine192
       6  ?Subroutine193
       5  ?Subroutine194
      10  ?Subroutine195
       1  ?Subroutine196
       9  ?Subroutine197
       9  ?Subroutine198
       7  ?Subroutine199
       5  ?Subroutine2
      22  ?Subroutine20
       3  ?Subroutine21
       5  ?Subroutine22
       6  ?Subroutine23
      20  ?Subroutine24
       8  ?Subroutine25
      18  ?Subroutine26
       9  ?Subroutine27
       4  ?Subroutine28
       9  ?Subroutine29
       4  ?Subroutine3
       8  ?Subroutine30
      12  ?Subroutine31
       6  ?Subroutine32
       5  ?Subroutine33
       5  ?Subroutine34
       4  ?Subroutine35
       5  ?Subroutine36
       7  ?Subroutine37
       5  ?Subroutine38
       7  ?Subroutine39
       3  ?Subroutine4
       6  ?Subroutine40
       6  ?Subroutine41
       4  ?Subroutine42
      13  ?Subroutine43
       8  ?Subroutine44
       8  ?Subroutine45
       6  ?Subroutine46
       7  ?Subroutine47
       8  ?Subroutine48
       1  ?Subroutine49
       5  ?Subroutine5
       8  ?Subroutine50
       6  ?Subroutine51
       8  ?Subroutine52
       6  ?Subroutine53
       4  ?Subroutine54
       4  ?Subroutine55
       3  ?Subroutine56
       6  ?Subroutine57
       9  ?Subroutine58
      17  ?Subroutine59
       4  ?Subroutine6
      35  ?Subroutine60
       6  ?Subroutine61
      30  ?Subroutine62
       4  ?Subroutine63
      14  ?Subroutine64
      38  ?Subroutine65
      17  ?Subroutine66
      21  ?Subroutine67
       4  ?Subroutine68
       7  ?Subroutine69
       5  ?Subroutine7
       9  ?Subroutine70
       9  ?Subroutine71
       9  ?Subroutine72
       9  ?Subroutine73
       4  ?Subroutine74
      13  ?Subroutine75
      14  ?Subroutine76
       7  ?Subroutine77
      10  ?Subroutine78
      10  ?Subroutine79
       3  ?Subroutine8
       6  ?Subroutine80
      23  ?Subroutine81
       2  ?Subroutine82
      12  ?Subroutine83
      12  ?Subroutine84
      12  ?Subroutine85
       5  ?Subroutine86
      13  ?Subroutine87
      17  ?Subroutine88
      14  ?Subroutine89
       5  ?Subroutine9
       3  ?Subroutine90
       3  ?Subroutine91
       3  ?Subroutine92
       1  ?Subroutine93
       8  ?Subroutine94
       4  ?Subroutine95
      11  ?Subroutine96
      16  ?Subroutine97
      27  ?Subroutine98
       8  ?Subroutine99
       3  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
     611  ZDMatchSendState
       6  ZDMatchSendState::?relay
      52  ZDOBuildBuf
      75  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     196  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
     109  ZDO_CompareClusterLists
       6  ZDO_CompareClusterLists::?relay
      63  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
     230  ZDO_CopyMatchInfo
       6  ZDO_CopyMatchInfo::?relay
       2  ZDO_EDBind
      16  ZDO_EndDeviceBindMatchTimeoutCB
       6  ZDO_EndDeviceBindMatchTimeoutCB::?relay
     238  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
      31  ZDO_Init
       6  ZDO_Init::?relay
     582  ZDO_MatchEndDeviceBind
       6  ZDO_MatchEndDeviceBind::?relay
     223  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
     130  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
      55  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
     112  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     294  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
      21  ZDO_ParseEndDeviceTimeoutRsp
       6  ZDO_ParseEndDeviceTimeoutRsp::?relay
     266  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     253  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     275  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     213  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     138  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     171  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     268  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     194  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
      50  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     287  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
      30  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
     118  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     120  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     455  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     480  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
     242  ZDO_ProcessEndDeviceTimeoutReq
       6  ZDO_ProcessEndDeviceTimeoutReq::?relay
    1061  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     264  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
      87  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     171  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
     630  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     126  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
      98  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     304  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
      71  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
      71  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
      63  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     146  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
     157  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     293  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     129  ZDO_RemoveMatchMemory
       6  ZDO_RemoveMatchMemory::?relay
     191  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      49  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
      89  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  __Constant_3e8
       4  apsChannelMask
       2  matchED
      73  zdoSendStateChangeMsg
       6  zdoSendStateChangeMsg::?relay
       2  zdpExternalStateTaskID

 
 12 645 bytes in segment BANKED_CODE
    312 bytes in segment BANK_RELAYS
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
    122 bytes in segment XDATA_ROM_C
     60 bytes in segment XDATA_Z
 
 12 959 bytes of CODE  memory
    118 bytes of CONST memory (+ 4 bytes shared)
     62 bytes of XDATA memory

Errors: none
Warnings: none
