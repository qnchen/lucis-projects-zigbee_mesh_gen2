///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               21/Apr/2017  15:51:46
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Application\ProtocolHandler.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0001
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Application\ProtocolHandler.c" -D ZTOOL_P1 -D
//        MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D
//        NV_RESTORE -D NV_INIT -D NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D
//        OPEN_FCS -D MAKE_CRC_SHDW -lC "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\List"
//        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\List\ProtocolHandler.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ProtocolHandler

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V3
        EXTERN ?ADD_XSTACK_DISP0_16
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_16
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??CustomApp_AF_Broadcast_Data_Process::?relay`
        FUNCTION `??CustomApp_AF_Broadcast_Data_Process::?relay`,0203H
        PUBLIC `??CustomApp_AF_Group_Data_Process::?relay`
        FUNCTION `??CustomApp_AF_Group_Data_Process::?relay`,0203H
        PUBLIC `??CustomApp_AF_P2P_Data_Process::?relay`
        FUNCTION `??CustomApp_AF_P2P_Data_Process::?relay`,0203H
        PUBLIC `??CustomApp_Coordinator_Online::?relay`
        FUNCTION `??CustomApp_Coordinator_Online::?relay`,0203H
        PUBLIC `??CustomApp_FW_Update::?relay`
        FUNCTION `??CustomApp_FW_Update::?relay`,0203H
        PUBLIC `??CustomApp_Get_Active_Cnt::?relay`
        FUNCTION `??CustomApp_Get_Active_Cnt::?relay`,0203H
        PUBLIC `??CustomApp_Get_ExtAddr::?relay`
        FUNCTION `??CustomApp_Get_ExtAddr::?relay`,0203H
        PUBLIC `??CustomApp_Get_Flex_Devinfo::?relay`
        FUNCTION `??CustomApp_Get_Flex_Devinfo::?relay`,0203H
        PUBLIC `??CustomApp_Get_NWKInfo::?relay`
        FUNCTION `??CustomApp_Get_NWKInfo::?relay`,0203H
        PUBLIC `??CustomApp_Get_Version::?relay`
        FUNCTION `??CustomApp_Get_Version::?relay`,0203H
        PUBLIC `??CustomApp_Send_BroadCast_Data::?relay`
        FUNCTION `??CustomApp_Send_BroadCast_Data::?relay`,0203H
        PUBLIC `??CustomApp_Send_Group_Data::?relay`
        FUNCTION `??CustomApp_Send_Group_Data::?relay`,0203H
        PUBLIC `??CustomApp_Send_P2P_Data::?relay`
        FUNCTION `??CustomApp_Send_P2P_Data::?relay`,0203H
        PUBLIC `??CustomApp_Set_Multiway::?relay`
        FUNCTION `??CustomApp_Set_Multiway::?relay`,0203H
        FUNCTION `??CustomApp_Uart_Send::?relay`,0203H
        PUBLIC `??CustomApp_coordinator_online_req::?relay`
        FUNCTION `??CustomApp_coordinator_online_req::?relay`,0203H
        PUBLIC `??CustomApp_router_offline_req::?relay`
        FUNCTION `??CustomApp_router_offline_req::?relay`,0203H
        PUBLIC `??CustomApp_router_online_req::?relay`
        FUNCTION `??CustomApp_router_online_req::?relay`,0203H
        PUBLIC `??Nvram_Write_Multiway::?relay`
        FUNCTION `??Nvram_Write_Multiway::?relay`,0203H
        PUBLIC `??Register_Group_Multiway::?relay`
        FUNCTION `??Register_Group_Multiway::?relay`,0203H
        PUBLIC CustomApp_AF_Broadcast_Data_Process
        FUNCTION CustomApp_AF_Broadcast_Data_Process,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC CustomApp_AF_Group_Data_Process
        FUNCTION CustomApp_AF_Group_Data_Process,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC CustomApp_AF_P2P_Data_Process
        FUNCTION CustomApp_AF_P2P_Data_Process,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC CustomApp_Coordinator_Online
        FUNCTION CustomApp_Coordinator_Online,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC CustomApp_FW_Update
        FUNCTION CustomApp_FW_Update,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC CustomApp_Get_Active_Cnt
        FUNCTION CustomApp_Get_Active_Cnt,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC CustomApp_Get_ExtAddr
        FUNCTION CustomApp_Get_ExtAddr,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC CustomApp_Get_Flex_Devinfo
        FUNCTION CustomApp_Get_Flex_Devinfo,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC CustomApp_Get_NWKInfo
        FUNCTION CustomApp_Get_NWKInfo,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC CustomApp_Get_Version
        FUNCTION CustomApp_Get_Version,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC CustomApp_Send_BroadCast_Data
        FUNCTION CustomApp_Send_BroadCast_Data,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC CustomApp_Send_Group_Data
        FUNCTION CustomApp_Send_Group_Data,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 47, STACK
        PUBLIC CustomApp_Send_P2P_Data
        FUNCTION CustomApp_Send_P2P_Data,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC CustomApp_Set_Multiway
        FUNCTION CustomApp_Set_Multiway,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        FUNCTION CustomApp_Uart_Send,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 272, STACK
        PUBLIC CustomApp_coordinator_online_req
        FUNCTION CustomApp_coordinator_online_req,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 48, STACK
        PUBLIC CustomApp_router_offline_req
        FUNCTION CustomApp_router_offline_req,0a1203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC CustomApp_router_online_req
        FUNCTION CustomApp_router_online_req,0a1203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC GenericApp_Group
        PUBLIC Nvram_Write_Multiway
        FUNCTION Nvram_Write_Multiway,0a1203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC Prot_Group_T
        PUBLIC Register_Group_Multiway
        FUNCTION Register_Group_Multiway,0a1203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBWEAK __Constant_1f4
        PUBLIC uart_buf
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
CustomApp_get_connected_node_count SYMBOL "CustomApp_get_connected_node_count"
`??CustomApp_get_connected_node_count::?relay` SYMBOL "?relay", CustomApp_get_connected_node_count
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
MT_UartCalcFCS      SYMBOL "MT_UartCalcFCS"
`??MT_UartCalcFCS::?relay` SYMBOL "?relay", MT_UartCalcFCS
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
aps_AddGroup        SYMBOL "aps_AddGroup"
`??aps_AddGroup::?relay` SYMBOL "?relay", aps_AddGroup
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
`??aps_RemoveGroup::?relay` SYMBOL "?relay", aps_RemoveGroup
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
CustomApp_AF_Broadcast_Data_Process SYMBOL "CustomApp_AF_Broadcast_Data_Process"
`??CustomApp_AF_Broadcast_Data_Process::?relay` SYMBOL "?relay", CustomApp_AF_Broadcast_Data_Process
CustomApp_AF_Group_Data_Process SYMBOL "CustomApp_AF_Group_Data_Process"
`??CustomApp_AF_Group_Data_Process::?relay` SYMBOL "?relay", CustomApp_AF_Group_Data_Process
CustomApp_AF_P2P_Data_Process SYMBOL "CustomApp_AF_P2P_Data_Process"
`??CustomApp_AF_P2P_Data_Process::?relay` SYMBOL "?relay", CustomApp_AF_P2P_Data_Process
CustomApp_Coordinator_Online SYMBOL "CustomApp_Coordinator_Online"
`??CustomApp_Coordinator_Online::?relay` SYMBOL "?relay", CustomApp_Coordinator_Online
CustomApp_FW_Update SYMBOL "CustomApp_FW_Update"
`??CustomApp_FW_Update::?relay` SYMBOL "?relay", CustomApp_FW_Update
CustomApp_Get_Active_Cnt SYMBOL "CustomApp_Get_Active_Cnt"
`??CustomApp_Get_Active_Cnt::?relay` SYMBOL "?relay", CustomApp_Get_Active_Cnt
CustomApp_Get_ExtAddr SYMBOL "CustomApp_Get_ExtAddr"
`??CustomApp_Get_ExtAddr::?relay` SYMBOL "?relay", CustomApp_Get_ExtAddr
CustomApp_Get_Flex_Devinfo SYMBOL "CustomApp_Get_Flex_Devinfo"
`??CustomApp_Get_Flex_Devinfo::?relay` SYMBOL "?relay", CustomApp_Get_Flex_Devinfo
CustomApp_Get_NWKInfo SYMBOL "CustomApp_Get_NWKInfo"
`??CustomApp_Get_NWKInfo::?relay` SYMBOL "?relay", CustomApp_Get_NWKInfo
CustomApp_Get_Version SYMBOL "CustomApp_Get_Version"
`??CustomApp_Get_Version::?relay` SYMBOL "?relay", CustomApp_Get_Version
CustomApp_Send_BroadCast_Data SYMBOL "CustomApp_Send_BroadCast_Data"
`??CustomApp_Send_BroadCast_Data::?relay` SYMBOL "?relay", CustomApp_Send_BroadCast_Data
CustomApp_Send_Group_Data SYMBOL "CustomApp_Send_Group_Data"
`??CustomApp_Send_Group_Data::?relay` SYMBOL "?relay", CustomApp_Send_Group_Data
CustomApp_Send_P2P_Data SYMBOL "CustomApp_Send_P2P_Data"
`??CustomApp_Send_P2P_Data::?relay` SYMBOL "?relay", CustomApp_Send_P2P_Data
CustomApp_Set_Multiway SYMBOL "CustomApp_Set_Multiway"
`??CustomApp_Set_Multiway::?relay` SYMBOL "?relay", CustomApp_Set_Multiway
CustomApp_coordinator_online_req SYMBOL "CustomApp_coordinator_online_req"
`??CustomApp_coordinator_online_req::?relay` SYMBOL "?relay", CustomApp_coordinator_online_req
CustomApp_router_offline_req SYMBOL "CustomApp_router_offline_req"
`??CustomApp_router_offline_req::?relay` SYMBOL "?relay", CustomApp_router_offline_req
CustomApp_router_online_req SYMBOL "CustomApp_router_online_req"
`??CustomApp_router_online_req::?relay` SYMBOL "?relay", CustomApp_router_online_req
Nvram_Write_Multiway SYMBOL "Nvram_Write_Multiway"
`??Nvram_Write_Multiway::?relay` SYMBOL "?relay", Nvram_Write_Multiway
Register_Group_Multiway SYMBOL "Register_Group_Multiway"
`??Register_Group_Multiway::?relay` SYMBOL "?relay", Register_Group_Multiway

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??CustomApp_get_connected_node_count::?relay`
        FUNCTION `??CustomApp_get_connected_node_count::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??MT_UartCalcFCS::?relay`
        FUNCTION `??MT_UartCalcFCS::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??aps_AddGroup::?relay`
        FUNCTION `??aps_AddGroup::?relay`,00H
        EXTERN `??aps_RemoveGroup::?relay`
        FUNCTION `??aps_RemoveGroup::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN CustomApp_get_connected_node_count
        FUNCTION CustomApp_get_connected_node_count,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN GenericApp_TaskID
        EXTERN GenericApp_TransID
        EXTERN GenericApp_epDesc
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 269, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartCalcFCS
        FUNCTION MT_UartCalcFCS,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 269, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SerialApp_TxAddr_broadcast
        EXTERN SerialApp_TxAddr_group
        EXTERN SerialApp_TxAddr_p2p
        EXTERN _NIB
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN fw_version
        EXTERN macPhyChannel
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 272, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Projects\zstack\Application\ProtocolHandler.c
//    1 /**************************************************************************************************
//    2   Filename:       ProtocolHandler.c
//    3   Revised:        2017-03-19
//    4 
//    5   Description -   Serial Transfer Application node authentication related func.
//    6 
//    7 **************************************************************************************************/
//    8 
//    9 
//   10 /*********************************************************************
//   11  * INCLUDES
//   12  */
//   13 #include "MT_UART.h"
//   14 #include "MT_RPC.h"
//   15 #include "ZComDef.h"
//   16 #include "ZDApp.h"
//   17 #include "hal_uart.h"
//   18 #include "GenericApp.h"
//   19 #include "hal_aes.h"
//   20 #include "hal_ccm.h"
//   21 #include "osal_nv.h"
//   22 #include "mac_rx_onoff.h"
//   23 #include "mac_radio.h"
//   24 #include "mac_mcu.h"
//   25 #include "mac_low_level.h"
//   26 #include "string.h"
//   27 
//   28 #include "GenericApp.h"
//   29 #include "ProtocolHandler.h"
//   30 #include "Aps_groups.h"
//   31 
//   32 
//   33 /*********************************************************************
//   34  * LOCAL VARIABLES
//   35  */
//   36 #if defined( ZDO_COORDINATOR ) && defined( WIFI_FREQUENCY_SELECT )
//   37 // For zigbee channel select
//   38 bool __xdata getWifiChannel = FALSE;
//   39 bool __xdata zgChannelUpdate = FALSE;
//   40 // For wifi channel, every bit indicate one channel
//   41 uint16 __xdata wifiChannel = 0x0000;
//   42 
//   43 extern uint32 __xdata zgDefaultChannelMask;
//   44 #endif
//   45 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   46 PROT_GROUP_STRUCT Prot_Group_T;
Prot_Group_T:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   47 aps_Group_t GenericApp_Group;
GenericApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//   48 #define GENERICAPP_GROUP 0x0001
//   49 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   50 uint8 *uart_buf;
uart_buf:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   51 
//   52 /*********************************************************************
//   53  * LOCAL FUNCTIONS
//   54  */
//   55 static void CustomApp_Uart_Send( uint8 port, uint16 cmd, uint8 *pbuf, uint8 len, uint8 offset );
//   56 #if defined( ZDO_COORDINATOR ) && defined( WIFI_FREQUENCY_SELECT )
//   57 static void CustomApp_ZigbeeChannelMask( uint16 wifiChannel );
//   58 #endif
//   59 
//   60 
//   61 /*********************************************************************
//   62  * FUNCTIONS
//   63  */
//   64 
//   65 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   66 uint8 CustomApp_Send_P2P_Data( afIncomingMSGPacket_t *pkt )
CustomApp_Send_P2P_Data:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function CustomApp_Send_P2P_Data
        CODE
//   67 {
        FUNCALL CustomApp_Send_P2P_Data, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_P2P_Data, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_P2P_Data, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_P2P_Data, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        LCALL   ?Subroutine6 & 0xFFFF
//   68     uint8 *msg;	
//   69     uint8 ret = ZFailure;
//   70 	
//   71     msg = (uint8 *)osal_msg_allocate( pkt->cmd.DataLength);
??CrossCallReturnLabel_54:
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V8,R2
        MOV     ?V9,R3
//   72     if ( msg == NULL )
        MOV     A,R2
        ORL     A,?V9
        JNZ     ??CustomApp_Send_P2P_Data_0
//   73     {
//   74         return ret;
        MOV     R1,#0x1
        LJMP    ??CustomApp_Send_P2P_Data_1 & 0xFFFF
//   75     }
//   76 
//   77     osal_memcpy(msg, pkt->cmd.Data, pkt->cmd.DataLength);
??CustomApp_Send_P2P_Data_0:
        MOV     A,R6
        ADD     A,#0x22
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     A,R6
        ADD     A,#0x20
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//   78     SerialApp_TxAddr_p2p.addr.shortAddr = (pkt->cmd.Data[5 + MT_UART_HEAD_LEN] << 8) | pkt->cmd.Data[4 + MT_UART_HEAD_LEN];
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_21:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        XCH     A,R2
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        LCALL   ?Subroutine35 & 0xFFFF
//   79     if ( AF_DataRequest( &SerialApp_TxAddr_p2p, &GenericApp_epDesc,
//   80                          GENERICAPP_DATA_P2P_CLUSTERID,
//   81                          (byte) (pkt->cmd.DataLength) ,
//   82                          (byte *)(msg),
//   83                          &GenericApp_TransID,
//   84                          AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_73:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0,#0x1e
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0,#GenericApp_TransID & 0xff
        MOV     ?V1,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     ?V0,R0
        MOV     ?V1,R2
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0,#0x2
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R1,#0x0
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_TxAddr_p2p & 0xff
        MOV     R3,#(SerialApp_TxAddr_p2p >> 8) & 0xff
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
        JNZ     ??CustomApp_Send_P2P_Data_2
//   85     {
//   86         ret = ZSuccess;
        MOV     ?V2,#0x0
//   87     }
//   88     osal_msg_deallocate( msg );
??CustomApp_Send_P2P_Data_2:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//   89     return ret;	
        MOV     R1,?V2
??CustomApp_Send_P2P_Data_1:
        SJMP    ??Subroutine38_0
//   90 }
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function CustomApp_Send_P2P_Data
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function CustomApp_Send_BroadCast_Data
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V2,#0x1
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3
        ; Setup parameters for call to function osal_msg_allocate
        ; Setup parameters for call to function osal_msg_allocate
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function CustomApp_AF_Group_Data_Process
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function CustomApp_Send_P2P_Data
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function CustomApp_Send_BroadCast_Data
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 38)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock8
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//   91 
//   92 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   93 uint8 CustomApp_Send_BroadCast_Data( afIncomingMSGPacket_t *pkt )
CustomApp_Send_BroadCast_Data:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function CustomApp_Send_BroadCast_Data
        CODE
//   94 {
        FUNCALL CustomApp_Send_BroadCast_Data, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_BroadCast_Data, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_BroadCast_Data, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_BroadCast_Data, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        LCALL   ?Subroutine6 & 0xFFFF
//   95 	uint8 *msg;
//   96 	uint8 ret = ZFailure;
//   97 
//   98 	msg = (uint8 *)osal_msg_allocate( pkt->cmd.DataLength);
??CrossCallReturnLabel_55:
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V8,R2
        MOV     ?V9,R3
//   99 	if ( msg == NULL )
        MOV     A,R2
        ORL     A,?V9
        JNZ     ??CustomApp_Send_BroadCast_Data_0
//  100 	{
//  101 		return ret;
        MOV     R1,#0x1
        SJMP    ??CustomApp_Send_BroadCast_Data_1
//  102 	}
//  103 
//  104 	osal_memcpy(msg, pkt->cmd.Data, pkt->cmd.DataLength);
??CustomApp_Send_BroadCast_Data_0:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 21)
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  105 	SerialApp_TxAddr_broadcast.addr.shortAddr = 0xffff;
        MOV     DPTR,#SerialApp_TxAddr_broadcast
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine27 & 0xFFFF
//  106 
//  107 	if ( AF_DataRequest( &SerialApp_TxAddr_broadcast, &GenericApp_epDesc,
//  108 						 GENERICAPP_BROADCAST_CLUSTERID,
//  109 						 (byte) (pkt->cmd.DataLength) ,
//  110 						 (byte *)(msg),
//  111 						 &GenericApp_TransID,
//  112 						 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_37:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V4,#GenericApp_TransID & 0xff
        MOV     ?V5,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     ?V0,R0
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0,#0x5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R1,#0x0
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_TxAddr_broadcast & 0xff
        MOV     R3,#(SerialApp_TxAddr_broadcast >> 8) & 0xff
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
        JNZ     ??CustomApp_Send_BroadCast_Data_2
//  113 	{
//  114 		ret = ZSuccess;
        MOV     ?V2,#0x0
//  115 	}
//  116        osal_msg_deallocate( msg );
??CustomApp_Send_BroadCast_Data_2:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  117 	return ret;
        MOV     R1,?V2
??CustomApp_Send_BroadCast_Data_1:
        LJMP    ??Subroutine38_0 & 0xFFFF
//  118 }
          CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function CustomApp_Send_BroadCast_Data
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOV     DPL,?V0
        MOV     DPH,R1
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function CustomApp_Send_P2P_Data
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function CustomApp_Get_Version
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function CustomApp_Send_BroadCast_Data
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
//  119 
//  120 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  121 uint8 CustomApp_Send_Group_Data( afIncomingMSGPacket_t *pkt )  //chaokw
CustomApp_Send_Group_Data:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
        CODE
//  122 {
        FUNCALL CustomApp_Send_Group_Data, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_Group_Data, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_Group_Data, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_Group_Data, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_Group_Data, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_Group_Data, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_Group_Data, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_Group_Data, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Send_Group_Data, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V4,R2
        MOV     ?V5,R3
//  123     uint8 msg[20];
//  124     uint8 ret = ZFailure;	
        MOV     ?V2,#0x1
//  125     uint8 fcs;	
//  126 	
//  127     transferpkt_t *lightstate = (transferpkt_t *)osal_msg_allocate(sizeof (transferpkt_t) +  2);
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0xe
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
//  128     if (lightstate != NULL)
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??CustomApp_Send_Group_Data_0 & 0xFFFF
//  129     {
//  130         lightstate->msgid = GROUP_LIGHT_STATE_MSG; 
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x7a
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x20
        LCALL   ?Subroutine24 & 0xFFFF
//  131         lightstate->msgseq = 0x0001;
//  132         lightstate->srcid = NLME_GetShortAddr();
??CrossCallReturnLabel_31:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  133         lightstate->destid = Prot_Group_T.group_id;
        MOV     DPTR,#Prot_Group_T
        LCALL   ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine8 & 0xFFFF
//  134         lightstate->datalen = 2;
??CrossCallReturnLabel_5:
        MOV     A,#0x2
        LCALL   ?Subroutine7 & 0xFFFF
//  135 
//  136         lightstate->data = (uint8 *)(lightstate + 1);
//  137         osal_memcpy(&lightstate->data, &pkt->cmd.Data[3], 2);
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V4
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
//  138         fcs = MT_UartCalcFCS((uint8 *)lightstate, lightstate->datalen + PKT_HEAD_LEN); 
        ; Setup parameters for call to function MT_UartCalcFCS
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        MOV     A,R1
        MOV     ?V3,A
//  139 
//  140         msg[0] = MT_CPT_SOP;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine26 & 0xFFFF
//  141         msg[1] = lightstate->datalen + PKT_HEAD_LEN + 1;
??CrossCallReturnLabel_35:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  142         msg[2] = MT_DATA_P2P_RSP & 0xff;   
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  143         msg[3] = (MT_DATA_P2P_RSP  & 0xff00) >> 8;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x20
        MOVX    @DPTR,A
//  144 
//  145         osal_memcpy(&msg[4], (uint8 *)lightstate, PKT_HEAD_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
//  146         osal_memcpy(&msg[4 + PKT_HEAD_LEN], &lightstate->data, lightstate->datalen);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V8
        MOV     ?V5,?V9
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
//  147         msg[4 + lightstate->datalen + PKT_HEAD_LEN] = fcs;
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?Subroutine25 & 0xFFFF
//  148 
//  149 #ifdef OPEN_FCS 			
//  150         msg[4 + lightstate->datalen + PKT_HEAD_LEN + 1] = MT_UartCalcFCS(&msg[1], lightstate->datalen + PKT_HEAD_LEN + 1 + 3); //rptmac17 + fcs1 + cmd2 + len1
??CrossCallReturnLabel_33:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_42:
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine27 & 0xFFFF
//  151 #else  
//  152         msg[4 + lightstate->datalen + PKT_HEAD_LEN + 1] = DEFAULTFCS;
//  153 #endif
//  154 
//  155         if ( AF_DataRequest( &SerialApp_TxAddr_group, &GenericApp_epDesc,
//  156                              GENERICAPP_GROUP_CLUSTERID,
//  157                              (byte) (lightstate->datalen + PKT_HEAD_LEN + 1 + 3 + 2) ,
//  158                              (byte *)(msg),
//  159                              &GenericApp_TransID,
//  160                              AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_38:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V4,#GenericApp_TransID & 0xff
        MOV     ?V5,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 45)
        MOV     ?V0,#0x3
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 47)
        MOV     R1,#0x0
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_TxAddr_group & 0xff
        MOV     R3,#(SerialApp_TxAddr_group >> 8) & 0xff
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
        JNZ     ??CustomApp_Send_Group_Data_1
//  161         {
//  162              ret = ZSuccess;
        MOV     ?V2,#0x0
//  163         }
//  164 
//  165         osal_msg_deallocate( (uint8 *)lightstate );
??CustomApp_Send_Group_Data_1:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  166     }
//  167 	
//  168     return ret;	
??CustomApp_Send_Group_Data_0:
        MOV     R1,?V2
        MOV     A,#0x14
        LJMP    ?Subroutine0 & 0xFFFF
//  169 }
          CFI EndBlock cfiBlock19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function CustomApp_Send_BroadCast_Data
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function CustomApp_Send_Group_Data
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function CustomApp_coordinator_online_req
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V3,#0x1e
        MOV     R0,#?V3
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function CustomApp_Send_Group_Data
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_53:
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
          CFI Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function CustomApp_Send_Group_Data
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_12
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-5
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function CustomApp_coordinator_online_req
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function CustomApp_coordinator_online_req
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,DPH
        MOV     R1,A
        MOV     A,R0
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31
//  170 
//  171 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  172 void CustomApp_Get_ExtAddr( void )
CustomApp_Get_ExtAddr:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function CustomApp_Get_ExtAddr
        CODE
//  173 {
        FUNCALL CustomApp_Get_ExtAddr, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Get_ExtAddr, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Get_ExtAddr, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Get_ExtAddr, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
//  174 	uint8 send_buf[13];
//  175 	uint16 cmd;
//  176 
//  177 	cmd = MT_MAC_RSP_MSG;
//  178 	send_buf[0] = 0xFE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  179 	send_buf[1 + MT_RPC_POS_LEN] = SADDR_EXT_LEN;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x8
        MOVX    @DPTR,A
//  180 	send_buf[1 + MT_RPC_POS_CMD0] = cmd & 0xff;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  181 	send_buf[1 + MT_RPC_POS_CMD1] = (cmd >> 8) & 0xff;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x35
        MOVX    @DPTR,A
//  182 	osal_memcpy( &send_buf[1 + MT_RPC_POS_DAT0], NLME_GetExtAddr(), SADDR_EXT_LEN );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
//  183 	send_buf[1 + MT_RPC_POS_DAT0 + SADDR_EXT_LEN] =
//  184 	  MT_UartCalcFCS( &send_buf[1 + MT_RPC_POS_LEN], MT_UART_HEAD_LEN + SADDR_EXT_LEN );
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     R1,#0xb
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  185 
//  186 	HalUARTWrite( 0, send_buf, MT_UART_HEAD_LEN + SADDR_EXT_LEN + 2 );
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xd
        MOV     R5,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  187 }
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock32
//  188 
//  189 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  190 void CustomApp_Get_NWKInfo( void )  //chaokw
CustomApp_Get_NWKInfo:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function CustomApp_Get_NWKInfo
        CODE
//  191 {
        FUNCALL CustomApp_Get_NWKInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Get_NWKInfo, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Get_NWKInfo, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  192 	uint8 send_buf[13];
//  193 	uint16 cmd;
//  194 
//  195 	cmd = MT_NWKINFO_RSP_MSG;
//  196 	send_buf[0] = 0xFE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  197 	send_buf[1 + MT_RPC_POS_LEN] = 0x03;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  198 	send_buf[1 + MT_RPC_POS_CMD0] = cmd & 0xff;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  199 	send_buf[1 + MT_RPC_POS_CMD1] = (cmd >> 8) & 0xff;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x70
        MOVX    @DPTR,A
//  200 	
//  201        osal_memcpy(&send_buf[1 + MT_RPC_POS_DAT0], &_NIB.nwkPanId, 2);   
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#(_NIB + 33) & 0xff
        MOV     ?V1,#((_NIB + 33) >> 8) & 0xff
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  202        send_buf[1 + MT_RPC_POS_DAT0 + 2] = macPhyChannel;
        MOV     DPTR,#macPhyChannel
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  203 	
//  204 	send_buf[1 + MT_RPC_POS_DAT0 + 3] =
//  205 	  MT_UartCalcFCS( &send_buf[1 + MT_RPC_POS_LEN], MT_UART_HEAD_LEN + 3 );
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     R1,#0x6
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  206 
//  207 	HalUARTWrite( 0, send_buf, MT_UART_HEAD_LEN + 3 + 2 );
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  208 }
        MOV     A,#0xd
          CFI EndBlock cfiBlock33
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock34
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock35
//  209 
//  210 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  211 void CustomApp_Get_Active_Cnt( void )
CustomApp_Get_Active_Cnt:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function CustomApp_Get_Active_Cnt
        CODE
//  212 {
        FUNCALL CustomApp_Get_Active_Cnt, CustomApp_get_connected_node_count
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Get_Active_Cnt, CustomApp_Uart_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  213        uint8 activeCount = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  214        activeCount = CustomApp_get_connected_node_count();
        ; Setup parameters for call to function CustomApp_get_connected_node_count
        LCALL   `??CustomApp_get_connected_node_count::?relay`; Banked call to: CustomApp_get_connected_node_count
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  215 	CustomApp_Uart_Send( 0, (uint16)MT_ACTIVE_CNT_RSP_MSG, (uint8 *)&activeCount, 1 , 0 );
        ; Setup parameters for call to function CustomApp_Uart_Send
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#-0x80
        MOV     R3,#0x41
        MOV     R1,#0x0
        LCALL   `??CustomApp_Uart_Send::?relay`; Banked call to: CustomApp_Uart_Send
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  216 }
        MOV     A,#0x1
          CFI EndBlock cfiBlock36
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Valid
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock37
//  217 
//  218 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  219 void CustomApp_Get_Version( void )
CustomApp_Get_Version:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function CustomApp_Get_Version
        CODE
//  220 {
        FUNCALL CustomApp_Get_Version, CustomApp_Uart_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  221 	CustomApp_Uart_Send( 0, (uint16)MT_FW_VERSION_RSP_MSG, (uint8 *)fw_version, (uint8)ZIGBEE_FW_VERSION_LEN , 0 );
        ; Setup parameters for call to function CustomApp_Uart_Send
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0,#0xa
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPTR,#fw_version
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV     R2,#-0x80
        MOV     R3,#0x36
        MOV     R1,#0x0
        LCALL   `??CustomApp_Uart_Send::?relay`; Banked call to: CustomApp_Uart_Send
        MOV     A,#0x2
        SJMP    ?Subroutine2
//  222 }
          CFI EndBlock cfiBlock38
//  223 
//  224 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  225 void CustomApp_FW_Update( void )
CustomApp_FW_Update:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function CustomApp_FW_Update
        CODE
//  226 {
        FUNCALL CustomApp_FW_Update, CustomApp_Uart_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_FW_Update, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  227 	CustomApp_Uart_Send( 0, (uint16)MT_FW_UPDATE_RSP_MSG, NULL, 0 , 0 );
        ; Setup parameters for call to function CustomApp_Uart_Send
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x80
        MOV     R3,#0x37
        MOV     R1,#0x0
        LCALL   `??CustomApp_Uart_Send::?relay`; Banked call to: CustomApp_Uart_Send
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//  228 	osal_start_timerEx( GenericApp_TaskID, GENERICAPP_RESET_SB_MSG_EVT, 500);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_1f4
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        SJMP    ?Subroutine2
//  229 }
          CFI EndBlock cfiBlock39
//  230 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  231 static void CustomApp_Uart_Send( uint8 port, uint16 cmd, uint8 *pbuf, uint8 len, uint8 offset )
CustomApp_Uart_Send:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function CustomApp_Uart_Send
        CODE
//  232 {
        FUNCALL CustomApp_Uart_Send, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 272, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 272, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Uart_Send, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 269, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 269, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Uart_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 269, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 269, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 256
        MOV     DPL,#0x0
        MOV     DPH,#-0x1
        LCALL   ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 269)
        MOV     ?V3,R1
//  233 	uint8 send_buf[256];
//  234 
//  235 	send_buf[0] = 0xFE;
        MOV     DPL,?XSP + 0
        MOV     A,#-0x2
        MOVX    @DPTR,A
        MOV     DPTR,#0x10d
        LCALL   ?XSTACK_DISP0_16
        MOVX    A,@DPTR
        MOV     ?V4,A
//  236 	send_buf[1 + MT_RPC_POS_LEN] = len;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V4
        MOVX    @DPTR,A
//  237 	send_buf[1 + MT_RPC_POS_CMD0] = cmd & 0xff;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  238 	send_buf[1 + MT_RPC_POS_CMD1] = (cmd >> 8) & 0xff;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  239 	if ( len )
        MOV     A,?V4
        JZ      ??CustomApp_Uart_Send_0
//  240 	{
//  241 		osal_memcpy( &send_buf[1 + MT_RPC_POS_DAT0], &pbuf[offset], len );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPTR,#0x10e
        LCALL   ?XSTACK_DISP0_16
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R4
        ADD     A,R0
        MOV     ?V0,A
        CLR     A
        ADDC    A,R5
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 272)
        MOV     R4,?V4
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 269)
//  242 	}
//  243 	send_buf[1 + MT_RPC_POS_DAT0 + len] =
//  244 		MT_UartCalcFCS( &send_buf[1 + MT_RPC_POS_LEN], MT_UART_HEAD_LEN + len );
??CustomApp_Uart_Send_0:
        MOV     R6,?V4
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     A,#0x3
        ADD     A,R6
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R6
        MOV     DPL,A
        CLR     A
        ADDC    A,DPH
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  245 	HalUARTWrite( port, send_buf, MT_UART_HEAD_LEN + len + 2 );
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R6
        ADD     A,#0x5
        MOV     R4,A
        CLR     A
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,?V3
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  246 }
        MOV     DPL,#0x0
        MOV     DPH,#0x1
        LCALL   ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock40
//  247 
//  248 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  249 void CustomApp_AF_P2P_Data_Process(afIncomingMSGPacket_t *pkt)
CustomApp_AF_P2P_Data_Process:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function CustomApp_AF_P2P_Data_Process
        CODE
//  250 {
        FUNCALL CustomApp_AF_P2P_Data_Process, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_AF_P2P_Data_Process, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_AF_P2P_Data_Process, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_AF_P2P_Data_Process, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_AF_P2P_Data_Process, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  251     // | SOP | Data Length |   CMD0   |CMD1   |   Data   |  FCS  |
//  252     // | 1     |  1                |     1        |    1     |  0-Len   |   1   |  
//  253     uart_buf = (uint8 *)osal_msg_allocate(pkt->cmd.DataLength + 2);
        ; Setup parameters for call to function osal_msg_allocate
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_57:
        ADD     A,#0x2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        LCALL   ?Subroutine18 & 0xFFFF
//  254     if ( uart_buf == NULL )
??CrossCallReturnLabel_75:
        MOV     A,R0
        ORL     A,R1
        JZ      ??CustomApp_AF_P2P_Data_Process_0
//  255     {
//  256         return;
//  257     } 		
//  258     uart_buf[0] = MT_UART_SOF;	      
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  259     osal_memcpy(&uart_buf[1], pkt->cmd.Data, pkt->cmd.DataLength);
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  260     uart_buf[pkt->cmd.DataLength + 1]  = MT_UartCalcFCS(&uart_buf[1], pkt->cmd.DataLength);              
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV     DPTR,#uart_buf
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine34 & 0xFFFF
//  261     HalUARTWrite(0, uart_buf, pkt->cmd.DataLength + 2);   
??CrossCallReturnLabel_48:
        ADD     A,#0x2
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  262 	
//  263     osal_msg_deallocate ((uint8 *)uart_buf); 
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  264 }
??CustomApp_AF_P2P_Data_Process_0:
        SJMP    ??Subroutine42_0
          CFI EndBlock cfiBlock41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function CustomApp_Send_P2P_Data
          CFI Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function CustomApp_Send_BroadCast_Data
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_55
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-4
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function CustomApp_AF_Group_Data_Process
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_56
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-4
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function CustomApp_AF_P2P_Data_Process
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOV     DPTR,#uart_buf
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function CustomApp_AF_P2P_Data_Process
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function CustomApp_AF_Group_Data_Process
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        MOV     DPTR,#uart_buf
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function CustomApp_Set_Multiway
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function CustomApp_AF_Group_Data_Process
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond59 Using cfiCommon0
          CFI Function CustomApp_Send_BroadCast_Data
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function CustomApp_AF_Group_Data_Process
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        MOV     A,R6
        ADD     A,#0x20
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_45:
        RET
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function CustomApp_Send_P2P_Data
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function CustomApp_Send_BroadCast_Data
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_0
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_1
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function CustomApp_AF_Group_Data_Process
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_2
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-4
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
        MOV     R1,?V0
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock68
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiBlock69 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock69
//  265 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  266 void CustomApp_AF_Broadcast_Data_Process(afIncomingMSGPacket_t *pkt)
CustomApp_AF_Broadcast_Data_Process:
          CFI Block cfiBlock70 Using cfiCommon0
          CFI Function CustomApp_AF_Broadcast_Data_Process
        CODE
//  267 {
        FUNCALL CustomApp_AF_Broadcast_Data_Process, CustomApp_AF_P2P_Data_Process
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  268     CustomApp_AF_P2P_Data_Process(pkt);
        ; Setup parameters for call to function CustomApp_AF_P2P_Data_Process
        LCALL   `??CustomApp_AF_P2P_Data_Process::?relay`; Banked call to: CustomApp_AF_P2P_Data_Process
//  269 }
          CFI EndBlock cfiBlock70
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock71
//  270 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  271 void CustomApp_AF_Group_Data_Process(afIncomingMSGPacket_t *pkt)
CustomApp_AF_Group_Data_Process:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function CustomApp_AF_Group_Data_Process
        CODE
//  272 {
        FUNCALL CustomApp_AF_Group_Data_Process, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_AF_Group_Data_Process, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_AF_Group_Data_Process, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_AF_Group_Data_Process, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  273     uart_buf = (uint8 *)osal_msg_allocate(pkt->cmd.DataLength);
        ; Setup parameters for call to function osal_msg_allocate
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        LCALL   ?Subroutine18 & 0xFFFF
//  274     if ( uart_buf == NULL )
??CrossCallReturnLabel_76:
        MOV     A,R0
        ORL     A,R1
        JZ      ??CustomApp_AF_Group_Data_Process_0
//  275     {
//  276         return;
//  277     } 		
//  278     osal_memcpy(uart_buf, pkt->cmd.Data, pkt->cmd.DataLength);
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     DPL,?V0
        MOV     DPH,R1
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  279     HalUARTWrite(0, uart_buf, pkt->cmd.DataLength);   
        ; Setup parameters for call to function HalUARTWrite
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  280     osal_msg_deallocate ((uint8 *)uart_buf); 
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  281 }
??CustomApp_AF_Group_Data_Process_0:
        SJMP    ??Subroutine42_0
          CFI EndBlock cfiBlock72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function CustomApp_AF_Group_Data_Process
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function CustomApp_AF_Group_Data_Process
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPTR,#uart_buf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75
//  282 
//  283 
//  284 #if defined( ZDO_COORDINATOR ) && defined( WIFI_FREQUENCY_SELECT )
//  285 void CustomApp_WifiChannelReq( void )
//  286 {
//  287 	uint16 cmd;
//  288 	uint8 buf[6] = {0};
//  289 
//  290 	if ( !getWifiChannel )
//  291 	{
//  292 		cmd = MT_WIFI_CHANNEL_REQ;
//  293 		buf[0] = MT_UART_SOF;
//  294 		buf[1 + MT_RPC_POS_LEN] = 0x00;
//  295 		buf[1 + MT_RPC_POS_CMD0] = cmd & 0xFF;
//  296 		buf[1 + MT_RPC_POS_CMD1] = (cmd >> 8) & 0xFF;
//  297 		buf[1 + MT_RPC_POS_DAT0] = MT_UartCalcFCS( &buf[1], MT_UART_HEAD_LEN);
//  298 		HalUARTWrite( 0, buf, MT_RPC_POS_DAT0 + 2 );
//  299 		osal_start_timerEx( GenericApp_TaskID,
//  300 						GENERICAPP_CHANNEL_MSG_EVT,
//  301 						5000 );
//  302 	}
//  303 }
//  304 
//  305 void CustomApp_ChannelSelect(afIncomingMSGPacket_t *MSGpkt)
//  306 {
//  307 	uint16 wifi_channel;
//  308 	wifi_channel = (uint16)(*(MSGpkt->cmd.Data));
//  309 	if ( (wifi_channel < 1) || (wifi_channel > 13) )
//  310 	{
//  311 		HalUARTWrite( 0, "wifi channel error", 19 );
//  312 		return;
//  313 	}
//  314 	CustomApp_ZigbeeChannelMask( wifi_channel );
//  315 	if ( zgChannelUpdate )
//  316 	{
//  317 		HAL_SYSTEM_RESET();
//  318 	}
//  319 	getWifiChannel = TRUE;
//  320 }
//  321 
//  322 static void CustomApp_ZigbeeChannelMask( uint16 wifiChannel )
//  323 {
//  324 	// CH1 frequency  - 11
//  325 	uint32 wifiChannelMin = 2401;
//  326 	// CH13 frequency + 11
//  327 	uint32 wifiChannleMax = 2495;
//  328 	uint32 wifiFrequency;
//  329 	uint32 zgFrequency;
//  330 	uint32 zgChannelMask;
//  331 	uint8 tryCount;
//  332 	// The BW of wifi is 22MHz
//  333 	wifiFrequency = 2412 + 6 * (wifiChannel - 1);
//  334 	if ( wifiFrequency -11 > wifiChannelMin )
//  335 	{
//  336 		wifiChannelMin = wifiFrequency -11;
//  337 	}
//  338 	if ( wifiFrequency + 11 < wifiChannleMax )
//  339 	{
//  340 		wifiChannleMax = wifiFrequency + 11;
//  341 	}
//  342 	// Calculate for the zigbee frequency in the gateway wifi
//  343 	zgChannelMask = 0;
//  344 	for ( uint8 i = 11; i <= 26; i++ )
//  345 	{
//  346 		zgFrequency = 2405 + 5 * (i - 11);
//  347 		if ( (zgFrequency >= wifiChannelMin) && (zgFrequency <= wifiChannleMax) )
//  348 		{
//  349 			zgChannelMask |= ((uint32)1 << i);
//  350 			if ( i == macPhyChannel )
//  351 			{
//  352 				zgChannelUpdate = TRUE;
//  353 			}
//  354 		}
//  355 	}
//  356 	zgChannelMask = MAX_CHANNELS_24GHZ & (~zgChannelMask);
//  357 	if ( zgChannelMask != zgDefaultChannelMask )
//  358 	{
//  359 		zgDefaultChannelMask = zgChannelMask;
//  360 	}
//  361 	macRxOff();
//  362 	tryCount = 3;
//  363 	while ( tryCount --)
//  364 	{
//  365 		if ( osal_nv_write( ZCD_NV_CHANNEL_MASK,
//  366 				  0,
//  367 				  sizeof( zgDefaultChannelMask ),
//  368 				  &zgDefaultChannelMask ) != SUCCESS )
//  369 		{
//  370 			HalUARTWrite( 0, "Write ZCD_NV_CHANNEL_MASK failed !", 35 );
//  371 		}
//  372 	}
//  373 	macRxOn();
//  374 }
//  375 #endif
//  376 
//  377 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  378 void CustomApp_Set_Multiway(afIncomingMSGPacket_t *pkt)
CustomApp_Set_Multiway:
          CFI Block cfiBlock76 Using cfiCommon0
          CFI Function CustomApp_Set_Multiway
        CODE
//  379 {
        FUNCALL CustomApp_Set_Multiway, Register_Group_Multiway
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Set_Multiway, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Set_Multiway, Nvram_Write_Multiway
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Set_Multiway, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Set_Multiway, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Set_Multiway, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Set_Multiway, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
//  380     /*
//  381     B1-B0	  B3-B2  B5-B4  B7-B6	 B8    B10-B9			B11		B12			B13			B14				B14
//  382                                                         GROUP ID	GROUP Type	Mem Struct	Master loc	GROUP Master      CSUM
//  383     */      
//  384     uint8 msg[20];
//  385     uint8 len;
//  386     // nv restore and set mutliway
//  387     Prot_Group_T.group_type = pkt->cmd.Data[2];
        MOV     A,R2
        ADD     A,#0x22
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_46:
        MOVX    A,@DPTR
        MOV     DPTR,#Prot_Group_T + 2
        LCALL   ?Subroutine13 & 0xFFFF
//  388     Prot_Group_T.mem_struct = pkt->cmd.Data[3];
??CrossCallReturnLabel_15:
        MOVX    A,@DPTR
        MOV     DPTR,#Prot_Group_T + 3
        LCALL   ?Subroutine13 & 0xFFFF
//  389     Prot_Group_T.master_location = pkt->cmd.Data[4];
??CrossCallReturnLabel_16:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#Prot_Group_T + 4
        MOVX    @DPTR,A
//  390     Prot_Group_T.group_master = pkt->cmd.Data[5];
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#Prot_Group_T + 5
        MOVX    @DPTR,A
//  391     if(Prot_Group_T.group_type == 1)//add to group
        MOV     DPTR,#Prot_Group_T + 2
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??CustomApp_Set_Multiway_0
//  392     {
//  393         Prot_Group_T.group_id = pkt->cmd.Data[0] | (pkt->cmd.Data[1] << 8);
        MOV     A,R2
        ADD     A,#0x22
        MOV     R0,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_22:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPTR,#Prot_Group_T
        LCALL   ??Subroutine44_0 & 0xFFFF
//  394         Register_Group_Multiway();
??CrossCallReturnLabel_67:
        ; Setup parameters for call to function Register_Group_Multiway
        LCALL   `??Register_Group_Multiway::?relay`; Banked call to: Register_Group_Multiway
        SJMP    ??CustomApp_Set_Multiway_1
//  395     }
//  396     else if(Prot_Group_T.group_type == 2)//remove from group
??CustomApp_Set_Multiway_0:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??CustomApp_Set_Multiway_1
//  397     {
//  398         aps_RemoveGroup( GENERICAPP_ENDPOINT, GenericApp_Group.ID);
        ; Setup parameters for call to function aps_RemoveGroup
        MOV     DPTR,#GenericApp_Group
        LCALL   ??Subroutine41_0 & 0xFFFF
//  399     }
??CrossCallReturnLabel_63:
        MOV     R1,#0xa
        LCALL   `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
//  400     Nvram_Write_Multiway();
??CustomApp_Set_Multiway_1:
        ; Setup parameters for call to function Nvram_Write_Multiway
        LCALL   `??Nvram_Write_Multiway::?relay`; Banked call to: Nvram_Write_Multiway
//  401 
//  402     osal_nv_read(ZCD_NV_MULTIWAY, 0, sizeof(PROT_GROUP_STRUCT), &Prot_Group_T);
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,#Prot_Group_T & 0xff
        MOV     ?V1,#(Prot_Group_T >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0,#0x6
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4
        MOV     R3,#0x4
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
//  403 
//  404     //send multiway resp to flex mcu
//  405     len = sizeof(Prot_Group_T);
//  406     msg[0] = MT_CPT_SOP;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  407     msg[1] = len;	
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  408     msg[2] = MT_MULTIWAY_SET_RSP_MSG & 0xff;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  409     msg[3] = (MT_MULTIWAY_SET_RSP_MSG & 0xff00) >> 8;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x42
        MOVX    @DPTR,A
//  410     osal_memcpy(&msg[4], &Prot_Group_T, len);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#Prot_Group_T & 0xff
        MOV     ?V1,#(Prot_Group_T >> 8) & 0xff
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
//  411 
//  412     msg[4] = Prot_Group_T.group_id & 0xff;
        MOV     DPTR,#Prot_Group_T
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  413     msg[5] = (Prot_Group_T.group_id & 0xff00) >> 8;
        MOV     DPTR,#Prot_Group_T + 1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  414 
//  415 #ifdef OPEN_FCS 			
//  416     msg[4 + len] = MT_UartCalcFCS(&msg[1], len + 3); 
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     R1,#0x9
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  417 #else  
//  418     msg[4 + len] = DEFAULTFCS;
//  419 #endif
//  420     HalUARTWrite( 0, msg, len + 5 );
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xb
        MOV     R5,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  421 }
        MOV     A,#0x14
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock76

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function CustomApp_Send_P2P_Data
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function CustomApp_Set_Multiway
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function CustomApp_Set_Multiway
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function CustomApp_Set_Multiway
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker82 Using cfiCommon1
          CFI (cfiPicker82) NoFunction
          CFI (cfiPicker82) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_47:
        INC     DPTR
        RET
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiPicker82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function CustomApp_Set_Multiway
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function CustomApp_Set_Multiway
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_15
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-4
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function CustomApp_Set_Multiway
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_16
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-4
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R4
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86
//  422 
//  423 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  424 uint8 CustomApp_coordinator_online_req ( void )
CustomApp_coordinator_online_req:
          CFI Block cfiBlock87 Using cfiCommon0
          CFI Function CustomApp_coordinator_online_req
        CODE
//  425 {
        FUNCALL CustomApp_coordinator_online_req, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_coordinator_online_req, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_coordinator_online_req, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_coordinator_online_req, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_coordinator_online_req, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_coordinator_online_req, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_coordinator_online_req, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_coordinator_online_req, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_coordinator_online_req, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  426     uint8 msg[20];
//  427     uint8 ret = ZFailure;	
        MOV     ?V2,#0x1
//  428     uint8 data = 0xff;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  429     uint8 fcs;	
//  430 	
//  431     transferpkt_t *onlinestate = (transferpkt_t *)osal_msg_allocate(sizeof (transferpkt_t) +  1);   // len=1
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0xd
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
//  432     if (onlinestate != NULL)
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??CustomApp_coordinator_online_req_0 & 0xFFFF
//  433     {
//  434         onlinestate->msgid = COORDINATOR_ONLINE_REQ; 
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1a
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x21
        LCALL   ?Subroutine24 & 0xFFFF
//  435         onlinestate->msgseq = 0x0001;
//  436         onlinestate->srcid = NLME_GetShortAddr();
??CrossCallReturnLabel_32:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  437         onlinestate->destid = 0xffff;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine8 & 0xFFFF
//  438         onlinestate->datalen = 1;
??CrossCallReturnLabel_6:
        MOV     A,#0x1
        LCALL   ?Subroutine7 & 0xFFFF
//  439 
//  440         onlinestate->data = (uint8 *)(onlinestate + 1);
//  441         osal_memcpy(&onlinestate->data, &data, 1);
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  442         fcs = MT_UartCalcFCS((uint8 *)onlinestate, onlinestate->datalen + PKT_HEAD_LEN); 
        ; Setup parameters for call to function MT_UartCalcFCS
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        MOV     A,R1
        MOV     ?V3,A
//  443 
//  444         msg[0] = MT_CPT_SOP;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
//  445         msg[1] = onlinestate->datalen + PKT_HEAD_LEN + 1;
??CrossCallReturnLabel_36:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  446         msg[2] = MT_BROADCAST_REQ & 0xff;   
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  447         msg[3] = (MT_BROADCAST_REQ  & 0xff00) >> 8;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x23
        MOVX    @DPTR,A
//  448 
//  449         osal_memcpy(&msg[4], (uint8 *)onlinestate, PKT_HEAD_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  450         osal_memcpy(&msg[4 + PKT_HEAD_LEN], &onlinestate->data, onlinestate->datalen);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V8
        MOV     ?V5,?V9
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  451         msg[4 + onlinestate->datalen + PKT_HEAD_LEN] = fcs;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   ?Subroutine25 & 0xFFFF
//  452 		
//  453 #ifdef OPEN_FCS 			
//  454         msg[4 + onlinestate->datalen + PKT_HEAD_LEN + 1] = MT_UartCalcFCS(&msg[1], onlinestate->datalen + PKT_HEAD_LEN + 1 + 3); //rptmac17 + fcs1 + cmd2 + len1
??CrossCallReturnLabel_34:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_43:
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine27 & 0xFFFF
//  455 #else  
//  456         msg[4 + onlinestate->datalen + PKT_HEAD_LEN + 1] = DEFAULTFCS;
//  457 #endif
//  458 
//  459         if ( AF_DataRequest( &SerialApp_TxAddr_broadcast, &GenericApp_epDesc,
//  460                              GENERICAPP_BROADCAST_CLUSTERID,
//  461                              (byte) (onlinestate->datalen + PKT_HEAD_LEN + 1 + 3 + 2) ,
//  462                              (byte *)(msg),
//  463                              &GenericApp_TransID,
//  464                              AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_39:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     ?V4,#GenericApp_TransID & 0xff
        MOV     ?V5,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0,#0x5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     R1,#0x0
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_TxAddr_broadcast & 0xff
        MOV     R3,#(SerialApp_TxAddr_broadcast >> 8) & 0xff
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,R1
        JNZ     ??CustomApp_coordinator_online_req_1
//  465         {
//  466              ret = ZSuccess;
        MOV     ?V2,#0x0
//  467         }
//  468 
//  469         osal_msg_deallocate( (uint8 *)onlinestate );
??CustomApp_coordinator_online_req_1:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  470     }
//  471     return ret;	
??CustomApp_coordinator_online_req_0:
        MOV     R1,?V2
        MOV     A,#0x15
        LJMP    ?Subroutine0 & 0xFFFF
//  472 }
          CFI EndBlock cfiBlock87

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function CustomApp_coordinator_online_req
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function CustomApp_coordinator_online_req
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker93 Using cfiCommon1
          CFI (cfiPicker93) NoFunction
          CFI (cfiPicker93) Picker
        MOV     A,#-0x2
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_49:
        ADD     A,#0xa
        RET
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiPicker93

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond94 Using cfiCommon0
          CFI Function CustomApp_AF_P2P_Data_Process
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function CustomApp_Send_Group_Data
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_35
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-4
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function CustomApp_coordinator_online_req
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_36
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-4
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function CustomApp_Send_Group_Data
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_33
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-4
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function CustomApp_coordinator_online_req
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_34
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-4
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function MT_UartCalcFCS
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond100 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function CustomApp_coordinator_online_req
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker102 Using cfiCommon1
          CFI (cfiPicker102) NoFunction
          CFI (cfiPicker102) Picker
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,?V3
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_50:
        ADD     A,#0xd
        MOV     R1,A
        RET
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond103 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function CustomApp_coordinator_online_req
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker105 Using cfiCommon1
          CFI (cfiPicker105) NoFunction
          CFI (cfiPicker105) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiPicker105

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond106 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function CustomApp_coordinator_online_req
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker108 Using cfiCommon1
          CFI (cfiPicker108) NoFunction
          CFI (cfiPicker108) Picker
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ADD     A,#0x9
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        RET
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiPicker108

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond109 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function CustomApp_coordinator_online_req
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker111 Using cfiCommon1
          CFI (cfiPicker111) NoFunction
          CFI (cfiPicker111) Picker
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ADD     A,#0xf
        MOV     ?V0,A
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiPicker111

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond112 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function CustomApp_coordinator_online_req
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker114 Using cfiCommon1
          CFI (cfiPicker114) NoFunction
          CFI (cfiPicker114) Picker
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x8
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     DPL,?V0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiPicker114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond115 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function CustomApp_coordinator_online_req
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker117 Using cfiCommon1
          CFI (cfiPicker117) NoFunction
          CFI (cfiPicker117) Picker
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x9
        MOV     ?V8,A
        CLR     A
        ADDC    A,R7
        MOV     ?V9,A
        MOV     A,R6
        ADD     A,#0xc
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,?V8
        MOV     DPH,?V9
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_70:
        RET
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiPicker117
//  473 
//  474 
//  475 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  476 uint8 CustomApp_router_online_req ( afAddrType_t addr16 )
CustomApp_router_online_req:
          CFI Block cfiBlock118 Using cfiCommon0
          CFI Function CustomApp_router_online_req
        CODE
//  477 {
        FUNCALL CustomApp_router_online_req, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_router_online_req, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_router_online_req, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_router_online_req, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_router_online_req, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_router_online_req, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  478     uint8 ret = ZFailure;	
        MOV     ?V0,#0x1
//  479     uint8 data = 0xff;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  480 	
//  481     transferpkt_t *onlinestate = (transferpkt_t *)osal_msg_allocate(sizeof (transferpkt_t) +  1);  
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0xd
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V2,R2
        MOV     ?V3,R3
//  482     {
//  483         onlinestate->msgid = ROUTER_ONLINE_REQ; 
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x1a
        LCALL   ?Subroutine23 & 0xFFFF
//  484         onlinestate->msgseq = 0x0001;
//  485         onlinestate->srcid = NLME_GetShortAddr();
??CrossCallReturnLabel_29:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  486         onlinestate->destid = addr16.addr.shortAddr;
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  487         onlinestate->datalen = 1;
//  488 
//  489         onlinestate->data = (uint8 *)(onlinestate + 1);
//  490         osal_memcpy(&onlinestate->data, &data, 1);
??CrossCallReturnLabel_7:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x1
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  491         onlinestate->fcs = MT_UartCalcFCS((uint8 *)onlinestate, onlinestate->datalen + PKT_HEAD_LEN); 
        ; Setup parameters for call to function MT_UartCalcFCS
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        LCALL   ?Subroutine28 & 0xFFFF
//  492 
//  493         SerialApp_TxAddr_p2p.addr.shortAddr = addr16.addr.shortAddr;
??CrossCallReturnLabel_40:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
//  494         if ( AF_DataRequest( &SerialApp_TxAddr_p2p, &GenericApp_epDesc,
//  495                              GENERICAPP_CMD_P2P_CLUSTERID,
//  496                              (byte) (onlinestate->datalen + PKT_HEAD_LEN + 1) ,
//  497                              (byte *)(onlinestate),
//  498                              &GenericApp_TransID,
//  499                              AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_9:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V4,#GenericApp_TransID & 0xff
        MOV     ?V5,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V4,#0x4
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R1,#0x0
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_TxAddr_p2p & 0xff
        MOV     R3,#(SerialApp_TxAddr_p2p >> 8) & 0xff
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JNZ     ??CustomApp_router_online_req_0
//  500         {
//  501              ret = ZSuccess;
        MOV     ?V0,#0x0
//  502         }
//  503         osal_msg_deallocate( (uint8 *)onlinestate );
??CustomApp_router_online_req_0:
        ; Setup parameters for call to function osal_msg_deallocate
        LJMP    ?Subroutine3 & 0xFFFF
//  504     }
//  505     return ret;	
//  506 }
          CFI EndBlock cfiBlock118
//  507 
//  508 
//  509 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  510 uint8 CustomApp_router_offline_req ( afAddrType_t addr16 )
CustomApp_router_offline_req:
          CFI Block cfiBlock119 Using cfiCommon0
          CFI Function CustomApp_router_offline_req
        CODE
//  511 {
        FUNCALL CustomApp_router_offline_req, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_router_offline_req, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_router_offline_req, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_router_offline_req, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_router_offline_req, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_router_offline_req, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  512     uint8 ret = ZFailure;	
        MOV     ?V0,#0x1
//  513     uint8 data = 0xff;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  514 	
//  515     transferpkt_t *onlinestate = (transferpkt_t *)osal_msg_allocate(sizeof (transferpkt_t) +  1);  
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0xd
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V2,R2
        MOV     ?V3,R3
//  516     {
//  517         onlinestate->msgid = ROUTER_ONFFLINE_REQ; 
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x1f
        LCALL   ?Subroutine23 & 0xFFFF
//  518         onlinestate->msgseq = 0x0001;
//  519         onlinestate->srcid = NLME_GetShortAddr();
??CrossCallReturnLabel_30:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  520         onlinestate->destid = addr16.addr.shortAddr;
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  521         onlinestate->datalen = 1;
//  522 
//  523         onlinestate->data = (uint8 *)(onlinestate + 1);
//  524         osal_memcpy(&onlinestate->data, &data, 1);
??CrossCallReturnLabel_8:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x1
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  525         onlinestate->fcs = MT_UartCalcFCS((uint8 *)onlinestate, onlinestate->datalen + PKT_HEAD_LEN); 
        ; Setup parameters for call to function MT_UartCalcFCS
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        LCALL   ?Subroutine28 & 0xFFFF
//  526 
//  527         SerialApp_TxAddr_p2p.addr.shortAddr = addr16.addr.shortAddr;
??CrossCallReturnLabel_41:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
//  528         if ( AF_DataRequest( &SerialApp_TxAddr_p2p, &GenericApp_epDesc,
//  529                              GENERICAPP_CMD_P2P_CLUSTERID,
//  530                              (byte) (onlinestate->datalen + PKT_HEAD_LEN + 1) ,
//  531                              (byte *)(onlinestate),
//  532                              &GenericApp_TransID,
//  533                              AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_10:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V4,#GenericApp_TransID & 0xff
        MOV     ?V5,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V4,#0x4
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R1,#0x0
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_TxAddr_p2p & 0xff
        MOV     R3,#(SerialApp_TxAddr_p2p >> 8) & 0xff
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JNZ     ??CustomApp_router_offline_req_0
//  534         {
//  535              ret = ZSuccess;
        MOV     ?V0,#0x0
//  536         }
//  537         osal_msg_deallocate( (uint8 *)onlinestate );
??CustomApp_router_offline_req_0:
        ; Setup parameters for call to function osal_msg_deallocate
        LJMP    ?Subroutine3 & 0xFFFF
//  538     }
//  539     return ret;	
//  540 }
          CFI EndBlock cfiBlock119

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond120 Using cfiCommon0
          CFI Function CustomApp_router_online_req
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function CustomApp_router_offline_req
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker122 Using cfiCommon1
          CFI (cfiPicker122) NoFunction
          CFI (cfiPicker122) Picker
        MOV     A,?V2
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x10
        RET
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiPicker122

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond123 Using cfiCommon0
          CFI Function CustomApp_router_online_req
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function CustomApp_router_offline_req
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker125 Using cfiCommon1
          CFI (cfiPicker125) NoFunction
          CFI (cfiPicker125) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x21
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiPicker125

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond126 Using cfiCommon0
          CFI Function CustomApp_router_online_req
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function CustomApp_router_offline_req
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker128 Using cfiCommon1
          CFI (cfiPicker128) NoFunction
          CFI (cfiPicker128) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x9
        MOV     R1,A
        MOV     R2,?V2
        MOV     R3,?V3
        RET
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiPicker128

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond129 Using cfiCommon0
          CFI Function CustomApp_router_online_req
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function CustomApp_router_offline_req
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker131 Using cfiCommon1
          CFI (cfiPicker131) NoFunction
          CFI (cfiPicker131) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0xa
        MOV     ?V4,A
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiPicker131

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond132 Using cfiCommon0
          CFI Function CustomApp_router_online_req
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function CustomApp_router_offline_req
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker134 Using cfiCommon1
          CFI (cfiPicker134) NoFunction
          CFI (cfiPicker134) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_74:
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V1,#0x1e
        MOV     R0,#?V1
        RET
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiPicker134

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond135 Using cfiCommon0
          CFI Function CustomApp_router_online_req
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function CustomApp_router_offline_req
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker137 Using cfiCommon1
          CFI (cfiPicker137) NoFunction
          CFI (cfiPicker137) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV     A,?V2
        ADD     A,#0x8
        MOV     R0,A
        CLR     A
        ADDC    A,?V3
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,?V2
        ADD     A,#0x9
        MOV     R2,A
        CLR     A
        ADDC    A,?V3
        MOV     R3,A
        MOV     A,?V2
        ADD     A,#0xc
        MOV     R0,A
        CLR     A
        ADDC    A,?V3
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_72:
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiPicker137
//  541 
//  542 
//  543 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  544 void CustomApp_Coordinator_Online( void )
CustomApp_Coordinator_Online:
          CFI Block cfiBlock138 Using cfiCommon0
          CFI Function CustomApp_Coordinator_Online
        CODE
//  545 {
        FUNCALL CustomApp_Coordinator_Online, MT_UartCalcFCS
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CustomApp_Coordinator_Online, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  546 	uint8 send_buf[13];
//  547 	uint16 cmd;
//  548 	
//  549 	cmd = MT_COORDINATOR_ONLINE_REQ_MSG;
//  550 	send_buf[0] = 0xFE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  551 	send_buf[1 + MT_RPC_POS_LEN] = 0x01;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  552 	send_buf[1 + MT_RPC_POS_CMD0] = cmd & 0xff;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  553 	send_buf[1 + MT_RPC_POS_CMD1] = (cmd >> 8) & 0xff;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x44
        MOVX    @DPTR,A
//  554 	send_buf[1 + MT_RPC_POS_DAT0] = 0xff;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  555 	send_buf[1 + MT_RPC_POS_DAT0 + 1] =
//  556 	  MT_UartCalcFCS( &send_buf[1 + MT_RPC_POS_LEN], MT_UART_HEAD_LEN + 1 );
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     R1,#0x4
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  557 
//  558 	HalUARTWrite( 0, send_buf, MT_UART_HEAD_LEN + 1 + 2 );
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  559 }
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock138
//  560 
//  561 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  562 void CustomApp_Get_Flex_Devinfo( void )
CustomApp_Get_Flex_Devinfo:
          CFI Block cfiBlock139 Using cfiCommon0
          CFI Function CustomApp_Get_Flex_Devinfo
        CODE
//  563 {
        FUNCALL CustomApp_Get_Flex_Devinfo, CustomApp_Coordinator_Online
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  564         CustomApp_Coordinator_Online();
        ; Setup parameters for call to function CustomApp_Coordinator_Online
        LCALL   `??CustomApp_Coordinator_Online::?relay`; Banked call to: CustomApp_Coordinator_Online
//  565 }
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock139
//  566 
//  567 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  568 uint8 Nvram_Write_Multiway( void )
Nvram_Write_Multiway:
          CFI Block cfiBlock140 Using cfiCommon0
          CFI Function Nvram_Write_Multiway
        CODE
//  569 {
        FUNCALL Nvram_Write_Multiway, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  570 	uint8 ret;
//  571 	ret = osal_nv_write( ZCD_NV_MULTIWAY, 0, sizeof( PROT_GROUP_STRUCT ), &Prot_Group_T );
//  572 	return ret;
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0,#Prot_Group_T & 0xff
        MOV     ?V1,#(Prot_Group_T >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x6
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4
        MOV     R3,#0x4
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
//  573 }
          CFI EndBlock cfiBlock140
//  574 
//  575 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  576 void Register_Group_Multiway( void )
Register_Group_Multiway:
          CFI Block cfiBlock141 Using cfiCommon0
          CFI Function Register_Group_Multiway
        CODE
//  577 {
        FUNCALL Register_Group_Multiway, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Register_Group_Multiway, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  578     if(Prot_Group_T.group_type == 1)//add to group
        MOV     DPTR,#Prot_Group_T + 2
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Register_Group_Multiway_0
//  579     {
//  580         SerialApp_TxAddr_group.addrMode = (afAddrMode_t)AddrGroup;
        MOV     DPTR,#SerialApp_TxAddr_group + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  581         SerialApp_TxAddr_group.endPoint = GENERICAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xa
        MOVX    @DPTR,A
//  582         SerialApp_TxAddr_group.addr.shortAddr = GENERICAPP_GROUP;
        MOV     DPTR,#SerialApp_TxAddr_group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  583 
//  584         SerialApp_TxAddr_group.addr.shortAddr = Prot_Group_T.group_id;//set group id to global variables
        MOV     DPTR,#Prot_Group_T
        LCALL   ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV     DPTR,#SerialApp_TxAddr_group
        LCALL   ??Subroutine43_0 & 0xFFFF
//  585         GenericApp_Group.ID = Prot_Group_T.group_id;
??CrossCallReturnLabel_68:
        MOV     DPTR,#GenericApp_Group
        LCALL   ??Subroutine43_0 & 0xFFFF
//  586         osal_memcpy( GenericApp_Group.name, "Group 1", 7 );
??CrossCallReturnLabel_69:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(GenericApp_Group + 2) & 0xff
        MOV     R3,#((GenericApp_Group + 2) >> 8) & 0xff
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  587         aps_AddGroup( GENERICAPP_ENDPOINT, &GenericApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#GenericApp_Group & 0xff
        MOV     R3,#(GenericApp_Group >> 8) & 0xff
        MOV     R1,#0xa
        LCALL   `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
//  588     }
//  589 }
??Register_Group_Multiway_0:
        LJMP    ??Subroutine40_0 & 0xFFFF
          CFI EndBlock cfiBlock141

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond142 Using cfiCommon0
          CFI Function CustomApp_Send_P2P_Data
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function CustomApp_router_online_req
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_9
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-4
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function CustomApp_router_offline_req
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_10
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-4
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker145 Using cfiCommon1
          CFI (cfiPicker145) NoFunction
          CFI (cfiPicker145) Picker
        MOV     DPTR,#SerialApp_TxAddr_p2p
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiPicker145
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiCond146 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
          CFI Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function CustomApp_coordinator_online_req
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_4
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-4
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function CustomApp_router_online_req
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_7
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-4
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function CustomApp_router_offline_req
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_8
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-4
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function CustomApp_router_online_req
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_7
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-4
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function CustomApp_router_offline_req
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_8
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-4
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function Register_Group_Multiway
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function Register_Group_Multiway
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function CustomApp_Send_P2P_Data
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function CustomApp_router_online_req
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_9
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-4
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function CustomApp_router_offline_req
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_10
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker157 Using cfiCommon1
          CFI (cfiPicker157) NoFunction
          CFI (cfiPicker157) Picker
        MOV     A,R0
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiPicker157
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiCond158 Using cfiCommon0
          CFI Function CustomApp_Set_Multiway
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function CustomApp_Send_Group_Data
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_3
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-4
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function CustomApp_coordinator_online_req
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_4
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function CustomApp_router_online_req
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_7
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-4
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function CustomApp_router_offline_req
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_8
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-4
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function CustomApp_router_online_req
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_7
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-4
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function CustomApp_router_offline_req
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_8
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-4
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function Register_Group_Multiway
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function Register_Group_Multiway
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function CustomApp_Send_P2P_Data
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function CustomApp_router_online_req
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_9
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-4
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function CustomApp_router_offline_req
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_10
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-4
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker170 Using cfiCommon1
          CFI (cfiPicker170) NoFunction
          CFI (cfiPicker170) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiPicker170

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond171 Using cfiCommon0
          CFI Function CustomApp_AF_P2P_Data_Process
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function CustomApp_AF_Group_Data_Process
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker173 Using cfiCommon1
          CFI (cfiPicker173) NoFunction
          CFI (cfiPicker173) Picker
        MOV     DPTR,#uart_buf
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPTR,#uart_buf
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiPicker173
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond174 Using cfiCommon0
          CFI Function CustomApp_Send_Group_Data
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function Register_Group_Multiway
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function CustomApp_AF_Group_Data_Process
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker179 Using cfiCommon1
          CFI (cfiPicker179) NoFunction
          CFI (cfiPicker179) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_83:
        RET
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiPicker179

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond180 Using cfiCommon0
          CFI Function CustomApp_Send_P2P_Data
          CFI Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function CustomApp_Set_Multiway
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_22
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-4
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function CustomApp_router_online_req
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_9
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-4
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function CustomApp_router_offline_req
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_10
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-4
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function CustomApp_router_online_req
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_7
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-4
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function CustomApp_router_offline_req
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_8
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-4
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_75
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-4
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function CustomApp_AF_Group_Data_Process
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_76
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-4
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function CustomApp_Send_Group_Data
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_77
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-4
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function CustomApp_AF_P2P_Data_Process
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_78
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-5
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function Register_Group_Multiway
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_79
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-4
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker191 Using cfiCommon1
          CFI (cfiPicker191) NoFunction
          CFI (cfiPicker191) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiPicker191

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_Send_P2P_Data::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_Send_P2P_Data

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_Send_BroadCast_Data::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_Send_BroadCast_Data

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_Send_Group_Data::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_Send_Group_Data

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_Get_ExtAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_Get_ExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_Get_NWKInfo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_Get_NWKInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_Get_Active_Cnt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_Get_Active_Cnt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_Get_Version::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_Get_Version

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_FW_Update::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_FW_Update

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_Uart_Send::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_Uart_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_AF_P2P_Data_Process::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_AF_P2P_Data_Process

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_AF_Broadcast_Data_Process::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_AF_Broadcast_Data_Process

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_AF_Group_Data_Process::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_AF_Group_Data_Process

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_Set_Multiway::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_Set_Multiway

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_coordinator_online_req::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_coordinator_online_req

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_router_online_req::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_router_online_req

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_router_offline_req::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_router_offline_req

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_Coordinator_Online::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_Coordinator_Online

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??CustomApp_Get_Flex_Devinfo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CustomApp_Get_Flex_Devinfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Nvram_Write_Multiway::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Nvram_Write_Multiway

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Register_Group_Multiway::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Register_Group_Multiway

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1f4:
        DD 500

        END
//  590 
//  591 
// 
// 3 241 bytes in segment BANKED_CODE
//   120 bytes in segment BANK_RELAYS
//    12 bytes in segment XDATA_ROM_C
//    26 bytes in segment XDATA_Z
// 
// 3 361 bytes of CODE  memory
//     8 bytes of CONST memory (+ 4 bytes shared)
//    26 bytes of XDATA memory
//
//Errors: none
//Warnings: none
