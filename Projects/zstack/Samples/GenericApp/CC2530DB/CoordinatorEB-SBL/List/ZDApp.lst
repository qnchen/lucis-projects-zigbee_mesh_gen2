###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  15:51:48
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0001
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDApp.c" -D ZTOOL_P1 -D MT_TASK -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_RESTORE -D
#        NV_INIT -D NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D OPEN_FCS -D
#        MAKE_CRC_SHDW -lC "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\List\ZDApp.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\Obj\ZDApp.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2014-06-03 18:29:46 -0700 (Tue, 03 Jun 2014) $
      4            Revision:       $Revision: 38789 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          #if NODE_AUTH
     79          #include "NodeAuth.h"
     80          #endif
     81          #include "GenericApp.h"
     82          
     83          
     84          /*********************************************************************
     85           * CONSTANTS
     86           */
     87          
     88          #if !defined( NWK_START_DELAY )
     89            #define NWK_START_DELAY             100   // in milliseconds
     90          #endif
     91          
     92          #if !defined( LEAVE_RESET_DELAY )
     93            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     94          #endif
     95          
     96          // Init ZDO, but hold and wait for application to start the joining or
     97          // forming network
     98          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     99          
    100          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
    101            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
    102          #endif
    103          
    104          #if !defined( BEACON_REQUEST_DELAY )
    105            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    106          #endif
    107          
    108          #if !defined( BEACON_REQ_DELAY_MASK )
    109            #define BEACON_REQ_DELAY_MASK       0x007F
    110          #endif
    111          
    112          #define MAX_RESUME_RETRY            3
    113          
    114          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds  //chaokw
    115          
    116          // Beacon Order Settings (see NLMEDE.h)
    117          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    118          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    119          
    120          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    121          // Additional counts to add to the frame counter when restoring from NV
    122          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    123          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    124          #endif
    125          
    126          // Leave control bits
    127          #define ZDAPP_LEAVE_CTRL_INIT 0
    128          #define ZDAPP_LEAVE_CTRL_SET  1
    129          #define ZDAPP_LEAVE_CTRL_RA   2
    130          
    131          // Address Manager Stub Implementation
    132          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    133          
    134          
    135          #if !defined ZDO_NV_SAVE_RFDs
    136          #define ZDO_NV_SAVE_RFDs  TRUE
    137          #endif
    138          
    139          // Delay time before updating NWK NV data to force fewer writes during high activity.
    140          #if ZDO_NV_SAVE_RFDs
    141          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    142          #else
    143          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    144          #endif
    145          
    146          // Timeout value to process New Devices
    147          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    148          
    149          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    150          #if !defined MAX_PENDING_BIND_REQ
    151          #define MAX_PENDING_BIND_REQ 3
    152          #endif
    153          #endif
    154          
    155          /******************************************************************************
    156           * TYPEDEFS
    157           */
    158          typedef struct
    159          {
    160            void   *next;
    161            uint16 shortAddr;
    162            uint16 timeDelta;
    163          } ZDAppNewDevice_t;
    164          
    165          /*********************************************************************
    166           * GLOBAL VARIABLES
    167           */
    168          
    169          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    171          #endif
    172          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    173          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    174          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    182          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    183          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    184          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    186          
    187          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    191          
    192          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    194          #endif
    195          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          uint8 join_device_extaddr[SADDR_EXT_LEN] = {0};
   \                     join_device_extaddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          ZDO_Permit_Join_Device_t *zdo_join_device = NULL;   //chaokw
   \                     zdo_join_device:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    198          
    199          /*********************************************************************
    200           * EXTERNAL VARIABLES
    201           */
    202          
    203          /*********************************************************************
    204           * EXTERNAL FUNCTIONS
    205           */
    206          
    207          /*********************************************************************
    208           * LOCAL FUNCTIONS
    209           */
    210          
    211          void ZDApp_NetworkStartEvt( void );
    212          void ZDApp_DeviceAuthEvt( void );
    213          void ZDApp_SaveNetworkStateEvt( void );
    214          
    215          uint8 ZDApp_ReadNetworkRestoreState( void );
    216          uint8 ZDApp_RestoreNetworkState( void );
    217          void ZDAppDetermineDeviceType( void );
    218          void ZDApp_InitUserDesc( void );
    219          void ZDAppCheckForHoldKey( void );
    220          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    221          void ZDApp_ProcessNetworkJoin( void );
    222          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    223          uint8 ZDApp_RestoreNwkKey( void );
    224          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    225          
    226          void ZDApp_SecInit( uint8 state );
    227          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    228          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    229          
    230          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    231          
    232          void ZDApp_ResetTimerStart( uint16 delay );
    233          void ZDApp_ResetTimerCancel( void );
    234          void ZDApp_LeaveCtrlInit( void );
    235          void ZDApp_LeaveCtrlSet( uint8 ra );
    236          uint8 ZDApp_LeaveCtrlBypass( void );
    237          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    238          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    239                                  uint8 removeChildren );
    240          void ZDApp_NodeProfileSync( uint8 stackProfile );
    241          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    242          void ZDApp_RegisterCBs( void );
    243          void ZDApp_InitZdoCBFunc(void);
    244          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    245          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    246          void ZDApp_InitPendingBind( void );
    247          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    248          void ZDApp_AgeOutPendingBindEntry( void );
    249          #endif
    250          
    251          /*********************************************************************
    252           * LOCAL VARIABLES
    253           */
    254          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    255          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    256          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    257          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    259          
    260          #if defined( HOLD_AUTO_START )
    261            devStates_t devState = DEV_HOLD;
    262          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    263            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    264          #endif
    265          
    266          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )
    267            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
    268            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    269                                  // to parent. Set to make the device do an Orphan scan.
    270          #else
    271            // Set the default to coodinator

   \                                 In  segment XDATA_I, align 1, keep-with-next
    272            devStartModes_t devStartMode = MODE_HARD;
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devStartMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    273          #endif
    274          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    275          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    276          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    277          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    278          {
    279            ZDO_EP,
    280            &ZDAppTaskID,
    281            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    282            (afNetworkLatencyReq_t)0            // No Network Latency req
    283          };
    284          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    285          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    286          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    287          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    288          
    289          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    290          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    291          
    292          /*********************************************************************
    293           * @fn      ZDApp_Init
    294           *
    295           * @brief   ZDApp Initialization function.
    296           *
    297           * @param   task_id - ZDApp Task ID
    298           *
    299           * @return  None
    300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    302          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    303            // Save the task ID
    304            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    305          
    306            // Initialize the ZDO global device short address storage
    307            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    308            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    309            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    310          
    311            // Check for manual "Hold Auto Start"
    312            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   `??ZDAppCheckForHoldKey::?relay`; Banked call to: ZDAppCheckForHoldKey
    313          
    314            // Initialize ZDO items and setup the device - type of device to create.
    315            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   `??ZDO_Init::?relay` ; Banked call to: ZDO_Init
    316          
    317            // Register the endpoint description with the AF
    318            // This task doesn't have a Simple description, but we still need
    319            // to register the endpoint.
    320            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    321          
    322          #if defined( ZDO_USERDESC_RESPONSE )
    323            ZDApp_InitUserDesc();
   \   000029                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000029   12....       LCALL   `??ZDApp_InitUserDesc::?relay`; Banked call to: ZDApp_InitUserDesc
    324          #endif // ZDO_USERDESC_RESPONSE
    325          
    326            // Start the device?
    327            if ( devState != DEV_HOLD )
   \   00002C   90....       MOV     DPTR,#devState
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6009         JZ      ??ZDApp_Init_0
    328            {
    329              ZDOInitDevice( 0 );
   \   000032                ; Setup parameters for call to function ZDOInitDevice
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000039   8014         SJMP    ??ZDApp_Init_1
    330            }
    331            else
    332            {
    333              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   00003B                ; Setup parameters for call to function ZDOInitDevice
   \   00003B   7AFF         MOV     R2,#-0x1
   \   00003D   7BFF         MOV     R3,#-0x1
   \   00003F   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
    334              // Blink LED to indicate HOLD_START
    335              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   000042                ; Setup parameters for call to function HalLedBlink
   \   000042   7CF4         MOV     R4,#-0xc
   \   000044   7D01         MOV     R5,#0x1
   \   000046   7B32         MOV     R3,#0x32
   \   000048   7A00         MOV     R2,#0x0
   \   00004A   7908         MOV     R1,#0x8
   \   00004C   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    336            }
    337          
    338            // Initialize the ZDO callback function pointers zdoCBFunc[]
    339            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00004F                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00004F   12....       LCALL   `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    340          
    341            ZDApp_RegisterCBs();
   \   000052                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000052   12....       LCALL   `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    342          
    343          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    344          #if defined ( REFLECTOR )
    345            ZDApp_InitPendingBind();
   \   000055                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   000055   12....       LCALL   `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
    346          #endif
    347          #endif
    348          } /* ZDApp_Init() */
   \   000058   02....       LJMP    ??Subroutine51_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    349          
    350          /*********************************************************************
    351           * @fn          ZDApp_SecInit
    352           *
    353           * @brief       ZDApp initialize security.
    354           *
    355           * @param       state - device initialization state
    356           *
    357           * @return      none
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    360          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
    361            uint8 zgPreConfigKey[SEC_KEY_LEN];
    362          
    363            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    364            {
    365              // Set the Trust Center bit
    366              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
   \   00000C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   4401         ORL     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
    367            }
    368          
    369            // Initialize ZigBee Device Security Manager
    370            ZDSecMgrInit(state);
   \   000013                ; Setup parameters for call to function ZDSecMgrInit
   \   000013   12....       LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    371          
    372            if ( ZG_SECURE_ENABLED )
    373            {
    374              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   000016   E5..         MOV     A,?V0
   \   000018   6037         JZ      ??ZDApp_SecInit_0
    375              {
    376                nwkFrameCounter = 0;
   \   00001A   90....       MOV     DPTR,#nwkFrameCounter
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   F0           MOVX    @DPTR,A
    377          
    378                if( _NIB.nwkKeyLoaded == FALSE )
   \   000025   90....       MOV     DPTR,#_NIB + 61
   \   000028   E0           MOVX    A,@DPTR
   \   000029   7026         JNZ     ??ZDApp_SecInit_0
    379                {
    380                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    381                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    382                  {
    383                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   00002B                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   00002B   AC..         MOV     R4,?XSP + 0
   \   00002D   AD..         MOV     R5,?XSP + 1
   \   00002F   7A62         MOV     R2,#0x62
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
    384                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   000036                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000036   7900         MOV     R1,#0x0
   \   000038   AA..         MOV     R2,?XSP + 0
   \   00003A   AB..         MOV     R3,?XSP + 1
   \   00003C   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    385                      SSP_SwitchNwkKey( 0 );
   \   00003F                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   00003F   7900         MOV     R1,#0x0
   \   000041   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    386          
    387                      // clear local copy of key
    388                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   000044                ; Setup parameters for call to function osal_memset
   \   000044   7C10         MOV     R4,#0x10
   \   000046   7D00         MOV     R5,#0x0
   \   000048   7900         MOV     R1,#0x0
   \   00004A   AA..         MOV     R2,?XSP + 0
   \   00004C   AB..         MOV     R3,?XSP + 1
   \   00004E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    389                  }
    390                }
    391              }
    392          
    393              // clean the new devices list when Security module is initialized
    394              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   000051   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000054   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000057   601D         JZ      ??ZDApp_SecInit_1
    395              {
    396                ZDAppNewDevice_t *pNewDeviceNext;
    397          
    398                while ( ZDApp_NewDeviceList )
    399                {
    400                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_2:
   \   000059   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00005C   FE           MOV     R6,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FF           MOV     R7,A
    401                  osal_mem_free( ZDApp_NewDeviceList );
   \   000060                ; Setup parameters for call to function osal_mem_free
   \   000060   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000063   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    402                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000066   EE           MOV     A,R6
   \   000067   F8           MOV     R0,A
   \   000068   EF           MOV     A,R7
   \   000069   F9           MOV     R1,A
   \   00006A   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00006D   E8           MOV     A,R0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   F0           MOVX    @DPTR,A
    403                }
   \   000072   E8           MOV     A,R0
   \   000073   49           ORL     A,R1
   \   000074   70E3         JNZ     ??ZDApp_SecInit_2
    404              }
    405            }
    406          }
   \                     ??ZDApp_SecInit_1:
   \   000076   7410         MOV     A,#0x10
   \   000078   02....       LJMP    ??Subroutine55_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine47_0
   \   000003                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine51_0 & 0xFFFF
    407          
    408          /*********************************************************************
    409           * @fn      ZDApp_event_loop()
    410           *
    411           * @brief   Main event loop for Zigbee device objects task. This function
    412           *          should be called at periodic intervals.
    413           *
    414           * @param   task_id - Task ID
    415           * @param   events  - Bitmap of events
    416           *
    417           * @return  none
    418           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    419          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    420          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    421            uint8 *msg_ptr;
    422          
    423            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL     A,#0x80
   \   00000D   7033         JNZ     ??ZDApp_event_loop_0
    424            {
    425              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    426              {
    427                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    428          
    429                // Release the memory
    430                osal_msg_deallocate( msg_ptr );
    431              }
    432          
    433              // Return unprocessed events
    434              return (events ^ SYS_EVENT_MSG);
    435            }
    436          
    437            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EE           MOV     A,R6
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5047         JNC     ??ZDApp_event_loop_1
    438            {
    439              // Initialize apps and start the network
    440              devState = DEV_INIT;
   \   000014   90....       MOV     DPTR,#devState
   \   000017   7401         MOV     A,#0x1
   \   000019   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    441              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_66:
   \   00001C   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    442          
    443              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    444                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   00001F                ; Setup parameters for call to function ZDO_StartDevice
   \   00001F   7C0F         MOV     R4,#0xf
   \   000021   7B0F         MOV     R3,#0xf
   \   000023   90....       MOV     DPTR,#devStartMode
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FA           MOV     R2,A
   \   000028   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   5407         ANL     A,#0x7
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    445          
    446              // Return unprocessed events
    447              return (events ^ ZDO_NETWORK_INIT);
   \   000032   EE           MOV     A,R6
   \   000033   6401         XRL     A,#0x1
   \   000035   02....       LJMP    ??ZDApp_event_loop_2 & 0xFFFF
    448            }
   \                     ??ZDApp_event_loop_3:
   \   000038                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000038   12....       LCALL   `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   00003B                ; Setup parameters for call to function osal_msg_deallocate
   \   00003B   AA..         MOV     R2,?V0
   \   00003D   AB..         MOV     R3,?V1
   \   00003F   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   000042                ; Setup parameters for call to function osal_msg_receive
   \   000042   90....       MOV     DPTR,#ZDAppTaskID
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00004A   8A..         MOV     ?V0,R2
   \   00004C   8B..         MOV     ?V1,R3
   \   00004E   EA           MOV     A,R2
   \   00004F   45..         ORL     A,?V1
   \   000051   70E5         JNZ     ??ZDApp_event_loop_3
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   EF           MOV     A,R7
   \   000056   6480         XRL     A,#0x80
   \   000058   02....       LJMP    ??ZDApp_event_loop_4 & 0xFFFF
    449          
    450            if ( ZSTACK_ROUTER_BUILD )
    451            {
    452              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_1:
   \   00005B   5402         ANL     A,#0x2
   \   00005D   6008         JZ      ??ZDApp_event_loop_5
    453              {
    454                ZDApp_NetworkStartEvt();
   \   00005F                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   00005F   12....       LCALL   `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
    455          
    456                // Return unprocessed events
    457                return (events ^ ZDO_NETWORK_START);
   \   000062   EE           MOV     A,R6
   \   000063   6402         XRL     A,#0x2
   \   000065   805B         SJMP    ??ZDApp_event_loop_2
    458              }
    459          
    460              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_5:
   \   000067   EE           MOV     A,R6
   \   000068   5420         ANL     A,#0x20
   \   00006A   6027         JZ      ??ZDApp_event_loop_6
    461              {
    462                if ( nwkStatus == ZSuccess )
   \   00006C   90....       MOV     DPTR,#nwkStatus
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   7010         JNZ     ??ZDApp_event_loop_7
    463                {
    464                  if ( devState == DEV_END_DEVICE )
   \   000072   90....       MOV     DPTR,#devState
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6406         XRL     A,#0x6
   \   000078   7003         JNZ     ??ZDApp_event_loop_8
    465                    devState = DEV_ROUTER;
   \   00007A   7407         MOV     A,#0x7
   \   00007C   F0           MOVX    @DPTR,A
    466          
    467                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_8:
   \   00007D                ; Setup parameters for call to function osal_pwrmgr_device
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    468                }
    469                else
    470                {
    471                  // remain as end device
    472                }
    473                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_7:
   \   000082                ; Setup parameters for call to function osal_set_event
   \   000082   7A10         MOV     R2,#0x10
   \   000084   7B00         MOV     R3,#0x0
   \   000086   90....       MOV     DPTR,#ZDAppTaskID
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    474          
    475                // Return unprocessed events
    476                return (events ^ ZDO_ROUTER_START);
   \   00008E   EE           MOV     A,R6
   \   00008F   6420         XRL     A,#0x20
   \   000091   802F         SJMP    ??ZDApp_event_loop_2
    477              }
    478            }
    479          
    480            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_6:
   \   000093   EE           MOV     A,R6
   \   000094   5410         ANL     A,#0x10
   \   000096   602E         JZ      ??ZDApp_event_loop_9
    481            {
    482              ZDO_UpdateNwkStatus( devState );
   \   000098                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   000098   90....       MOV     DPTR,#devState
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    483          
    484              // At start up, do one MTO route discovery if the device is a concentrator
    485              if ( zgConcentratorEnable == TRUE )
   \   0000A0   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   6401         XRL     A,#0x1
   \   0000A6   7017         JNZ     ??ZDApp_event_loop_10
    486              {
    487                // Start next event
    488                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000A8                ; Setup parameters for call to function osal_start_timerEx
   \   0000A8   90....       MOV     DPTR,#__Constant_64
   \   0000AB   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000AE   7A00         MOV     R2,#0x0
   \   0000B0   7B08         MOV     R3,#0x8
   \   0000B2   90....       MOV     DPTR,#NWK_TaskID
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F9           MOV     R1,A
   \   0000B7   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000BA   7404         MOV     A,#0x4
   \   0000BC   12....       LCALL   ?DEALLOC_XSTACK8
    489              }
    490          
    491              // Return unprocessed events
    492              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_10:
   \   0000BF   EE           MOV     A,R6
   \   0000C0   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   8036         SJMP    ??ZDApp_event_loop_4
    493            }
    494          
    495            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_9:
   \   0000C6   EE           MOV     A,R6
   \   0000C7   5408         ANL     A,#0x8
   \   0000C9   6006         JZ      ??ZDApp_event_loop_11
    496            {
    497              // User defined logic
    498          
    499              // Return unprocessed events
    500              return (events ^ ZDO_COMMAND_CNF);
   \   0000CB   EE           MOV     A,R6
   \   0000CC   6408         XRL     A,#0x8
   \   0000CE   FA           MOV     R2,A
   \   0000CF   8037         SJMP    ??ZDApp_event_loop_12
    501            }
    502          
    503            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_11:
   \   0000D1   EF           MOV     A,R7
   \   0000D2   5401         ANL     A,#0x1
   \   0000D4   600A         JZ      ??ZDApp_event_loop_13
    504            {
    505              ZDApp_SaveNetworkStateEvt();
   \   0000D6                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   0000D6   12....       LCALL   `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
    506          
    507              // Return unprocessed events
    508              return (events ^ ZDO_NWK_UPDATE_NV);
   \   0000D9   EE           MOV     A,R6
   \   0000DA   FA           MOV     R2,A
   \   0000DB   EF           MOV     A,R7
   \   0000DC   6401         XRL     A,#0x1
   \   0000DE   801C         SJMP    ??ZDApp_event_loop_4
    509            }
    510          
    511            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_13:
   \   0000E0   EE           MOV     A,R6
   \   0000E1   5404         ANL     A,#0x4
   \   0000E3   600A         JZ      ??ZDApp_event_loop_14
    512            {
    513          #ifdef ZBA_FALLBACK_NWKKEY
    514              if ( devState == DEV_END_DEVICE_UNAUTH )
    515              {
    516                ZDSecMgrFallbackNwkKey();
    517              }
    518              else
    519          #endif
    520              {
    521                // Set the NV startup option to force a "new" join.
    522                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   0000E5                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000E5   7A02         MOV     R2,#0x2
   \   0000E7   79FF         MOV     R1,#-0x1
   \   0000E9   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    523          
    524                // The device has been in the UNAUTH state, so reset
    525                // Note: there will be no return from this call
    526                SystemResetSoft();    //chaokw 20170413
   \   0000EC                ; Setup parameters for call to function Onboard_soft_reset
   \   0000EC   12....       LCALL   Onboard_soft_reset & 0xFFFF
    527              }
    528            }
    529          
    530          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    531            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_14:
   \   0000EF   EF           MOV     A,R7
   \   0000F0   5410         ANL     A,#0x10
   \   0000F2   600B         JZ      ??ZDApp_event_loop_15
    532            {
    533          #if defined ( REFLECTOR )
    534              ZDApp_AgeOutPendingBindEntry();
   \   0000F4                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   0000F4   12....       LCALL   `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
    535          #endif
    536              // Return unprocessed events
    537              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   0000F7   EE           MOV     A,R6
   \   0000F8   FA           MOV     R2,A
   \   0000F9   EF           MOV     A,R7
   \   0000FA   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_4:
   \   0000FC   FB           MOV     R3,A
   \   0000FD   8009         SJMP    ??ZDApp_event_loop_12
    538            }
    539          #endif
    540          
    541            if ( ZG_SECURE_ENABLED )
    542            {
    543              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_15:
   \   0000FF                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   0000FF   EE           MOV     A,R6
   \   000100   FA           MOV     R2,A
   \   000101   EF           MOV     A,R7
   \   000102   FB           MOV     R3,A
   \   000103   A9..         MOV     R1,?V2
   \   000105   12....       LCALL   `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
    544            }
   \                     ??ZDApp_event_loop_12:
   \   000108                REQUIRE ?Subroutine1
   \   000108                ; // Fall through to label ?Subroutine1
    545            else
    546            {
    547              // Discard or make more handlers
    548              return 0;
    549            }
    550          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001   7A10         MOV     R2,#0x10
   \   000003   7B00         MOV     R3,#0x0
   \   000005   90....       MOV     DPTR,#ZDAppTaskID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET
    551          
    552          /*********************************************************************
    553           * @fn      ZDApp_ProcessSecEvent()
    554           *
    555           * @brief   Process incoming security events.
    556           *
    557           * @param   task_id - Task ID
    558           * @param   events  - Bitmap of events
    559           *
    560           * @return  none
    561           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    563          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    564            (void)task_id;  // Intentionally unreferenced parameter
    565          
    566            if ( ZSTACK_ROUTER_BUILD )
    567            {
    568              if ( events & ZDO_NEW_DEVICE )
   \   000009   EE           MOV     A,R6
   \   00000A   5440         ANL     A,#0x40
   \   00000C   7003         JNZ     $+5
   \   00000E   02....       LJMP    ??ZDApp_ProcessSecEvent_0 & 0xFFFF
    569              {
    570                // process the new device event
    571                if ( ZDApp_NewDeviceList )
   \   000011   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000014   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000017   607F         JZ      ??ZDApp_ProcessSecEvent_1
    572                {
    573                  ZDAppNewDevice_t *pNewDevice;
    574                  uint16 timeDelta;
    575          
    576                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   000019   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000021   12....       LCALL   `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
    577          
    578                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   000024   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000027   F5..         MOV     ?V0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V1,A
    579                  osal_mem_free( ZDApp_NewDeviceList );
   \   00002D                ; Setup parameters for call to function osal_mem_free
   \   00002D   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000030   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    580                  ZDApp_NewDeviceList = pNewDevice;
   \   000033   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000036   E5..         MOV     A,?V0
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   E5..         MOV     A,?V1
   \   00003C   F0           MOVX    @DPTR,A
    581          
    582                  if ( pNewDevice )
   \   00003D   E5..         MOV     A,?V0
   \   00003F   45..         ORL     A,?V1
   \   000041   6055         JZ      ??ZDApp_ProcessSecEvent_1
    583                  {
    584                    timeDelta = pNewDevice->timeDelta;
   \   000043   85..82       MOV     DPL,?V0
   \   000046   85..83       MOV     DPH,?V1
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V4,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F5..         MOV     ?V5,A
    585                    pNewDevice = pNewDevice->next;
   \   000054   8014         SJMP    ??ZDApp_ProcessSecEvent_2
    586          
    587                    while ( pNewDevice )
    588                    {
    589                      pNewDevice->timeDelta -= timeDelta;
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000056   85..82       MOV     DPL,?V0
   \   000059   85..83       MOV     DPH,?V1
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   C3           CLR     C
   \   000061   E0           MOVX    A,@DPTR
   \   000062   95..         SUBB    A,?V4
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   95..         SUBB    A,?V5
   \   000069   F0           MOVX    @DPTR,A
    590                      pNewDevice = pNewDevice->next;
   \                     ??ZDApp_ProcessSecEvent_2:
   \   00006A   85..82       MOV     DPL,?V0
   \   00006D   85..83       MOV     DPH,?V1
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F5..         MOV     ?V0,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F5..         MOV     ?V1,A
    591                    }
   \   000077   E5..         MOV     A,?V0
   \   000079   45..         ORL     A,?V1
   \   00007B   70D9         JNZ     ??ZDApp_ProcessSecEvent_3
    592          
    593                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
   \   00007D                ; Setup parameters for call to function osal_start_timerEx
   \   00007D   E4           CLR     A
   \   00007E   F5..         MOV     ?V6,A
   \   000080   F5..         MOV     ?V7,A
   \   000082   78..         MOV     R0,#?V4
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000087   7A40         MOV     R2,#0x40
   \   000089   7B00         MOV     R3,#0x0
   \   00008B   90....       MOV     DPTR,#ZDAppTaskID
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F9           MOV     R1,A
   \   000090   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000093   7404         MOV     A,#0x4
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
    594                  }
    595                }
    596          
    597                // Return unprocessed events
    598                return (events ^ ZDO_NEW_DEVICE);
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000098   EE           MOV     A,R6
   \   000099   6440         XRL     A,#0x40
   \   00009B   800B         SJMP    ??ZDApp_ProcessSecEvent_4
    599              }
    600            }
    601          
    602            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   00009D   EE           MOV     A,R6
   \   00009E   5480         ANL     A,#0x80
   \   0000A0   600A         JZ      ??ZDApp_ProcessSecEvent_5
    603            {
    604              ZDApp_DeviceAuthEvt();
   \   0000A2                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   0000A2   12....       LCALL   `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    605          
    606              // Return unprocessed events
    607              return (events ^ ZDO_DEVICE_AUTH);
   \   0000A5   EE           MOV     A,R6
   \   0000A6   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessSecEvent_4:
   \   0000A8   FA           MOV     R2,A
   \   0000A9   EF           MOV     A,R7
   \   0000AA   802B         SJMP    ??ZDApp_ProcessSecEvent_6
    608            }
    609          
    610            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_5:
   \   0000AC   EF           MOV     A,R7
   \   0000AD   5402         ANL     A,#0x2
   \   0000AF   600A         JZ      ??ZDApp_ProcessSecEvent_7
    611            {
    612              ZDApp_SaveNwkKey();
   \   0000B1                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   0000B1   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    613          
    614              // Return unprocessed events
    615              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   0000B4   EE           MOV     A,R6
   \   0000B5   FA           MOV     R2,A
   \   0000B6   EF           MOV     A,R7
   \   0000B7   6402         XRL     A,#0x2
   \   0000B9   801C         SJMP    ??ZDApp_ProcessSecEvent_6
    616            }
    617          
    618            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_7:
   \   0000BB   EF           MOV     A,R7
   \   0000BC   5408         ANL     A,#0x8
   \   0000BE   600A         JZ      ??ZDApp_ProcessSecEvent_8
    619            {
    620          #if defined (NV_RESTORE)
    621              ZDSecMgrSaveApsLinkKey();
   \   0000C0                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   0000C0   12....       LCALL   `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
    622          #endif // (NV_RESTORE)
    623          
    624              // Return unprocessed events
    625              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   0000C3   EE           MOV     A,R6
   \   0000C4   FA           MOV     R2,A
   \   0000C5   EF           MOV     A,R7
   \   0000C6   6408         XRL     A,#0x8
   \   0000C8   800D         SJMP    ??ZDApp_ProcessSecEvent_6
    626            }
    627          
    628            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_8:
   \   0000CA   EF           MOV     A,R7
   \   0000CB   5404         ANL     A,#0x4
   \   0000CD   600B         JZ      ??ZDApp_ProcessSecEvent_9
    629            {
    630              ZDSecMgrSaveTCLinkKey();
   \   0000CF                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   0000CF   12....       LCALL   `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    631          
    632              // Return unprocessed events
    633              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   0000D2   EE           MOV     A,R6
   \   0000D3   FA           MOV     R2,A
   \   0000D4   EF           MOV     A,R7
   \   0000D5   6404         XRL     A,#0x4
   \                     ??ZDApp_ProcessSecEvent_6:
   \   0000D7   FB           MOV     R3,A
   \   0000D8   8004         SJMP    ??ZDApp_ProcessSecEvent_10
    634            }
    635          
    636            // Discard or make more handlers
    637            return 0;
   \                     ??ZDApp_ProcessSecEvent_9:
   \   0000DA   7A00         MOV     R2,#0x0
   \   0000DC   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_10:
   \   0000DE                REQUIRE ?Subroutine2
   \   0000DE                ; // Fall through to label ?Subroutine2
    638          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET
    639          
    640          /*********************************************************************
    641           * Application Functions
    642           */
    643          
    644          /*********************************************************************
    645           * @fn      ZDOInitDevice
    646           *
    647           * @brief   Start the device in the network.  This function will read
    648           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    649           *   restore the network state of the device.
    650           *
    651           * @param   startDelay - timeDelay to start device (in milliseconds).
    652           *                       There is a jitter added to this delay:
    653           *                       ((NWK_START_DELAY + startDelay)
    654           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    655           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    656           *                       this function will hold the network init. Application
    657           *                       can start the device.
    658           *
    659           * NOTE:    If the application would like to force a "new" join, the
    660           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    661           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    662           *          this function. "new" join means to not restore the network
    663           *          state of the device. Use zgWriteStartupOptions() to set these
    664           *          options.
    665           *
    666           * @return
    667           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    668           *          restored.
    669           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    670           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    671           *          it could mean that there was no network state to restore.
    672           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    673           *          with the rejoin option set to TRUE.  So, the device was not
    674           *          started in the network (one time only).  The next time this
    675           *          function is called it will start.
    676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    678          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
    679            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \                     ??CrossCallReturnLabel_123:
   \   00000D   7E01         MOV     R6,#0x1
    680            uint16 extendedDelay = 0;
   \   00000F   75..00       MOV     ?V0,#0x0
   \   000012   75..00       MOV     ?V1,#0x0
    681          
    682            if ( devState == DEV_HOLD )
   \   000015   90....       MOV     DPTR,#devState
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7005         JNZ     ??ZDOInitDevice_0
    683            {
    684              // Initialize the RAM items table, in case an NV item has been updated.
    685              zgInitItems( FALSE );
   \   00001B                ; Setup parameters for call to function zgInitItems
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    686            }
    687          
    688            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000020                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000020   12....       LCALL   `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    689            //devtag.071807.todo - fix this temporary solution
    690            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000023   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000026   E0           MOVX    A,@DPTR
   \   000027   90....       MOV     DPTR,#_NIB + 14
   \   00002A   F0           MOVX    @DPTR,A
    691          
    692          #if defined ( NV_RESTORE )
    693            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    694            // while booting to skip past NV Restore.
    695            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   00002B   90....       MOV     DPTR,#zdappHoldKeys
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6404         XRL     A,#0x4
   \   000031   7076         JNZ     ??ZDOInitDevice_1
    696            {
    697              zdappHoldKeys = 0;   // Only once
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
    698              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    699            }
    700            else
    701            {
    702              // Determine if NV should be restored
    703              networkStateNV = ZDApp_ReadNetworkRestoreState();
    704            }
    705          
    706            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    707            {
    708              networkStateNV = ZDApp_RestoreNetworkState();
    709            }
    710            else
    711            {
    712              // Wipe out the network state in NV
    713              NLME_InitNV();
   \                     ??ZDOInitDevice_2:
   \   000035                ; Setup parameters for call to function NLME_InitNV
   \   000035   12....       LCALL   `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
    714              NLME_SetDefaultNV();
   \   000038                ; Setup parameters for call to function NLME_SetDefaultNV
   \   000038   12....       LCALL   `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
    715              // clear NWK key values
    716              ZDSecMgrClearNVKeyValues();
   \   00003B                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   00003B   12....       LCALL   `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
    717            }
    718          #endif
    719          
    720            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDevice_3:
   \   00003E   7401         MOV     A,#0x1
   \   000040   6E           XRL     A,R6
   \   000041   7021         JNZ     ??ZDOInitDevice_4
    721            {
    722              ZDAppDetermineDeviceType();
   \   000043                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000043   12....       LCALL   `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    723          
    724              // Only delay if joining network - not restoring network state
    725              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    726                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000046                ; Setup parameters for call to function osal_rand
   \   000046   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   EA           MOV     A,R2
   \   000050   547F         ANL     A,#0x7f
   \   000052   F8           MOV     R0,A
   \   000053   E0           MOVX    A,@DPTR
   \   000054   28           ADD     A,R0
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   3400         ADDC    A,#0x0
   \   00005A   F9           MOV     R1,A
   \   00005B   E8           MOV     A,R0
   \   00005C   2464         ADD     A,#0x64
   \   00005E   F5..         MOV     ?V0,A
   \   000060   E4           CLR     A
   \   000061   39           ADDC    A,R1
   \   000062   F5..         MOV     ?V1,A
    727            }
    728          
    729            // Initialize the security for type of device
    730            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDevice_4:
   \   000064                ; Setup parameters for call to function ZDApp_SecInit
   \   000064   EE           MOV     A,R6
   \   000065   F9           MOV     R1,A
   \   000066   12....       LCALL   `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    731          
    732            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F4           CPL     A
   \   000071   7003         JNZ     ??ZDOInitDevice_5
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F4           CPL     A
   \                     ??ZDOInitDevice_5:
   \   000076   6046         JZ      ??ZDOInitDevice_6
    733            {
    734              devState = DEV_INIT;    // Remove the Hold state
   \   000078   90....       MOV     DPTR,#devState
   \   00007B   7401         MOV     A,#0x1
   \   00007D   F0           MOVX    @DPTR,A
    735          
    736              // Initialize leave control logic
    737              ZDApp_LeaveCtrlInit();
   \   00007E                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00007E   12....       LCALL   `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    738          
    739              // Check leave control reset settings
    740              ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   000081                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   000081   AC..         MOV     R4,?XSP + 0
   \   000083   AD..         MOV     R5,?XSP + 1
   \   000085   7A..         MOV     R2,#devState & 0xff
   \   000087   7B..         MOV     R3,#(devState >> 8) & 0xff
   \   000089   12....       LCALL   `??ZDApp_LeaveCtrlStartup::?relay`; Banked call to: ZDApp_LeaveCtrlStartup
    741          
    742              // Leave may make the hold state come back
    743              if ( devState == DEV_HOLD )
   \   00008C   90....       MOV     DPTR,#devState
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   7025         JNZ     ??ZDOInitDevice_7
    744              {
    745                // Set the NV startup option to force a "new" join.
    746                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000092                ; Setup parameters for call to function zgWriteStartupOptions
   \   000092   7A02         MOV     R2,#0x2
   \   000094   79FF         MOV     R1,#-0x1
   \   000096   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    747          
    748                // Notify the applications
    749                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000099                ; Setup parameters for call to function osal_set_event
   \   000099   7A10         MOV     R2,#0x10
   \   00009B   7B00         MOV     R3,#0x0
   \   00009D   90....       MOV     DPTR,#ZDAppTaskID
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    750          
    751                return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \   0000A5   7902         MOV     R1,#0x2
   \   0000A7   801F         SJMP    ??ZDOInitDevice_8
    752              }
   \                     ??ZDOInitDevice_1:
   \   0000A9                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   0000A9   12....       LCALL   `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   0000AC   E9           MOV     A,R1
   \   0000AD   FE           MOV     R6,A
   \   0000AE   7085         JNZ     ??ZDOInitDevice_2
   \   0000B0                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   0000B0   12....       LCALL   `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
   \   0000B3   E9           MOV     A,R1
   \   0000B4   FE           MOV     R6,A
   \   0000B5   8087         SJMP    ??ZDOInitDevice_3
    753          
    754              // Trigger the network start
    755              ZDApp_NetworkInit( extendedDelay );
   \                     ??ZDOInitDevice_7:
   \   0000B7                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000B7   AA..         MOV     R2,?V0
   \   0000B9   AB..         MOV     R3,?V1
   \   0000BB   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    756            }
    757          
    758            // set broadcast address mask to support broadcast filtering
    759            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_6:
   \   0000BE                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   0000BE   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F9           MOV     R1,A
   \   0000C3   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    760          
    761            return ( networkStateNV );
   \   0000C6   EE           MOV     A,R6
   \   0000C7   F9           MOV     R1,A
   \                     ??ZDOInitDevice_8:
   \   0000C8   02....       LJMP    ?Subroutine8 & 0xFFFF
    762          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV     A,#0x2
   \   000002   80..         SJMP    ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine57_0
   \   000006                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    763          
    764          /*********************************************************************
    765           * @fn      ZDApp_ReadNetworkRestoreState
    766           *
    767           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    768           *          or not to restore the network state.
    769           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    770           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    771           *
    772           * @param   none
    773           *
    774           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    775           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    776           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    777           *          ZCD_NV_STARTUP_OPTION
    778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    780          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    781            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    782          
    783            // Look for the New Network State option.
    784            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000E   5002         JNC     ??ZDApp_ReadNetworkRestoreState_0
    785            {
    786              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV     R6,#0x1
    787            }
    788          
    789            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000012   EE           MOV     A,R6
   \   000013   F9           MOV     R1,A
   \   000014   02....       LJMP    ??Subroutine51_0 & 0xFFFF
    790          }
    791          
    792          /*********************************************************************
    793           * @fn      ZDAppDetermineDeviceType()
    794           *
    795           * @brief   Determines the type of device to start.
    796           *
    797           *          Looks at zgDeviceLogicalType and determines what type of
    798           *          device to start.  The types are:
    799           *            ZG_DEVICETYPE_COORDINATOR
    800           *            ZG_DEVICETYPE_ROUTER
    801           *            ZG_DEVICETYPE_ENDDEVICE
    802           *
    803           * @param   none
    804           *
    805           * @return  none
    806           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    807          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    808          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    809            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    810            {
    811              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    812              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   8030         SJMP    ??ZDAppDetermineDeviceType_1
    813            }
    814            else
    815            {
    816              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700B         JNZ     ??ZDAppDetermineDeviceType_2
    817                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   F0           MOVX    @DPTR,A
   \   000023   4401         ORL     A,#0x1
   \   000025   800E         SJMP    ??ZDAppDetermineDeviceType_3
    818              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6402         XRL     A,#0x2
   \   00002A   700A         JNZ     ??ZDAppDetermineDeviceType_4
    819                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   54F8         ANL     A,#0xf8
   \   000032   F0           MOVX    @DPTR,A
   \   000033   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000035   F0           MOVX    @DPTR,A
    820          
    821              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    822              // The device shall do rejoin the network. Otherwise, do normal join
    823              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000036                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000036   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000038   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003A   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003D   E9           MOV     A,R1
   \   00003E   90....       MOV     DPTR,#devStartMode
   \   000041   7003         JNZ     ??ZDAppDetermineDeviceType_5
    824              {
    825                devStartMode = MODE_JOIN;     // Assume joining
   \   000043   E4           CLR     A
   \   000044   8002         SJMP    ??ZDAppDetermineDeviceType_1
    826              }
    827              else
    828              {
    829                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000046   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_1:
   \   000048   F0           MOVX    @DPTR,A
    830              }
    831            }
    832          }
   \   000049   02....       LJMP    ??Subroutine48_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    833          
    834          /*********************************************************************
    835           * @fn      ZDApp_NetworkStartEvt()
    836           *
    837           * @brief   Process the Network Start Event
    838           *
    839           * @param   none
    840           *
    841           * @return  none
    842           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    843          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    844          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    845            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    846            {
    847              // Successfully started a ZigBee network
    848              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    849              {
    850                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    851              }
    852          
    853              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    854              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802E         SJMP    ??ZDApp_NetworkStartEvt_2
    855            }
    856            else
    857            {
    858              // Try again with a higher energy threshold
    859              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00001F   E9           MOV     A,R1
   \   000020   7900         MOV     R1,#0x0
   \   000022   2410         ADD     A,#0x10
   \   000024   5001         JNC     ??ZDApp_NetworkStartEvt_3
   \   000026   09           INC     R1
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000027   C3           CLR     C
   \   000028   94FF         SUBB    A,#-0x1
   \   00002A   E9           MOV     A,R1
   \   00002B   9400         SUBB    A,#0x0
   \   00002D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00002F   65D0         XRL     A,PSW
   \   000031   33           RLC     A
   \   000032   5010         JNC     ??ZDApp_NetworkStartEvt_4
    860              {
    861                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000034                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000034   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000037   E9           MOV     A,R1
   \   000038   F8           MOV     R0,A
   \   000039                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000039   7410         MOV     A,#0x10
   \   00003B   29           ADD     A,R1
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    862                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000040                ; Setup parameters for call to function osal_set_event
   \   000040   7A01         MOV     R2,#0x1
   \   000042   8008         SJMP    ??ZDApp_NetworkStartEvt_5
    863              }
    864              else
    865              {
    866                // Failed to start network. Enter a dormant state (until user intervenes)
    867                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000044   90....       MOV     DPTR,#devState
   \   000047   7401         MOV     A,#0x1
   \   000049   F0           MOVX    @DPTR,A
    868                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00004A                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00004A   7A10         MOV     R2,#0x10
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   90....       MOV     DPTR,#ZDAppTaskID
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    869              }
    870            }
    871          }
   \   000056   02....       LJMP    ??Subroutine48_0 & 0xFFFF
    872          
    873          /*********************************************************************
    874           * @fn      ZDApp_DeviceAuthEvt()
    875           *
    876           * @brief   Process the Device Authentic Event
    877           *
    878           * @param   none
    879           *
    880           * @return  none
    881           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    882          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    883          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    884            // received authentication from trust center
    885            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   703B         JNZ     ??ZDApp_DeviceAuthEvt_0
    886            {
    887              // Stop the reset timer so it doesn't reset
    888              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    889          
    890              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine10 & 0xFFFF
    891              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_64:
   \   000012   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    892          
    893              // Set the Power Manager Device
    894          #if defined ( POWER_SAVING )
    895              osal_pwrmgr_device( PWRMGR_BATTERY );
    896          #endif
    897          
    898              if ( ZSTACK_ROUTER_BUILD )
    899              {
    900                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000015   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000018   6009         JZ      ??ZDApp_DeviceAuthEvt_1
    901                {
    902                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    903                  NLME_StartRouterRequest( 0, 0, false );
   \   00001A                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   7A00         MOV     R2,#0x0
   \   00001E   7900         MOV     R1,#0x0
   \   000020   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
    904                }
    905              }
    906          
    907              // Notify to save info into NV
    908              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000023                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000023   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    909          
    910              // Save off the security
    911              ZDApp_SaveNwkKey();
   \   000026                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000026   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    912          
    913              ZDApp_AnnounceNewAddress();
   \   000029                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000029   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
    914          
    915              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    916                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    917          #if defined ( ZIGBEE_CHILD_AGING )
    918                    && (zgChildAgingEnable == TRUE)
    919          #endif // ZIGBEE_CHILD_AGING
    920                       ) )
   \   00002C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   A2E3         MOV     C,0xE0 /* A   */.3
   \   000032   5008         JNC     ??ZDApp_DeviceAuthEvt_2
   \   000034   90....       MOV     DPTR,#zgChildAgingEnable
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6401         XRL     A,#0x1
   \   00003A   700E         JNZ     ??ZDApp_DeviceAuthEvt_3
    921              {
    922                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   00003C                ; Setup parameters for call to function NLME_SetPollRate
   \   00003C   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00003F   12....       LCALL   ??Subroutine47_0 & 0xFFFF
    923              }
    924            }
   \                     ??CrossCallReturnLabel_68:
   \   000042   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000045   8003         SJMP    ??ZDApp_DeviceAuthEvt_3
    925            else
    926            {
    927              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000047                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000047   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    928            }
    929          }
   \                     ??ZDApp_DeviceAuthEvt_3:
   \   00004A   02....       LJMP    ??Subroutine48_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   7406         MOV     A,#0x6
   \   000005                REQUIRE ??Subroutine46_0
   \   000005                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX    A,@DPTR
   \   000004   5407         ANL     A,#0x7
   \   000006   6402         XRL     A,#0x2
   \   000008   22           RET
    930          
    931          /*********************************************************************
    932           * @fn      ZDApp_SaveNetworkStateEvt()
    933           *
    934           * @brief   Process the Save the Network State Event
    935           *
    936           * @param   none
    937           *
    938           * @return  none
    939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    940          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    941          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    942          #if defined ( NV_RESTORE )
    943           #if defined ( NV_TURN_OFF_RADIO )
    944            // Turn off the radio's receiver during an NV update
    945            uint8 RxOnIdle;
    946            uint8 x = false;
    947            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    948            ZMacSetReq( ZMacRxOnIdle, &x );
    949           #endif
    950          
    951            // Update the Network State in NV
    952            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    953                           NWK_NV_DEVICELIST_ENABLE |
    954                           NWK_NV_BINDING_ENABLE    |
    955                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV     R1,#0xf
   \   000006   12....       LCALL   `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
    956          
    957            // Reset the NV startup option to resume from NV by
    958            // clearing the "New" join option.
    959            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV     R2,#0x2
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    960          
    961           #if defined ( NV_TURN_OFF_RADIO )
    962            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    963           #endif
    964          #endif // NV_RESTORE
    965          }
   \   000010   02....       LJMP    ??Subroutine48_0 & 0xFFFF
    966          
    967          #if defined ( NV_RESTORE )
    968          /*********************************************************************
    969           * @fn      ZDApp_RestoreNetworkState()
    970           *
    971           * @brief   This function will restore the network state of the
    972           *          device if the network state is stored in NV.
    973           *
    974           * @param   none
    975           *
    976           * @return
    977           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    978           *          restored.
    979           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    980           *          This could mean that zgStartupOption said to not restore, or
    981           *          it could mean that there was no network state to restore.
    982           *
    983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    984          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    985          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    986            uint8 nvStat;
    987          
    988            // Initialize NWK NV items
    989            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    990          
    991            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   6044         JZ      ??ZDApp_RestoreNetworkState_0
    992            {
    993              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   000012   E9           MOV     A,R1
   \   000013   602B         JZ      ??ZDApp_RestoreNetworkState_1
    994              {
    995                // Are we a coordinator
    996                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL   ??Subroutine57_0 & 0xFFFF
    997                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_119:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000024   7007         JNZ     ??ZDApp_RestoreNetworkState_2
    998                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000026   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   54F8         ANL     A,#0xf8
   \   00002C   F0           MOVX    @DPTR,A
    999                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   00002D   90....       MOV     DPTR,#devStartMode
   \   000030   7401         MOV     A,#0x1
   \   000032   F0           MOVX    @DPTR,A
   1000                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000035   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000037   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000039   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00003B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003E   8002         SJMP    ??ZDApp_RestoreNetworkState_3
   1001              }
   1002              else
   1003                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000040   7E09         MOV     R6,#0x9
   1004          
   1005              if ( ZG_SECURE_ENABLED )
   1006              {
   1007                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   000042   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000045   E4           CLR     A
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   F0           MOVX    @DPTR,A
   1008          
   1009                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1010                {
   1011                  ZDApp_RestoreNwkKey();
   \   000049                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000049   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   1012                }
   1013              }
   1014          
   1015              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1016              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1017              // other than default.
   1018            }
   1019          
   1020            if ( nvStat == ZSUCCESS )
   \   00004C   EE           MOV     A,R6
   \   00004D   7004         JNZ     ??ZDApp_RestoreNetworkState_0
   1021              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00004F   7900         MOV     R1,#0x0
   \   000051   8002         SJMP    ??ZDApp_RestoreNetworkState_4
   1022            else
   1023              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000053   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_4:
   \   000055   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   1024          }
   1025          #endif // NV_RESTORE
   1026          
   1027          /*********************************************************************
   1028           * @fn      ZDApp_InitUserDesc()
   1029           *
   1030           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1031           *          when needed.  If you want to initialize the User descriptor to
   1032           *          something other than all zero, do it here.
   1033           *
   1034           * @param   none
   1035           *
   1036           * @return  none
   1037           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1038          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1039          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1040            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1041          
   1042            // Initialize the User Descriptor, the descriptor is read from NV
   1043            // when needed.  If you want to initialize the User descriptor to something
   1044            // other than all zero, do it here.
   1045            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1046            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1047                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV     R4,#0x11
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A81         MOV     R2,#-0x7f
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   7033         JNZ     ??ZDApp_InitUserDesc_0
   1048            {
   1049              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1050                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..11       MOV     ?V0,#0x11
   \   00003F   75..00       MOV     ?V1,#0x0
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   7C00         MOV     R4,#0x0
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7A81         MOV     R2,#-0x7f
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   E9           MOV     A,R1
   \   000058   7010         JNZ     ??ZDApp_InitUserDesc_0
   1051              {
   1052                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6007         JZ      ??ZDApp_InitUserDesc_0
   1053                {
   1054                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000063   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000066   E0           MOVX    A,@DPTR
   \   000067   D2E4         SETB    0xE0 /* A   */.4
   \   000069   F0           MOVX    @DPTR,A
   1055                }
   1056              }
   1057            }
   1058          }
   \                     ??ZDApp_InitUserDesc_0:
   \   00006A   7411         MOV     A,#0x11
   \   00006C   02....       LJMP    ??Subroutine49_0 & 0xFFFF
   1059          
   1060          /*********************************************************************
   1061           * @fn      ZDAppCheckForHoldKey()
   1062           *
   1063           * @brief   Check for key to set the device into Hold Auto Start
   1064           *
   1065           * @param   none
   1066           *
   1067           * @return  none
   1068           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1069          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1070          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1071          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1072            
   1073            // Get Keypad directly to see if a HOLD is needed
   1074            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV     A,R1
   \   000008   90....       MOV     DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX    @DPTR,A
   1075            
   1076            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1077            // while booting to avoid starting up the device.
   1078            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   6401         XRL     A,#0x1
   \   00000E   7005         JNZ     ??ZDAppCheckForHoldKey_0
   1079            {
   1080              // Change the device state to HOLD on start up
   1081              devState = DEV_HOLD;
   \   000010   90....       MOV     DPTR,#devState
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1082            }
   1083          #endif // HAL_KEY
   1084          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000015   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   1085          
   1086          /*********************************************************************
   1087           * @fn      ZDApp_ProcessOSALMsg()
   1088           *
   1089           * @brief   Process the incoming task message.
   1090           *
   1091           * @param   msgPtr - message to process
   1092           *
   1093           * @return  none
   1094           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1095          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1096          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1097            // Data Confirmation message fields
   1098            uint8 sentEP;       // This should always be 0
   1099            uint8 sentStatus;
   1100            afDataConfirm_t *afDataConfirm;
   1101            uint8 tmp;
   1102          
   1103            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   14           DEC     A
   \   00000A   6031         JZ      ??ZDApp_ProcessOSALMsg_0
   \   00000C   14           DEC     A
   \   00000D   602E         JZ      ??ZDApp_ProcessOSALMsg_0
   \   00000F   14           DEC     A
   \   000010   602B         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000012   24E9         ADD     A,#-0x17
   \   000014   600A         JZ      ??ZDApp_ProcessOSALMsg_1
   \   000016   2447         ADD     A,#0x47
   \   000018   600B         JZ      ??ZDApp_ProcessOSALMsg_2
   \   00001A   24D6         ADD     A,#-0x2a
   \   00001C   600C         JZ      ??ZDApp_ProcessOSALMsg_3
   \   00001E   801A         SJMP    ??ZDApp_ProcessOSALMsg_4
   1104            {
   1105              // Incoming ZDO Message
   1106              case AF_INCOMING_MSG_CMD:
   1107                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000020                ; Setup parameters for call to function ZDP_IncomingData
   \   000020   12....       LCALL   `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1108                break;
   \   000023   8018         SJMP    ??ZDApp_ProcessOSALMsg_0
   1109          
   1110              case ZDO_CB_MSG:
   1111                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000025                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000025   12....       LCALL   `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1112                break;
   \   000028   8013         SJMP    ??ZDApp_ProcessOSALMsg_0
   1113          
   1114              case AF_DATA_CONFIRM_CMD:
   1115                // This message is received as a confirmation of a data packet sent.
   1116                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1117                // The message fields are defined in AF.h
   1118                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1119                sentEP = afDataConfirm->endpoint;
   1120                sentStatus = afDataConfirm->hdr.status;
   1121          
   1122                // Action taken when confirmation is received.
   1123          #if defined ( ZIGBEE_FREQ_AGILITY )
   1124                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   00002A   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00002D   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000030   600B         JZ      ??ZDApp_ProcessOSALMsg_0
   1125                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   000032                ; Setup parameters for indirect call
   \   000032   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000035   12....       LCALL   ?CALL_IND
   \   000038   8003         SJMP    ??ZDApp_ProcessOSALMsg_0
   1126          #endif
   1127                (void)sentEP;
   1128                (void)sentStatus;
   1129                break;
   1130          
   1131              case ZDO_NWK_DISC_CNF:
   1132                if (devState != DEV_NWK_DISC)
   1133                  break;
   1134          
   1135                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1136                {
   1137                  // Process the network discovery scan results and choose a parent
   1138                  // device to join/rejoin itself
   1139                  networkDesc_t *pChosenNwk;
   1140                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   1141                  {
   1142                    if ( devStartMode == MODE_JOIN )
   1143                    {
   1144                      devState = DEV_NWK_JOINING;
   1145          
   1146                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   1147          
   1148                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1149                                            pChosenNwk->logicalChannel,
   1150                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1151                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   1152                      {
   1153                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1154                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1155                      }
   1156                    } // if ( devStartMode == MODE_JOIN )
   1157                    else if ( devStartMode == MODE_REJOIN )
   1158                    {
   1159                      ZStatus_t rejoinStatus;
   1160          
   1161                      devState = DEV_NWK_REJOIN;
   1162          
   1163                      // Before trying to do rejoin, check if the device has a valid short address
   1164                      // If not, generate a random short address for itself
   1165                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   1166                      {
   1167                        uint16 commNwkAddr;
   1168          
   1169                        // Verify if the Network address has been commissioned by external tool
   1170                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1171                                           sizeof(commNwkAddr),
   1172                                           (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1173                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   1174                        {
   1175                          _NIB.nwkDevAddress = commNwkAddr;
   1176          
   1177                          // clear Allocate address bit because device has a commissioned address
   1178                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   1179                        }
   1180                        else
   1181                        {
   1182                          _NIB.nwkDevAddress = osal_rand();
   1183                        }
   1184          
   1185                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   1186                      }
   1187          
   1188                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1189                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   1190                      {
   1191                        _NIB.nwkPanId = pChosenNwk->panId;
   1192                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   1193                      }
   1194          
   1195                      tmp = true;
   1196                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   1197          
   1198                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1199                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == TRUE ) )
   1200                      {
   1201                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   1202                      }
   1203                      else
   1204                      {
   1205                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   1206                      }
   1207          
   1208                      if ( rejoinStatus != ZSuccess )
   1209                      {
   1210                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1211                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1212                      }
   1213                    } // else if ( devStartMode == MODE_REJOIN )
   1214          
   1215                    // The receiver is on, turn network layer polling off.
   1216                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   1217                    {
   1218                      // for an End Device with NO Child Table Management process or for a Router
   1219                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1220          #if defined ( ZIGBEE_CHILD_AGING )
   1221                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   1222          #else
   1223                           (ZG_DEVICE_ENDDEVICE_TYPE) )
   1224          #endif // ZIGBEE_CHILD_AGING
   1225                      {
   1226                        NLME_SetPollRate( 0 );
   1227                        NLME_SetQueuedPollRate( 0 );
   1228                        NLME_SetResponseRate( 0 );
   1229                      }
   1230                    }
   1231                    else
   1232                    {
   1233                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1234                      {
   1235                        ZDApp_SavedPollRate = zgPollRate;
   1236                        NLME_SetPollRate( zgRejoinPollRate );
   1237                      }
   1238                    }
   1239                  }
   1240                  else
   1241                  {
   1242                    if ( continueJoining )
   1243                    {
   1244              #if defined ( MANAGED_SCAN )
   1245                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1246              #else
   1247                      zdoDiscCounter++;
   1248                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1249                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   1250              #endif
   1251                    }
   1252                  }
   1253                }
   1254                break;
   1255          
   1256              case ZDO_NWK_JOIN_IND:
   1257                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1258                {
   1259                  ZDApp_ProcessNetworkJoin();
   1260                }
   1261                break;
   1262          
   1263              case ZDO_NWK_JOIN_REQ:
   1264                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1265                {
   1266                  retryCnt = 0;
   1267                  devStartMode = MODE_RESUME;
   1268                  _tmpRejoinState = true;
   1269                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1270                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   1271                  ZDApp_NetworkInit( 0 );
   1272                }
   1273                break;
   1274          
   1275              default:
   1276                if ( ZG_SECURE_ENABLED )
   1277                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   00003A                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   00003A   12....       LCALL   `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1278                break;
   1279            }
   1280          
   1281          }
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00003D   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   1282          
   1283          /*********************************************************************
   1284           * @fn      ZDApp_ProcessMsgCBs()
   1285           *
   1286           * @brief   Process response messages
   1287           *
   1288           * @param   none
   1289           *
   1290           * @return  none
   1291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1292          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV     A,#-0x2c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1294            switch ( inMsg->clusterID )
   \   00000E   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000011   F5..         MOV     ?V1,A
   \   000013   78..         MOV     R0,#?V0
   \   000015   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000018   0300         DW        3
   \   00001A   2100         DW        33
   \   00001C   2200         DW        34
   \   00001E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000020   0080         DW        32768
   \   000022   0180         DW        32769
   \   000024   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000026   2180         DW        32801
   \   000028   2280         DW        32802
   \   00002A   ....         DW        ??ZDApp_ProcessMsgCBs_2
   \   00002C   0100         DW        1
   \   00002E   2000         DW        32
   \   000030   ....         DW        ??ZDApp_ProcessMsgCBs_3
   \   000032   ....         DW        ??ZDApp_ProcessMsgCBs_4
   1295            {
   1296          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1297              case NWK_addr_rsp:
   1298              case IEEE_addr_rsp:
   1299                {
   1300                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1301          
   1302                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   000034                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000034   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000037   8A..         MOV     ?V0,R2
   \   000039   8B..         MOV     ?V1,R3
   1303                  if ( pAddrRsp )
   \   00003B   EA           MOV     A,R2
   \   00003C   45..         ORL     A,?V1
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1304                  {
   1305                    if ( pAddrRsp->status == ZSuccess )
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   E0           MOVX    A,@DPTR
   \   000048   700F         JNZ     ??ZDApp_ProcessMsgCBs_5
   1306                    {
   1307                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   00004A                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   00004A   EA           MOV     A,R2
   \   00004B   2403         ADD     A,#0x3
   \   00004D   FC           MOV     R4,A
   \   00004E   E4           CLR     A
   \   00004F   35..         ADDC    A,?V1
   \   000051   FD           MOV     R5,A
   \   000052   A3           INC     DPTR
   \   000053   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   1308                    }
   \                     ??CrossCallReturnLabel_69:
   \   000056   12....       LCALL   `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1309          
   1310          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1311                    // look for pending bind entry for NWK_addr_rsp Only
   1312                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000059   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00005C   7004         JNZ     ??ZDApp_ProcessMsgCBs_6
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_6:
   \   000062   700C         JNZ     ??ZDApp_ProcessMsgCBs_7
   1313                    {
   1314          #if defined ( REFLECTOR )
   1315                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   000064                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   000064   E5..         MOV     A,?V0
   \   000066   2403         ADD     A,#0x3
   \   000068   FA           MOV     R2,A
   \   000069   E4           CLR     A
   \   00006A   35..         ADDC    A,?V1
   \   00006C   FB           MOV     R3,A
   \   00006D   12....       LCALL   `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
   1316          #endif
   1317                    }
   1318          #endif
   1319          
   1320                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_7:
   \   000070                ; Setup parameters for call to function osal_mem_free
   \   000070   AA..         MOV     R2,?V0
   \   000072   AB..         MOV     R3,?V1
   \   000074   8075         SJMP    ??CrossCallReturnLabel_71
   1321                  }
   1322                }
   1323                break;
   1324          #endif
   1325          
   1326          #if defined ( REFLECTOR )
   1327              case Bind_req:
   1328              case Unbind_req:
   1329                {
   1330                  ZDO_BindUnbindReq_t bindReq;
   1331                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000076                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000076   7417         MOV     A,#0x17
   \   000078   12....       LCALL   ?XSTACK_DISP102_8
   \   00007B   12....       LCALL   `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1332                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   00007E                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   00007E   7417         MOV     A,#0x17
   \   000080   12....       LCALL   ?XSTACK_DISP102_8
   \   000083   EE           MOV     A,R6
   \   000084   FA           MOV     R2,A
   \   000085   EF           MOV     A,R7
   \   000086   FB           MOV     R3,A
   \   000087   12....       LCALL   `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1333                }
   1334                break;
   \   00008A   8062         SJMP    ??ZDApp_ProcessMsgCBs_4
   1335          #endif
   1336          
   1337          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1338              case Bind_rsp:
   1339              case Unbind_rsp:
   1340                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00008C   90....       MOV     DPTR,#matchED
   \   00008F   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000092   605A         JZ      ??ZDApp_ProcessMsgCBs_4
   1341                {
   1342                  ZDMatchSendState(
   1343                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1344                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   \   000094   12....       LCALL   ?Subroutine32 & 0xFFFF
   1345                }
   \                     ??CrossCallReturnLabel_33:
   \   000097   6421         XRL     A,#0x21
   \   000099   7004         JNZ     ??ZDApp_ProcessMsgCBs_8
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_8:
   \   00009F   7004         JNZ     ??ZDApp_ProcessMsgCBs_9
   \   0000A1   7903         MOV     R1,#0x3
   \   0000A3   8002         SJMP    ??ZDApp_ProcessMsgCBs_10
   \                     ??ZDApp_ProcessMsgCBs_9:
   \   0000A5   7902         MOV     R1,#0x2
   \                     ??ZDApp_ProcessMsgCBs_10:
   \   0000A7                ; Setup parameters for call to function ZDMatchSendState
   \   0000A7   EE           MOV     A,R6
   \   0000A8   240F         ADD     A,#0xf
   \   0000AA   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000AD   FB           MOV     R3,A
   \   0000AE   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000B1   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000B4   FA           MOV     R2,A
   \   0000B5   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   0000B8   8034         SJMP    ??ZDApp_ProcessMsgCBs_4
   1346                break;
   1347          
   1348              case End_Device_Bind_req:
   1349                if (ZG_DEVICE_COORDINATOR_TYPE)
   1350                {
   1351                  ZDEndDeviceBind_t bindReq;
   1352                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   0000BA                ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
   \   0000BA   AC..         MOV     R4,?XSP + 0
   \   0000BC   AD..         MOV     R5,?XSP + 1
   \   0000BE   12....       LCALL   `??ZDO_ParseEndDeviceBindReq::?relay`; Banked call to: ZDO_ParseEndDeviceBindReq
   1353                  ZDO_MatchEndDeviceBind( &bindReq );
   \   0000C1                ; Setup parameters for call to function ZDO_MatchEndDeviceBind
   \   0000C1   AA..         MOV     R2,?XSP + 0
   \   0000C3   AB..         MOV     R3,?XSP + 1
   \   0000C5   12....       LCALL   `??ZDO_MatchEndDeviceBind::?relay`; Banked call to: ZDO_MatchEndDeviceBind
   1354          
   1355                  // Freeing the cluster lists - if allocated.
   1356                  if ( bindReq.numInClusters )
   \   0000C8   7411         MOV     A,#0x11
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   600B         JZ      ??ZDApp_ProcessMsgCBs_11
   1357                    osal_mem_free( bindReq.inClusters );
   \   0000D0                ; Setup parameters for call to function osal_mem_free
   \   0000D0   7412         MOV     A,#0x12
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000D8   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1358                  if ( bindReq.numOutClusters )
   \                     ??ZDApp_ProcessMsgCBs_11:
   \   0000DB   7414         MOV     A,#0x14
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   600B         JZ      ??ZDApp_ProcessMsgCBs_4
   1359                    osal_mem_free( bindReq.outClusters );
   \   0000E3                ; Setup parameters for call to function osal_mem_free
   \   0000E3   7415         MOV     A,#0x15
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   1360                }
   1361                break;
   1362          #endif
   1363            }
   \                     ??CrossCallReturnLabel_71:
   \   0000EB   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1364          }
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   0000EE   742C         MOV     A,#0x2c
   \   0000F0   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   F5..         MOV     ?V0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine59_0
   \   000003                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1365          
   1366          /*********************************************************************
   1367           * @fn      ZDApp_RegisterCBs()
   1368           *
   1369           * @brief   Process response messages
   1370           *
   1371           * @param   none
   1372           *
   1373           * @return  none
   1374           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1375          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1376          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1377          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1378            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1379          #endif
   1380          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1381            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7B80         MOV     R3,#-0x80
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1382          #endif
   1383          #if ZG_BUILD_COORDINATOR_TYPE
   1384            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV     R2,#0x21
   \   00001E   7B80         MOV     R3,#-0x80
   \   000020   90....       MOV     DPTR,#ZDAppTaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1385            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV     R2,#0x22
   \   00002A   7B80         MOV     R3,#-0x80
   \   00002C   90....       MOV     DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1386            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   \   000034                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000034   7A20         MOV     R2,#0x20
   \   000036   7B00         MOV     R3,#0x0
   \   000038   90....       MOV     DPTR,#ZDAppTaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1387          #endif
   1388          #if defined ( REFLECTOR )
   1389            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   000040                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000040   7A21         MOV     R2,#0x21
   \   000042   7B00         MOV     R3,#0x0
   \   000044   90....       MOV     DPTR,#ZDAppTaskID
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1390            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   00004C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00004C   7A22         MOV     R2,#0x22
   \   00004E   7B00         MOV     R3,#0x0
   \   000050   90....       MOV     DPTR,#ZDAppTaskID
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1391          #endif
   1392          }
   \   000058   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   1393          
   1394          /*********************************************************************
   1395           * @fn      ZDApp_ProcessSecMsg()
   1396           *
   1397           * @brief   Process the incoming security message.
   1398           *
   1399           * @param   msgPtr - message to process
   1400           *
   1401           * @return  none
   1402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1403          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1404          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1405            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6405         XRL     A,#0x5
   \   00000B   7003         JNZ     ??ZDApp_ProcessSecMsg_0
   1406            {
   1407              case ZDO_TRANSPORT_KEY_IND:
   1408                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1409                {
   1410                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   1411                }
   1412                break;
   1413          
   1414              case ZDO_UPDATE_DEVICE_IND:
   1415                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1416                {
   1417                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   \   00000D                ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
   \   00000D   12....       LCALL   `??ZDSecMgrUpdateDeviceInd::?relay`; Banked call to: ZDSecMgrUpdateDeviceInd
   1418                }
   1419                break;
   1420          
   1421              case ZDO_REMOVE_DEVICE_IND:
   1422                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1423                {
   1424                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1425                }
   1426                break;
   1427          
   1428              case ZDO_REQUEST_KEY_IND:
   1429                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1430                {
   1431                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1432                  {
   1433                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1434                  }
   1435                }
   1436                break;
   1437          
   1438              case ZDO_SWITCH_KEY_IND:
   1439                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1440                {
   1441                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   1442                }
   1443                break;
   1444          
   1445              default:
   1446                // Unsupported messages
   1447                break;
   1448            }
   1449          }
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000010   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   1450          
   1451          /*********************************************************************
   1452           * @fn      ZDApp_ProcessNetworkJoin()
   1453           *
   1454           * @brief
   1455           *
   1456           *   Save off the Network key information.
   1457           *
   1458           * @param   none
   1459           *
   1460           * @return  none
   1461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1462          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1463          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1464            if ( (devState == DEV_NWK_JOINING) ||
   1465                ((devState == DEV_NWK_ORPHAN)  &&
   1466                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1467            {
   1468              // Result of a Join attempt by this device.
   1469              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   704C         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1470              {
   1471                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A10         MOV     R2,#0x10
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1472          
   1473          #if defined ( POWER_SAVING )
   1474                osal_pwrmgr_device( PWRMGR_BATTERY );
   1475          #endif
   1476          
   1477                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   \   000039                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000039   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00003C   E9           MOV     A,R1
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1478                {
   1479                  // wait for auth from trust center
   1480                  devState = DEV_END_DEVICE_UNAUTH;
   1481          
   1482                  // Start the reset timer for MAX UNAUTH time
   1483                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1484                }
   1485                else
   1486                {
   1487                  if ( ZSTACK_ROUTER_BUILD )
   1488                  {
   1489                    if ( devState == DEV_NWK_ORPHAN
   1490                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000042   90....       MOV     DPTR,#devState
   \   000045   E0           MOVX    A,@DPTR
   \   000046   640A         XRL     A,#0xa
   \   000048   700D         JNZ     ??ZDApp_ProcessNetworkJoin_5
   \   00004A   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00004D   6010         JZ      ??ZDApp_ProcessNetworkJoin_6
   1491                    {
   1492                      // Change NIB state to router for restore
   1493                      _NIB.nwkState = NWK_ROUTER;
   \   00004F   90....       MOV     DPTR,#_NIB + 35
   \   000052   7408         MOV     A,#0x8
   \   000054   F0           MOVX    @DPTR,A
   \   000055   8008         SJMP    ??ZDApp_ProcessNetworkJoin_6
   1494                    }
   1495                  }
   1496          
   1497                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6403         XRL     A,#0x3
   \   00005A   7003         JNZ     ??ZDApp_ProcessNetworkJoin_6
   1498                  {
   1499                    ZDApp_AnnounceNewAddress();
   \   00005C                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00005C   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1500                  }
   1501          
   1502                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00005F   90....       MOV     DPTR,#devState
   \   000062   7406         MOV     A,#0x6
   \   000064   F0           MOVX    @DPTR,A
   1503                  if ( ZSTACK_ROUTER_BUILD )
   1504                  {
   1505                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1506                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000065   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000068   7003         JNZ     $+5
   \   00006A   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1507                    {
   1508                      NLME_StartRouterRequest( 0, 0, false );
   \   00006D                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00006D   7B00         MOV     R3,#0x0
   \   00006F   7A00         MOV     R2,#0x0
   \   000071   7900         MOV     R1,#0x0
   \   000073   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   000076   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1509                    }
   1510                  }
   1511                }
   1512              }
   1513              else
   1514              {
   1515                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000079   90....       MOV     DPTR,#devStartMode
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   6401         XRL     A,#0x1
   \   00007F   7036         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   000081   90....       MOV     DPTR,#retryCnt
   \   000084   E0           MOVX    A,@DPTR
   \   000085   04           INC     A
   \   000086   F0           MOVX    @DPTR,A
   \   000087   C3           CLR     C
   \   000088   9403         SUBB    A,#0x3
   \   00008A   402B         JC      ??ZDApp_ProcessNetworkJoin_8
   1516                {
   1517                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   00008C   90....       MOV     DPTR,#_NIB + 33
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F4           CPL     A
   \   000091   7003         JNZ     ??ZDApp_ProcessNetworkJoin_9
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000096   600D         JZ      ??ZDApp_ProcessNetworkJoin_10
   \   000098   90....       MOV     DPTR,#_NIB + 33
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   64FE         XRL     A,#0xfe
   \   00009E   7003         JNZ     ??ZDApp_ProcessNetworkJoin_11
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000A3   7006         JNZ     ??ZDApp_ProcessNetworkJoin_12
   1518                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000A5   90....       MOV     DPTR,#devStartMode
   \   0000A8   E4           CLR     A
   \   0000A9   800B         SJMP    ??ZDApp_ProcessNetworkJoin_13
   1519                  else
   1520                  {
   1521                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000AB   90....       MOV     DPTR,#devStartMode
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   F0           MOVX    @DPTR,A
   1522                    _tmpRejoinState = true;
   \   0000B1   90....       MOV     DPTR,#_tmpRejoinState
   \   0000B4   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000B6   F0           MOVX    @DPTR,A
   1523                  }
   1524                }
   1525          
   1526                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1527                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   0000B7                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000B7   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000BA   8A..         MOV     ?V0,R2
   \   0000BC   8B..         MOV     ?V1,R3
   \   0000BE   74FE         MOV     A,#-0x2
   \   0000C0   65..         XRL     A,?V0
   \   0000C2   7004         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   0000C4   74FF         MOV     A,#-0x1
   \   0000C6   65..         XRL     A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000C8   700D         JNZ     ??ZDApp_ProcessNetworkJoin_15
   \   0000CA   90....       MOV     DPTR,#_NIB + 20
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   64FE         XRL     A,#0xfe
   \   0000D0   7003         JNZ     ??ZDApp_ProcessNetworkJoin_16
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   0000D5   601B         JZ      ??ZDApp_ProcessNetworkJoin_17
   1528                {
   1529                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000D7   85..82       MOV     DPL,?XSP + 0
   \   0000DA   85..83       MOV     DPH,?XSP + 1
   \   0000DD   74FE         MOV     A,#-0x2
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   04           INC     A
   \   0000E2   F0           MOVX    @DPTR,A
   1530                  // Invalidate nwk addr so end device does not use in its data reqs.
   1531                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000E3   90....       MOV     DPTR,#_NIB + 20
   \   0000E6   14           DEC     A
   \   0000E7   F0           MOVX    @DPTR,A
   \   0000E8   A3           INC     DPTR
   \   0000E9   04           INC     A
   \   0000EA   12....       LCALL   ?Subroutine14 & 0xFFFF
   1532                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   1533                }
   \                     ??CrossCallReturnLabel_5:
   \   0000ED   7953         MOV     R1,#0x53
   \   0000EF   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1534          
   1535                // Clear the neighbor Table and network discovery tables.
   1536                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   0000F2                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000F2   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1537                NLME_NwkDiscTerm();
   \   0000F5                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000F5   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1538          
   1539                zdoDiscCounter = 1;
   \   0000F8   90....       MOV     DPTR,#zdoDiscCounter
   \   0000FB   7401         MOV     A,#0x1
   \   0000FD   F0           MOVX    @DPTR,A
   1540          
   1541          //      ZDApp_NetworkInit( (uint16)
   1542          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1543          //                          (NWK_START_DELAY * 5)) );
   1544                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1545                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000FE                ; Setup parameters for call to function osal_rand
   \   0000FE   02....       LJMP    ??ZDApp_ProcessNetworkJoin_18 & 0xFFFF
   1546              }
   1547            }
   1548            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   000101   E0           MOVX    A,@DPTR
   \   000102   6404         XRL     A,#0x4
   \   000104   6003         JZ      $+5
   \   000106   02....       LJMP    ??ZDApp_ProcessNetworkJoin_19 & 0xFFFF
   1549            {
   1550              // results of an orphaning attempt by this device
   1551              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   000109   90....       MOV     DPTR,#nwkStatus
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   705E         JNZ     ??ZDApp_ProcessNetworkJoin_20
   1552              {
   1553                // Verify NWK key is available before sending Device_annce
   1554                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   \   00010F                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00010F   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000112   E9           MOV     A,R1
   \   000113   701C         JNZ     ??ZDApp_ProcessNetworkJoin_21
   1555                {
   1556                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000115                ; Setup parameters for call to function osal_set_event
   \   000115   7A10         MOV     R2,#0x10
   \   000117   7B00         MOV     R3,#0x0
   \   000119   90....       MOV     DPTR,#ZDAppTaskID
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   F9           MOV     R1,A
   \   00011E   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1557          
   1558                  // wait for auth from trust center
   1559                  devState = DEV_END_DEVICE_UNAUTH;
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000121   90....       MOV     DPTR,#devState
   \   000124   7405         MOV     A,#0x5
   \   000126   F0           MOVX    @DPTR,A
   1560          
   1561                  // Start the reset timer for MAX UNAUTH time
   1562                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   000127                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000127   7A10         MOV     R2,#0x10
   \   000129   7B27         MOV     R3,#0x27
   \   00012B   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   00012E   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1563                }
   1564                else
   1565                {
   1566          
   1567                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000131   12....       LCALL   ?Subroutine10 & 0xFFFF
   1568                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_65:
   \   000134   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1569                  // setup Power Manager Device
   1570          #if defined ( POWER_SAVING )
   1571                  osal_pwrmgr_device( PWRMGR_BATTERY );
   1572          #endif
   1573          
   1574                  // The receiver is on, turn network layer polling off.
   1575                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000137   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   A2E3         MOV     C,0xE0 /* A   */.3
   \   00013D   501B         JNC     ??ZDApp_ProcessNetworkJoin_22
   1576                  {
   1577          #if defined ( ZIGBEE_CHILD_AGING )
   1578                    // if Child Table Management process is not enabled
   1579                    if ( zgChildAgingEnable == FALSE )
   \   00013F   90....       MOV     DPTR,#zgChildAgingEnable
   \   000142   E0           MOVX    A,@DPTR
   \   000143   7015         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1580          #endif // ZIGBEE_CHILD_AGING
   1581                    {
   1582                      NLME_SetPollRate( 0 );
   \   000145                ; Setup parameters for call to function NLME_SetPollRate
   \   000145   7A00         MOV     R2,#0x0
   \   000147   7B00         MOV     R3,#0x0
   \   000149   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1583                      NLME_SetQueuedPollRate( 0 );
   \   00014C                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00014C   7A00         MOV     R2,#0x0
   \   00014E   7B00         MOV     R3,#0x0
   \   000150   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1584                      NLME_SetResponseRate( 0 );
   \   000153                ; Setup parameters for call to function NLME_SetResponseRate
   \   000153   7A00         MOV     R2,#0x0
   \   000155   7B00         MOV     R3,#0x0
   \   000157   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1585                    }
   1586                  }
   1587          
   1588                  if ( ZSTACK_ROUTER_BUILD )
   1589                  {
   1590                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1591                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   00015A   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00015D   6009         JZ      ??ZDApp_ProcessNetworkJoin_23
   1592                    {
   1593                      NLME_StartRouterRequest( 0, 0, false );
   \   00015F                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00015F   7B00         MOV     R3,#0x0
   \   000161   7A00         MOV     R2,#0x0
   \   000163   7900         MOV     R1,#0x0
   \   000165   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   1594                    }
   1595                  }
   1596          
   1597                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000168                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000168   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   00016B   8073         SJMP    ??ZDApp_ProcessNetworkJoin_7
   1598                }
   1599              }
   1600              else
   1601              {
   1602                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   00016D   90....       MOV     DPTR,#devStartMode
   \   000170   E0           MOVX    A,@DPTR
   \   000171   6401         XRL     A,#0x1
   \   000173   703E         JNZ     ??ZDApp_ProcessNetworkJoin_24
   1603                {
   1604                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000175   90....       MOV     DPTR,#retryCnt
   \   000178   E0           MOVX    A,@DPTR
   \   000179   04           INC     A
   \   00017A   F0           MOVX    @DPTR,A
   \   00017B   C3           CLR     C
   \   00017C   9404         SUBB    A,#0x4
   \   00017E   5026         JNC     ??ZDApp_ProcessNetworkJoin_25
   1605                  {
   1606                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000180   90....       MOV     DPTR,#_NIB + 33
   \   000183   E0           MOVX    A,@DPTR
   \   000184   F4           CPL     A
   \   000185   7003         JNZ     ??ZDApp_ProcessNetworkJoin_26
   \   000187   A3           INC     DPTR
   \   000188   E0           MOVX    A,@DPTR
   \   000189   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   00018A   6022         JZ      ??ZDApp_ProcessNetworkJoin_27
   \   00018C   90....       MOV     DPTR,#_NIB + 33
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   64FE         XRL     A,#0xfe
   \   000192   7003         JNZ     ??ZDApp_ProcessNetworkJoin_28
   \   000194   A3           INC     DPTR
   \   000195   E0           MOVX    A,@DPTR
   \   000196   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_28:
   \   000197   6015         JZ      ??ZDApp_ProcessNetworkJoin_27
   1607                      devStartMode = MODE_JOIN;
   1608                    else
   1609                    {
   1610                      devStartMode = MODE_REJOIN;
   \   000199   90....       MOV     DPTR,#devStartMode
   \   00019C   7403         MOV     A,#0x3
   \   00019E   F0           MOVX    @DPTR,A
   1611                      _tmpRejoinState = true;
   \   00019F   90....       MOV     DPTR,#_tmpRejoinState
   \   0001A2   7401         MOV     A,#0x1
   \   0001A4   800C         SJMP    ??ZDApp_ProcessNetworkJoin_29
   1612                    }
   1613                  }
   1614                  // Do a normal join to the network after certain times of rejoin retries
   1615                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   0001A6   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   6401         XRL     A,#0x1
   \   0001AC   7005         JNZ     ??ZDApp_ProcessNetworkJoin_24
   1616                  {
   1617                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   0001AE   90....       MOV     DPTR,#devStartMode
   \   0001B1   E4           CLR     A
   \                     ??ZDApp_ProcessNetworkJoin_29:
   \   0001B2   F0           MOVX    @DPTR,A
   1618                  }
   1619                }
   1620          
   1621                // Clear the neighbor Table and network discovery tables.
   1622                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   0001B3                ; Setup parameters for call to function nwkNeighborInitTable
   \   0001B3   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1623                NLME_NwkDiscTerm();
   \   0001B6                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0001B6   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1624          
   1625                // setup a retry for later...
   1626                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1627                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   0001B9                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   0001B9   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0001BC                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001BC   EA           MOV     A,R2
   \   0001BD   547F         ANL     A,#0x7f
   \   0001BF   2464         ADD     A,#0x64
   \   0001C1   FA           MOV     R2,A
   \   0001C2   7B00         MOV     R3,#0x0
   \   0001C4   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   0001C7   8017         SJMP    ??ZDApp_ProcessNetworkJoin_7
   1628              }
   1629            }
   1630          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1631            else
   1632            {
   1633              // Assume from address conflict
   1634              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   0001C9   90....       MOV     DPTR,#_NIB + 96
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   6402         XRL     A,#0x2
   \   0001CF   700F         JNZ     ??ZDApp_ProcessNetworkJoin_7
   1635              {
   1636                // Notify the network
   1637                ZDApp_AnnounceNewAddress();
   \   0001D1                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001D1   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1638          
   1639                // Notify apps
   1640                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0001D4                ; Setup parameters for call to function osal_set_event
   \   0001D4   7A10         MOV     R2,#0x10
   \   0001D6   7B00         MOV     R3,#0x0
   \   0001D8   90....       MOV     DPTR,#ZDAppTaskID
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   F9           MOV     R1,A
   \   0001DD   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1641              }
   1642            }
   1643          #endif
   1644          }
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   0001E0   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for call to function NLME_LeaveRsp
   \   000001   AA..         MOV     R2,?XSP + 0
   \   000003   AB..         MOV     R3,?XSP + 1
   \   000005   22           RET
   1645          
   1646          /*********************************************************************
   1647           * @fn      ZDApp_SaveNwkKey()
   1648           *
   1649           * @brief   Save off the Network key information.
   1650           *
   1651           * @param   none
   1652           *
   1653           * @return  none
   1654           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1655          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1656          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1657            nwkActiveKeyItems keyItems;
   1658          
   1659            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1660          
   1661            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1662                          (void *)&keyItems );
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   A8..         MOV     R0,?XSP + 0
   \   000013   A9..         MOV     R1,?XSP + 1
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..15       MOV     ?V0,#0x15
   \   000021   75..00       MOV     ?V1,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A82         MOV     R2,#-0x7e
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   1663          
   1664            nwkFrameCounterChanges = 0;
   \   000039   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
   1665          
   1666            // Clear copy in RAM before return.
   1667            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C15         MOV     R4,#0x15
   \   000042   FD           MOV     R5,A
   \   000043   F9           MOV     R1,A
   \   000044   AA..         MOV     R2,?XSP + 0
   \   000046   AB..         MOV     R3,?XSP + 1
   \   000048   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1668          
   1669          }
   \   00004B                REQUIRE ?Subroutine9
   \   00004B                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine49_0 & 0xFFFF
   1670          
   1671          /*********************************************************************
   1672           * @fn      ZDApp_ForceConcentratorChange()
   1673           *
   1674           * @brief   Force a network concentrator change by resetting 
   1675           *          zgConcentratorEnable and zgConcentratorDiscoveryTime 
   1676           *          from NV and set nwk event.
   1677           *
   1678           * @param   none
   1679           *
   1680           * @return  none
   1681           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1682          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1683          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1684            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV     ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV     ?V0,#0x1
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A32         MOV     R2,#0x32
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   1685            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002E   75....       MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A33         MOV     R2,#0x33
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1686           
   1687            if ( zgConcentratorEnable == TRUE )
   \   000051   90....       MOV     DPTR,#zgConcentratorEnable
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6401         XRL     A,#0x1
   \   000057   7019         JNZ     ??ZDApp_ForceConcentratorChange_0
   1688            {
   1689              // Start next event
   1690              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   90....       MOV     DPTR,#__Constant_64
   \   00005C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B08         MOV     R3,#0x8
   \   000063   90....       MOV     DPTR,#NWK_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   800C         SJMP    ??ZDApp_ForceConcentratorChange_1
   1691            }
   1692            else
   1693            {
   1694              // Stop the next event
   1695              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000072                ; Setup parameters for call to function osal_stop_timerEx
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B08         MOV     R3,#0x8
   \   000076   90....       MOV     DPTR,#NWK_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1696            }
   1697          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   00007E   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   1698          
   1699          /*********************************************************************
   1700           * @fn      ZDApp_ResetNwkKey()
   1701           *
   1702           * @brief   Reset the Network key information in NV.
   1703           *
   1704           * @param   none
   1705           *
   1706           * @return  none
   1707           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1708          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1709          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1710            nwkActiveKeyItems keyItems;
   1711          
   1712            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1713            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1714                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV     ?V0,#0x15
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A82         MOV     R2,#-0x7e
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   1715          }
   \   00003F   02....       LJMP    ?Subroutine9 & 0xFFFF
   1716          
   1717          /*********************************************************************
   1718           * @fn      ZDApp_RestoreNwkKey()
   1719           *
   1720           * @brief
   1721           *
   1722           *   Save off the Network key information.
   1723           *
   1724           * @param   none
   1725           *
   1726           * @return  true if restored from NV, false if not
   1727           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1728          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1729          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1730            nwkActiveKeyItems keyItems;
   1731            uint8 ret = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   1732          
   1733            // Restore the key information
   1734            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1735                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   A8..         MOV     R0,?XSP + 0
   \   00000E   A9..         MOV     R1,?XSP + 1
   \   000010   88..         MOV     ?V0,R0
   \   000012   89..         MOV     ?V1,R1
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   75..15       MOV     ?V0,#0x15
   \   00001C   8E..         MOV     ?V1,R6
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7C00         MOV     R4,#0x0
   \   000025   7D00         MOV     R5,#0x0
   \   000027   7A82         MOV     R2,#-0x7e
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   E9           MOV     A,R1
   \   000034   6003         JZ      $+5
   \   000036   02....       LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1736            {
   1737              uint8 nullKey[SEC_KEY_LEN];
   1738          
   1739              // initialize default value to compare to
   1740              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   000039                ; Setup parameters for call to function osal_memset
   \   000039   7C10         MOV     R4,#0x10
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   7415         MOV     A,#0x15
   \   000041   12....       LCALL   ?XSTACK_DISP101_8
   \   000044   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1741          
   1742              // if stored key is different than default value, then a key has been established
   1743              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000047                ; Setup parameters for call to function osal_memcmp
   \   000047   7415         MOV     A,#0x15
   \   000049   12....       LCALL   ?XSTACK_DISP100_8
   \   00004C   88..         MOV     ?V0,R0
   \   00004E   89..         MOV     ?V1,R1
   \   000050   8E..         MOV     ?V2,R6
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000057   7C10         MOV     R4,#0x10
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   A982         MOV     R1,DPL
   \   000062   AA83         MOV     R2,DPH
   \   000064   7B00         MOV     R3,#0x0
   \   000066   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000069   7403         MOV     A,#0x3
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   E9           MOV     A,R1
   \   00006F   705B         JNZ     ??ZDApp_RestoreNwkKey_0
   1744              {
   1745                // Increment the frame counter stored in NV
   1746                keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1747                                           NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000071   90....       MOV     DPTR,#__Constant_4e2
   \   000074   78..         MOV     R0,#?V0
   \   000076   12....       LCALL   ?L_MOV_X
   \   000079   7411         MOV     A,#0x11
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?L_ADD_TO_X
   1748          
   1749                nwkFrameCounter = keyItems.frameCounter;
   \   000083   7411         MOV     A,#0x11
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   12....       LCALL   ?XLOAD_R0123
   \   00008B   90....       MOV     DPTR,#nwkFrameCounter
   \   00008E   12....       LCALL   ?XSTORE_R0123
   1750          
   1751                // Save the updated Frame Counter right away
   1752                osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1753                               (void *)&keyItems );
   \   000091                ; Setup parameters for call to function osal_nv_write
   \   000091   A8..         MOV     R0,?XSP + 0
   \   000093   A9..         MOV     R1,?XSP + 1
   \   000095   88..         MOV     ?V0,R0
   \   000097   89..         MOV     ?V1,R1
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   75..15       MOV     ?V0,#0x15
   \   0000A1   8E..         MOV     ?V1,R6
   \   0000A3   78..         MOV     R0,#?V0
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   7C00         MOV     R4,#0x0
   \   0000AA   7D00         MOV     R5,#0x0
   \   0000AC   7A82         MOV     R2,#-0x7e
   \   0000AE   7B00         MOV     R3,#0x0
   \   0000B0   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   1754          
   1755                nwkFrameCounterChanges = 0;
   \   0000B8   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   0000BB   E4           CLR     A
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   F0           MOVX    @DPTR,A
   1756          
   1757                ret = TRUE;
   \   0000BF   7E01         MOV     R6,#0x1
   1758          
   1759                // Clear copy in RAM before return.
   1760                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000C1                ; Setup parameters for call to function osal_memset
   \   0000C1   7C15         MOV     R4,#0x15
   \   0000C3   FD           MOV     R5,A
   \   0000C4   F9           MOV     R1,A
   \   0000C5   AA..         MOV     R2,?XSP + 0
   \   0000C7   AB..         MOV     R3,?XSP + 1
   \   0000C9   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1761              }
   1762            }
   1763          
   1764            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000CC   EE           MOV     A,R6
   \   0000CD   F9           MOV     R1,A
   \   0000CE   7425         MOV     A,#0x25
   \   0000D0   02....       LJMP    ?Subroutine5 & 0xFFFF
   1765          }
   1766          
   1767          /*********************************************************************
   1768           * @fn      ZDApp_ResetTimerStart
   1769           *
   1770           * @brief   Start the reset timer.
   1771           *
   1772           * @param   delay - delay time(ms) before reset
   1773           *
   1774           * @return  none
   1775           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1776          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1777          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1778            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   701B         JNZ     ??ZDApp_ResetTimerStart_0
   1779            {
   1780              // Start the rest timer
   1781              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   E4           CLR     A
   \   00001C   F5..         MOV     ?V2,A
   \   00001E   F5..         MOV     ?V3,A
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#ZDAppTaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   1782            }
   1783          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   000036   02....       LJMP    ??Subroutine59_0 & 0xFFFF
   1784          
   1785          /*********************************************************************
   1786           * @fn      ZDApp_ResetTimerCancel
   1787           *
   1788           * @brief   Cancel the reset timer.
   1789           *
   1790           * @param   none
   1791           *
   1792           * @return  none
   1793           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1794          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1795          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1796            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1797            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000010                ; Setup parameters for call to function osal_clear_event
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   1798          }
   \   00001C   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   1799          
   1800          /*********************************************************************
   1801           * @fn      ZDApp_LeaveCtrlInit
   1802           *
   1803           * @brief   Initialize the leave control logic.
   1804           *
   1805           * @param   none
   1806           *
   1807           * @return  none
   1808           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1809          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1810          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1811            uint8 status;
   1812          
   1813          
   1814            // Initialize control state
   1815            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1816          
   1817            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1818                                        sizeof(ZDApp_LeaveCtrl),
   1819                                        &ZDApp_LeaveCtrl );
   1820          
   1821            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV     R4,#0x1
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A85         MOV     R2,#-0x7b
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1822            {
   1823              // Read saved control
   1824              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1825                            0,
   1826                            sizeof( uint8 ),
   1827                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0,#0x1
   \   000030   75..00       MOV     ?V1,#0x0
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A85         MOV     R2,#-0x7b
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1828            }
   1829          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000048   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   1830          
   1831          /*********************************************************************
   1832           * @fn      ZDApp_LeaveCtrlSet
   1833           *
   1834           * @brief   Set the leave control logic.
   1835           *
   1836           * @param   ra - reassociate flag
   1837           *
   1838           * @return  none
   1839           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1840          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1841          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1842            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1843          
   1844            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1845            {
   1846              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1847            }
   1848          
   1849            // Write the leave control
   1850            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1851                           0,
   1852                           sizeof( uint8 ),
   1853                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine3 & 0xFFFF
   1854          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0,#0x1
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine49_0
   \   000023                ; // Fall through to label ??Subroutine49_0
   1855          
   1856          /*********************************************************************
   1857           * @fn      ZDApp_LeaveCtrlReset
   1858           *
   1859           * @brief   Re-initialize the leave control logic.
   1860           *
   1861           * @param   none
   1862           *
   1863           * @return  none
   1864           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1865          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1867            // Set leave control to initialized state
   1868            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1869          
   1870            // Write initialized control
   1871            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1872                          0,
   1873                          sizeof( uint8 ),
   1874                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine3 & 0xFFFF
   1875          }
   1876          
   1877          /*********************************************************************
   1878           * @fn      ZDApp_LeaveCtrlBypass
   1879           *
   1880           * @brief   Check if NV restore should be skipped during a leave reset.
   1881           *
   1882           * @param   none
   1883           *
   1884           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1886          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1887          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1888            uint8 bypass;
   1889          
   1890            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1891            {
   1892              bypass = TRUE;
   1893            }
   1894            else
   1895            {
   1896              bypass = FALSE;
   1897            }
   1898          
   1899            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   80..         SJMP    ??Subroutine48_0
   1900          }
   1901          
   1902          /*********************************************************************
   1903           * @fn      ZDApp_LeaveCtrlStartup
   1904           *
   1905           * @brief   Check for startup conditions during a leave reset.
   1906           *
   1907           * @param   state      - devState_t determined by leave control logic
   1908           * @param   startDelay - startup delay
   1909           *
   1910           * @return  none
   1911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1912          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1913          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1914            *startDelay = 0;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   1915          
   1916            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5019         JNC     ??ZDApp_LeaveCtrlStartup_0
   1917            {
   1918              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV     C,0xE0 /* A   */.1
   \   000016   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1919              {
   1920                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   7488         MOV     A,#-0x78
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7413         MOV     A,#0x13
   \   000022   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1921              }
   1922              else
   1923              {
   1924                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX    @DPTR,A
   1925              }
   1926          
   1927              // Reset leave control logic
   1928              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL   `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   1929            }
   1930          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP    ??Subroutine48_0
   1931          
   1932          /*********************************************************************
   1933           * @fn      ZDApp_LeaveReset
   1934           *
   1935           * @brief   Setup a device reset due to a leave indication/confirm.
   1936           *
   1937           * @param   ra - reassociate flag
   1938           *
   1939           * @return  none
   1940           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1941          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1942          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1943            ZDApp_LeaveCtrlSet( ra );
   \   000005                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000005   12....       LCALL   `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   1944          
   1945            ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \   000008                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000008   7A88         MOV     R2,#-0x78
   \   00000A   7B13         MOV     R3,#0x13
   \   00000C   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1946          }
   \   00000F   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   1947          
   1948          /*********************************************************************
   1949           * @fn      ZDApp_LeaveUpdate
   1950           *
   1951           * @brief   Update local device data related to leaving device.
   1952           *
   1953           * @param   nwkAddr        - NWK address of leaving device
   1954           * @param   extAddr        - EXT address of leaving device
   1955           * @param   removeChildren - remove children of leaving device
   1956           *
   1957           * @return  none
   1958           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1959          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1960                                  uint8 removeChildren )
   1961          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
   1962            // Remove Apps Key for leaving device
   1963            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000014                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   1964          
   1965            // Clear SECURITY bit from Address Manager
   1966            ZDSecMgrAddrClear( extAddr );
   \   00001B                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   EF           MOV     A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   1967          
   1968            if ( pbindRemoveDev )
   \   000022   90....       MOV     DPTR,#pbindRemoveDev
   \   000025   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000028   6036         JZ      ??ZDApp_LeaveUpdate_0
   1969            {
   1970              zAddrType_t devAddr;
   1971          
   1972              // Remove bind entry and all related data
   1973              devAddr.addrMode = Addr64Bit;
   \   00002A   7410         MOV     A,#0x10
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7403         MOV     A,#0x3
   \   000031   F0           MOVX    @DPTR,A
   1974              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   8E..         MOV     ?V4,R6
   \   000034   8F..         MOV     ?V5,R7
   \   000036   75..00       MOV     ?V6,#0x0
   \   000039   78..         MOV     R0,#?V4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003E   7C08         MOV     R4,#0x8
   \   000040   7D00         MOV     R5,#0x0
   \   000042   740B         MOV     A,#0xb
   \   000044   12....       LCALL   ?XSTACK_DISP101_8
   \   000047   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   1975          
   1976              pbindRemoveDev(&devAddr);
   \   00004F                ; Setup parameters for indirect call
   \   00004F   7408         MOV     A,#0x8
   \   000051   12....       LCALL   ?XSTACK_DISP101_8
   \   000054   90....       MOV     DPTR,#pbindRemoveDev
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F8           MOV     R0,A
   \   000059   A3           INC     DPTR
   \   00005A   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   1977            }
   \                     ??CrossCallReturnLabel_109:
   \   00005D   12....       LCALL   ?CALL_IND
   1978          
   1979            // Remove if child
   1980            if ( ZSTACK_ROUTER_BUILD )
   1981            {
   1982              // Router shall notify the Trust Center that a child device has left the network
   1983              if ( AssocIsChild( nwkAddr ) == TRUE )
   \                     ??ZDApp_LeaveUpdate_0:
   \   000060                ; Setup parameters for call to function AssocIsChild
   \   000060   AA..         MOV     R2,?V0
   \   000062   AB..         MOV     R3,?V1
   \   000064   12....       LCALL   `??AssocIsChild::?relay`; Banked call to: AssocIsChild
   \   000067   E9           MOV     A,R1
   \   000068   6401         XRL     A,#0x1
   \   00006A   7034         JNZ     ??ZDApp_LeaveUpdate_1
   1984              {
   1985                  APSME_UpdateDeviceReq_t req;
   1986          
   1987                  // forward authorization to the Trust Center
   1988                  req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   F0           MOVX    @DPTR,A
   1989                  req.devAddr    = nwkAddr;
   \   000076   7402         MOV     A,#0x2
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E5..         MOV     A,?V0
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   E5..         MOV     A,?V1
   \   000081   F0           MOVX    @DPTR,A
   1990                  req.devExtAddr = extAddr;
   \   000082   7404         MOV     A,#0x4
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   EE           MOV     A,R6
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   EF           MOV     A,R7
   \   00008B   F0           MOVX    @DPTR,A
   1991                  req.status = APSME_UD_DEVICE_LEFT;
   \   00008C   7406         MOV     A,#0x6
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   7402         MOV     A,#0x2
   \   000093   F0           MOVX    @DPTR,A
   1992          
   1993                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1994                  {
   1995                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1996                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1997                    // with legacy Coordinator devices which can only handle one or the other.
   1998                    if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   1999                    {
   2000                      req.apsSecure = FALSE;
   2001          
   2002                      // send and APSME_UPDATE_DEVICE request to the trust center
   2003                      APSME_UpdateDeviceReq( &req );
   2004                    }
   2005          
   2006                    // send the message APS encrypted
   2007                    req.apsSecure = TRUE;
   2008          
   2009                    // send and APSME_UPDATE_DEVICE request to the trust center
   2010                    APSME_UpdateDeviceReq( &req );
   2011                  }
   2012                  else
   2013                  {
   2014                    req.apsSecure = FALSE;
   \   000094   7407         MOV     A,#0x7
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   E4           CLR     A
   \   00009A   12....       LCALL   ?Subroutine14 & 0xFFFF
   2015          
   2016                    // send and APSME_UPDATE_DEVICE request to the trust center
   2017                    APSME_UpdateDeviceReq( &req );
   2018                  }
   2019              }
   \                     ??CrossCallReturnLabel_6:
   \   00009D   12....       LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   2020          
   2021              NLME_RemoveChild( extAddr, removeChildren );
   \                     ??ZDApp_LeaveUpdate_1:
   \   0000A0                ; Setup parameters for call to function NLME_RemoveChild
   \   0000A0   A9..         MOV     R1,?V2
   \   0000A2   EE           MOV     A,R6
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   FB           MOV     R3,A
   \   0000A6   12....       LCALL   `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
   2022            }
   2023          
   2024            // Remove Routing table related entry
   2025            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \   0000A9                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000A9   7900         MOV     R1,#0x0
   \   0000AB   AA..         MOV     R2,?V0
   \   0000AD   AB..         MOV     R3,?V1
   \   0000AF   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2026          
   2027            // Remove entry from neighborTable
   2028            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   0000B2                ; Setup parameters for call to function nwkNeighborRemove
   \   0000B2   90....       MOV     DPTR,#_NIB + 33
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   FC           MOV     R4,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FD           MOV     R5,A
   \   0000BA   AA..         MOV     R2,?V0
   \   0000BC   AB..         MOV     R3,?V1
   \   0000BE   12....       LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2029          
   2030            // Schedule to save data to NV
   2031            ZDApp_NwkWriteNVRequest();
   \   0000C1                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   0000C1   12....       LCALL   `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
   2032          }
   \   0000C4   7411         MOV     A,#0x11
   \   0000C6                REQUIRE ?Subroutine6
   \   0000C6                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
   2033          
   2034          /*********************************************************************
   2035           * @fn      ZDApp_NetworkDiscoveryReq
   2036           *
   2037           * @brief   Request a network discovery.
   2038           *
   2039           * @param  scanChannels -
   2040           * @param  scanDuration -
   2041           *
   2042           * @return  ZStatus_t
   2043           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2044          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2045          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2046            // Setup optional filters - tbd
   2047          
   2048            // Request NLME network discovery
   2049            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP    ??Subroutine59_0 & 0xFFFF
   2050          }
   2051          
   2052          /*********************************************************************
   2053           * @fn      ZDApp_JoinReq
   2054           *
   2055           * @brief   Request the device to join a parent in a network.
   2056           *
   2057           * @param   channel -
   2058           * @param   panID -
   2059           *
   2060           * @return  ZStatus_t
   2061           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2062          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2063                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2064          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   2065            // Sync up the node with the stack profile (In the case where a pro device
   2066            // joins a non-pro network, or verse versa)
   2067            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV     A,#0xf
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2068          
   2069            // Request NLME Join Request
   2070            return NLME_JoinRequest(extendedPanID, panID,channel,
   2071                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2072                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV     A,#0xe
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V3,A
   \   000021   78..         MOV     R0,#?V3
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV     A,#0xd
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   \   000034   78..         MOV     R0,#?V3
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV     R1,?V2
   \   00003B   AC..         MOV     R4,?V0
   \   00003D   AD..         MOV     R5,?V1
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046   7404         MOV     A,#0x4
   \   000048   02....       LJMP    ?Subroutine5 & 0xFFFF
   2073          
   2074          }
   2075          
   2076          /*********************************************************************
   2077           * @fn      ZDApp_DeviceConfigured
   2078           *
   2079           * @brief   Check to see if the local device is configured (i.e., part
   2080           *          of a network).
   2081           *
   2082           * @param   none
   2083           *
   2084           * @return  TRUE if configured. FALSE, otherwise.
   2085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2086          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2087          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2088            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
   2089          
   2090            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2091                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   A8..         MOV     R0,?XSP + 0
   \   000018   A9..         MOV     R1,?XSP + 1
   \   00001A   88..         MOV     ?V0,R0
   \   00001C   89..         MOV     ?V1,R1
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV     ?V0,#0x2
   \   000026   75..00       MOV     ?V1,#0x0
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C14         MOV     R4,#0x14
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A21         MOV     R2,#0x21
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   2092          
   2093            // Does the NIB have anything more than default?
   2094            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   64FE         XRL     A,#0xfe
   \   000047   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004C   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   00004E   7900         MOV     R1,#0x0
   \   000050   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000052   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000054                REQUIRE ?Subroutine8
   \   000054                ; // Fall through to label ?Subroutine8
   2095          }
   2096          
   2097          /*********************************************************************
   2098           * CALLBACK FUNCTIONS
   2099           */
   2100          
   2101          
   2102          /*********************************************************************
   2103           * @fn      ZDApp_SendEventMsg()
   2104           *
   2105           * @brief
   2106           *
   2107           *   Sends a Network Join message
   2108           *
   2109           * @param  cmd - command ID
   2110           * @param  len - length (in bytes) of the buf field
   2111           * @param  buf - buffer for the rest of the message.
   2112           *
   2113           * @return  none
   2114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2115          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2116          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   2117            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   90....       MOV     DPTR,#ZDAppTaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2118          }
   \   000013   80..         SJMP    ??Subroutine51_0
   2119          
   2120          /*********************************************************************
   2121           * @fn      ZDApp_SendMsg()
   2122           *
   2123           * @brief   Sends a OSAL message
   2124           *
   2125           * @param  taskID - Where to send the message
   2126           * @param  cmd - command ID
   2127           * @param  len - length (in bytes) of the buf field
   2128           * @param  buf - buffer for the rest of the message.
   2129           *
   2130           * @return  none
   2131           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2132          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2133          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V5,R3
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V1,R5
   2134            osal_event_hdr_t *msgPtr;
   2135          
   2136            // Send the address to the task
   2137            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   AA..         MOV     R2,?V5
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000016   8A..         MOV     ?V6,R2
   \   000018   8B..         MOV     ?V7,R3
   \   00001A   AE..         MOV     R6,?V6
   \   00001C   AF..         MOV     R7,?V7
   2138            if ( msgPtr )
   \   00001E   EE           MOV     A,R6
   \   00001F   4F           ORL     A,R7
   \   000020   602E         JZ      ??ZDApp_SendMsg_0
   2139            {
   2140              if ( (len > 0) && (buf != NULL) )
   \   000022   E5..         MOV     A,?V5
   \   000024   601A         JZ      ??ZDApp_SendMsg_1
   \   000026   E5..         MOV     A,?V0
   \   000028   45..         ORL     A,?V1
   \   00002A   6014         JZ      ??ZDApp_SendMsg_1
   2141                osal_memcpy( msgPtr, buf, len );
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   75..00       MOV     ?V2,#0x0
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000034   AC..         MOV     R4,?V5
   \   000036   7D00         MOV     R5,#0x0
   \   000038   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003B   7403         MOV     A,#0x3
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   2142          
   2143              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E5..         MOV     A,?V4
   \   000046   F0           MOVX    @DPTR,A
   2144              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000047                ; Setup parameters for call to function osal_msg_send
   \   000047   EE           MOV     A,R6
   \   000048   FA           MOV     R2,A
   \   000049   EF           MOV     A,R7
   \   00004A   FB           MOV     R3,A
   \   00004B   A9..         MOV     R1,?V3
   \   00004D   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2145            }
   2146          }
   \                     ??ZDApp_SendMsg_0:
   \   000050   02....       LJMP    ?Subroutine2 & 0xFFFF
   2147          
   2148          /*********************************************************************
   2149           * Call Back Functions from NWK  - API
   2150           */
   2151          
   2152          /*********************************************************************
   2153           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2154           *
   2155           * @brief       This function returns a choice of PAN to join.
   2156           *
   2157           * @param       status - return status of the nwk discovery confirm
   2158           *
   2159           * @return      ZStatus_t
   2160           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine48_0
   \   000003                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2161          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2162          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2163            osal_event_hdr_t msg;
   2164          
   2165            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2166            // Send ZDO_MGMT_NWK_DISC_RSP back
   2167          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2168            if ( zdappMgmtNwkDiscReqInProgress )
   2169            {
   2170              zdappMgmtNwkDiscReqInProgress = false;
   2171              ZDO_FinishProcessingMgmtNwkDiscReq();
   2172            }
   2173            else
   2174          #endif
   2175            {
   2176              // Pass the confirm to another task if it registers the callback
   2177              // Otherwise, pass the confirm to ZDApp.
   2178              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000017   6008         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2179              {
   2180                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   12....       LCALL   ?Subroutine18 & 0xFFFF
   2181              }
   \                     ??CrossCallReturnLabel_115:
   \   00001C   12....       LCALL   ?CALL_IND
   \   00001F   8017         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2182              else
   2183              {
   2184                // Otherwise, send scan confirm to ZDApp task to proceed
   2185                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E4           CLR     A
   \   000027   F0           MOVX    @DPTR,A
   2186                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000028                ; Setup parameters for call to function ZDApp_SendMsg
   \   000028   04           INC     A
   \   000029   12....       LCALL   ?XSTACK_DISP102_8
   \   00002C   7B02         MOV     R3,#0x2
   \   00002E   7A01         MOV     R2,#0x1
   \   000030   90....       MOV     DPTR,#ZDAppTaskID
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2187              }
   2188            }
   2189            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000038   7900         MOV     R1,#0x0
   \   00003A   7403         MOV     A,#0x3
   \   00003C   02....       LJMP    ?Subroutine4 & 0xFFFF
   2190          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   AA..         MOV     R2,?XSP + 0
   \   000002   AB..         MOV     R3,?XSP + 1
   \   000004                REQUIRE ??Subroutine56_0
   \   000004                ; // Fall through to label ??Subroutine56_0
   2191          
   2192          /*********************************************************************
   2193           * @fn          ZDApp_NwkDescListProcessing
   2194           *
   2195           * @brief       This function process the network discovery result and select
   2196           *              a parent device to join itself.
   2197           *
   2198           * @param       none
   2199           *
   2200           * @return      ZStatus_t
   2201           */
   2202          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2203          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2204          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2205            networkDesc_t *pNwkDesc;
   2206            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   2207            uint8 stackProfile;
   2208            uint8 stackProfilePro;
   2209            uint8 selected;
   2210          
   2211            // Count the number of nwk descriptors in the list
   2212            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_104
   2213            while (pNwkDesc)
   2214            {
   2215              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V1
   2216              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine25 & 0xFFFF
   2217            }
   \                     ??CrossCallReturnLabel_104:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2218          
   2219            // process discovery results
   2220            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V0,#0x0
   2221            selected = FALSE;
   2222          
   2223          
   2224            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V2,#0x0
   2225            {
   2226              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV     ?V4,R2
   \   000029   8B..         MOV     ?V5,R3
   \   00002B   AE..         MOV     R6,?V4
   \   00002D   AF..         MOV     R7,?V5
   2227              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V3,#0x0
   \   000032   8023         SJMP    ??CrossCallReturnLabel_105
   2228              {
   2229                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2230                {
   2231                  // If the extended Pan ID is commissioned to a non zero value
   2232                  // Only join the Pan that has match EPID
   2233                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2234                    continue;
   2235          
   2236                }
   2237                else if ( zgConfigPANID != 0xFFFF )
   2238                {
   2239                  // PAN Id is preconfigured. check if it matches
   2240                  if ( pNwkDesc->panId != zgConfigPANID )
   2241                    continue;
   2242                }
   2243          
   2244                // check that network is allowing joining
   2245                if ( ZSTACK_ROUTER_BUILD )
   2246                {
   2247                  if ( stackProfilePro == FALSE )
   2248                  {
   2249                    if ( !pNwkDesc->routerCapacity )
   2250                    {
   2251                      continue;
   2252                    }
   2253                  }
   2254                  else
   2255                  {
   2256                    if ( !pNwkDesc->deviceCapacity )
   2257                    {
   2258                      continue;
   2259                    }
   2260                  }
   2261                }
   2262                else if ( ZSTACK_END_DEVICE_BUILD )
   2263                {
   2264                  if ( !pNwkDesc->deviceCapacity )
   2265                  {
   2266                    continue;
   2267                  }
   2268                }
   2269          
   2270                // check version of zigbee protocol
   2271                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2272                  continue;
   2273          
   2274                // check version of stack profile
   2275                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2276                {
   2277                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2278                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7012         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2279                  {
   2280                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   000048   75..01       MOV     ?V0,#0x1
   2281                  }
   2282          
   2283                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   00004B   E5..         MOV     A,?V2
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000052   05..         INC     ?V3
   \   000054   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000057   E5..         MOV     A,?V3
   \   000059   C3           CLR     C
   \   00005A   95..         SUBB    A,?V1
   \   00005C   4003         JC      $+5
   \   00005E   02....       LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000061                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000061   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000063   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000065   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   000068   E9           MOV     A,R1
   \   000069   6401         XRL     A,#0x1
   \   00006B   7013         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   00006D                ; Setup parameters for call to function sAddrExtCmp
   \   00006D   EE           MOV     A,R6
   \   00006E   240B         ADD     A,#0xb
   \   000070   FC           MOV     R4,A
   \   000071   E4           CLR     A
   \   000072   3F           ADDC    A,R7
   \   000073   FD           MOV     R5,A
   \   000074   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000076   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000078   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00007B   E9           MOV     A,R1
   \   00007C   701D         JNZ     ??ZDApp_NwkDescListProcessing_9
   \   00007E   80D2         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000080   90....       MOV     DPTR,#zgConfigPANID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F4           CPL     A
   \   000085   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   00008A   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   00008C   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00008F   90....       MOV     DPTR,#zgConfigPANID
   \   000092   E0           MOVX    A,@DPTR
   \   000093   68           XRL     A,R0
   \   000094   7003         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   000099   70B7         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   00009B   E5..         MOV     A,?V0
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   7005         JNZ     ??ZDApp_NwkDescListProcessing_12
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   7006         JNZ     ??ZDApp_NwkDescListProcessing_13
   \   0000A9   80A7         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   60A3         JZ      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000AF   8E82         MOV     DPL,R6
   \   0000B1   8F83         MOV     DPH,R7
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F8           MOV     R0,A
   \   0000BA   90....       MOV     DPTR,#_NIB + 17
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   68           XRL     A,R0
   \   0000BF   7091         JNZ     ??ZDApp_NwkDescListProcessing_6
   \   0000C1   8E82         MOV     DPL,R6
   \   0000C3   8F83         MOV     DPH,R7
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F8           MOV     R0,A
   \   0000CD   90....       MOV     DPTR,#zgStackProfile
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   68           XRL     A,R0
   \   0000D2   6039         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   6401         XRL     A,#0x1
   \   0000D7   6003         JZ      $+5
   \   0000D9   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000DC   8E82         MOV     DPL,R6
   \   0000DE   8F83         MOV     DPH,R7
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   6402         XRL     A,#0x2
   \   0000E9   6003         JZ      $+5
   \   0000EB   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000EE   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2284                  {
   2285                    continue;
   2286                  }
   2287                }
   2288          
   2289                break;
   2290              }
   2291          
   2292              if (i < ResultCount)
   2293              {
   2294               selected = TRUE;
   2295                break;
   2296              }
   2297          
   2298              // break if selected or stack profile pro wasn't found
   2299              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000F1   E5..         MOV     A,?V0
   \   0000F3   600C         JZ      ??ZDApp_NwkDescListProcessing_14
   2300              {
   2301                break;
   2302              }
   2303            }
   \   0000F5   05..         INC     ?V2
   \   0000F7   E5..         MOV     A,?V2
   \   0000F9   C3           CLR     C
   \   0000FA   9402         SUBB    A,#0x2
   \   0000FC   5003         JNC     $+5
   \   0000FE   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2304          
   2305            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   000101   E5..         MOV     A,?V1
   \   000103   65..         XRL     A,?V3
   \   000105   7006         JNZ     ??ZDApp_NwkDescListProcessing_5
   2306            {
   2307              return (NULL);   // couldn't find appropriate PAN to join !
   \   000107   7A00         MOV     R2,#0x0
   \   000109   7B00         MOV     R3,#0x0
   \   00010B   8004         SJMP    ??ZDApp_NwkDescListProcessing_15
   2308            }
   2309            else
   2310            {
   2311              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00010D   EE           MOV     A,R6
   \   00010E   FA           MOV     R2,A
   \   00010F   EF           MOV     A,R7
   \   000110   FB           MOV     R3,A
   2312            }
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   000111   02....       LJMP    ?Subroutine1 & 0xFFFF
   2313          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine52_0
   \   000004                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009                REQUIRE ??Subroutine54_0
   \   000009                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
   2314          
   2315          /*********************************************************************
   2316           * @fn          ZDO_NetworkFormationConfirmCB
   2317           *
   2318           * @brief       This function reports the results of the request to
   2319           *              initialize a coordinator in a network.
   2320           *
   2321           * @param       Status - Result of NLME_NetworkFormationRequest()
   2322           *
   2323           * @return      none
   2324           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A                REQUIRE ??Subroutine51_0
   \   00000A                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2325          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2326          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2327            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2328          
   2329            if ( Status == ZSUCCESS )
   \   00000A   7019         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2330            {
   2331              // LED on shows Coordinator started
   2332              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2333          
   2334              // LED off forgets HOLD_AUTO_START
   2335              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2336          
   2337          #if defined ( ZBIT )
   2338              SIM_SetColor(0xd0ffd0);
   2339          #endif
   2340          
   2341              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   700C         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2342              {
   2343                // Began with HOLD_AUTO_START
   2344                devState = DEV_COORD_STARTING;
   \   000020   7408         MOV     A,#0x8
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8007         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2345              }
   2346            }
   2347          #if defined(BLINK_LEDS)
   2348            else
   2349            {
   2350              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7904         MOV     R1,#0x4
   \   000029   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2351            }
   2352          #endif
   2353          
   2354            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00002C                ; Setup parameters for call to function osal_set_event
   \   00002C   7A02         MOV     R2,#0x2
   \   00002E   02....       LJMP    ?Subroutine0 & 0xFFFF
   2355          }
   2356          
   2357          /****************************************************************************
   2358           * @fn          ZDApp_beaconIndProcessing
   2359           *
   2360           * @brief       This function processes the incoming beacon indication.
   2361           *
   2362           *              When another task (MT or App) is registered to process
   2363           *              beacon indication themselves, this function will parse the
   2364           *              beacon payload and pass the beacon descriptor to that task
   2365           *              If no other tasks registered, this function will process
   2366           *              the beacon payload and generate the network descriptor link
   2367           *              list.
   2368           *
   2369           * @param
   2370           *
   2371           * @return      none
   2372           *
   2373           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2374          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2375          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2376            // Pass the beacon Indication to another task if it registers the callback
   2377            // Otherwise, process the beacon notification here.
   2378            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00000F   6009         JZ      ??ZDO_beaconNotifyIndCB_0
   2379            {
   2380              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   2381            }
   \                     ??CrossCallReturnLabel_110:
   \   000014   12....       LCALL   ?CALL_IND
   \   000017   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2382            else
   2383            {
   2384              networkDesc_t *pNwkDesc;
   2385              networkDesc_t *pLastNwkDesc;
   2386              uint8 found = false;
   2387          
   2388              // Add the network to the Network Descriptor List
   2389              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   00001A   90....       MOV     DPTR,#NwkDescList
   \   00001D   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   2390              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_102:
   \   000020   90....       MOV     DPTR,#NwkDescList
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V3,A
   \   00002A   802D         SJMP    ??CrossCallReturnLabel_106
   2391              while (pNwkDesc)
   2392              {
   2393                if ((pNwkDesc->panId == pBeacon->panID) &&
   2394                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00002C   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   68           XRL     A,R0
   \   000037   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00003C   7014         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   68           XRL     A,R0
   \   000050   6063         JZ      ??ZDO_beaconNotifyIndCB_5
   2395                {
   2396                  found = true;
   2397                  break;
   2398                }
   2399                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000052   8E..         MOV     ?V2,R6
   \   000054   8F..         MOV     ?V3,R7
   2400                pNwkDesc = pNwkDesc->nextDesc;
   \   000056   12....       LCALL   ?Subroutine25 & 0xFFFF
   2401              }
   \                     ??CrossCallReturnLabel_106:
   \   000059   EE           MOV     A,R6
   \   00005A   4F           ORL     A,R7
   \   00005B   70CF         JNZ     ??ZDO_beaconNotifyIndCB_2
   2402          
   2403              // If no existing descriptor found, make a new one and add to the list
   2404              if (found == false)
   2405              {
   2406                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00005D                ; Setup parameters for call to function osal_mem_alloc
   \   00005D   7A16         MOV     R2,#0x16
   \   00005F   7B00         MOV     R3,#0x0
   \   000061   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000064   8A..         MOV     ?V4,R2
   \   000066   8B..         MOV     ?V5,R3
   \   000068   AE..         MOV     R6,?V4
   \   00006A   AF..         MOV     R7,?V5
   2407                if ( !pNwkDesc )
   \   00006C   EE           MOV     A,R6
   \   00006D   4F           ORL     A,R7
   \   00006E   7003         JNZ     $+5
   \   000070   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2408                {
   2409                  // Memory alloc failed, discard this beacon
   2410                  return;
   2411                }
   2412          
   2413                // Clear the network descriptor
   2414                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000073                ; Setup parameters for call to function osal_memset
   \   000073   7C16         MOV     R4,#0x16
   \   000075   7D00         MOV     R5,#0x0
   \   000077   7900         MOV     R1,#0x0
   \   000079   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2415          
   2416                // Initialize the descriptor
   2417                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   74FE         MOV     A,#-0x2
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   04           INC     A
   \   00008C   12....       LCALL   ?Subroutine11 & 0xFFFF
   2418                pNwkDesc->chosenRouterDepth = 0xFF;
   \                     ??CrossCallReturnLabel_0:
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   F0           MOVX    @DPTR,A
   2419          
   2420                // Save new entry into the descriptor list
   2421                if ( !NwkDescList )
   \   000098   90....       MOV     DPTR,#NwkDescList
   \   00009B   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00009E   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2422                {
   2423                  NwkDescList = pNwkDesc;
   \   0000A0   90....       MOV     DPTR,#NwkDescList
   \   0000A3   800B         SJMP    ??ZDO_beaconNotifyIndCB_7
   2424                }
   2425                else
   2426                {
   2427                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000A5   E5..         MOV     A,?V2
   \   0000A7   2414         ADD     A,#0x14
   \   0000A9   F582         MOV     DPL,A
   \   0000AB   E4           CLR     A
   \   0000AC   35..         ADDC    A,?V3
   \   0000AE   F583         MOV     DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000B0   EE           MOV     A,R6
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   EF           MOV     A,R7
   \   0000B4   F0           MOVX    @DPTR,A
   2428                }
   2429              }
   2430          
   2431              // Update the descriptor with the incoming beacon
   2432              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000B5   85..82       MOV     DPL,?V0
   \   0000B8   85..83       MOV     DPH,?V1
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000C7   A3           INC     DPTR
   \   0000C8   F0           MOVX    @DPTR,A
   2433              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000C9   E5..         MOV     A,?V0
   \   0000CB   2408         ADD     A,#0x8
   \   0000CD   F8           MOV     R0,A
   \   0000CE   E4           CLR     A
   \   0000CF   35..         ADDC    A,?V1
   \   0000D1   F9           MOV     R1,A
   \   0000D2   8882         MOV     DPL,R0
   \   0000D4   8983         MOV     DPH,R1
   \   0000D6   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000D9   12....       LCALL   ?Subroutine12 & 0xFFFF
   2434              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_3:
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   F0           MOVX    @DPTR,A
   2435              pNwkDesc->panId          = pBeacon->panID;
   \   0000E4   85..82       MOV     DPL,?V0
   \   0000E7   85..83       MOV     DPH,?V1
   \   0000EA   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000ED   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   2436              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_120:
   \   0000F0   E5..         MOV     A,?V0
   \   0000F2   240C         ADD     A,#0xc
   \   0000F4   F582         MOV     DPL,A
   \   0000F6   E4           CLR     A
   \   0000F7   35..         ADDC    A,?V1
   \   0000F9   F583         MOV     DPH,A
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   C0E0         PUSH    A
   \   0000FE   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000101   D0E0         POP     A
   \   000103   F0           MOVX    @DPTR,A
   2437          
   2438              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2439              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000104   8882         MOV     DPL,R0
   \   000106   8983         MOV     DPH,R1
   \   000108   E0           MOVX    A,@DPTR
   \   000109   6401         XRL     A,#0x1
   \   00010B   6015         JZ      ??ZDO_beaconNotifyIndCB_8
   2440              {
   2441                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   00010D                ; Setup parameters for call to function sAddrExtCpy
   \   00010D   E5..         MOV     A,?V0
   \   00010F   240D         ADD     A,#0xd
   \   000111   FC           MOV     R4,A
   \   000112   E4           CLR     A
   \   000113   35..         ADDC    A,?V1
   \   000115   FD           MOV     R5,A
   \   000116   EE           MOV     A,R6
   \   000117   240B         ADD     A,#0xb
   \   000119   FA           MOV     R2,A
   \   00011A   E4           CLR     A
   \   00011B   3F           ADDC    A,R7
   \   00011C   FB           MOV     R3,A
   \   00011D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000120   8010         SJMP    ??ZDO_beaconNotifyIndCB_9
   2442              }
   2443              else
   2444              {
   2445                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000122                ; Setup parameters for call to function osal_memset
   \   000122   7C08         MOV     R4,#0x8
   \   000124   7D00         MOV     R5,#0x0
   \   000126   79FF         MOV     R1,#-0x1
   \   000128   EE           MOV     A,R6
   \   000129   240B         ADD     A,#0xb
   \   00012B   FA           MOV     R2,A
   \   00012C   E4           CLR     A
   \   00012D   3F           ADDC    A,R7
   \   00012E   FB           MOV     R3,A
   \   00012F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2446              }
   2447          
   2448              // check if this device is a better choice to join...
   2449              // ...dont bother checking assocPermit flag is doing a rejoin
   2450              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2451                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   000132   85..82       MOV     DPL,?V0
   \   000135   85..83       MOV     DPH,?V1
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F8           MOV     R0,A
   \   000144   90....       MOV     DPTR,#gMIN_TREE_LQI
   \   000147   E0           MOVX    A,@DPTR
   \   000148   C3           CLR     C
   \   000149   98           SUBB    A,R0
   \   00014A   4003         JC      $+5
   \   00014C   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   00014F   85..82       MOV     DPL,?V0
   \   000152   85..83       MOV     DPH,?V1
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   6401         XRL     A,#0x1
   \   00015D   6009         JZ      ??ZDO_beaconNotifyIndCB_10
   \   00015F   90....       MOV     DPTR,#_tmpRejoinState
   \   000162   E0           MOVX    A,@DPTR
   \   000163   7003         JNZ     $+5
   \   000165   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2452              {
   2453                uint8 selected = FALSE;
   2454                uint8 capacity = FALSE;
   2455          
   2456                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000168   90....       MOV     DPTR,#_NIB + 96
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   6402         XRL     A,#0x2
   \   00016E   702C         JNZ     ??ZDO_beaconNotifyIndCB_11
   2457                {
   2458                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2459                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2460                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2461                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000170   8E82         MOV     DPL,R6
   \   000172   8F83         MOV     DPH,R7
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   C3           CLR     C
   \   00017F   98           SUBB    A,R0
   \   000180   5009         JNC     ??ZDO_beaconNotifyIndCB_12
   \   000182   12....       LCALL   ?Subroutine35 & 0xFFFF
   2462                  {
   2463                    selected = TRUE;
   2464                  }
   2465                }
   \                     ??CrossCallReturnLabel_39:
   \   000185   9414         SUBB    A,#0x14
   \   000187   4029         JC      ??ZDO_beaconNotifyIndCB_13
   \   000189   8058         SJMP    ??ZDO_beaconNotifyIndCB_14
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   00018B   8E82         MOV     DPL,R6
   \   00018D   8F83         MOV     DPH,R7
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   E0           MOVX    A,@DPTR
   \   000199   68           XRL     A,R0
   \   00019A   7047         JNZ     ??ZDO_beaconNotifyIndCB_14
   2466                else
   2467                {
   2468                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   00019C   8E82         MOV     DPL,R6
   \   00019E   8F83         MOV     DPH,R7
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   A3           INC     DPTR
   \   0001A5   A3           INC     DPTR
   \   0001A6   A3           INC     DPTR
   \   0001A7   A3           INC     DPTR
   \   0001A8   A3           INC     DPTR
   \   0001A9   A3           INC     DPTR
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   F8           MOV     R0,A
   \   0001AC   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0001AF   98           SUBB    A,R0
   \   0001B0   5031         JNC     ??ZDO_beaconNotifyIndCB_14
   2469                  {
   2470                    selected = TRUE;
   2471                  }
   2472                }
   2473          
   2474                if ( ZSTACK_ROUTER_BUILD )
   2475                {
   2476                  capacity = pBeacon->routerCapacity;
   2477                }
   2478                else if ( ZSTACK_END_DEVICE_BUILD )
   2479                {
   2480                  capacity = pBeacon->deviceCapacity;
   2481                }
   2482          
   2483                if ( (capacity) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001B2   85..82       MOV     DPL,?V0
   \   0001B5   85..83       MOV     DPH,?V1
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   6022         JZ      ??ZDO_beaconNotifyIndCB_14
   2484                {
   2485                  // this is the new chosen router for joining...
   2486                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0001C1   85..82       MOV     DPL,?V0
   \   0001C4   85..83       MOV     DPH,?V1
   \   0001C7   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0001CA   E8           MOV     A,R0
   \   0001CB   F0           MOVX    @DPTR,A
   \   0001CC   A3           INC     DPTR
   \   0001CD   E9           MOV     A,R1
   \   0001CE   12....       LCALL   ?Subroutine12 & 0xFFFF
   2487                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_4:
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   A3           INC     DPTR
   \   0001D6   A3           INC     DPTR
   \   0001D7   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0001DA   F0           MOVX    @DPTR,A
   2488                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   0001DB   12....       LCALL   ?Subroutine42 & 0xFFFF
   2489                }
   \                     ??CrossCallReturnLabel_53:
   \   0001DE   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001E1   A3           INC     DPTR
   \   0001E2   F0           MOVX    @DPTR,A
   2490          
   2491                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   0001E3   85..82       MOV     DPL,?V0
   \   0001E6   85..83       MOV     DPH,?V1
   \   0001E9   A3           INC     DPTR
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   600B         JZ      ??ZDO_beaconNotifyIndCB_15
   2492                  pNwkDesc->deviceCapacity = 1;
   \   0001F3   8E82         MOV     DPL,R6
   \   0001F5   8F83         MOV     DPH,R7
   \   0001F7   A3           INC     DPTR
   \   0001F8   A3           INC     DPTR
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   7401         MOV     A,#0x1
   \   0001FD   F0           MOVX    @DPTR,A
   2493          
   2494                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   0001FE   85..82       MOV     DPL,?V0
   \   000201   85..83       MOV     DPH,?V1
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2495                  pNwkDesc->routerCapacity = 1;
   \   00020D   8E82         MOV     DPL,R6
   \   00020F   8F83         MOV     DPH,R7
   \   000211   A3           INC     DPTR
   \   000212   A3           INC     DPTR
   \   000213   A3           INC     DPTR
   \   000214   7401         MOV     A,#0x1
   \   000216   F0           MOVX    @DPTR,A
   2496              }
   2497            }
   2498          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000217   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C3           CLR     C
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E5..         MOV     A,?V0
   \   000002   240B         ADD     A,#0xb
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   22           RET
   2499          
   2500          /*********************************************************************
   2501           * @fn          ZDO_StartRouterConfirmCB
   2502           *
   2503           * @brief       This function reports the results of the request to
   2504           *              start functioning as a router in a network.
   2505           *
   2506           * @param       Status - Result of NLME_StartRouterRequest()
   2507           *
   2508           * @return      none
   2509           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2510          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2511          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2512            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2513          
   2514            if ( Status == ZSUCCESS )
   \   00000A   7019         JNZ     ??ZDO_StartRouterConfirmCB_0
   2515            {
   2516              // LED on shows Router started
   2517              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2518              // LED off forgets HOLD_AUTO_START
   2519              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2520              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   700C         JNZ     ??ZDO_StartRouterConfirmCB_1
   2521              {
   2522                // Began with HOLD_AUTO_START
   2523                devState = DEV_END_DEVICE;
   \   000020   7406         MOV     A,#0x6
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8007         SJMP    ??ZDO_StartRouterConfirmCB_1
   2524              }
   2525            }
   2526          #if defined(BLINK_LEDS)
   2527            else
   2528            {
   2529              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7904         MOV     R1,#0x4
   \   000029   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2530            }
   2531          #endif
   2532          
   2533            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00002C                ; Setup parameters for call to function osal_set_event
   \   00002C   7A20         MOV     R2,#0x20
   \   00002E   02....       LJMP    ?Subroutine0 & 0xFFFF
   2534          }
   2535          
   2536          /*********************************************************************
   2537           * @fn          ZDO_JoinConfirmCB
   2538           *
   2539           * @brief       This function allows the next higher layer to be notified
   2540           *              of the results of its request to join itself or another
   2541           *              device to a network.
   2542           *
   2543           * @param       Status - Result of NLME_JoinRequest()
   2544           *
   2545           * @return      none
   2546           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2547          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2548          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   2549            (void)PanId;  // remove if this parameter is used.
   2550          
   2551            nwkStatus = (byte)Status;
   \   00000C   E9           MOV     A,R1
   \   00000D   90....       MOV     DPTR,#nwkStatus
   \   000010   F0           MOVX    @DPTR,A
   2552          
   2553            if ( Status == ZSUCCESS )
   \   000011   6003         JZ      $+5
   \   000013   02....       LJMP    ??ZDO_JoinConfirmCB_0 & 0xFFFF
   2554            {
   2555              if ( ZSTACK_END_DEVICE_BUILD
   2556                || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000016   90....       MOV     DPTR,#_NIB + 14
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   A2E1         MOV     C,0xE0 /* A   */.1
   \   00001C   4079         JC      ??ZDO_JoinConfirmCB_1
   2557              {
   2558                neighborEntry_t *pItem;
   2559           
   2560                // We don't need the neighbor table entries.  
   2561                // Clear the neighbor Table to remove beacon information
   2562                nwkNeighborInitTable();
   \   00001E                ; Setup parameters for call to function nwkNeighborInitTable
   \   00001E   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2563           
   2564                // Force a neighbor table entry for the parent
   2565                pItem = nwkNeighborFindEmptySlot();
   \   000021                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000021   12....       LCALL   `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   000024   8A..         MOV     ?V2,R2
   \   000026   8B..         MOV     ?V3,R3
   \   000028   AE..         MOV     R6,?V2
   \   00002A   AF..         MOV     R7,?V3
   2566                if ( pItem != NULL )
   \   00002C   EE           MOV     A,R6
   \   00002D   4F           ORL     A,R7
   \   00002E   6067         JZ      ??ZDO_JoinConfirmCB_1
   2567                {
   2568                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   000030                ; Setup parameters for call to function osal_memset
   \   000030   7C17         MOV     R4,#0x17
   \   000032   7D00         MOV     R5,#0x0
   \   000034   7900         MOV     R1,#0x0
   \   000036   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2569                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   000039   90....       MOV     DPTR,#_NIB + 23
   \   00003C   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   E8           MOV     A,R0
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   E9           MOV     A,R1
   \   000047   F0           MOVX    @DPTR,A
   2570                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \   000048                ; Setup parameters for call to function sAddrExtCpy
   \   000048   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   00004A   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   00004C   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00004F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2571                  pItem->panId = _NIB. nwkPanId;
   \   000052   90....       MOV     DPTR,#_NIB + 33
   \   000055   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E8           MOV     A,R0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
   2572                  pItem->linkInfo.rxLqi = DEF_LQI;
   \   000060   EE           MOV     A,R6
   \   000061   240F         ADD     A,#0xf
   \   000063   F582         MOV     DPL,A
   \   000065   E4           CLR     A
   \   000066   3F           ADDC    A,R7
   \   000067   F583         MOV     DPH,A
   \   000069   74AA         MOV     A,#-0x56
   \   00006B   F0           MOVX    @DPTR,A
   2573                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   00006C   90....       MOV     DPTR,#gLINK_DOWN_TRIGGER
   \   00006F   E4           CLR     A
   \   000070   93           MOVC    A,@A+DPTR
   \   000071   7900         MOV     R1,#0x0
   \   000073   2401         ADD     A,#0x1
   \   000075   F8           MOV     R0,A
   \   000076   5001         JNC     ??ZDO_JoinConfirmCB_2
   \   000078   09           INC     R1
   \                     ??ZDO_JoinConfirmCB_2:
   \   000079   7A02         MOV     R2,#0x2
   \   00007B   7B00         MOV     R3,#0x0
   \   00007D   12....       LCALL   ?S_DIV_MOD
   \   000080   EE           MOV     A,R6
   \   000081   240D         ADD     A,#0xd
   \   000083   F582         MOV     DPL,A
   \   000085   E4           CLR     A
   \   000086   3F           ADDC    A,R7
   \   000087   F583         MOV     DPH,A
   \   000089   E8           MOV     A,R0
   \   00008A   F0           MOVX    @DPTR,A
   2574                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   00008B   EE           MOV     A,R6
   \   00008C   240E         ADD     A,#0xe
   \   00008E   F582         MOV     DPL,A
   \   000090   E4           CLR     A
   \   000091   3F           ADDC    A,R7
   \   000092   F583         MOV     DPH,A
   \   000094   7401         MOV     A,#0x1
   \   000096   F0           MOVX    @DPTR,A
   2575                }
   2576              }
   2577              
   2578              // LED on shows device joined
   2579              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \                     ??ZDO_JoinConfirmCB_1:
   \   000097                ; Setup parameters for call to function HalLedSet
   \   000097   7A01         MOV     R2,#0x1
   \   000099   7904         MOV     R1,#0x4
   \   00009B   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2580              // LED off forgets HOLD_AUTO_START
   2581              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   00009E                ; Setup parameters for call to function HalLedSet
   \   00009E   7A00         MOV     R2,#0x0
   \   0000A0   7908         MOV     R1,#0x8
   \   0000A2   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2582              if ( (devState == DEV_HOLD) )
   \   0000A5   90....       MOV     DPTR,#devState
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   700C         JNZ     ??ZDO_JoinConfirmCB_3
   2583              {
   2584                // Began with HOLD_AUTO_START
   2585                devState = DEV_NWK_JOINING;
   \   0000AB   7403         MOV     A,#0x3
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   8007         SJMP    ??ZDO_JoinConfirmCB_3
   2586              }
   2587          
   2588              if ( !ZG_SECURE_ENABLED )
   2589              {
   2590                // Notify to save info into NV
   2591                ZDApp_NVUpdate();
   2592              }
   2593            }
   2594            else
   2595            {
   2596          #if defined(BLINK_LEDS)
   2597              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   0000B0                ; Setup parameters for call to function HalLedSet
   \   0000B0   7A04         MOV     R2,#0x4
   \   0000B2   7904         MOV     R1,#0x4
   \   0000B4   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2598          #endif
   2599            }
   2600          
   2601            // Pass the join confirm to higher layer if callback registered
   2602            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_3:
   \   0000B7   90....       MOV     DPTR,#zdoCBFunc + 8
   \   0000BA   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0000BD   6037         JZ      ??ZDO_JoinConfirmCB_4
   2603            {
   2604              zdoJoinCnf_t joinCnf;
   2605          
   2606              joinCnf.status = Status;
   \   0000BF   85..82       MOV     DPL,?XSP + 0
   \   0000C2   85..83       MOV     DPH,?XSP + 1
   \   0000C5   E5..         MOV     A,?V0
   \   0000C7   F0           MOVX    @DPTR,A
   2607              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   0000C8   90....       MOV     DPTR,#_NIB + 20
   \   0000CB   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000CE   7401         MOV     A,#0x1
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   E8           MOV     A,R0
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   E9           MOV     A,R1
   \   0000D7   F0           MOVX    @DPTR,A
   2608              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \   0000D8   90....       MOV     DPTR,#_NIB + 23
   \   0000DB   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   2609          
   2610              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   2611            }
   \                     ??CrossCallReturnLabel_76:
   \   0000DE   7403         MOV     A,#0x3
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   E8           MOV     A,R0
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   E9           MOV     A,R1
   \   0000E7   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000EA   90....       MOV     DPTR,#zdoCBFunc + 8
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F8           MOV     R0,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000F3   12....       LCALL   ?CALL_IND
   2612          
   2613            // Notify ZDApp
   2614            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_4:
   \   0000F6                ; Setup parameters for call to function ZDApp_SendMsg
   \   0000F6   7C00         MOV     R4,#0x0
   \   0000F8   7D00         MOV     R5,#0x0
   \   0000FA   7B02         MOV     R3,#0x2
   \   0000FC   7A02         MOV     R2,#0x2
   \   0000FE   90....       MOV     DPTR,#ZDAppTaskID
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F9           MOV     R1,A
   \   000103   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2615          
   2616          }
   \   000106   7405         MOV     A,#0x5
   \   000108   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET
   2617          
   2618          /*********************************************************************
   2619           * @fn          ZDO_PermitJoinCB
   2620           *
   2621           * @brief      This function is called when there is a change in the
   2622           *             device's permit join status.
   2623           *
   2624           * @param       duration - the new duration
   2625           *
   2626           * @return      none
   2627           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2628          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2629          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2630            // Pass the Permit Join status to higher layer if callback registered
   2631            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000017   6006         JZ      ??ZDO_PermitJoinCB_0
   2632            {
   2633              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   12....       LCALL   ?Subroutine18 & 0xFFFF
   2634            }
   \                     ??CrossCallReturnLabel_116:
   \   00001C   12....       LCALL   ?CALL_IND
   2635          }
   \                     ??ZDO_PermitJoinCB_0:
   \   00001F   7401         MOV     A,#0x1
   \   000021   02....       LJMP    ?Subroutine4 & 0xFFFF
   2636          
   2637          /*********************************************************************
   2638           * @fn          ZDO_AddrChangeIndicationCB
   2639           *
   2640           * @brief       This function notifies the application that this
   2641           *              device's address has changed.  Could happen in
   2642           *              a network with stochastic addressing (PRO).
   2643           *
   2644           * @param       newAddr - the new address
   2645           *
   2646           * @return      none
   2647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2648          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2649          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2650            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2651            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   2652          
   2653            // Notify to save info into NV
   2654            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_103:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2655          
   2656            // Notify the applications
   2657            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   7A10         MOV     R2,#0x10
   \   000014   7B00         MOV     R3,#0x0
   \   000016   90....       MOV     DPTR,#ZDAppTaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00001E   803D         SJMP    ??ZDO_AddrChangeIndicationCB_0
   2658          
   2659            while (pItem != NULL)
   2660            {
   2661              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000029   602B         JZ      ??ZDO_AddrChangeIndicationCB_2
   2662              {
   2663                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   00002B                ; Setup parameters for call to function osal_msg_allocate
   \   00002B   7A04         MOV     R2,#0x4
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2664                if (pZDOAddrChangeMsg != NULL)
   \   000032   EA           MOV     A,R2
   \   000033   4B           ORL     A,R3
   \   000034   6020         JZ      ??ZDO_AddrChangeIndicationCB_2
   2665                {
   2666                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   74D6         MOV     A,#-0x2a
   \   00003C   F0           MOVX    @DPTR,A
   2667                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E5..         MOV     A,?V0
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   E5..         MOV     A,?V1
   \   000045   12....       LCALL   ?Subroutine11 & 0xFFFF
   2668                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   2669                }
   2670              }
   \                     ??CrossCallReturnLabel_1:
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00004E   A3           INC     DPTR
   \   00004F   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000052   F9           MOV     R1,A
   \   000053   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2671              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_2:
   \   000056   12....       LCALL   ?Subroutine23 & 0xFFFF
   2672            }
   \                     ??CrossCallReturnLabel_79:
   \   000059   E8           MOV     A,R0
   \   00005A   FE           MOV     R6,A
   \   00005B   E9           MOV     A,R1
   \   00005C   FF           MOV     R7,A
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   00005D   EE           MOV     A,R6
   \   00005E   4F           ORL     A,R7
   \   00005F   70BF         JNZ     ??ZDO_AddrChangeIndicationCB_1
   2673          
   2674            // Send out a device announce
   2675            ZDApp_AnnounceNewAddress();
   \   000061                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000061   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2676          }
   \   000064   02....       LJMP    ??Subroutine59_0 & 0xFFFF
   2677          
   2678          /*********************************************************************
   2679           * @fn          ZDO_JoinIndicationCB
   2680           *
   2681           * @brief       This function allows the next higher layer of a
   2682           *              coordinator to be notified of a remote join request.
   2683           *
   2684           * @param       ShortAddress - 16-bit address
   2685           * @param       ExtendedAddress - IEEE (64-bit) address
   2686           * @param       CapabilityFlags - Association Capability Flags
   2687           * @param       type - of joining -
   2688           *                          NWK_ASSOC_JOIN
   2689           *                          NWK_ASSOC_REJOIN_UNSECURE
   2690           *                          NWK_ASSOC_REJOIN_SECURE
   2691           *
   2692           * @return      ZStatus_t
   2693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2694          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2695                                          uint8 CapabilityFlags, uint8 type)
   2696          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   2697          
   2698          #if NODE_AUTH   //chaokw
   2699            ZStatus_t status = ZSuccess;  //chaokw
   2700          #endif  
   2701          
   2702          #ifndef ZDO_COORDINATOR
   2703          	bool permit = FALSE;
   2704          	ZDO_Permit_Join_Device_t *tmp_join_device = NULL;
   2705          #endif
   2706          
   2707            (void)ExtendedAddress;
   2708          #if ZDO_NV_SAVE_RFDs
   2709            (void)CapabilityFlags;
   2710          
   2711          #else  // if !ZDO_NV_SAVE_RFDs
   2712            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2713          #endif
   2714            {
   2715              ZDApp_NVUpdate();  // Notify to save info into NV.
   \   00000D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000D   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2716            }
   2717          
   2718          #if NODE_AUTH   //chaokw
   2719            if ( status == ZSuccess )
   2720            {
   2721              if (!Authlist_verify_device(ShortAddress, ExtendedAddress, 0, 0))
   \   000010                ; Setup parameters for call to function Authlist_verify_device
   \   000010   75..00       MOV     ?V2,#0x0
   \   000013   78..         MOV     R0,#?V2
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000018   7900         MOV     R1,#0x0
   \   00001A   EE           MOV     A,R6
   \   00001B   FC           MOV     R4,A
   \   00001C   EF           MOV     A,R7
   \   00001D   FD           MOV     R5,A
   \   00001E   AA..         MOV     R2,?V0
   \   000020   AB..         MOV     R3,?V1
   \   000022   12....       LCALL   `??Authlist_verify_device::?relay`; Banked call to: Authlist_verify_device
   \   000025   7401         MOV     A,#0x1
   \   000027   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002A   E9           MOV     A,R1
   \   00002B   7005         JNZ     ??ZDO_JoinIndicationCB_0
   2722                return ZFailure;
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2723            }
   \                     ??ZDO_JoinIndicationCB_0:
   \   000032   7410         MOV     A,#0x10
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   2724          #endif
   2725          
   2726          
   2727          #if  1   //chaokw panid
   2728          	//Router need Coordinator for premit join
   2729          	#ifndef ZDO_COORDINATOR
   2730          		osal_memcpy(join_device_extaddr, ExtendedAddress, SADDR_EXT_LEN);
   2731          		tmp_join_device = zdo_join_device;
   2732          #if 0  //chaokw ping		
   2733                        // timeout to free the heap of join device
   2734          		osal_start_timerEx( GenericApp_TaskID,
   2735          							GENERICAPP_CLEAR_JOIN_DEVICES_EVT,
   2736          							GENERICAPP_CLEAR_JOIN_DEVICE_TIMEOUT);
   2737          #endif
   2738          		while (tmp_join_device)
   2739          		{
   2740          			if (sAddrExtCmp(tmp_join_device->permit_device.extaddr, join_device_extaddr))
   2741          			{
   2742          				permit = TRUE;
   2743          				break;
   2744          			}
   2745          			tmp_join_device = tmp_join_device->next;
   2746          		}
   2747          		if (permit == FALSE)
   2748          		{
   2749          			transfer_join_times = 0;
   2750          			osal_start_timerEx( GenericApp_TaskID, GENERICAPP_PERMIT_JOIN_MSG_EVT, 100);
   2751          			return ZFailure;
   2752          		}
   2753          
   2754          	#endif
   2755          #endif
   2756          
   2757          
   2758          
   2759            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2760            {
   2761              if ( type == NWK_ASSOC_JOIN ||
   2762                   type == NWK_ASSOC_REJOIN_UNSECURE ||
   2763                   type == NWK_ASSOC_REJOIN_SECURE )
   \   000039   600D         JZ      ??ZDO_JoinIndicationCB_2
   \   00003B   7401         MOV     A,#0x1
   \   00003D   68           XRL     A,R0
   \   00003E   6008         JZ      ??ZDO_JoinIndicationCB_2
   \   000040   7402         MOV     A,#0x2
   \   000042   68           XRL     A,R0
   \   000043   6003         JZ      $+5
   \   000045   02....       LJMP    ??ZDO_JoinIndicationCB_3 & 0xFFFF
   2764              {
   2765                uint16 timeToFire;
   2766                ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2767          
   2768                pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_2:
   \   000048                ; Setup parameters for call to function osal_mem_alloc
   \   000048   7A06         MOV     R2,#0x6
   \   00004A   7B00         MOV     R3,#0x0
   \   00004C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004F   8A..         MOV     ?V2,R2
   \   000051   8B..         MOV     ?V3,R3
   \   000053   AE..         MOV     R6,?V2
   \   000055   AF..         MOV     R7,?V3
   2769          
   2770                if ( pNewDevice == NULL )
   \   000057   EE           MOV     A,R6
   \   000058   4F           ORL     A,R7
   \   000059   7005         JNZ     ??ZDO_JoinIndicationCB_4
   2771                {
   2772                  // Memory alloc failed
   2773                  return ZMemError;
   \   00005B   7910         MOV     R1,#0x10
   \   00005D   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2774                }
   2775          
   2776                // Add the new device to the New Device List
   2777                if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_4:
   \   000060   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000063   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000066   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000069   7006         JNZ     ??ZDO_JoinIndicationCB_5
   2778                {
   2779                  // The list is empty, add the first element
   2780                  ZDApp_NewDeviceList = pNewDevice;
   \   00006B   EE           MOV     A,R6
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   EF           MOV     A,R7
   \   00006F   801F         SJMP    ??ZDO_JoinIndicationCB_6
   2781                }
   2782                else
   2783                {
   2784                  pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_5:
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FA           MOV     R2,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   8003         SJMP    ??ZDO_JoinIndicationCB_7
   2785          
   2786                  // Walk the list to last element
   2787                  while ( pDeviceList->next )
   2788                  {
   2789                    pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_8:
   \   000077   E8           MOV     A,R0
   \   000078   FA           MOV     R2,A
   \   000079   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_7:
   \   00007A   FB           MOV     R3,A
   2790                  }
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000082   70F3         JNZ     ??ZDO_JoinIndicationCB_8
   2791          
   2792                  // Add new device at the end
   2793                  pDeviceList->next = pNewDevice;
   \   000084   EE           MOV     A,R6
   \   000085   F8           MOV     R0,A
   \   000086   EF           MOV     A,R7
   \   000087   F9           MOV     R1,A
   \   000088   8A82         MOV     DPL,R2
   \   00008A   8B83         MOV     DPH,R3
   \   00008C   E8           MOV     A,R0
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_6:
   \   000090   F0           MOVX    @DPTR,A
   2794                }
   2795          
   2796                // get the remaining time of the timer
   2797                timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   000091                ; Setup parameters for call to function osal_get_timeoutEx
   \   000091   7A40         MOV     R2,#0x40
   \   000093   7B00         MOV     R3,#0x0
   \   000095   90....       MOV     DPTR,#ZDAppTaskID
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00009D   8A..         MOV     ?V4,R2
   \   00009F   8B..         MOV     ?V5,R3
   2798          
   2799                pNewDevice->next = NULL;
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   12....       LCALL   ?Subroutine11 & 0xFFFF
   2800                pNewDevice->shortAddr = ShortAddress;
   \                     ??CrossCallReturnLabel_2:
   \   0000AB   E5..         MOV     A,?V0
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E5..         MOV     A,?V1
   \   0000B1   F0           MOVX    @DPTR,A
   2801                pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   0000B2   7458         MOV     A,#0x58
   \   0000B4   C3           CLR     C
   \   0000B5   95..         SUBB    A,?V4
   \   0000B7   F8           MOV     R0,A
   \   0000B8   7402         MOV     A,#0x2
   \   0000BA   95..         SUBB    A,?V5
   \   0000BC   F9           MOV     R1,A
   \   0000BD   8E82         MOV     DPL,R6
   \   0000BF   8F83         MOV     DPH,R7
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   E8           MOV     A,R0
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E9           MOV     A,R1
   \   0000C9   F0           MOVX    @DPTR,A
   2802          
   2803                // Start the timer only if there is no pending timer
   2804                if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \   0000CA   7458         MOV     A,#0x58
   \   0000CC   68           XRL     A,R0
   \   0000CD   7003         JNZ     ??ZDO_JoinIndicationCB_9
   \   0000CF   7402         MOV     A,#0x2
   \   0000D1   69           XRL     A,R1
   \                     ??ZDO_JoinIndicationCB_9:
   \   0000D2   7017         JNZ     ??ZDO_JoinIndicationCB_3
   2805                {
   2806                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000D4                ; Setup parameters for call to function osal_start_timerEx
   \   0000D4   90....       MOV     DPTR,#__Constant_258
   \   0000D7   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000DA   7A40         MOV     R2,#0x40
   \   0000DC   7B00         MOV     R3,#0x0
   \   0000DE   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000E6   7404         MOV     A,#0x4
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   2807                }
   2808              }
   2809            }
   2810          
   2811            return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000EB   7900         MOV     R1,#0x0
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000ED   02....       LJMP    ?Subroutine2 & 0xFFFF
   2812          }
   2813          
   2814          /*********************************************************************
   2815           * @fn          ZDO_ConcentratorIndicationCB
   2816           *
   2817           * @brief       This function allows the next higher layer of a
   2818           *              device to be notified of existence of the concentrator.
   2819           *
   2820           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2821           * @param       extAddr - pointer to extended Address
   2822           *                        NULL if not available
   2823           * @param       pktCost - PktCost from RREQ
   2824           *
   2825           * @return      void
   2826           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2827          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2828          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2829            zdoConcentratorInd_t conInd;
   2830          
   2831            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2832            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_124:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   2833            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   2834          
   2835            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000024   6006         JZ      ??ZDO_ConcentratorIndicationCB_0
   2836            {
   2837              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   12....       LCALL   ?Subroutine18 & 0xFFFF
   2838            }
   \                     ??CrossCallReturnLabel_117:
   \   000029   12....       LCALL   ?CALL_IND
   2839          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002C                REQUIRE ?Subroutine7
   \   00002C                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7405         MOV     A,#0x5
   \   000002                REQUIRE ??Subroutine55_0
   \   000002                ; // Fall through to label ??Subroutine55_0
   2840          
   2841          /*********************************************************************
   2842           * @fn          ZDO_LeaveCnf
   2843           *
   2844           * @brief       This function allows the next higher layer to be
   2845           *              notified of the results of its request for this or
   2846           *              a child device to leave the network.
   2847           *
   2848           * @param       cnf - NLME_LeaveCnf_t
   2849           *
   2850           * @return      none
   2851           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2852          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2853          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2854            // Check for this device
   2855            if ( osal_ExtAddrEqual( cnf->extAddr,
   2856                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AC..         MOV     R4,?V0
   \   000012   AD..         MOV     R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000017   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001A   E9           MOV     A,R1
   \   00001B   6401         XRL     A,#0x1
   \   00001D   7022         JNZ     ??ZDO_LeaveCnf_0
   2857            {
   2858              // Pass the leave confirm to higher layer if callback registered
   2859              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2860                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   00001F   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000022   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000025   6011         JZ      ??ZDO_LeaveCnf_1
   \   000027                ; Setup parameters for indirect call
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00002E   12....       LCALL   ?CALL_IND
   \   000031   8B..         MOV     ?V1,R3
   \   000033   EA           MOV     A,R2
   \   000034   45..         ORL     A,?V1
   \   000036   701D         JNZ     ??ZDO_LeaveCnf_2
   2861              {
   2862                // Prepare to leave with reset
   2863                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000038                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000038   12....       LCALL   ?Subroutine33 & 0xFFFF
   2864              }
   2865            }
   \                     ??CrossCallReturnLabel_130:
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   00003F   8014         SJMP    ??ZDO_LeaveCnf_2
   2866            else if ( ZSTACK_ROUTER_BUILD )
   2867            {
   2868              // Remove device address(optionally descendents) from data
   2869              ZDApp_LeaveUpdate( cnf->dstAddr,
   2870                                 cnf->extAddr,
   2871                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_0:
   \   000041                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   12....       LCALL   ?Subroutine19 & 0xFFFF
   2872            }
   \                     ??CrossCallReturnLabel_9:
   \   000052   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2873          }
   \                     ??ZDO_LeaveCnf_2:
   \   000055   02....       LJMP    ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   EE           MOV     A,R6
   \   000003   2402         ADD     A,#0x2
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   FD           MOV     R5,A
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FA           MOV     R2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FB           MOV     R3,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003                REQUIRE ??Subroutine58_0
   \   000003                ; // Fall through to label ??Subroutine58_0
   2874          
   2875          /*********************************************************************
   2876           * @fn          ZDO_LeaveInd
   2877           *
   2878           * @brief       This function allows the next higher layer of a
   2879           *              device to be notified of a remote leave request or
   2880           *              indication.
   2881           *
   2882           * @param       ind - NLME_LeaveInd_t
   2883           *
   2884           * @return      none
   2885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2886          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2887          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2888            uint8 leave;
   2889          
   2890          
   2891            // Parent is requesting the leave - NWK layer filters out illegal
   2892            // requests
   2893            if ( ind->request == TRUE )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   701D         JNZ     ??ZDO_LeaveInd_0
   2894            {
   2895              // Only respond if we are not rejoining the network
   2896              if ( ind->rejoin == FALSE )
   \   000021   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000024   703C         JNZ     ??ZDO_LeaveInd_1
   2897              {
   2898                // Notify network of leave
   2899                NLME_LeaveRsp_t rsp;
   2900                rsp.rejoin = ind->rejoin;
   \   000026   7401         MOV     A,#0x1
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
   2901          
   2902                if ( ZSTACK_ROUTER_BUILD )
   2903                {
   2904                  rsp.removeChildren = ind->removeChildren;
   \   00002D   12....       LCALL   ?Subroutine33 & 0xFFFF
   2905                }
   2906                else if ( ZSTACK_END_DEVICE_BUILD )
   2907                {
   2908                  rsp.removeChildren = 0;
   2909                }
   2910          
   2911                NLME_LeaveRsp( &rsp );
   2912              }
   2913          
   2914              if ( ZSTACK_END_DEVICE_BUILD )
   2915              {
   2916                // Stop polling and get ready to reset
   2917                NLME_SetPollRate( 0 );
   2918              }
   2919          
   2920              // Prepare to leave with reset
   2921              ZDApp_LeaveReset( ind->rejoin );
   2922            }
   \                     ??CrossCallReturnLabel_131:
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000039   12....       LCALL   `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   \   00003C   8024         SJMP    ??ZDO_LeaveInd_1
   2923            else
   2924            {
   2925              leave = FALSE;
   2926          
   2927              // Check if this device needs to leave as a child or descendent
   2928              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   00003E                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00003E   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000041   8A..         MOV     ?V0,R2
   \   000043   8B..         MOV     ?V1,R3
   \   000045   A8..         MOV     R0,?V0
   \   000047   A9..         MOV     R1,?V1
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   68           XRL     A,R0
   \   00004F   7003         JNZ     ??ZDO_LeaveInd_2
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   69           XRL     A,R1
   \                     ??ZDO_LeaveInd_2:
   \   000054   7015         JNZ     ??ZDO_LeaveInd_3
   2929              {
   2930                if ( ( ind->removeChildren == TRUE               ) ||
   2931                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2932                       NODETYPE_DEVICE                           )    )
   \   000056   12....       LCALL   ?Subroutine33 & 0xFFFF
   2933                {
   2934                  leave = TRUE;
   2935                }
   2936              }
   \                     ??CrossCallReturnLabel_132:
   \   000059   6401         XRL     A,#0x1
   \   00005B   6005         JZ      ??ZDO_LeaveInd_1
   \   00005D   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000060   7009         JNZ     ??ZDO_LeaveInd_3
   2937              else if ( ind->removeChildren == TRUE )
   2938              {
   2939                // Check NWK address allocation algorithm
   2940                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2941              }
   2942          
   2943              if ( leave == TRUE )
   2944              {
   2945                // Prepare to leave with reset
   2946                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_1:
   \   000062                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000062   12....       LCALL   ?Subroutine32 & 0xFFFF
   2947              }
   \                     ??CrossCallReturnLabel_35:
   \   000065   F9           MOV     R1,A
   \   000066   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000069   800F         SJMP    ??ZDO_LeaveInd_4
   2948              else
   2949              {
   2950                // Remove device address(optionally descendents) from data
   2951                ZDApp_LeaveUpdate( ind->srcAddr,
   2952                                   ind->extAddr,
   2953                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_3:
   \   00006B                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   00006B   EE           MOV     A,R6
   \   00006C   240B         ADD     A,#0xb
   \   00006E   F582         MOV     DPL,A
   \   000070   E4           CLR     A
   \   000071   3F           ADDC    A,R7
   \   000072   F583         MOV     DPH,A
   \   000074   12....       LCALL   ?Subroutine19 & 0xFFFF
   2954              }
   2955            }
   \                     ??CrossCallReturnLabel_10:
   \   000077   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2956          
   2957            // Pass the leave indication to higher layer if callback registered.
   2958            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_4:
   \   00007A   90....       MOV     DPTR,#zdoCBFunc + 12
   \   00007D   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000080   600A         JZ      ??ZDO_LeaveInd_5
   2959            {
   2960              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   000082                ; Setup parameters for indirect call
   \   000082   EE           MOV     A,R6
   \   000083   FA           MOV     R2,A
   \   000084   EF           MOV     A,R7
   \   000085   FB           MOV     R3,A
   \   000086   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   2961            }
   \                     ??CrossCallReturnLabel_114:
   \   000089   12....       LCALL   ?CALL_IND
   2962          }
   \                     ??ZDO_LeaveInd_5:
   \   00008C   02....       LJMP    ?Subroutine8 & 0xFFFF
   2963          
   2964          /*********************************************************************
   2965           * @fn          ZDO_SyncIndicationCB
   2966           *
   2967           * @brief       This function allows the next higher layer of a
   2968           *              coordinator to be notified of a loss of synchronization
   2969           *                          with the parent/child device.
   2970           *
   2971           * @param       type: 0 - child; 1 - parent
   2972           *
   2973           *
   2974           * @return      none
   2975           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2976          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2977          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2978            (void)shortAddr;  // Remove this line if this parameter is used.
   2979          
   2980            if ( ZSTACK_END_DEVICE_BUILD
   2981              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000007   90....       MOV     DPTR,#_NIB + 14
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   4018         JC      ??ZDO_SyncIndicationCB_0
   2982            {
   2983              if ( type == 1 )
   \   00000F   7401         MOV     A,#0x1
   \   000011   6E           XRL     A,R6
   \   000012   7013         JNZ     ??ZDO_SyncIndicationCB_0
   2984              {
   2985                // We lost contact with our parent.  Clear the neighbor Table.
   2986                nwkNeighborInitTable();
   \   000014                ; Setup parameters for call to function nwkNeighborInitTable
   \   000014   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2987          
   2988                // Start the rejoin process.
   2989                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000017                ; Setup parameters for call to function ZDApp_SendMsg
   \   000017   7C00         MOV     R4,#0x0
   \   000019   7D00         MOV     R5,#0x0
   \   00001B   7B02         MOV     R3,#0x2
   \   00001D   7A03         MOV     R2,#0x3
   \   00001F   90....       MOV     DPTR,#ZDAppTaskID
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2990              }
   2991            }
   2992          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   000027   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   2993          
   2994          /*********************************************************************
   2995           * @fn          ZDO_ManytoOneFailureIndicationCB
   2996           *
   2997           * @brief       This function allows the next higher layer of a
   2998           *              concentrator to be notified of a many-to-one route
   2999           *              failure.
   3000           *
   3001           * @param       none
   3002           *
   3003           *
   3004           * @return      none
   3005           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3006          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3007          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3008            // By default, the concentrator automatically redo many-to-one route
   3009            // discovery to update all many-to-one routes in the network
   3010            // If you want anything processing other than the default,
   3011            // please replace the following code.
   3012          
   3013            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   3014          }
   \   000007   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   3015          
   3016          /*********************************************************************
   3017           * @fn          ZDO_PollConfirmCB
   3018           *
   3019           * @brief       This function allows the next higher layer to be
   3020           *              notified of a Poll Confirm.
   3021           *
   3022           * @param       none
   3023           *
   3024           * @return      none
   3025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3026          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3027          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3028            (void)status;  // Remove this line if this parameter is used.
   3029            return;
   \   000000   02....       LJMP    ?BRET
   3030          }
   3031          
   3032          /*********************************************************************
   3033           * @fn          ZDO_NetworkStatusCB
   3034           *
   3035           * @brief       Network Status Callback function
   3036           *
   3037           * @param       nwkDstAddr - message's destination address- used to determine
   3038           *                           if the message was intended for this device or
   3039           *                           a sleeping end device.
   3040           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3041           * @param       dstAddr - the destination address related to the status code
   3042           *
   3043           * @return      none
   3044           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3045          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3046          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3047            (void)dstAddr;     // Remove this line if this parameter is used.
   3048          
   3049            if ( (nwkDstAddr == NLME_GetShortAddr())
   3050                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   3051            {
   3052              // Routing error for dstAddr, this is informational and a Route
   3053              // Request should happen automatically.
   3054            }
   3055          }
   \   000007   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   3056          
   3057          /******************************************************************************
   3058           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3059           *
   3060           * @brief       Stub routine implemented by NHLE. NHLE should call
   3061           *              <AddrMgrWriteNV> when appropriate.
   3062           *
   3063           * @param       none
   3064           *
   3065           * @return      none
   3066           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3067          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3068          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3069          #if defined ( NV_RESTORE )
   3070            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??AddrMgrWriteNVRequest_0
   3071            {
   3072              // Trigger to save info into NV
   3073              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3074            }
   3075          #endif
   3076          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000019   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   3077          
   3078          /*********************************************************************
   3079           * Call Back Functions from Security  - API
   3080           */
   3081          
   3082           /*********************************************************************
   3083           * @fn          ZDO_UpdateDeviceIndication
   3084           *
   3085           * @brief       This function notifies the "Trust Center" of a
   3086           *              network when a device joins or leaves the network.
   3087           *
   3088           * @param       extAddr - pointer to 64 bit address of new device
   3089           * @param       status  - 0 if a new device joined securely
   3090           *                      - 1 if a new device joined un-securely
   3091           *                      - 2 if a device left the network
   3092           *
   3093           * @return      true if newly joined device should be allowed to
   3094           *                                              remain on network
   3095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3096          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3097          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3098            // can implement a network access policy based on the
   3099            // IEEE address of newly joining devices...
   3100            (void)extAddr;
   3101            (void)status;
   3102          
   3103            return ZSuccess;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   3104          }
   3105          
   3106          /*********************************************************************
   3107           * @fn          ZDApp_InMsgCB
   3108           *
   3109           * @brief       This function is called to pass up any message that is
   3110           *              not yet supported.  This allows for the developer to
   3111           *              support features themselves..
   3112           *
   3113           * @return      none
   3114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3115          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3116          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3117            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   5480         ANL     A,#0x80
   \   000010   7041         JNZ     ??ZDApp_InMsgCB_0
   3118            {
   3119              // Handle the response message
   3120            }
   3121            else
   3122            {
   3123              // Handle the request message by sending a generic "not supported".
   3124              // Device Announce doesn't have a response.
   3125              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000012   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000015   703C         JNZ     ??ZDApp_InMsgCB_0
   \   000017   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00001A   6413         XRL     A,#0x13
   \   00001C   7002         JNZ     ??ZDApp_InMsgCB_1
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \                     ??ZDApp_InMsgCB_1:
   \   000020   6031         JZ      ??ZDApp_InMsgCB_0
   3126              {
   3127                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3128                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000022                ; Setup parameters for call to function ZDP_GenericRsp
   \   000022   12....       LCALL   ?Subroutine31 & 0xFFFF
   3129              }
   3130            }
   \                     ??CrossCallReturnLabel_31:
   \   000025   4480         ORL     A,#0x80
   \   000027   F5..         MOV     ?V1,A
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   E4           CLR     A
   \   00002F   F5..         MOV     ?V0,A
   \   000031   F5..         MOV     ?V1,A
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   EE           MOV     A,R6
   \   000039   240E         ADD     A,#0xe
   \   00003B   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00003E   FD           MOV     R5,A
   \   00003F   7C84         MOV     R4,#-0x7c
   \   000041   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000044   EE           MOV     A,R6
   \   000045   240F         ADD     A,#0xf
   \   000047   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   3131          }
   \                     ??ZDApp_InMsgCB_0:
   \   000053   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   3132          
   3133          
   3134          /*********************************************************************
   3135           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3136           *
   3137           * @brief   Changes the Match Descriptor Response permission.
   3138           *
   3139           * @param   endpoint - endpoint to allow responses
   3140           * @param   action - true to allow responses, false to not
   3141           *
   3142           * @return  none
   3143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3144          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3145          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3146            // Store the action
   3147            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   3148          }
   \   000008   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   3149          
   3150          /*********************************************************************
   3151           * @fn      ZDApp_NetworkInit()
   3152           *
   3153           * @brief   Used to start the network joining process
   3154           *
   3155           * @param   delay - mSec delay to wait before starting
   3156           *
   3157           * @return  none
   3158           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3159          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3160          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3161            if ( delay )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6021         JZ      ??ZDApp_NetworkInit_0
   3162            {
   3163              // Wait awhile before starting the device
   3164              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV     ?V0,R2
   \   00000B   8B..         MOV     ?V1,R3
   \   00000D   E4           CLR     A
   \   00000E   F5..         MOV     ?V2,A
   \   000010   F5..         MOV     ?V3,A
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   800C         SJMP    ??ZDApp_NetworkInit_1
   3165            }
   3166            else
   3167            {
   3168              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002A                ; Setup parameters for call to function osal_set_event
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   3169            }
   3170          }
   \                     ??ZDApp_NetworkInit_1:
   \   000036   02....       LJMP    ??Subroutine59_0 & 0xFFFF
   3171          
   3172          /*********************************************************************
   3173           * @fn      ZDApp_NwkStateUpdateCB()
   3174           *
   3175           * @brief   This function notifies that this device's network
   3176           *          state info has been changed.
   3177           *
   3178           * @param   none
   3179           *
   3180           * @return  none
   3181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3182          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3183          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3184            // Notify to save info into NV
   3185            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??ZDApp_NwkStateUpdateCB_0
   3186            {
   3187              // Trigger to save info into NV
   3188              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3189            }
   3190          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000019   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   3191          
   3192          /*********************************************************************
   3193           * @fn      ZDApp_NodeProfileSync()
   3194           *
   3195           * @brief   Sync node with stack profile.
   3196           *
   3197           * @param   stackProfile - stack profile of the network to join
   3198           *
   3199           * @return  none
   3200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3201          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3202          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3203            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501B         JNC     ??ZDApp_NodeProfileSync_0
   3204            {
   3205              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6014         JZ      ??ZDApp_NodeProfileSync_0
   3206              {
   3207                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   4402         ORL     A,#0x2
   \   00001F   F0           MOVX    @DPTR,A
   3208                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   740C         MOV     A,#0xc
   \   000025   F0           MOVX    @DPTR,A
   3209                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000026                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3210              }
   3211            }
   3212          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   00002A   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   3213          
   3214          /*********************************************************************
   3215           * @fn      ZDApp_StartJoiningCycle()
   3216           *
   3217           * @brief   Starts the joining cycle of a device.  This will only
   3218           *          continue an already started (or stopped) joining cycle.
   3219           *
   3220           * @param   none
   3221           *
   3222           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3224          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3225          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3226            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   3227            {
   3228              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   3229              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3230          
   3231              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   3232            }
   3233            else
   3234              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   3235          }
   3236          
   3237          /*********************************************************************
   3238           * @fn      ZDApp_StopJoiningCycle()
   3239           *
   3240           * @brief   Stops the joining or rejoining process of a device.
   3241           *
   3242           * @param   none
   3243           *
   3244           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3246          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3247          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3248            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   3249            {
   3250              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   3251              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   3252            }
   3253            else
   3254              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   3255          }
   3256          
   3257          /*********************************************************************
   3258           * @fn      ZDApp_AnnounceNewAddress()
   3259           *
   3260           * @brief   Send Device Announce and hold all transmissions for
   3261           *          new address timeout.
   3262           *
   3263           * @param   none
   3264           *
   3265           * @return  none
   3266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3267          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3268          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3269          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3270            // Turn off data request hold
   3271            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3272          #endif
   3273          
   3274            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3275                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000F   8A..         MOV     ?V0,R2
   \   000011   8B..         MOV     ?V1,R3
   \   000013   AE..         MOV     R6,?V0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV     ?V0,#0x0
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   EE           MOV     A,R6
   \   000026   FC           MOV     R4,A
   \   000027   AD..         MOV     R5,?V1
   \   000029   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   3276          
   3277          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3278            // Setup the timeout
   3279            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3280          #endif
   3281          }
   \   000038   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   3282          
   3283          /*********************************************************************
   3284           * @fn          ZDApp_NVUpdate
   3285           *
   3286           * @brief       Set the NV Update Timer.
   3287           *
   3288           * @param       none
   3289           *
   3290           * @return      none
   3291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3292          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3293          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3294          #if defined ( NV_RESTORE )
   3295            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   90....       MOV     DPTR,#__Constant_2bc
   \   000007   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   90....       MOV     DPTR,#ZDAppTaskID
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000016   7404         MOV     A,#0x4
   \   000018   02....       LJMP    ?Subroutine4 & 0xFFFF
   3296          #endif
   3297          }
   3298          
   3299          /*********************************************************************
   3300           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3301           *
   3302           * @brief   Returns a PAN ID for the network layer to use during
   3303           *          a coordinator start and there is another network with
   3304           *          the intended PANID.
   3305           *
   3306           * @param   panid - the intended PAN ID
   3307           *
   3308           * @return  PANID to try
   3309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3310          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3311          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3312            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   5001         JNC     ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC     R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP    ?BRET
   3313          }
   3314          
   3315          /*********************************************************************
   3316           * @fn          ZDO_SrcRtgIndCB
   3317           *
   3318           * @brief       This function notifies the ZDO available src route record received.
   3319           *
   3320           * @param       srcAddr - source address of the source route
   3321           * @param       relayCnt - number of devices in the relay list
   3322           * @param       relayList - relay list of the source route
   3323           *
   3324           * @return      none
   3325           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3326          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3327          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3328            zdoSrcRtg_t srcRtg;
   3329          
   3330            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
   3331            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_125:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   3332            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   3333          
   3334            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000024   6006         JZ      ??ZDO_SrcRtgIndCB_0
   3335            {
   3336              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   12....       LCALL   ?Subroutine18 & 0xFFFF
   3337            }
   \                     ??CrossCallReturnLabel_118:
   \   000029   12....       LCALL   ?CALL_IND
   3338          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   00002C   02....       LJMP    ?Subroutine7 & 0xFFFF
   3339          
   3340          /*********************************************************************
   3341           * @fn          ZDApp_InitZdoCBFunc
   3342           *
   3343           * @brief       Call this function to initialize zdoCBFunc[]
   3344           *
   3345           * @param       none
   3346           *
   3347           * @return      none
   3348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3349          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3350          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3351            uint8 i;
   3352          
   3353            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   3354            {
   3355              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV     A,R2
   \   000007   25E0         ADD     A,0xE0 /* A   */
   \   000009   12....       LCALL   ?Subroutine41 & 0xFFFF
   3356            }
   \                     ??CrossCallReturnLabel_51:
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   0A           INC     R2
   \   000011   EA           MOV     A,R2
   \   000012   C3           CLR     C
   \   000013   9409         SUBB    A,#0x9
   \   000015   40EF         JC      ??ZDApp_InitZdoCBFunc_0
   3357          }
   \   000017   02....       LJMP    ??Subroutine48_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#zdoCBFunc & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
   3358          
   3359          /*********************************************************************
   3360           * @fn          ZDO_RegisterForZdoCB
   3361           *
   3362           * @brief       Call this function to register the higher layer (for
   3363           *              example, the Application layer or MT layer) with ZDO
   3364           *              callbacks to get notified of some ZDO indication like
   3365           *              existence of a concentrator or receipt of a source
   3366           *              route record.
   3367           *
   3368           * @param       indID - ZDO Indication ID
   3369           * @param       pFn   - Callback function pointer
   3370           *
   3371           * @return      ZSuccess - successful, ZInvalidParameter if not
   3372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3373          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3374          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3375            // Check the range of the indication ID
   3376            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500B         JNC     ??ZDO_RegisterForZdoCB_0
   3377            {
   3378              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00000F   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   3379              return ZSuccess;
   \                     ??CrossCallReturnLabel_121:
   \   000012   7900         MOV     R1,#0x0
   \   000014   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3380            }
   3381          
   3382            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   3383          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   29           ADD     A,R1
   \   000001   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000004   22           RET
   3384          
   3385          /*********************************************************************
   3386           * @fn          ZDO_DeregisterForZdoCB
   3387           *
   3388           * @brief       Call this function to de-register the higher layer (for
   3389           *              example, the Application layer or MT layer) with ZDO
   3390           *              callbacks to get notified of some ZDO indication like
   3391           *              existence of a concentrator or receipt of a source
   3392           *              route record.
   3393           *
   3394           * @param       indID - ZDO Indication ID
   3395           *
   3396           * @return      ZSuccess - successful, ZInvalidParameter if not
   3397           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3398          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3399          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3400            // Check the range of the indication ID
   3401            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500B         JNC     ??ZDO_DeregisterForZdoCB_0
   3402            {
   3403              zdoCBFunc[indID] = NULL;
   \   00000B   EA           MOV     A,R2
   \   00000C   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
   3404              return ZSuccess;
   \   000013   F9           MOV     R1,A
   \   000014   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3405            }
   3406          
   3407            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000018   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   3408          }
   3409          
   3410          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3411          #if defined ( REFLECTOR )
   3412          /*********************************************************************
   3413           * @fn          ZDApp_SetPendingBindDefault
   3414           *
   3415           * @brief       This function initializes a specific entry of pending
   3416           *              Bind Request.
   3417           *
   3418           * @param       pendBindReq - pointer to the entry in the table
   3419           *
   3420           * @return      none
   3421           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3422          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3423          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3424            // Set it to an initial value
   3425            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV     R4,#0x21
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3426          
   3427            // We are checking for age 0 for aged-out records
   3428            pendBindReq->age = 0;
   \   000012   EE           MOV     A,R6
   \   000013   2420         ADD     A,#0x20
   \   000015   F582         MOV     DPL,A
   \   000017   E4           CLR     A
   \   000018   3F           ADDC    A,R7
   \   000019   F583         MOV     DPH,A
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   3429          }
   \   00001D   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   3430          
   3431          /*********************************************************************
   3432           * @fn          ZDApp_InitPendingBind
   3433           *
   3434           * @brief       This function initializes the buffer that holds
   3435           *              pending Bind Request messages if no valid NWK address
   3436           *              exists in Address Manager and a Network Address Req
   3437           *              has been sent out.
   3438           *
   3439           * @param       none
   3440           *
   3441           * @return      none
   3442           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003                REQUIRE ??Subroutine53_0
   \   000003                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3443          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3444          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3445            if ( ZDAppPendingBindReq == NULL )
   \   000005   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000008   7030         JNZ     ??ZDApp_InitPendingBind_0
   3446            {
   3447              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A63         MOV     R2,#0x63
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000014   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000017   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00001A   601E         JZ      ??ZDApp_InitPendingBind_0
   3448              {
   3449                uint8 i;
   3450          
   3451                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001C   7E00         MOV     R6,#0x0
   3452                {
   3453                  // Set to default values
   3454                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \                     ??ZDApp_InitPendingBind_1:
   \   00001E                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   00001E   EE           MOV     A,R6
   \   00001F   75F021       MOV     B,#0x21
   \   000022   A4           MUL     AB
   \   000023   F8           MOV     R0,A
   \   000024   A9F0         MOV     R1,B
   \   000026   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   28           ADD     A,R0
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   39           ADDC    A,R1
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3455                }
   \   000033   0E           INC     R6
   \   000034   EE           MOV     A,R6
   \   000035   C3           CLR     C
   \   000036   9403         SUBB    A,#0x3
   \   000038   40E4         JC      ??ZDApp_InitPendingBind_1
   3456              }
   3457            }
   3458          }
   \                     ??ZDApp_InitPendingBind_0:
   \   00003A   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   3459          
   3460          /*********************************************************************
   3461           * @fn          ZDApp_GetEmptyPendingBindReq
   3462           *
   3463           * @brief       This function looks for an empty entry.
   3464           *
   3465           * @param       none
   3466           *
   3467           * @return      Pointer to entry
   3468           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3469          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3470          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3471            uint8 i;
   3472          
   3473            if ( ZDAppPendingBindReq != NULL )
   \   000004   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000007   602B         JZ      ??ZDApp_GetEmptyPendingBindReq_0
   3474            {
   3475              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000009   7A00         MOV     R2,#0x0
   3476              {
   3477                if ( ZDAppPendingBindReq[i].age == 0 )
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   00000B   EA           MOV     A,R2
   \   00000C   75F021       MOV     B,#0x21
   \   00000F   A4           MUL     AB
   \   000010   F8           MOV     R0,A
   \   000011   ABF0         MOV     R3,B
   \   000013   EB           MOV     A,R3
   \   000014   12....       LCALL   ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000017   7014         JNZ     ??ZDApp_GetEmptyPendingBindReq_2
   3478                {
   3479                  return ( &ZDAppPendingBindReq[i] );
   \   000019   EA           MOV     A,R2
   \   00001A   75F021       MOV     B,#0x21
   \   00001D   A4           MUL     AB
   \   00001E   F8           MOV     R0,A
   \   00001F   EB           MOV     A,R3
   \   000020   F9           MOV     R1,A
   \   000021   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000024   E0           MOVX    A,@DPTR
   \   000025   28           ADD     A,R0
   \   000026   FA           MOV     R2,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   39           ADDC    A,R1
   \   00002A   FB           MOV     R3,A
   \   00002B   800B         SJMP    ??ZDApp_GetEmptyPendingBindReq_3
   3480                }
   3481              }
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   00002D   0A           INC     R2
   \   00002E   EA           MOV     A,R2
   \   00002F   C3           CLR     C
   \   000030   9403         SUBB    A,#0x3
   \   000032   40D7         JC      ??ZDApp_GetEmptyPendingBindReq_1
   3482            }
   3483          
   3484            // No empty entry was found
   3485            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   000034   7A00         MOV     R2,#0x0
   \   000036   7B00         MOV     R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_3:
   \   000038   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   3486          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   F9           MOV     R1,A
   \   000001   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000004   2420         ADD     A,#0x20
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   39           ADDC    A,R1
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   28           ADD     A,R0
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   39           ADDC    A,R1
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   22           RET
   3487          
   3488          /*********************************************************************
   3489           * @fn          ZDApp_ProcessPendingBindReq
   3490           *
   3491           * @brief       Process pending entry based on EXT address.
   3492           *
   3493           * @param       extAddr - of device to look up
   3494           *
   3495           * @return      none
   3496           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3497          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3498          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   3499            uint8 i;
   3500          
   3501            // Loop through all the pending entries for that Ext Address
   3502            // to create Bind Entries and send Bind Rsp
   3503            if ( ZDAppPendingBindReq != NULL )
   \   00000E   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3504            {
   3505              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000016   75..00       MOV     ?V0,#0x0
   3506              {
   3507                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3508                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   000019                ; Setup parameters for call to function osal_memcmp
   \   000019   85....       MOV     ?V4,?V2
   \   00001C   85....       MOV     ?V5,?V3
   \   00001F   75..00       MOV     ?V6,#0x0
   \   000022   78..         MOV     R0,#?V4
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000027   7C08         MOV     R4,#0x8
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   E5..         MOV     A,?V0
   \   00002D   75F021       MOV     B,#0x21
   \   000030   A4           MUL     AB
   \   000031   F8           MOV     R0,A
   \   000032   A9F0         MOV     R1,B
   \   000034   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000037   F5..         MOV     ?V4,A
   \   000039   E4           CLR     A
   \   00003A   39           ADDC    A,R1
   \   00003B   A9..         MOV     R1,?V4
   \   00003D   FA           MOV     R2,A
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   6401         XRL     A,#0x1
   \   00004B   6003         JZ      $+5
   \   00004D   02....       LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
   3509                {
   3510                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   748C         MOV     A,#-0x74
   \   000058   F0           MOVX    @DPTR,A
   3511          
   3512                  // Add Bind entry
   3513                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3514                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3515                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3516                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   000059   E5..         MOV     A,?V0
   \   00005B   75F021       MOV     B,#0x21
   \   00005E   A4           MUL     AB
   \   00005F   FE           MOV     R6,A
   \   000060   AFF0         MOV     R7,B
   \   000062   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000065   E0           MOVX    A,@DPTR
   \   000066   2E           ADD     A,R6
   \   000067   FE           MOV     R6,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   3F           ADDC    A,R7
   \   00006B   FF           MOV     R7,A
   \   00006C                ; Setup parameters for call to function APSME_BindRequest
   \   00006C   EE           MOV     A,R6
   \   00006D   2414         ADD     A,#0x14
   \   00006F   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000072   F5..         MOV     ?V1,A
   \   000074   78..         MOV     R0,#?V1
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000079   EE           MOV     A,R6
   \   00007A   240B         ADD     A,#0xb
   \   00007C   FC           MOV     R4,A
   \   00007D   E4           CLR     A
   \   00007E   3F           ADDC    A,R7
   \   00007F   FD           MOV     R5,A
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F9           MOV     R1,A
   \   000098   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   00009B   7401         MOV     A,#0x1
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV     A,R1
   \   0000A1   700B         JNZ     ??ZDApp_ProcessPendingBindReq_3
   3517                  {
   3518                    // valid entry
   3519                    bindStat = ZDP_SUCCESS;
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   E4           CLR     A
   \   0000AA   F0           MOVX    @DPTR,A
   3520          
   3521                    // Notify to save info into NV
   3522                    ZDApp_NVUpdate();
   \   0000AB                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000AB   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3523                  }
   3524          
   3525                  // Send back a response message
   3526                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3527                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   0000AE   E5..         MOV     A,?V0
   \   0000B0   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000B3   F5..         MOV     ?V1,A
   \   0000B5   78..         MOV     R0,#?V1
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BA   7401         MOV     A,#0x1
   \   0000BC   12....       LCALL   ?XSTACK_DISP100_8
   \   0000BF   88..         MOV     ?V4,R0
   \   0000C1   89..         MOV     ?V5,R1
   \   0000C3   78..         MOV     R0,#?V4
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C8   75..21       MOV     ?V4,#0x21
   \   0000CB   75..80       MOV     ?V5,#-0x80
   \   0000CE   78..         MOV     R0,#?V4
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D3   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000D6   5001         JNC     ??ZDApp_ProcessPendingBindReq_4
   \   0000D8   0B           INC     R3
   \                     ??ZDApp_ProcessPendingBindReq_4:
   \   0000D9   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000DC   7405         MOV     A,#0x5
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
   3528          
   3529                  // Set the pending request entry to default values
   3530                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000E1                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000E1   12....       LCALL   ?Subroutine38 & 0xFFFF
   3531                }
   3532              }
   \                     ??CrossCallReturnLabel_46:
   \   0000E4   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   0000E7   05..         INC     ?V0
   \   0000E9   E5..         MOV     A,?V0
   \   0000EB   C3           CLR     C
   \   0000EC   9403         SUBB    A,#0x3
   \   0000EE   5003         JNC     $+5
   \   0000F0   02....       LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3533            }
   3534          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   0000F3   7401         MOV     A,#0x1
   \   0000F5   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EA           MOV     A,R2
   \   000003   2415         ADD     A,#0x15
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3B           ADDC    A,R3
   \   000008   FD           MOV     R5,A
   \   000009   EA           MOV     A,R2
   \   00000A   241F         ADD     A,#0x1f
   \   00000C   FA           MOV     R2,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   240B         ADD     A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   75F021       MOV     B,#0x21
   \   000003   A4           MUL     AB
   \   000004   FE           MOV     R6,A
   \   000005   AFF0         MOV     R7,B
   \   000007   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A   EA           MOV     A,R2
   \   00000B   241E         ADD     A,#0x1e
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   3B           ADDC    A,R3
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   22           RET
   3535          
   3536          /*********************************************************************
   3537           * @fn          ZDApp_AgeOutPendingBindEntry
   3538           *
   3539           * @brief       Age out pending Bind Req entries.
   3540           *
   3541           * @param       none
   3542           *
   3543           * @return      none
   3544           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3545          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3546          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3547            uint8 i;
   3548            bool entryFound = FALSE;
   \   00000A   75..00       MOV     ?V0,#0x0
   3549          
   3550            if ( ZDAppPendingBindReq != NULL )
   \   00000D   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3551            {
   3552              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000015   75..00       MOV     ?V1,#0x0
   3553              {
   3554                if ( ZDAppPendingBindReq[i].age > 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   000018   E5..         MOV     A,?V1
   \   00001A   75F021       MOV     B,#0x21
   \   00001D   A4           MUL     AB
   \   00001E   F8           MOV     R0,A
   \   00001F   AAF0         MOV     R2,B
   \   000021   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000024   C3           CLR     C
   \   000025   9402         SUBB    A,#0x2
   \   000027   E5..         MOV     A,?V1
   \   000029   75F021       MOV     B,#0x21
   \   00002C   400B         JC      ??ZDApp_AgeOutPendingBindEntry_2
   3555                {
   3556                  ZDAppPendingBindReq[i].age--;
   \   00002E   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000031   14           DEC     A
   \   000032   F0           MOVX    @DPTR,A
   3557          
   3558                  entryFound = TRUE;
   \   000033   75..01       MOV     ?V0,#0x1
   \   000036   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3559                }
   3560                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   000039   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00003C   6401         XRL     A,#0x1
   \   00003E   6003         JZ      $+5
   \   000040   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3561                {
   3562                  // The record has aged out and has valid data
   3563                  AddrMgrEntry_t entry;
   3564                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   748C         MOV     A,#-0x74
   \   00004B   F0           MOVX    @DPTR,A
   3565          
   3566                  entry.user = ADDRMGR_USER_BINDING;
   \   00004C   7401         MOV     A,#0x1
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7404         MOV     A,#0x4
   \   000053   F0           MOVX    @DPTR,A
   3567          
   3568                  // Remove the entry in address manager so we do not keep entries
   3569                  // with invalid addresses
   3570                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   000054                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000054   E5..         MOV     A,?V1
   \   000056   75F021       MOV     B,#0x21
   \   000059   A4           MUL     AB
   \   00005A   F8           MOV     R0,A
   \   00005B   EA           MOV     A,R2
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000060   FC           MOV     R4,A
   \   000061   E4           CLR     A
   \   000062   39           ADDC    A,R1
   \   000063   FD           MOV     R5,A
   \   000064   7404         MOV     A,#0x4
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   AA82         MOV     R2,DPL
   \   00006B   AB83         MOV     R3,DPH
   \   00006D   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3571          
   3572                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000070                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP101_8
   \   000075   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000078   E9           MOV     A,R1
   \   000079   6401         XRL     A,#0x1
   \   00007B   7017         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3573                  {
   3574                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   00007D   7402         MOV     A,#0x2
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E0           MOVX    A,@DPTR
   \   000083   64FE         XRL     A,#0xfe
   \   000085   7003         JNZ     ??ZDApp_AgeOutPendingBindEntry_5
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F4           CPL     A
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   00008A   7008         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3575                    {
   3576                      // Release the entry that contains an invalid NWK address
   3577                      AddrMgrEntryRelease( &entry );
   \   00008C                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00008C   7401         MOV     A,#0x1
   \   00008E   12....       LCALL   ?XSTACK_DISP101_8
   \   000091   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   3578                    }
   3579                  }
   3580          
   3581                  // Send the Bind Response with failure status
   3582                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3583                               &(ZDAppPendingBindReq[i].srcAddr),
   3584                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   000094   E5..         MOV     A,?V1
   \   000096   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000099   F5..         MOV     ?V2,A
   \   00009B   78..         MOV     R0,#?V2
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   12....       LCALL   ?XSTACK_DISP100_8
   \   0000A5   88..         MOV     ?V2,R0
   \   0000A7   89..         MOV     ?V3,R1
   \   0000A9   78..         MOV     R0,#?V2
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   75..21       MOV     ?V2,#0x21
   \   0000B1   75..80       MOV     ?V3,#-0x80
   \   0000B4   78..         MOV     R0,#?V2
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B9   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000BC   5001         JNC     ??ZDApp_AgeOutPendingBindEntry_6
   \   0000BE   0B           INC     R3
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0000BF   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000C2   7405         MOV     A,#0x5
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   3585          
   3586                  // Clear the record and set to default values
   3587                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000C7                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000C7   12....       LCALL   ?Subroutine38 & 0xFFFF
   3588                }
   3589              }
   \                     ??CrossCallReturnLabel_47:
   \   0000CA   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   0000CD   05..         INC     ?V1
   \   0000CF   E5..         MOV     A,?V1
   \   0000D1   C3           CLR     C
   \   0000D2   9403         SUBB    A,#0x3
   \   0000D4   5003         JNC     $+5
   \   0000D6   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3590            }
   3591          
   3592            if ( entryFound == FALSE )
   \   0000D9   E5..         MOV     A,?V0
   \   0000DB   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000DD   400E         JC      ??ZDApp_AgeOutPendingBindEntry_7
   3593            {
   3594              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   0000DF                ; Setup parameters for call to function osal_stop_timerEx
   \   0000DF   7A00         MOV     R2,#0x0
   \   0000E1   7B10         MOV     R3,#0x10
   \   0000E3   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
   \   0000E8   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0000EB   8017         SJMP    ??ZDApp_AgeOutPendingBindEntry_8
   3595            }
   3596            else
   3597            {
   3598              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3599                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   0000ED                ; Setup parameters for call to function osal_start_timerEx
   \   0000ED   90....       MOV     DPTR,#__Constant_3e8
   \   0000F0   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000F3   7A00         MOV     R2,#0x0
   \   0000F5   7B10         MOV     R3,#0x10
   \   0000F7   90....       MOV     DPTR,#ZDAppTaskID
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F9           MOV     R1,A
   \   0000FC   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000FF   7404         MOV     A,#0x4
   \   000101   12....       LCALL   ?DEALLOC_XSTACK8
   3600            }
   3601          }
   \                     ??ZDApp_AgeOutPendingBindEntry_8:
   \   000104   740E         MOV     A,#0xe
   \   000106                REQUIRE ?Subroutine5
   \   000106                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine60_0
   \   000002                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine61_0
   \   000001                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devStartMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2bc:
   \   000000   BC020000     DD 700

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNetworkState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ForceConcentratorChange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_JoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceConfigured::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkDescListProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_beaconNotifyIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PermitJoinCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkStatusCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitZdoCBFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_DeregisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetPendingBindDefault::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetPendingBindDefault

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitPendingBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitPendingBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_GetEmptyPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_GetEmptyPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AgeOutPendingBindEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AgeOutPendingBindEntry
   3602          #endif
   3603          #endif
   3604          
   3605          /*********************************************************************
   3606          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     32   AddrMgrWriteNVRequest
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      2      9   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     12   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     45   ZDApp_AgeOutPendingBindEntry
        0     26   -> AddrMgrEntryLookupExt
        0     26   -> AddrMgrEntryRelease
        0     26   -> AddrMgrExtAddrSet
        0     26   -> ZDApp_SetPendingBindDefault
        0     31   -> ZDP_SendData
        0     30   -> osal_start_timerEx
        0     26   -> osal_stop_timerEx
      0     23   ZDApp_AnnounceNewAddress
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0      0   ZDApp_CoordStartPANIDConflictCB
      2     16   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> NLME_StartRouterRequest
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_set_event
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      2      0   ZDApp_GetEmptyPendingBindReq
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> HalLedBlink
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDAppCheckForHoldKey
        0      9   -> ZDApp_InitPendingBind
        0      9   -> ZDApp_InitUserDesc
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDOInitDevice
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     18   ZDApp_InitPendingBind
        0      9   -> ZDApp_SetPendingBindDefault
        0      9   -> osal_mem_alloc
      0     40   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     26   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     23   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2     12   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     21   ZDApp_LeaveReset
        0      9   -> ZDApp_LeaveCtrlSet
        0      9   -> ZDApp_ResetTimerStart
      0     47   ZDApp_LeaveUpdate
        0     32   -> APSME_UpdateDeviceReq
        0     32   -> AddrMgrWriteNVRequest
        0     32   -> AssocIsChild
        0     32   -> NLME_RemoveChild
        0     32   -> RTG_RemoveRtgEntry
        0     32   -> ZDSecMgrAddrClear
        0     32   -> ZDSecMgrDeviceRemoveByExtAddr
        0     32   -> nwkNeighborRemove
        0     35   -> osal_memcpy
      2     20   ZDApp_NVUpdate
        2      4   -> osal_start_timerEx
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     28   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2     14   ZDApp_NetworkStartEvt
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     21   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     14   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     56   ZDApp_ProcessMsgCBs
        0     56   -> ZDApp_ProcessPendingBindReq
        0     56   -> ZDMatchSendState
        0     56   -> ZDO_MatchEndDeviceBind
        0     56   -> ZDO_ParseAddrRsp
        0     56   -> ZDO_ParseBindUnbindReq
        0     56   -> ZDO_ParseEndDeviceBindReq
        0     56   -> ZDO_ProcessBindUnbindReq
        0     56   -> ZDO_UpdateAddrManager
        0     56   -> osal_mem_free
      0     12   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_GetShortAddr
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> NLME_StartRouterRequest
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_ResetTimerStart
        0     12   -> ZDApp_RestoreNwkKey
        0     12   -> ZMacSetReq
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_rand
        0     12   -> osal_set_event
      2     14   ZDApp_ProcessOSALMsg
        2      0   -> ZDApp_ProcessMsgCBs
        2      0   -> ZDApp_ProcessSecMsg
        2      0   -> ZDP_IncomingData
      0     77   ZDApp_ProcessPendingBindReq
        0     17   -> APSME_BindRequest
        0     16   -> ZDApp_NVUpdate
        0     16   -> ZDApp_SetPendingBindDefault
        0     21   -> ZDP_SendData
        0     19   -> osal_memcmp
      0     34   ZDApp_ProcessSecEvent
        0     16   -> ZDApp_DeviceAuthEvt
        0     16   -> ZDApp_SaveNwkKey
        0     16   -> ZDSecMgrNewDeviceEvent
        0     16   -> ZDSecMgrSaveApsLinkKey
        0     16   -> ZDSecMgrSaveTCLinkKey
        0     16   -> osal_mem_free
        0     20   -> osal_start_timerEx
      2      0   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrUpdateDeviceInd
      0     21   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     28   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     21   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> ZDApp_RestoreNwkKey
        0      9   -> sAddrExtCpy
      0     65   ZDApp_RestoreNwkKey
        0     52   -> osal_memcmp
        0     49   -> osal_memset
        0     53   -> osal_nv_read
        0     53   -> osal_nv_write
      2     14   ZDApp_SaveNetworkStateEvt
        2      0   -> NLME_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     51   ZDApp_SaveNwkKey
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0     37   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     36   ZDApp_SendMsg
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     35   ZDApp_SetPendingBindDefault
        0      9   -> osal_memset
      2      0   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2      0   ZDApp_StopJoiningCycle
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_AgeOutPendingBindEntry
        0     14   -> ZDApp_NetworkStartEvt
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_set_event
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     21   ZDOInitDevice
        0     12   -> NLME_InitNV
        0     12   -> NLME_SetBroadcastFilter
        0     12   -> NLME_SetDefaultNV
        0     12   -> ZDAppDetermineDeviceType
        0     12   -> ZDApp_LeaveCtrlInit
        0     12   -> ZDApp_LeaveCtrlStartup
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_ReadNetworkRestoreState
        0     12   -> ZDApp_RestoreNetworkState
        0     12   -> ZDApp_SecInit
        0     12   -> ZDConfig_InitDescriptors
        0     12   -> ZDSecMgrClearNVKeyValues
        0     12   -> osal_rand
        0     12   -> osal_set_event
        0     12   -> zgInitItems
        0     12   -> zgWriteStartupOptions
      0     12   ZDO_AddrChangeIndicationCB
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_NVUpdate
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
        0     12   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     17   ZDO_JoinConfirmCB
        0     17   -> HalLedSet
        0     17   -> ZDApp_SendMsg
        0     17   -> nwkNeighborFindEmptySlot
        0     17   -> nwkNeighborInitTable
        0     17   -> osal_memset
        0     17   -> sAddrExtCpy
      0     21   ZDO_JoinIndicationCB
        0     17   -> Authlist_verify_device
        0     16   -> ZDApp_NVUpdate
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_mem_alloc
        0     20   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> ZDApp_LeaveUpdate
        0     10   -> sAddrExtCmp
      1     12   ZDO_LeaveInd
        0     12   -> NLME_GetCoordShortAddr
        0     12   -> NLME_LeaveRsp
        0     12   -> ZDApp_LeaveReset
        0     12   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> ZDApp_SendMsg
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     14   ZDO_beaconNotifyIndCB
        0     14   -> osal_mem_alloc
        0     14   -> osal_memset
        0     14   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for devStartMode>
       1  ?<Initializer for devState>
       1  ?<Initializer for zdoDiscCounter>
      10  ??Subroutine45_0
      11  ??Subroutine46_0
       6  ??Subroutine47_0
       7  ??Subroutine48_0
       3  ??Subroutine49_0
       5  ??Subroutine50_0
       5  ??Subroutine51_0
       6  ??Subroutine52_0
       8  ??Subroutine53_0
       6  ??Subroutine54_0
       6  ??Subroutine55_0
       6  ??Subroutine56_0
       6  ??Subroutine57_0
       8  ??Subroutine58_0
       5  ??Subroutine59_0
       1  ??Subroutine60_0
      14  ??Subroutine61_0
      10  ?Subroutine0
       5  ?Subroutine1
       5  ?Subroutine10
       8  ?Subroutine11
      12  ?Subroutine12
       6  ?Subroutine13
       6  ?Subroutine14
       3  ?Subroutine15
       2  ?Subroutine16
       3  ?Subroutine17
       4  ?Subroutine18
      19  ?Subroutine19
       5  ?Subroutine2
      21  ?Subroutine20
      17  ?Subroutine21
       8  ?Subroutine22
       4  ?Subroutine23
       9  ?Subroutine24
       9  ?Subroutine25
       6  ?Subroutine26
       4  ?Subroutine27
      12  ?Subroutine28
       3  ?Subroutine29
      35  ?Subroutine3
       5  ?Subroutine30
       8  ?Subroutine31
       4  ?Subroutine32
       3  ?Subroutine33
      10  ?Subroutine34
       6  ?Subroutine35
      14  ?Subroutine36
       8  ?Subroutine37
      11  ?Subroutine38
      11  ?Subroutine39
       3  ?Subroutine4
      12  ?Subroutine40
      15  ?Subroutine41
      12  ?Subroutine42
       5  ?Subroutine43
      10  ?Subroutine44
       3  ?Subroutine5
       8  ?Subroutine6
       2  ?Subroutine7
       4  ?Subroutine8
       5  ?Subroutine9
      28  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
       1  MatchRsps
      24  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
      76  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     262  ZDApp_AgeOutPendingBindEntry
       6  ZDApp_AgeOutPendingBindEntry::?relay
      59  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
      77  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      84  ZDApp_DeviceConfigured
       6  ZDApp_DeviceConfigured::?relay
     129  ZDApp_ForceConcentratorChange
       6  ZDApp_ForceConcentratorChange::?relay
      59  ZDApp_GetEmptyPendingBindReq
       6  ZDApp_GetEmptyPendingBindReq::?relay
      86  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
      91  ZDApp_Init
       6  ZDApp_Init::?relay
      61  ZDApp_InitPendingBind
       6  ZDApp_InitPendingBind::?relay
     111  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
      26  ZDApp_InitZdoCBFunc
       6  ZDApp_InitZdoCBFunc::?relay
      75  ZDApp_JoinReq
       6  ZDApp_JoinReq::?relay
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      75  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      13  ZDApp_LeaveCtrlReset
       6  ZDApp_LeaveCtrlReset::?relay
      22  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      47  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
      18  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
     198  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
      27  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      11  ZDApp_NetworkDiscoveryReq
       6  ZDApp_NetworkDiscoveryReq::?relay
      57  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
      89  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
       2  ZDApp_NewDeviceList
      45  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
     276  ZDApp_NwkDescListProcessing
       6  ZDApp_NwkDescListProcessing::?relay
      28  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     243  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     483  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
      64  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
     248  ZDApp_ProcessPendingBindReq
       6  ZDApp_ProcessPendingBindReq::?relay
     222  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
      19  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      23  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
      91  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      66  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      31  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      57  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
      88  ZDApp_RestoreNetworkState
       6  ZDApp_RestoreNetworkState::?relay
     211  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
      19  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
      75  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       2  ZDApp_SavedPollRate
     123  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
      21  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
      83  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
      32  ZDApp_SetPendingBindDefault
       6  ZDApp_SetPendingBindDefault::?relay
      39  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      31  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
       6  ZDApp_epDesc
     264  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     203  ZDOInitDevice
       6  ZDOInitDevice::?relay
     103  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      44  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      27  ZDO_DeregisterForZdoCB
       6  ZDO_DeregisterForZdoCB::?relay
     267  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
     240  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
      88  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
     143  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
      10  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
      63  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
      49  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
      10  ZDO_NetworkStatusCB
       6  ZDO_NetworkStatusCB::?relay
      36  ZDO_PermitJoinCB
       6  ZDO_PermitJoinCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      27  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      47  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      49  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
      42  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       5  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
     538  ZDO_beaconNotifyIndCB
       6  ZDO_beaconNotifyIndCB::?relay
       4  __Constant_258
       4  __Constant_2bc
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       8  join_device_extaddr
       1  nwkStatus
       1  retryCnt
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
       1  zdoDiscCounter
       2  zdo_join_device

 
 7 205 bytes in segment BANKED_CODE
   438 bytes in segment BANK_RELAYS
    12 bytes in segment XDATA_I
    12 bytes in segment XDATA_ID
    20 bytes in segment XDATA_ROM_C
    71 bytes in segment XDATA_Z
 
 7 655 bytes of CODE  memory
     0 bytes of CONST memory (+ 20 bytes shared)
    83 bytes of XDATA memory

Errors: none
Warnings: none
