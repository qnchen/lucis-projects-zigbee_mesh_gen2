///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               21/Apr/2017  15:51:52
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\stack\zdo\ZDSecMgr.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0001
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\stack\zdo\ZDSecMgr.c" -D ZTOOL_P1 -D MT_TASK -D
//        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_RESTORE -D
//        NV_INIT -D NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D OPEN_FCS -D
//        MAKE_CRC_SHDW -lC "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\List"
//        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB-SBL\List\ZDSecMgr.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDSecMgr

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_GT_X
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??APSME_IsDefaultTCLK::?relay`
        FUNCTION `??APSME_IsDefaultTCLK::?relay`,0203H
        PUBLIC `??APSME_IsLinkKeyValid::?relay`
        FUNCTION `??APSME_IsLinkKeyValid::?relay`,0203H
        PUBLIC `??APSME_KeyFwdToChild::?relay`
        FUNCTION `??APSME_KeyFwdToChild::?relay`,0203H
        PUBLIC `??APSME_LinkKeyNVIdGet::?relay`
        FUNCTION `??APSME_LinkKeyNVIdGet::?relay`,0203H
        PUBLIC `??APSME_LinkKeySet::?relay`
        FUNCTION `??APSME_LinkKeySet::?relay`,0203H
        PUBLIC `??APSME_TCLinkKeyInit::?relay`
        FUNCTION `??APSME_TCLinkKeyInit::?relay`,0203H
        PUBLIC `??APSME_TCLinkKeyLoad::?relay`
        FUNCTION `??APSME_TCLinkKeyLoad::?relay`,0203H
        PUBLIC `??APSME_TCLinkKeySync::?relay`
        FUNCTION `??APSME_TCLinkKeySync::?relay`,0203H
        PUBLIC `??ZDSecMgrAPSRemove::?relay`
        FUNCTION `??ZDSecMgrAPSRemove::?relay`,0203H
        PUBLIC `??ZDSecMgrAddLinkKey::?relay`
        FUNCTION `??ZDSecMgrAddLinkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrAddrClear::?relay`
        FUNCTION `??ZDSecMgrAddrClear::?relay`,0203H
        PUBLIC `??ZDSecMgrAddrStore::?relay`
        FUNCTION `??ZDSecMgrAddrStore::?relay`,0203H
        PUBLIC `??ZDSecMgrAppKeyGet::?relay`
        FUNCTION `??ZDSecMgrAppKeyGet::?relay`,0203H
        PUBLIC `??ZDSecMgrAppKeyReq::?relay`
        FUNCTION `??ZDSecMgrAppKeyReq::?relay`,0203H
        PUBLIC `??ZDSecMgrAppKeyTypeSet::?relay`
        FUNCTION `??ZDSecMgrAppKeyTypeSet::?relay`,0203H
        PUBLIC `??ZDSecMgrApsLinkKeyInit::?relay`
        FUNCTION `??ZDSecMgrApsLinkKeyInit::?relay`,0203H
        PUBLIC `??ZDSecMgrAssocDeviceAuth::?relay`
        FUNCTION `??ZDSecMgrAssocDeviceAuth::?relay`,0203H
        PUBLIC `??ZDSecMgrAuthNwkKey::?relay`
        FUNCTION `??ZDSecMgrAuthNwkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrAuthenticationCheck::?relay`
        FUNCTION `??ZDSecMgrAuthenticationCheck::?relay`,0203H
        PUBLIC `??ZDSecMgrAuthenticationSet::?relay`
        FUNCTION `??ZDSecMgrAuthenticationSet::?relay`,0203H
        PUBLIC `??ZDSecMgrClearNVKeyValues::?relay`
        FUNCTION `??ZDSecMgrClearNVKeyValues::?relay`,0203H
        PUBLIC `??ZDSecMgrConfig::?relay`
        FUNCTION `??ZDSecMgrConfig::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceJoin::?relay`
        FUNCTION `??ZDSecMgrDeviceJoin::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceJoinDirect::?relay`
        FUNCTION `??ZDSecMgrDeviceJoinDirect::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceJoinFwd::?relay`
        FUNCTION `??ZDSecMgrDeviceJoinFwd::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceNew::?relay`
        FUNCTION `??ZDSecMgrDeviceNew::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceRemove::?relay`
        FUNCTION `??ZDSecMgrDeviceRemove::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceRemoveByExtAddr::?relay`
        FUNCTION `??ZDSecMgrDeviceRemoveByExtAddr::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceValidate::?relay`
        FUNCTION `??ZDSecMgrDeviceValidate::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceValidateRM::?relay`
        FUNCTION `??ZDSecMgrDeviceValidateRM::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryFree::?relay`
        FUNCTION `??ZDSecMgrEntryFree::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryInit::?relay`
        FUNCTION `??ZDSecMgrEntryInit::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookup::?relay`
        FUNCTION `??ZDSecMgrEntryLookup::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookupAMI::?relay`
        FUNCTION `??ZDSecMgrEntryLookupAMI::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookupAMIGetIndex::?relay`
        FUNCTION `??ZDSecMgrEntryLookupAMIGetIndex::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookupExt::?relay`
        FUNCTION `??ZDSecMgrEntryLookupExt::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookupExtGetIndex::?relay`
        FUNCTION `??ZDSecMgrEntryLookupExtGetIndex::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryNew::?relay`
        FUNCTION `??ZDSecMgrEntryNew::?relay`,0203H
        PUBLIC `??ZDSecMgrExtAddrLookup::?relay`
        FUNCTION `??ZDSecMgrExtAddrLookup::?relay`,0203H
        PUBLIC `??ZDSecMgrExtAddrStore::?relay`
        FUNCTION `??ZDSecMgrExtAddrStore::?relay`,0203H
        PUBLIC `??ZDSecMgrInit::?relay`
        FUNCTION `??ZDSecMgrInit::?relay`,0203H
        PUBLIC `??ZDSecMgrInitNV::?relay`
        FUNCTION `??ZDSecMgrInitNV::?relay`,0203H
        PUBLIC `??ZDSecMgrInitNVKeyTables::?relay`
        FUNCTION `??ZDSecMgrInitNVKeyTables::?relay`,0203H
        PUBLIC `??ZDSecMgrNewDeviceEvent::?relay`
        FUNCTION `??ZDSecMgrNewDeviceEvent::?relay`,0203H
        PUBLIC `??ZDSecMgrNwkKeyInit::?relay`
        FUNCTION `??ZDSecMgrNwkKeyInit::?relay`,0203H
        PUBLIC `??ZDSecMgrPermitJoining::?relay`
        FUNCTION `??ZDSecMgrPermitJoining::?relay`,0203H
        PUBLIC `??ZDSecMgrPermitJoiningTimeout::?relay`
        FUNCTION `??ZDSecMgrPermitJoiningTimeout::?relay`,0203H
        PUBLIC `??ZDSecMgrReadKeyFromNv::?relay`
        FUNCTION `??ZDSecMgrReadKeyFromNv::?relay`,0203H
        PUBLIC `??ZDSecMgrRemoveDeviceInd::?relay`
        FUNCTION `??ZDSecMgrRemoveDeviceInd::?relay`,0203H
        PUBLIC `??ZDSecMgrRequestAppKey::?relay`
        FUNCTION `??ZDSecMgrRequestAppKey::?relay`,0203H
        PUBLIC `??ZDSecMgrRequestKeyInd::?relay`
        FUNCTION `??ZDSecMgrRequestKeyInd::?relay`,0203H
        FUNCTION `??ZDSecMgrRestoreFromNV::?relay`,0203H
        PUBLIC `??ZDSecMgrSaveApsLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveApsLinkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrSaveTCLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveTCLinkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrSendNwkKey::?relay`
        FUNCTION `??ZDSecMgrSendNwkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrSetDefaultNV::?relay`
        FUNCTION `??ZDSecMgrSetDefaultNV::?relay`,0203H
        PUBLIC `??ZDSecMgrSwitchKeyInd::?relay`
        FUNCTION `??ZDSecMgrSwitchKeyInd::?relay`,0203H
        PUBLIC `??ZDSecMgrSwitchNwkKey::?relay`
        FUNCTION `??ZDSecMgrSwitchNwkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrTCDataLoad::?relay`
        FUNCTION `??ZDSecMgrTCDataLoad::?relay`,0203H
        PUBLIC `??ZDSecMgrTCExtAddrCheck::?relay`
        FUNCTION `??ZDSecMgrTCExtAddrCheck::?relay`,0203H
        PUBLIC `??ZDSecMgrTransportKeyInd::?relay`
        FUNCTION `??ZDSecMgrTransportKeyInd::?relay`,0203H
        PUBLIC `??ZDSecMgrUpdateDeviceInd::?relay`
        FUNCTION `??ZDSecMgrUpdateDeviceInd::?relay`,0203H
        PUBLIC `??ZDSecMgrUpdateNwkKey::?relay`
        FUNCTION `??ZDSecMgrUpdateNwkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrUpdateTCAddress::?relay`
        FUNCTION `??ZDSecMgrUpdateTCAddress::?relay`,0203H
        FUNCTION `??ZDSecMgrWriteNV::?relay`,0203H
        PUBLIC APSME_IsDefaultTCLK
        FUNCTION APSME_IsDefaultTCLK,021203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC APSME_IsLinkKeyValid
        FUNCTION APSME_IsLinkKeyValid,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC APSME_KeyFwdToChild
        FUNCTION APSME_KeyFwdToChild,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC APSME_LinkKeyNVIdGet
        FUNCTION APSME_LinkKeyNVIdGet,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_LinkKeySet
        FUNCTION APSME_LinkKeySet,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC APSME_TCLinkKeyInit
        FUNCTION APSME_TCLinkKeyInit,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 48, STACK
        PUBLIC APSME_TCLinkKeyLoad
        FUNCTION APSME_TCLinkKeyLoad,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        PUBLIC APSME_TCLinkKeySync
        FUNCTION APSME_TCLinkKeySync,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        PUBLIC ApsLinkKeyFrmCntr
        PUBLIC TCLinkKeyFrmCntr
        PUBLIC TrustCenterLinkKey
        PUBLIC ZDSecMgrAPSRemove
        FUNCTION ZDSecMgrAPSRemove,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ZDSecMgrAddLinkKey
        FUNCTION ZDSecMgrAddLinkKey,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrAddrStore
        FUNCTION ZDSecMgrAddrStore,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAppKeyGet
        FUNCTION ZDSecMgrAppKeyGet,021203H
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrAppKeyReq
        FUNCTION ZDSecMgrAppKeyReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 57, STACK
        PUBLIC ZDSecMgrAppKeyType
        PUBLIC ZDSecMgrAppKeyTypeSet
        FUNCTION ZDSecMgrAppKeyTypeSet,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrApsLinkKeyInit
        FUNCTION ZDSecMgrApsLinkKeyInit,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 36, STACK
        PUBLIC ZDSecMgrAssocDeviceAuth
        FUNCTION ZDSecMgrAssocDeviceAuth,0203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthNwkKey
        FUNCTION ZDSecMgrAuthNwkKey,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticationCheck
        FUNCTION ZDSecMgrAuthenticationCheck,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDSecMgrAuthenticationSet
        FUNCTION ZDSecMgrAuthenticationSet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrClearNVKeyValues
        FUNCTION ZDSecMgrClearNVKeyValues,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ZDSecMgrConfig
        FUNCTION ZDSecMgrConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceJoin
        FUNCTION ZDSecMgrDeviceJoin,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 32, STACK
        PUBLIC ZDSecMgrDeviceJoinDirect
        FUNCTION ZDSecMgrDeviceJoinDirect,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceJoinFwd
        FUNCTION ZDSecMgrDeviceJoinFwd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrDeviceNew
        FUNCTION ZDSecMgrDeviceNew,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceRemove
        FUNCTION ZDSecMgrDeviceRemove,0a1203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrDeviceValidate
        FUNCTION ZDSecMgrDeviceValidate,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceValidateRM
        FUNCTION ZDSecMgrDeviceValidateRM,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrEntries
        PUBLIC ZDSecMgrEntryFree
        FUNCTION ZDSecMgrEntryFree,0a1203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrEntryInit
        FUNCTION ZDSecMgrEntryInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEntryLookup
        FUNCTION ZDSecMgrEntryLookup,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrEntryLookupAMI
        FUNCTION ZDSecMgrEntryLookupAMI,080203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEntryLookupAMIGetIndex
        FUNCTION ZDSecMgrEntryLookupAMIGetIndex,080203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEntryLookupExt
        FUNCTION ZDSecMgrEntryLookupExt,0a1203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryLookupExtGetIndex
        FUNCTION ZDSecMgrEntryLookupExtGetIndex,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryNew
        FUNCTION ZDSecMgrEntryNew,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrExtAddrLookup
        FUNCTION ZDSecMgrExtAddrLookup,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrExtAddrStore
        FUNCTION ZDSecMgrExtAddrStore,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrInit
        FUNCTION ZDSecMgrInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrInitNV
        FUNCTION ZDSecMgrInitNV,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrInitNVKeyTables
        FUNCTION ZDSecMgrInitNVKeyTables,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDSecMgrNwkKeyInit
        FUNCTION ZDSecMgrNwkKeyInit,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ZDSecMgrPermitJoining
        FUNCTION ZDSecMgrPermitJoining,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrPermitJoiningEnabled
        PUBLIC ZDSecMgrPermitJoiningTimed
        PUBLIC ZDSecMgrPermitJoiningTimeout
        FUNCTION ZDSecMgrPermitJoiningTimeout,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrReadKeyFromNv
        FUNCTION ZDSecMgrReadKeyFromNv,0a1203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrRemoveDeviceInd
        FUNCTION ZDSecMgrRemoveDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrRequestAppKey
        FUNCTION ZDSecMgrRequestAppKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC ZDSecMgrRequestKeyInd
        FUNCTION ZDSecMgrRequestKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ZDSecMgrRestoreFromNV,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrSaveApsLinkKey
        FUNCTION ZDSecMgrSaveApsLinkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrSendNwkKey
        FUNCTION ZDSecMgrSendNwkKey,0a1203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 44, STACK
        PUBLIC ZDSecMgrSetDefaultNV
        FUNCTION ZDSecMgrSetDefaultNV,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrSwitchNwkKey
        FUNCTION ZDSecMgrSwitchNwkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrTCAuthenticated
        PUBLIC ZDSecMgrTCDataLoad
        FUNCTION ZDSecMgrTCDataLoad,0a1203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDSecMgrTCExtAddr
        PUBLIC ZDSecMgrTCExtAddrCheck
        FUNCTION ZDSecMgrTCExtAddrCheck,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ZDSecMgrUpdateNwkKey
        FUNCTION ZDSecMgrUpdateNwkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDSecMgrUpdateTCAddress
        FUNCTION ZDSecMgrUpdateTCAddress,0a1203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        FUNCTION ZDSecMgrWriteNV,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBWEAK __Constant_1
        PUBWEAK __Constant_3e9
        PUBWEAK __Constant_a
        PUBWEAK __Constant_b
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_GetRequest    SYMBOL "APSME_GetRequest"
`??APSME_GetRequest::?relay` SYMBOL "?relay", APSME_GetRequest
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
APSME_LookupExtAddr SYMBOL "APSME_LookupExtAddr"
`??APSME_LookupExtAddr::?relay` SYMBOL "?relay", APSME_LookupExtAddr
APSME_LookupNwkAddr SYMBOL "APSME_LookupNwkAddr"
`??APSME_LookupNwkAddr::?relay` SYMBOL "?relay", APSME_LookupNwkAddr
APSME_RemoveDeviceReq SYMBOL "APSME_RemoveDeviceReq"
`??APSME_RemoveDeviceReq::?relay` SYMBOL "?relay", APSME_RemoveDeviceReq
APSME_RequestKeyReq SYMBOL "APSME_RequestKeyReq"
`??APSME_RequestKeyReq::?relay` SYMBOL "?relay", APSME_RequestKeyReq
APSME_SecurityRM_CD SYMBOL "APSME_SecurityRM_CD"
`??APSME_SecurityRM_CD::?relay` SYMBOL "?relay", APSME_SecurityRM_CD
APSME_SetRequest    SYMBOL "APSME_SetRequest"
`??APSME_SetRequest::?relay` SYMBOL "?relay", APSME_SetRequest
APSME_SwitchKeyReq  SYMBOL "APSME_SwitchKeyReq"
`??APSME_SwitchKeyReq::?relay` SYMBOL "?relay", APSME_SwitchKeyReq
APSME_TransportKeyReq SYMBOL "APSME_TransportKeyReq"
`??APSME_TransportKeyReq::?relay` SYMBOL "?relay", APSME_TransportKeyReq
APSME_UpdateDeviceReq SYMBOL "APSME_UpdateDeviceReq"
`??APSME_UpdateDeviceReq::?relay` SYMBOL "?relay", APSME_UpdateDeviceReq
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
`??AddrMgrEntryGet::?relay` SYMBOL "?relay", AddrMgrEntryGet
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
`??AddrMgrEntryLookupNwk::?relay` SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
`??AddrMgrEntryRelease::?relay` SYMBOL "?relay", AddrMgrEntryRelease
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
`??AddrMgrEntryUpdate::?relay` SYMBOL "?relay", AddrMgrEntryUpdate
AddrMgrExtAddrEqual SYMBOL "AddrMgrExtAddrEqual"
`??AddrMgrExtAddrEqual::?relay` SYMBOL "?relay", AddrMgrExtAddrEqual
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
`??AddrMgrExtAddrValid::?relay` SYMBOL "?relay", AddrMgrExtAddrValid
AssocGetWithExt     SYMBOL "AssocGetWithExt"
`??AssocGetWithExt::?relay` SYMBOL "?relay", AssocGetWithExt
AssocGetWithShort   SYMBOL "AssocGetWithShort"
`??AssocGetWithShort::?relay` SYMBOL "?relay", AssocGetWithShort
AssocRemove         SYMBOL "AssocRemove"
`??AssocRemove::?relay` SYMBOL "?relay", AssocRemove
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_ReadNwkKeyInfo SYMBOL "NLME_ReadNwkKeyInfo"
`??NLME_ReadNwkKeyInfo::?relay` SYMBOL "?relay", NLME_ReadNwkKeyInfo
SSP_GetTrueRand     SYMBOL "SSP_GetTrueRand"
`??SSP_GetTrueRand::?relay` SYMBOL "?relay", SSP_GetTrueRand
SSP_Init            SYMBOL "SSP_Init"
`??SSP_Init::?relay` SYMBOL "?relay", SSP_Init
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
`??SSP_SwitchNwkKey::?relay` SYMBOL "?relay", SSP_SwitchNwkKey
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
`??SSP_UpdateNwkKey::?relay` SYMBOL "?relay", SSP_UpdateNwkKey
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
`??ZDApp_NVUpdate::?relay` SYMBOL "?relay", ZDApp_NVUpdate
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
APSME_IsDefaultTCLK SYMBOL "APSME_IsDefaultTCLK"
`??APSME_IsDefaultTCLK::?relay` SYMBOL "?relay", APSME_IsDefaultTCLK
APSME_IsLinkKeyValid SYMBOL "APSME_IsLinkKeyValid"
`??APSME_IsLinkKeyValid::?relay` SYMBOL "?relay", APSME_IsLinkKeyValid
APSME_KeyFwdToChild SYMBOL "APSME_KeyFwdToChild"
`??APSME_KeyFwdToChild::?relay` SYMBOL "?relay", APSME_KeyFwdToChild
APSME_LinkKeyNVIdGet SYMBOL "APSME_LinkKeyNVIdGet"
`??APSME_LinkKeyNVIdGet::?relay` SYMBOL "?relay", APSME_LinkKeyNVIdGet
APSME_LinkKeySet    SYMBOL "APSME_LinkKeySet"
`??APSME_LinkKeySet::?relay` SYMBOL "?relay", APSME_LinkKeySet
APSME_TCLinkKeyInit SYMBOL "APSME_TCLinkKeyInit"
`??APSME_TCLinkKeyInit::?relay` SYMBOL "?relay", APSME_TCLinkKeyInit
APSME_TCLinkKeyLoad SYMBOL "APSME_TCLinkKeyLoad"
`??APSME_TCLinkKeyLoad::?relay` SYMBOL "?relay", APSME_TCLinkKeyLoad
APSME_TCLinkKeySync SYMBOL "APSME_TCLinkKeySync"
`??APSME_TCLinkKeySync::?relay` SYMBOL "?relay", APSME_TCLinkKeySync
ZDSecMgrAPSRemove   SYMBOL "ZDSecMgrAPSRemove"
`??ZDSecMgrAPSRemove::?relay` SYMBOL "?relay", ZDSecMgrAPSRemove
ZDSecMgrAddLinkKey  SYMBOL "ZDSecMgrAddLinkKey"
`??ZDSecMgrAddLinkKey::?relay` SYMBOL "?relay", ZDSecMgrAddLinkKey
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
`??ZDSecMgrAddrClear::?relay` SYMBOL "?relay", ZDSecMgrAddrClear
ZDSecMgrAddrStore   SYMBOL "ZDSecMgrAddrStore"
`??ZDSecMgrAddrStore::?relay` SYMBOL "?relay", ZDSecMgrAddrStore
ZDSecMgrAppKeyGet   SYMBOL "ZDSecMgrAppKeyGet"
`??ZDSecMgrAppKeyGet::?relay` SYMBOL "?relay", ZDSecMgrAppKeyGet
ZDSecMgrAppKeyReq   SYMBOL "ZDSecMgrAppKeyReq"
`??ZDSecMgrAppKeyReq::?relay` SYMBOL "?relay", ZDSecMgrAppKeyReq
ZDSecMgrAppKeyTypeSet SYMBOL "ZDSecMgrAppKeyTypeSet"
`??ZDSecMgrAppKeyTypeSet::?relay` SYMBOL "?relay", ZDSecMgrAppKeyTypeSet
ZDSecMgrApsLinkKeyInit SYMBOL "ZDSecMgrApsLinkKeyInit"
`??ZDSecMgrApsLinkKeyInit::?relay` SYMBOL "?relay", ZDSecMgrApsLinkKeyInit
ZDSecMgrAssocDeviceAuth SYMBOL "ZDSecMgrAssocDeviceAuth"
`??ZDSecMgrAssocDeviceAuth::?relay` SYMBOL "?relay", ZDSecMgrAssocDeviceAuth
ZDSecMgrAuthNwkKey  SYMBOL "ZDSecMgrAuthNwkKey"
`??ZDSecMgrAuthNwkKey::?relay` SYMBOL "?relay", ZDSecMgrAuthNwkKey
ZDSecMgrAuthenticationCheck SYMBOL "ZDSecMgrAuthenticationCheck"
`??ZDSecMgrAuthenticationCheck::?relay` SYMBOL "?relay", ZDSecMgrAuthenticationCheck
ZDSecMgrAuthenticationSet SYMBOL "ZDSecMgrAuthenticationSet"
`??ZDSecMgrAuthenticationSet::?relay` SYMBOL "?relay", ZDSecMgrAuthenticationSet
ZDSecMgrClearNVKeyValues SYMBOL "ZDSecMgrClearNVKeyValues"
`??ZDSecMgrClearNVKeyValues::?relay` SYMBOL "?relay", ZDSecMgrClearNVKeyValues
ZDSecMgrConfig      SYMBOL "ZDSecMgrConfig"
`??ZDSecMgrConfig::?relay` SYMBOL "?relay", ZDSecMgrConfig
ZDSecMgrDeviceJoin  SYMBOL "ZDSecMgrDeviceJoin"
`??ZDSecMgrDeviceJoin::?relay` SYMBOL "?relay", ZDSecMgrDeviceJoin
ZDSecMgrDeviceJoinDirect SYMBOL "ZDSecMgrDeviceJoinDirect"
`??ZDSecMgrDeviceJoinDirect::?relay` SYMBOL "?relay", ZDSecMgrDeviceJoinDirect
ZDSecMgrDeviceJoinFwd SYMBOL "ZDSecMgrDeviceJoinFwd"
`??ZDSecMgrDeviceJoinFwd::?relay` SYMBOL "?relay", ZDSecMgrDeviceJoinFwd
ZDSecMgrDeviceNew   SYMBOL "ZDSecMgrDeviceNew"
`??ZDSecMgrDeviceNew::?relay` SYMBOL "?relay", ZDSecMgrDeviceNew
ZDSecMgrDeviceRemove SYMBOL "ZDSecMgrDeviceRemove"
`??ZDSecMgrDeviceRemove::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemove
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
`??ZDSecMgrDeviceRemoveByExtAddr::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrDeviceValidate SYMBOL "ZDSecMgrDeviceValidate"
`??ZDSecMgrDeviceValidate::?relay` SYMBOL "?relay", ZDSecMgrDeviceValidate
ZDSecMgrDeviceValidateRM SYMBOL "ZDSecMgrDeviceValidateRM"
`??ZDSecMgrDeviceValidateRM::?relay` SYMBOL "?relay", ZDSecMgrDeviceValidateRM
ZDSecMgrEntryFree   SYMBOL "ZDSecMgrEntryFree"
`??ZDSecMgrEntryFree::?relay` SYMBOL "?relay", ZDSecMgrEntryFree
ZDSecMgrEntryInit   SYMBOL "ZDSecMgrEntryInit"
`??ZDSecMgrEntryInit::?relay` SYMBOL "?relay", ZDSecMgrEntryInit
ZDSecMgrEntryLookup SYMBOL "ZDSecMgrEntryLookup"
`??ZDSecMgrEntryLookup::?relay` SYMBOL "?relay", ZDSecMgrEntryLookup
ZDSecMgrEntryLookupAMI SYMBOL "ZDSecMgrEntryLookupAMI"
`??ZDSecMgrEntryLookupAMI::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupAMI
ZDSecMgrEntryLookupAMIGetIndex SYMBOL "ZDSecMgrEntryLookupAMIGetIndex"
`??ZDSecMgrEntryLookupAMIGetIndex::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupAMIGetIndex
ZDSecMgrEntryLookupExt SYMBOL "ZDSecMgrEntryLookupExt"
`??ZDSecMgrEntryLookupExt::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupExt
ZDSecMgrEntryLookupExtGetIndex SYMBOL "ZDSecMgrEntryLookupExtGetIndex"
`??ZDSecMgrEntryLookupExtGetIndex::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupExtGetIndex
ZDSecMgrEntryNew    SYMBOL "ZDSecMgrEntryNew"
`??ZDSecMgrEntryNew::?relay` SYMBOL "?relay", ZDSecMgrEntryNew
ZDSecMgrExtAddrLookup SYMBOL "ZDSecMgrExtAddrLookup"
`??ZDSecMgrExtAddrLookup::?relay` SYMBOL "?relay", ZDSecMgrExtAddrLookup
ZDSecMgrExtAddrStore SYMBOL "ZDSecMgrExtAddrStore"
`??ZDSecMgrExtAddrStore::?relay` SYMBOL "?relay", ZDSecMgrExtAddrStore
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
`??ZDSecMgrInit::?relay` SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrInitNV      SYMBOL "ZDSecMgrInitNV"
`??ZDSecMgrInitNV::?relay` SYMBOL "?relay", ZDSecMgrInitNV
ZDSecMgrInitNVKeyTables SYMBOL "ZDSecMgrInitNVKeyTables"
`??ZDSecMgrInitNVKeyTables::?relay` SYMBOL "?relay", ZDSecMgrInitNVKeyTables
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
`??ZDSecMgrNewDeviceEvent::?relay` SYMBOL "?relay", ZDSecMgrNewDeviceEvent
ZDSecMgrNwkKeyInit  SYMBOL "ZDSecMgrNwkKeyInit"
`??ZDSecMgrNwkKeyInit::?relay` SYMBOL "?relay", ZDSecMgrNwkKeyInit
ZDSecMgrPermitJoining SYMBOL "ZDSecMgrPermitJoining"
`??ZDSecMgrPermitJoining::?relay` SYMBOL "?relay", ZDSecMgrPermitJoining
ZDSecMgrPermitJoiningTimeout SYMBOL "ZDSecMgrPermitJoiningTimeout"
`??ZDSecMgrPermitJoiningTimeout::?relay` SYMBOL "?relay", ZDSecMgrPermitJoiningTimeout
ZDSecMgrReadKeyFromNv SYMBOL "ZDSecMgrReadKeyFromNv"
`??ZDSecMgrReadKeyFromNv::?relay` SYMBOL "?relay", ZDSecMgrReadKeyFromNv
ZDSecMgrRemoveDeviceInd SYMBOL "ZDSecMgrRemoveDeviceInd"
`??ZDSecMgrRemoveDeviceInd::?relay` SYMBOL "?relay", ZDSecMgrRemoveDeviceInd
ZDSecMgrRequestAppKey SYMBOL "ZDSecMgrRequestAppKey"
`??ZDSecMgrRequestAppKey::?relay` SYMBOL "?relay", ZDSecMgrRequestAppKey
ZDSecMgrRequestKeyInd SYMBOL "ZDSecMgrRequestKeyInd"
`??ZDSecMgrRequestKeyInd::?relay` SYMBOL "?relay", ZDSecMgrRequestKeyInd
ZDSecMgrSaveApsLinkKey SYMBOL "ZDSecMgrSaveApsLinkKey"
`??ZDSecMgrSaveApsLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveApsLinkKey
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
`??ZDSecMgrSaveTCLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
ZDSecMgrSendNwkKey  SYMBOL "ZDSecMgrSendNwkKey"
`??ZDSecMgrSendNwkKey::?relay` SYMBOL "?relay", ZDSecMgrSendNwkKey
ZDSecMgrSetDefaultNV SYMBOL "ZDSecMgrSetDefaultNV"
`??ZDSecMgrSetDefaultNV::?relay` SYMBOL "?relay", ZDSecMgrSetDefaultNV
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
`??ZDSecMgrSwitchKeyInd::?relay` SYMBOL "?relay", ZDSecMgrSwitchKeyInd
ZDSecMgrSwitchNwkKey SYMBOL "ZDSecMgrSwitchNwkKey"
`??ZDSecMgrSwitchNwkKey::?relay` SYMBOL "?relay", ZDSecMgrSwitchNwkKey
ZDSecMgrTCDataLoad  SYMBOL "ZDSecMgrTCDataLoad"
`??ZDSecMgrTCDataLoad::?relay` SYMBOL "?relay", ZDSecMgrTCDataLoad
ZDSecMgrTCExtAddrCheck SYMBOL "ZDSecMgrTCExtAddrCheck"
`??ZDSecMgrTCExtAddrCheck::?relay` SYMBOL "?relay", ZDSecMgrTCExtAddrCheck
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
`??ZDSecMgrTransportKeyInd::?relay` SYMBOL "?relay", ZDSecMgrTransportKeyInd
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
`??ZDSecMgrUpdateDeviceInd::?relay` SYMBOL "?relay", ZDSecMgrUpdateDeviceInd
ZDSecMgrUpdateNwkKey SYMBOL "ZDSecMgrUpdateNwkKey"
`??ZDSecMgrUpdateNwkKey::?relay` SYMBOL "?relay", ZDSecMgrUpdateNwkKey
ZDSecMgrUpdateTCAddress SYMBOL "ZDSecMgrUpdateTCAddress"
`??ZDSecMgrUpdateTCAddress::?relay` SYMBOL "?relay", ZDSecMgrUpdateTCAddress

        EXTERN `??APSME_GetRequest::?relay`
        FUNCTION `??APSME_GetRequest::?relay`,00H
        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??APSME_LookupExtAddr::?relay`
        FUNCTION `??APSME_LookupExtAddr::?relay`,00H
        EXTERN `??APSME_LookupNwkAddr::?relay`
        FUNCTION `??APSME_LookupNwkAddr::?relay`,00H
        EXTERN `??APSME_RemoveDeviceReq::?relay`
        FUNCTION `??APSME_RemoveDeviceReq::?relay`,00H
        EXTERN `??APSME_RequestKeyReq::?relay`
        FUNCTION `??APSME_RequestKeyReq::?relay`,00H
        EXTERN `??APSME_SecurityRM_CD::?relay`
        FUNCTION `??APSME_SecurityRM_CD::?relay`,00H
        EXTERN `??APSME_SetRequest::?relay`
        FUNCTION `??APSME_SetRequest::?relay`,00H
        EXTERN `??APSME_SwitchKeyReq::?relay`
        FUNCTION `??APSME_SwitchKeyReq::?relay`,00H
        EXTERN `??APSME_TransportKeyReq::?relay`
        FUNCTION `??APSME_TransportKeyReq::?relay`,00H
        EXTERN `??APSME_UpdateDeviceReq::?relay`
        FUNCTION `??APSME_UpdateDeviceReq::?relay`,00H
        EXTERN `??AddrMgrEntryGet::?relay`
        FUNCTION `??AddrMgrEntryGet::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryLookupNwk::?relay`
        FUNCTION `??AddrMgrEntryLookupNwk::?relay`,00H
        EXTERN `??AddrMgrEntryRelease::?relay`
        FUNCTION `??AddrMgrEntryRelease::?relay`,00H
        EXTERN `??AddrMgrEntryUpdate::?relay`
        FUNCTION `??AddrMgrEntryUpdate::?relay`,00H
        EXTERN `??AddrMgrExtAddrEqual::?relay`
        FUNCTION `??AddrMgrExtAddrEqual::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??AddrMgrExtAddrValid::?relay`
        FUNCTION `??AddrMgrExtAddrValid::?relay`,00H
        EXTERN `??AssocGetWithExt::?relay`
        FUNCTION `??AssocGetWithExt::?relay`,00H
        EXTERN `??AssocGetWithShort::?relay`
        FUNCTION `??AssocGetWithShort::?relay`,00H
        EXTERN `??AssocRemove::?relay`
        FUNCTION `??AssocRemove::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_ReadNwkKeyInfo::?relay`
        FUNCTION `??NLME_ReadNwkKeyInfo::?relay`,00H
        EXTERN `??SSP_GetTrueRand::?relay`
        FUNCTION `??SSP_GetTrueRand::?relay`,00H
        EXTERN `??SSP_Init::?relay`
        FUNCTION `??SSP_Init::?relay`,00H
        EXTERN `??SSP_SwitchNwkKey::?relay`
        FUNCTION `??SSP_SwitchNwkKey::?relay`,00H
        EXTERN `??SSP_UpdateNwkKey::?relay`
        FUNCTION `??SSP_UpdateNwkKey::?relay`,00H
        EXTERN `??ZDApp_NVUpdate::?relay`
        FUNCTION `??ZDApp_NVUpdate::?relay`,00H
        EXTERN `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN APSME_GetRequest
        FUNCTION APSME_GetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupExtAddr
        FUNCTION APSME_LookupExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupNwkAddr
        FUNCTION APSME_LookupNwkAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RemoveDeviceReq
        FUNCTION APSME_RemoveDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RequestKeyReq
        FUNCTION APSME_RequestKeyReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SecurityRM_CD
        FUNCTION APSME_SecurityRM_CD,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SetRequest
        FUNCTION APSME_SetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SwitchKeyReq
        FUNCTION APSME_SwitchKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_TransportKeyReq
        FUNCTION APSME_TransportKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UpdateDeviceReq
        FUNCTION APSME_UpdateDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrEqual
        FUNCTION AddrMgrExtAddrEqual,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithExt
        FUNCTION AssocGetWithExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithShort
        FUNCTION AssocGetWithShort,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocRemove
        FUNCTION AssocRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReadNwkKeyInfo
        FUNCTION NLME_ReadNwkKeyInfo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_GetTrueRand
        FUNCTION SSP_GetTrueRand,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_Init
        FUNCTION SSP_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDAppTaskID
        EXTERN ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN defaultTCLinkKey
        EXTERN devState
        EXTERN osal_isbufset
        FUNCTION osal_isbufset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zdoCBFunc
        EXTERN zgApsLinkKeyType
        EXTERN zgApsTrustCenterAddr
        EXTERN zgPreConfigKeys
        EXTERN zgSecurePermitJoin
        EXTERN zgUseDefaultTCLK

// C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDSecMgr.c
//    1 /******************************************************************************
//    2   Filename:       ZDSecMgr.c
//    3   Revised:        $Date: 2014-06-05 11:25:00 -0700 (Thu, 05 Jun 2014) $
//    4   Revision:       $Revision: 38833 $
//    5 
//    6   Description:    The ZigBee Device Security Manager.
//    7 
//    8 
//    9   Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 #ifdef __cplusplus
//   41 extern "C"
//   42 {
//   43 #endif
//   44 
//   45 /******************************************************************************
//   46  * INCLUDES
//   47  */
//   48 #include "ZComDef.h"
//   49 #include "OSAL.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "ZGlobals.h"
//   52 #include "ssp.h"
//   53 #include "nwk_globals.h"
//   54 #include "nwk.h"
//   55 #include "NLMEDE.h"
//   56 #include "AddrMgr.h"
//   57 #include "AssocList.h"
//   58 #include "APSMEDE.h"
//   59 #include "ZDConfig.h"
//   60 #include "ZDSecMgr.h"
//   61 #if NODE_AUTH
//   62 #include "NodeAuth.h"
//   63 #endif
//   64 
//   65 
//   66 /******************************************************************************
//   67  * CONSTANTS
//   68  */
//   69 // maximum number of devices managed by this Security Manager
//   70 #if !defined ( ZDSECMGR_DEVICE_MAX )
//   71   #define ZDSECMGR_DEVICE_MAX 3
//   72 #endif
//   73 
//   74 // maximum number of LINK keys this device may store
//   75 #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
//   76 
//   77 // total number of stored devices
//   78 #if !defined ( ZDSECMGR_STORED_DEVICES )
//   79   #define ZDSECMGR_STORED_DEVICES 3
//   80 #endif
//   81 
//   82 // Total number of preconfigured trust center link key
//   83 #if !defined ( ZDSECMGR_TC_DEVICE_MAX )
//   84   #define ZDSECMGR_TC_DEVICE_MAX 1
//   85 #endif
//   86 
//   87 #if ( ZDSECMGR_TC_DEVICE_MAX < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )
//   88   #error "ZDSECMGR_TC_DEVICE_MAX shall be between 1 and 255 !"
//   89 #endif
//   90 
//   91 // APSME Stub Implementations
//   92 #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
//   93 #define ZDSecMgrLinkKeyNVIdGet APSME_LinkKeyNVIdGet
//   94 #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
//   95 #define ZDSecMgrIsLinkKeyValid APSME_IsLinkKeyValid
//   96 
//   97 /******************************************************************************
//   98  * TYPEDEFS
//   99  */
//  100 typedef struct
//  101 {
//  102   uint16            ami;
//  103   uint16            keyNvId;   // index to the Link Key table in NV
//  104   ZDSecMgr_Authentication_Option authenticateOption;
//  105 } ZDSecMgrEntry_t;
//  106 
//  107 typedef struct
//  108 {
//  109   uint16          nwkAddr;
//  110   uint8*          extAddr;
//  111   uint16          parentAddr;
//  112   uint8           secure;
//  113   uint8           devStatus;
//  114 } ZDSecMgrDevice_t;
//  115 
//  116 /******************************************************************************
//  117  * EXTERNAL VARIABLES
//  118  */
//  119 extern pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
//  120 
//  121 /******************************************************************************
//  122  * LOCAL VARIABLES
//  123  */
//  124 #if 0 // Taken out because the following functionality is only used for test
//  125       // purpose. A more efficient (above) way is used. It can be put
//  126       // back in if customers request for a white/black list feature.
//  127 uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
//  128 {
//  129   { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  130   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
//  131   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  132 };
//  133 #endif
//  134 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
ZDSecMgrTCExtAddr:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  136   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
//  137 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 uint8 ZDSecMgrTCAuthenticated = FALSE;
ZDSecMgrTCAuthenticated:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  139 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  140 ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
ZDSecMgrEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  141 
//  142 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
//  143 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 uint8 ZDSecMgrPermitJoiningEnabled;
ZDSecMgrPermitJoiningEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 uint8 ZDSecMgrPermitJoiningTimed;
ZDSecMgrPermitJoiningTimed:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  146 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  147 APSME_TCLinkKey_t TrustCenterLinkKey;
TrustCenterLinkKey:
        DS 32
        REQUIRE __INIT_XDATA_Z
//  148 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  149 APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
ApsLinkKeyFrmCntr:
        DS 27
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
TCLinkKeyFrmCntr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  151 
//  152 /******************************************************************************
//  153  * PRIVATE FUNCTIONS
//  154  *
//  155  *   ZDSecMgrAddrStore
//  156  *   ZDSecMgrExtAddrStore
//  157  *   ZDSecMgrExtAddrLookup
//  158  *   ZDSecMgrEntryInit
//  159  *   ZDSecMgrEntryLookup
//  160  *   ZDSecMgrEntryLookupAMI
//  161  *   ZDSecMgrEntryLookupExt
//  162  *   ZDSecMgrEntryLookupExtGetIndex
//  163  *   ZDSecMgrEntryFree
//  164  *   ZDSecMgrEntryNew
//  165  *   ZDSecMgrAppKeyGet
//  166  *   ZDSecMgrAppKeyReq
//  167  *   ZDSecMgrSendNwkKey
//  168  *   ZDSecMgrDeviceRemove
//  169  *   ZDSecMgrDeviceValidateRM
//  170  *   ZDSecMgrDeviceValidate
//  171  *   ZDSecMgrDeviceJoin
//  172  *   ZDSecMgrDeviceJoinDirect
//  173  *   ZDSecMgrDeviceJoinFwd
//  174  *   ZDSecMgrDeviceNew
//  175  *   ZDSecMgrAssocDeviceAuth
//  176  *   ZDSecMgrAuthNwkKey
//  177  *   APSME_TCLinkKeyInit
//  178  *   APSME_IsDefaultTCLK
//  179  */
//  180 
//  181 //-----------------------------------------------------------------------------
//  182 // address management
//  183 //-----------------------------------------------------------------------------
//  184 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  185 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  186 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
//  187 
//  188 //-----------------------------------------------------------------------------
//  189 // Trust Center management
//  190 //-----------------------------------------------------------------------------
//  191 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
//  192 void ZDSecMgrTCDataLoad( uint8* extAddr );
//  193 
//  194 //-----------------------------------------------------------------------------
//  195 // entry data
//  196 //-----------------------------------------------------------------------------
//  197 void ZDSecMgrEntryInit(uint8 state);
//  198 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
//  199 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
//  200 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  201 ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
//  202 ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex );
//  203 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
//  204 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
//  205 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
//  206 void ZDSecMgrApsLinkKeyInit(void);
//  207 #if defined ( NV_RESTORE )
//  208 static void ZDSecMgrWriteNV(void);
//  209 static void ZDSecMgrRestoreFromNV(void);
//  210 static void ZDSecMgrUpdateNV( uint16 index );
//  211 #endif
//  212 
//  213 //-----------------------------------------------------------------------------
//  214 // key support
//  215 //-----------------------------------------------------------------------------
//  216 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
//  217                              uint8*  initExtAddr,
//  218                              uint16  partNwkAddr,
//  219                              uint8*  partExtAddr,
//  220                              uint8** key,
//  221                              uint8*  keyType );
//  222 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
//  223 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
//  224 void ZDSecMgrNwkKeyInit(uint8 setDefault);
//  225 
//  226 //-----------------------------------------------------------------------------
//  227 // device management
//  228 //-----------------------------------------------------------------------------
//  229 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
//  230 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
//  231 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
//  232 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
//  233 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
//  234 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
//  235 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
//  236 
//  237 //-----------------------------------------------------------------------------
//  238 // association management
//  239 //-----------------------------------------------------------------------------
//  240 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
//  241 
//  242 //-----------------------------------------------------------------------------
//  243 // authentication management
//  244 //-----------------------------------------------------------------------------
//  245 void ZDSecMgrAuthNwkKey( void );
//  246 
//  247 //-----------------------------------------------------------------------------
//  248 // APSME function
//  249 //-----------------------------------------------------------------------------
//  250 void APSME_TCLinkKeyInit( uint8 setDefault );
//  251 uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
//  252 
//  253 /******************************************************************************
//  254  * @fn          ZDSecMgrAddrStore
//  255  *
//  256  * @brief       Store device addresses.
//  257  *
//  258  * @param       nwkAddr - [in] NWK address
//  259  * @param       extAddr - [in] EXT address
//  260  * @param       ami     - [out] Address Manager index
//  261  *
//  262  * @return      ZStatus_t
//  263  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  264 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrAddrStore:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
        CODE
//  265 {
        FUNCALL ZDSecMgrAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  266   ZStatus_t      status;
//  267   AddrMgrEntry_t entry;
//  268 
//  269 
//  270   // add entry
//  271   entry.user    = ADDRMGR_USER_SECURITY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
//  272   entry.nwkAddr = nwkAddr;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine47 & 0xFFFF
//  273   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_54:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
//  274 
//  275   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_20:
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrAddrStore_0
//  276   {
//  277     // return successful results
//  278     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  279     status = ZSuccess;
//  280   }
??CrossCallReturnLabel_63:
        SJMP    ??CrossCallReturnLabel_9
//  281   else
//  282   {
//  283     // return failed results
//  284     *ami   = entry.index;
??ZDSecMgrAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
//  285     status = ZNwkUnknownDevice;
//  286   }
//  287 
//  288   return status;
??CrossCallReturnLabel_9:
        LJMP    ?Subroutine0 & 0xFFFF
//  289 }
          CFI EndBlock cfiBlock0
//  290 
//  291 /******************************************************************************
//  292  * @fn          ZDSecMgrExtAddrStore
//  293  *
//  294  * @brief       Store EXT address.
//  295  *
//  296  * @param       extAddr - [in] EXT address
//  297  * @param       ami     - [out] Address Manager index
//  298  *
//  299  * @return      ZStatus_t
//  300  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  301 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrStore:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDSecMgrExtAddrStore
        CODE
//  302 {
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  303   ZStatus_t      status;
//  304   AddrMgrEntry_t entry;
//  305 
//  306 
//  307   // add entry
//  308   entry.user    = ADDRMGR_USER_SECURITY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
//  309   entry.nwkAddr = nwkAddr;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine47 & 0xFFFF
//  310   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_55:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
//  311 
//  312   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_21:
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrExtAddrStore_0
//  313   {
//  314     // return successful results
//  315     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  316     status = ZSuccess;
//  317   }
??CrossCallReturnLabel_64:
        SJMP    ??CrossCallReturnLabel_10
//  318   else
//  319   {
//  320     // return failed results
//  321     *ami   = entry.index;
??ZDSecMgrExtAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
//  322     status = ZNwkUnknownDevice;
//  323   }
//  324 
//  325   return status;
??CrossCallReturnLabel_10:
        LJMP    ?Subroutine0 & 0xFFFF
//  326 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function ZDSecMgrExtAddrStore
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_135:
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function ZDSecMgrExtAddrStore
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        LCALL   ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_160:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     R1,#-0x38
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
//  327 
//  328 /******************************************************************************
//  329  * @fn          ZDSecMgrExtAddrLookup
//  330  *
//  331  * @brief       Lookup index for specified EXT address.
//  332  *
//  333  * @param       extAddr - [in] EXT address
//  334  * @param       ami     - [out] Address Manager index
//  335  *
//  336  * @return      ZStatus_t
//  337  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  338 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrLookup:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function ZDSecMgrExtAddrLookup
        CODE
//  339 {
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  340   ZStatus_t      status;
//  341   AddrMgrEntry_t entry;
//  342 
//  343 
//  344   // lookup entry
//  345   entry.user = ADDRMGR_USER_SECURITY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
//  346   AddrMgrExtAddrSet( entry.extAddr, extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
//  347 
//  348   if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrExtAddrLookup_0
//  349   {
//  350     // return successful results
//  351     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  352     status = ZSuccess;
//  353   }
??CrossCallReturnLabel_65:
        SJMP    ??CrossCallReturnLabel_11
//  354   else
//  355   {
//  356     // return failed results
//  357     *ami   = entry.index;
??ZDSecMgrExtAddrLookup_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
//  358     status = ZNwkUnknownDevice;
//  359   }
//  360 
//  361   return status;
??CrossCallReturnLabel_11:
        LJMP    ?Subroutine0 & 0xFFFF
//  362 }
          CFI EndBlock cfiBlock9
//  363 
//  364 /******************************************************************************
//  365  * @fn          ZDSecMgrAddrClear
//  366  *
//  367  * @brief       Clear security bit from Address Manager for specific device.
//  368  *
//  369  * @param       extAddr - [in] EXT address
//  370  *
//  371  * @return      ZStatus_t
//  372  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  373 ZStatus_t ZDSecMgrAddrClear( uint8* extAddr )
ZDSecMgrAddrClear:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ZDSecMgrAddrClear
        CODE
//  374 {
        FUNCALL ZDSecMgrAddrClear, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrClear, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 15
        MOV     A,#-0xf
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  375   ZStatus_t status;
//  376   uint16 entryAmi;
//  377 
//  378   // get Address Manager Index
//  379   status = ZDSecMgrExtAddrLookup( extAddr, &entryAmi );
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV     A,R1
        MOV     R6,A
//  380 
//  381   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrAddrClear_0
//  382   {
//  383     AddrMgrEntry_t addrEntry;
//  384 
//  385     // Clear SECURITY User bit from the address manager
//  386     addrEntry.user = ADDRMGR_USER_SECURITY;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  387     addrEntry.index = entryAmi;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine72_0 & 0xFFFF
??CrossCallReturnLabel_154:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
//  388 
//  389     if ( AddrMgrEntryRelease( &addrEntry ) != TRUE )
??CrossCallReturnLabel_12:
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??ZDSecMgrAddrClear_0
//  390     {
//  391       // return failure results
//  392       status = ZFailure;
        MOV     R6,#0x1
//  393     }
//  394   }
//  395 
//  396   return status;
??ZDSecMgrAddrClear_0:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0xf
        LJMP    ??Subroutine65_0 & 0xFFFF
//  397 }
          CFI EndBlock cfiBlock10
//  398 
//  399 /******************************************************************************
//  400  * @fn          ZDSecMgrEntryInit
//  401  *
//  402  * @brief       Initialize entry sub module
//  403  *
//  404  * @param       state - device initialization state
//  405  *
//  406  * @return      none
//  407  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  408 void ZDSecMgrEntryInit(uint8 state)
ZDSecMgrEntryInit:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
        CODE
//  409 {
        FUNCALL ZDSecMgrEntryInit, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryInit, ZDSecMgrRestoreFromNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  410   if (ZDSecMgrEntries == NULL)
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_124:
        JNZ     ??ZDSecMgrEntryInit_0
//  411   {
//  412     uint16 index;
//  413 
//  414     if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xf
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPTR,#ZDSecMgrEntries
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_81:
        JZ      ??ZDSecMgrEntryInit_1
//  415     {
//  416       return;
//  417     }
//  418 
//  419     for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
        MOV     R0,#0x0
        MOV     R1,#0x0
//  420     {
//  421       ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
??ZDSecMgrEntryInit_2:
        LCALL   ?Subroutine37 & 0xFFFF
//  422 
//  423       ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
//  424     }
??CrossCallReturnLabel_29:
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_48:
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     R0
        MOV     A,R0
        JNZ     ??ZDSecMgrEntryInit_3
        INC     R1
??ZDSecMgrEntryInit_3:
        LCALL   ?Subroutine36 & 0xFFFF
//  425   }
??CrossCallReturnLabel_71:
        JC      ??ZDSecMgrEntryInit_2
//  426 
//  427 #if defined NV_RESTORE
//  428   if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
??ZDSecMgrEntryInit_0:
        MOV     A,R6
        JNZ     ??ZDSecMgrEntryInit_1
//  429   {
//  430     ZDSecMgrRestoreFromNV();
        ; Setup parameters for call to function ZDSecMgrRestoreFromNV
        LCALL   `??ZDSecMgrRestoreFromNV::?relay`; Banked call to: ZDSecMgrRestoreFromNV
//  431   }
//  432 #else
//  433   (void)state;
//  434 #endif
//  435 }
??ZDSecMgrEntryInit_1:
        LJMP    ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock11
//  436 
//  437 /******************************************************************************
//  438  * @fn          ZDSecMgrEntryLookup
//  439  *
//  440  * @brief       Lookup entry index using specified NWK address.
//  441  *
//  442  * @param       nwkAddr - [in] NWK address
//  443  * @param       entry   - [out] valid entry
//  444  *
//  445  * @return      ZStatus_t
//  446  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  447 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookup:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
        CODE
//  448 {
        FUNCALL ZDSecMgrEntryLookup, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  449   uint16         index;
//  450   AddrMgrEntry_t addrMgrEntry;
//  451 
//  452   // initialize results
//  453   *entry = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine12 & 0xFFFF
//  454 
//  455   // verify data is available
//  456   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_77:
        JZ      ??ZDSecMgrEntryLookup_0
//  457   {
//  458     addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
//  459     addrMgrEntry.nwkAddr = nwkAddr;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
//  460 
//  461     if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
??CrossCallReturnLabel_138:
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrEntryLookup_0
//  462     {
//  463       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  464       {
//  465         if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
??ZDSecMgrEntryLookup_1:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x5
        MUL     AB
        MOV     R2,A
        MOV     ?V0,B
        MOV     B,#0x5
        MOV     A,R3
        MUL     AB
        ADD     A,?V0
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     DPL,?V0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??ZDSecMgrEntryLookup_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??ZDSecMgrEntryLookup_2:
        JNZ     ??ZDSecMgrEntryLookup_3
//  466         {
//  467           // return successful results
//  468           *entry = &ZDSecMgrEntries[index];
        LCALL   ?Subroutine38 & 0xFFFF
//  469 
//  470           // break from loop
//  471           return ZSuccess;
//  472         }
//  473       }
??CrossCallReturnLabel_61:
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_66:
        SJMP    ??ZDSecMgrEntryLookup_4
??ZDSecMgrEntryLookup_3:
        INC     R0
        MOV     A,R0
        JNZ     ??ZDSecMgrEntryLookup_5
        INC     R1
??ZDSecMgrEntryLookup_5:
        LCALL   ?Subroutine36 & 0xFFFF
//  474     }
//  475   }
??CrossCallReturnLabel_72:
        JC      ??ZDSecMgrEntryLookup_1
//  476 
//  477   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookup_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookup_4:
        LJMP    ?Subroutine0 & 0xFFFF
//  478 }
          CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function ZDSecMgrEntryFree
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMI
          CFI Conditional ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function ZDSecMgrEntryLookup
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function ZDSecMgrEntryFree
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOV     R2,B
        MOV     B,#0x5
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function ZDSecMgrExtAddrStore
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function ZDSecMgrAddrStore
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function ZDSecMgrExtAddrStore
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMI
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function ZDSecMgrEntryLookup
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function ZDSecMgrAddrStore
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function ZDSecMgrExtAddrStore
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     R1,#0x0
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36
//  479 
//  480 /******************************************************************************
//  481  * @fn          ZDSecMgrEntryLookupAMI
//  482  *
//  483  * @brief       Lookup entry using specified address index
//  484  *
//  485  * @param       ami   - [in] Address Manager index
//  486  * @param       entry - [out] valid entry
//  487  *
//  488  * @return      ZStatus_t
//  489  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  490 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookupAMI:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMI
        CODE
//  491 {
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  492   uint16 index;
//  493 
//  494   // initialize results
//  495   *entry = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine12 & 0xFFFF
//  496 
//  497   // verify data is available
//  498   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_78:
        JZ      ??ZDSecMgrEntryLookupAMI_0
//  499   {
//  500     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  501     {
//  502       if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupAMI_1:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_18:
        JNZ     ??ZDSecMgrEntryLookupAMI_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrEntryLookupAMI_2:
        JNZ     ??ZDSecMgrEntryLookupAMI_3
//  503       {
//  504         // return successful results
//  505         *entry = &ZDSecMgrEntries[index];
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        LCALL   ??Subroutine52_0 & 0xFFFF
//  506 
//  507         // break from loop
//  508         return ZSuccess;
//  509       }
//  510     }
??CrossCallReturnLabel_60:
        ADD     A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_67:
        SJMP    ??ZDSecMgrEntryLookupAMI_4
??ZDSecMgrEntryLookupAMI_3:
        INC     R0
        MOV     A,R0
        JNZ     ??ZDSecMgrEntryLookupAMI_5
        INC     R1
??ZDSecMgrEntryLookupAMI_5:
        LCALL   ?Subroutine36 & 0xFFFF
//  511   }
??CrossCallReturnLabel_73:
        JC      ??ZDSecMgrEntryLookupAMI_1
//  512 
//  513   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookupAMI_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookupAMI_4:
        LJMP    ??Subroutine66_0 & 0xFFFF
//  514 }
          CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_71
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function ZDSecMgrEntryLookup
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function ZDSecMgrEntryNew
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        CLR     C
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function ZDSecMgrReadKeyFromNv
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function ZDSecMgrEntryInit
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function ZDSecMgrEntryLookup
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function ZDSecMgrEntryNew
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        SUBB    A,#0x3
        MOV     A,R1
        SUBB    A,#0x0
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function ZDSecMgrEntryNew
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function ZDSecMgrWriteNV
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker57 Using cfiCommon1
          CFI (cfiPicker57) NoFunction
          CFI (cfiPicker57) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiPicker57
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiCond58 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_81
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function ZDSecMgrEntryLookup
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function ZDSecMgrEntryNew
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function ZDSecMgrWriteNV
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-2
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker63 Using cfiCommon1
          CFI (cfiPicker63) NoFunction
          CFI (cfiPicker63) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_136:
        ORL     A,R1
        RET
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiPicker63

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond64 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function ZDSecMgrExtAddrStore
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_21
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function ZDSecMgrEntryLookup
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_77
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-4
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_78
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-4
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function ZDSecMgrEntryNew
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_79
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-4
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function ZDSecMgrWriteNV
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_80
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-4
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function ZDSecMgrEntryInit
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_81
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-4
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function APSME_IsLinkKeyValid
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_132
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-4
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function ZDSecMgrAddLinkKey
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_133
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-4
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_134
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-4
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function ZDSecMgrEntryInit
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_124
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-4
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_125
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-4
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_126
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-4
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function ZDSecMgrEntryFree
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_127
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-4
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function ZDSecMgrEntryFree
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_128
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-4
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function ZDSecMgrDeviceJoin
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_129
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-4
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function ZDSecMgrRemoveDeviceInd
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_130
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-4
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function APSME_KeyFwdToChild
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_131
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-4
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker82 Using cfiCommon1
          CFI (cfiPicker82) NoFunction
          CFI (cfiPicker82) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        RET
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiPicker82
//  515 
//  516 /******************************************************************************
//  517  * @fn          ZDSecMgrEntryLookupExt
//  518  *
//  519  * @brief       Lookup entry index using specified EXT address.
//  520  *
//  521  * @param       extAddr - [in] EXT address
//  522  * @param       entry   - [out] valid entry
//  523  *
//  524  * @return      ZStatus_t
//  525  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  526 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookupExt:
          CFI Block cfiBlock83 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExt
        CODE
//  527 {
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  528   ZStatus_t status;
//  529   uint16    ami;
//  530 
//  531   // initialize results
//  532   *entry = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  533   status = ZNwkUnknownDevice;
        MOV     ?V0,#-0x38
//  534 
//  535   // lookup address index
//  536   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV     A,R1
        JNZ     ??ZDSecMgrEntryLookupExt_0
//  537   {
//  538     status = ZDSecMgrEntryLookupAMI( ami, entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine60_0 & 0xFFFF
//  539   }
??CrossCallReturnLabel_86:
        LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
        MOV     A,R1
        MOV     ?V0,A
//  540 
//  541   return status;
??ZDSecMgrEntryLookupExt_0:
        MOV     R1,?V0
        LJMP    ?Subroutine7 & 0xFFFF
//  542 }
          CFI EndBlock cfiBlock83
//  543 
//  544 /******************************************************************************
//  545  * @fn          ZDSecMgrEntryLookupExtGetIndex
//  546  *
//  547  * @brief       Lookup entry index using specified EXT address.
//  548  *
//  549  * @param       extAddr - [in] EXT address
//  550  * @param       entryIndex - [out] valid index to the entry table
//  551  *
//  552  * @return      ZStatus_t
//  553  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  554 ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
ZDSecMgrEntryLookupExtGetIndex:
          CFI Block cfiBlock84 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExtGetIndex
        CODE
//  555 {
        FUNCALL ZDSecMgrEntryLookupExtGetIndex, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  556   uint16 ami;
//  557   uint16 index;
//  558 
//  559   // lookup address index
//  560   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV     A,R1
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_0
//  561   {
//  562     // verify data is available
//  563     if ( ZDSecMgrEntries != NULL )
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_125:
        JZ      ??ZDSecMgrEntryLookupExtGetIndex_0
//  564     {
//  565       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  566       {
//  567         if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupExtGetIndex_1:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x5
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x5
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     DPL,R4
        MOV     DPH,A
        LCALL   ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrEntryLookupExtGetIndex_2:
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_3
//  568         {
//  569           // return successful results
//  570           *entry = &ZDSecMgrEntries[index];
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine47 & 0xFFFF
//  571           *entryIndex = index;
??CrossCallReturnLabel_56:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine73_0 & 0xFFFF
//  572 
//  573           // break from loop
//  574           return ZSuccess;
//  575         }
//  576       }
??CrossCallReturnLabel_166:
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_68:
        SJMP    ??ZDSecMgrEntryLookupExtGetIndex_4
??ZDSecMgrEntryLookupExtGetIndex_3:
        INC     R0
        MOV     A,R0
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_5
        INC     R1
??ZDSecMgrEntryLookupExtGetIndex_5:
        LCALL   ?Subroutine36 & 0xFFFF
//  577     }
//  578   }
??CrossCallReturnLabel_74:
        JC      ??ZDSecMgrEntryLookupExtGetIndex_1
//  579 
//  580   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookupExtGetIndex_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookupExtGetIndex_4:
        LJMP    ?Subroutine7 & 0xFFFF
//  581 }
          CFI EndBlock cfiBlock84

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x5
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x5
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        RET
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87
//  582 
//  583 /******************************************************************************
//  584  * @fn          ZDSecMgrEntryLookupAMIGetIndex
//  585  *
//  586  * @brief       Lookup entry using specified address index
//  587  *
//  588  * @param       ami   - [in] Address Manager index
//  589  * @param       entryIndex - [out] valid index to the entry table
//  590  *
//  591  * @return      ZStatus_t
//  592  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  593 ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex )
ZDSecMgrEntryLookupAMIGetIndex:
          CFI Block cfiBlock88 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMIGetIndex
        CODE
//  594 {
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  595   uint16 index;
//  596 
//  597   // verify data is available
//  598   if ( ZDSecMgrEntries != NULL )
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_126:
        JZ      ??ZDSecMgrEntryLookupAMIGetIndex_0
//  599   {
//  600     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  601     {
//  602       if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupAMIGetIndex_1:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_19:
        JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrEntryLookupAMIGetIndex_2:
        JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_3
//  603       {
//  604         // return successful results
//  605         *entryIndex = index;
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine54_0 & 0xFFFF
//  606 
//  607         // break from loop
//  608         return ZSuccess;
//  609       }
//  610     }
??CrossCallReturnLabel_69:
        SJMP    ??ZDSecMgrEntryLookupAMIGetIndex_4
??ZDSecMgrEntryLookupAMIGetIndex_3:
        INC     R0
        MOV     A,R0
        JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_5
        INC     R1
??ZDSecMgrEntryLookupAMIGetIndex_5:
        LCALL   ?Subroutine36 & 0xFFFF
//  611   }
??CrossCallReturnLabel_75:
        JC      ??ZDSecMgrEntryLookupAMIGetIndex_1
//  612 
//  613   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookupAMIGetIndex_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookupAMIGetIndex_4:
        LJMP    ??Subroutine66_0 & 0xFFFF
//  614 }
          CFI EndBlock cfiBlock88

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond89 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMI
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R6
        MOV     B,#0x5
        MUL     AB
        MOV     R6,A
        MOV     ?V0,B
        MOV     B,#0x5
        MOV     A,R7
        MUL     AB
        ADD     A,?V0
        MOV     R7,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     DPL,?V0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R2
        RET
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91
//  615 
//  616 /******************************************************************************
//  617  * @fn          ZDSecMgrEntryFree
//  618  *
//  619  * @brief       Free entry.
//  620  *
//  621  * @param       entry - [in] valid entry
//  622  *
//  623  * @return      ZStatus_t
//  624  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  625 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
ZDSecMgrEntryFree:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
        CODE
//  626 {
        FUNCALL ZDSecMgrEntryFree, ZDSecMgrEntryLookupAMIGetIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  627   APSME_LinkKeyData_t   *pApsLinkKey = NULL;
//  628 
//  629 #if defined ( NV_RESTORE )
//  630   ZStatus_t status;
//  631   uint16 entryIndex;
//  632 
//  633   status = ZDSecMgrEntryLookupAMIGetIndex( entry->ami, &entryIndex );
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMIGetIndex
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL   `??ZDSecMgrEntryLookupAMIGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupAMIGetIndex
        MOV     A,R1
        MOV     ?V2,A
//  634 #endif
//  635 
//  636   pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
//  637 
//  638   if (pApsLinkKey != NULL)
        MOV     A,R2
        ORL     A,?V5
        JZ      ??ZDSecMgrEntryFree_0
//  639   {
//  640     osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  641 
//  642     // Clear the APS Link key in NV
//  643     osal_nv_write( entry->keyNvId, 0,
//  644                         sizeof(APSME_LinkKeyData_t), pApsLinkKey);
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V6,#0x18
        MOV     ?V7,#0x0
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0
        MOV     DPH,R1
        LCALL   ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  645 
//  646     // set entry to invalid Key
//  647     entry->keyNvId = SEC_NO_KEY_NV_ID;
        MOV     DPL,?V0
        MOV     DPH,?V1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  648 
//  649     osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V4
        MOV     R3,?V5
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  650   }
//  651 
//  652   // marking the entry as INVALID_NODE_ADDR
//  653   entry->ami = INVALID_NODE_ADDR;
??ZDSecMgrEntryFree_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        LCALL   ?Subroutine46 & 0xFFFF
//  654 
//  655   // set to default value
//  656   entry->authenticateOption = ZDSecMgr_Not_Authenticated;
??CrossCallReturnLabel_52:
        CLR     A
        MOVX    @DPTR,A
//  657 
//  658 #if defined ( NV_RESTORE )
//  659   if ( status == ZSuccess )
        MOV     A,?V2
        JZ      $+5
        LJMP    ??ZDSecMgrEntryFree_1 & 0xFFFF
//  660   {
//  661     ZDSecMgrUpdateNV(entryIndex);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ??Subroutine64_0 & 0xFFFF
//  662   }
??CrossCallReturnLabel_127:
        JZ      ??ZDSecMgrEntryFree_2
        ; Setup parameters for call to function osal_nv_write
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_62:
        ADD     A,R0
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0,#0x5
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        LCALL   ??Subroutine76_0 & 0xFFFF
??CrossCallReturnLabel_174:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
??ZDSecMgrEntryFree_2:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        JNZ     ??ZDSecMgrEntryFree_1
        MOV     A,R6
        MOV     B,#0x5
        MUL     AB
        MOV     R6,A
        MOV     R0,B
        MOV     B,#0x5
        MOV     A,R7
        MUL     AB
        ADD     A,R0
        MOV     R7,A
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_15:
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrEntryFree_3
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDSecMgrEntryFree_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??ZDSecMgrEntryFree_4
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_128:
        JZ      ??ZDSecMgrEntryFree_5
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        SJMP    ??CrossCallReturnLabel_27
??ZDSecMgrEntryFree_4:
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_27:
        MOVX    @DPTR,A
??ZDSecMgrEntryFree_5:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  663 #endif
//  664 }
??ZDSecMgrEntryFree_1:
        MOV     A,#0x4
          CFI EndBlock cfiBlock92
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock93 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock93
//  665 
//  666 /******************************************************************************
//  667  * @fn          ZDSecMgrEntryNew
//  668  *
//  669  * @brief       Get a new entry.
//  670  *
//  671  * @param       entry - [out] valid entry
//  672  *
//  673  * @return      ZStatus_t
//  674  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  675 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
ZDSecMgrEntryNew:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI Function ZDSecMgrEntryNew
        CODE
//  676 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  677   uint16 index;
//  678 
//  679   // initialize results
//  680   *entry = NULL;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine12 & 0xFFFF
//  681 
//  682   // verify data is available
//  683   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_79:
        JZ      ??ZDSecMgrEntryNew_0
//  684   {
//  685     // find available entry
//  686     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  687     {
//  688       if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
??ZDSecMgrEntryNew_1:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x5
        MUL     AB
        MOV     R4,A
        MOV     R6,B
        MOV     B,#0x5
        MOV     A,R5
        MUL     AB
        ADD     A,R6
        MOV     R5,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     DPL,R6
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrEntryNew_2
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDSecMgrEntryNew_2:
        JNZ     ??ZDSecMgrEntryNew_3
//  689       {
//  690         // return successful result
//  691         *entry = &ZDSecMgrEntries[index];
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R4,B
        MOV     B,#0x5
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  692 
//  693         // Set the authentication option to default
//  694         ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_25:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  695 
//  696         // break from loop
//  697         return ZSuccess;
        MOV     R1,A
        SJMP    ??ZDSecMgrEntryNew_4
//  698       }
//  699     }
??ZDSecMgrEntryNew_3:
        INC     R0
        MOV     A,R0
        JNZ     ??ZDSecMgrEntryNew_5
        INC     R1
??ZDSecMgrEntryNew_5:
        LCALL   ?Subroutine36 & 0xFFFF
//  700   }
??CrossCallReturnLabel_76:
        JC      ??ZDSecMgrEntryNew_1
//  701 
//  702   return ZNwkUnknownDevice;
??ZDSecMgrEntryNew_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryNew_4:
        LJMP    ??Subroutine66_0 & 0xFFFF
//  703 }
          CFI EndBlock cfiBlock94
//  704 
//  705 /******************************************************************************
//  706  * @fn          ZDSecMgrAppKeyGet
//  707  *
//  708  * @brief       get an APP key - option APP(MASTER or LINK) key
//  709  *
//  710  * @param       initNwkAddr - [in] NWK address of initiator device
//  711  * @param       initExtAddr - [in] EXT address of initiator device
//  712  * @param       partNwkAddr - [in] NWK address of partner device
//  713  * @param       partExtAddr - [in] EXT address of partner device
//  714  * @param       key         - [out] APP(MASTER or LINK) key
//  715  * @param       keyType     - [out] APP(MASTER or LINK) key type
//  716  *
//  717  * @return      ZStatus_t
//  718  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  719 uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
ZDSecMgrAppKeyType:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
        REQUIRE __INIT_XDATA_I
//  720                                                  // to KEY_TYPE_APP_LINK since
//  721                                                  // only specific requirement
//  722                                                  // right now comes from SE profile
//  723 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  724 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
ZDSecMgrAppKeyGet:
          CFI Block cfiBlock95 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyGet
        CODE
//  725                              uint8*  initExtAddr,
//  726                              uint16  partNwkAddr,
//  727                              uint8*  partExtAddr,
//  728                              uint8** key,
//  729                              uint8*  keyType )
//  730 {
        FUNCALL ZDSecMgrAppKeyGet, SSP_GetTrueRand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  731   // Intentionally unreferenced parameters
//  732   (void)initNwkAddr;
//  733   (void)initExtAddr;
//  734   (void)partNwkAddr;
//  735   (void)partExtAddr;
//  736 
//  737   //---------------------------------------------------------------------------
//  738   // note:
//  739   // should use a robust mechanism to generate keys, for example
//  740   // combine EXT addresses and call a hash function
//  741   //---------------------------------------------------------------------------
//  742   SSP_GetTrueRand( SEC_KEY_LEN, *key );
        ; Setup parameters for call to function SSP_GetTrueRand
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_147:
        LCALL   ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV     R1,#0x10
        LCALL   `??SSP_GetTrueRand::?relay`; Banked call to: SSP_GetTrueRand
//  743 
//  744   *keyType = ZDSecMgrAppKeyType;
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_148:
        POP     A
          CFI EndBlock cfiBlock95
        REQUIRE ?Subroutine10
        ; // Fall through to label ?Subroutine10
//  745 
//  746   return ZSuccess;
//  747 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        MOV     R1,#0x0
        LJMP    ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock96
//  748 
//  749 /******************************************************************************
//  750  * @fn          ZDSecMgrAppKeyReq
//  751  *
//  752  * @brief       Process request for APP key between two devices.
//  753  *
//  754  * @param       device - [in] ZDO_RequestKeyInd_t, request info
//  755  *
//  756  * @return      none
//  757  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  758 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
ZDSecMgrAppKeyReq:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyReq
        CODE
//  759 {
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, ZDSecMgrAppKeyGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 39
        MOV     A,#-0x27
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  760   APSME_TransportKeyReq_t req;
//  761   uint8                   initExtAddr[Z_EXTADDR_LEN];
//  762   uint16                  partNwkAddr;
//  763   uint8                   key[SEC_KEY_LEN];
//  764 
//  765 
//  766   // validate initiator and partner
//  767   if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
//  768        ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R6
        ADD     A,#0x5
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP102_8
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
//  769   {
//  770     // point the key to some memory
//  771     req.key = key;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP100_8
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
//  772 
//  773     // get an APP key - option APP (MASTER or LINK) key
//  774     if ( ZDSecMgrAppKeyGet( ind->srcAddr,
//  775                             initExtAddr,
//  776                             partNwkAddr,
//  777                             ind->partExtAddr,
//  778                             &req.key,
//  779                             &req.keyType ) == ZSuccess )
??CrossCallReturnLabel_107:
        ; Setup parameters for call to function ZDSecMgrAppKeyGet
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0,DPL
        MOV     ?V1,DPH
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0,DPL
        MOV     ?V1,DPH
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 53)
        MOV     A,R6
        ADD     A,#0x5
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 55)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 57)
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP102_8
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_100:
        LCALL   `??ZDSecMgrAppKeyGet::?relay`; Banked call to: ZDSecMgrAppKeyGet
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV     A,R1
        JNZ     ??ZDSecMgrAppKeyReq_0
//  780     {
//  781       // always secure
//  782       req.nwkSecure = TRUE;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  783       req.apsSecure = TRUE;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  784       req.tunnel    = NULL;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ??Subroutine57_0 & 0xFFFF
//  785 
//  786       // send key to initiator device
//  787       req.dstAddr   = ind->srcAddr;
??CrossCallReturnLabel_84:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
//  788       req.extAddr   = ind->partExtAddr;
??CrossCallReturnLabel_108:
        MOV     A,R6
        ADD     A,#0x5
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
//  789       req.initiator = TRUE;
??CrossCallReturnLabel_109:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  790       APSME_TransportKeyReq( &req );
        ; Setup parameters for call to function APSME_TransportKeyReq
        INC     A
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
//  791 
//  792       // send key to partner device
//  793       req.dstAddr   = partNwkAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
//  794       req.extAddr   = initExtAddr;
??CrossCallReturnLabel_110:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP100_8
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
//  795       req.initiator = FALSE;
??CrossCallReturnLabel_111:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  796 
//  797       APSME_TransportKeyReq( &req );
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
//  798 
//  799       // clear copy of key in RAM
//  800       osal_memset( key, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  801 
//  802     }
//  803   }
//  804 }
??ZDSecMgrAppKeyReq_0:
        MOV     A,#0x27
        LJMP    ??Subroutine68_0 & 0xFFFF
          CFI EndBlock cfiBlock97
//  805 
//  806 /******************************************************************************
//  807  * @fn          ZDSecMgrSendNwkKey
//  808  *
//  809  * @brief       Send NWK key to device joining network.
//  810  *
//  811  * @param       device - [in] ZDSecMgrDevice_t, device info
//  812  *
//  813  * @return      ZStatus_t
//  814  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  815 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
ZDSecMgrSendNwkKey:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI Function ZDSecMgrSendNwkKey
        CODE
//  816 {
        FUNCALL ZDSecMgrSendNwkKey, NLME_ReadNwkKeyInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  817   ZStatus_t status;
//  818   APSME_TransportKeyReq_t req;
//  819   APSDE_FrameTunnel_t tunnel;
//  820   nwkKeyDesc tmpKey;
//  821 
//  822   req.dstAddr   = device->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine72_0 & 0xFFFF
??CrossCallReturnLabel_155:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine13 & 0xFFFF
//  823   req.extAddr   = device->extAddr;
??CrossCallReturnLabel_82:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
//  824 
//  825   req.keyType   = KEY_TYPE_NWK;
??CrossCallReturnLabel_13:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  826 
//  827   // get the Active Key into a local variable
//  828   if ( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
//  829                            ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
        ; Setup parameters for call to function NLME_ReadNwkKeyInfo
        MOV     ?V0,#0x3a
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_ReadNwkKeyInfo::?relay`; Banked call to: NLME_ReadNwkKeyInfo
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,R1
        JZ      ??ZDSecMgrSendNwkKey_0
//  830   {
//  831     // set key data to all 0s if NV read fails
//  832     osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  833   }
//  834 
//  835   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
//  836   {
//  837     // set values
//  838     req.keySeqNum = tmpKey.keySeqNum;
//  839     req.key       = tmpKey.key;
//  840 
//  841     //devtag.pro.security.todo - make sure that if there is no link key the NWK
//  842     //key isn't used to secure the frame at the APS layer -- since the receiving
//  843     //device may not have a NWK key yet
//  844     req.apsSecure = TRUE;
//  845 
//  846     // check if using secure hop to parent
//  847     if ( device->parentAddr == NLME_GetShortAddr() )
//  848     {
//  849       req.nwkSecure = FALSE;
//  850       req.tunnel    = NULL;
//  851     }
//  852     else
//  853     {
//  854       req.nwkSecure   = TRUE;
//  855       req.tunnel      = &tunnel;
//  856       req.tunnel->tna = device->parentAddr;
//  857       req.tunnel->dea = device->extAddr;
//  858     }
//  859   }
//  860   else
//  861   {
//  862     // default values
//  863     //devtag.0604.verify
//  864     req.nwkSecure = TRUE;
??ZDSecMgrSendNwkKey_0:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  865     req.apsSecure = FALSE;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  866     req.tunnel    = NULL;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  867 
//  868     if ( device->parentAddr != NLME_GetShortAddr() )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDSecMgrSendNwkKey_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrSendNwkKey_1:
        JZ      ??CrossCallReturnLabel_121
//  869     {
//  870       req.dstAddr = device->parentAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine23 & 0xFFFF
//  871     }
//  872 
//  873     // send the real key
//  874     if ( zgPreConfigKeys == FALSE )
??CrossCallReturnLabel_121:
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrSendNwkKey_2
//  875     {
//  876       req.keySeqNum = tmpKey.keySeqNum;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  877       req.key       = tmpKey.key;
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
//  878 
//  879       // check if using secure hop to to parent
//  880       if ( device->parentAddr == NLME_GetShortAddr() )
??CrossCallReturnLabel_112:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDSecMgrSendNwkKey_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrSendNwkKey_3:
        JNZ     ??ZDSecMgrSendNwkKey_4
//  881       {
//  882         req.nwkSecure = FALSE;
        MOV     A,#0xa
        SJMP    ??ZDSecMgrSendNwkKey_5
//  883       }
//  884     }
//  885     else
//  886     {
//  887       // this is to send the all zero key when the NWK key has been preconfigured
//  888       req.key       = NULL;
??ZDSecMgrSendNwkKey_2:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  889       req.keySeqNum = 0;
        MOV     A,#0x3
??ZDSecMgrSendNwkKey_5:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  890     }
//  891   }
//  892 
//  893   status = APSME_TransportKeyReq( &req );
??ZDSecMgrSendNwkKey_4:
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
        MOV     A,R1
        MOV     R6,A
//  894 
//  895   // clear copy of key in RAM before return
//  896   osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  897 
//  898   return status;
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x1e
        LJMP    ??Subroutine68_0 & 0xFFFF
//  899 }
          CFI EndBlock cfiBlock98

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function ZDSecMgrAddrClear
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function ZDSecMgrSendNwkKey
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function ZDSecMgrDeviceJoin
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker102 Using cfiCommon1
          CFI (cfiPicker102) NoFunction
          CFI (cfiPicker102) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryRelease
        ; Setup parameters for indirect call
        MOV     A,#0x2
        RET
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond103 Using cfiCommon0
          CFI Function ZDSecMgrSendNwkKey
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function ZDSecMgrDeviceRemove
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker105 Using cfiCommon1
          CFI (cfiPicker105) NoFunction
          CFI (cfiPicker105) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiPicker105
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond106 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyReq
          CFI Conditional ??CrossCallReturnLabel_84
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function ZDSecMgrSendNwkKey
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function ZDSecMgrDeviceRemove
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker110 Using cfiCommon1
          CFI (cfiPicker110) NoFunction
          CFI (cfiPicker110) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_164:
        RET
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond111 Using cfiCommon0
          CFI Function ZDSecMgrSendNwkKey
          CFI Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function ZDSecMgrDeviceRemove
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_83
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-4
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function ZDSecMgrAppKeyReq
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_84
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-4
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_85
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-4
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_0
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-4
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_1
          CFI (cfiCond116) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond116) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond116) CFA_SP SP+-9
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiPicker117 Using cfiCommon1
          CFI (cfiPicker117) NoFunction
          CFI (cfiPicker117) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiPicker117
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiCond118 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function ZDSecMgrExtAddrStore
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_10
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-4
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_11
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-4
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function ZDSecMgrAppKeyReq
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_22
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-4
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function ZDSecMgrDeviceJoin
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_23
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-4
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_24
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function ZDSecMgrSendNwkKey
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_121
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-4
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_122
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-4
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_123
          CFI (cfiCond126) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond126) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond126) CFA_SP SP+-9
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function ZDSecMgrDeviceRemove
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_158
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-4
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function ZDSecMgrDeviceJoin
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_159
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function APSME_LinkKeySet
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_157
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function ZDSecMgrAddrClear
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_154
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-4
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function ZDSecMgrSendNwkKey
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_155
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function ZDSecMgrAPSRemove
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_156
          CFI (cfiCond132) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond132) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond132) CFA_SP SP+-9
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function ZDSecMgrSendNwkKey
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_82
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function ZDSecMgrDeviceRemove
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_83
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-4
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function ZDSecMgrAppKeyReq
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_84
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-4
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_85
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-4
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_0
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-4
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_1
          CFI (cfiCond138) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond138) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond138) CFA_SP SP+-9
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiPicker139 Using cfiCommon1
          CFI (cfiPicker139) NoFunction
          CFI (cfiPicker139) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiPicker139
//  900 
//  901 /******************************************************************************
//  902  * @fn          ZDSecMgrDeviceRemoveByExtAddr
//  903  *
//  904  * @brief       Remove device entry by its ext address.
//  905  *
//  906  * @param       pAddr - pointer to the extended address
//  907  *
//  908  * @return      ZStatus_t
//  909  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  910 ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
ZDSecMgrDeviceRemoveByExtAddr:
          CFI Block cfiBlock140 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemoveByExtAddr
        CODE
//  911 {
        FUNCALL ZDSecMgrDeviceRemoveByExtAddr, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemoveByExtAddr, ZDSecMgrEntryFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  912   ZDSecMgrEntry_t *pEntry;
//  913   uint8           retValue;
//  914 
//  915   retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
        MOV     A,R1
        MOV     R6,A
//  916 
//  917   if( retValue == ZSuccess )
        JNZ     ??ZDSecMgrDeviceRemoveByExtAddr_0
//  918   {
//  919     // remove device from entry data
//  920     ZDSecMgrEntryFree( pEntry );
        ; Setup parameters for call to function ZDSecMgrEntryFree
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine60_0 & 0xFFFF
//  921   }
??CrossCallReturnLabel_91:
        LCALL   `??ZDSecMgrEntryFree::?relay`; Banked call to: ZDSecMgrEntryFree
//  922 
//  923   return retValue;
??ZDSecMgrDeviceRemoveByExtAddr_0:
        MOV     A,R6
        MOV     R1,A
          CFI EndBlock cfiBlock140
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7
//  924 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock141 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        LJMP    ??Subroutine65_0 & 0xFFFF
          CFI EndBlock cfiBlock141
//  925 
//  926 /******************************************************************************
//  927  * @fn          ZDSecMgrDeviceRemove
//  928  *
//  929  * @brief       Remove device from network.
//  930  *
//  931  * @param       device - [in] ZDSecMgrDevice_t, device info
//  932  *
//  933  * @return      none
//  934  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  935 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceRemove:
          CFI Block cfiBlock142 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemove
        CODE
//  936 {
        FUNCALL ZDSecMgrDeviceRemove, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, APSME_RemoveDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  937   APSME_RemoveDeviceReq_t remDevReq;
//  938   NLME_LeaveReq_t         leaveReq;
//  939   associated_devices_t*   assoc;
//  940 
//  941   // check if parent, remove the device
//  942   if ( device->parentAddr == NLME_GetShortAddr() )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDSecMgrDeviceRemove_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrDeviceRemove_0:
        JZ      $+5
        LJMP    ??ZDSecMgrDeviceRemove_1 & 0xFFFF
//  943   {
//  944     // this is the parent of the device
//  945     leaveReq.extAddr        = device->extAddr;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_92:
        LCALL   ?Subroutine20 & 0xFFFF
//  946     leaveReq.removeChildren = FALSE;
??CrossCallReturnLabel_6:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  947     leaveReq.rejoin         = FALSE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  948 
//  949     // find child association
//  950     assoc = AssocGetWithExt( device->extAddr );
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_93:
        LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
//  951 
//  952     if ( ( assoc != NULL                            ) &&
//  953          ( assoc->nodeRelation >= CHILD_RFD         ) &&
//  954          ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDSecMgrDeviceRemove_2
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDSecMgrDeviceRemove_2
        CLR     C
        SUBB    A,#0x5
        JNC     ??ZDSecMgrDeviceRemove_2
//  955     {
//  956       // check if associated device is authenticated
//  957       if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        MOV     A,#0x4
        JC      ??ZDSecMgrDeviceRemove_3
//  958       {
//  959         leaveReq.silent = FALSE;
//  960       }
//  961       else
//  962       {
//  963         leaveReq.silent = TRUE;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrDeviceRemove_4
        ; Setup parameters for call to function NLME_LeaveReq
//  964       }
//  965 
//  966       NLME_LeaveReq( &leaveReq );
//  967     }
//  968     else if ( device->nwkAddr == NLME_GetShortAddr() )
??ZDSecMgrDeviceRemove_2:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDSecMgrDeviceRemove_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrDeviceRemove_5:
        JNZ     ??ZDSecMgrDeviceRemove_6
//  969     {
//  970       // this is when ZC wants that ZR removes itself from the network
//  971       leaveReq.extAddr = NULL;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  972       leaveReq.silent = FALSE;
        MOV     A,#0x4
??ZDSecMgrDeviceRemove_3:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
//  973 
//  974       NLME_LeaveReq( &leaveReq );
//  975     }
//  976   }
??ZDSecMgrDeviceRemove_4:
        LCALL   ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_140:
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        SJMP    ??ZDSecMgrDeviceRemove_6
//  977   else
//  978   {
//  979     // this is not the parent of the device
//  980     remDevReq.parentAddr   = device->parentAddr;
??ZDSecMgrDeviceRemove_1:
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_158:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  981     remDevReq.childExtAddr = device->extAddr;
??CrossCallReturnLabel_83:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
//  982 
//  983 #if defined ( APP_TP2_TEST_MODE )
//  984     if ( guTxApsSecON == TRUE )
//  985     {
//  986       remDevReq.apsSecure = TRUE;
//  987     }
//  988     else
//  989     {
//  990       remDevReq.apsSecure = FALSE;
//  991     }
//  992 
//  993     APSME_RemoveDeviceReq( &remDevReq );
//  994 
//  995 #else
//  996     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
//  997     {
//  998       // For ZG_GLOBAL_LINK_KEY the message has to be sent twice, one
//  999       // APS un-encrypted and one APS encrypted, to make sure that it can interoperate
// 1000       // with legacy Coordinator devices which can only handle one or the other.
// 1001       if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
// 1002       {
// 1003         remDevReq.apsSecure = FALSE;
// 1004 
// 1005         APSME_RemoveDeviceReq( &remDevReq );
// 1006       }
// 1007 
// 1008       remDevReq.apsSecure = TRUE;
// 1009 
// 1010       APSME_RemoveDeviceReq( &remDevReq );
// 1011     }
// 1012     else
// 1013     {
// 1014       remDevReq.apsSecure = FALSE;
??CrossCallReturnLabel_113:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1015 
// 1016       APSME_RemoveDeviceReq( &remDevReq );
        ; Setup parameters for call to function APSME_RemoveDeviceReq
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
// 1017     }
// 1018 #endif
// 1019   }
// 1020 }
??ZDSecMgrDeviceRemove_6:
        MOV     A,#0xa
        LJMP    ??Subroutine68_0 & 0xFFFF
          CFI EndBlock cfiBlock142
// 1021 
// 1022 /******************************************************************************
// 1023  * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
// 1024  *
// 1025  * @brief       Decide whether device is allowed.
// 1026  *
// 1027  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1028  *
// 1029  * @return      ZStatus_t
// 1030  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1031 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidateRM:
          CFI Block cfiBlock143 Using cfiCommon0
          CFI Function ZDSecMgrDeviceValidateRM
        CODE
// 1032 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1033   ZStatus_t status;
// 1034 
// 1035   status = ZSuccess;
        MOV     R1,#0x0
// 1036 
// 1037   (void)device;  // Intentionally unreferenced parameter
// 1038 
// 1039   // For test purpose, turning off the zgSecurePermitJoin flag will force
// 1040   // the trust center to reject any newly joining devices by sending
// 1041   // Remove-device to the parents.
// 1042   if ( zgSecurePermitJoin == FALSE )
        MOV     DPTR,#zgSecurePermitJoin
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceValidateRM_0
// 1043   {
// 1044     status = ZNwkUnknownDevice;
        MOV     R1,#-0x38
// 1045   }
// 1046 
// 1047 
// 1048 
// 1049 #if 0  // Taken out because the following functionality is only used for test
// 1050        // purpose. A more efficient (above) way is used. It can be put
// 1051        // back in if customers request for a white/black list feature.
// 1052        // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
// 1053 
// 1054   // The following code processes the device black list (stored device list)
// 1055   // If the joining device is not part of the forbidden device list
// 1056   // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
// 1057   // will send Remove-device and ban the device from joining.
// 1058 
// 1059   uint8     index;
// 1060   uint8*    restricted;
// 1061 
// 1062   // Look through the stored device list - used for restricted devices
// 1063   for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
// 1064   {
// 1065     restricted = ZDSecMgrStoredDeviceList[index];
// 1066 
// 1067     if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
// 1068     {
// 1069       // return as unknown device in regards to validation
// 1070       status = ZNwkUnknownDevice;
// 1071 
// 1072       // break from loop
// 1073       index = ZDSECMGR_STORED_DEVICES;
// 1074     }
// 1075   }
// 1076 
// 1077 #endif
// 1078 
// 1079   return status;
??ZDSecMgrDeviceValidateRM_0:
        LJMP    ??Subroutine62_0 & 0xFFFF
// 1080 }
          CFI EndBlock cfiBlock143
// 1081 
// 1082 /******************************************************************************
// 1083  * @fn          ZDSecMgrDeviceValidate
// 1084  *
// 1085  * @brief       Decide whether device is allowed.
// 1086  *
// 1087  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1088  *
// 1089  * @return      ZStatus_t
// 1090  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1091 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidate:
          CFI Block cfiBlock144 Using cfiCommon0
          CFI Function ZDSecMgrDeviceValidate
        CODE
// 1092 {
        FUNCALL ZDSecMgrDeviceValidate, ZDSecMgrDeviceValidateRM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1093   ZStatus_t status;
// 1094 
// 1095   if ( ZDSecMgrPermitJoiningEnabled == TRUE )
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceValidate_0
// 1096   {
// 1097     status = ZDSecMgrDeviceValidateRM( device );
        ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
        LCALL   `??ZDSecMgrDeviceValidateRM::?relay`; Banked call to: ZDSecMgrDeviceValidateRM
        MOV     A,R1
        MOV     R1,A
        SJMP    ??ZDSecMgrDeviceValidate_1
// 1098   }
// 1099   else
// 1100   {
// 1101     status = ZNwkUnknownDevice;
??ZDSecMgrDeviceValidate_0:
        MOV     R1,#-0x38
// 1102   }
// 1103 
// 1104   return status;
??ZDSecMgrDeviceValidate_1:
        LJMP    ??Subroutine62_0 & 0xFFFF
// 1105 }
          CFI EndBlock cfiBlock144
// 1106 
// 1107 /******************************************************************************
// 1108  * @fn          ZDSecMgrDeviceJoin
// 1109  *
// 1110  * @brief       Try to join this device.
// 1111  *
// 1112  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1113  *
// 1114  * @return      ZStatus_t
// 1115  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1116 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoin:
          CFI Block cfiBlock145 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoin
        CODE
// 1117 {
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceValidate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1118   ZStatus_t status = ZSuccess;
        MOV     ?V0,#0x0
// 1119   uint16    ami;
// 1120 
// 1121   // attempt to validate device that joined/rejoined without security
// 1122   if ( device->secure == FALSE )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceJoin_0
// 1123   {
// 1124     status = ZDSecMgrDeviceValidate( device );
        ; Setup parameters for call to function ZDSecMgrDeviceValidate
        LCALL   `??ZDSecMgrDeviceValidate::?relay`; Banked call to: ZDSecMgrDeviceValidate
        MOV     A,R1
        MOV     ?V0,A
// 1125   }
// 1126 
// 1127 #if 0  //chaokw panid
// 1128 #if NODE_AUTH   //chaokw
// 1129   if ( status == ZSuccess )
// 1130   {
// 1131     if (!Authlist_verify_device(device->nwkAddr, device->extAddr, 0, 0))
// 1132       status = ZNwkUnknownDevice;
// 1133   }
// 1134 #endif
// 1135 #endif
// 1136 
// 1137   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrDeviceJoin_1
// 1138   {
// 1139     // Add the device to the address manager
// 1140     ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
??ZDSecMgrDeviceJoin_0:
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
// 1141 
// 1142     // Only send the key to devices that have not been authenticated
// 1143     if ( ( device->devStatus & DEV_SEC_INIT_STATUS ) &&
// 1144          ( device->secure == FALSE ) )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JNC     ??ZDSecMgrDeviceJoin_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceJoin_1
// 1145     {
// 1146       //send the nwk key data to the joining device
// 1147       status = ZDSecMgrSendNwkKey( device );
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrSendNwkKey::?relay`; Banked call to: ZDSecMgrSendNwkKey
        MOV     A,R1
        MOV     ?V0,A
// 1148     }
// 1149 
// 1150     if ( status != ZSuccess )
        JZ      ??ZDSecMgrDeviceJoin_2
// 1151     {
// 1152       ZDSecMgrAddrClear( device->extAddr );
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine59_0 & 0xFFFF
// 1153     }
// 1154   }
??CrossCallReturnLabel_101:
        LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
        SJMP    ??ZDSecMgrDeviceJoin_3
// 1155 
// 1156   if ( status != ZSuccess )
??ZDSecMgrDeviceJoin_1:
        MOV     A,?V0
        JZ      ??ZDSecMgrDeviceJoin_2
// 1157   {
// 1158     // not allowed or transport key failed, remove the device
// 1159     ZDSecMgrDeviceRemove( device );
??ZDSecMgrDeviceJoin_3:
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
        SJMP    ??ZDSecMgrDeviceJoin_4
// 1160   }
// 1161   else
// 1162   {
// 1163     // Pass the Trust Center Device Indication to higher layer if callback registered
// 1164     if (zdoCBFunc[ZDO_TC_DEVICE_CBID] != NULL )
??ZDSecMgrDeviceJoin_2:
        MOV     DPTR,#zdoCBFunc + 16
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_129:
        JZ      ??ZDSecMgrDeviceJoin_4
// 1165     {
// 1166       ZDO_TC_Device_t dev;
// 1167 
// 1168       dev.nwkAddr = device->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
// 1169       osal_memcpy( dev.extAddr, device->extAddr, Z_EXTADDR_LEN );
??CrossCallReturnLabel_114:
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
// 1170       dev.parentAddr = device->parentAddr;
        LCALL   ?Subroutine31 & 0xFFFF
// 1171 
// 1172       zdoCBFunc[ZDO_TC_DEVICE_CBID]( (void*)&dev );
// 1173     }
// 1174   }
??CrossCallReturnLabel_159:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?XSTACK_DISP101_8
        MOV     DPTR,#zdoCBFunc + 16
        LCALL   ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_149:
        LCALL   ?CALL_IND
// 1175 
// 1176   return status;
??ZDSecMgrDeviceJoin_4:
        MOV     R1,?V0
        MOV     A,#0xe
          CFI EndBlock cfiBlock145
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
// 1177 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock146 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 29)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Valid
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock146

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond147 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyReq
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function ZDSecMgrDeviceJoin
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker150 Using cfiCommon1
          CFI (cfiPicker150) NoFunction
          CFI (cfiPicker150) Picker
        LCALL   ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_162:
        MOV     A,#0x2
        RET
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiPicker150
// 1178 
// 1179 /******************************************************************************
// 1180  * @fn          ZDSecMgrDeviceJoinDirect
// 1181  *
// 1182  * @brief       Try to join this device as a direct child.
// 1183  *
// 1184  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1185  *
// 1186  * @return      ZStatus_t
// 1187  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1188 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoinDirect:
          CFI Block cfiBlock151 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoinDirect
        CODE
// 1189 {
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1190   ZStatus_t status;
// 1191 
// 1192   status = ZDSecMgrDeviceJoin( device );
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        LCALL   `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
        MOV     A,R1
        MOV     ?V0,A
// 1193 
// 1194   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrDeviceJoinDirect_0
// 1195   {
// 1196     // set association status to authenticated
// 1197     ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        ; Setup parameters for call to function AssocGetWithShort
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine60_0 & 0xFFFF
// 1198   }
??CrossCallReturnLabel_95:
        LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
        LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
// 1199 
// 1200   return status;
??ZDSecMgrDeviceJoinDirect_0:
        MOV     R1,?V0
        LJMP    ??Subroutine66_0 & 0xFFFF
// 1201 }
          CFI EndBlock cfiBlock151
// 1202 
// 1203 /******************************************************************************
// 1204  * @fn          ZDSecMgrDeviceJoinFwd
// 1205  *
// 1206  * @brief       Forward join to Trust Center.
// 1207  *
// 1208  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1209  *
// 1210  * @return      ZStatus_t
// 1211  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1212 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoinFwd:
          CFI Block cfiBlock152 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoinFwd
        CODE
// 1213 {
        FUNCALL ZDSecMgrDeviceJoinFwd, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinFwd, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinFwd, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 1214   ZStatus_t               status;
// 1215   APSME_UpdateDeviceReq_t req;
// 1216 
// 1217   // forward any joining device to the Trust Center -- the Trust Center will
// 1218   // decide if the device is allowed to join
// 1219   status = ZSuccess;
// 1220 
// 1221   // forward authorization to the Trust Center
// 1222   req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine45 & 0xFFFF
// 1223   req.devAddr    = device->nwkAddr;
??CrossCallReturnLabel_49:
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
// 1224   req.devExtAddr = device->extAddr;
??CrossCallReturnLabel_0:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
// 1225 
// 1226   // set security status, option for router to reject if policy set
// 1227   if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
??CrossCallReturnLabel_115:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??ZDSecMgrDeviceJoinFwd_0
// 1228   {
// 1229     if ( device->devStatus & DEV_REJOIN_STATUS )
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_1
// 1230     {
// 1231       if ( device->secure == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_2
// 1232       {
// 1233         req.status = APSME_UD_HIGH_SECURED_REJOIN;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 1234       }
// 1235       else
// 1236       {
// 1237         req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
??ZDSecMgrDeviceJoinFwd_2:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 1238       }
// 1239     }
// 1240     else
// 1241     {
// 1242       req.status = APSME_UD_HIGH_UNSECURED_JOIN;
??ZDSecMgrDeviceJoinFwd_1:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 1243     }
// 1244   }
// 1245   else
// 1246   {
// 1247     if ( device->devStatus & DEV_REJOIN_STATUS )
??ZDSecMgrDeviceJoinFwd_0:
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_4
// 1248     {
// 1249       if ( device->secure == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_5
// 1250       {
// 1251         req.status = APSME_UD_STANDARD_SECURED_REJOIN;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 1252       }
// 1253       else
// 1254       {
// 1255         req.status = APSME_UD_STANDARD_TRUST_CENTER_REJOIN;
??ZDSecMgrDeviceJoinFwd_5:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 1256       }
// 1257     }
// 1258     else
// 1259     {
// 1260       req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
??ZDSecMgrDeviceJoinFwd_4:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
// 1261     }
// 1262   }
??ZDSecMgrDeviceJoinFwd_3:
        LCALL   ?Subroutine45 & 0xFFFF
// 1263 
// 1264   // set association status to authenticated
// 1265   ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
??CrossCallReturnLabel_50:
        LCALL   ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
// 1266 
// 1267 #if defined ( APP_TP2_TEST_MODE )
// 1268   if ( guTxApsSecON == TRUE )
// 1269   {
// 1270     req.apsSecure = TRUE;
// 1271   }
// 1272   else
// 1273   {
// 1274     req.apsSecure = FALSE;
// 1275   }
// 1276 
// 1277   // send and APSME_UPDATE_DEVICE request to the trust center
// 1278   status = APSME_UpdateDeviceReq( &req );
// 1279 
// 1280 #else
// 1281   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1282   {
// 1283     // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
// 1284     // un-encrypted and one APS encrypted, to make sure that it can interoperate
// 1285     // with legacy Coordinator devices which can only handle one or the other.
// 1286     if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
// 1287     {
// 1288       req.apsSecure = FALSE;
// 1289 
// 1290       // send and APSME_UPDATE_DEVICE request to the trust center
// 1291       status = APSME_UpdateDeviceReq( &req );
// 1292     }
// 1293 
// 1294     // send the message APS encrypted
// 1295     req.apsSecure = TRUE;
// 1296 
// 1297     // send and APSME_UPDATE_DEVICE request to the trust center
// 1298     status = APSME_UpdateDeviceReq( &req );
// 1299   }
// 1300   else
// 1301   {
// 1302     req.apsSecure = FALSE;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine67_0 & 0xFFFF
// 1303 
// 1304     // send and APSME_UPDATE_DEVICE request to the trust center
// 1305     status = APSME_UpdateDeviceReq( &req );
// 1306   }
// 1307 #endif
// 1308 
// 1309   return status;
??CrossCallReturnLabel_141:
        LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
        LJMP    ?Subroutine3 & 0xFFFF
// 1310 }
          CFI EndBlock cfiBlock152

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond153 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_0
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_1
          CFI (cfiCond157) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond157) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond157) CFA_SP SP+-9
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiPicker158 Using cfiCommon1
          CFI (cfiPicker158) NoFunction
          CFI (cfiPicker158) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function AssocGetWithShort
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiPicker158

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond159 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_104
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function APSME_LinkKeySet
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker162 Using cfiCommon1
          CFI (cfiPicker162) NoFunction
          CFI (cfiPicker162) Picker
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_152:
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiPicker162
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiCond163 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyReq
          CFI Conditional ??CrossCallReturnLabel_99
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function ZDSecMgrAppKeyReq
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function ZDSecMgrDeviceJoin
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function APSME_KeyFwdToChild
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function APSME_LinkKeySet
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function APSME_LinkKeySet
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-2
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker171 Using cfiCommon1
          CFI (cfiPicker171) NoFunction
          CFI (cfiPicker171) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiPicker171
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiCond172 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExt
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function ZDSecMgrEntryFree
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function ZDSecMgrEntryFree
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-2
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function ZDSecMgrAppKeyGet
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond176) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond176) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond176) CFA_SP SP+-7
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function ZDSecMgrDeviceRemoveByExtAddr
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function ZDSecMgrDeviceRemove
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function ZDSecMgrDeviceRemove
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function ZDSecMgrDeviceJoin
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function APSME_IsLinkKeyValid
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function ZDSecMgrAddLinkKey
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function ZDSecMgrAppKeyReq
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function ZDSecMgrAppKeyReq
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function ZDSecMgrDeviceJoin
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function APSME_KeyFwdToChild
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-2
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function APSME_LinkKeySet
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function APSME_LinkKeySet
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker193 Using cfiCommon1
          CFI (cfiPicker193) NoFunction
          CFI (cfiPicker193) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiPicker193

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond194 Using cfiCommon0
          CFI Function ZDSecMgrSendNwkKey
          CFI Conditional ??CrossCallReturnLabel_121
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond196) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond196) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond196) CFA_SP SP+-7
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        LCALL   ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_161:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyReq
          CFI Conditional ??CrossCallReturnLabel_107
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function ZDSecMgrAppKeyReq
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function ZDSecMgrAppKeyReq
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-2
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function ZDSecMgrAppKeyReq
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function ZDSecMgrAppKeyReq
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function ZDSecMgrSendNwkKey
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function ZDSecMgrDeviceRemove
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function ZDSecMgrDeviceJoin
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond209) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond209) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond209) CFA_SP SP+-7
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function APSME_LinkKeySet
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function ZDSecMgrAddLinkKey
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function ZDSecMgrSendNwkKey
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-2
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond214) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond214) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond214) CFA_SP SP+-7
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiPicker215 Using cfiCommon1
          CFI (cfiPicker215) NoFunction
          CFI (cfiPicker215) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiPicker215
// 1311 
// 1312 /******************************************************************************
// 1313  * @fn          ZDSecMgrDeviceNew
// 1314  *
// 1315  * @brief       Process a new device.
// 1316  *
// 1317  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1318  *
// 1319  * @return      ZStatus_t
// 1320  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1321 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
ZDSecMgrDeviceNew:
          CFI Block cfiBlock216 Using cfiCommon0
          CFI Function ZDSecMgrDeviceNew
        CODE
// 1322 {
        FUNCALL ZDSecMgrDeviceNew, ZDSecMgrDeviceJoinDirect
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1323   ZStatus_t status;
// 1324 
// 1325   if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1326       || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
// 1327   {
// 1328     // try to join this device
// 1329     status = ZDSecMgrDeviceJoinDirect( joiner );
// 1330   }
// 1331   else
// 1332   {
// 1333     status = ZDSecMgrDeviceJoinFwd( joiner );
// 1334   }
// 1335 
// 1336   return status;
        ; Setup parameters for call to function ZDSecMgrDeviceJoinDirect
        LCALL   `??ZDSecMgrDeviceJoinDirect::?relay`; Banked call to: ZDSecMgrDeviceJoinDirect
        SJMP    ??Subroutine62_0
// 1337 }
          CFI EndBlock cfiBlock216
// 1338 
// 1339 /******************************************************************************
// 1340  * @fn          ZDSecMgrAssocDeviceAuth
// 1341  *
// 1342  * @brief       Set associated device status to authenticated
// 1343  *
// 1344  * @param       assoc - [in, out] associated_devices_t
// 1345  *
// 1346  * @return      none
// 1347  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1348 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
ZDSecMgrAssocDeviceAuth:
          CFI Block cfiBlock217 Using cfiCommon0
          CFI Function ZDSecMgrAssocDeviceAuth
        CODE
// 1349 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1350   if ( assoc != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDSecMgrAssocDeviceAuth_0
// 1351   {
// 1352     assoc->devStatus |= DEV_SEC_AUTH_STATUS;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.3
        MOVX    @DPTR,A
// 1353   }
// 1354 }
??ZDSecMgrAssocDeviceAuth_0:
        SJMP    ??Subroutine62_0
          CFI EndBlock cfiBlock217
// 1355 
// 1356 /******************************************************************************
// 1357  * @fn          ZDSecMgrAuthNwkKey
// 1358  *
// 1359  * @brief       Handle next step in authentication process
// 1360  *
// 1361  * @param       none
// 1362  *
// 1363  * @return      none
// 1364  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1365 void ZDSecMgrAuthNwkKey()
ZDSecMgrAuthNwkKey:
          CFI Block cfiBlock218 Using cfiCommon0
          CFI Function ZDSecMgrAuthNwkKey
        CODE
// 1366 {
        FUNCALL ZDSecMgrAuthNwkKey, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1367   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrAuthNwkKey_0
// 1368   {
// 1369     // inform ZDO that device has been authenticated
// 1370     osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1371   }
// 1372 }
??ZDSecMgrAuthNwkKey_0:
        SJMP    ??Subroutine62_0
          CFI EndBlock cfiBlock218
// 1373 
// 1374 /******************************************************************************
// 1375  * PUBLIC FUNCTIONS
// 1376  */
// 1377 /******************************************************************************
// 1378  * @fn          ZDSecMgrInit
// 1379  *
// 1380  * @brief       Initialize ZigBee Device Security Manager.
// 1381  *
// 1382  * @param       state - device initialization state
// 1383  *
// 1384  * @return      none
// 1385  */
// 1386 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 1387 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
// 1388 void ZDSecMgrAddrMgrCB( uint8           update,
// 1389                         AddrMgrEntry_t* newEntry,
// 1390                         AddrMgrEntry_t* oldEntry )
// 1391 {
// 1392   (void)update;
// 1393   (void)newEntry;
// 1394   (void)oldEntry;
// 1395 }
// 1396 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 1397 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1398 void ZDSecMgrInit(uint8 state)
ZDSecMgrInit:
          CFI Block cfiBlock219 Using cfiCommon0
          CFI Function ZDSecMgrInit
        CODE
// 1399 {
        FUNCALL ZDSecMgrInit, SSP_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInit, APSME_SecurityRM_CD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1400   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1401   {
// 1402     // initialize sub modules
// 1403     ZDSecMgrEntryInit(state);
// 1404 
// 1405     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1406     {
// 1407       APSME_SetRequest( apsTrustCenterAddress, 0, NLME_GetExtAddr() );
// 1408     }
// 1409 
// 1410     // register with Address Manager
// 1411 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 1412     AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
// 1413 #endif
// 1414   }
// 1415 
// 1416   if ( ZG_SECURE_ENABLED )
// 1417   {
// 1418     if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1419          || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
// 1420     {
// 1421       // setup joining permissions
// 1422       ZDSecMgrPermitJoiningEnabled = TRUE;
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1423       ZDSecMgrPermitJoiningTimed   = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        CLR     A
        MOVX    @DPTR,A
// 1424     }
// 1425   }
// 1426 
// 1427   // configure security based on security mode and type of device
// 1428   ZDSecMgrConfig();
        ; Setup parameters for call to function SSP_Init
        SJMP    ?Subroutine2
// 1429 }
          CFI EndBlock cfiBlock219
// 1430 
// 1431 /******************************************************************************
// 1432  * @fn          ZDSecMgrConfig
// 1433  *
// 1434  * @brief       Configure ZigBee Device Security Manager.
// 1435  *
// 1436  * @param       none
// 1437  *
// 1438  * @return      none
// 1439  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1440 void ZDSecMgrConfig( void )
ZDSecMgrConfig:
          CFI Block cfiBlock220 Using cfiCommon0
          CFI Function ZDSecMgrConfig
        CODE
// 1441 {
        FUNCALL ZDSecMgrConfig, SSP_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrConfig, APSME_SecurityRM_CD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1442   if ( ZG_SECURE_ENABLED )
// 1443   {
// 1444     SSP_Init();
        ; Setup parameters for call to function SSP_Init
        SJMP    ?Subroutine2
// 1445 
// 1446     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1447     {
// 1448       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1449       {
// 1450         // COMMERCIAL MODE - COORDINATOR DEVICE
// 1451         APSME_SecurityCM_CD();
// 1452       }
// 1453       else if ( ZSTACK_ROUTER_BUILD )
// 1454       {
// 1455         // COMMERCIAL MODE - ROUTER DEVICE
// 1456         APSME_SecurityCM_RD();
// 1457       }
// 1458       else
// 1459       {
// 1460         // COMMERCIAL MODE - END DEVICE
// 1461         APSME_SecurityCM_ED();
// 1462       }
// 1463     }
// 1464     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 1465     {
// 1466       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1467       {
// 1468         // RESIDENTIAL MODE - COORDINATOR DEVICE
// 1469         APSME_SecurityRM_CD();
// 1470       }
// 1471       else if ( ZSTACK_ROUTER_BUILD )
// 1472       {
// 1473         // RESIDENTIAL MODE - ROUTER DEVICE
// 1474         APSME_SecurityRM_RD();
// 1475       }
// 1476       else
// 1477       {
// 1478         // RESIDENTIAL MODE - END DEVICE
// 1479         APSME_SecurityRM_ED();
// 1480       }
// 1481     }
// 1482   }
// 1483   else
// 1484   {
// 1485     // NO SECURITY
// 1486     APSME_SecurityNM();
// 1487   }
// 1488 }
          CFI EndBlock cfiBlock220
// 1489 
// 1490 /******************************************************************************
// 1491  * @fn          ZDSecMgrPermitJoining
// 1492  *
// 1493  * @brief       Process request to change joining permissions.
// 1494  *
// 1495  * @param       duration - [in] timed duration for join in seconds
// 1496  *                         - 0x00 not allowed
// 1497  *                         - 0xFF allowed without timeout
// 1498  *
// 1499  * @return      uint8 - success(TRUE:FALSE)
// 1500  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1501 uint8 ZDSecMgrPermitJoining( uint8 duration )
ZDSecMgrPermitJoining:
          CFI Block cfiBlock221 Using cfiCommon0
          CFI Function ZDSecMgrPermitJoining
        CODE
// 1502 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
// 1503   uint8 accept;
// 1504 
// 1505   ZDSecMgrPermitJoiningTimed = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        CLR     A
        MOVX    @DPTR,A
// 1506 
// 1507   if ( duration > 0 )
        MOV     A,R0
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        JZ      ??ZDSecMgrPermitJoining_0
// 1508   {
// 1509     ZDSecMgrPermitJoiningEnabled = TRUE;
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1510 
// 1511     if ( duration != 0xFF )
        MOV     A,#-0x1
        XRL     A,R0
        JZ      ??ZDSecMgrPermitJoining_1
// 1512     {
// 1513       ZDSecMgrPermitJoiningTimed = TRUE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOV     A,#0x1
        SJMP    ??ZDSecMgrPermitJoining_2
// 1514     }
// 1515   }
// 1516   else
// 1517   {
// 1518     ZDSecMgrPermitJoiningEnabled = FALSE;
??ZDSecMgrPermitJoining_0:
        CLR     A
??ZDSecMgrPermitJoining_2:
        MOVX    @DPTR,A
// 1519   }
// 1520 
// 1521   accept = TRUE;
// 1522 
// 1523   return accept;
??ZDSecMgrPermitJoining_1:
        MOV     R1,#0x1
        SJMP    ??Subroutine62_0
// 1524 }
          CFI EndBlock cfiBlock221

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock222 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        LCALL   `??SSP_Init::?relay` ; Banked call to: SSP_Init
        ; Setup parameters for call to function APSME_SecurityRM_CD
        ; Setup parameters for call to function APSME_SecurityRM_CD
        LCALL   `??APSME_SecurityRM_CD::?relay`; Banked call to: APSME_SecurityRM_CD
          CFI EndBlock cfiBlock222
        REQUIRE ??Subroutine62_0
        ; // Fall through to label ??Subroutine62_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine62_0:
          CFI Block cfiBlock223 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock223
// 1525 
// 1526 /******************************************************************************
// 1527  * @fn          ZDSecMgrPermitJoiningTimeout
// 1528  *
// 1529  * @brief       Process permit joining timeout
// 1530  *
// 1531  * @param       none
// 1532  *
// 1533  * @return      none
// 1534  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1535 void ZDSecMgrPermitJoiningTimeout( void )
ZDSecMgrPermitJoiningTimeout:
          CFI Block cfiBlock224 Using cfiCommon0
          CFI Function ZDSecMgrPermitJoiningTimeout
        CODE
// 1536 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1537   if ( ZDSecMgrPermitJoiningTimed == TRUE )
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrPermitJoiningTimeout_0
// 1538   {
// 1539     ZDSecMgrPermitJoiningEnabled = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        CLR     A
        MOVX    @DPTR,A
// 1540     ZDSecMgrPermitJoiningTimed   = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    @DPTR,A
// 1541   }
// 1542 }
??ZDSecMgrPermitJoiningTimeout_0:
        SJMP    ??Subroutine62_0
          CFI EndBlock cfiBlock224
// 1543 
// 1544 /******************************************************************************
// 1545  * @fn          ZDSecMgrNewDeviceEvent
// 1546  *
// 1547  * @brief       Process a the new device event, if found reset new device
// 1548  *              event/timer.
// 1549  *
// 1550  * @param       ShortAddr - of New Device to process
// 1551  *
// 1552  * @return      uint8 - found(TRUE:FALSE)
// 1553  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1554 uint8 ZDSecMgrNewDeviceEvent( uint16 ShortAddr )
ZDSecMgrNewDeviceEvent:
          CFI Block cfiBlock225 Using cfiCommon0
          CFI Function ZDSecMgrNewDeviceEvent
        CODE
// 1555 {
        FUNCALL ZDSecMgrNewDeviceEvent, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrDeviceNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AssocRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
// 1556   uint8                 found;
// 1557   ZDSecMgrDevice_t      device;
// 1558   AddrMgrEntry_t        addrEntry;
// 1559   associated_devices_t* assoc;
// 1560   ZStatus_t             status;
// 1561 
// 1562   // initialize return results
// 1563   found = FALSE;
        MOV     ?V0,#0x0
// 1564 
// 1565   assoc = AssocGetWithShort( ShortAddr );
        ; Setup parameters for call to function AssocGetWithShort
        LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 1566 
// 1567   if ( assoc != NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZDSecMgrNewDeviceEvent_0 & 0xFFFF
// 1568   {
// 1569     // device found
// 1570     found = TRUE;
        MOV     ?V0,#0x1
// 1571 
// 1572     // check for preconfigured security
// 1573     if ( zgPreConfigKeys == TRUE )
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrNewDeviceEvent_1
// 1574     {
// 1575       // set association status to authenticated
// 1576       ZDSecMgrAssocDeviceAuth( assoc );
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
// 1577     }
// 1578 
// 1579     // set up device info
// 1580     addrEntry.user  = ADDRMGR_USER_DEFAULT;
??ZDSecMgrNewDeviceEvent_1:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine57_0 & 0xFFFF
// 1581     addrEntry.index = assoc->addrIdx;
??CrossCallReturnLabel_85:
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
// 1582     AddrMgrEntryGet( &addrEntry );
??CrossCallReturnLabel_116:
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
// 1583 
// 1584     device.nwkAddr    = assoc->shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine23 & 0xFFFF
// 1585     device.extAddr    = addrEntry.extAddr;
??CrossCallReturnLabel_122:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
// 1586     device.parentAddr = NLME_GetShortAddr();
??CrossCallReturnLabel_117:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine19 & 0xFFFF
// 1587 
// 1588     // the new device performed Secured Rejoin
// 1589     if ( ( assoc->devStatus & DEV_SECURED_JOIN ) &&
// 1590          ( assoc->devStatus & DEV_REJOIN_STATUS ) )
??CrossCallReturnLabel_4:
        ANL     A,#0x60
        XRL     A,#0x60
        JNZ     ??ZDSecMgrNewDeviceEvent_2
// 1591     {
// 1592       device.secure     = TRUE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrNewDeviceEvent_3
// 1593     }
// 1594     else
// 1595     {
// 1596       device.secure     = FALSE;
??ZDSecMgrNewDeviceEvent_2:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
// 1597     }
??ZDSecMgrNewDeviceEvent_3:
        LCALL   ?Subroutine19 & 0xFFFF
// 1598     device.devStatus  = assoc->devStatus;
??CrossCallReturnLabel_5:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ??Subroutine67_0 & 0xFFFF
// 1599 
// 1600     // process new device
// 1601     status = ZDSecMgrDeviceNew( &device );
// 1602 
// 1603     if ( status == ZSuccess )
??CrossCallReturnLabel_142:
        LCALL   `??ZDSecMgrDeviceNew::?relay`; Banked call to: ZDSecMgrDeviceNew
        MOV     A,R1
        JNZ     ??ZDSecMgrNewDeviceEvent_4
// 1604     {
// 1605       assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
        MOVX    @DPTR,A
        SJMP    ??ZDSecMgrNewDeviceEvent_0
// 1606     }
// 1607     else
// 1608     {
// 1609       // Clear SECURITY bit from Address Manager
// 1610       ZDSecMgrAddrClear( addrEntry.extAddr );
??ZDSecMgrNewDeviceEvent_4:
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
// 1611 
// 1612       // Remove the Association completely
// 1613       AssocRemove( addrEntry.extAddr );
        ; Setup parameters for call to function AssocRemove
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
// 1614     }
// 1615   }
// 1616 
// 1617   return found;
??ZDSecMgrNewDeviceEvent_0:
        MOV     R1,?V0
        MOV     A,#0x15
        LJMP    ?Subroutine5 & 0xFFFF
// 1618 }
          CFI EndBlock cfiBlock225

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond226 Using cfiCommon0
          CFI Function ZDSecMgrNewDeviceEvent
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker228 Using cfiCommon1
          CFI (cfiPicker228) NoFunction
          CFI (cfiPicker228) Picker
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_53:
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiPicker228

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond229 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_4
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-4
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_5
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-4
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker232 Using cfiCommon1
          CFI (cfiPicker232) NoFunction
          CFI (cfiPicker232) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiPicker232
// 1619 
// 1620 /******************************************************************************
// 1621  * @fn          ZDSecMgrTCExtAddrCheck
// 1622  *
// 1623  * @brief       Verifies if received ext. address matches TC ext. address.
// 1624  *
// 1625  * @param       extAddr - Extended address to be verified.
// 1626  *
// 1627  * @return      TRUE - extended address matches
// 1628  *              FALSE - otherwise
// 1629  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1630 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
ZDSecMgrTCExtAddrCheck:
          CFI Block cfiBlock233 Using cfiCommon0
          CFI Function ZDSecMgrTCExtAddrCheck
        CODE
// 1631 {
        FUNCALL ZDSecMgrTCExtAddrCheck, APSME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCExtAddrCheck, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1632   uint8  lookup[Z_EXTADDR_LEN];
// 1633   APSME_GetRequest( apsTrustCenterAddress, 0, lookup );
        ; Setup parameters for call to function APSME_GetRequest
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#-0x55
        LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
// 1634   return osal_ExtAddrEqual( extAddr, lookup );
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
          CFI EndBlock cfiBlock233
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8
// 1635 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiBlock234 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x8
        LJMP    ??Subroutine65_0 & 0xFFFF
          CFI EndBlock cfiBlock234
// 1636 
// 1637 /******************************************************************************
// 1638  * @fn          ZDSecMgrTCDataLoad
// 1639  *
// 1640  * @brief       Stores the address of TC into address manager.
// 1641  *
// 1642  * @param       extAddr - Extended address to be verified.
// 1643  *
// 1644  * @return      none
// 1645  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1646 void ZDSecMgrTCDataLoad( uint8* extAddr )
ZDSecMgrTCDataLoad:
          CFI Block cfiBlock235 Using cfiCommon0
          CFI Function ZDSecMgrTCDataLoad
        CODE
// 1647 {
        FUNCALL ZDSecMgrTCDataLoad, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 15
        MOV     A,#-0xf
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1648   uint16 ami;
// 1649   AddrMgrEntry_t entry;
// 1650 
// 1651   // lookup using TC short address
// 1652   entry.user    = ADDRMGR_USER_DEFAULT;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1653   osal_cpyExtAddr( entry.extAddr, extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1654 
// 1655   // Verify if TC address has been added to Address Manager
// 1656   if ( !APSME_IsDistributedSecurity() && ( AddrMgrEntryLookupExt( &entry ) != TRUE ) )
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV     A,R1
        JNZ     ??ZDSecMgrTCDataLoad_0
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??ZDSecMgrTCDataLoad_0
// 1657   {
// 1658     ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
// 1659   }
// 1660 }
??ZDSecMgrTCDataLoad_0:
        MOV     A,#0xf
        LJMP    ??Subroutine68_0 & 0xFFFF
          CFI EndBlock cfiBlock235
// 1661 
// 1662 /******************************************************************************
// 1663  * @fn          ZDSecMgrTransportKeyInd
// 1664  *
// 1665  * @brief       Process the ZDO_TransportKeyInd_t message.
// 1666  *
// 1667  * @param       ind - [in] ZDO_TransportKeyInd_t indication
// 1668  *
// 1669  * @return      none
// 1670  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1671 void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
ZDSecMgrTransportKeyInd:
          CFI Block cfiBlock236 Using cfiCommon0
          CFI Function ZDSecMgrTransportKeyInd
        CODE
// 1672 {
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrUpdateTCAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, osal_isbufset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrReadKeyFromNv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrAuthNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1673   uint8 index;
// 1674   uint8 zgPreConfigKey[SEC_KEY_LEN];
// 1675 
// 1676   ZDSecMgrUpdateTCAddress( ind->srcExtAddr );
        MOV     A,R6
        ADD     A,#0x16
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
        MOV     R2,?V0
        MOV     R3,A
        LCALL   `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
// 1677   // check for distributed security
// 1678   if ( ( ZG_BUILD_RTR_TYPE ) && osal_isbufset( ind->srcExtAddr, 0xFF, Z_EXTADDR_LEN ) )
        ; Setup parameters for call to function osal_isbufset
        MOV     R4,#0x8
        MOV     R1,#-0x1
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        MOV     A,R1
        JZ      ??ZDSecMgrTransportKeyInd_0
// 1679   {
// 1680     ZDSecMgrPermitJoiningEnabled = TRUE;
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1681   }
// 1682 
// 1683   // load Trust Center data if needed
// 1684   ZDSecMgrTCDataLoad( ind->srcExtAddr );
??ZDSecMgrTransportKeyInd_0:
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV     A,R6
        ADD     A,#0x16
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrTCDataLoad::?relay`; Banked call to: ZDSecMgrTCDataLoad
// 1685 
// 1686   if ( ( ind->keyType == KEY_TYPE_NWK ) ||
// 1687        ( ind->keyType == 6            ) )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDSecMgrTransportKeyInd_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??ZDSecMgrTransportKeyInd_2
// 1688   {
// 1689     // check for dummy NWK key (all zeros)
// 1690     for ( index = 0;
??ZDSecMgrTransportKeyInd_1:
        MOV     R2,#0x0
??ZDSecMgrTransportKeyInd_3:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_4
// 1691           ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
// 1692           index++ );
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x10
        JC      ??ZDSecMgrTransportKeyInd_3
// 1693 
// 1694     if ( index == SEC_KEY_LEN )
??ZDSecMgrTransportKeyInd_4:
        MOV     A,#0x10
        XRL     A,R2
        JNZ     ??ZDSecMgrTransportKeyInd_5
// 1695     {
// 1696       // load preconfigured key - once!!
// 1697       if ( !_NIB.nwkKeyLoaded )
        MOV     DPTR,#_NIB + 61
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_6
// 1698       {
// 1699         ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
        ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x62
        MOV     R3,#0x0
        LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
// 1700         SSP_UpdateNwkKey( zgPreConfigKey, 0 );
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
// 1701         SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     R1,#0x0
        LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 1702 
// 1703         // clear local copy of key
// 1704         osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
        SJMP    ??ZDSecMgrTransportKeyInd_6
// 1705       }
// 1706     }
// 1707     else
// 1708     {
// 1709       SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
??ZDSecMgrTransportKeyInd_5:
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
// 1710       if ( !_NIB.nwkKeyLoaded )
        MOV     DPTR,#_NIB + 61
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_6
// 1711       {
// 1712         SSP_SwitchNwkKey( ind->keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 1713       }
// 1714     }
// 1715 
// 1716     // handle next step in authentication process
// 1717     ZDSecMgrAuthNwkKey();
??ZDSecMgrTransportKeyInd_6:
        ; Setup parameters for call to function ZDSecMgrAuthNwkKey
        LCALL   `??ZDSecMgrAuthNwkKey::?relay`; Banked call to: ZDSecMgrAuthNwkKey
// 1718   }
// 1719   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 1720   {
// 1721     // This should not happen because TCLK should not be Tx
// 1722   }
// 1723   else if ( ind->keyType == KEY_TYPE_APP_LINK )
// 1724   {
// 1725     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1726     {
// 1727       uint16           ami;
// 1728       ZDSecMgrEntry_t* entry;
// 1729 
// 1730       // get the address index
// 1731       if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
// 1732       {
// 1733         // store new EXT address
// 1734         ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
// 1735         ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 1736       }
// 1737 
// 1738       ZDSecMgrEntryLookupAMI( ami, &entry );
// 1739 
// 1740       if ( entry == NULL )
// 1741       {
// 1742         // get new entry
// 1743         if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
// 1744         {
// 1745           // finish setting up entry
// 1746           entry->ami = ami;
// 1747         }
// 1748       }
// 1749 
// 1750       ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
// 1751 
// 1752 #if defined NV_RESTORE
// 1753       ZDSecMgrWriteNV();  // Write the control record for the new established link key to NV.
// 1754 #endif
// 1755     }
// 1756   }
// 1757 }
??ZDSecMgrTransportKeyInd_2:
        MOV     A,#0x10
        LJMP    ??Subroutine68_0 & 0xFFFF
          CFI EndBlock cfiBlock236
// 1758 
// 1759 /******************************************************************************
// 1760  * @fn          ZDSecMgrUpdateDeviceInd
// 1761  *
// 1762  * @brief       Process the ZDO_UpdateDeviceInd_t message.
// 1763  *
// 1764  * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
// 1765  *
// 1766  * @return      none
// 1767  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1768 void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
ZDSecMgrUpdateDeviceInd:
          CFI Block cfiBlock237 Using cfiCommon0
          CFI Function ZDSecMgrUpdateDeviceInd
        CODE
// 1769 {
        FUNCALL ZDSecMgrUpdateDeviceInd, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 8)
// 1770   ZDSecMgrDevice_t device;
// 1771 
// 1772   device.nwkAddr    = ind->devAddr;
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        LCALL   ?Subroutine23 & 0xFFFF
// 1773   device.extAddr    = ind->devExtAddr;
??CrossCallReturnLabel_123:
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
// 1774   device.parentAddr = ind->srcAddr;
??CrossCallReturnLabel_1:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
// 1775   device.devStatus  = DEV_SEC_INIT_STATUS;
??CrossCallReturnLabel_118:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
// 1776   device.secure     = FALSE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1777 
// 1778   // Trust Center should identify the type of JOIN/REJOIN and
// 1779   // Transport the NWK key accordingly, it will only be transported for:
// 1780   //              APSME_UD_STANDARD_UNSECURED_JOIN
// 1781   //   OR         APSME_UD_STANDARD_TRUST_CENTER_REJOIN
// 1782   if ( ind->status != APSME_UD_DEVICE_LEFT )
        MOV     A,R2
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??ZDSecMgrUpdateDeviceInd_0
// 1783   {
// 1784     if ( ind->status == APSME_UD_STANDARD_SECURED_REJOIN )
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrUpdateDeviceInd_1
// 1785     {
// 1786       device.devStatus &= ~DEV_SEC_INIT_STATUS;
// 1787       device.devStatus |=  DEV_SEC_AUTH_STATUS;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x8
        MOVX    @DPTR,A
// 1788       device.secure = TRUE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1789     }
// 1790 
// 1791     ZDSecMgrDeviceJoin( &device );
??ZDSecMgrUpdateDeviceInd_1:
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
// 1792   }
// 1793 }
??ZDSecMgrUpdateDeviceInd_0:
          CFI EndBlock cfiBlock237
        REQUIRE ?Subroutine9
        ; // Fall through to label ?Subroutine9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiBlock238 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 8)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0x8
          CFI EndBlock cfiBlock238
        REQUIRE ??Subroutine63_0
        ; // Fall through to label ??Subroutine63_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine63_0:
          CFI Block cfiBlock239 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 4)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
          CFI Valid
        LJMP    ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock239

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond240 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoinFwd
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond241) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond241) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond241) CFA_SP SP+-7
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiPicker242 Using cfiCommon1
          CFI (cfiPicker242) NoFunction
          CFI (cfiPicker242) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_163:
        MOV     A,#0x4
        RET
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiPicker242
// 1794 
// 1795 /******************************************************************************
// 1796  * @fn          ZDSecMgrRemoveDeviceInd
// 1797  *
// 1798  * @brief       Process the ZDO_RemoveDeviceInd_t message.
// 1799  *
// 1800  * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
// 1801  *
// 1802  * @return      none
// 1803  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1804 void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
ZDSecMgrRemoveDeviceInd:
          CFI Block cfiBlock243 Using cfiCommon0
          CFI Function ZDSecMgrRemoveDeviceInd
        CODE
// 1805 {
        FUNCALL ZDSecMgrRemoveDeviceInd, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1806   ZDSecMgrDevice_t device;
// 1807 
// 1808   // only accept from Trust Center
// 1809   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_130:
        JNZ     ??ZDSecMgrRemoveDeviceInd_0
// 1810   {
// 1811     // look up NWK address
// 1812     if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R6
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrRemoveDeviceInd_0
// 1813     {
// 1814       device.parentAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine47 & 0xFFFF
// 1815       device.extAddr    = ind->childExtAddr;
??CrossCallReturnLabel_57:
        MOV     A,R6
        ADD     A,#0x4
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ??Subroutine67_0 & 0xFFFF
// 1816 
// 1817       // remove device
// 1818       ZDSecMgrDeviceRemove( &device );
// 1819     }
// 1820   }
??CrossCallReturnLabel_143:
        LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
// 1821 }
??ZDSecMgrRemoveDeviceInd_0:
        LJMP    ?Subroutine8 & 0xFFFF
          CFI EndBlock cfiBlock243

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond244 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function ZDSecMgrExtAddrStore
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-2
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function ZDSecMgrRemoveDeviceInd
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-2
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function ZDSecMgrDeviceRemove
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_6
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-4
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_7
          CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond249) CFA_SP SP+-4
          CFI (cfiCond249) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function ZDSecMgrAPSRemove
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_8
          CFI (cfiCond250) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond250) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond250) CFA_SP SP+-9
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function APSME_TCLinkKeyLoad
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 61)
          CFI Block cfiPicker252 Using cfiCommon1
          CFI (cfiPicker252) NoFunction
          CFI (cfiPicker252) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiPicker252

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond253 Using cfiCommon0
          CFI Function APSME_IsLinkKeyValid
          CFI Conditional ??CrossCallReturnLabel_132
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function ZDSecMgrAddLinkKey
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-2
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-2
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker256 Using cfiCommon1
          CFI (cfiPicker256) NoFunction
          CFI (cfiPicker256) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiPicker256
        REQUIRE ??Subroutine64_0
        ; // Fall through to label ??Subroutine64_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine64_0:
          CFI Block cfiCond257 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_124
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond258 Using cfiCommon0
          CFI (cfiCond258) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond258) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond258) CFA_SP SP+-2
          CFI (cfiCond258) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond259) CFA_SP SP+-2
          CFI (cfiCond259) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function ZDSecMgrEntryFree
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond260) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond260) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond260) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-2
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond261 Using cfiCommon0
          CFI (cfiCond261) Function ZDSecMgrEntryFree
          CFI (cfiCond261) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond261) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond261) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond261) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond261) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond261) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond261) CFA_SP SP+-2
          CFI (cfiCond261) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function ZDSecMgrDeviceJoin
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond262) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond262) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond262) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+-2
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function ZDSecMgrRemoveDeviceInd
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond263) CFA_SP SP+-2
          CFI (cfiCond263) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function APSME_KeyFwdToChild
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond264) CFA_SP SP+-2
          CFI (cfiCond264) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function APSME_IsLinkKeyValid
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-2
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function ZDSecMgrAddLinkKey
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-2
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond267 Using cfiCommon0
          CFI (cfiCond267) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond267) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond267) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond267) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond267) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond267) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond267) CFA_SP SP+-2
          CFI (cfiCond267) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker268 Using cfiCommon1
          CFI (cfiPicker268) NoFunction
          CFI (cfiPicker268) Picker
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_137:
        ORL     A,R1
        RET
          CFI EndBlock cfiCond257
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiCond267
          CFI EndBlock cfiPicker268

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock269 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0xd
          CFI EndBlock cfiBlock269
        REQUIRE ??Subroutine65_0
        ; // Fall through to label ??Subroutine65_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine65_0:
          CFI Block cfiBlock270 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock270
        REQUIRE ??Subroutine66_0
        ; // Fall through to label ??Subroutine66_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine66_0:
          CFI Block cfiBlock271 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock271
// 1822 
// 1823 /******************************************************************************
// 1824  * @fn          ZDSecMgrRequestKeyInd
// 1825  *
// 1826  * @brief       Process the ZDO_RequestKeyInd_t message.
// 1827  *
// 1828  * @param       ind - [in] ZDO_RequestKeyInd_t indication
// 1829  *
// 1830  * @return      none
// 1831  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1832 void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
ZDSecMgrRequestKeyInd:
          CFI Block cfiBlock272 Using cfiCommon0
          CFI Function ZDSecMgrRequestKeyInd
        CODE
// 1833 {
        FUNCALL ZDSecMgrRequestKeyInd, ZDSecMgrAppKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1834   if ( ind->keyType == KEY_TYPE_NWK )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDSecMgrRequestKeyInd_0
// 1835   {
// 1836   }
// 1837   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDSecMgrRequestKeyInd_0
// 1838   {
// 1839     ZDSecMgrAppKeyReq( ind );
        ; Setup parameters for call to function ZDSecMgrAppKeyReq
        LCALL   `??ZDSecMgrAppKeyReq::?relay`; Banked call to: ZDSecMgrAppKeyReq
// 1840   }
// 1841   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 1842   {
// 1843   }
// 1844   //else ignore
// 1845 }
??ZDSecMgrRequestKeyInd_0:
        LJMP    ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock272
// 1846 
// 1847 /******************************************************************************
// 1848  * @fn          ZDSecMgrSwitchKeyInd
// 1849  *
// 1850  * @brief       Process the ZDO_SwitchKeyInd_t message.
// 1851  *
// 1852  * @param       ind - [in] ZDO_SwitchKeyInd_t indication
// 1853  *
// 1854  * @return      none
// 1855  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1856 void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
ZDSecMgrSwitchKeyInd:
          CFI Block cfiBlock273 Using cfiCommon0
          CFI Function ZDSecMgrSwitchKeyInd
        CODE
// 1857 {
        FUNCALL ZDSecMgrSwitchKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchKeyInd, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1858   SSP_SwitchNwkKey( ind->keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 1859 
// 1860   // Save if nv
// 1861   ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 1862 }
        LJMP    ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock273
// 1863 
// 1864 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1865 /******************************************************************************
// 1866  * @fn          ZDSecMgrUpdateNwkKey
// 1867  *
// 1868  * @brief       Load a new NWK key and trigger a network update to the dstAddr.
// 1869  *
// 1870  * @param       key       - [in] new NWK key
// 1871  * @param       keySeqNum - [in] new NWK key sequence number
// 1872  *
// 1873  * @return      ZStatus_t
// 1874  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1875 ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
ZDSecMgrUpdateNwkKey:
          CFI Block cfiBlock274 Using cfiCommon0
          CFI Function ZDSecMgrUpdateNwkKey
        CODE
// 1876 {
        FUNCALL ZDSecMgrUpdateNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateNwkKey, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateNwkKey, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V1,R1
// 1877   ZStatus_t               status;
// 1878   APSME_TransportKeyReq_t req;
// 1879 
// 1880   // initialize common elements of local variables
// 1881   req.keyType   = KEY_TYPE_NWK;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1882 
// 1883   req.dstAddr   = dstAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 1884   req.keySeqNum = keySeqNum;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 1885   req.key       = key;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1886   req.extAddr   = NULL;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1887   req.nwkSecure = TRUE;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1888   req.tunnel    = NULL;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1889 
// 1890   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1891   {
// 1892     // Broadcast transport NWK key
// 1893     if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
// 1894         ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
// 1895         ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
// 1896     {
// 1897       req.apsSecure = FALSE;
// 1898       status = APSME_TransportKeyReq( &req );
// 1899     }
// 1900     else
// 1901     {
// 1902       AddrMgrEntry_t          addrEntry;
// 1903 
// 1904       addrEntry.user = ADDRMGR_USER_SECURITY;
// 1905       addrEntry.nwkAddr = dstAddr;
// 1906 
// 1907       status = ZFailure;
// 1908 
// 1909       if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
// 1910       {
// 1911         req.extAddr = addrEntry.extAddr;
// 1912         req.apsSecure = TRUE;
// 1913         status = APSME_TransportKeyReq( &req );
// 1914       }
// 1915     }
// 1916   }
// 1917   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 1918   {
// 1919     req.apsSecure = FALSE;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine67_0 & 0xFFFF
// 1920     status = APSME_TransportKeyReq( &req );
// 1921   }
??CrossCallReturnLabel_144:
        LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
        MOV     A,R1
        MOV     ?V0,A
// 1922 
// 1923   SSP_UpdateNwkKey( key, keySeqNum );
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
// 1924 
// 1925   // Save if nv
// 1926   ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 1927 
// 1928   return status;
        MOV     R1,?V0
        MOV     A,#0xd
        SJMP    ??Subroutine68_0
// 1929 }
          CFI EndBlock cfiBlock274

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond275 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_138
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond276 Using cfiCommon0
          CFI (cfiCond276) Function ZDSecMgrRequestAppKey
          CFI (cfiCond276) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond276) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond276) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond276) CFA_SP SP+-7
          CFI (cfiCond276) CFA_XSP16 add(XSP16, 4)
          CFI Block cfiPicker277 Using cfiCommon1
          CFI (cfiPicker277) NoFunction
          CFI (cfiPicker277) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
          CFI EndBlock cfiCond275
          CFI EndBlock cfiCond276
          CFI EndBlock cfiPicker277
        REQUIRE ??Subroutine67_0
        ; // Fall through to label ??Subroutine67_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine67_0:
          CFI Block cfiCond278 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemove
          CFI Conditional ??CrossCallReturnLabel_140
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-2
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-2
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function ZDSecMgrRemoveDeviceInd
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-2
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function ZDSecMgrUpdateNwkKey
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-2
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond283) CFA_SP SP+-2
          CFI (cfiCond283) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function ZDSecMgrAPSRemove
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond284) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond284) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond284) CFA_SP SP+-7
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function ZDSecMgrEntryLookup
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-2
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond286 Using cfiCommon0
          CFI (cfiCond286) Function ZDSecMgrRequestAppKey
          CFI (cfiCond286) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond286) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond286) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond286) CFA_SP SP+-7
          CFI (cfiCond286) CFA_XSP16 add(XSP16, 4)
          CFI Block cfiPicker287 Using cfiCommon1
          CFI (cfiPicker287) NoFunction
          CFI (cfiPicker287) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function APSME_RequestKeyReq
        ; Setup parameters for call to function NLME_LeaveReq
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        ; Setup parameters for call to function ZDSecMgrDeviceNew
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        ; Setup parameters for call to function APSME_TransportKeyReq
        ; Setup parameters for call to function APSME_SwitchKeyReq
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        RET
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiCond286
          CFI EndBlock cfiPicker287

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock288 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x8
          CFI EndBlock cfiBlock288
        REQUIRE ??Subroutine68_0
        ; // Fall through to label ??Subroutine68_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine68_0:
          CFI Block cfiBlock289 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 49)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock289
        REQUIRE ??Subroutine69_0
        ; // Fall through to label ??Subroutine69_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine69_0:
          CFI Block cfiBlock290 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock290
// 1930 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 1931 
// 1932 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1933 /******************************************************************************
// 1934  * @fn          ZDSecMgrSwitchNwkKey
// 1935  *
// 1936  * @brief       Causes the NWK key to switch via a network command to the dstAddr.
// 1937  *
// 1938  * @param       keySeqNum - [in] new NWK key sequence number
// 1939  *
// 1940  * @return      ZStatus_t
// 1941  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1942 ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
ZDSecMgrSwitchNwkKey:
          CFI Block cfiBlock291 Using cfiCommon0
          CFI Function ZDSecMgrSwitchNwkKey
        CODE
// 1943 {
        FUNCALL ZDSecMgrSwitchNwkKey, APSME_SwitchKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchNwkKey, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchNwkKey, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     R7,A
// 1944   ZStatus_t            status;
// 1945   APSME_SwitchKeyReq_t req;
// 1946 
// 1947   // initialize common elements of local variables
// 1948   req.dstAddr = dstAddr;
        LCALL   ?Subroutine20 & 0xFFFF
// 1949   req.keySeqNum = keySeqNum;
??CrossCallReturnLabel_7:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 1950 
// 1951   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1952   {
// 1953     // Broadcast switch NWK key
// 1954     if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
// 1955         ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
// 1956         ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
// 1957     {
// 1958       req.apsSecure = FALSE;
// 1959       status = APSME_SwitchKeyReq( &req );
// 1960     }
// 1961     else
// 1962     {
// 1963       AddrMgrEntry_t          addrEntry;
// 1964 
// 1965       addrEntry.user = ADDRMGR_USER_SECURITY;
// 1966       addrEntry.nwkAddr = dstAddr;
// 1967 
// 1968       status = ZFailure;
// 1969 
// 1970       if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
// 1971       {
// 1972         req.dstAddr = addrEntry.nwkAddr;
// 1973         req.apsSecure = TRUE;
// 1974         status = APSME_SwitchKeyReq( &req );
// 1975       }
// 1976     }
// 1977   }
// 1978   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 1979   {
// 1980     req.apsSecure = FALSE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine67_0 & 0xFFFF
// 1981     status = APSME_SwitchKeyReq( &req );
// 1982   }
??CrossCallReturnLabel_145:
        LCALL   `??APSME_SwitchKeyReq::?relay`; Banked call to: APSME_SwitchKeyReq
        MOV     A,R1
        MOV     R6,A
// 1983 
// 1984   SSP_SwitchNwkKey( keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     A,R7
        MOV     R1,A
        LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 1985 
// 1986   // Save if nv
// 1987   ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 1988 
// 1989   return status;
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x4
        LJMP    ??Subroutine65_0 & 0xFFFF
// 1990 }
          CFI EndBlock cfiBlock291

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond292 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemove
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond293 Using cfiCommon0
          CFI (cfiCond293) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond293) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond293) CFA_SP SP+-2
          CFI (cfiCond293) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function ZDSecMgrAPSRemove
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond294) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond294) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond294) CFA_SP SP+-7
          CFI (cfiCond294) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiPicker295 Using cfiCommon1
          CFI (cfiPicker295) NoFunction
          CFI (cfiPicker295) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     A,#0x2
        RET
          CFI EndBlock cfiCond292
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiPicker295
// 1991 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 1992 
// 1993 /******************************************************************************
// 1994  * @fn          ZDSecMgrRequestAppKey
// 1995  *
// 1996  * @brief       Request an application key with partner.
// 1997  *
// 1998  * @param       partExtAddr - [in] partner extended address
// 1999  *
// 2000  * @return      ZStatus_t
// 2001  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2002 ZStatus_t ZDSecMgrRequestAppKey( uint8 *partExtAddr )
ZDSecMgrRequestAppKey:
          CFI Block cfiBlock296 Using cfiCommon0
          CFI Function ZDSecMgrRequestAppKey
        CODE
// 2003 {
        FUNCALL ZDSecMgrRequestAppKey, APSME_RequestKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 4)
// 2004   ZStatus_t status;
// 2005   APSME_RequestKeyReq_t req;
// 2006 
// 2007   req.dstAddr = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
// 2008   req.keyType = KEY_TYPE_APP_MASTER;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 2009 
// 2010   req.partExtAddr = partExtAddr;
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
// 2011   status = APSME_RequestKeyReq( &req );
// 2012 
// 2013   return status;
??CrossCallReturnLabel_139:
        LCALL   `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
        MOV     A,#0x4
        LJMP    ??Subroutine63_0 & 0xFFFF
// 2014 }
          CFI EndBlock cfiBlock296
// 2015 
// 2016 #if ( ZG_BUILD_JOINING_TYPE )
// 2017 /******************************************************************************
// 2018  * @fn          ZDSecMgrSetupPartner
// 2019  *
// 2020  * @brief       Setup for application key partner.
// 2021  *
// 2022  * @param       partNwkAddr - [in] partner network address
// 2023  *
// 2024  * @return      ZStatus_t
// 2025  */
// 2026 ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
// 2027 {
// 2028   AddrMgrEntry_t entry;
// 2029   ZStatus_t      status;
// 2030 
// 2031   status = ZFailure;
// 2032 
// 2033   // update the address manager
// 2034   entry.user    = ADDRMGR_USER_SECURITY;
// 2035   entry.nwkAddr = partNwkAddr;
// 2036   AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
// 2037 
// 2038   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
// 2039   {
// 2040     status = ZSuccess;
// 2041 
// 2042     // check for address discovery
// 2043     if ( partNwkAddr == INVALID_NODE_ADDR )
// 2044     {
// 2045       status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2046     }
// 2047     else if ( !AddrMgrExtAddrValid( partExtAddr ) )
// 2048     {
// 2049       status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2050     }
// 2051   }
// 2052 
// 2053   return status;
// 2054 }
// 2055 #endif // ( ZG_BUILD_JOINING_TYPE )
// 2056 
// 2057 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 2058 /******************************************************************************
// 2059  * @fn          ZDSecMgrAppKeyTypeSet
// 2060  *
// 2061  * @brief       Set application key type.
// 2062  *
// 2063  * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
// 2064  *                                                   KEY_TYPE_APP_LINK@3
// 2065  *
// 2066  * @return      ZStatus_t
// 2067  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2068 ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
ZDSecMgrAppKeyTypeSet:
          CFI Block cfiBlock297 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyTypeSet
        CODE
// 2069 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
// 2070   if ( keyType == KEY_TYPE_APP_LINK )
        MOV     A,#0x3
        XRL     A,R0
        MOV     DPTR,#ZDSecMgrAppKeyType
        JNZ     ??ZDSecMgrAppKeyTypeSet_0
// 2071   {
// 2072     ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
        MOV     A,#0x3
        SJMP    ??ZDSecMgrAppKeyTypeSet_1
// 2073   }
// 2074   else
// 2075   {
// 2076     ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
??ZDSecMgrAppKeyTypeSet_0:
        MOV     A,#0x2
// 2077   }
??ZDSecMgrAppKeyTypeSet_1:
        LJMP    ?Subroutine10 & 0xFFFF
// 2078 
// 2079   return ZSuccess;
// 2080 }
          CFI EndBlock cfiBlock297
// 2081 #endif
// 2082 
// 2083 /******************************************************************************
// 2084  * ZigBee Device Security Manager - Stub Implementations
// 2085  */
// 2086 
// 2087 
// 2088 /******************************************************************************
// 2089  * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
// 2090  *
// 2091  * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
// 2092  *
// 2093  * @param       extAddr - [in] EXT address
// 2094  * @param       data    - [in] APSME_LinkKeyData_t
// 2095  *
// 2096  * @return      ZStatus_t
// 2097  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2098 ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
APSME_LinkKeySet:
          CFI Block cfiBlock298 Using cfiCommon0
          CFI Function APSME_LinkKeySet
        CODE
// 2099 {
        FUNCALL APSME_LinkKeySet, ZDSecMgrEntryLookupExtGetIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2100   ZStatus_t status;
// 2101   ZDSecMgrEntry_t* entry;
// 2102   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 2103   uint16 Index;
// 2104 
// 2105   // lookup entry index for specified EXT address
// 2106   status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        LCALL   `??ZDSecMgrEntryLookupExtGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupExtGetIndex
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     ?V0,A
// 2107 
// 2108   if ( status == ZSuccess )
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_171 & 0xFFFF
// 2109   {
// 2110     // point to NV item
// 2111     entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x2
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_167:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine61_0 & 0xFFFF
// 2112 
// 2113     pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
??CrossCallReturnLabel_119:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
// 2114 
// 2115     if (pApsLinkKey != NULL)
        MOV     A,R2
        ORL     A,?V3
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_171 & 0xFFFF
// 2116     {
// 2117       // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
// 2118       osal_nv_read( entry->keyNvId, 0,
// 2119                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V4,#0x18
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2120 
// 2121       // set new values of the key
// 2122       osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2123       pApsLinkKey->rxFrmCntr = 0;
        MOV     A,?V2
        ADD     A,#0x14
        LCALL   ?Subroutine15 & 0xFFFF
// 2124       pApsLinkKey->txFrmCntr = 0;
??CrossCallReturnLabel_172:
        MOV     A,?V2
        ADD     A,#0x10
        LCALL   ?Subroutine15 & 0xFFFF
// 2125 
// 2126       osal_nv_write( entry->keyNvId, 0,
// 2127                     sizeof(APSME_LinkKeyData_t), pApsLinkKey );
??CrossCallReturnLabel_173:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V4,#0x18
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_105:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2128 
// 2129       // clear copy of key in RAM
// 2130       osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2131 
// 2132       osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_150:
        LCALL   ??Subroutine71_0 & 0xFFFF
??CrossCallReturnLabel_157:
        MOV     A,R0
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x9
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#ApsLinkKeyFrmCntr & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     A,R2
        ADD     A,#-0x9
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#-0x13
        LCALL   ??Subroutine74_0 & 0xFFFF
// 2133 
// 2134       // set initial values for counters in RAM
// 2135       ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
// 2136       ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
??CrossCallReturnLabel_170:
        MOV     A,R2
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#-0x13
        LCALL   ??Subroutine74_0 & 0xFFFF
// 2137     }
// 2138   }
// 2139 
// 2140   return status;
??CrossCallReturnLabel_171:
        MOV     R1,?V0
        MOV     A,#0x4
        LJMP    ?Subroutine4 & 0xFFFF
// 2141 }
          CFI EndBlock cfiBlock298

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond299 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_150
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond300 Using cfiCommon0
          CFI (cfiCond300) Function ZDSecMgrAuthenticationSet
          CFI (cfiCond300) Conditional ??CrossCallReturnLabel_151
          CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond300) CFA_SP SP+-2
          CFI (cfiCond300) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker301 Using cfiCommon1
          CFI (cfiPicker301) NoFunction
          CFI (cfiPicker301) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond299
          CFI EndBlock cfiCond300
          CFI EndBlock cfiPicker301
        REQUIRE ??Subroutine70_0
        ; // Fall through to label ??Subroutine70_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine70_0:
          CFI Block cfiCond302 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyGet
          CFI Conditional ??CrossCallReturnLabel_147
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond303 Using cfiCommon0
          CFI (cfiCond303) Function ZDSecMgrAppKeyGet
          CFI (cfiCond303) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond303) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond303) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond303) CFA_SP SP+-8
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function ZDSecMgrDeviceJoin
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond304) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond304) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond304) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond304) CFA_SP SP+-2
          CFI (cfiCond304) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond305 Using cfiCommon0
          CFI (cfiCond305) Function APSME_LinkKeySet
          CFI (cfiCond305) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond305) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond305) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond305) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond305) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond305) CFA_SP SP+-2
          CFI (cfiCond305) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond306 Using cfiCommon0
          CFI (cfiCond306) Function ZDSecMgrAuthenticationSet
          CFI (cfiCond306) Conditional ??CrossCallReturnLabel_151
          CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond306) CFA_SP SP+-2
          CFI (cfiCond306) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker307 Using cfiCommon1
          CFI (cfiPicker307) NoFunction
          CFI (cfiPicker307) Picker
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_153:
        RET
          CFI EndBlock cfiCond302
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiCond305
          CFI EndBlock cfiCond306
          CFI EndBlock cfiPicker307

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
          CFI Block cfiCond308 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_104
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function APSME_LinkKeySet
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_105
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond309) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond309) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+-4
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_106
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+-4
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function APSME_LinkKeySet
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_150
          CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond311) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond311) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond311) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond311) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond311) CFA_SP SP+-4
          CFI (cfiCond311) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond312 Using cfiCommon0
          CFI (cfiCond312) Function ZDSecMgrAuthenticationSet
          CFI (cfiCond312) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_151
          CFI (cfiCond312) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond312) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond312) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond312) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond312) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond312) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond312) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond312) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond312) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond312) CFA_SP SP+-4
          CFI (cfiCond312) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond313 Using cfiCommon0
          CFI (cfiCond313) Function ZDSecMgrAppKeyGet
          CFI (cfiCond313) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_147
          CFI (cfiCond313) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond313) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond313) CFA_SP SP+-9
          CFI Block cfiCond314 Using cfiCommon0
          CFI (cfiCond314) Function ZDSecMgrAppKeyGet
          CFI (cfiCond314) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_148
          CFI (cfiCond314) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond314) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond314) CFA_SP SP+-10
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function ZDSecMgrDeviceJoin
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_149
          CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond315) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond315) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond315) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond315) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond315) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond315) CFA_SP SP+-4
          CFI (cfiCond315) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker316 Using cfiCommon1
          CFI (cfiPicker316) NoFunction
          CFI (cfiPicker316) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiCond312
          CFI EndBlock cfiCond313
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiPicker316

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond317 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemove
          CFI Conditional ??CrossCallReturnLabel_158
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function ZDSecMgrDeviceJoin
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_159
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond318) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond318) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond318) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+-2
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker319 Using cfiCommon1
          CFI (cfiPicker319) NoFunction
          CFI (cfiPicker319) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiPicker319
        REQUIRE ??Subroutine71_0
        ; // Fall through to label ??Subroutine71_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine71_0:
          CFI Block cfiCond320 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_157
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function ZDSecMgrDeviceRemove
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_158
          CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond321) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond321) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond321) CFA_SP SP+-2
          CFI (cfiCond321) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond322 Using cfiCommon0
          CFI (cfiCond322) Function ZDSecMgrDeviceJoin
          CFI (cfiCond322) Conditional ??CrossCallReturnLabel_159
          CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond322) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond322) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond322) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond322) CFA_SP SP+-2
          CFI (cfiCond322) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker323 Using cfiCommon1
          CFI (cfiPicker323) NoFunction
          CFI (cfiPicker323) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiCond322
          CFI EndBlock cfiPicker323
        REQUIRE ??Subroutine72_0
        ; // Fall through to label ??Subroutine72_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine72_0:
          CFI Block cfiCond324 Using cfiCommon0
          CFI Function ZDSecMgrAddrClear
          CFI Conditional ??CrossCallReturnLabel_154
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond325 Using cfiCommon0
          CFI (cfiCond325) Function ZDSecMgrSendNwkKey
          CFI (cfiCond325) Conditional ??CrossCallReturnLabel_155
          CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond325) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond325) CFA_SP SP+-2
          CFI (cfiCond325) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function ZDSecMgrAPSRemove
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_156
          CFI (cfiCond326) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond326) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond326) CFA_SP SP+-7
          CFI (cfiCond326) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond327 Using cfiCommon0
          CFI (cfiCond327) Function APSME_LinkKeySet
          CFI (cfiCond327) Conditional ??CrossCallReturnLabel_157
          CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond327) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond327) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond327) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond327) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond327) CFA_SP SP+-2
          CFI (cfiCond327) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond328 Using cfiCommon0
          CFI (cfiCond328) Function ZDSecMgrDeviceRemove
          CFI (cfiCond328) Conditional ??CrossCallReturnLabel_158
          CFI (cfiCond328) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond328) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond328) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond328) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond328) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond328) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond328) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond328) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond328) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond328) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond328) CFA_SP SP+-2
          CFI (cfiCond328) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond329 Using cfiCommon0
          CFI (cfiCond329) Function ZDSecMgrDeviceJoin
          CFI (cfiCond329) Conditional ??CrossCallReturnLabel_159
          CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond329) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond329) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond329) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond329) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond329) CFA_SP SP+-2
          CFI (cfiCond329) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker330 Using cfiCommon1
          CFI (cfiPicker330) NoFunction
          CFI (cfiPicker330) Picker
        LCALL   ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_165:
        RET
          CFI EndBlock cfiCond324
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiCond327
          CFI EndBlock cfiCond328
          CFI EndBlock cfiCond329
          CFI EndBlock cfiPicker330

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond331 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_167
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond332 Using cfiCommon0
          CFI (cfiCond332) Function ZDSecMgrAddLinkKey
          CFI (cfiCond332) Conditional ??CrossCallReturnLabel_168
          CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond332) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond332) CFA_SP SP+-2
          CFI (cfiCond332) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker333 Using cfiCommon1
          CFI (cfiPicker333) NoFunction
          CFI (cfiPicker333) Picker
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond331
          CFI EndBlock cfiCond332
          CFI EndBlock cfiPicker333
        REQUIRE ??Subroutine73_0
        ; // Fall through to label ??Subroutine73_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine73_0:
          CFI Block cfiCond334 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExtGetIndex
          CFI Conditional ??CrossCallReturnLabel_166
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond335 Using cfiCommon0
          CFI (cfiCond335) Function APSME_LinkKeySet
          CFI (cfiCond335) Conditional ??CrossCallReturnLabel_167
          CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond335) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond335) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond335) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond335) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond335) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond335) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond335) CFA_SP SP+-2
          CFI (cfiCond335) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond336 Using cfiCommon0
          CFI (cfiCond336) Function ZDSecMgrAddLinkKey
          CFI (cfiCond336) Conditional ??CrossCallReturnLabel_168
          CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond336) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond336) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond336) CFA_SP SP+-2
          CFI (cfiCond336) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker337 Using cfiCommon1
          CFI (cfiPicker337) NoFunction
          CFI (cfiPicker337) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        RET
          CFI EndBlock cfiCond334
          CFI EndBlock cfiCond335
          CFI EndBlock cfiCond336
          CFI EndBlock cfiPicker337

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond338 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_172
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond339 Using cfiCommon0
          CFI (cfiCond339) Function APSME_LinkKeySet
          CFI (cfiCond339) Conditional ??CrossCallReturnLabel_173
          CFI (cfiCond339) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond339) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond339) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond339) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond339) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond339) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond339) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond339) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond339) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond339) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond339) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond339) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond339) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond339) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond339) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond339) CFA_SP SP+-2
          CFI (cfiCond339) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker340 Using cfiCommon1
          CFI (cfiPicker340) NoFunction
          CFI (cfiPicker340) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
          CFI EndBlock cfiCond338
          CFI EndBlock cfiCond339
          CFI EndBlock cfiPicker340
        REQUIRE ??Subroutine74_0
        ; // Fall through to label ??Subroutine74_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine74_0:
          CFI Block cfiCond341 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_170
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond342 Using cfiCommon0
          CFI (cfiCond342) Function APSME_LinkKeySet
          CFI (cfiCond342) Conditional ??CrossCallReturnLabel_171
          CFI (cfiCond342) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond342) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond342) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond342) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond342) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond342) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond342) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond342) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond342) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond342) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond342) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond342) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond342) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond342) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond342) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond342) CFA_SP SP+-2
          CFI (cfiCond342) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond343 Using cfiCommon0
          CFI (cfiCond343) Function APSME_LinkKeySet
          CFI (cfiCond343) Conditional ??CrossCallReturnLabel_172
          CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond343) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond343) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond343) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond343) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond343) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond343) CFA_SP SP+-2
          CFI (cfiCond343) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond344 Using cfiCommon0
          CFI (cfiCond344) Function APSME_LinkKeySet
          CFI (cfiCond344) Conditional ??CrossCallReturnLabel_173
          CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond344) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond344) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond344) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond344) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond344) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond344) CFA_SP SP+-2
          CFI (cfiCond344) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker345 Using cfiCommon1
          CFI (cfiPicker345) NoFunction
          CFI (cfiPicker345) Picker
        MOV     DPH,A
          CFI EndBlock cfiCond341
          CFI EndBlock cfiCond342
          CFI EndBlock cfiCond343
          CFI EndBlock cfiCond344
          CFI EndBlock cfiPicker345
        REQUIRE ??Subroutine75_0
        ; // Fall through to label ??Subroutine75_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine75_0:
          CFI Block cfiCond346 Using cfiCommon0
          CFI Function APSME_TCLinkKeyInit
          CFI Conditional ??CrossCallReturnLabel_169
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond347 Using cfiCommon0
          CFI (cfiCond347) Function APSME_LinkKeySet
          CFI (cfiCond347) Conditional ??CrossCallReturnLabel_170
          CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond347) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond347) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond347) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond347) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond347) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond347) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond347) CFA_SP SP+-2
          CFI (cfiCond347) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond348 Using cfiCommon0
          CFI (cfiCond348) Function APSME_LinkKeySet
          CFI (cfiCond348) Conditional ??CrossCallReturnLabel_171
          CFI (cfiCond348) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond348) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond348) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond348) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond348) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond348) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond348) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond348) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond348) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond348) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond348) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond348) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond348) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond348) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond348) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond348) CFA_SP SP+-2
          CFI (cfiCond348) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond349 Using cfiCommon0
          CFI (cfiCond349) Function APSME_LinkKeySet
          CFI (cfiCond349) Conditional ??CrossCallReturnLabel_172
          CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond349) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond349) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond349) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond349) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond349) CFA_SP SP+-2
          CFI (cfiCond349) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond350 Using cfiCommon0
          CFI (cfiCond350) Function APSME_LinkKeySet
          CFI (cfiCond350) Conditional ??CrossCallReturnLabel_173
          CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond350) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond350) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond350) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond350) CFA_SP SP+-2
          CFI (cfiCond350) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker351 Using cfiCommon1
          CFI (cfiPicker351) NoFunction
          CFI (cfiPicker351) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond346
          CFI EndBlock cfiCond347
          CFI EndBlock cfiCond348
          CFI EndBlock cfiCond349
          CFI EndBlock cfiCond350
          CFI EndBlock cfiPicker351
// 2142 
// 2143 /******************************************************************************
// 2144  * @fn          ZDSecMgrAuthenticationSet
// 2145  *
// 2146  * @brief       Mark the specific device as authenticated or not
// 2147  *
// 2148  * @param       extAddr - [in] EXT address
// 2149  * @param       option  - [in] authenticated or not
// 2150  *
// 2151  * @return      ZStatus_t
// 2152  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2153 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
ZDSecMgrAuthenticationSet:
          CFI Block cfiBlock352 Using cfiCommon0
          CFI Function ZDSecMgrAuthenticationSet
        CODE
// 2154 {
        FUNCALL ZDSecMgrAuthenticationSet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
// 2155   ZStatus_t        status;
// 2156   ZDSecMgrEntry_t* entry;
// 2157 
// 2158 
// 2159   // lookup entry index for specified EXT address
// 2160   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
        MOV     A,R1
        MOV     R1,A
// 2161 
// 2162   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrAuthenticationSet_0
// 2163   {
// 2164     entry->authenticateOption = option;
        LCALL   ?Subroutine32 & 0xFFFF
// 2165   }
??CrossCallReturnLabel_151:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
// 2166 
// 2167   return status;
??ZDSecMgrAuthenticationSet_0:
        LJMP    ?Subroutine7 & 0xFFFF
// 2168 }
          CFI EndBlock cfiBlock352
// 2169 
// 2170 /******************************************************************************
// 2171  * @fn          ZDSecMgrAuthenticationCheck
// 2172  *
// 2173  * @brief       Check if the specific device has been authenticated or not
// 2174  *              For non-trust center device, always return TRUE
// 2175  *
// 2176  * @param       shortAddr - [in] short address
// 2177  *
// 2178  * @return      TRUE @ authenticated with CBKE
// 2179  *              FALSE @ not authenticated
// 2180  */
// 2181 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2182 uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
ZDSecMgrAuthenticationCheck:
          CFI Block cfiBlock353 Using cfiCommon0
          CFI Function ZDSecMgrAuthenticationCheck
        CODE
// 2183 {
        ; Saved register size: 0
        ; Auto size: 0
// 2184 #if defined (TC_LINKKEY_JOIN)
// 2185 
// 2186   ZDSecMgrEntry_t* entry;
// 2187   uint8 extAddr[Z_EXTADDR_LEN];
// 2188 
// 2189   // If the local device is not the trust center, always return TRUE
// 2190   APSME_GetRequest( apsTrustCenterAddress, 0, extAddr );
// 2191   if ( ! osal_ExtAddrEqual( extAddr , NLME_GetExtAddr() ) )
// 2192   {
// 2193     return TRUE;
// 2194   }
// 2195   // Otherwise, check the authentication option
// 2196   else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
// 2197   {
// 2198     // lookup entry index for specified EXT address
// 2199     if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
// 2200     {
// 2201       if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
// 2202       {
// 2203         return TRUE;
// 2204       }
// 2205       else
// 2206       {
// 2207         return FALSE;
// 2208       }
// 2209     }
// 2210     else
// 2211     {
// 2212       // it may have been secured with TCLK only
// 2213       uint16    ami;
// 2214 
// 2215       // lookup address index in address manager
// 2216       if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
// 2217       {
// 2218         return TRUE;
// 2219       }
// 2220     }
// 2221   }
// 2222   return FALSE;
// 2223 
// 2224 #else
// 2225   (void)shortAddr;  // Intentionally unreferenced parameter
// 2226 
// 2227   // For non AMI/SE Profile, perform no check and always return TRUE.
// 2228   return TRUE;
        MOV     R1,#0x1
        LJMP    ?BRET
// 2229 
// 2230 #endif // TC_LINKKEY_JOIN
// 2231 }
          CFI EndBlock cfiBlock353
// 2232 
// 2233 /******************************************************************************
// 2234  * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
// 2235  *
// 2236  * @brief       Get Key NV ID for specified NWK address.
// 2237  *
// 2238  * @param       extAddr - [in] EXT address
// 2239  * @param       keyNvId - [out] NV ID
// 2240  *
// 2241  * @return      ZStatus_t
// 2242  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2243 ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
APSME_LinkKeyNVIdGet:
          CFI Block cfiBlock354 Using cfiCommon0
          CFI Function APSME_LinkKeyNVIdGet
        CODE
// 2244 {
        FUNCALL APSME_LinkKeyNVIdGet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2245   ZStatus_t status;
// 2246   ZDSecMgrEntry_t* entry;
// 2247 
// 2248   // lookup entry index for specified NWK address
// 2249   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
        MOV     A,R1
        MOV     R1,A
// 2250 
// 2251   if ( status == ZSuccess )
        JNZ     ??APSME_LinkKeyNVIdGet_0
// 2252   {
// 2253     // return the index to the NV table
// 2254     *pKeyNvId = entry->keyNvId;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine25 & 0xFFFF
// 2255   }
??CrossCallReturnLabel_106:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??APSME_LinkKeyNVIdGet_1
// 2256   else
// 2257   {
// 2258     *pKeyNvId = SEC_NO_KEY_NV_ID;
??APSME_LinkKeyNVIdGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??APSME_LinkKeyNVIdGet_1:
        MOVX    @DPTR,A
// 2259   }
// 2260 
// 2261   return status;
        LJMP    ?Subroutine7 & 0xFFFF
// 2262 }
          CFI EndBlock cfiBlock354
// 2263 
// 2264 /******************************************************************************
// 2265  * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
// 2266  *
// 2267  * @brief       Verifies if Link Key in NV has been set.
// 2268  *
// 2269  * @param       extAddr - [in] EXT address
// 2270  *
// 2271  * @return      TRUE - Link Key has been established
// 2272  *              FALSE - Link Key in NV has default value.
// 2273  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2274 uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
APSME_IsLinkKeyValid:
          CFI Block cfiBlock355 Using cfiCommon0
          CFI Function APSME_IsLinkKeyValid
        CODE
// 2275 {
        FUNCALL APSME_IsLinkKeyValid, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, APSME_LinkKeyNVIdGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2276   APSME_LinkKeyData_t *pKeyData;
// 2277   uint16 apsLinkKeyNvId;
// 2278   uint8 nullKey[SEC_KEY_LEN];
// 2279   uint8 status = FALSE;
        MOV     ?V0,#0x0
// 2280 
// 2281   // initialize default vealue to compare to
// 2282   osal_memset(nullKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2283 
// 2284   // check for APS link NV ID
// 2285   APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
        ; Setup parameters for call to function APSME_LinkKeyNVIdGet
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??APSME_LinkKeyNVIdGet::?relay`; Banked call to: APSME_LinkKeyNVIdGet
// 2286 
// 2287   if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_132:
        JZ      ??APSME_IsLinkKeyValid_0
// 2288   {
// 2289     pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
// 2290 
// 2291     if (pKeyData != NULL)
        MOV     A,R2
        ORL     A,?V3
        JZ      ??APSME_IsLinkKeyValid_0
// 2292     {
// 2293       // retrieve key from NV
// 2294       if ( osal_nv_read( apsLinkKeyNvId, 0,
// 2295                         sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V4,#0x18
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_97:
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        JNZ     ??APSME_IsLinkKeyValid_1
// 2296       {
// 2297         // if stored key is different than default value, then a key has been established
// 2298         if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        JNZ     ??APSME_IsLinkKeyValid_1
// 2299         {
// 2300           status = TRUE;
        MOV     ?V0,#0x1
// 2301         }
// 2302       }
// 2303 
// 2304       // clear copy of key in RAM
// 2305       osal_memset(pKeyData, 0x00, sizeof(APSME_LinkKeyData_t));
??APSME_IsLinkKeyValid_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2306 
// 2307       osal_mem_free(pKeyData);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2308     }
// 2309   }
// 2310 
// 2311   return status;
??APSME_IsLinkKeyValid_0:
        MOV     R1,?V0
        MOV     A,#0x12
        LJMP    ?Subroutine4 & 0xFFFF
// 2312 }
          CFI EndBlock cfiBlock355
// 2313 
// 2314 /******************************************************************************
// 2315  * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
// 2316  *
// 2317  * @brief       Verify and process key transportation to child.
// 2318  *
// 2319  * @param       ind - [in] APSME_TransportKeyInd_t
// 2320  *
// 2321  * @return      uint8 - success(TRUE:FALSE)
// 2322  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2323 uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
APSME_KeyFwdToChild:
          CFI Block cfiBlock356 Using cfiCommon0
          CFI Function APSME_KeyFwdToChild
        CODE
// 2324 {
        FUNCALL APSME_KeyFwdToChild, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_KeyFwdToChild, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2325   // verify from Trust Center
// 2326   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_131:
        JNZ     ??APSME_KeyFwdToChild_0
// 2327   {
// 2328     // check for initial NWK key
// 2329     if ( ( ind->keyType == KEY_TYPE_NWK ) ||
// 2330          ( ind->keyType == 6            ) )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??APSME_KeyFwdToChild_1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??APSME_KeyFwdToChild_2
// 2331     {
// 2332       // set association status to authenticated
// 2333       ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
??APSME_KeyFwdToChild_1:
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine59_0 & 0xFFFF
// 2334     }
??CrossCallReturnLabel_102:
        LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
// 2335 
// 2336     return TRUE;
??APSME_KeyFwdToChild_2:
        MOV     R1,#0x1
        SJMP    ??APSME_KeyFwdToChild_3
// 2337   }
// 2338 
// 2339   return FALSE;
??APSME_KeyFwdToChild_0:
        MOV     R1,#0x0
??APSME_KeyFwdToChild_3:
        LJMP    ??Subroutine69_0 & 0xFFFF
// 2340 }
          CFI EndBlock cfiBlock356
// 2341 
// 2342 /******************************************************************************
// 2343  * @fn          ZDSecMgrAddLinkKey
// 2344  *
// 2345  * @brief       Add the application link key to ZDSecMgr. Also mark the device
// 2346  *              as authenticated in the authenticateOption. Note that this function
// 2347  *              is hardwared to CBKE right now.
// 2348  *
// 2349  * @param       shortAddr - short address of the partner device
// 2350  * @param       extAddr - extended address of the partner device
// 2351  * @param       key - link key
// 2352  *
// 2353  * @return      ZStatus_t
// 2354  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2355 ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
ZDSecMgrAddLinkKey:
          CFI Block cfiBlock357 Using cfiCommon0
          CFI Function ZDSecMgrAddLinkKey
        CODE
// 2356 {
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, APSME_LinkKeySet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrWriteNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2357   uint16           ami;
// 2358   ZDSecMgrEntry_t* entry;
// 2359 
// 2360   /* Store the device address in the addr manager */
// 2361   if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JZ      ??ZDSecMgrAddLinkKey_0
// 2362   {
// 2363     /* Adding to Addr Manager fails */
// 2364     return ZFailure;
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAddLinkKey_1
// 2365   }
// 2366 
// 2367   /* Lookup entry using specified address index */
// 2368   ZDSecMgrEntryLookupAMI( ami, &entry );
??ZDSecMgrAddLinkKey_0:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_98:
        LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
// 2369 
// 2370   // If no existing entry, create one
// 2371   if ( entry == NULL )
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_133:
        JNZ     ??CrossCallReturnLabel_120
// 2372   {
// 2373     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
        MOV     A,R1
        JNZ     ??ZDSecMgrAddLinkKey_2
// 2374     {
// 2375       entry->ami = ami;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine29 & 0xFFFF
// 2376     }
??CrossCallReturnLabel_168:
        LCALL   ??Subroutine61_0 & 0xFFFF
// 2377     else
// 2378     {
// 2379       /* Security Manager full */
// 2380       return ZBufferFull;
// 2381     }
// 2382   }
// 2383   // Write the link key
// 2384   APSME_LinkKeySet( extAddr, key );
??CrossCallReturnLabel_120:
        ; Setup parameters for call to function APSME_LinkKeySet
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
// 2385 
// 2386 #if defined (TC_LINKKEY_JOIN)
// 2387   // Mark the device as authenticated.
// 2388   ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
// 2389 #endif
// 2390 
// 2391 #if defined NV_RESTORE
// 2392   ZDSecMgrWriteNV();  // Write the new established link key to NV.
        ; Setup parameters for call to function ZDSecMgrWriteNV
        LCALL   `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
// 2393 #endif
// 2394 
// 2395   return ZSuccess;
        MOV     R1,#0x0
??ZDSecMgrAddLinkKey_1:
        MOV     A,#0x4
        LJMP    ??Subroutine68_0 & 0xFFFF
??ZDSecMgrAddLinkKey_2:
        MOV     R1,#0x11
        SJMP    ??ZDSecMgrAddLinkKey_1
// 2396 }
          CFI EndBlock cfiBlock357
// 2397 
// 2398 /******************************************************************************
// 2399  * @fn          ZDSecMgrInitNV
// 2400  *
// 2401  * @brief       Initialize the SecMgr entry data in NV with all values set to 0
// 2402  *
// 2403  * @param       none
// 2404  *
// 2405  * @return      uint8 - <osal_nv_item_init> return codes
// 2406  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2407 uint8 ZDSecMgrInitNV(void)
ZDSecMgrInitNV:
          CFI Block cfiBlock358 Using cfiCommon0
          CFI Function ZDSecMgrInitNV
        CODE
// 2408 {
        FUNCALL ZDSecMgrInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2409 
// 2410   uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE,
// 2411                 (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        MOV     R6,A
// 2412 
// 2413   // If the item does not already exist, set all values to 0
// 2414   if (rtrn != SUCCESS)
        JZ      ??ZDSecMgrInitNV_0
// 2415   {
// 2416     nvDeviceListHdr_t hdr;
// 2417     hdr.numRecs = 0;
        LCALL   ?Subroutine18 & 0xFFFF
// 2418     osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
// 2419   }
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2420 
// 2421   rtrn |= osal_nv_item_init( ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN,
// 2422                              zgApsTrustCenterAddr );
// 2423 
// 2424   return rtrn;
??ZDSecMgrInitNV_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     ?V0,#zgApsTrustCenterAddr & 0xff
        MOV     ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#0x71
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        ORL     A,R6
        MOV     R1,A
        MOV     A,#0x2
        LJMP    ??Subroutine68_0 & 0xFFFF
// 2425 }
          CFI EndBlock cfiBlock358
// 2426 
// 2427 #if defined ( NV_RESTORE )
// 2428 /*********************************************************************
// 2429  * @fn      ZDSecMgrWriteNV()
// 2430  *
// 2431  * @brief   Save off the APS link key list to NV
// 2432  *
// 2433  * @param   none
// 2434  *
// 2435  * @return  none
// 2436  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2437 static void ZDSecMgrWriteNV( void )
ZDSecMgrWriteNV:
          CFI Block cfiBlock359 Using cfiCommon0
          CFI Function ZDSecMgrWriteNV
        CODE
// 2438 {
        FUNCALL ZDSecMgrWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2439   uint16 i;
// 2440   nvDeviceListHdr_t hdr;
// 2441 
// 2442   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine12 & 0xFFFF
// 2443 
// 2444   if (ZDSecMgrEntries != NULL)
??CrossCallReturnLabel_80:
        JZ      ??ZDSecMgrWriteNV_0
// 2445   {
// 2446     for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
// 2447     {
// 2448       // Save off the record
// 2449       osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 2450                     (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
// 2451                     sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
??ZDSecMgrWriteNV_1:
        MOV     ?V0,R6
        MOV     ?V1,R7
        MOV     A,?V0
        MOV     B,#0x5
        MUL     AB
        MOV     ?V0,A
        MOV     R0,B
        MOV     B,#0x5
        MOV     A,?V1
        MUL     AB
        ADD     A,R0
        MOV     ?V1,A
        ; Setup parameters for call to function osal_nv_write
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,?V0
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V1
        MOV     ?V3,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V2,#0x5
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_175:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2452 
// 2453       if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,?V0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrWriteNV_2
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDSecMgrWriteNV_2:
        JZ      ??ZDSecMgrWriteNV_3
// 2454       {
// 2455         hdr.numRecs++;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine34 & 0xFFFF
// 2456       }
// 2457     }
??CrossCallReturnLabel_28:
        MOVX    @DPTR,A
??ZDSecMgrWriteNV_3:
        INC     R6
        MOV     A,R6
        JNZ     ??ZDSecMgrWriteNV_4
        INC     R7
??ZDSecMgrWriteNV_4:
        LCALL   ?Subroutine39 & 0xFFFF
// 2458   }
??CrossCallReturnLabel_31:
        JC      ??ZDSecMgrWriteNV_1
// 2459 
// 2460   // Save off the header
// 2461   osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
??ZDSecMgrWriteNV_0:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2462 }
        MOV     A,#0x2
        LJMP    ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock359

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond360 Using cfiCommon0
          CFI Function ZDSecMgrWriteNV
          CFI Conditional ??CrossCallReturnLabel_175
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond361 Using cfiCommon0
          CFI (cfiCond361) Function ZDSecMgrSetDefaultNV
          CFI (cfiCond361) Conditional ??CrossCallReturnLabel_176
          CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond361) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond361) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond361) CFA_SP SP+-2
          CFI (cfiCond361) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker362 Using cfiCommon1
          CFI (cfiPicker362) NoFunction
          CFI (cfiPicker362) Picker
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R2,B
          CFI EndBlock cfiCond360
          CFI EndBlock cfiCond361
          CFI EndBlock cfiPicker362
        REQUIRE ??Subroutine76_0
        ; // Fall through to label ??Subroutine76_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine76_0:
          CFI Block cfiCond363 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_174
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond364 Using cfiCommon0
          CFI (cfiCond364) Function ZDSecMgrWriteNV
          CFI (cfiCond364) Conditional ??CrossCallReturnLabel_175
          CFI (cfiCond364) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond364) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond364) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond364) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond364) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond364) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond364) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond364) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond364) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond364) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond364) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond364) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond364) CFA_SP SP+-2
          CFI (cfiCond364) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond365 Using cfiCommon0
          CFI (cfiCond365) Function ZDSecMgrSetDefaultNV
          CFI (cfiCond365) Conditional ??CrossCallReturnLabel_176
          CFI (cfiCond365) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond365) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond365) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond365) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond365) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond365) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond365) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond365) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond365) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond365) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond365) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond365) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond365) CFA_SP SP+-2
          CFI (cfiCond365) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker366 Using cfiCommon1
          CFI (cfiPicker366) NoFunction
          CFI (cfiPicker366) Picker
        MOV     B,#0x5
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_178:
        RET
          CFI EndBlock cfiCond363
          CFI EndBlock cfiCond364
          CFI EndBlock cfiCond365
          CFI EndBlock cfiPicker366

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine51:
          CFI Block cfiCond367 Using cfiCommon0
          CFI Function ZDSecMgrWriteNV
          CFI Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_175
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond368 Using cfiCommon0
          CFI (cfiCond368) Function ZDSecMgrSetDefaultNV
          CFI (cfiCond368) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_176
          CFI (cfiCond368) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond368) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond368) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond368) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond368) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond368) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond368) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond368) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond368) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond368) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond368) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond368) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond368) CFA_SP SP+-4
          CFI (cfiCond368) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond369 Using cfiCommon0
          CFI (cfiCond369) Function ZDSecMgrEntryFree
          CFI (cfiCond369) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_174
          CFI (cfiCond369) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond369) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond369) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond369) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond369) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond369) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond369) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond369) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond369) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond369) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond369) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond369) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond369) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond369) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond369) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond369) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond369) CFA_SP SP+-4
          CFI (cfiCond369) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond370 Using cfiCommon0
          CFI (cfiCond370) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond370) Conditional ??CrossCallReturnLabel_177
          CFI (cfiCond370) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond370) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond370) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond370) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond370) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond370) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond370) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond370) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond370) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond370) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond370) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond370) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond370) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond370) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond370) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond370) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond370) CFA_SP SP+-2
          CFI (cfiCond370) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker371 Using cfiCommon1
          CFI (cfiPicker371) NoFunction
          CFI (cfiPicker371) Picker
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x4c
        MOV     R3,#0x0
        RET
          CFI EndBlock cfiCond367
          CFI EndBlock cfiCond368
          CFI EndBlock cfiCond369
          CFI EndBlock cfiCond370
          CFI EndBlock cfiPicker371

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond372 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond373 Using cfiCommon0
          CFI (cfiCond373) Function ZDSecMgrWriteNV
          CFI (cfiCond373) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond373) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond373) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond373) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond373) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond373) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond373) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond373) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond373) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond373) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond373) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond373) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond373) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond373) CFA_SP SP+-2
          CFI (cfiCond373) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker374 Using cfiCommon1
          CFI (cfiPicker374) NoFunction
          CFI (cfiPicker374) Picker
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        RET
          CFI EndBlock cfiCond372
          CFI EndBlock cfiCond373
          CFI EndBlock cfiPicker374
// 2463 #endif // NV_RESTORE
// 2464 
// 2465 #if defined ( NV_RESTORE )
// 2466 /******************************************************************************
// 2467  * @fn          ZDSecMgrRestoreFromNV
// 2468  *
// 2469  * @brief       Restore the APS Link Key entry data from NV. It does not restore
// 2470  *              the key data itself as they remain in NV until they are used.
// 2471  *              Only list data is restored.
// 2472  *              Restore zgTrustCenterAdress from NV.
// 2473  *
// 2474  * @param       none
// 2475  *
// 2476  * @return      None.
// 2477  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2478 static void ZDSecMgrRestoreFromNV( void )
ZDSecMgrRestoreFromNV:
          CFI Block cfiBlock375 Using cfiCommon0
          CFI Function ZDSecMgrRestoreFromNV
        CODE
// 2479 {
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 2480   nvDeviceListHdr_t hdr;
// 2481   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 2482 
// 2483   if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
// 2484       ((hdr.numRecs > 0) && (hdr.numRecs <= ZDSECMGR_ENTRY_MAX)))
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
        JZ      $+5
        LJMP    ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_134:
        JNZ     $+5
        LJMP    ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x4
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JC      $+5
        LJMP    ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
// 2485   {
// 2486     uint8 x;
// 2487 
// 2488     pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
// 2489 
// 2490     for (x = 0; x < ZDSECMGR_ENTRY_MAX; x++)
        MOV     ?V0,#0x0
// 2491     {
// 2492       if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
// 2493                         (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
// 2494                         sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
??ZDSecMgrRestoreFromNV_1:
        ; Setup parameters for call to function osal_nv_read
        MOV     A,?V0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     ?V5,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V4,#0x5
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,?V0
        MOV     B,#0x5
        MUL     AB
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_177:
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
        JZ      $+5
        LJMP    ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
// 2495       {
// 2496         // update data only for valid entries
// 2497         if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
        MOV     A,?V0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_26:
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrRestoreFromNV_3
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDSecMgrRestoreFromNV_3:
        JNZ     $+5
        LJMP    ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
// 2498         {
// 2499           if (pApsLinkKey != NULL)
        MOV     A,?V2
        ORL     A,?V3
        JNZ     $+5
        LJMP    ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
// 2500           {
// 2501             // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
// 2502             osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0,
// 2503                          sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        MOV     A,?V0
        MOV     B,#0x5
        MUL     AB
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V4,#0x18
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x0
        MOV     R5,#0x0
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 2504 
// 2505             // set new values for the counter
// 2506             pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
        MOV     A,?V2
        ADD     A,#0x10
        MOV     R0,A
        CLR     A
        ADDC    A,?V3
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPTR,#__Constant_3e9
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V4
        LCALL   ?L_ADD_TO_X
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_17:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R4,B
        MOV     B,#0x9
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     A,#ApsLinkKeyFrmCntr & 0xff
        ADD     A,R0
        MOV     R4,A
        MOV     A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
        ADDC    A,R1
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?XLOAD_R0123
        MOV     A,R4
        ADD     A,#-0x9
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#-0x13
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
// 2507 
// 2508             // restore values for counters in RAM
// 2509             ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr =
// 2510                                             pApsLinkKey->txFrmCntr;
// 2511 
// 2512             ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr =
// 2513                                             pApsLinkKey->rxFrmCntr;
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL   ?XLOAD_R0123
        MOV     A,R4
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#-0x13
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
// 2514 
// 2515             osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0,
// 2516                           sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V4,#0x18
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 2517 
// 2518             // clear copy of key in RAM
// 2519             osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2520           }
// 2521         }
// 2522       }
// 2523     }
??ZDSecMgrRestoreFromNV_2:
        INC     ?V0
        MOV     A,?V0
        CLR     C
        SUBB    A,#0x3
        JNC     $+5
        LJMP    ??ZDSecMgrRestoreFromNV_1 & 0xFFFF
// 2524 
// 2525     if (pApsLinkKey != NULL)
        MOV     A,?V2
        ORL     A,?V3
        JZ      ??ZDSecMgrRestoreFromNV_0
// 2526     {
// 2527       osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2528     }
// 2529   }
// 2530 
// 2531   osal_nv_read( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
??ZDSecMgrRestoreFromNV_0:
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,#zgApsTrustCenterAddr & 0xff
        MOV     ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0,#0x8
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x71
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 2532 }
        MOV     A,#0x2
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock375

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond376 Using cfiCommon0
          CFI Function ZDSecMgrEntryNew
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond377 Using cfiCommon0
          CFI (cfiCond377) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond377) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond377) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond377) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond377) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond377) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond377) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond377) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond377) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond377) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond377) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond377) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond377) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond377) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond377) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond377) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond377) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond377) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond377) CFA_SP SP+-2
          CFI (cfiCond377) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker378 Using cfiCommon1
          CFI (cfiPicker378) NoFunction
          CFI (cfiPicker378) Picker
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond376
          CFI EndBlock cfiCond377
          CFI EndBlock cfiPicker378

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond379 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond380 Using cfiCommon0
          CFI (cfiCond380) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond380) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond380) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond380) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond380) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond380) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond380) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond380) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond380) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond380) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond380) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond380) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond380) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond380) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond380) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond380) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond380) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond380) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond380) CFA_SP SP+-2
          CFI (cfiCond380) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond381 Using cfiCommon0
          CFI (cfiCond381) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond381) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond381) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond381) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond381) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond381) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond381) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond381) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond381) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond381) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond381) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond381) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond381) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond381) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond381) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond381) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond381) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond381) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond381) CFA_SP SP+-2
          CFI (cfiCond381) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker382 Using cfiCommon1
          CFI (cfiPicker382) NoFunction
          CFI (cfiPicker382) Picker
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     DPL,R0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond379
          CFI EndBlock cfiCond380
          CFI EndBlock cfiCond381
          CFI EndBlock cfiPicker382
// 2533 #endif // NV_RESTORE
// 2534 
// 2535 /*********************************************************************
// 2536  * @fn          ZDSecMgrSetDefaultNV
// 2537  *
// 2538  * @brief       Write the defaults to NV for Entry table and for APS key data table
// 2539  *
// 2540  * @param       none
// 2541  *
// 2542  * @return      none
// 2543  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2544 void ZDSecMgrSetDefaultNV( void )
ZDSecMgrSetDefaultNV:
          CFI Block cfiBlock383 Using cfiCommon0
          CFI Function ZDSecMgrSetDefaultNV
        CODE
// 2545 {
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2546   uint16 i;
// 2547   nvDeviceListHdr_t hdr;
// 2548   ZDSecMgrEntry_t secMgrEntry;
// 2549   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 2550 
// 2551   // Initialize the header
// 2552   hdr.numRecs = 0;
        LCALL   ?Subroutine18 & 0xFFFF
// 2553 
// 2554   // clear the header
// 2555   osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2556 
// 2557   osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2558 
// 2559   for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
// 2560   {
// 2561     // Clear the record
// 2562     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 2563                 (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
// 2564                         sizeof(ZDSecMgrEntry_t), &secMgrEntry );
??ZDSecMgrSetDefaultNV_0:
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0,#0x5
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        LCALL   ?Subroutine35 & 0xFFFF
// 2565   }
??CrossCallReturnLabel_176:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        INC     R6
        MOV     A,R6
        JNZ     ??ZDSecMgrSetDefaultNV_1
        INC     R7
??ZDSecMgrSetDefaultNV_1:
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_32:
        JC      ??ZDSecMgrSetDefaultNV_0
// 2566 
// 2567   pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2568 
// 2569   if (pApsLinkKey != NULL)
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZDSecMgrSetDefaultNV_2
// 2570   {
// 2571     osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2572 
// 2573     for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
// 2574     {
// 2575       // Clear the record
// 2576       osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
// 2577                     sizeof(APSME_LinkKeyData_t), pApsLinkKey);
??ZDSecMgrSetDefaultNV_3:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V2,#0x18
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        LCALL   ?Subroutine40 & 0xFFFF
// 2578     }
??CrossCallReturnLabel_35:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        INC     R6
        MOV     A,R6
        JNZ     ??ZDSecMgrSetDefaultNV_4
        INC     R7
??ZDSecMgrSetDefaultNV_4:
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_33:
        JC      ??ZDSecMgrSetDefaultNV_3
// 2579 
// 2580     osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2581   }
// 2582 }
??ZDSecMgrSetDefaultNV_2:
        MOV     A,#0x7
          CFI EndBlock cfiBlock383
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock384 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 33)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock384
        REQUIRE ??Subroutine77_0
        ; // Fall through to label ??Subroutine77_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine77_0:
          CFI Block cfiBlock385 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock385

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond386 Using cfiCommon0
          CFI Function ZDSecMgrWriteNV
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond387 Using cfiCommon0
          CFI (cfiCond387) Function ZDSecMgrSetDefaultNV
          CFI (cfiCond387) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond387) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond387) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond387) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond387) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond387) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond387) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond387) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond387) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond387) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond387) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond387) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond387) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond387) CFA_SP SP+-2
          CFI (cfiCond387) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond388 Using cfiCommon0
          CFI (cfiCond388) Function ZDSecMgrSetDefaultNV
          CFI (cfiCond388) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond388) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond388) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond388) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond388) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond388) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond388) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond388) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond388) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond388) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond388) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond388) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond388) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond388) CFA_SP SP+-2
          CFI (cfiCond388) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond389 Using cfiCommon0
          CFI (cfiCond389) Function ZDSecMgrSaveApsLinkKey
          CFI (cfiCond389) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond389) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond389) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond389) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond389) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond389) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond389) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond389) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond389) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond389) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond389) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond389) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond389) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond389) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond389) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond389) CFA_SP SP+-2
          CFI (cfiCond389) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker390 Using cfiCommon1
          CFI (cfiPicker390) NoFunction
          CFI (cfiPicker390) Picker
        CLR     C
        SUBB    A,#0x3
        MOV     A,R7
        SUBB    A,#0x0
        RET
          CFI EndBlock cfiCond386
          CFI EndBlock cfiCond387
          CFI EndBlock cfiCond388
          CFI EndBlock cfiCond389
          CFI EndBlock cfiPicker390

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond391 Using cfiCommon0
          CFI Function ZDSecMgrInitNV
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond392 Using cfiCommon0
          CFI (cfiCond392) Function ZDSecMgrSetDefaultNV
          CFI (cfiCond392) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond392) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond392) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond392) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond392) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond392) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond392) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond392) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond392) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond392) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond392) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond392) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond392) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond392) CFA_SP SP+-2
          CFI (cfiCond392) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker393 Using cfiCommon1
          CFI (cfiPicker393) NoFunction
          CFI (cfiPicker393) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond391
          CFI EndBlock cfiCond392
          CFI EndBlock cfiPicker393
// 2583 
// 2584 #if defined ( NV_RESTORE )
// 2585 /*********************************************************************
// 2586  * @fn      ZDSecMgrUpdateNV()
// 2587  *
// 2588  * @brief   Updates one entry of the APS link key table to NV
// 2589  *
// 2590  * @param   index - to the entry in security manager table
// 2591  *
// 2592  * @return  none
// 2593  */
// 2594 static void ZDSecMgrUpdateNV( uint16 index )
// 2595 {
// 2596   nvDeviceListHdr_t hdr;
// 2597 
// 2598   if (ZDSecMgrEntries != NULL)
// 2599   {
// 2600     // Save off the record
// 2601     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 2602                    (uint16)((sizeof(nvDeviceListHdr_t)) + (index * sizeof(ZDSecMgrEntry_t))),
// 2603                    sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[index] );
// 2604   }
// 2605 
// 2606   if (osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS)
// 2607   {
// 2608     if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
// 2609     {
// 2610       if (hdr.numRecs > 0)
// 2611       {
// 2612         hdr.numRecs--;
// 2613       }
// 2614     }
// 2615     else
// 2616     {
// 2617       hdr.numRecs++;
// 2618     }
// 2619 
// 2620     // Save off the header
// 2621     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
// 2622   }
// 2623 }
// 2624 #endif // NV_RESTORE
// 2625 
// 2626 /******************************************************************************
// 2627  * @fn          ZDSecMgrAPSRemove
// 2628  *
// 2629  * @brief       Remove device from network.
// 2630  *
// 2631  * @param       nwkAddr - device's NWK address
// 2632  * @param       extAddr - device's Extended address
// 2633  * @param       parentAddr - parent's NWK address
// 2634  *
// 2635  * @return      ZStatus_t
// 2636  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2637 ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
ZDSecMgrAPSRemove:
          CFI Block cfiBlock394 Using cfiCommon0
          CFI Function ZDSecMgrAPSRemove
        CODE
// 2638 {
        FUNCALL ZDSecMgrAPSRemove, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 8)
// 2639   ZDSecMgrDevice_t device;
// 2640 
// 2641   if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
// 2642        ( extAddr == NULL )              ||
// 2643        ( parentAddr == INVALID_NODE_ADDR ) )
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??ZDSecMgrAPSRemove_0
        MOV     A,#-0x1
        XRL     A,R3
??ZDSecMgrAPSRemove_0:
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,R4
        ORL     A,R5
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine72_0 & 0xFFFF
??CrossCallReturnLabel_156:
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDSecMgrAPSRemove_2
        MOV     A,#-0x1
        XRL     A,R1
??ZDSecMgrAPSRemove_2:
        JNZ     ??ZDSecMgrAPSRemove_3
// 2644   {
// 2645     return ( ZFailure );
??ZDSecMgrAPSRemove_1:
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAPSRemove_4
// 2646   }
// 2647 
// 2648   device.nwkAddr = nwkAddr;
??ZDSecMgrAPSRemove_3:
        LCALL   ?Subroutine20 & 0xFFFF
// 2649   device.extAddr = extAddr;
??CrossCallReturnLabel_8:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 2650   device.parentAddr = parentAddr;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ??Subroutine67_0 & 0xFFFF
// 2651 
// 2652   // remove device
// 2653   ZDSecMgrDeviceRemove( &device );
??CrossCallReturnLabel_146:
        LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
// 2654 
// 2655   return ( ZSuccess );
        MOV     R1,#0x0
??ZDSecMgrAPSRemove_4:
        LJMP    ?Subroutine9 & 0xFFFF
// 2656 }
          CFI EndBlock cfiBlock394
// 2657 
// 2658 /******************************************************************************
// 2659  * @fn          APSME_TCLinkKeyInit
// 2660  *
// 2661  * @brief       Initialize the NV table for preconfigured TC link key
// 2662  *
// 2663  *              When zgUseDefaultTCL is set to TRUE, the default preconfig
// 2664  *              Trust Center Link Key is written to NV. A single tclk is used
// 2665  *              by all devices joining the network.
// 2666  *
// 2667  * @param       setDefault - TRUE to set default values
// 2668  *
// 2669  * @return      none
// 2670  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2671 void APSME_TCLinkKeyInit(uint8 setDefault)
APSME_TCLinkKeyInit:
          CFI Block cfiBlock395 Using cfiCommon0
          CFI Function APSME_TCLinkKeyInit
        CODE
// 2672 {
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R1
        MOV     R6,A
// 2673   uint8             i;
// 2674   APSME_TCLinkKey_t tcLinkKey;
// 2675   uint8             rtrn;
// 2676 
// 2677   // Initialize all NV items for preconfigured TCLK
// 2678   for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 2679   {
// 2680     // Making sure data is cleared for every key all the time
// 2681     osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2682 
// 2683     // Initialize first element of the table with the default TCLK
// 2684     if((i == 0) && ( zgUseDefaultTCLK == TRUE ))
        MOV     DPTR,#zgUseDefaultTCLK
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??APSME_TCLinkKeyInit_0
// 2685     {
// 2686       osal_memset( tcLinkKey.extAddr, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2687       osal_memcpy( tcLinkKey.key, defaultTCLinkKey, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#defaultTCLinkKey & 0xff
        MOV     ?V1,#(defaultTCLinkKey >> 8) & 0xff
        MOV     ?V2,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
// 2688     }
// 2689 
// 2690     // If the item doesn't exist in NV memory, create and initialize
// 2691     // it with the default value passed in, either defaultTCLK or 0
// 2692     rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i),
// 2693                                sizeof(APSME_TCLinkKey_t), &tcLinkKey);
// 2694 
// 2695     if (rtrn == SUCCESS)
??APSME_TCLinkKeyInit_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R1
        JZ      $+5
        LJMP    ??APSME_TCLinkKeyInit_1 & 0xFFFF
// 2696     {
// 2697       // set the Frame counters to 0 to existing keys in NV
// 2698       osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0,
// 2699                      sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0,#0x20
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
// 2700 
// 2701 #if defined ( NV_RESTORE )
// 2702       if (setDefault == TRUE)
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??APSME_TCLinkKeyInit_2
// 2703       {
// 2704         // clear the value stored in NV
// 2705         tcLinkKey.txFrmCntr = 0;
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine75_0 & 0xFFFF
// 2706       }
??CrossCallReturnLabel_169:
        SJMP    ??APSME_TCLinkKeyInit_3
// 2707       else
// 2708       {
// 2709         // increase the value stored in NV
// 2710         tcLinkKey.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
??APSME_TCLinkKeyInit_2:
        MOV     DPTR,#__Constant_b
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_ADD_TO_X
// 2711       }
// 2712 #else
// 2713       // Clear the counters if NV_RESTORE is not enabled and this NV item
// 2714       // already existed in the NV memory
// 2715       tcLinkKey.txFrmCntr = 0;
// 2716       tcLinkKey.rxFrmCntr = 0;
// 2717 #endif  // NV_RESTORE
// 2718 
// 2719       osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
// 2720                       sizeof(APSME_TCLinkKey_t), &tcLinkKey );
??APSME_TCLinkKeyInit_3:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0,#0x20
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
// 2721 
// 2722       // set initial values for counters in RAM
// 2723       TCLinkKeyFrmCntr[i].txFrmCntr = tcLinkKey.txFrmCntr;
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#TCLinkKeyFrmCntr
        LCALL   ?XSTORE_R0123
// 2724       TCLinkKeyFrmCntr[i].rxFrmCntr = tcLinkKey.rxFrmCntr;
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#TCLinkKeyFrmCntr + 4
        LCALL   ?XSTORE_R0123
// 2725     }
// 2726   }
// 2727 
// 2728   // clear copy of key in RAM
// 2729   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
??APSME_TCLinkKeyInit_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2730 
// 2731 }
        MOV     A,#0x20
        LJMP    ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock395
// 2732 
// 2733 /******************************************************************************
// 2734  * @fn          APSME_TCLinkKeySync
// 2735  *
// 2736  * @brief       Sync Trust Center LINK key data.
// 2737  *
// 2738  * @param       srcAddr - [in] srcAddr
// 2739  * @param       si      - [in, out] SSP_Info_t
// 2740  *
// 2741  * @return      ZStatus_t
// 2742  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2743 ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
APSME_TCLinkKeySync:
          CFI Block cfiBlock396 Using cfiCommon0
          CFI Function APSME_TCLinkKeySync
        CODE
// 2744 {
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_IsDefaultTCLK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2745   uint8 i, selectedId = ZDSECMGR_TC_DEVICE_MAX;
// 2746   ZStatus_t status = ZSecNoKey;
        MOV     ?V2,#-0x5f
// 2747   APSME_TCLinkKey_t tcLinkKey;
// 2748   uint32 *tclkRxFrmCntr;
// 2749   uint16 originatorAddr = APSME_TRUSTCENTER_NWKADDR;
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
// 2750 
// 2751   // Look up the IEEE address of the trust center if it's available
// 2752   if ( AddrMgrExtAddrValid( si->extAddr ) == FALSE )
        ; Setup parameters for call to function AddrMgrExtAddrValid
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeySync_0
// 2753   {
// 2754     APSME_LookupExtAddr( srcAddr, si->extAddr );
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,R6
        ADD     A,#0x6
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     R2,?V4
        MOV     R3,?V5
        LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
        SJMP    ??APSME_TCLinkKeySync_1
// 2755   }
// 2756   else if ( osal_ExtAddrEqual( si->extAddr, _NIB.nwkCoordExtAddress ) )
??APSME_TCLinkKeySync_0:
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R4,#(_NIB + 25) & 0xff
        MOV     R5,#((_NIB + 25) >> 8) & 0xff
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JZ      ??APSME_TCLinkKeySync_1
// 2757   {
// 2758     originatorAddr = _NIB.nwkCoordAddress;
        MOV     DPTR,#_NIB + 23
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 2759     // in case originated not from our parent, use the default TC address
// 2760   }
// 2761 
// 2762   // Look up the TC link key associated with the device
// 2763   // or the default TC link key (extAddr is all FFs), whichever is found
// 2764   for ( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 2765   {
// 2766     // Read entry i of the TC link key table from NV
// 2767     osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
// 2768                  sizeof(APSME_TCLinkKey_t), &tcLinkKey );
??APSME_TCLinkKeySync_1:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     ?V4,#0x20
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
// 2769 
// 2770     // prefer exact match over default
// 2771     if ( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeySync_2
// 2772     {
// 2773       selectedId = i;
// 2774       // break from the loop
// 2775       break;
// 2776     }
// 2777     else if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
        ; Setup parameters for call to function APSME_IsDefaultTCLK
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
        MOV     A,R1
        JZ      ??APSME_TCLinkKeySync_3
// 2778     {
// 2779       if ( ( originatorAddr != APSME_TRUSTCENTER_NWKADDR ) && ( si->keyID == SEC_KEYID_TRANSPORT )
// 2780            && (i == 0) && ( zgUseDefaultTCLK == TRUE ) )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??APSME_TCLinkKeySync_2
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??APSME_TCLinkKeySync_2
        MOV     DPTR,#zgUseDefaultTCLK
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??APSME_TCLinkKeySync_3
// 2781       {
// 2782         //if a Key is received directly from an unusual TC,
// 2783         // don't use the first element of the table initialized with the default TCLK
// 2784         continue;
// 2785       }
// 2786       if ( selectedId == ZDSECMGR_TC_DEVICE_MAX )
// 2787       {
// 2788         selectedId = i;
// 2789       }
// 2790     }
// 2791   }
// 2792 
// 2793   if ( selectedId < ZDSECMGR_TC_DEVICE_MAX )
// 2794   {
// 2795      // Only for UNIQUE keys, verify that the incoming frame counter is valid
// 2796     if ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY )
??APSME_TCLinkKeySync_2:
        MOV     DPTR,#zgApsLinkKeyType
        MOVX    A,@DPTR
        JNZ     ??APSME_TCLinkKeySync_4
// 2797     {
// 2798       tclkRxFrmCntr = &TCLinkKeyFrmCntr[selectedId].rxFrmCntr;
// 2799 
// 2800       if ( si->frmCntr >= *tclkRxFrmCntr )
        MOV     DPTR,#TCLinkKeyFrmCntr + 4
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL   ?UL_GT_X
        JC      ??APSME_TCLinkKeySync_5
// 2801       {
// 2802         // set the keyNvId to use
// 2803         si->keyNvId = (ZCD_NV_TCLK_TABLE_START + selectedId);
        LCALL   ?Subroutine41 & 0xFFFF
// 2804 
// 2805         // update the rx frame counter
// 2806         *tclkRxFrmCntr = si->frmCntr + 1;
??CrossCallReturnLabel_38:
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0
        LCALL   ?L_ADD_X
        MOV     DPTR,#TCLinkKeyFrmCntr + 4
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
// 2807 
// 2808         status = ZSuccess;
        SJMP    ??CrossCallReturnLabel_39
// 2809       }
// 2810       else
// 2811       {
// 2812         status = ZSecOldFrmCount;
??APSME_TCLinkKeySync_5:
        MOV     ?V2,#-0x5e
        SJMP    ??APSME_TCLinkKeySync_3
// 2813       }
// 2814     }
// 2815     else
// 2816     {
// 2817       // set the keyNvId to use
// 2818       si->keyNvId = (ZCD_NV_TCLK_TABLE_START + selectedId);
??APSME_TCLinkKeySync_4:
        LCALL   ?Subroutine41 & 0xFFFF
// 2819 
// 2820       status = ZSuccess;
??CrossCallReturnLabel_39:
        MOV     ?V2,#0x0
// 2821     }
// 2822   }
// 2823 
// 2824   // clear copy of key in RAM
// 2825   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
??APSME_TCLinkKeySync_3:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2826 
// 2827   return status;
        MOV     R1,?V2
        MOV     A,#0x20
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock396
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
// 2828 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock397 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock397

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond398 Using cfiCommon0
          CFI Function APSME_TCLinkKeySync
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond399 Using cfiCommon0
          CFI (cfiCond399) Function APSME_TCLinkKeySync
          CFI (cfiCond399) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond399) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond399) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond399) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond399) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond399) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond399) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond399) CFA_SP SP+-2
          CFI (cfiCond399) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker400 Using cfiCommon1
          CFI (cfiPicker400) NoFunction
          CFI (cfiPicker400) Picker
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond398
          CFI EndBlock cfiCond399
          CFI EndBlock cfiPicker400

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond401 Using cfiCommon0
          CFI Function ZDSecMgrTransportKeyInd
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond402 Using cfiCommon0
          CFI (cfiCond402) Function APSME_TCLinkKeySync
          CFI (cfiCond402) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond402) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond402) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond402) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond402) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond402) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond402) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond402) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond402) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond402) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond402) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond402) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond402) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond402) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond402) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond402) CFA_SP SP+-2
          CFI (cfiCond402) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond403 Using cfiCommon0
          CFI (cfiCond403) Function APSME_TCLinkKeySync
          CFI (cfiCond403) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond403) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond403) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond403) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond403) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond403) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond403) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond403) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond403) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond403) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond403) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond403) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond403) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond403) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond403) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond403) CFA_SP SP+-2
          CFI (cfiCond403) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond404 Using cfiCommon0
          CFI (cfiCond404) Function APSME_TCLinkKeySync
          CFI (cfiCond404) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond404) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond404) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond404) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond404) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond404) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond404) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond404) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond404) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond404) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond404) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond404) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond404) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond404) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond404) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond404) CFA_SP SP+-2
          CFI (cfiCond404) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker405 Using cfiCommon1
          CFI (cfiPicker405) NoFunction
          CFI (cfiPicker405) Picker
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        RET
          CFI EndBlock cfiCond401
          CFI EndBlock cfiCond402
          CFI EndBlock cfiCond403
          CFI EndBlock cfiCond404
          CFI EndBlock cfiPicker405

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond406 Using cfiCommon0
          CFI Function APSME_TCLinkKeySync
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond407 Using cfiCommon0
          CFI (cfiCond407) Function APSME_TCLinkKeySync
          CFI (cfiCond407) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond407) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond407) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond407) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond407) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond407) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond407) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond407) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond407) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond407) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond407) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond407) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond407) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond407) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond407) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond407) CFA_SP SP+-2
          CFI (cfiCond407) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker408 Using cfiCommon1
          CFI (cfiPicker408) NoFunction
          CFI (cfiPicker408) Picker
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond406
          CFI EndBlock cfiCond407
          CFI EndBlock cfiPicker408
// 2829 
// 2830 /******************************************************************************
// 2831  * @fn          APSME_TCLinkKeyLoad
// 2832  *
// 2833  * @brief       Load Trust Center LINK key data.
// 2834  *
// 2835  * @param       dstAddr - [in] dstAddr
// 2836  * @param       si      - [in, out] SSP_Info_t
// 2837  *
// 2838  * @return      ZStatus_t
// 2839  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2840 ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
APSME_TCLinkKeyLoad:
          CFI Block cfiBlock409 Using cfiCommon0
          CFI Function APSME_TCLinkKeyLoad
        CODE
// 2841 {
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, APSME_IsDefaultTCLK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 45
        MOV     A,#-0x2d
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 61)
        MOV     ?V0,R4
        MOV     ?V1,R5
// 2842   uint8 i;
// 2843   ZStatus_t status = ZSecNoKey;
        MOV     R6,#-0x5f
// 2844   APSME_TCLinkKey_t tcLinkKey;
// 2845   AddrMgrEntry_t addrEntry;
// 2846   uint32 *tclkTxFrmCntr;
// 2847   uint8 extAddrFound;
// 2848   uint8 defaultTCLKIdx = ZDSECMGR_TC_DEVICE_MAX;
// 2849 
// 2850   // Look up the ami of the srcAddr if available
// 2851   addrEntry.user    = ADDRMGR_USER_DEFAULT;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
// 2852   addrEntry.nwkAddr = dstAddr;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine47 & 0xFFFF
// 2853 
// 2854   extAddrFound = AddrMgrExtAddrValid( si->extAddr );
??CrossCallReturnLabel_58:
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     A,R4
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
        MOV     A,R1
        MOV     R7,A
// 2855 
// 2856   // Look up the TC link key associated with the device
// 2857   // or the master TC link key (ami = 0xFFFF), whichever is found
// 2858   for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 2859   {
// 2860     // Read entry i of the TC link key table from NV
// 2861     osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
// 2862                  sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 63)
        MOV     ?V2,#0x20
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 65)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 61)
// 2863 
// 2864     if( extAddrFound && AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
        MOV     A,R7
        JZ      ??APSME_TCLinkKeyLoad_0
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP102_8
        MOV     A,?V0
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeyLoad_1
// 2865     {
// 2866       status = ZSuccess;
// 2867 
// 2868       break; // break from the loop
// 2869     }
// 2870 
// 2871     if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
??APSME_TCLinkKeyLoad_0:
        ; Setup parameters for call to function APSME_IsDefaultTCLK
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
        MOV     A,R1
        JZ      ??APSME_TCLinkKeyLoad_2
// 2872     {
// 2873       if ( !extAddrFound && ( !APSME_IsDistributedSecurity() ) )
        MOV     A,R7
        JNZ     ??APSME_TCLinkKeyLoad_1
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV     A,R1
// 2874       {
// 2875         status = ZSuccess;
// 2876 
// 2877         break; // break from the loop
// 2878       }
// 2879 
// 2880       // Remember the last default TCLK index
// 2881       defaultTCLKIdx = i;
// 2882     }
// 2883   }
// 2884 
// 2885   if ( (status != ZSuccess) && (defaultTCLKIdx < ZDSECMGR_TC_DEVICE_MAX) )
// 2886   {
// 2887     // Exact match was not found; use the last default TC Link Key
// 2888     i = defaultTCLKIdx;
// 2889     status = ZSuccess;
// 2890   }
// 2891 
// 2892   if ( status == ZSuccess )
??APSME_TCLinkKeyLoad_1:
        MOV     R6,#0x0
// 2893   {
// 2894     tclkTxFrmCntr = &TCLinkKeyFrmCntr[i].txFrmCntr;
// 2895 
// 2896     // set the keyNvId to use
// 2897     si->keyNvId = (ZCD_NV_TCLK_TABLE_START + i);
        MOV     A,?V0
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2898 
// 2899     // update link key related fields
// 2900     si->keyID   = SEC_KEYID_LINK;
        MOV     A,?V0
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
// 2901     si->frmCntr = *tclkTxFrmCntr;
        MOV     DPTR,#TCLinkKeyFrmCntr
        LCALL   ?XLOAD_R0123
        MOV     A,?V0
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
// 2902 
// 2903     // update outgoing frame counter
// 2904     (*tclkTxFrmCntr)++;
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#TCLinkKeyFrmCntr
        MOV     R0,#?V0
        LCALL   ?L_ADD_TO_X
// 2905 
// 2906 #if defined ( NV_RESTORE )
// 2907     // write periodically to NV
// 2908     if ( !(*tclkTxFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
        MOV     DPTR,#TCLinkKeyFrmCntr
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?UL_DIV_MOD
        MOV     A,?V4
        ORL     A,?V5
        ORL     A,?V6
        ORL     A,?V7
        JNZ     ??APSME_TCLinkKeyLoad_3
// 2909     {
// 2910       // set the flag to write key to NV
// 2911       TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
        MOV     DPTR,#TCLinkKeyFrmCntr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2912 
// 2913       // Notify the ZDApp that the frame counter has changed.
// 2914       osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#0x4
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
        SJMP    ??APSME_TCLinkKeyLoad_3
??APSME_TCLinkKeyLoad_2:
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
// 2915     }
// 2916 #endif
// 2917   }
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??APSME_TCLinkKeyLoad_3
// 2918 
// 2919   // If no TC link key found, remove the device from the address manager
// 2920   if ( (status != ZSuccess) && (AddrMgrEntryLookupNwk(&addrEntry) == TRUE) )
// 2921   {
// 2922     AddrMgrEntryRelease( &addrEntry );
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
// 2923   }
// 2924 
// 2925     // clear copy of key in RAM
// 2926   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
??APSME_TCLinkKeyLoad_3:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2927 
// 2928   return status;
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x2d
        LJMP    ?Subroutine1 & 0xFFFF
// 2929 }
          CFI EndBlock cfiBlock409
// 2930 
// 2931 /******************************************************************************
// 2932  * @fn          APSME_IsDefaultTCLK
// 2933  *
// 2934  * @brief       Return TRUE or FALSE based on the extended address.  If the
// 2935  *              input ext address is all FFs, it means the trust center link
// 2936  *              assoiciated with the address is the default trust center link key
// 2937  *
// 2938  * @param       extAddr - [in] extended address
// 2939  *
// 2940  * @return      uint8 TRUE/FALSE
// 2941  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2942 uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
APSME_IsDefaultTCLK:
          CFI Block cfiBlock410 Using cfiCommon0
          CFI Function APSME_IsDefaultTCLK
        CODE
// 2943 {
        FUNCALL APSME_IsDefaultTCLK, osal_isbufset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2944   return osal_isbufset( extAddr, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_isbufset
        MOV     R4,#0x8
        MOV     R1,#-0x1
        LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        LJMP    ??Subroutine62_0 & 0xFFFF
// 2945 }
          CFI EndBlock cfiBlock410
// 2946 
// 2947 /******************************************************************************
// 2948  * @fn          ZDSecMgrNwkKeyInit
// 2949  *
// 2950  * @brief       Initialize the NV items for
// 2951  *                  ZCD_NV_NWKKEY,
// 2952  *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and
// 2953  *                  ZCD_NV_NWK_ALTERN_KEY_INFO
// 2954  *
// 2955  * @param       setDefault
// 2956  *
// 2957  * @return      none
// 2958  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2959 void ZDSecMgrNwkKeyInit(uint8 setDefault)
ZDSecMgrNwkKeyInit:
          CFI Block cfiBlock411 Using cfiCommon0
          CFI Function ZDSecMgrNwkKeyInit
        CODE
// 2960 {
        FUNCALL ZDSecMgrNwkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 38
        MOV     A,#-0x26
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        MOV     R6,A
// 2961   uint8 status;
// 2962   nwkKeyDesc nwkKey;
// 2963 
// 2964   // Initialize NV items for NWK key, this structure contains the frame counter
// 2965   // and is only used when NV_RESTORE is enabled
// 2966   nwkActiveKeyItems keyItems;
// 2967 
// 2968   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2969 
// 2970   status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
// 2971 
// 2972 #if defined ( NV_RESTORE )
// 2973   // reset the values of NV items if NV_RESTORE is not enabled
// 2974   if ((status == SUCCESS) && (setDefault == TRUE))
        ; Setup parameters for call to function osal_nv_item_init
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDSecMgrNwkKeyInit_0
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??ZDSecMgrNwkKeyInit_0
// 2975   {
// 2976     // clear NV data to default values
// 2977     osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x15
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 2978   }
// 2979 #else
// 2980   (void)setDefault;   // to eliminate compiler warning
// 2981 
// 2982   // reset the values of NV items if NV_RESTORE is not enabled
// 2983   if (status == SUCCESS)
// 2984   {
// 2985     osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
// 2986   }
// 2987 #endif // defined (NV_RESTORE)
// 2988 
// 2989   // Initialize NV items for NWK Active and Alternate keys. These items are used
// 2990   // all the time, independently of NV_RESTORE being set or not
// 2991   osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
??ZDSecMgrNwkKeyInit_0:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2992 
// 2993   status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
// 2994 
// 2995 #if defined ( NV_RESTORE )
// 2996   // reset the values of NV items if NV_RESTORE is not enabled
// 2997   if ((status == SUCCESS) && (setDefault == TRUE))
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x3a
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDSecMgrNwkKeyInit_1
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??ZDSecMgrNwkKeyInit_1
// 2998   {
// 2999     // clear NV data to default values
// 3000     osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x11
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3a
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3001   }
// 3002 #else
// 3003   // reset the values of NV items if NV_RESTORE is not enabled
// 3004   if (status == SUCCESS)
// 3005   {
// 3006     osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
// 3007   }
// 3008 #endif // defined (NV_RESTORE)
// 3009 
// 3010   status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
// 3011 
// 3012 #if defined ( NV_RESTORE )
// 3013   // reset the values of NV items if NV_RESTORE is not enabled
// 3014   if ((status == SUCCESS) && (setDefault == TRUE))
??ZDSecMgrNwkKeyInit_1:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x3b
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDSecMgrNwkKeyInit_2
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??ZDSecMgrNwkKeyInit_2
// 3015   {
// 3016     // clear NV data to default values
// 3017     osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x11
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3b
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3018   }
// 3019 #else
// 3020   // reset the values of NV items if NV_RESTORE is not enabled
// 3021   if (status == SUCCESS)
// 3022   {
// 3023     osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
// 3024   }
// 3025 #endif // defined (NV_RESTORE)
// 3026 
// 3027 }
??ZDSecMgrNwkKeyInit_2:
          CFI EndBlock cfiBlock411
        REQUIRE ?Subroutine11
        ; // Fall through to label ?Subroutine11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiBlock412 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 48)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x26
        LJMP    ??Subroutine68_0 & 0xFFFF
          CFI EndBlock cfiBlock412
// 3028 
// 3029 /*********************************************************************
// 3030  * @fn          ZDSecMgrReadKeyFromNv
// 3031  *
// 3032  * @brief       Looks for a specific key in NV based on Index value
// 3033  *
// 3034  * @param   keyNvId - Index of key to look in NV
// 3035  *                    valid values are:
// 3036  *                    ZCD_NV_NWK_ACTIVE_KEY_INFO
// 3037  *                    ZCD_NV_NWK_ALTERN_KEY_INFO
// 3038  *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
// 3039  *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
// 3040  *                    ZCD_NV_PRECFGKEY
// 3041  *
// 3042  * @param  *keyinfo - Data is read into this buffer.
// 3043  *
// 3044  * @return  SUCCESS if NV data was copied to the keyinfo parameter .
// 3045  *          Otherwise, NV_OPER_FAILED for failure.
// 3046  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3047 ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
ZDSecMgrReadKeyFromNv:
          CFI Block cfiBlock413 Using cfiCommon0
          CFI Function ZDSecMgrReadKeyFromNv
        CODE
// 3048 {
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 3049   if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
// 3050       (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
        MOV     A,#0x3a
        XRL     A,R2
        JNZ     ??ZDSecMgrReadKeyFromNv_0
        MOV     A,R3
??ZDSecMgrReadKeyFromNv_0:
        JZ      ??ZDSecMgrReadKeyFromNv_1
        MOV     A,#0x3b
        XRL     A,R2
        ORL     A,R3
        JNZ     ??ZDSecMgrReadKeyFromNv_2
// 3051   {
// 3052     // get NWK active or alternate key from NV
// 3053     return (osal_nv_read(keyNvId,
// 3054                          osal_offsetof(nwkKeyDesc, key),
// 3055                          SEC_KEY_LEN,
// 3056                          keyinfo));
??ZDSecMgrReadKeyFromNv_1:
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x10
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x1
        SJMP    ??ZDSecMgrReadKeyFromNv_3
          CFI CFA_XSP16 add(XSP16, 10)
// 3057   }
// 3058   else if ((keyNvId >= ZCD_NV_TCLK_TABLE_START) &&
// 3059            (keyNvId < (ZCD_NV_TCLK_TABLE_START + ZDSECMGR_TC_DEVICE_MAX)))
??ZDSecMgrReadKeyFromNv_2:
        MOV     A,R2
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#-0x2
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZDSecMgrReadKeyFromNv_4
// 3060   {
// 3061     // Read entry keyNvId of the TC link key table from NV. keyNvId should be
// 3062     // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
// 3063     return (osal_nv_read(keyNvId,
// 3064                          osal_offsetof(APSME_TCLinkKey_t, key),
// 3065                          SEC_KEY_LEN,
// 3066                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x10
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x8
        SJMP    ??ZDSecMgrReadKeyFromNv_3
          CFI CFA_XSP16 add(XSP16, 10)
// 3067   }
// 3068   else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
// 3069            (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
??ZDSecMgrReadKeyFromNv_4:
        DEC     R1
        CLR     C
        MOV     A,R0
        LCALL   ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_70:
        JNC     ??ZDSecMgrReadKeyFromNv_5
// 3070   {
// 3071     // Read entry keyNvId of the APS link key table from NV. keyNvId should be
// 3072     // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
// 3073     return (osal_nv_read(keyNvId,
// 3074                          osal_offsetof(APSME_LinkKeyData_t, key),
// 3075                          SEC_KEY_LEN,
// 3076                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x10
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
??ZDSecMgrReadKeyFromNv_3:
        MOV     R5,#0x0
        SJMP    ??ZDSecMgrReadKeyFromNv_6
          CFI CFA_XSP16 add(XSP16, 10)
// 3077   }
// 3078   else if (keyNvId == ZCD_NV_PRECFGKEY)
??ZDSecMgrReadKeyFromNv_5:
        MOV     A,#0x62
        XRL     A,R2
        ORL     A,R3
        JNZ     ??ZDSecMgrReadKeyFromNv_7
// 3079   {
// 3080     // Read entry keyNvId of the Preconfig key from NV.
// 3081     return (osal_nv_read(keyNvId,
// 3082                          0,
// 3083                          SEC_KEY_LEN,
// 3084                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x10
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x62
        MOV     R3,#0x0
??ZDSecMgrReadKeyFromNv_6:
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        SJMP    ??ZDSecMgrReadKeyFromNv_8
// 3085   }
// 3086 
// 3087   return NV_OPER_FAILED;
??ZDSecMgrReadKeyFromNv_7:
        MOV     R1,#0xa
??ZDSecMgrReadKeyFromNv_8:
        LJMP    ??Subroutine69_0 & 0xFFFF
// 3088 }
          CFI EndBlock cfiBlock413
// 3089 
// 3090 /******************************************************************************
// 3091  * @fn          ZDSecMgrApsLinkKeyInit
// 3092  *
// 3093  * @brief       Initialize the NV table for Application link keys
// 3094  *
// 3095  * @param       none
// 3096  *
// 3097  * @return      none
// 3098  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3099 void ZDSecMgrApsLinkKeyInit(void)
ZDSecMgrApsLinkKeyInit:
          CFI Block cfiBlock414 Using cfiCommon0
          CFI Function ZDSecMgrApsLinkKeyInit
        CODE
// 3100 {
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 24
        MOV     A,#-0x18
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
// 3101   APSME_LinkKeyData_t pApsLinkKey;
// 3102   uint8 i;
// 3103   uint8 status;
// 3104 
// 3105   // Initialize all NV items for APS link key, if not exist already.
// 3106   osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 3107 
// 3108   for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     R6,#0x0
// 3109   {
// 3110     status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i),
// 3111                                sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
??ZDSecMgrApsLinkKeyInit_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
        ADDC    A,#0x2
        MOV     R3,A
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
// 3112 
// 3113 #if defined ( NV_RESTORE )
// 3114     (void)status;   // to eliminate compiler warning
// 3115 #else
// 3116     // reset the values of NV items if NV_RESTORE is not enabled
// 3117     if (status == SUCCESS)
// 3118     {
// 3119       osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
// 3120                     sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
// 3121 
// 3122     }
// 3123 #endif // defined (NV_RESTORE)
// 3124   }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDSecMgrApsLinkKeyInit_0
// 3125 }
        MOV     A,#0x18
        LJMP    ??Subroutine68_0 & 0xFFFF
          CFI EndBlock cfiBlock414
// 3126 
// 3127 /******************************************************************************
// 3128  * @fn          ZDSecMgrInitNVKeyTables
// 3129  *
// 3130  * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
// 3131  *
// 3132  * @param       setDefault - TRUE to set default values
// 3133  *
// 3134  * @return      none
// 3135  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3136 void ZDSecMgrInitNVKeyTables(uint8 setDefault)
ZDSecMgrInitNVKeyTables:
          CFI Block cfiBlock415 Using cfiCommon0
          CFI Function ZDSecMgrInitNVKeyTables
        CODE
// 3137 {
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrNwkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrApsLinkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, APSME_TCLinkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 3138   ZDSecMgrNwkKeyInit(setDefault);
        ; Setup parameters for call to function ZDSecMgrNwkKeyInit
        LCALL   `??ZDSecMgrNwkKeyInit::?relay`; Banked call to: ZDSecMgrNwkKeyInit
// 3139   ZDSecMgrApsLinkKeyInit();
        ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
        LCALL   `??ZDSecMgrApsLinkKeyInit::?relay`; Banked call to: ZDSecMgrApsLinkKeyInit
// 3140   APSME_TCLinkKeyInit(setDefault);
        ; Setup parameters for call to function APSME_TCLinkKeyInit
        MOV     A,R6
        MOV     R1,A
        LCALL   `??APSME_TCLinkKeyInit::?relay`; Banked call to: APSME_TCLinkKeyInit
// 3141 }
        LJMP    ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock415
// 3142 
// 3143 /******************************************************************************
// 3144  * @fn          ZDSecMgrSaveApsLinkKey
// 3145  *
// 3146  * @brief       Save APS Link Key to NV. It will loop through all the keys
// 3147  *              to see which one to save.
// 3148  *
// 3149  * @param       none
// 3150  *
// 3151  * @return      none
// 3152  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3153 void ZDSecMgrSaveApsLinkKey(void)
ZDSecMgrSaveApsLinkKey:
          CFI Block cfiBlock416 Using cfiCommon0
          CFI Function ZDSecMgrSaveApsLinkKey
        CODE
// 3154 {
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 3155   APSME_LinkKeyData_t *pKeyData = NULL;
// 3156   int i;
// 3157 
// 3158   pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
// 3159 
// 3160   if (pKeyData != NULL)
        MOV     A,R2
        ORL     A,?V3
        JNZ     $+5
        LJMP    ??ZDSecMgrSaveApsLinkKey_0 & 0xFFFF
// 3161   {
// 3162     // checks all pending flags to know which one to save
// 3163     for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
        MOV     R6,#0x0
        MOV     R7,#0x0
// 3164     {
// 3165       if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
??ZDSecMgrSaveApsLinkKey_1:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x9
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(ApsLinkKeyFrmCntr + 8) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((ApsLinkKeyFrmCntr + 8) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrSaveApsLinkKey_2 & 0xFFFF
// 3166       {
// 3167         // retrieve key from NV
// 3168         if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
// 3169                          sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0,#0x18
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??ZDSecMgrSaveApsLinkKey_2
// 3170         {
// 3171           pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x9
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#ApsLinkKeyFrmCntr & 0xff
        ADD     A,R0
        MOV     ?V0,A
        MOV     A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V1,A
        MOV     DPL,?V0
        MOV     DPH,A
        LCALL   ?XLOAD_R0123
        MOV     A,?V2
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
// 3172           pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XLOAD_R0123
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL   ?XSTORE_R0123
// 3173 
// 3174           // Write the APS link key back to the NV
// 3175           osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
// 3176                         sizeof(APSME_LinkKeyData_t), pKeyData);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V4,#0x18
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 3177 
// 3178           // clear the pending write flag
// 3179           ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 3180         }
// 3181       }
// 3182     }
??ZDSecMgrSaveApsLinkKey_2:
        INC     R6
        MOV     A,R6
        JNZ     ??ZDSecMgrSaveApsLinkKey_3
        INC     R7
??ZDSecMgrSaveApsLinkKey_3:
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
// 3183 
// 3184     // clear copy of key in RAM
// 3185     osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 3186 
// 3187     osal_mem_free(pKeyData);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3188   }
// 3189 }
??ZDSecMgrSaveApsLinkKey_0:
        LJMP    ?Subroutine6 & 0xFFFF
          CFI EndBlock cfiBlock416

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond417 Using cfiCommon0
          CFI Function ZDSecMgrRestoreFromNV
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond418 Using cfiCommon0
          CFI (cfiCond418) Function ZDSecMgrSaveApsLinkKey
          CFI (cfiCond418) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond418) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond418) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond418) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond418) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond418) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond418) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond418) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond418) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond418) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond418) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond418) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond418) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond418) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond418) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond418) CFA_SP SP+-2
          CFI (cfiCond418) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker419 Using cfiCommon1
          CFI (cfiPicker419) NoFunction
          CFI (cfiPicker419) Picker
        MOV     A,?V2
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond417
          CFI EndBlock cfiCond418
          CFI EndBlock cfiPicker419

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond420 Using cfiCommon0
          CFI Function ZDSecMgrSetDefaultNV
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond421 Using cfiCommon0
          CFI (cfiCond421) Function ZDSecMgrSaveApsLinkKey
          CFI (cfiCond421) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond421) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond421) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond421) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond421) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond421) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond421) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond421) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond421) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond421) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond421) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond421) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond421) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond421) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond421) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond421) CFA_SP SP+-2
          CFI (cfiCond421) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond422 Using cfiCommon0
          CFI (cfiCond422) Function ZDSecMgrSaveApsLinkKey
          CFI (cfiCond422) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond422) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond422) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond422) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond422) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond422) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond422) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond422) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond422) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond422) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond422) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond422) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond422) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond422) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond422) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond422) CFA_SP SP+-2
          CFI (cfiCond422) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker423 Using cfiCommon1
          CFI (cfiPicker423) NoFunction
          CFI (cfiPicker423) Picker
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x2
        MOV     R3,A
        RET
          CFI EndBlock cfiCond420
          CFI EndBlock cfiCond421
          CFI EndBlock cfiCond422
          CFI EndBlock cfiPicker423
// 3190 
// 3191 /******************************************************************************
// 3192  * @fn          ZDSecMgrSaveTCLinkKey
// 3193  *
// 3194  * @brief       Save TC Link Key to NV. It will loop through all the keys
// 3195  *              to see which one to save.
// 3196  *
// 3197  * @param       none
// 3198  *
// 3199  * @return      none
// 3200  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3201 void ZDSecMgrSaveTCLinkKey(void)
ZDSecMgrSaveTCLinkKey:
          CFI Block cfiBlock424 Using cfiCommon0
          CFI Function ZDSecMgrSaveTCLinkKey
        CODE
// 3202 {
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3203   APSME_TCLinkKey_t *pKeyData = NULL;
// 3204   uint16 i;
// 3205 
// 3206   pKeyData = (APSME_TCLinkKey_t *)osal_mem_alloc(sizeof(APSME_TCLinkKey_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x20
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
// 3207 
// 3208   if (pKeyData != NULL)
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??ZDSecMgrSaveTCLinkKey_0 & 0xFFFF
// 3209   {
// 3210     for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 3211     {
// 3212       if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
        MOV     DPTR,#TCLinkKeyFrmCntr + 8
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrSaveTCLinkKey_1
// 3213       {
// 3214         if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0,
// 3215                          sizeof(APSME_TCLinkKey_t), pKeyData) == SUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V2,#0x20
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        JNZ     ??ZDSecMgrSaveTCLinkKey_1
// 3216         {
// 3217           pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
        MOV     DPTR,#TCLinkKeyFrmCntr
        LCALL   ?XLOAD_R0123
        MOV     A,?V0
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
// 3218           pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
        MOV     DPTR,#TCLinkKeyFrmCntr + 4
        LCALL   ?XLOAD_R0123
        MOV     A,?V0
        ADD     A,#0x1c
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
// 3219 
// 3220           // Write the TC link key back to the NV
// 3221           osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0,
// 3222                         sizeof(APSME_TCLinkKey_t), pKeyData);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 3223 
// 3224           // clear the pending write flag
// 3225           TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
        MOV     DPTR,#TCLinkKeyFrmCntr + 8
        CLR     A
        MOVX    @DPTR,A
// 3226         }
// 3227       }
// 3228     }
// 3229       // clear copy of key in RAM
// 3230     osal_memset( pKeyData, 0x00, sizeof(APSME_TCLinkKey_t) );
??ZDSecMgrSaveTCLinkKey_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 3231 
// 3232     osal_mem_free(pKeyData);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3233   }
// 3234 }
??ZDSecMgrSaveTCLinkKey_0:
        LJMP    ??Subroutine77_0 & 0xFFFF
          CFI EndBlock cfiBlock424
// 3235 
// 3236 /******************************************************************************
// 3237  * @fn          ZDSecMgrUpdateTCAddress
// 3238  *
// 3239  * @brief       Update Trust Center address and save to NV.
// 3240  *
// 3241  * @param       extAddr - [in] extended address or NULL if no TC protected
// 3242  *
// 3243  * @return      none
// 3244  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3245 void ZDSecMgrUpdateTCAddress( uint8 *extAddr )
ZDSecMgrUpdateTCAddress:
          CFI Block cfiBlock425 Using cfiCommon0
          CFI Function ZDSecMgrUpdateTCAddress
        CODE
// 3246 {
        FUNCALL ZDSecMgrUpdateTCAddress, APSME_SetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateTCAddress, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3247   uint8 noTCAddress[Z_EXTADDR_LEN] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
        MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x8
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 3248   APSME_SetRequest( apsTrustCenterAddress, 0, ( extAddr != NULL) ? extAddr : noTCAddress );
        MOV     A,R2
        ORL     A,R3
        JNZ     ??ZDSecMgrUpdateTCAddress_0
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R2,?V0
        MOV     R3,?V1
??ZDSecMgrUpdateTCAddress_0:
        ; Setup parameters for call to function APSME_SetRequest
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#-0x55
        LCALL   `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
// 3249 #if defined ( NV_RESTORE )
// 3250   osal_nv_write( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0,#zgApsTrustCenterAddr & 0xff
        MOV     ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0,#0x8
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x71
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3251 #endif
// 3252 }
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock425
// 3253 
// 3254 #if defined ( ZBA_FALLBACK_NWKKEY )
// 3255 /******************************************************************************
// 3256  * @fn          ZDSecMgrFallbackNwkKey
// 3257  *
// 3258  * @brief       Use the ZBA fallback network key.
// 3259  *
// 3260  * @param       none
// 3261  *
// 3262  * @return      none
// 3263  */
// 3264 void ZDSecMgrFallbackNwkKey( void )
// 3265 {
// 3266   if ( !_NIB.nwkKeyLoaded )
// 3267   {
// 3268     uint8 fallbackKey[SEC_KEY_LEN];
// 3269 
// 3270     ZDSecMgrReadKeyFromNv( ZCD_NV_PRECFGKEY, fallbackKey );
// 3271     SSP_UpdateNwkKey( fallbackKey, 0);
// 3272     SSP_SwitchNwkKey( 0 );
// 3273 
// 3274     // clear local copy of key
// 3275     osal_memset( fallbackKey, 0x00, SEC_KEY_LEN );
// 3276 
// 3277     // handle next step in authentication process
// 3278     ZDSecMgrAuthNwkKey();
// 3279   }
// 3280 }
// 3281 #endif // defined ( ZBA_FALLBACK_NWKKEY )
// 3282 
// 3283 #if defined ( NV_RESTORE )
// 3284 /******************************************************************************
// 3285  * @fn          ZDSecMgrClearNVKeyValues
// 3286  *
// 3287  * @brief       If NV_RESTORE is enabled and the status of the network needs
// 3288  *              default values this fuction clears ZCD_NV_NWKKEY,
// 3289  *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link
// 3290  *
// 3291  * @param       none
// 3292  *
// 3293  * @return      none
// 3294  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3295 void ZDSecMgrClearNVKeyValues(void)
ZDSecMgrClearNVKeyValues:
          CFI Block cfiBlock426 Using cfiCommon0
          CFI Function ZDSecMgrClearNVKeyValues
        CODE
// 3296 {
        FUNCALL ZDSecMgrClearNVKeyValues, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrClearNVKeyValues, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrClearNVKeyValues, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrClearNVKeyValues, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrClearNVKeyValues, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 38
        MOV     A,#-0x26
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3297   nwkActiveKeyItems keyItems;
// 3298   nwkKeyDesc nwkKey;
// 3299 
// 3300   osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 3301 
// 3302   osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x15
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3303 
// 3304   // Initialize NV items for NWK Active and Alternate keys.
// 3305   osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 3306 
// 3307   osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x11
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3a
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3308 
// 3309   osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x11
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3b
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3310 }
        LJMP    ?Subroutine11 & 0xFFFF
          CFI EndBlock cfiBlock426

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDSecMgrAppKeyType>`:
        DATA8
        DB 3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAddrStore::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrExtAddrStore::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrExtAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrExtAddrLookup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrExtAddrLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAddrClear::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAddrClear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookupAMI::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookupAMI

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookupExt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookupExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookupExtGetIndex::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookupExtGetIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookupAMIGetIndex::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookupAMIGetIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryFree::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAppKeyGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAppKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAppKeyReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAppKeyReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSendNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSendNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceRemoveByExtAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceRemoveByExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceRemove::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceValidateRM::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceValidateRM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceValidate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceValidate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceJoin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceJoinDirect::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceJoinDirect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceJoinFwd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceJoinFwd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAssocDeviceAuth::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAssocDeviceAuth

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAuthNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAuthNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrConfig::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrPermitJoining::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrPermitJoining

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrPermitJoiningTimeout::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrPermitJoiningTimeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrNewDeviceEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrNewDeviceEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrTCExtAddrCheck::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrTCExtAddrCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrTCDataLoad::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrTCDataLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrTransportKeyInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrTransportKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrUpdateDeviceInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrUpdateDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrRemoveDeviceInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrRemoveDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrRequestKeyInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrRequestKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSwitchKeyInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSwitchKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrUpdateNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrUpdateNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSwitchNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSwitchNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrRequestAppKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrRequestAppKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAppKeyTypeSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAppKeyTypeSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_LinkKeySet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_LinkKeySet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAuthenticationSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAuthenticationSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAuthenticationCheck::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAuthenticationCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_LinkKeyNVIdGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_LinkKeyNVIdGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_IsLinkKeyValid::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_IsLinkKeyValid

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_KeyFwdToChild::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_KeyFwdToChild

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAddLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAddLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrInitNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrInitNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrWriteNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrWriteNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrRestoreFromNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrRestoreFromNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSetDefaultNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSetDefaultNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAPSRemove::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAPSRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_TCLinkKeyInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_TCLinkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_TCLinkKeySync::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_TCLinkKeySync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_TCLinkKeyLoad::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_TCLinkKeyLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_IsDefaultTCLK::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_IsDefaultTCLK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrNwkKeyInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrNwkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrReadKeyFromNv::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrReadKeyFromNv

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrApsLinkKeyInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrApsLinkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrInitNVKeyTables::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrInitNVKeyTables

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSaveApsLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSaveApsLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSaveTCLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSaveTCLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrUpdateTCAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrUpdateTCAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrClearNVKeyValues::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrClearNVKeyValues

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e9:
        DD 1001

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_b:
        DD 11

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_a:
        DD 10

        END
// 3311 #endif // defined ( NV_RESTORE )
// 3312 
// 3313 /******************************************************************************
// 3314 ******************************************************************************/
// 
// 8 050 bytes in segment BANKED_CODE
//   390 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    24 bytes in segment XDATA_ROM_C
//    81 bytes in segment XDATA_Z
// 
// 8 441 bytes of CODE  memory
//     8 bytes of CONST memory (+ 16 bytes shared)
//    82 bytes of XDATA memory
//
//Errors: none
//Warnings: none
