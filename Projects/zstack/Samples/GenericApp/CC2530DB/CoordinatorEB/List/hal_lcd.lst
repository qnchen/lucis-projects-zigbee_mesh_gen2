###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  17:49:10
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2530EB\hal_lcd.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2530EB\hal_lcd.c" -D ZTOOL_P1 -D MT_TASK
#        -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_RESTORE -D
#        NV_INIT -D NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D OPEN_FCS -lC
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\hal_lcd.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\hal_lcd.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\hal\target\CC2530EB\hal_lcd.c
      1          #include "LCD128_64.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
      2          #include "Font.h"
      3          #include "hal_lcd.h"
      4          #include "OSAL.h"
      5          #include "string.h"
      6          
      7          /****************************************************
      8          * B) Command Table per device *
      9          ****************************************************/
     10          #define 	DisplayOff 	0xAE
     11          #define 	DisplayOn 	0xAF
     12          #define 	DisplayStart 	0x40
     13          #define 	PageAddr 	0xB0
     14          #define 	ColAddrHi 	0x10
     15          #define 	ColAddrLo 	0x00
     16          #define 	SegRemapOff 	0xA0
     17          #define 	SegRemapOn 	0xA1
     18          #define 	NormalDisp 	0xA6
     19          #define 	ReverseDisp 	0xA7
     20          #define 	ExitEntireD 	0xA4
     21          #define 	EntEntireD 	0xA5
     22          #define 	EnterRMW 	0xE0
     23          #define 	ExitRMW 	0xEE
     24          #define 	SWRest 		0xE2
     25          #define 	ComRemapOff 	0xC0
     26          #define 	ComRemapOn 	0xC8
     27          #define 	PwrCtrlReg 	0x28
     28          #define 	OPampBuffer 	0x01
     29          #define 	IntReg 		0x02
     30          #define 	IntVolBstr 	0x04
     31          #define 	IntRegRatio 	0x20
     32          #define 	ContCtrlReg 	0x81
     33          #define 	CmdMuxRatio 	0x48
     34          #define 	CmdBiasRatio 	0x50
     35          #define 	DispOffset 	0x44
     36          #define 	IconModeOn 	0xA3
     37          #define 	IconModeOff 	0xA2
     38          #define 	NlineInver 	0x4C
     39          #define 	DCDCconver 	0x64
     40          #define 	PowersavStandby 0xA8
     41          #define 	PowersavSleep 	0xA9
     42          #define 	PowersavOff 	0xE1
     43          #define 	InterOsc 	0xAB
     44          #define 	Device SSD1821 			/* device under demo */
     45          #define 	ColNo 		132 		/* number of Column/Seg on LCD glass*/
     46          #define 	RowNo 		64		/* number of Row/Com/Mux */
     47          #define 	PS 		1 		/* fixed to Parallel mode */
     48          #define 	PageNo 		10 		/* Total no of RAM pages */
     49          #define 	IconPage 	10 		/* Icon Page number */
     50          #define 	All0 		6 		/* 3 for all 0, 4 for all 1 */
     51          #define 	All1 		4
     52          #define 	iIntRegValue 	1 		/*Internal Regulator Resistor Ratio Value */
     53          #define 	iContCtrlRegValue 16 		/* Contrast Control Register Value */
     54          #define 	iIntRegValuea 	20 		/*Internal Regulator Resistor Ratio Value */
     55          #define 	iContCtrlRegValuea 16 		/* Contrast Control Register Value */
     56          #define 	iIntRegValueb 	1 		/*Internal Regulator Resistor Ratio Value */
     57          #define 	iContCtrlRegValueb 16 		/* Contrast Control Register Value */
     58          #define 	MSGNo 		16
     59          #define 	MSGLength 	22
     60          #define 	SSLNameNo 	4
     61          #define 	DevicePg 	0 		//RAM page for showing device name
     62          #define 	FeaturePg 	1 		//RAM page for showing feature
     63          #define 	GRAPHICNo 	13
     64          #define 	xlogo 		38
     65          #define 	ylogo 		5
     66          #define 	xsolomon 	91
     67          #define 	ysolomon 	2
     68          #define 	xsystech 	81
     69          #define 	ysystech 	2
     70          #define 	xlimited 	70
     71          #define 	ylimited 	2
     72          #define 	xcc 		16
     73          #define 	ycc 		2
     74          #define 	xpageq 		128
     75          #define 	ypageq 		4
     76          #define 	horizonal 	0
     77          #define 	d_time 		60
     78          ////////////////////////////////////////////////////////////////////////////////////////////
     79          
     80          void Print8(uint16 y,uint16 x, uint8 ch[],uint16 yn);
     81          void PrintS8(uint8 xx ,uint8 yy , uint32 no,uint8 yn,uint8 le);
     82          
     83          
     84          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     85          uint8 ContrastValue =90;
   \                     ContrastValue:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ContrastValue>`
   \   000001                REQUIRE __INIT_XDATA_I
     86          void WriteLCD(uint8 fs, uint8 da);
     87          void Write595(uint8 dat);
     88          void delay_us(uint16 s);
     89          void delay1(uint8 jj);
     90          void contrastctrl(uint8 start, uint8 stop);
     91          void HalLcdInit(void);
     92          void PrintCh8(uint16 y,uint16 x, uint8 ch,uint16 yn);
     93          void upLcd( char *ptr,uint8 op );
     94          void HalLcdClearLine( uint8 line );
     95          void HalLcdWriteLoc ( uint16 valueX, uint16 valueY, uint8 option);
     96          void PrintS16(uint8 xx ,uint8 yy , uint32 no,uint8 yn,uint8 le, uint8 FloatPoint);
     97          
     98          
     99          
    100          
    101          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    102          void delay1(uint8 jj)
   \                     delay1:
    103          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    104          	uint8 i;
    105          	for(i=0; i<jj; i++);
   \   000000   7800         MOV     R0,#0x0
   \                     ??delay1_0:
   \   000002   E8           MOV     A,R0
   \   000003   C3           CLR     C
   \   000004   99           SUBB    A,R1
   \   000005   5003         JNC     ??delay1_1
   \   000007   08           INC     R0
   \   000008   80F8         SJMP    ??delay1_0
    106          }
   \                     ??delay1_1:
   \   00000A   02....       LJMP    ?BRET
    107          
    108          
    109          
    110          
    111          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    112          void delay_us(uint16 s)
   \                     delay_us:
    113          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    114          	uint16 i;
    115          	for(i=0; i<s; i++);
   \   000000   7800         MOV     R0,#0x0
   \   000002   7900         MOV     R1,#0x0
   \                     ??delay_us_0:
   \   000004   C3           CLR     C
   \   000005   E8           MOV     A,R0
   \   000006   9A           SUBB    A,R2
   \   000007   E9           MOV     A,R1
   \   000008   9B           SUBB    A,R3
   \   000009   5007         JNC     ??delay_us_1
   \   00000B   08           INC     R0
   \   00000C   E8           MOV     A,R0
   \   00000D   70F5         JNZ     ??delay_us_0
   \   00000F   09           INC     R1
   \   000010   80F2         SJMP    ??delay_us_0
    116          	for(i=0; i<s; i++);
   \                     ??delay_us_1:
   \   000012   7800         MOV     R0,#0x0
   \   000014   7900         MOV     R1,#0x0
   \                     ??delay_us_2:
   \   000016   C3           CLR     C
   \   000017   E8           MOV     A,R0
   \   000018   9A           SUBB    A,R2
   \   000019   E9           MOV     A,R1
   \   00001A   9B           SUBB    A,R3
   \   00001B   5007         JNC     ??delay_us_3
   \   00001D   08           INC     R0
   \   00001E   E8           MOV     A,R0
   \   00001F   70F5         JNZ     ??delay_us_2
   \   000021   09           INC     R1
   \   000022   80F2         SJMP    ??delay_us_2
    117                  for(i=0; i<s; i++);
   \                     ??delay_us_3:
   \   000024   7800         MOV     R0,#0x0
   \   000026   7900         MOV     R1,#0x0
   \                     ??delay_us_4:
   \   000028   C3           CLR     C
   \   000029   E8           MOV     A,R0
   \   00002A   9A           SUBB    A,R2
   \   00002B   E9           MOV     A,R1
   \   00002C   9B           SUBB    A,R3
   \   00002D   5007         JNC     ??delay_us_5
   \   00002F   08           INC     R0
   \   000030   E8           MOV     A,R0
   \   000031   70F5         JNZ     ??delay_us_4
   \   000033   09           INC     R1
   \   000034   80F2         SJMP    ??delay_us_4
    118          	for(i=0; i<s; i++);
   \                     ??delay_us_5:
   \   000036   7800         MOV     R0,#0x0
   \   000038   7900         MOV     R1,#0x0
   \                     ??delay_us_6:
   \   00003A   C3           CLR     C
   \   00003B   E8           MOV     A,R0
   \   00003C   9A           SUBB    A,R2
   \   00003D   E9           MOV     A,R1
   \   00003E   9B           SUBB    A,R3
   \   00003F   5007         JNC     ??delay_us_7
   \   000041   08           INC     R0
   \   000042   E8           MOV     A,R0
   \   000043   70F5         JNZ     ??delay_us_6
   \   000045   09           INC     R1
   \   000046   80F2         SJMP    ??delay_us_6
    119          }
   \                     ??delay_us_7:
   \   000048   02....       LJMP    ?BRET
    120          
    121          
    122          //******************************************************************************
    123          //???:void Write595(uint8 dat)
    124          //??:??
    125          //??:?
    126          //????:595???,????8?
    127          //******************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    128          void Write595(uint8 dat)
   \                     Write595:
    129          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    130          	
    131          	uint8 ii;		
    132          			
    133          	for(ii = 0 ; ii < 8; ii++)
   \   000000   7800         MOV     R0,#0x0
   \                     ??Write595_0:
   \   000002   E8           MOV     A,R0
   \   000003   C3           CLR     C
   \   000004   9408         SUBB    A,#0x8
   \   000006   5016         JNC     ??Write595_1
    134          	{
    135          		if(dat & 0x80) 	LCD_595_DAT = 1;
   \   000008   E9           MOV     A,R1
   \   000009   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000B   5004         JNC     ??Write595_2
   \   00000D   D2A0         SETB    0xa0.0
   \   00000F   8002         SJMP    ??Write595_3
    136          		else		LCD_595_DAT = 0;
   \                     ??Write595_2:
   \   000011   C2A0         CLR     0xa0.0
    137          		
    138          		dat <<= 1;
   \                     ??Write595_3:
   \   000013   E9           MOV     A,R1
   \   000014   C3           CLR     C
   \   000015   33           RLC     A
   \   000016   F9           MOV     R1,A
    139          		LCD_595_CK = 1;	
   \   000017   D295         SETB    0x90.5
    140          		LCD_595_CK = 0;
   \   000019   C295         CLR     0x90.5
    141          	}
   \   00001B   08           INC     R0
   \   00001C   80E4         SJMP    ??Write595_0
    142          
    143          #ifndef PLUG_P1_3 	
    144          		LCD_595_LD = 1; 
   \                     ??Write595_1:
   \   00001E   D293         SETB    0x90.3
    145          		LCD_595_LD = 0; 
   \   000020   C293         CLR     0x90.3
    146          #endif
    147          
    148          }
   \   000022   02....       LJMP    ?BRET
   \   000025                REQUIRE _A_P2
   \   000025                REQUIRE _A_P1
    149          
    150          
    151          
    152          
    153          //*****************************************************************************
    154          //*****************************************************************************
    155          //???:void delay(unsigned int n)
    156          //????:??????
    157          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    158          void WriteLCD(uint8 fs, uint8 da)
   \                     WriteLCD:
    159          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    160          	delay1(2);
   \   000009                ; Setup parameters for call to function delay1
   \   000009   7902         MOV     R1,#0x2
   \   00000B   12....       LCALL   `??delay1::?relay`   ; Banked call to: delay1
    161          	LCD_CS1 = 0;
   \   00000E   C294         CLR     0x90.4
    162          	LCD_RW = 0;			//???
   \   000010   C281         CLR     0x80.1
    163          	//delay1(0);	
    164          
    165          	if(fs){
   \   000012   EF           MOV     A,R7
   \   000013   6004         JZ      ??WriteLCD_0
    166          		LCD_RS = 1;	
   \   000015   D297         SETB    0x90.7
   \   000017   8002         SJMP    ??WriteLCD_1
    167          	}
    168          	else{
    169          		LCD_RS = 0;
   \                     ??WriteLCD_0:
   \   000019   C297         CLR     0x90.7
    170          	}
    171                 // delay1(0);
    172          
    173                  Write595(da);
   \                     ??WriteLCD_1:
   \   00001B                ; Setup parameters for call to function Write595
   \   00001B   EE           MOV     A,R6
   \   00001C   F9           MOV     R1,A
   \   00001D   12....       LCALL   `??Write595::?relay` ; Banked call to: Write595
    174          	LCD_E = 1;// = 1;
   \   000020   D296         SETB    0x90.6
    175                  delay1(2);
   \   000022                ; Setup parameters for call to function delay1
   \   000022   7902         MOV     R1,#0x2
   \   000024   12....       LCALL   `??delay1::?relay`   ; Banked call to: delay1
    176          	LCD_E = 0;// = 0;					
   \   000027   C296         CLR     0x90.6
    177          	//delay1(0);
    178          	LCD_CS1 = 1;
   \   000029   D294         SETB    0x90.4
    179          }
   \   00002B   7F01         MOV     R7,#0x1
   \   00002D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000030                REQUIRE _A_P1
   \   000030                REQUIRE _A_P0
    180          /*
    181          
    182          uint8 ReadLCD(uint8 fs)
    183          {
    184          	uint8 temp = 0;
    185          	LCD_CS1 = 0;
    186          	NOP;
    187          	NOP;
    188          	NOP;
    189          	NOP;
    190          	do{						
    191          		LCD_RW = 1;
    192          		LCD_RS = 0;
    193          		LCD_E = 1;
    194          		NOP;
    195          		NOP;							
    196          		temp = P1 & 0x80;			
    197          		LCD_E = 0;			
    198          
    199          	}while(temp != 0);	
    200          
    201          	if(fs){
    202          		LCD_RS = 1;	
    203          	}
    204          	else{
    205          		LCD_RS = 0;
    206          	}
    207          	
    208          	LCD_E = 1;
    209          	NOP;	
    210          	NOP;
    211          	NOP;
    212          	NOP;	
    213          	temp = P1;	
    214          	LCD_E = 0;	
    215          	LCD_CS1 = 1;
    216          	return(temp);
    217          }
    218          
    219          
    220          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    221          void SetRamAddr(uint8 x ,uint8 y)
   \                     SetRamAddr:
    222          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A..         MOV     ?V0,R2
    223          	uint8 temp;
    224          	
    225          	temp = 0x0f & x;
   \   000009   740F         MOV     A,#0xf
   \   00000B   5F           ANL     A,R7
   \   00000C   FE           MOV     R6,A
    226          	WriteLCD(COMMAND , PageAddr|temp);
   \   00000D                ; Setup parameters for call to function WriteLCD
   \   00000D   74B0         MOV     A,#-0x50
   \   00000F   4E           ORL     A,R6
   \   000010   FA           MOV     R2,A
   \   000011   7900         MOV     R1,#0x0
   \   000013   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    227          
    228          	temp = 0x0f & (y >> 4);
   \   000016   E5..         MOV     A,?V0
   \   000018   C4           SWAP    A
   \   000019   540F         ANL     A,#0xf
   \   00001B   FE           MOV     R6,A
    229          	WriteLCD(COMMAND , ColAddrHi|temp);
   \   00001C                ; Setup parameters for call to function WriteLCD
   \   00001C   7410         MOV     A,#0x10
   \   00001E   4E           ORL     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   7900         MOV     R1,#0x0
   \   000022   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    230          	temp = 0x0f & y;
   \   000025   740F         MOV     A,#0xf
   \   000027   55..         ANL     A,?V0
   \   000029   FE           MOV     R6,A
    231          	WriteLCD(COMMAND , ColAddrLo|temp);
   \   00002A                ; Setup parameters for call to function WriteLCD
   \   00002A   EE           MOV     A,R6
   \   00002B   FA           MOV     R2,A
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    232          }
   \   000031   7F01         MOV     R7,#0x1
   \   000033   02....       LJMP    ?BANKED_LEAVE_XDATA
    233          
    234          
    235          /*******************************************************************************
    236          //???:void SetContrast(uint8 Gain, uint8 Step)
    237          //??:lcd?????
    238          //??:Page-?,Col-?
    239          //??:?
    240          ********************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    241          void SetContrast(uint8 Gain, uint8 Step)
   \                     SetContrast:
    242          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    243          	WriteLCD(COMMAND , IntRegRatio | (0x0f & Gain)); 	//??????
   \   000009                ; Setup parameters for call to function WriteLCD
   \   000009   740F         MOV     A,#0xf
   \   00000B   5E           ANL     A,R6
   \   00000C   4420         ORL     A,#0x20
   \   00000E   FA           MOV     R2,A
   \   00000F   7900         MOV     R1,#0x0
   \   000011   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    244          	WriteLCD(COMMAND , ContCtrlReg); 			//?????????
   \   000014                ; Setup parameters for call to function WriteLCD
   \   000014   7A81         MOV     R2,#-0x7f
   \   000016   7900         MOV     R1,#0x0
   \   000018   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    245          	WriteLCD(COMMAND , 0x3f & Step);
   \   00001B                ; Setup parameters for call to function WriteLCD
   \   00001B   743F         MOV     A,#0x3f
   \   00001D   5F           ANL     A,R7
   \   00001E   FA           MOV     R2,A
   \   00001F   7900         MOV     R1,#0x0
   \   000021   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    246          }
   \   000024   7F01         MOV     R7,#0x1
   \   000026   02....       LJMP    ?BANKED_LEAVE_XDATA
    247          
    248          
    249          
    250          /*******************************************************************************
    251          //???:void InitDisplay(void)
    252          //??:lcd?????????
    253          //??:?
    254          //??:?
    255          ********************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          void InitDisplay(void)
   \                     InitDisplay:
    257          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    258          	WriteLCD(COMMAND , DisplayOff);			//???
   \   000004                ; Setup parameters for call to function WriteLCD
   \   000004   7AAE         MOV     R2,#-0x52
   \   000006   7900         MOV     R1,#0x0
   \   000008   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    259          	WriteLCD(COMMAND , SegRemapOn);    			//ks0713/ssd1815
   \   00000B                ; Setup parameters for call to function WriteLCD
   \   00000B   7AA1         MOV     R2,#-0x5f
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    260          	WriteLCD(COMMAND , ComRemapOn);    			//ssd1815
   \   000012                ; Setup parameters for call to function WriteLCD
   \   000012   7AC8         MOV     R2,#-0x38
   \   000014   7900         MOV     R1,#0x0
   \   000016   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    261          	SetContrast(iIntRegValue, iContCtrlRegValue); 	//???????
   \   000019                ; Setup parameters for call to function SetContrast
   \   000019   7A10         MOV     R2,#0x10
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   12....       LCALL   `??SetContrast::?relay`; Banked call to: SetContrast
    262          	WriteLCD(COMMAND , PwrCtrlReg | IntVolBstr | IntReg | OPampBuffer); //turn on booster, regulator & divider
   \   000020                ; Setup parameters for call to function WriteLCD
   \   000020   7A2F         MOV     R2,#0x2f
   \   000022   7900         MOV     R1,#0x0
   \   000024   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    263          	WriteLCD(COMMAND , DisplayOn);				//???
   \   000027                ; Setup parameters for call to function WriteLCD
   \   000027   7AAF         MOV     R2,#-0x51
   \   000029   7900         MOV     R1,#0x0
   \   00002B   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    264          }
   \   00002E   D083         POP     DPH
   \   000030   D082         POP     DPL
   \   000032   02....       LJMP    ?BRET
    265          
    266          
    267          /*******************************************************************************
    268          //???:void contrastctrl(uint8 start,stop)
    269          //??:lcd?????
    270          //??:?
    271          //??:?
    272          ********************************************************************************/
    273          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    274          void contrastctrl(uint8 start, uint8 stop)
   \                     contrastctrl:
    275          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A..         MOV     ?V0,R2
    276          	uint8 i;
    277          	if (start < stop)
   \   000009   EF           MOV     A,R7
   \   00000A   C3           CLR     C
   \   00000B   95..         SUBB    A,?V0
   \   00000D   5019         JNC     ??contrastctrl_0
    278          	{
    279          		for (i=start; i<stop; i+=1)
   \   00000F   EF           MOV     A,R7
   \   000010   FE           MOV     R6,A
   \                     ??contrastctrl_1:
   \   000011   EE           MOV     A,R6
   \   000012   C3           CLR     C
   \   000013   95..         SUBB    A,?V0
   \   000015   502A         JNC     ??contrastctrl_2
    280          		{
    281          			SetContrast(iIntRegValue, i); //slowly turn on display
   \   000017                ; Setup parameters for call to function SetContrast
   \   000017   EE           MOV     A,R6
   \   000018   FA           MOV     R2,A
   \   000019   7901         MOV     R1,#0x1
   \   00001B   12....       LCALL   `??SetContrast::?relay`; Banked call to: SetContrast
    282          			delay_us(80);
   \   00001E                ; Setup parameters for call to function delay_us
   \   00001E   7A50         MOV     R2,#0x50
   \   000020   7B00         MOV     R3,#0x0
   \   000022   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    283          		}
   \   000025   0E           INC     R6
   \   000026   80E9         SJMP    ??contrastctrl_1
    284          	}
    285          	else
    286          	{
    287          		for (i=start; i>stop; i-=1)
   \                     ??contrastctrl_0:
   \   000028   EF           MOV     A,R7
   \   000029   FE           MOV     R6,A
   \                     ??contrastctrl_3:
   \   00002A   E5..         MOV     A,?V0
   \   00002C   C3           CLR     C
   \   00002D   9E           SUBB    A,R6
   \   00002E   5011         JNC     ??contrastctrl_2
    288          		{
    289          			SetContrast(iIntRegValue, i); //slowly turn off display
   \   000030                ; Setup parameters for call to function SetContrast
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   7901         MOV     R1,#0x1
   \   000034   12....       LCALL   `??SetContrast::?relay`; Banked call to: SetContrast
    290          			delay_us(120);
   \   000037                ; Setup parameters for call to function delay_us
   \   000037   7A78         MOV     R2,#0x78
   \   000039   7B00         MOV     R3,#0x0
   \   00003B   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    291          		}
   \   00003E   1E           DEC     R6
   \   00003F   80E9         SJMP    ??contrastctrl_3
    292          	}
    293          }
   \                     ??contrastctrl_2:
   \   000041   7F01         MOV     R7,#0x1
   \   000043   02....       LJMP    ?BANKED_LEAVE_XDATA
    294          
    295          
    296          
    297          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    298          void ClearScreen(void)
   \                     ClearScreen:
    299          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    300           	uint8 x,y;
    301          	for(x = 0;x < 8 ;x++){
   \   000005   7E00         MOV     R6,#0x0
   \                     ??ClearScreen_0:
   \   000007   EE           MOV     A,R6
   \   000008   C3           CLR     C
   \   000009   9408         SUBB    A,#0x8
   \   00000B   501C         JNC     ??ClearScreen_1
    302                    SetRamAddr(x , 0);
   \   00000D                ; Setup parameters for call to function SetRamAddr
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   EE           MOV     A,R6
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   `??SetRamAddr::?relay`; Banked call to: SetRamAddr
    303          	  	for(y = 0 ; y < 128 ; y++){	  		
   \   000014   7F00         MOV     R7,#0x0
   \                     ??ClearScreen_2:
   \   000016   EF           MOV     A,R7
   \   000017   C3           CLR     C
   \   000018   9480         SUBB    A,#-0x80
   \   00001A   500A         JNC     ??ClearScreen_3
    304          	  					
    305          			WriteLCD(DATA , 0x00);
   \   00001C                ; Setup parameters for call to function WriteLCD
   \   00001C   7A00         MOV     R2,#0x0
   \   00001E   7901         MOV     R1,#0x1
   \   000020   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    306          		}		
   \   000023   0F           INC     R7
   \   000024   80F0         SJMP    ??ClearScreen_2
    307          	}
   \                     ??ClearScreen_3:
   \   000026   0E           INC     R6
   \   000027   80DE         SJMP    ??ClearScreen_0
    308          }
   \                     ??ClearScreen_1:
   \   000029   7F01         MOV     R7,#0x1
   \   00002B   02....       LJMP    ?BANKED_LEAVE_XDATA
    309          
    310          
    311          
    312          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    313          void HalLcdInit(void)
   \                     HalLcdInit:
    314          {	
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    315                  delay_us(10000);
   \   000004                ; Setup parameters for call to function delay_us
   \   000004   7A10         MOV     R2,#0x10
   \   000006   7B27         MOV     R3,#0x27
   \   000008   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    316                  P1DIR |= 0xFC;
   \   00000B   43FEFC       ORL     0xfe,#0xfc
    317                  P2DIR |= 0x01;
   \   00000E   43FF01       ORL     0xff,#0x1
    318                  P0DIR |= 0x02;
   \   000011   43FD02       ORL     0xfd,#0x2
    319                  P1_2 = 0;
   \   000014   C292         CLR     0x90.2
    320          	delay_us(100);	
   \   000016                ; Setup parameters for call to function delay_us
   \   000016   7A64         MOV     R2,#0x64
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    321          	WriteLCD(COMMAND , 0xE2);//??
   \   00001D                ; Setup parameters for call to function WriteLCD
   \   00001D   7AE2         MOV     R2,#-0x1e
   \   00001F   7900         MOV     R1,#0x0
   \   000021   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    322          
    323          	delay_us(100);
   \   000024                ; Setup parameters for call to function delay_us
   \   000024   7A64         MOV     R2,#0x64
   \   000026   7B00         MOV     R3,#0x0
   \   000028   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    324          	WriteLCD(COMMAND , 0xA3);
   \   00002B                ; Setup parameters for call to function WriteLCD
   \   00002B   7AA3         MOV     R2,#-0x5d
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    325          
    326          	delay_us(100);	
   \   000032                ; Setup parameters for call to function delay_us
   \   000032   7A64         MOV     R2,#0x64
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    327          	WriteLCD(COMMAND , 0xA0);
   \   000039                ; Setup parameters for call to function WriteLCD
   \   000039   7AA0         MOV     R2,#-0x60
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    328          	
    329          	delay_us(100);
   \   000040                ; Setup parameters for call to function delay_us
   \   000040   7A64         MOV     R2,#0x64
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    330          	WriteLCD(COMMAND , 0xC8);
   \   000047                ; Setup parameters for call to function WriteLCD
   \   000047   7AC8         MOV     R2,#-0x38
   \   000049   7900         MOV     R1,#0x0
   \   00004B   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    331          
    332          	delay_us(100);	
   \   00004E                ; Setup parameters for call to function delay_us
   \   00004E   7A64         MOV     R2,#0x64
   \   000050   7B00         MOV     R3,#0x0
   \   000052   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    333          	WriteLCD(COMMAND , 0x24);
   \   000055                ; Setup parameters for call to function WriteLCD
   \   000055   7A24         MOV     R2,#0x24
   \   000057   7900         MOV     R1,#0x0
   \   000059   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    334          	
    335          	delay_us(100);
   \   00005C                ; Setup parameters for call to function delay_us
   \   00005C   7A64         MOV     R2,#0x64
   \   00005E   7B00         MOV     R3,#0x0
   \   000060   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    336          	WriteLCD(COMMAND , 0x81);
   \   000063                ; Setup parameters for call to function WriteLCD
   \   000063   7A81         MOV     R2,#-0x7f
   \   000065   7900         MOV     R1,#0x0
   \   000067   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    337          
    338          	delay_us(100);	
   \   00006A                ; Setup parameters for call to function delay_us
   \   00006A   7A64         MOV     R2,#0x64
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    339          	WriteLCD(COMMAND , 0x14);
   \   000071                ; Setup parameters for call to function WriteLCD
   \   000071   7A14         MOV     R2,#0x14
   \   000073   7900         MOV     R1,#0x0
   \   000075   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    340          	
    341          	delay_us(100);
   \   000078                ; Setup parameters for call to function delay_us
   \   000078   7A64         MOV     R2,#0x64
   \   00007A   7B00         MOV     R3,#0x0
   \   00007C   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    342          	WriteLCD(COMMAND , 0x2F);
   \   00007F                ; Setup parameters for call to function WriteLCD
   \   00007F   7A2F         MOV     R2,#0x2f
   \   000081   7900         MOV     R1,#0x0
   \   000083   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    343          
    344          	delay_us(100);	
   \   000086                ; Setup parameters for call to function delay_us
   \   000086   7A64         MOV     R2,#0x64
   \   000088   7B00         MOV     R3,#0x0
   \   00008A   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    345          	WriteLCD(COMMAND , 0x40);//????????
   \   00008D                ; Setup parameters for call to function WriteLCD
   \   00008D   7A40         MOV     R2,#0x40
   \   00008F   7900         MOV     R1,#0x0
   \   000091   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    346          	
    347          	delay_us(100);
   \   000094                ; Setup parameters for call to function delay_us
   \   000094   7A64         MOV     R2,#0x64
   \   000096   7B00         MOV     R3,#0x0
   \   000098   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    348          	WriteLCD(COMMAND , 0xB0);
   \   00009B                ; Setup parameters for call to function WriteLCD
   \   00009B   7AB0         MOV     R2,#-0x50
   \   00009D   7900         MOV     R1,#0x0
   \   00009F   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    349          
    350          	delay_us(100);	
   \   0000A2                ; Setup parameters for call to function delay_us
   \   0000A2   7A64         MOV     R2,#0x64
   \   0000A4   7B00         MOV     R3,#0x0
   \   0000A6   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    351          	WriteLCD(COMMAND , 0x10);
   \   0000A9                ; Setup parameters for call to function WriteLCD
   \   0000A9   7A10         MOV     R2,#0x10
   \   0000AB   7900         MOV     R1,#0x0
   \   0000AD   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    352          	
    353          	delay_us(100);
   \   0000B0                ; Setup parameters for call to function delay_us
   \   0000B0   7A64         MOV     R2,#0x64
   \   0000B2   7B00         MOV     R3,#0x0
   \   0000B4   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    354          	WriteLCD(COMMAND , 0x00);
   \   0000B7                ; Setup parameters for call to function WriteLCD
   \   0000B7   7A00         MOV     R2,#0x0
   \   0000B9   7900         MOV     R1,#0x0
   \   0000BB   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    355          
    356          	delay_us(100);	
   \   0000BE                ; Setup parameters for call to function delay_us
   \   0000BE   7A64         MOV     R2,#0x64
   \   0000C0   7B00         MOV     R3,#0x0
   \   0000C2   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    357          	WriteLCD(COMMAND , 0xAF);
   \   0000C5                ; Setup parameters for call to function WriteLCD
   \   0000C5   7AAF         MOV     R2,#-0x51
   \   0000C7   7900         MOV     R1,#0x0
   \   0000C9   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    358          
    359          	WriteLCD(COMMAND , 0x81);
   \   0000CC                ; Setup parameters for call to function WriteLCD
   \   0000CC   7A81         MOV     R2,#-0x7f
   \   0000CE   7900         MOV     R1,#0x0
   \   0000D0   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    360          	WriteLCD(COMMAND , 0x1b);
   \   0000D3                ; Setup parameters for call to function WriteLCD
   \   0000D3   7A1B         MOV     R2,#0x1b
   \   0000D5   7900         MOV     R1,#0x0
   \   0000D7   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    361              delay_us(100);	
   \   0000DA                ; Setup parameters for call to function delay_us
   \   0000DA   7A64         MOV     R2,#0x64
   \   0000DC   7B00         MOV     R3,#0x0
   \   0000DE   12....       LCALL   `??delay_us::?relay` ; Banked call to: delay_us
    362              SetContrast(iIntRegValuea,ContrastValue);
   \   0000E1                ; Setup parameters for call to function SetContrast
   \   0000E1   90....       MOV     DPTR,#ContrastValue
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   FA           MOV     R2,A
   \   0000E6   7914         MOV     R1,#0x14
   \   0000E8   12....       LCALL   `??SetContrast::?relay`; Banked call to: SetContrast
    363          	ClearScreen();
   \   0000EB                ; Setup parameters for call to function ClearScreen
   \   0000EB   12....       LCALL   `??ClearScreen::?relay`; Banked call to: ClearScreen
    364              HalLcdWriteString("IEEE:",1);
   \   0000EE                ; Setup parameters for call to function HalLcdWriteString
   \   0000EE   7901         MOV     R1,#0x1
   \   0000F0   7A..         MOV     R2,#`?<Constant "IEEE:">` & 0xff
   \   0000F2   7B..         MOV     R3,#(`?<Constant "IEEE:">` >> 8) & 0xff
   \   0000F4   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    365           //     HalLcdWriteString("Init lcd1",2);
    366              HalLcdWriteString("Init lcd2",3);
   \   0000F7                ; Setup parameters for call to function HalLcdWriteString
   \   0000F7   7903         MOV     R1,#0x3
   \   0000F9   7A..         MOV     R2,#`?<Constant "Init lcd2">` & 0xff
   \   0000FB   7B..         MOV     R3,#(`?<Constant "Init lcd2">` >> 8) & 0xff
   \   0000FD   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    367           //     HalLcdWriteString("Init lcd3",4);
    368          
    369           //      PrintCh8(30,30,'O',1);
    370           //       delay_us(100);	
    371                  
    372          }
   \   000100   D083         POP     DPH
   \   000102   D082         POP     DPL
   \   000104   02....       LJMP    ?BRET
   \   000107                REQUIRE P1DIR
   \   000107                REQUIRE P2DIR
   \   000107                REQUIRE P0DIR
   \   000107                REQUIRE _A_P1
    373          
    374          
    375          
    376          /*******************************************************************************
    377          //???:void Print6(uint8 xx, uint8 yy, uint8 ch1[], uint8 yn)
    378          //??:??6*8???
    379          //??:xx ,yy ??,ch1???????,yn????
    380          //??:?
    381          ********************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    382          void Print6(uint8 xx, uint8 yy, uint8 ch1[], uint8 yn)		
   \                     Print6:
    383          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V5,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   8B..         MOV     ?V6,R3
    384          	uint8 ii = 0;
   \   00000F   75..00       MOV     ?V2,#0x0
    385          	uint8 bb = 0;
   \   000012   75..00       MOV     ?V3,#0x0
    386          	unsigned int index = 0 ;	
   \   000015   7E00         MOV     R6,#0x0
   \   000017   7F00         MOV     R7,#0x0
    387          			
    388          	while(ch1[bb] != '\0')
   \                     ??Print6_0:
   \   000019   A8..         MOV     R0,?V3
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   E5..         MOV     A,?V0
   \   00001F   28           ADD     A,R0
   \   000020   F582         MOV     DPL,A
   \   000022   E5..         MOV     A,?V1
   \   000024   39           ADDC    A,R1
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   607F         JZ      ??Print6_1
    389          	{
    390                          index = (unsigned int)(ch1[bb] - 0x20);
   \   00002A   A8..         MOV     R0,?V3
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   E5..         MOV     A,?V0
   \   000030   28           ADD     A,R0
   \   000031   F582         MOV     DPL,A
   \   000033   E5..         MOV     A,?V1
   \   000035   39           ADDC    A,R1
   \   000036   F583         MOV     DPH,A
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F8           MOV     R0,A
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   E8           MOV     A,R0
   \   00003D   24E0         ADD     A,#-0x20
   \   00003F   F8           MOV     R0,A
   \   000040   E9           MOV     A,R1
   \   000041   34FF         ADDC    A,#-0x1
   \   000043   F9           MOV     R1,A
   \   000044   E8           MOV     A,R0
   \   000045   FE           MOV     R6,A
   \   000046   E9           MOV     A,R1
   \   000047   FF           MOV     R7,A
    391          		index = (unsigned int)index*6;		
   \   000048   EE           MOV     A,R6
   \   000049   75F006       MOV     B,#0x6
   \   00004C   A4           MUL     AB
   \   00004D   CE           XCH     A,R6
   \   00004E   A8F0         MOV     R0,B
   \   000050   75F000       MOV     B,#0x0
   \   000053   A4           MUL     AB
   \   000054   28           ADD     A,R0
   \   000055   F8           MOV     R0,A
   \   000056   75F006       MOV     B,#0x6
   \   000059   EF           MOV     A,R7
   \   00005A   A4           MUL     AB
   \   00005B   28           ADD     A,R0
   \   00005C   FF           MOV     R7,A
    392          		for(ii=0;ii<6;ii++)
   \   00005D   75..00       MOV     ?V2,#0x0
   \                     ??Print6_2:
   \   000060   E5..         MOV     A,?V2
   \   000062   C3           CLR     C
   \   000063   9406         SUBB    A,#0x6
   \   000065   503D         JNC     ??Print6_3
    393          		{
    394          			SetRamAddr(xx , yy);
   \   000067                ; Setup parameters for call to function SetRamAddr
   \   000067   AA..         MOV     R2,?V4
   \   000069   A9..         MOV     R1,?V5
   \   00006B   12....       LCALL   `??SetRamAddr::?relay`; Banked call to: SetRamAddr
    395          			if(yn == 0)
   \   00006E   E5..         MOV     A,?V6
   \   000070   7015         JNZ     ??Print6_4
    396          			{
    397          				WriteLCD(DATA, ~FontSystem6x8[index]);
   \   000072                ; Setup parameters for call to function WriteLCD
   \   000072   74..         MOV     A,#FontSystem6x8 & 0xff
   \   000074   2E           ADD     A,R6
   \   000075   F582         MOV     DPL,A
   \   000077   74..         MOV     A,#(FontSystem6x8 >> 8) & 0xff
   \   000079   3F           ADDC    A,R7
   \   00007A   F583         MOV     DPH,A
   \   00007C   E4           CLR     A
   \   00007D   93           MOVC    A,@A+DPTR
   \   00007E   F4           CPL     A
   \   00007F   FA           MOV     R2,A
   \   000080   7901         MOV     R1,#0x1
   \   000082   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
   \   000085   8012         SJMP    ??Print6_5
    398          				
    399          			}
    400          			else
    401          			{
    402          				WriteLCD(DATA, FontSystem6x8[index]);
   \                     ??Print6_4:
   \   000087                ; Setup parameters for call to function WriteLCD
   \   000087   74..         MOV     A,#FontSystem6x8 & 0xff
   \   000089   2E           ADD     A,R6
   \   00008A   F582         MOV     DPL,A
   \   00008C   74..         MOV     A,#(FontSystem6x8 >> 8) & 0xff
   \   00008E   3F           ADDC    A,R7
   \   00008F   F583         MOV     DPH,A
   \   000091   E4           CLR     A
   \   000092   93           MOVC    A,@A+DPTR
   \   000093   FA           MOV     R2,A
   \   000094   7901         MOV     R1,#0x1
   \   000096   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    403          			}		
    404          			index += 1;
   \                     ??Print6_5:
   \   000099   0E           INC     R6
   \   00009A   EE           MOV     A,R6
   \   00009B   7001         JNZ     ??Print6_6
   \   00009D   0F           INC     R7
    405          			yy += 1;
   \                     ??Print6_6:
   \   00009E   05..         INC     ?V4
    406          		}		
   \   0000A0   05..         INC     ?V2
   \   0000A2   80BC         SJMP    ??Print6_2
    407          		bb += 1;
   \                     ??Print6_3:
   \   0000A4   05..         INC     ?V3
   \   0000A6   02....       LJMP    ??Print6_0 & 0xFFFF
    408          	}
    409          }
   \                     ??Print6_1:
   \   0000A9   7F07         MOV     R7,#0x7
   \   0000AB   02....       LJMP    ?BANKED_LEAVE_XDATA
    410          
    411          
    412          //*******************************************************************************
    413          //???:void Printn8(uint8 xx ,uint8 yy , uint32 no,uint8 yn,uint8 le)
    414          //??:??8*8???????
    415          //??:xx , yy??????,no????? yn=0???? yn=1????  le???
    416          //??:?
    417          //*******************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    418          void Printn8(uint8 xx ,uint8 yy , uint32 no,uint8 yn,uint8 le)
   \                     Printn8:
    419          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V14,R1
   \   00000C   8A..         MOV     ?V13,R2
   \   00000E   8B..         MOV     ?V12,R3
   \   000010   EC           MOV     A,R4
   \   000011   FF           MOV     R7,A
   \   000012   741D         MOV     A,#0x1d
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   78..         MOV     R0,#?V4
   \   000019   12....       LCALL   ?L_MOV_X
    420          	uint8 ch2[6];
    421          	uint8 ii;
    422          
    423          	for(ii = 1 ; ii <= le ;){
   \   00001C   7E01         MOV     R6,#0x1
   \                     ??Printn8_0:
   \   00001E   EF           MOV     A,R7
   \   00001F   C3           CLR     C
   \   000020   9E           SUBB    A,R6
   \   000021   4055         JC      ??Printn8_1
    424          		ch2[le - ii] = no % 10 + 0x30;
   \   000023   85....       MOV     ?V0,?V4
   \   000026   85....       MOV     ?V1,?V5
   \   000029   85....       MOV     ?V2,?V6
   \   00002C   85....       MOV     ?V3,?V7
   \   00002F   90....       MOV     DPTR,#__Constant_a
   \   000032   78..         MOV     R0,#?V8
   \   000034   12....       LCALL   ?L_MOV_X
   \   000037   78..         MOV     R0,#?V0
   \   000039   79..         MOV     R1,#?V8
   \   00003B   12....       LCALL   ?UL_DIV_MOD
   \   00003E   E5..         MOV     A,?V8
   \   000040   2430         ADD     A,#0x30
   \   000042   C0E0         PUSH    A
   \   000044   EF           MOV     A,R7
   \   000045   FA           MOV     R2,A
   \   000046   7B00         MOV     R3,#0x0
   \   000048   EE           MOV     A,R6
   \   000049   F8           MOV     R0,A
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   EA           MOV     A,R2
   \   00004D   C3           CLR     C
   \   00004E   98           SUBB    A,R0
   \   00004F   F8           MOV     R0,A
   \   000050   EB           MOV     A,R3
   \   000051   99           SUBB    A,R1
   \   000052   F9           MOV     R1,A
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   E582         MOV     A,DPL
   \   00005B   28           ADD     A,R0
   \   00005C   F582         MOV     DPL,A
   \   00005E   E583         MOV     A,DPH
   \   000060   39           ADDC    A,R1
   \   000061   F583         MOV     DPH,A
   \   000063   D0E0         POP     A
   \   000065   F0           MOVX    @DPTR,A
    425          		no /= 10;
   \   000066   90....       MOV     DPTR,#__Constant_a
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?L_MOV_X
   \   00006E   78..         MOV     R0,#?V4
   \   000070   79..         MOV     R1,#?V0
   \   000072   12....       LCALL   ?UL_DIV_MOD
    426          		ii += 1;
   \   000075   0E           INC     R6
   \   000076   80A6         SJMP    ??Printn8_0
    427          	}
    428          	ch2[le] = '\0';
   \                     ??Printn8_1:
   \   000078   EF           MOV     A,R7
   \   000079   F8           MOV     R0,A
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   85..82       MOV     DPL,?XSP + 0
   \   00007F   85..83       MOV     DPH,?XSP + 1
   \   000082   E582         MOV     A,DPL
   \   000084   28           ADD     A,R0
   \   000085   F582         MOV     DPL,A
   \   000087   E583         MOV     A,DPH
   \   000089   39           ADDC    A,R1
   \   00008A   F583         MOV     DPH,A
   \   00008C   7400         MOV     A,#0x0
   \   00008E   F0           MOVX    @DPTR,A
    429          	Print8(xx ,yy ,ch2 ,yn);
   \   00008F                ; Setup parameters for call to function Print8
   \   00008F   85....       MOV     ?V0,?V12
   \   000092   75..00       MOV     ?V1,#0x0
   \   000095   78..         MOV     R0,#?V0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   7402         MOV     A,#0x2
   \   00009C   12....       LCALL   ?XSTACK_DISP100_8
   \   00009F   88..         MOV     ?V0,R0
   \   0000A1   89..         MOV     ?V1,R1
   \   0000A3   78..         MOV     R0,#?V0
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   AC..         MOV     R4,?V13
   \   0000AA   7D00         MOV     R5,#0x0
   \   0000AC   AA..         MOV     R2,?V14
   \   0000AE   7B00         MOV     R3,#0x0
   \   0000B0   12....       LCALL   `??Print8::?relay`   ; Banked call to: Print8
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
    430          }
   \   0000B8   7406         MOV     A,#0x6
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BD   7F0F         MOV     R7,#0xf
   \   0000BF   02....       LJMP    ?BANKED_LEAVE_XDATA
    431          
    432          //*******************************************************************************
    433          //???:void PrintS8(uint8 xx ,uint8 yy , uint32 no,uint8 yn,uint8 le)
    434          //??:??8*8???????
    435          //??:xx , yy??????,no????? yn=0???? yn=1????  le???
    436          //??:?
    437          //*******************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    438          void PrintS8(uint8 xx ,uint8 yy , uint32 no,uint8 yn,uint8 le)
   \                     PrintS8:
    439          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V14,R1
   \   00000C   8A..         MOV     ?V13,R2
   \   00000E   8B..         MOV     ?V12,R3
   \   000010   EC           MOV     A,R4
   \   000011   FF           MOV     R7,A
   \   000012   741D         MOV     A,#0x1d
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   78..         MOV     R0,#?V4
   \   000019   12....       LCALL   ?L_MOV_X
    440          	uint8 ch2[6];
    441          	uint8 ii;
    442          
    443                  if (no < 127)
   \   00001C   90....       MOV     DPTR,#__Constant_7f
   \   00001F   78..         MOV     R0,#?V4
   \   000021   12....       LCALL   ?UL_GE_X
   \   000024   5003         JNC     $+5
   \   000026   02....       LJMP    ??PrintS8_0 & 0xFFFF
    444                  {
    445                    for(ii = 1 ; ii <= le ;){
   \   000029   7E01         MOV     R6,#0x1
   \                     ??PrintS8_1:
   \   00002B   EF           MOV     A,R7
   \   00002C   C3           CLR     C
   \   00002D   9E           SUBB    A,R6
   \   00002E   4055         JC      ??PrintS8_2
    446                            ch2[le - ii] = no % 10 + 0x30;
   \   000030   85....       MOV     ?V0,?V4
   \   000033   85....       MOV     ?V1,?V5
   \   000036   85....       MOV     ?V2,?V6
   \   000039   85....       MOV     ?V3,?V7
   \   00003C   90....       MOV     DPTR,#__Constant_a
   \   00003F   78..         MOV     R0,#?V8
   \   000041   12....       LCALL   ?L_MOV_X
   \   000044   78..         MOV     R0,#?V0
   \   000046   79..         MOV     R1,#?V8
   \   000048   12....       LCALL   ?UL_DIV_MOD
   \   00004B   E5..         MOV     A,?V8
   \   00004D   2430         ADD     A,#0x30
   \   00004F   C0E0         PUSH    A
   \   000051   EF           MOV     A,R7
   \   000052   FA           MOV     R2,A
   \   000053   7B00         MOV     R3,#0x0
   \   000055   EE           MOV     A,R6
   \   000056   F8           MOV     R0,A
   \   000057   7900         MOV     R1,#0x0
   \   000059   EA           MOV     A,R2
   \   00005A   C3           CLR     C
   \   00005B   98           SUBB    A,R0
   \   00005C   F8           MOV     R0,A
   \   00005D   EB           MOV     A,R3
   \   00005E   99           SUBB    A,R1
   \   00005F   F9           MOV     R1,A
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   E582         MOV     A,DPL
   \   000068   28           ADD     A,R0
   \   000069   F582         MOV     DPL,A
   \   00006B   E583         MOV     A,DPH
   \   00006D   39           ADDC    A,R1
   \   00006E   F583         MOV     DPH,A
   \   000070   D0E0         POP     A
   \   000072   F0           MOVX    @DPTR,A
    447                            no /= 10;
   \   000073   90....       MOV     DPTR,#__Constant_a
   \   000076   78..         MOV     R0,#?V0
   \   000078   12....       LCALL   ?L_MOV_X
   \   00007B   78..         MOV     R0,#?V4
   \   00007D   79..         MOV     R1,#?V0
   \   00007F   12....       LCALL   ?UL_DIV_MOD
    448                            ii += 1;
   \   000082   0E           INC     R6
   \   000083   80A6         SJMP    ??PrintS8_1
    449                    }
    450                    ch2[le] = '\0';
   \                     ??PrintS8_2:
   \   000085   EF           MOV     A,R7
   \   000086   F8           MOV     R0,A
   \   000087   7900         MOV     R1,#0x0
   \   000089   85..82       MOV     DPL,?XSP + 0
   \   00008C   85..83       MOV     DPH,?XSP + 1
   \   00008F   E582         MOV     A,DPL
   \   000091   28           ADD     A,R0
   \   000092   F582         MOV     DPL,A
   \   000094   E583         MOV     A,DPH
   \   000096   39           ADDC    A,R1
   \   000097   F583         MOV     DPH,A
   \   000099   7400         MOV     A,#0x0
   \   00009B   F0           MOVX    @DPTR,A
    451                    Print8(xx ,yy ,ch2 ,yn);
   \   00009C                ; Setup parameters for call to function Print8
   \   00009C   85....       MOV     ?V0,?V12
   \   00009F   75..00       MOV     ?V1,#0x0
   \   0000A2   78..         MOV     R0,#?V0
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   12....       LCALL   ?XSTACK_DISP100_8
   \   0000AC   88..         MOV     ?V0,R0
   \   0000AE   89..         MOV     ?V1,R1
   \   0000B0   78..         MOV     R0,#?V0
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B5   AC..         MOV     R4,?V13
   \   0000B7   7D00         MOV     R5,#0x0
   \   0000B9   AA..         MOV     R2,?V14
   \   0000BB   7B00         MOV     R3,#0x0
   \   0000BD   12....       LCALL   `??Print8::?relay`   ; Banked call to: Print8
   \   0000C0   7404         MOV     A,#0x4
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C5   02....       LJMP    ??PrintS8_3 & 0xFFFF
    452                  }
    453                  else
    454                  {
    455                    no = 256 - no;
   \                     ??PrintS8_0:
   \   0000C8   75..00       MOV     ?V0,#0x0
   \   0000CB   75..01       MOV     ?V1,#0x1
   \   0000CE   75..00       MOV     ?V2,#0x0
   \   0000D1   75..00       MOV     ?V3,#0x0
   \   0000D4   78..         MOV     R0,#?V0
   \   0000D6   79..         MOV     R1,#?V4
   \   0000D8   12....       LCALL   ?L_SUB
   \   0000DB   85....       MOV     ?V4,?V0
   \   0000DE   85....       MOV     ?V5,?V1
   \   0000E1   85....       MOV     ?V6,?V2
   \   0000E4   85....       MOV     ?V7,?V3
    456                    for(ii = 1 ; ii <= le ;){
   \   0000E7   7E01         MOV     R6,#0x1
   \                     ??PrintS8_4:
   \   0000E9   EF           MOV     A,R7
   \   0000EA   C3           CLR     C
   \   0000EB   9E           SUBB    A,R6
   \   0000EC   4055         JC      ??PrintS8_5
    457                            ch2[le - ii] = no % 10 + 0x30;
   \   0000EE   85....       MOV     ?V0,?V4
   \   0000F1   85....       MOV     ?V1,?V5
   \   0000F4   85....       MOV     ?V2,?V6
   \   0000F7   85....       MOV     ?V3,?V7
   \   0000FA   90....       MOV     DPTR,#__Constant_a
   \   0000FD   78..         MOV     R0,#?V8
   \   0000FF   12....       LCALL   ?L_MOV_X
   \   000102   78..         MOV     R0,#?V0
   \   000104   79..         MOV     R1,#?V8
   \   000106   12....       LCALL   ?UL_DIV_MOD
   \   000109   E5..         MOV     A,?V8
   \   00010B   2430         ADD     A,#0x30
   \   00010D   C0E0         PUSH    A
   \   00010F   EF           MOV     A,R7
   \   000110   FA           MOV     R2,A
   \   000111   7B00         MOV     R3,#0x0
   \   000113   EE           MOV     A,R6
   \   000114   F8           MOV     R0,A
   \   000115   7900         MOV     R1,#0x0
   \   000117   EA           MOV     A,R2
   \   000118   C3           CLR     C
   \   000119   98           SUBB    A,R0
   \   00011A   F8           MOV     R0,A
   \   00011B   EB           MOV     A,R3
   \   00011C   99           SUBB    A,R1
   \   00011D   F9           MOV     R1,A
   \   00011E   85..82       MOV     DPL,?XSP + 0
   \   000121   85..83       MOV     DPH,?XSP + 1
   \   000124   E582         MOV     A,DPL
   \   000126   28           ADD     A,R0
   \   000127   F582         MOV     DPL,A
   \   000129   E583         MOV     A,DPH
   \   00012B   39           ADDC    A,R1
   \   00012C   F583         MOV     DPH,A
   \   00012E   D0E0         POP     A
   \   000130   F0           MOVX    @DPTR,A
    458                            no /= 10;
   \   000131   90....       MOV     DPTR,#__Constant_a
   \   000134   78..         MOV     R0,#?V0
   \   000136   12....       LCALL   ?L_MOV_X
   \   000139   78..         MOV     R0,#?V4
   \   00013B   79..         MOV     R1,#?V0
   \   00013D   12....       LCALL   ?UL_DIV_MOD
    459                            ii += 1;
   \   000140   0E           INC     R6
   \   000141   80A6         SJMP    ??PrintS8_4
    460                    }
    461                    ch2[0] = '-';
   \                     ??PrintS8_5:
   \   000143   85..82       MOV     DPL,?XSP + 0
   \   000146   85..83       MOV     DPH,?XSP + 1
   \   000149   742D         MOV     A,#0x2d
   \   00014B   F0           MOVX    @DPTR,A
    462                    ch2[le] = '\0';
   \   00014C   EF           MOV     A,R7
   \   00014D   F8           MOV     R0,A
   \   00014E   7900         MOV     R1,#0x0
   \   000150   85..82       MOV     DPL,?XSP + 0
   \   000153   85..83       MOV     DPH,?XSP + 1
   \   000156   E582         MOV     A,DPL
   \   000158   28           ADD     A,R0
   \   000159   F582         MOV     DPL,A
   \   00015B   E583         MOV     A,DPH
   \   00015D   39           ADDC    A,R1
   \   00015E   F583         MOV     DPH,A
   \   000160   7400         MOV     A,#0x0
   \   000162   F0           MOVX    @DPTR,A
    463                    Print8(xx ,yy ,ch2 ,yn);
   \   000163                ; Setup parameters for call to function Print8
   \   000163   85....       MOV     ?V0,?V12
   \   000166   75..00       MOV     ?V1,#0x0
   \   000169   78..         MOV     R0,#?V0
   \   00016B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016E   7402         MOV     A,#0x2
   \   000170   12....       LCALL   ?XSTACK_DISP100_8
   \   000173   88..         MOV     ?V0,R0
   \   000175   89..         MOV     ?V1,R1
   \   000177   78..         MOV     R0,#?V0
   \   000179   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017C   AC..         MOV     R4,?V13
   \   00017E   7D00         MOV     R5,#0x0
   \   000180   AA..         MOV     R2,?V14
   \   000182   7B00         MOV     R3,#0x0
   \   000184   12....       LCALL   `??Print8::?relay`   ; Banked call to: Print8
   \   000187   7404         MOV     A,#0x4
   \   000189   12....       LCALL   ?DEALLOC_XSTACK8
    464                  } 
    465          }
   \                     ??PrintS8_3:
   \   00018C   7406         MOV     A,#0x6
   \   00018E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000191   7F0F         MOV     R7,#0xf
   \   000193   02....       LJMP    ?BANKED_LEAVE_XDATA
    466          
    467          //*******************************************************************************
    468          //???:void PrintS8(uint8 xx ,uint8 yy , uint32 no,uint8 yn,uint8 le)
    469          //??:??8*8???????
    470          //??:xx , yy??????,no????? yn=0???? yn=1????  le???
    471          //??:?
    472          //*******************************************************************************
    473          
    474          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    475          void PrintS16(uint8 xx ,uint8 yy , uint32 no,uint8 yn,uint8 le, uint8 FloatPoint)
   \                     PrintS16:
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V15,R2
   \   000018   8B..         MOV     ?V14,R3
   \   00001A   8C..         MOV     ?V12,R4
   \   00001C   8D..         MOV     ?V13,R5
   \   00001E   7422         MOV     A,#0x22
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   78..         MOV     R0,#?V4
   \   000025   12....       LCALL   ?L_MOV_X
    477          	uint8 ch2[9];
    478          	uint8 ii;
    479                  uint8 jj;
    480          
    481                  if (no < 32767)
   \   000028   90....       MOV     DPTR,#__Constant_7fff
   \   00002B   78..         MOV     R0,#?V4
   \   00002D   12....       LCALL   ?UL_GE_X
   \   000030   5003         JNC     $+5
   \   000032   02....       LJMP    ??PrintS16_0 & 0xFFFF
    482                  {
    483                    jj = 1;
   \   000035   7E01         MOV     R6,#0x1
    484                    for(ii = 1 ; ii < le ;ii++)
   \   000037   7F01         MOV     R7,#0x1
   \                     ??PrintS16_1:
   \   000039   EF           MOV     A,R7
   \   00003A   C3           CLR     C
   \   00003B   95..         SUBB    A,?V12
   \   00003D   4003         JC      $+5
   \   00003F   02....       LJMP    ??PrintS16_2 & 0xFFFF
    485                    {
    486                       if (ii == (FloatPoint+1))
   \   000042   EF           MOV     A,R7
   \   000043   FA           MOV     R2,A
   \   000044   7B00         MOV     R3,#0x0
   \   000046   A8..         MOV     R0,?V13
   \   000048   7900         MOV     R1,#0x0
   \   00004A   E8           MOV     A,R0
   \   00004B   2401         ADD     A,#0x1
   \   00004D   F8           MOV     R0,A
   \   00004E   5001         JNC     ??PrintS16_3
   \   000050   09           INC     R1
   \                     ??PrintS16_3:
   \   000051   E8           MOV     A,R0
   \   000052   6A           XRL     A,R2
   \   000053   7002         JNZ     ??PrintS16_4
   \   000055   E9           MOV     A,R1
   \   000056   6B           XRL     A,R3
   \                     ??PrintS16_4:
   \   000057   7022         JNZ     ??PrintS16_5
    487                       {
    488                          ch2[le - jj] = '.';
   \   000059   AA..         MOV     R2,?V12
   \   00005B   7B00         MOV     R3,#0x0
   \   00005D   EE           MOV     A,R6
   \   00005E   F8           MOV     R0,A
   \   00005F   7900         MOV     R1,#0x0
   \   000061   EA           MOV     A,R2
   \   000062   C3           CLR     C
   \   000063   98           SUBB    A,R0
   \   000064   F8           MOV     R0,A
   \   000065   EB           MOV     A,R3
   \   000066   99           SUBB    A,R1
   \   000067   F9           MOV     R1,A
   \   000068   7401         MOV     A,#0x1
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   E582         MOV     A,DPL
   \   00006F   28           ADD     A,R0
   \   000070   F582         MOV     DPL,A
   \   000072   E583         MOV     A,DPH
   \   000074   39           ADDC    A,R1
   \   000075   F583         MOV     DPH,A
   \   000077   742E         MOV     A,#0x2e
   \   000079   F0           MOVX    @DPTR,A
    489                          jj += 1;                
   \   00007A   0E           INC     R6
    490                       }
    491                       ch2[le - jj] = no % 10 + 0x30;
   \                     ??PrintS16_5:
   \   00007B   85....       MOV     ?V0,?V4
   \   00007E   85....       MOV     ?V1,?V5
   \   000081   85....       MOV     ?V2,?V6
   \   000084   85....       MOV     ?V3,?V7
   \   000087   90....       MOV     DPTR,#__Constant_a
   \   00008A   78..         MOV     R0,#?V8
   \   00008C   12....       LCALL   ?L_MOV_X
   \   00008F   78..         MOV     R0,#?V0
   \   000091   79..         MOV     R1,#?V8
   \   000093   12....       LCALL   ?UL_DIV_MOD
   \   000096   E5..         MOV     A,?V8
   \   000098   2430         ADD     A,#0x30
   \   00009A   C0E0         PUSH    A
   \   00009C   AA..         MOV     R2,?V12
   \   00009E   7B00         MOV     R3,#0x0
   \   0000A0   EE           MOV     A,R6
   \   0000A1   F8           MOV     R0,A
   \   0000A2   7900         MOV     R1,#0x0
   \   0000A4   EA           MOV     A,R2
   \   0000A5   C3           CLR     C
   \   0000A6   98           SUBB    A,R0
   \   0000A7   F8           MOV     R0,A
   \   0000A8   EB           MOV     A,R3
   \   0000A9   99           SUBB    A,R1
   \   0000AA   F9           MOV     R1,A
   \   0000AB   7401         MOV     A,#0x1
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   E582         MOV     A,DPL
   \   0000B2   28           ADD     A,R0
   \   0000B3   F582         MOV     DPL,A
   \   0000B5   E583         MOV     A,DPH
   \   0000B7   39           ADDC    A,R1
   \   0000B8   F583         MOV     DPH,A
   \   0000BA   D0E0         POP     A
   \   0000BC   F0           MOVX    @DPTR,A
    492                       no /= 10;
   \   0000BD   90....       MOV     DPTR,#__Constant_a
   \   0000C0   78..         MOV     R0,#?V0
   \   0000C2   12....       LCALL   ?L_MOV_X
   \   0000C5   78..         MOV     R0,#?V4
   \   0000C7   79..         MOV     R1,#?V0
   \   0000C9   12....       LCALL   ?UL_DIV_MOD
    493                       jj += 1;
   \   0000CC   0E           INC     R6
    494                    }
   \   0000CD   0F           INC     R7
   \   0000CE   02....       LJMP    ??PrintS16_1 & 0xFFFF
    495                    ch2[le] = '\0';
   \                     ??PrintS16_2:
   \   0000D1   A8..         MOV     R0,?V12
   \   0000D3   7900         MOV     R1,#0x0
   \   0000D5   7401         MOV     A,#0x1
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   E582         MOV     A,DPL
   \   0000DC   28           ADD     A,R0
   \   0000DD   F582         MOV     DPL,A
   \   0000DF   E583         MOV     A,DPH
   \   0000E1   39           ADDC    A,R1
   \   0000E2   F583         MOV     DPH,A
   \   0000E4   7400         MOV     A,#0x0
   \   0000E6   F0           MOVX    @DPTR,A
    496                    Print8(xx ,yy*8 ,ch2 ,yn);
   \   0000E7                ; Setup parameters for call to function Print8
   \   0000E7   85....       MOV     ?V0,?V14
   \   0000EA   75..00       MOV     ?V1,#0x0
   \   0000ED   78..         MOV     R0,#?V0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F2   7403         MOV     A,#0x3
   \   0000F4   12....       LCALL   ?XSTACK_DISP100_8
   \   0000F7   88..         MOV     ?V0,R0
   \   0000F9   89..         MOV     ?V1,R1
   \   0000FB   78..         MOV     R0,#?V0
   \   0000FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000100   AC..         MOV     R4,?V15
   \   000102   7D00         MOV     R5,#0x0
   \   000104   EC           MOV     A,R4
   \   000105   75F008       MOV     B,#0x8
   \   000108   A4           MUL     AB
   \   000109   CC           XCH     A,R4
   \   00010A   A8F0         MOV     R0,B
   \   00010C   75F000       MOV     B,#0x0
   \   00010F   A4           MUL     AB
   \   000110   28           ADD     A,R0
   \   000111   F8           MOV     R0,A
   \   000112   75F008       MOV     B,#0x8
   \   000115   ED           MOV     A,R5
   \   000116   A4           MUL     AB
   \   000117   28           ADD     A,R0
   \   000118   FD           MOV     R5,A
   \   000119   7404         MOV     A,#0x4
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   FA           MOV     R2,A
   \   000120   7B00         MOV     R3,#0x0
   \   000122   12....       LCALL   `??Print8::?relay`   ; Banked call to: Print8
   \   000125   7404         MOV     A,#0x4
   \   000127   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012A   02....       LJMP    ??PrintS16_6 & 0xFFFF
    497                  }
    498                  else
    499                  {
    500                    no = 65536 - no;
   \                     ??PrintS16_0:
   \   00012D   75..00       MOV     ?V0,#0x0
   \   000130   75..00       MOV     ?V1,#0x0
   \   000133   75..01       MOV     ?V2,#0x1
   \   000136   75..00       MOV     ?V3,#0x0
   \   000139   78..         MOV     R0,#?V0
   \   00013B   79..         MOV     R1,#?V4
   \   00013D   12....       LCALL   ?L_SUB
   \   000140   85....       MOV     ?V4,?V0
   \   000143   85....       MOV     ?V5,?V1
   \   000146   85....       MOV     ?V6,?V2
   \   000149   85....       MOV     ?V7,?V3
    501                    jj = 1;
   \   00014C   7E01         MOV     R6,#0x1
    502                    for(ii = 1 ; ii < le ;ii++)
   \   00014E   7F01         MOV     R7,#0x1
   \                     ??PrintS16_7:
   \   000150   EF           MOV     A,R7
   \   000151   C3           CLR     C
   \   000152   95..         SUBB    A,?V12
   \   000154   4003         JC      $+5
   \   000156   02....       LJMP    ??PrintS16_8 & 0xFFFF
    503                    {
    504                       if (ii == (FloatPoint+1))
   \   000159   EF           MOV     A,R7
   \   00015A   FA           MOV     R2,A
   \   00015B   7B00         MOV     R3,#0x0
   \   00015D   A8..         MOV     R0,?V13
   \   00015F   7900         MOV     R1,#0x0
   \   000161   E8           MOV     A,R0
   \   000162   2401         ADD     A,#0x1
   \   000164   F8           MOV     R0,A
   \   000165   5001         JNC     ??PrintS16_9
   \   000167   09           INC     R1
   \                     ??PrintS16_9:
   \   000168   E8           MOV     A,R0
   \   000169   6A           XRL     A,R2
   \   00016A   7002         JNZ     ??PrintS16_10
   \   00016C   E9           MOV     A,R1
   \   00016D   6B           XRL     A,R3
   \                     ??PrintS16_10:
   \   00016E   7022         JNZ     ??PrintS16_11
    505                       {
    506                          ch2[le - jj] = '.';
   \   000170   AA..         MOV     R2,?V12
   \   000172   7B00         MOV     R3,#0x0
   \   000174   EE           MOV     A,R6
   \   000175   F8           MOV     R0,A
   \   000176   7900         MOV     R1,#0x0
   \   000178   EA           MOV     A,R2
   \   000179   C3           CLR     C
   \   00017A   98           SUBB    A,R0
   \   00017B   F8           MOV     R0,A
   \   00017C   EB           MOV     A,R3
   \   00017D   99           SUBB    A,R1
   \   00017E   F9           MOV     R1,A
   \   00017F   7401         MOV     A,#0x1
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   E582         MOV     A,DPL
   \   000186   28           ADD     A,R0
   \   000187   F582         MOV     DPL,A
   \   000189   E583         MOV     A,DPH
   \   00018B   39           ADDC    A,R1
   \   00018C   F583         MOV     DPH,A
   \   00018E   742E         MOV     A,#0x2e
   \   000190   F0           MOVX    @DPTR,A
    507                          jj += 1;                
   \   000191   0E           INC     R6
    508                       }
    509                       ch2[le - jj] = no % 10 + 0x30;
   \                     ??PrintS16_11:
   \   000192   85....       MOV     ?V0,?V4
   \   000195   85....       MOV     ?V1,?V5
   \   000198   85....       MOV     ?V2,?V6
   \   00019B   85....       MOV     ?V3,?V7
   \   00019E   90....       MOV     DPTR,#__Constant_a
   \   0001A1   78..         MOV     R0,#?V8
   \   0001A3   12....       LCALL   ?L_MOV_X
   \   0001A6   78..         MOV     R0,#?V0
   \   0001A8   79..         MOV     R1,#?V8
   \   0001AA   12....       LCALL   ?UL_DIV_MOD
   \   0001AD   E5..         MOV     A,?V8
   \   0001AF   2430         ADD     A,#0x30
   \   0001B1   C0E0         PUSH    A
   \   0001B3   AA..         MOV     R2,?V12
   \   0001B5   7B00         MOV     R3,#0x0
   \   0001B7   EE           MOV     A,R6
   \   0001B8   F8           MOV     R0,A
   \   0001B9   7900         MOV     R1,#0x0
   \   0001BB   EA           MOV     A,R2
   \   0001BC   C3           CLR     C
   \   0001BD   98           SUBB    A,R0
   \   0001BE   F8           MOV     R0,A
   \   0001BF   EB           MOV     A,R3
   \   0001C0   99           SUBB    A,R1
   \   0001C1   F9           MOV     R1,A
   \   0001C2   7401         MOV     A,#0x1
   \   0001C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C7   E582         MOV     A,DPL
   \   0001C9   28           ADD     A,R0
   \   0001CA   F582         MOV     DPL,A
   \   0001CC   E583         MOV     A,DPH
   \   0001CE   39           ADDC    A,R1
   \   0001CF   F583         MOV     DPH,A
   \   0001D1   D0E0         POP     A
   \   0001D3   F0           MOVX    @DPTR,A
    510                       no /= 10;
   \   0001D4   90....       MOV     DPTR,#__Constant_a
   \   0001D7   78..         MOV     R0,#?V0
   \   0001D9   12....       LCALL   ?L_MOV_X
   \   0001DC   78..         MOV     R0,#?V4
   \   0001DE   79..         MOV     R1,#?V0
   \   0001E0   12....       LCALL   ?UL_DIV_MOD
    511                       jj += 1;
   \   0001E3   0E           INC     R6
    512                    }
   \   0001E4   0F           INC     R7
   \   0001E5   02....       LJMP    ??PrintS16_7 & 0xFFFF
    513                    ch2[le] = '\0';
   \                     ??PrintS16_8:
   \   0001E8   A8..         MOV     R0,?V12
   \   0001EA   7900         MOV     R1,#0x0
   \   0001EC   7401         MOV     A,#0x1
   \   0001EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F1   E582         MOV     A,DPL
   \   0001F3   28           ADD     A,R0
   \   0001F4   F582         MOV     DPL,A
   \   0001F6   E583         MOV     A,DPH
   \   0001F8   39           ADDC    A,R1
   \   0001F9   F583         MOV     DPH,A
   \   0001FB   7400         MOV     A,#0x0
   \   0001FD   F0           MOVX    @DPTR,A
    514                    ch2[0] = '-';
   \   0001FE   7401         MOV     A,#0x1
   \   000200   12....       LCALL   ?XSTACK_DISP0_8
   \   000203   742D         MOV     A,#0x2d
   \   000205   F0           MOVX    @DPTR,A
    515                    Print8(xx ,yy*8 ,ch2 ,yn);
   \   000206                ; Setup parameters for call to function Print8
   \   000206   85....       MOV     ?V0,?V14
   \   000209   75..00       MOV     ?V1,#0x0
   \   00020C   78..         MOV     R0,#?V0
   \   00020E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000211   7403         MOV     A,#0x3
   \   000213   12....       LCALL   ?XSTACK_DISP100_8
   \   000216   88..         MOV     ?V0,R0
   \   000218   89..         MOV     ?V1,R1
   \   00021A   78..         MOV     R0,#?V0
   \   00021C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021F   AC..         MOV     R4,?V15
   \   000221   7D00         MOV     R5,#0x0
   \   000223   EC           MOV     A,R4
   \   000224   75F008       MOV     B,#0x8
   \   000227   A4           MUL     AB
   \   000228   CC           XCH     A,R4
   \   000229   A8F0         MOV     R0,B
   \   00022B   75F000       MOV     B,#0x0
   \   00022E   A4           MUL     AB
   \   00022F   28           ADD     A,R0
   \   000230   F8           MOV     R0,A
   \   000231   75F008       MOV     B,#0x8
   \   000234   ED           MOV     A,R5
   \   000235   A4           MUL     AB
   \   000236   28           ADD     A,R0
   \   000237   FD           MOV     R5,A
   \   000238   7404         MOV     A,#0x4
   \   00023A   12....       LCALL   ?XSTACK_DISP0_8
   \   00023D   E0           MOVX    A,@DPTR
   \   00023E   FA           MOV     R2,A
   \   00023F   7B00         MOV     R3,#0x0
   \   000241   12....       LCALL   `??Print8::?relay`   ; Banked call to: Print8
   \   000244   7404         MOV     A,#0x4
   \   000246   12....       LCALL   ?DEALLOC_XSTACK8
    516                  } 
    517          }
   \                     ??PrintS16_6:
   \   000249   740A         MOV     A,#0xa
   \   00024B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00024E   7F10         MOV     R7,#0x10
   \   000250   02....       LJMP    ?BANKED_LEAVE_XDATA
    518          
    519          
    520          /*******************************************************************************
    521          //???:void Print8(uint16 y,uint16 x, uint8 ch,uint16 yn)
    522          //??:??8*8??
    523          //??:xx ,yy ??,ch??????,yn????
    524          //??:?
    525          ********************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    526          void PrintCh8(uint16 y,uint16 x, uint8 ch,uint16 yn)
   \                     PrintCh8:
    527          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V7,R1
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V4,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V5,A
    528          	uint8 wm;
    529          	uint16 adder;
    530          	
    531          	adder = (ch - 0x20) * 16;
   \   00001B   A8..         MOV     R0,?V7
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   E8           MOV     A,R0
   \   000020   24E0         ADD     A,#-0x20
   \   000022   F8           MOV     R0,A
   \   000023   E9           MOV     A,R1
   \   000024   34FF         ADDC    A,#-0x1
   \   000026   F9           MOV     R1,A
   \   000027   E8           MOV     A,R0
   \   000028   75F010       MOV     B,#0x10
   \   00002B   A4           MUL     AB
   \   00002C   C8           XCH     A,R0
   \   00002D   AAF0         MOV     R2,B
   \   00002F   75F000       MOV     B,#0x0
   \   000032   A4           MUL     AB
   \   000033   2A           ADD     A,R2
   \   000034   FA           MOV     R2,A
   \   000035   75F010       MOV     B,#0x10
   \   000038   E9           MOV     A,R1
   \   000039   A4           MUL     AB
   \   00003A   2A           ADD     A,R2
   \   00003B   F9           MOV     R1,A
   \   00003C   88..         MOV     ?V2,R0
   \   00003E   89..         MOV     ?V3,R1
    532          	for(wm = 0;wm < 8;wm++)
   \   000040   75..00       MOV     ?V6,#0x0
   \                     ??PrintCh8_0:
   \   000043   E5..         MOV     A,?V6
   \   000045   C3           CLR     C
   \   000046   9408         SUBB    A,#0x8
   \   000048   5049         JNC     ??PrintCh8_1
    533          	{
    534          		SetRamAddr(y , x);
   \   00004A                ; Setup parameters for call to function SetRamAddr
   \   00004A   EE           MOV     A,R6
   \   00004B   FA           MOV     R2,A
   \   00004C   A9..         MOV     R1,?V0
   \   00004E   12....       LCALL   `??SetRamAddr::?relay`; Banked call to: SetRamAddr
    535          		if(yn == 0)
   \   000051   E5..         MOV     A,?V4
   \   000053   45..         ORL     A,?V5
   \   000055   7017         JNZ     ??PrintCh8_2
    536          		{
    537          			WriteLCD(DATA, ~Font8X8[adder]);
   \   000057                ; Setup parameters for call to function WriteLCD
   \   000057   74..         MOV     A,#Font8X8 & 0xff
   \   000059   25..         ADD     A,?V2
   \   00005B   F582         MOV     DPL,A
   \   00005D   74..         MOV     A,#(Font8X8 >> 8) & 0xff
   \   00005F   35..         ADDC    A,?V3
   \   000061   F583         MOV     DPH,A
   \   000063   E4           CLR     A
   \   000064   93           MOVC    A,@A+DPTR
   \   000065   F4           CPL     A
   \   000066   FA           MOV     R2,A
   \   000067   7901         MOV     R1,#0x1
   \   000069   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
   \   00006C   8014         SJMP    ??PrintCh8_3
    538          		}
    539          		else
    540          		{
    541          			WriteLCD(DATA, Font8X8[adder]);
   \                     ??PrintCh8_2:
   \   00006E                ; Setup parameters for call to function WriteLCD
   \   00006E   74..         MOV     A,#Font8X8 & 0xff
   \   000070   25..         ADD     A,?V2
   \   000072   F582         MOV     DPL,A
   \   000074   74..         MOV     A,#(Font8X8 >> 8) & 0xff
   \   000076   35..         ADDC    A,?V3
   \   000078   F583         MOV     DPH,A
   \   00007A   E4           CLR     A
   \   00007B   93           MOVC    A,@A+DPTR
   \   00007C   FA           MOV     R2,A
   \   00007D   7901         MOV     R1,#0x1
   \   00007F   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    542          		}
    543          		adder += 1;
   \                     ??PrintCh8_3:
   \   000082   05..         INC     ?V2
   \   000084   E5..         MOV     A,?V2
   \   000086   7002         JNZ     ??PrintCh8_4
   \   000088   05..         INC     ?V3
    544          		x += 1;
   \                     ??PrintCh8_4:
   \   00008A   0E           INC     R6
   \   00008B   EE           MOV     A,R6
   \   00008C   7001         JNZ     ??PrintCh8_5
   \   00008E   0F           INC     R7
    545          	}
   \                     ??PrintCh8_5:
   \   00008F   05..         INC     ?V6
   \   000091   80B0         SJMP    ??PrintCh8_0
    546          	y += 1;
   \                     ??PrintCh8_1:
   \   000093   05..         INC     ?V0
   \   000095   E5..         MOV     A,?V0
   \   000097   7002         JNZ     ??PrintCh8_6
   \   000099   05..         INC     ?V1
    547          	x -= 8;
   \                     ??PrintCh8_6:
   \   00009B   EE           MOV     A,R6
   \   00009C   24F8         ADD     A,#-0x8
   \   00009E   FE           MOV     R6,A
   \   00009F   EF           MOV     A,R7
   \   0000A0   34FF         ADDC    A,#-0x1
   \   0000A2   FF           MOV     R7,A
    548          	for(wm = 0;wm < 8;wm++)
   \   0000A3   75..00       MOV     ?V6,#0x0
   \                     ??PrintCh8_7:
   \   0000A6   E5..         MOV     A,?V6
   \   0000A8   C3           CLR     C
   \   0000A9   9408         SUBB    A,#0x8
   \   0000AB   5049         JNC     ??PrintCh8_8
    549          	{
    550          		SetRamAddr(y , x);
   \   0000AD                ; Setup parameters for call to function SetRamAddr
   \   0000AD   EE           MOV     A,R6
   \   0000AE   FA           MOV     R2,A
   \   0000AF   A9..         MOV     R1,?V0
   \   0000B1   12....       LCALL   `??SetRamAddr::?relay`; Banked call to: SetRamAddr
    551          		if(yn == 0)
   \   0000B4   E5..         MOV     A,?V4
   \   0000B6   45..         ORL     A,?V5
   \   0000B8   7017         JNZ     ??PrintCh8_9
    552          		{
    553          				WriteLCD(DATA, ~Font8X8[adder]);
   \   0000BA                ; Setup parameters for call to function WriteLCD
   \   0000BA   74..         MOV     A,#Font8X8 & 0xff
   \   0000BC   25..         ADD     A,?V2
   \   0000BE   F582         MOV     DPL,A
   \   0000C0   74..         MOV     A,#(Font8X8 >> 8) & 0xff
   \   0000C2   35..         ADDC    A,?V3
   \   0000C4   F583         MOV     DPH,A
   \   0000C6   E4           CLR     A
   \   0000C7   93           MOVC    A,@A+DPTR
   \   0000C8   F4           CPL     A
   \   0000C9   FA           MOV     R2,A
   \   0000CA   7901         MOV     R1,#0x1
   \   0000CC   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
   \   0000CF   8014         SJMP    ??PrintCh8_10
    554          		}
    555          		else
    556          		{
    557          			WriteLCD(DATA, Font8X8[adder]);	
   \                     ??PrintCh8_9:
   \   0000D1                ; Setup parameters for call to function WriteLCD
   \   0000D1   74..         MOV     A,#Font8X8 & 0xff
   \   0000D3   25..         ADD     A,?V2
   \   0000D5   F582         MOV     DPL,A
   \   0000D7   74..         MOV     A,#(Font8X8 >> 8) & 0xff
   \   0000D9   35..         ADDC    A,?V3
   \   0000DB   F583         MOV     DPH,A
   \   0000DD   E4           CLR     A
   \   0000DE   93           MOVC    A,@A+DPTR
   \   0000DF   FA           MOV     R2,A
   \   0000E0   7901         MOV     R1,#0x1
   \   0000E2   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    558          		}
    559          		adder += 1;
   \                     ??PrintCh8_10:
   \   0000E5   05..         INC     ?V2
   \   0000E7   E5..         MOV     A,?V2
   \   0000E9   7002         JNZ     ??PrintCh8_11
   \   0000EB   05..         INC     ?V3
    560          		x += 1;
   \                     ??PrintCh8_11:
   \   0000ED   0E           INC     R6
   \   0000EE   EE           MOV     A,R6
   \   0000EF   7001         JNZ     ??PrintCh8_12
   \   0000F1   0F           INC     R7
    561          	}
   \                     ??PrintCh8_12:
   \   0000F2   05..         INC     ?V6
   \   0000F4   80B0         SJMP    ??PrintCh8_7
    562          }
   \                     ??PrintCh8_8:
   \   0000F6   7F08         MOV     R7,#0x8
   \   0000F8   02....       LJMP    ?BANKED_LEAVE_XDATA
    563          
    564          
    565          /*******************************************************************************
    566          //???:void Print8(uint16 y,uint16 x, uint8 ch[],uint16 yn)
    567          //??:??8*8???
    568          //??:xx ,yy ??,ch1???????,yn????
    569          //??:?
    570          ********************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    571          void Print8(uint16 y,uint16 x, uint8 ch[],uint16 yn)
   \                     Print8:
    572          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V4,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V5,A
   \   000019   7414         MOV     A,#0x14
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V8,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V9,A
    573          	uint8 wm ,ii = 0;
   \   000025   75..00       MOV     ?V7,#0x0
    574          	uint16 adder;
    575          
    576          	while(ch[ii] != '\0')
   \                     ??Print8_0:
   \   000028   A8..         MOV     R0,?V7
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   E5..         MOV     A,?V4
   \   00002E   28           ADD     A,R0
   \   00002F   F582         MOV     DPL,A
   \   000031   E5..         MOV     A,?V5
   \   000033   39           ADDC    A,R1
   \   000034   F583         MOV     DPH,A
   \   000036   E0           MOVX    A,@DPTR
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??Print8_1 & 0xFFFF
    577          	{
    578          		adder = (ch[ii] - 0x20) * 16;
   \   00003C   A8..         MOV     R0,?V7
   \   00003E   7900         MOV     R1,#0x0
   \   000040   E5..         MOV     A,?V4
   \   000042   28           ADD     A,R0
   \   000043   F582         MOV     DPL,A
   \   000045   E5..         MOV     A,?V5
   \   000047   39           ADDC    A,R1
   \   000048   F583         MOV     DPH,A
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   7900         MOV     R1,#0x0
   \   00004E   E8           MOV     A,R0
   \   00004F   24E0         ADD     A,#-0x20
   \   000051   F8           MOV     R0,A
   \   000052   E9           MOV     A,R1
   \   000053   34FF         ADDC    A,#-0x1
   \   000055   F9           MOV     R1,A
   \   000056   E8           MOV     A,R0
   \   000057   75F010       MOV     B,#0x10
   \   00005A   A4           MUL     AB
   \   00005B   C8           XCH     A,R0
   \   00005C   AAF0         MOV     R2,B
   \   00005E   75F000       MOV     B,#0x0
   \   000061   A4           MUL     AB
   \   000062   2A           ADD     A,R2
   \   000063   FA           MOV     R2,A
   \   000064   75F010       MOV     B,#0x10
   \   000067   E9           MOV     A,R1
   \   000068   A4           MUL     AB
   \   000069   2A           ADD     A,R2
   \   00006A   F9           MOV     R1,A
   \   00006B   88..         MOV     ?V2,R0
   \   00006D   89..         MOV     ?V3,R1
    579          
    580          		for(wm = 0;wm < 8;wm++)
   \   00006F   75..00       MOV     ?V6,#0x0
   \                     ??Print8_2:
   \   000072   E5..         MOV     A,?V6
   \   000074   C3           CLR     C
   \   000075   9408         SUBB    A,#0x8
   \   000077   5049         JNC     ??Print8_3
    581          		{
    582          			SetRamAddr(y , x);
   \   000079                ; Setup parameters for call to function SetRamAddr
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   A9..         MOV     R1,?V0
   \   00007D   12....       LCALL   `??SetRamAddr::?relay`; Banked call to: SetRamAddr
    583          			if(yn == 0)
   \   000080   E5..         MOV     A,?V8
   \   000082   45..         ORL     A,?V9
   \   000084   7017         JNZ     ??Print8_4
    584          			{
    585          				WriteLCD(DATA, ~Font8X8[adder]);
   \   000086                ; Setup parameters for call to function WriteLCD
   \   000086   74..         MOV     A,#Font8X8 & 0xff
   \   000088   25..         ADD     A,?V2
   \   00008A   F582         MOV     DPL,A
   \   00008C   74..         MOV     A,#(Font8X8 >> 8) & 0xff
   \   00008E   35..         ADDC    A,?V3
   \   000090   F583         MOV     DPH,A
   \   000092   E4           CLR     A
   \   000093   93           MOVC    A,@A+DPTR
   \   000094   F4           CPL     A
   \   000095   FA           MOV     R2,A
   \   000096   7901         MOV     R1,#0x1
   \   000098   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
   \   00009B   8014         SJMP    ??Print8_5
    586          			}
    587          			else
    588          			{
    589          				WriteLCD(DATA, Font8X8[adder]);
   \                     ??Print8_4:
   \   00009D                ; Setup parameters for call to function WriteLCD
   \   00009D   74..         MOV     A,#Font8X8 & 0xff
   \   00009F   25..         ADD     A,?V2
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   74..         MOV     A,#(Font8X8 >> 8) & 0xff
   \   0000A5   35..         ADDC    A,?V3
   \   0000A7   F583         MOV     DPH,A
   \   0000A9   E4           CLR     A
   \   0000AA   93           MOVC    A,@A+DPTR
   \   0000AB   FA           MOV     R2,A
   \   0000AC   7901         MOV     R1,#0x1
   \   0000AE   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    590          			}
    591          			adder += 1;
   \                     ??Print8_5:
   \   0000B1   05..         INC     ?V2
   \   0000B3   E5..         MOV     A,?V2
   \   0000B5   7002         JNZ     ??Print8_6
   \   0000B7   05..         INC     ?V3
    592          			x += 1;
   \                     ??Print8_6:
   \   0000B9   0E           INC     R6
   \   0000BA   EE           MOV     A,R6
   \   0000BB   7001         JNZ     ??Print8_7
   \   0000BD   0F           INC     R7
    593          		}
   \                     ??Print8_7:
   \   0000BE   05..         INC     ?V6
   \   0000C0   80B0         SJMP    ??Print8_2
    594          		y += 1;
   \                     ??Print8_3:
   \   0000C2   05..         INC     ?V0
   \   0000C4   E5..         MOV     A,?V0
   \   0000C6   7002         JNZ     ??Print8_8
   \   0000C8   05..         INC     ?V1
    595          		x -= 8;
   \                     ??Print8_8:
   \   0000CA   EE           MOV     A,R6
   \   0000CB   24F8         ADD     A,#-0x8
   \   0000CD   FE           MOV     R6,A
   \   0000CE   EF           MOV     A,R7
   \   0000CF   34FF         ADDC    A,#-0x1
   \   0000D1   FF           MOV     R7,A
    596          		for(wm = 0;wm < 8;wm++)
   \   0000D2   75..00       MOV     ?V6,#0x0
   \                     ??Print8_9:
   \   0000D5   E5..         MOV     A,?V6
   \   0000D7   C3           CLR     C
   \   0000D8   9408         SUBB    A,#0x8
   \   0000DA   5049         JNC     ??Print8_10
    597          		{
    598          			SetRamAddr(y , x);
   \   0000DC                ; Setup parameters for call to function SetRamAddr
   \   0000DC   EE           MOV     A,R6
   \   0000DD   FA           MOV     R2,A
   \   0000DE   A9..         MOV     R1,?V0
   \   0000E0   12....       LCALL   `??SetRamAddr::?relay`; Banked call to: SetRamAddr
    599          			if(yn == 0)
   \   0000E3   E5..         MOV     A,?V8
   \   0000E5   45..         ORL     A,?V9
   \   0000E7   7017         JNZ     ??Print8_11
    600          			{
    601          				WriteLCD(DATA, ~Font8X8[adder]);
   \   0000E9                ; Setup parameters for call to function WriteLCD
   \   0000E9   74..         MOV     A,#Font8X8 & 0xff
   \   0000EB   25..         ADD     A,?V2
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   74..         MOV     A,#(Font8X8 >> 8) & 0xff
   \   0000F1   35..         ADDC    A,?V3
   \   0000F3   F583         MOV     DPH,A
   \   0000F5   E4           CLR     A
   \   0000F6   93           MOVC    A,@A+DPTR
   \   0000F7   F4           CPL     A
   \   0000F8   FA           MOV     R2,A
   \   0000F9   7901         MOV     R1,#0x1
   \   0000FB   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
   \   0000FE   8014         SJMP    ??Print8_12
    602          			}
    603          			else
    604          			{
    605          				WriteLCD(DATA, Font8X8[adder]);	
   \                     ??Print8_11:
   \   000100                ; Setup parameters for call to function WriteLCD
   \   000100   74..         MOV     A,#Font8X8 & 0xff
   \   000102   25..         ADD     A,?V2
   \   000104   F582         MOV     DPL,A
   \   000106   74..         MOV     A,#(Font8X8 >> 8) & 0xff
   \   000108   35..         ADDC    A,?V3
   \   00010A   F583         MOV     DPH,A
   \   00010C   E4           CLR     A
   \   00010D   93           MOVC    A,@A+DPTR
   \   00010E   FA           MOV     R2,A
   \   00010F   7901         MOV     R1,#0x1
   \   000111   12....       LCALL   `??WriteLCD::?relay` ; Banked call to: WriteLCD
    606          			}
    607          			adder += 1;
   \                     ??Print8_12:
   \   000114   05..         INC     ?V2
   \   000116   E5..         MOV     A,?V2
   \   000118   7002         JNZ     ??Print8_13
   \   00011A   05..         INC     ?V3
    608          			x += 1;
   \                     ??Print8_13:
   \   00011C   0E           INC     R6
   \   00011D   EE           MOV     A,R6
   \   00011E   7001         JNZ     ??Print8_14
   \   000120   0F           INC     R7
    609          		}
   \                     ??Print8_14:
   \   000121   05..         INC     ?V6
   \   000123   80B0         SJMP    ??Print8_9
    610          		ii += 1;
   \                     ??Print8_10:
   \   000125   05..         INC     ?V7
    611          		y -= 1;
   \   000127   E5..         MOV     A,?V0
   \   000129   24FF         ADD     A,#-0x1
   \   00012B   F5..         MOV     ?V0,A
   \   00012D   E5..         MOV     A,?V1
   \   00012F   34FF         ADDC    A,#-0x1
   \   000131   F5..         MOV     ?V1,A
   \   000133   02....       LJMP    ??Print8_0 & 0xFFFF
    612          	}
    613          
    614          }
   \                     ??Print8_1:
   \   000136   7F0A         MOV     R7,#0xa
   \   000138   02....       LJMP    ?BANKED_LEAVE_XDATA
    615          
    616          
    617          /*******************************************************************************
    618          //???:void Print16(uint16 y,uint16 x,uint8 ch[],uint16 yn)
    619          //??:????????
    620          //??:x ,y ??,ch[]??????,yn????
    621          //??:?
    622          ********************************************************************************
    623          void Print16(uint16 y,uint16 x,uint8 ch[],uint16 yn)
    624          {
    625          	uint8 wm ,ii = 0;
    626          	uint16 adder;
    627          
    628          	wm = 0;
    629          	adder = 1;
    630          	while(FontNew8X16_Index[wm] > 128)
    631          	{
    632          		if(FontNew8X16_Index[wm] == ch[ii])
    633          		{
    634          			if(FontNew8X16_Index[wm + 1] == ch[ii + 1])
    635          			{
    636          				adder = wm * 14;
    637          				break;
    638          			}
    639          		}
    640          		wm += 2;				//???????????
    641          	}
    642          	SetRamAddr(y , x);
    643          
    644          	if(adder != 1)					//????,????	
    645          	{
    646          		
    647          		for(wm = 0;wm < 14;wm++)
    648          		{
    649          			SetRamAddr(y , x);
    650          			if(yn == 0)
    651          			{
    652          				WriteLCD(DATA, ~FontNew16X16[adder]);
    653          			}
    654          			else
    655          			{
    656          				WriteLCD(DATA, FontNew16X16[adder]);
    657          			}
    658          			adder += 1;
    659          			x += 1;
    660          		}
    661                          for(wm = 0;wm < 2;wm++)
    662          		{
    663          			SetRamAddr(y , x);
    664          			if(yn == 0)
    665          			{
    666          				WriteLCD(DATA, 0xff);
    667          			}
    668          			else
    669          			{
    670          				WriteLCD(DATA, 0x00);
    671          			}
    672          			x += 1;
    673          		}
    674          		y += 1;
    675          		x -=16;
    676          
    677          		for(wm = 0;wm < 14;wm++)
    678          		{
    679          			SetRamAddr(y , x);
    680          			if(yn == 0)
    681          			{
    682          				WriteLCD(DATA, ~FontNew16X16[adder]);
    683          			}
    684          			else
    685          			{
    686          				WriteLCD(DATA, FontNew16X16[adder]);
    687          			}
    688          			adder += 1;
    689          			x += 1;
    690          		}
    691                          for(wm = 0;wm < 2;wm++)
    692          		{
    693          			SetRamAddr(y , x);
    694          			if(yn == 0)
    695          			{
    696          				WriteLCD(DATA, 0xff);
    697          			}
    698          			else
    699          			{
    700          				WriteLCD(DATA, 0x00);
    701          			}
    702          			x += 1;
    703          		}
    704          
    705          
    706          	}
    707          	else						//????????			
    708          	{
    709          		ii += 1;
    710          
    711          		for(wm = 0;wm < 16;wm++)
    712          		{
    713          			SetRamAddr(y , x);
    714          			if(yn == 0)
    715          			{
    716          				WriteLCD(DATA, 0xff);
    717          			}
    718          			else
    719          			{
    720          				WriteLCD(DATA, 0x00);
    721          			}
    722          			x += 1;
    723          		}
    724          		y += 1;
    725          		x -= 16;
    726          		for(wm = 0;wm < 16;wm++)
    727          		{
    728          			SetRamAddr(y , x);
    729          			if(yn == 0)
    730          			{
    731          				WriteLCD(DATA, 0xff);
    732          			}
    733          			else
    734          			{
    735          				WriteLCD(DATA, 0x00);
    736          			}
    737          			x += 1;
    738          		}
    739          	}
    740          }*/
    741          
    742          
    743          /*******************************************************************************
    744          //???:void Print(uint8 y, uint8 x, uint8 ch[], uint16 yn)
    745          //??:???????????
    746          //??:x ,y ??,ch[]?????????,yn????
    747          //??:?
    748          ********************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    749          void Print(uint8 y, uint8 x, uint8 ch[], uint16 yn)
   \                     Print:
    750          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V2,R1
   \   00000C   8A..         MOV     ?V1,R2
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   7413         MOV     A,#0x13
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V4,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V5,A
    751          	uint8 ch2[3];
    752          	uint8 ii;
    753                  ii = 0;
   \   00001E   75..00       MOV     ?V0,#0x0
    754          	while(ch[ii] != '\0')
   \                     ??Print_0:
   \   000021   A8..         MOV     R0,?V0
   \   000023   7900         MOV     R1,#0x0
   \   000025   EE           MOV     A,R6
   \   000026   28           ADD     A,R0
   \   000027   F582         MOV     DPL,A
   \   000029   EF           MOV     A,R7
   \   00002A   39           ADDC    A,R1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??Print_1 & 0xFFFF
    755          	{
    756          		if(ch[ii] > 128)
   \   000033   A8..         MOV     R0,?V0
   \   000035   7900         MOV     R1,#0x0
   \   000037   EE           MOV     A,R6
   \   000038   28           ADD     A,R0
   \   000039   F582         MOV     DPL,A
   \   00003B   EF           MOV     A,R7
   \   00003C   39           ADDC    A,R1
   \   00003D   F583         MOV     DPH,A
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   C3           CLR     C
   \   000041   9481         SUBB    A,#-0x7f
   \   000043   4046         JC      ??Print_2
    757          		{
    758          			ch2[0] = ch[ii];
   \   000045   A8..         MOV     R0,?V0
   \   000047   7900         MOV     R1,#0x0
   \   000049   EE           MOV     A,R6
   \   00004A   28           ADD     A,R0
   \   00004B   F582         MOV     DPL,A
   \   00004D   EF           MOV     A,R7
   \   00004E   39           ADDC    A,R1
   \   00004F   F583         MOV     DPH,A
   \   000051   E0           MOVX    A,@DPTR
   \   000052   C0E0         PUSH    A
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   D0E0         POP     A
   \   00005C   F0           MOVX    @DPTR,A
    759          	 		ch2[1] = ch[ii + 1];
   \   00005D   A8..         MOV     R0,?V0
   \   00005F   7900         MOV     R1,#0x0
   \   000061   EE           MOV     A,R6
   \   000062   28           ADD     A,R0
   \   000063   F582         MOV     DPL,A
   \   000065   EF           MOV     A,R7
   \   000066   39           ADDC    A,R1
   \   000067   F583         MOV     DPH,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   C0E0         PUSH    A
   \   00006D   7401         MOV     A,#0x1
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   D0E0         POP     A
   \   000074   F0           MOVX    @DPTR,A
    760          			ch2[2] = '\0';			//???????
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   7400         MOV     A,#0x0
   \   00007C   F0           MOVX    @DPTR,A
    761          			//Print16(y , x , ch2 , yn);	//????
    762          			x += 16;
   \   00007D   7410         MOV     A,#0x10
   \   00007F   25..         ADD     A,?V1
   \   000081   F5..         MOV     ?V1,A
    763          			ii += 2;
   \   000083   7402         MOV     A,#0x2
   \   000085   25..         ADD     A,?V0
   \   000087   F5..         MOV     ?V0,A
   \   000089   8096         SJMP    ??Print_0
    764          		}
    765          		else
    766          		{
    767          			ch2[0] = ch[ii];	
   \                     ??Print_2:
   \   00008B   A8..         MOV     R0,?V0
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   EE           MOV     A,R6
   \   000090   28           ADD     A,R0
   \   000091   F582         MOV     DPL,A
   \   000093   EF           MOV     A,R7
   \   000094   39           ADDC    A,R1
   \   000095   F583         MOV     DPH,A
   \   000097   E0           MOVX    A,@DPTR
   \   000098   C0E0         PUSH    A
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   D0E0         POP     A
   \   0000A2   F0           MOVX    @DPTR,A
    768          			ch2[1] = '\0';			//???????
   \   0000A3   7401         MOV     A,#0x1
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   7400         MOV     A,#0x0
   \   0000AA   F0           MOVX    @DPTR,A
    769          			Print8(y , x , ch2 , yn);	//????
   \   0000AB                ; Setup parameters for call to function Print8
   \   0000AB   78..         MOV     R0,#?V4
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   12....       LCALL   ?XSTACK_DISP100_8
   \   0000B5   88..         MOV     ?V6,R0
   \   0000B7   89..         MOV     ?V7,R1
   \   0000B9   78..         MOV     R0,#?V6
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BE   AC..         MOV     R4,?V1
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   AA..         MOV     R2,?V2
   \   0000C4   7B00         MOV     R3,#0x0
   \   0000C6   12....       LCALL   `??Print8::?relay`   ; Banked call to: Print8
   \   0000C9   7404         MOV     A,#0x4
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
    770          			x += 8;
   \   0000CE   7408         MOV     A,#0x8
   \   0000D0   25..         ADD     A,?V1
   \   0000D2   F5..         MOV     ?V1,A
    771          			ii += 1;
   \   0000D4   05..         INC     ?V0
   \   0000D6   02....       LJMP    ??Print_0 & 0xFFFF
    772          		}
    773          	}
    774          }
   \                     ??Print_1:
   \   0000D9   7403         MOV     A,#0x3
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DE   7F08         MOV     R7,#0x8
   \   0000E0   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    775          void HalLcdClearLine( uint8 line )
   \                     HalLcdClearLine:
    776          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    777            Print8(line,0,"                ",1);
   \   000007                ; Setup parameters for call to function Print8
   \   000007   75..01       MOV     ?V0,#0x1
   \   00000A   75..00       MOV     ?V1,#0x0
   \   00000D   78..         MOV     R0,#?V0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   75....       MOV     ?V0,#`?<Constant "                ">` & 0xff
   \   000015   75....       MOV     ?V1,#(`?<Constant "                ">` >> 8) & 0xff
   \   000018   78..         MOV     R0,#?V0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   7C00         MOV     R4,#0x0
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   `??Print8::?relay`   ; Banked call to: Print8
   \   000028   7404         MOV     A,#0x4
   \   00002A   12....       LCALL   ?DEALLOC_XSTACK8
    778          }
   \   00002D   7F02         MOV     R7,#0x2
   \   00002F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          void HalLcdWriteString ( char *str, uint8 option)
   \                     HalLcdWriteString:
    780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V1,R1
    781            unsigned char i; 
    782            uint8 LcdBuf[20];
    783            osal_memcpy(LcdBuf,str,20);
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8E..         MOV     ?V4,R6
   \   000012   8F..         MOV     ?V5,R7
   \   000014   75..00       MOV     ?V6,#0x0
   \   000017   78..         MOV     R0,#?V4
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001C   7C14         MOV     R4,#0x14
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7403         MOV     A,#0x3
   \   000022   12....       LCALL   ?XSTACK_DISP101_8
   \   000025   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000028   7403         MOV     A,#0x3
   \   00002A   12....       LCALL   ?DEALLOC_XSTACK8
    784            i = strlen(str);
   \   00002D                ; Setup parameters for call to function strlen
   \   00002D   EE           MOV     A,R6
   \   00002E   FA           MOV     R2,A
   \   00002F   EF           MOV     A,R7
   \   000030   FB           MOV     R3,A
   \   000031   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   000034   EA           MOV     A,R2
   \   000035   F5..         MOV     ?V0,A
    785            LcdBuf[i] = '\0';  
   \   000037   A8..         MOV     R0,?V0
   \   000039   7900         MOV     R1,#0x0
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   E582         MOV     A,DPL
   \   000043   28           ADD     A,R0
   \   000044   F582         MOV     DPL,A
   \   000046   E583         MOV     A,DPH
   \   000048   39           ADDC    A,R1
   \   000049   F583         MOV     DPH,A
   \   00004B   7400         MOV     A,#0x0
   \   00004D   F0           MOVX    @DPTR,A
    786            switch (option)
   \   00004E   E5..         MOV     A,?V1
   \   000050   14           DEC     A
   \   000051   600F         JZ      ??HalLcdWriteString_0
   \   000053   14           DEC     A
   \   000054   600C         JZ      ??HalLcdWriteString_0
   \   000056   14           DEC     A
   \   000057   6009         JZ      ??HalLcdWriteString_0
   \   000059   14           DEC     A
   \   00005A   6006         JZ      ??HalLcdWriteString_0
   \   00005C   14           DEC     A
   \   00005D   6003         JZ      ??HalLcdWriteString_0
   \   00005F   14           DEC     A
   \   000060   703A         JNZ     ??HalLcdWriteString_1
    787            {
    788              case 1:
    789              case 2:
    790              case 3:      
    791              case 4:     
    792              case 5:    
    793              case 6:
    794                 HalLcdClearLine( option%7 );
   \                     ??HalLcdWriteString_0:
   \   000062                ; Setup parameters for call to function HalLcdClearLine
   \   000062   E5..         MOV     A,?V1
   \   000064   75F007       MOV     B,#0x7
   \   000067   84           DIV     AB
   \   000068   A9F0         MOV     R1,B
   \   00006A   12....       LCALL   `??HalLcdClearLine::?relay`; Banked call to: HalLcdClearLine
    795                 Print8(option%7,0,(unsigned char *)LcdBuf,1);
   \   00006D                ; Setup parameters for call to function Print8
   \   00006D   75..01       MOV     ?V2,#0x1
   \   000070   75..00       MOV     ?V3,#0x0
   \   000073   78..         MOV     R0,#?V2
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   7402         MOV     A,#0x2
   \   00007A   12....       LCALL   ?XSTACK_DISP100_8
   \   00007D   88..         MOV     ?V2,R0
   \   00007F   89..         MOV     ?V3,R1
   \   000081   78..         MOV     R0,#?V2
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   7C00         MOV     R4,#0x0
   \   000088   7D00         MOV     R5,#0x0
   \   00008A   E5..         MOV     A,?V1
   \   00008C   75F007       MOV     B,#0x7
   \   00008F   84           DIV     AB
   \   000090   AAF0         MOV     R2,B
   \   000092   7B00         MOV     R3,#0x0
   \   000094   12....       LCALL   `??Print8::?relay`   ; Banked call to: Print8
   \   000097   7404         MOV     A,#0x4
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
    796               /*  y = option%7;
    797                 x = 0;
    798          	while(LcdBuf[ii] != '\0')
    799          	{
    800          		adder = (LcdBuf[ii] - 0x20) * 16;
    801          
    802          		for(wm = 0;wm < 8;wm++)
    803          		{
    804          			SetRamAddr(y , x);
    805          			if(yn == 0)
    806          			{
    807          				WriteLCD(DATA, ~Font8X8[adder]);
    808          			}
    809          			else
    810          			{
    811          				WriteLCD(DATA, Font8X8[adder]);
    812          			}
    813          			adder += 1;
    814          			x += 1;
    815          		}
    816          		y += 1;
    817          		x -= 8;
    818          		for(wm = 0;wm < 8;wm++)
    819          		{
    820          			SetRamAddr(y , x);
    821          			if(yn == 0)
    822          			{
    823          				WriteLCD(DATA, ~Font8X8[adder]);
    824          			}
    825          			else
    826          			{
    827          				WriteLCD(DATA, Font8X8[adder]);	
    828          			}
    829          			adder += 1;
    830          			x += 1;
    831          		}
    832          		ii += 1;
    833          		y -= 1;
    834          	}*/
    835                //Print8(option%7,0,(unsigned char *)LcdBuf,1);
    836                break;
    837              default :
    838                break;
    839            }
    840          }
   \                     ??HalLcdWriteString_1:
   \   00009C   7414         MOV     A,#0x14
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A1   7F07         MOV     R7,#0x7
   \   0000A3   02....       LJMP    ?BANKED_LEAVE_XDATA
    841          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    842          void HalLcdWriteLoc ( uint16 valueX, uint16 valueY, uint8 option)
   \                     HalLcdWriteLoc:
    843          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V0,R1
    844             //fmj 20110708 start
    845            switch (option)
   \   00000F   E5..         MOV     A,?V0
   \   000011   14           DEC     A
   \   000012   600F         JZ      ??HalLcdWriteLoc_0
   \   000014   14           DEC     A
   \   000015   600C         JZ      ??HalLcdWriteLoc_0
   \   000017   14           DEC     A
   \   000018   6009         JZ      ??HalLcdWriteLoc_0
   \   00001A   14           DEC     A
   \   00001B   6006         JZ      ??HalLcdWriteLoc_0
   \   00001D   14           DEC     A
   \   00001E   6003         JZ      ??HalLcdWriteLoc_0
   \   000020   14           DEC     A
   \   000021   7059         JNZ     ??HalLcdWriteLoc_1
    846            {
    847              case 1:
    848              case 2:
    849              case 3:      
    850              case 4:     
    851              case 5:    
    852              case 6:
    853                 HalLcdClearLine( option%7 );
   \                     ??HalLcdWriteLoc_0:
   \   000023                ; Setup parameters for call to function HalLcdClearLine
   \   000023   E5..         MOV     A,?V0
   \   000025   75F007       MOV     B,#0x7
   \   000028   84           DIV     AB
   \   000029   A9F0         MOV     R1,B
   \   00002B   12....       LCALL   `??HalLcdClearLine::?relay`; Banked call to: HalLcdClearLine
    854                 PrintS16(option%7,0,valueX,1,7,1);   
   \   00002E                ; Setup parameters for call to function PrintS16
   \   00002E   85....       MOV     ?V4,?V2
   \   000031   85....       MOV     ?V5,?V3
   \   000034   E4           CLR     A
   \   000035   F5..         MOV     ?V6,A
   \   000037   F5..         MOV     ?V7,A
   \   000039   78..         MOV     R0,#?V4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00003E   7D01         MOV     R5,#0x1
   \   000040   7C07         MOV     R4,#0x7
   \   000042   7B01         MOV     R3,#0x1
   \   000044   7A00         MOV     R2,#0x0
   \   000046   E5..         MOV     A,?V0
   \   000048   75F007       MOV     B,#0x7
   \   00004B   84           DIV     AB
   \   00004C   A9F0         MOV     R1,B
   \   00004E   12....       LCALL   `??PrintS16::?relay` ; Banked call to: PrintS16
   \   000051   7404         MOV     A,#0x4
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
    855                 PrintS16(option%7,8,valueY,1,7,1); 
   \   000056                ; Setup parameters for call to function PrintS16
   \   000056   8E..         MOV     ?V4,R6
   \   000058   8F..         MOV     ?V5,R7
   \   00005A   E4           CLR     A
   \   00005B   F5..         MOV     ?V6,A
   \   00005D   F5..         MOV     ?V7,A
   \   00005F   78..         MOV     R0,#?V4
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000064   7D01         MOV     R5,#0x1
   \   000066   7C07         MOV     R4,#0x7
   \   000068   7B01         MOV     R3,#0x1
   \   00006A   7A08         MOV     R2,#0x8
   \   00006C   E5..         MOV     A,?V0
   \   00006E   75F007       MOV     B,#0x7
   \   000071   84           DIV     AB
   \   000072   A9F0         MOV     R1,B
   \   000074   12....       LCALL   `??PrintS16::?relay` ; Banked call to: PrintS16
   \   000077   7404         MOV     A,#0x4
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
    856                break;
    857              default :
    858                break;
    859             //fmj 20110708 end
    860            }
    861          }
   \                     ??HalLcdWriteLoc_1:
   \   00007C   7F08         MOV     R7,#0x8
   \   00007E   02....       LJMP    ?BANKED_LEAVE_XDATA
    862          
    863          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
   \                     HalLcdWriteValue:
    865          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   E9           MOV     A,R1
   \   00000E   FF           MOV     R7,A
   \   00000F   740C         MOV     A,#0xc
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
    866             //fmj 20110708 start
    867            switch (option)
   \   000016   EE           MOV     A,R6
   \   000017   14           DEC     A
   \   000018   600F         JZ      ??HalLcdWriteValue_0
   \   00001A   14           DEC     A
   \   00001B   600C         JZ      ??HalLcdWriteValue_0
   \   00001D   14           DEC     A
   \   00001E   6009         JZ      ??HalLcdWriteValue_0
   \   000020   14           DEC     A
   \   000021   6006         JZ      ??HalLcdWriteValue_0
   \   000023   14           DEC     A
   \   000024   6003         JZ      ??HalLcdWriteValue_0
   \   000026   14           DEC     A
   \   000027   7024         JNZ     ??HalLcdWriteValue_1
    868            {
    869              case 1:
    870              case 2:
    871              case 3:      
    872              case 4:     
    873              case 5:    
    874              case 6:
    875                 HalLcdClearLine( option%7 );
   \                     ??HalLcdWriteValue_0:
   \   000029                ; Setup parameters for call to function HalLcdClearLine
   \   000029   EE           MOV     A,R6
   \   00002A   75F007       MOV     B,#0x7
   \   00002D   84           DIV     AB
   \   00002E   A9F0         MOV     R1,B
   \   000030   12....       LCALL   `??HalLcdClearLine::?relay`; Banked call to: HalLcdClearLine
    876                 PrintS8(option%7,0,value,1,4);
   \   000033                ; Setup parameters for call to function PrintS8
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000038   7C04         MOV     R4,#0x4
   \   00003A   7B01         MOV     R3,#0x1
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   EE           MOV     A,R6
   \   00003F   75F007       MOV     B,#0x7
   \   000042   84           DIV     AB
   \   000043   A9F0         MOV     R1,B
   \   000045   12....       LCALL   `??PrintS8::?relay`  ; Banked call to: PrintS8
   \   000048   7404         MOV     A,#0x4
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
    877               /*  y = option%7;
    878                 x = 0;
    879          	while(LcdBuf[ii] != '\0')
    880          	{
    881          		adder = (LcdBuf[ii] - 0x20) * 16;
    882          
    883          		for(wm = 0;wm < 8;wm++)
    884          		{
    885          			SetRamAddr(y , x);
    886          			if(yn == 0)
    887          			{
    888          				WriteLCD(DATA, ~Font8X8[adder]);
    889          			}
    890          			else
    891          			{
    892          				WriteLCD(DATA, Font8X8[adder]);
    893          			}
    894          			adder += 1;
    895          			x += 1;
    896          		}
    897          		y += 1;
    898          		x -= 8;
    899          		for(wm = 0;wm < 8;wm++)
    900          		{
    901          			SetRamAddr(y , x);
    902          			if(yn == 0)
    903          			{
    904          				WriteLCD(DATA, ~Font8X8[adder]);
    905          			}
    906          			else
    907          			{
    908          				WriteLCD(DATA, Font8X8[adder]);	
    909          			}
    910          			adder += 1;
    911          			x += 1;
    912          		}
    913          		ii += 1;
    914          		y -= 1;
    915          	}*/
    916                //Print8(option%7,0,(unsigned char *)LcdBuf,1);
    917                break;
    918              default :
    919                break;
    920             //fmj 20110708 end
    921            }
    922          }
   \                     ??HalLcdWriteValue_1:
   \   00004D   7F04         MOV     R7,#0x4
   \   00004F   02....       LJMP    ?BANKED_LEAVE_XDATA
    923          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    924          void HalLcdWriteAddr ( uint16 value, uint8 option)
   \                     HalLcdWriteAddr:
    925          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V1,R1
    926             //fmj 20110708 start
    927            //unsigned char i; 
    928            uint8 LcdBuf[10];
    929            uint8 ch;
    930            LcdBuf[0] = 'D';
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   7444         MOV     A,#0x44
   \   000018   F0           MOVX    @DPTR,A
    931            LcdBuf[1] = 'U';
   \   000019   7401         MOV     A,#0x1
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   7455         MOV     A,#0x55
   \   000020   F0           MOVX    @DPTR,A
    932            LcdBuf[2] = 'T';
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   7454         MOV     A,#0x54
   \   000028   F0           MOVX    @DPTR,A
    933            LcdBuf[3] = ':';
   \   000029   7403         MOV     A,#0x3
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   743A         MOV     A,#0x3a
   \   000030   F0           MOVX    @DPTR,A
    934            LcdBuf[4] = ' ';
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   7420         MOV     A,#0x20
   \   000038   F0           MOVX    @DPTR,A
    935            ch = (value >> 12) & 0x0F;
   \   000039   8E..         MOV     ?V2,R6
   \   00003B   8F..         MOV     ?V3,R7
   \   00003D   740C         MOV     A,#0xc
   \   00003F   78..         MOV     R0,#?V2
   \   000041   12....       LCALL   ?US_SHR
   \   000044   E5..         MOV     A,?V2
   \   000046   F5..         MOV     ?V0,A
    936            LcdBuf[5] = ch + (( ch < 10 ) ? '0' : '7');
   \   000048   E5..         MOV     A,?V0
   \   00004A   C3           CLR     C
   \   00004B   940A         SUBB    A,#0xa
   \   00004D   5006         JNC     ??HalLcdWriteAddr_0
   \   00004F   7830         MOV     R0,#0x30
   \   000051   7900         MOV     R1,#0x0
   \   000053   8004         SJMP    ??HalLcdWriteAddr_1
   \                     ??HalLcdWriteAddr_0:
   \   000055   7837         MOV     R0,#0x37
   \   000057   7900         MOV     R1,#0x0
   \                     ??HalLcdWriteAddr_1:
   \   000059   E8           MOV     A,R0
   \   00005A   25..         ADD     A,?V0
   \   00005C   C0E0         PUSH    A
   \   00005E   7405         MOV     A,#0x5
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   D0E0         POP     A
   \   000065   F0           MOVX    @DPTR,A
    937            ch = (value >> 8) & 0x0F;
   \   000066   EE           MOV     A,R6
   \   000067   F8           MOV     R0,A
   \   000068   EF           MOV     A,R7
   \   000069   F9           MOV     R1,A
   \   00006A   E4           CLR     A
   \   00006B   C9           XCH     A,R1
   \   00006C   F8           MOV     R0,A
   \   00006D   E8           MOV     A,R0
   \   00006E   540F         ANL     A,#0xf
   \   000070   F5..         MOV     ?V0,A
    938            LcdBuf[6] = ch + (( ch < 10 ) ? '0' : '7');
   \   000072   E5..         MOV     A,?V0
   \   000074   C3           CLR     C
   \   000075   940A         SUBB    A,#0xa
   \   000077   5006         JNC     ??HalLcdWriteAddr_2
   \   000079   7830         MOV     R0,#0x30
   \   00007B   7900         MOV     R1,#0x0
   \   00007D   8004         SJMP    ??HalLcdWriteAddr_3
   \                     ??HalLcdWriteAddr_2:
   \   00007F   7837         MOV     R0,#0x37
   \   000081   7900         MOV     R1,#0x0
   \                     ??HalLcdWriteAddr_3:
   \   000083   E8           MOV     A,R0
   \   000084   25..         ADD     A,?V0
   \   000086   C0E0         PUSH    A
   \   000088   7406         MOV     A,#0x6
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   D0E0         POP     A
   \   00008F   F0           MOVX    @DPTR,A
    939            ch = (value >> 4) & 0x0F;
   \   000090   EE           MOV     A,R6
   \   000091   C4           SWAP    A
   \   000092   540F         ANL     A,#0xf
   \   000094   F5..         MOV     ?V0,A
    940            LcdBuf[7] = ch + (( ch < 10 ) ? '0' : '7');
   \   000096   E5..         MOV     A,?V0
   \   000098   C3           CLR     C
   \   000099   940A         SUBB    A,#0xa
   \   00009B   5006         JNC     ??HalLcdWriteAddr_4
   \   00009D   7830         MOV     R0,#0x30
   \   00009F   7900         MOV     R1,#0x0
   \   0000A1   8004         SJMP    ??HalLcdWriteAddr_5
   \                     ??HalLcdWriteAddr_4:
   \   0000A3   7837         MOV     R0,#0x37
   \   0000A5   7900         MOV     R1,#0x0
   \                     ??HalLcdWriteAddr_5:
   \   0000A7   E8           MOV     A,R0
   \   0000A8   25..         ADD     A,?V0
   \   0000AA   C0E0         PUSH    A
   \   0000AC   7407         MOV     A,#0x7
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   D0E0         POP     A
   \   0000B3   F0           MOVX    @DPTR,A
    941            ch = value  & 0x0F;
   \   0000B4   EE           MOV     A,R6
   \   0000B5   540F         ANL     A,#0xf
   \   0000B7   F5..         MOV     ?V0,A
    942            LcdBuf[8] = ch + (( ch < 10 ) ? '0' : '7');
   \   0000B9   E5..         MOV     A,?V0
   \   0000BB   C3           CLR     C
   \   0000BC   940A         SUBB    A,#0xa
   \   0000BE   5006         JNC     ??HalLcdWriteAddr_6
   \   0000C0   7830         MOV     R0,#0x30
   \   0000C2   7900         MOV     R1,#0x0
   \   0000C4   8004         SJMP    ??HalLcdWriteAddr_7
   \                     ??HalLcdWriteAddr_6:
   \   0000C6   7837         MOV     R0,#0x37
   \   0000C8   7900         MOV     R1,#0x0
   \                     ??HalLcdWriteAddr_7:
   \   0000CA   E8           MOV     A,R0
   \   0000CB   25..         ADD     A,?V0
   \   0000CD   C0E0         PUSH    A
   \   0000CF   7408         MOV     A,#0x8
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   D0E0         POP     A
   \   0000D6   F0           MOVX    @DPTR,A
    943           
    944            LcdBuf[9] = '\0';  
   \   0000D7   7409         MOV     A,#0x9
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   7400         MOV     A,#0x0
   \   0000DE   F0           MOVX    @DPTR,A
    945            switch (option)
   \   0000DF   E5..         MOV     A,?V1
   \   0000E1   14           DEC     A
   \   0000E2   600F         JZ      ??HalLcdWriteAddr_8
   \   0000E4   14           DEC     A
   \   0000E5   600C         JZ      ??HalLcdWriteAddr_8
   \   0000E7   14           DEC     A
   \   0000E8   6009         JZ      ??HalLcdWriteAddr_8
   \   0000EA   14           DEC     A
   \   0000EB   6006         JZ      ??HalLcdWriteAddr_8
   \   0000ED   14           DEC     A
   \   0000EE   6003         JZ      ??HalLcdWriteAddr_8
   \   0000F0   14           DEC     A
   \   0000F1   703A         JNZ     ??HalLcdWriteAddr_9
    946            {
    947              case 1:
    948              case 2:
    949              case 3:      
    950              case 4:     
    951              case 5:    
    952              case 6:
    953                 HalLcdClearLine( option%7 );
   \                     ??HalLcdWriteAddr_8:
   \   0000F3                ; Setup parameters for call to function HalLcdClearLine
   \   0000F3   E5..         MOV     A,?V1
   \   0000F5   75F007       MOV     B,#0x7
   \   0000F8   84           DIV     AB
   \   0000F9   A9F0         MOV     R1,B
   \   0000FB   12....       LCALL   `??HalLcdClearLine::?relay`; Banked call to: HalLcdClearLine
    954                 Print8(option%7,0,(unsigned char *)LcdBuf,1);
   \   0000FE                ; Setup parameters for call to function Print8
   \   0000FE   75..01       MOV     ?V2,#0x1
   \   000101   75..00       MOV     ?V3,#0x0
   \   000104   78..         MOV     R0,#?V2
   \   000106   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000109   7402         MOV     A,#0x2
   \   00010B   12....       LCALL   ?XSTACK_DISP100_8
   \   00010E   88..         MOV     ?V2,R0
   \   000110   89..         MOV     ?V3,R1
   \   000112   78..         MOV     R0,#?V2
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000117   7C00         MOV     R4,#0x0
   \   000119   7D00         MOV     R5,#0x0
   \   00011B   E5..         MOV     A,?V1
   \   00011D   75F007       MOV     B,#0x7
   \   000120   84           DIV     AB
   \   000121   AAF0         MOV     R2,B
   \   000123   7B00         MOV     R3,#0x0
   \   000125   12....       LCALL   `??Print8::?relay`   ; Banked call to: Print8
   \   000128   7404         MOV     A,#0x4
   \   00012A   12....       LCALL   ?DEALLOC_XSTACK8
    955               /*  y = option%7;
    956                 x = 0;
    957          	while(LcdBuf[ii] != '\0')
    958          	{
    959          		adder = (LcdBuf[ii] - 0x20) * 16;
    960          
    961          		for(wm = 0;wm < 8;wm++)
    962          		{
    963          			SetRamAddr(y , x);
    964          			if(yn == 0)
    965          			{
    966          				WriteLCD(DATA, ~Font8X8[adder]);
    967          			}
    968          			else
    969          			{
    970          				WriteLCD(DATA, Font8X8[adder]);
    971          			}
    972          			adder += 1;
    973          			x += 1;
    974          		}
    975          		y += 1;
    976          		x -= 8;
    977          		for(wm = 0;wm < 8;wm++)
    978          		{
    979          			SetRamAddr(y , x);
    980          			if(yn == 0)
    981          			{
    982          				WriteLCD(DATA, ~Font8X8[adder]);
    983          			}
    984          			else
    985          			{
    986          				WriteLCD(DATA, Font8X8[adder]);	
    987          			}
    988          			adder += 1;
    989          			x += 1;
    990          		}
    991          		ii += 1;
    992          		y -= 1;
    993          	}*/
    994                //Print8(option%7,0,(unsigned char *)LcdBuf,1);
    995                break;
    996              default :
    997                break;
    998             //fmj 20110708 end
    999            }
   1000          }
   \                     ??HalLcdWriteAddr_9:
   \   00012D   740A         MOV     A,#0xa
   \   00012F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000132   7F04         MOV     R7,#0x4
   \   000134   02....       LJMP    ?BANKED_LEAVE_XDATA
   1001          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1002          void HalLcdWriteScreen( char *line1, char *line2 )
   \                     HalLcdWriteScreen:
   1003          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   1004          #if (HAL_LCD == TRUE)
   1005            HalLcdWriteString( line1, 3 );
   \   00000D                ; Setup parameters for call to function HalLcdWriteString
   \   00000D   7903         MOV     R1,#0x3
   \   00000F   EE           MOV     A,R6
   \   000010   FA           MOV     R2,A
   \   000011   EF           MOV     A,R7
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1006            HalLcdWriteString( line2, 5 );
   \   000016                ; Setup parameters for call to function HalLcdWriteString
   \   000016   7905         MOV     R1,#0x5
   \   000018   AA..         MOV     R2,?V0
   \   00001A   AB..         MOV     R3,?V1
   \   00001C   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1007          #endif
   1008          
   1009          }
   \   00001F   7F02         MOV     R7,#0x2
   \   000021   02....       LJMP    ?BANKED_LEAVE_XDATA
   1010          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1011          void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
   \                     HalLcdWriteStringValue:
   1012          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V12,R2
   \   00000C   8B..         MOV     ?V13,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V5,R1
   \   000014   742A         MOV     A,#0x2a
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V6,A
   1013          #if (HAL_LCD == TRUE)
   1014            uint8 tmpLen;
   1015            uint8 buf[20];
   1016            uint32 err;
   1017          
   1018            tmpLen = (uint8)osal_strlen( (char*)title );
   \   00001C                ; Setup parameters for call to function osal_strlen
   \   00001C   AA..         MOV     R2,?V12
   \   00001E   AB..         MOV     R3,?V13
   \   000020   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000023   EA           MOV     A,R2
   \   000024   F5..         MOV     ?V4,A
   1019            osal_memcpy( buf, title, tmpLen );
   \   000026                ; Setup parameters for call to function osal_memcpy
   \   000026   85....       MOV     ?V8,?V12
   \   000029   85....       MOV     ?V9,?V13
   \   00002C   75..00       MOV     ?V10,#0x0
   \   00002F   78..         MOV     R0,#?V8
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000034   AC..         MOV     R4,?V4
   \   000036   7D00         MOV     R5,#0x0
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?XSTACK_DISP101_8
   \   00003D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   1020            buf[tmpLen] = ' ';
   \   000045   A8..         MOV     R0,?V4
   \   000047   7900         MOV     R1,#0x0
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   E582         MOV     A,DPL
   \   000051   28           ADD     A,R0
   \   000052   F582         MOV     DPL,A
   \   000054   E583         MOV     A,DPH
   \   000056   39           ADDC    A,R1
   \   000057   F583         MOV     DPH,A
   \   000059   7420         MOV     A,#0x20
   \   00005B   F0           MOVX    @DPTR,A
   1021            err = (uint32)(value);
   \   00005C   EE           MOV     A,R6
   \   00005D   F8           MOV     R0,A
   \   00005E   EF           MOV     A,R7
   \   00005F   F9           MOV     R1,A
   \   000060   E4           CLR     A
   \   000061   FA           MOV     R2,A
   \   000062   FB           MOV     R3,A
   \   000063   88..         MOV     ?V0,R0
   \   000065   89..         MOV     ?V1,R1
   \   000067   8A..         MOV     ?V2,R2
   \   000069   8B..         MOV     ?V3,R3
   1022            _ltoa( err, &buf[tmpLen+1], format );
   \   00006B                ; Setup parameters for call to function _ltoa
   \   00006B   A8..         MOV     R0,?V4
   \   00006D   7900         MOV     R1,#0x0
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   E582         MOV     A,DPL
   \   000077   28           ADD     A,R0
   \   000078   F582         MOV     DPL,A
   \   00007A   E583         MOV     A,DPH
   \   00007C   39           ADDC    A,R1
   \   00007D   F583         MOV     DPH,A
   \   00007F   A3           INC     DPTR
   \   000080   8582..       MOV     ?V8,DPL
   \   000083   8583..       MOV     ?V9,DPH
   \   000086   78..         MOV     R0,#?V8
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   A9..         MOV     R1,?V5
   \   00008D   AA..         MOV     R2,?V0
   \   00008F   AB..         MOV     R3,?V1
   \   000091   AC..         MOV     R4,?V2
   \   000093   AD..         MOV     R5,?V3
   \   000095   12....       LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
   \   000098   7402         MOV     A,#0x2
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
   1023            HalLcdWriteString( (char*)buf, line );		
   \   00009D                ; Setup parameters for call to function HalLcdWriteString
   \   00009D   A9..         MOV     R1,?V6
   \   00009F   AA..         MOV     R2,?XSP + 0
   \   0000A1   AB..         MOV     R3,?XSP + 1
   \   0000A3   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1024          #endif
   1025          }
   \   0000A6   7414         MOV     A,#0x14
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   7F0E         MOV     R7,#0xe
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
   1026          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1027          void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
   \                     HalLcdWriteStringValueValue:
   1028                                            uint16 value2, uint8 format2, uint8 line )
   1029          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1030          ;
   1031          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1032          void upLcd( char *ptr,uint8 op )
   \                     upLcd:
   1033          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
   1034            HalLcdWriteString(ptr,op);
   \   00000B                ; Setup parameters for call to function HalLcdWriteString
   \   00000B   A9..         MOV     R1,?V0
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1035          }
   \   000014   7F01         MOV     R7,#0x1
   \   000016   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ContrastValue>`:
   \   000000   5A           DB 90

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??delay1::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delay1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??delay_us::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delay_us

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Write595::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Write595

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??WriteLCD::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WriteLCD

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SetRamAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetRamAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SetContrast::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetContrast

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??InitDisplay::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitDisplay

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??contrastctrl::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    contrastctrl

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ClearScreen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ClearScreen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Print6::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Print6

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Printn8::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Printn8

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PrintS8::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PrintS8

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PrintS16::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PrintS16

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PrintCh8::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PrintCh8

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Print8::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Print8

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Print::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Print

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdClearLine::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdClearLine

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteString::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteString

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteLoc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteLoc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteValue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteScreen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteScreen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteStringValue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteStringValueValue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValueValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??upLcd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    upLcd

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IEEE:">`:
   \   000000   49454545     DB "IEEE:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Init lcd2">`:
   \   000000   496E6974     DB "Init lcd2"
   \            206C6364
   \            3200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "                ">`:
   \   000000   20202020     DB "                "
   \            20202020
   \            20202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7f:
   \   000000   7F000000     DD 127

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7fff:
   \   000000   FF7F0000     DD 32767

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   ClearScreen
        0      9   -> SetRamAddr
        0      9   -> WriteLCD
      0     49   HalLcdClearLine
        0     14   -> Print8
      2      0   HalLcdInit
        2      0   -> ClearScreen
        2      0   -> HalLcdWriteString
        2      0   -> SetContrast
        2      0   -> WriteLCD
        2      0   -> delay_us
      1     26   HalLcdWriteAddr
        0     22   -> HalLcdClearLine
        0     26   -> Print8
      0     20   HalLcdWriteLoc
        0     16   -> HalLcdClearLine
        0     20   -> PrintS16
      0     10   HalLcdWriteScreen
        0     10   -> HalLcdWriteString
      0     81   HalLcdWriteString
        0     35   -> HalLcdClearLine
        0     39   -> Print8
        0     38   -> osal_memcpy
        0     35   -> strlen
      0     46   HalLcdWriteStringValue
        0     42   -> HalLcdWriteString
        0     44   -> _ltoa
        0     45   -> osal_memcpy
        0     42   -> osal_strlen
      0      4   HalLcdWriteStringValueValue
      0     17   HalLcdWriteValue
        0     12   -> HalLcdClearLine
        0     16   -> PrintS8
      2      0   InitDisplay
        2      0   -> SetContrast
        2      0   -> WriteLCD
      1     25   Print
        0     23   -> Print8
      0     15   Print6
        0     15   -> SetRamAddr
        0     15   -> WriteLCD
      0     57   Print8
        0     18   -> SetRamAddr
        0     18   -> WriteLCD
      0     18   PrintCh8
        0     16   -> SetRamAddr
        0     16   -> WriteLCD
      1     58   PrintS16
        0     38   -> Print8
      1     49   PrintS8
        0     33   -> Print8
      1     37   Printn8
        0     33   -> Print8
      0     18   SetContrast
        0      9   -> WriteLCD
      0     27   SetRamAddr
        0      9   -> WriteLCD
      0      9   Write595
      0     27   WriteLCD
        0      9   -> Write595
        0      9   -> delay1
      0      9   contrastctrl
        0      9   -> SetContrast
        0      9   -> delay_us
      0      9   delay1
      0      9   delay_us
      0      9   upLcd
        0      9   -> HalLcdWriteString


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "                ">
       6  ?<Constant "IEEE:">
      10  ?<Constant "Init lcd2">
       1  ?<Initializer for ContrastValue>
      46  ClearScreen
       6  ClearScreen::?relay
       1  ContrastValue
      50  HalLcdClearLine
       6  HalLcdClearLine::?relay
     263  HalLcdInit
       6  HalLcdInit::?relay
     311  HalLcdWriteAddr
       6  HalLcdWriteAddr::?relay
     129  HalLcdWriteLoc
       6  HalLcdWriteLoc::?relay
      36  HalLcdWriteScreen
       6  HalLcdWriteScreen::?relay
     166  HalLcdWriteString
       6  HalLcdWriteString::?relay
     176  HalLcdWriteStringValue
       6  HalLcdWriteStringValue::?relay
       3  HalLcdWriteStringValueValue
       6  HalLcdWriteStringValueValue::?relay
      82  HalLcdWriteValue
       6  HalLcdWriteValue::?relay
      53  InitDisplay
       6  InitDisplay::?relay
       1  P0DIR
       1  P1DIR
       1  P2DIR
     227  Print
     174  Print6
       6  Print6::?relay
     315  Print8
       6  Print8::?relay
       6  Print::?relay
     251  PrintCh8
       6  PrintCh8::?relay
     595  PrintS16
       6  PrintS16::?relay
     406  PrintS8
       6  PrintS8::?relay
     194  Printn8
       6  Printn8::?relay
      41  SetContrast
       6  SetContrast::?relay
      54  SetRamAddr
       6  SetRamAddr::?relay
      37  Write595
       6  Write595::?relay
      48  WriteLCD
       6  WriteLCD::?relay
       1  _A_P0
       1  _A_P1
       1  _A_P2
       4  __Constant_7f
       4  __Constant_7fff
       4  __Constant_a
      70  contrastctrl
       6  contrastctrl::?relay
      13  delay1
       6  delay1::?relay
      75  delay_us
       6  delay_us::?relay
      25  upLcd
       6  upLcd::?relay

 
 3 840 bytes in segment BANKED_CODE
   156 bytes in segment BANK_RELAYS
     6 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    45 bytes in segment XDATA_ROM_C
 
 3 997 bytes of CODE  memory
    33 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  6 bytes shared)
     1 byte  of XDATA memory

Errors: none
Warnings: none
