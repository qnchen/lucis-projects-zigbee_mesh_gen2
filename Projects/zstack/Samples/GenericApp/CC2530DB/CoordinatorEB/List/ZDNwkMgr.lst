###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  17:49:23
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDNwkMgr.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDNwkMgr.c" -D ZTOOL_P1 -D MT_TASK -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_RESTORE -D
#        NV_INIT -D NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D OPEN_FCS -lC
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\ZDNwkMgr.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\ZDNwkMgr.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDNwkMgr.c
      1          /**************************************************************************************************
      2            Filename:       ZDNwkMgr.c
      3            Revised:        $Date: 2007-10-17 15:38:45 -0700 (Wed, 17 Oct 2007) $
      4            Revision:       $Revision: 15716 $
      5          
      6            Description:    The ZigBee Network Manager.
      7          
      8          
      9            Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComDef.h"
     49          #include "nwk_util.h"
     50          #include "ZDApp.h"
     51          #include "ZDObject.h"
     52          #include "ZGlobals.h"
     53          #include "ZDNwkMgr.h"
     54          
     55          #if defined( MT_ZDO_FUNC )
     56            #include "MT_ZDO.h"
     57          #endif
     58            
     59          #if defined ( LCD_SUPPORTED )
     60            #include "OnBoard.h"
     61          #endif
     62          
     63          /* HAL */
     64          #include "hal_lcd.h"
     65            
     66          /******************************************************************************
     67           * CONSTANTS
     68           */
     69          
     70          #define ONE_MINUTE             60000  // 1(m) * 60(s) * 1000(ms)
     71          
     72          #if defined ( LCD_SUPPORTED )

   \                                 In  segment XDATA_ROM_C, align 1
     73            const char NwkMgrStr_1[]     = "NM-fail not hi";
   \                     NwkMgrStr_1:
   \   000000   4E4D2D66     DB "NM-fail not hi"
   \            61696C20
   \            6E6F7420
   \            686900  

   \                                 In  segment XDATA_ROM_C, align 1
     74            const char NwkMgrStr_2[]     = "NM-cur<last fail";
   \                     NwkMgrStr_2:
   \   000000   4E4D2D63     DB "NM-cur<last fail"
   \            75723C6C
   \            61737420
   \            6661696C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
     75            const char NwkMgrStr_3[]     = "NM-energy too hi";
   \                     NwkMgrStr_3:
   \   000000   4E4D2D65     DB "NM-energy too hi"
   \            6E657267
   \            7920746F
   \            6F206869
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
     76            const char NwkMgrStr_4[]     = "NM-energy not up";
   \                     NwkMgrStr_4:
   \   000000   4E4D2D65     DB "NM-energy not up"
   \            6E657267
   \            79206E6F
   \            74207570
   \            00      
     77          #endif
     78            
     79          /******************************************************************************
     80           * TYPEDEFS
     81           */
     82          
     83          /*********************************************************************
     84           * GLOBAL VARIABLES
     85           */
     86            
     87          // Task ID for internal task/event processing. This variable will be
     88          // received when ZDNwkMgr_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          uint8 ZDNwkMgr_TaskID = 0;
   \                     ZDNwkMgr_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     90          
     91          /******************************************************************************
     92           * LOCAL VARIABLES
     93           */
     94          
     95          // Frequency Agility variables

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          uint8 ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq = 0;
   \                     ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          zAddrType_t ZDNwkMgr_MgmtNwkUpdateNotifyAddr;
   \                     ZDNwkMgr_MgmtNwkUpdateNotifyAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          uint16 ZDNwkMgr_UpdateNotifyTimer = 0;
   \                     ZDNwkMgr_UpdateNotifyTimer:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          uint8  ZDNwkMgr_NumUpdateNotifySent = 0;
   \                     ZDNwkMgr_NumUpdateNotifySent:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          uint8  ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
   \                     ZDNwkMgr_WaitingForNotifyConfirm:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          uint16 ZDNwkMgr_TotalTransmissions;
   \                     ZDNwkMgr_TotalTransmissions:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          uint16 ZDNwkMgr_TxFailures;
   \                     ZDNwkMgr_TxFailures:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    103          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          ZDO_MgmtNwkUpdateReq_t ZDNwkMgr_MgmtNwkUpdateReq;
   \                     ZDNwkMgr_MgmtNwkUpdateReq:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    105            
    106          #if defined ( NWK_MANAGER )
    107          uint16 ZDNwkMgr_UpdateRequestTimer = 0;
    108          uint8  ZDNwkMgr_LastChannelEnergy = 0;
    109          uint16 ZDNwkMgr_LastChannelFailureRate = 0;
    110          #endif // NWK_MANAGER
    111          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          uint8 ZDNwkMgr_NewChannel;
   \                     ZDNwkMgr_NewChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    113          
    114          // PAN ID Conflict variables
    115          #if defined ( NWK_MANAGER )
    116          uint8 ZDNwkMgr_PanIdUpdateInProgress = FALSE;
    117          #endif // NWK_MANAGER
    118          
    119          /*********************************************************************
    120           * GLOBAL FUNCTIONS
    121           */
    122          // Freguency Agility functions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          void (*pZDNwkMgr_ReportChannelInterference)( NLME_ChanInterference_t *chanInterference ) = NULL;
   \                     pZDNwkMgr_ReportChannelInterference:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          void (*pZDNwkMgr_ProcessDataConfirm)( afDataConfirm_t *afDataConfirm ) = NULL;
   \                     pZDNwkMgr_ProcessDataConfirm:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          void (*pZDNwkMgr_EDScanConfirmCB)( NLME_EDScanConfirm_t *EDScanConfirm ) = NULL;
   \                     pZDNwkMgr_EDScanConfirmCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    126          
    127          // PAN ID Conflict functions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          void (*pZDNwkMgr_NetworkReportCB)( ZDNwkMgr_NetworkReport_t *pReport ) = NULL;
   \                     pZDNwkMgr_NetworkReportCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          void (*pZDNwkMgr_NetworkUpdateCB)( ZDNwkMgr_NetworkUpdate_t *pUpdate ) = NULL;
   \                     pZDNwkMgr_NetworkUpdateCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    130          
    131          /******************************************************************************
    132           * LOCAL FUNCTIONS
    133           */
    134          
    135          void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg );
    136          void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr );
    137          
    138          // Frequency Agility functions
    139          static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    140          
    141          static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg );
    142          static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference );
    143          static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
    144          static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
    145          static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
    146                                                         uint16 totalTransmissions, uint16 txFailures,
    147                                                         ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm, uint8 txOptions );
    148          void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm );
    149          void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm );
    150          void ZDNwkMgr_ReportChannelInterference( NLME_ChanInterference_t *chanInterference );
    151          
    152          #if defined ( NWK_MANAGER )
    153          static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg );
    154          static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify );
    155          #endif // NWK_MANAGER
    156          
    157          // PAN ID Conflict functions
    158          #if defined ( NWK_MANAGER )
    159          void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport );
    160          void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate );
    161          
    162          void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport );
    163          void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate );
    164          #endif // NWK_MANAGER
    165          
    166          /*********************************************************************
    167           * @fn      ZDNwkMgr_Init
    168           *
    169           * @brief   Initialization function for the Network Manager Task.
    170           *          This is called during initialization and should contain
    171           *          any application specific initialization (ie. hardware
    172           *          initialization/setup, table initialization, power up
    173           *          notificaiton ... ).
    174           *
    175           * @param   task_id - the ID assigned by OSAL.  This ID should be
    176           *                    used to send messages and set timers.
    177           *
    178           * @return  none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void ZDNwkMgr_Init( byte task_id )
   \                     ZDNwkMgr_Init:
    181          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    182            // Save the task ID
    183            ZDNwkMgr_TaskID = task_id;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   00000B   F0           MOVX    @DPTR,A
    184          
    185            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Server_Discovery_rsp );
   \   00000C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000C   7A15         MOV     R2,#0x15
   \   00000E   7B80         MOV     R3,#-0x80
   \   000010   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000018   E9           MOV     A,R1
    186          
    187            // Frequecy Agility initialization
    188            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_req );
   \   000019                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000019   7A38         MOV     R2,#0x38
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000025   E9           MOV     A,R1
    189          #if defined ( NWK_MANAGER )
    190            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_notify );
    191          #endif // NWK_MANAGER
    192          
    193            pZDNwkMgr_EDScanConfirmCB = ZDNwkMgr_EDScanConfirmCB;
   \   000026   90....       MOV     DPTR,#pZDNwkMgr_EDScanConfirmCB
   \   000029   74..         MOV     A,#`??ZDNwkMgr_EDScanConfirmCB::?relay` & 0xff
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   74..         MOV     A,#(`??ZDNwkMgr_EDScanConfirmCB::?relay` >> 8) & 0xff
   \   00002F   F0           MOVX    @DPTR,A
    194            pZDNwkMgr_ProcessDataConfirm = ZDNwkMgr_ProcessDataConfirm;
   \   000030   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   000033   74..         MOV     A,#`??ZDNwkMgr_ProcessDataConfirm::?relay` & 0xff
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   74..         MOV     A,#(`??ZDNwkMgr_ProcessDataConfirm::?relay` >> 8) & 0xff
   \   000039   F0           MOVX    @DPTR,A
    195            pZDNwkMgr_ReportChannelInterference = ZDNwkMgr_ReportChannelInterference;
   \   00003A   90....       MOV     DPTR,#pZDNwkMgr_ReportChannelInterference
   \   00003D   74..         MOV     A,#`??ZDNwkMgr_ReportChannelInterference::?relay` & 0xff
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   74..         MOV     A,#(`??ZDNwkMgr_ReportChannelInterference::?relay` >> 8) & 0xff
   \   000043   F0           MOVX    @DPTR,A
    196            
    197            // PAN ID Conflict initialization
    198          #if defined ( NWK_MANAGER )
    199            pZDNwkMgr_NetworkReportCB = ZDNwkMgr_NetworkReportCB;
    200            pZDNwkMgr_NetworkUpdateCB = ZDNwkMgr_NetworkUpdateCB;
    201          #endif // NWK_MANAGER
    202            
    203            ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addrMode = Addr16Bit;
   \   000044   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr + 8
   \   000047   7402         MOV     A,#0x2
   \   000049   F0           MOVX    @DPTR,A
    204            ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   00004A   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
   \   00004D   74FE         MOV     A,#-0x2
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   74FF         MOV     A,#-0x1
   \   000053   F0           MOVX    @DPTR,A
    205          }
   \   000054   7F01         MOV     R7,#0x1
   \   000056   02....       LJMP    ?BANKED_LEAVE_XDATA
    206          
    207          /*********************************************************************
    208           * @fn      ZDNwkMgr_event_loop
    209           *
    210           * @brief   Main event loop for the Network Manager task. This function
    211           *          is called to process all events for the task.  Events
    212           *          include timers, messages and any other user defined events.
    213           *
    214           * @param   task_id  - The OSAL assigned task ID.
    215           * @param   events - events to process.  This is a bit map and can
    216           *                   contain more than one event.
    217           *
    218           * @return  none
    219           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    220          UINT16 ZDNwkMgr_event_loop( byte task_id, UINT16 events )
   \                     ZDNwkMgr_event_loop:
    221          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
    222            osal_event_hdr_t *msgPtr;
    223            (void)task_id;  // Intentionally unreferenced parameter
    224          
    225            if ( events & SYS_EVENT_MSG )
   \   00000B   E5..         MOV     A,?V0
   \   00000D   5400         ANL     A,#0x0
   \   00000F   F8           MOV     R0,A
   \   000010   E5..         MOV     A,?V1
   \   000012   5480         ANL     A,#0x80
   \   000014   F9           MOV     R1,A
   \   000015   E8           MOV     A,R0
   \   000016   49           ORL     A,R1
   \   000017   6064         JZ      ??ZDNwkMgr_event_loop_0
    226            {
    227              msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
   \   000019                ; Setup parameters for call to function osal_msg_receive
   \   000019   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000021   8A..         MOV     ?V4,R2
   \   000023   8B..         MOV     ?V5,R3
   \   000025   AE..         MOV     R6,?V4
   \   000027   AF..         MOV     R7,?V5
    228              while ( msgPtr )
   \                     ??ZDNwkMgr_event_loop_1:
   \   000029   EE           MOV     A,R6
   \   00002A   4F           ORL     A,R7
   \   00002B   6043         JZ      ??ZDNwkMgr_event_loop_2
    229              {
    230                switch ( msgPtr->event )
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   E0           MOVX    A,@DPTR
   \   000032   24CF         ADD     A,#-0x31
   \   000034   6010         JZ      ??ZDNwkMgr_event_loop_3
   \   000036   14           DEC     A
   \   000037   6016         JZ      ??ZDNwkMgr_event_loop_4
   \   000039   245F         ADD     A,#0x5f
   \   00003B   7019         JNZ     ??ZDNwkMgr_event_loop_5
    231                {
    232                  case ZDO_CB_MSG:
    233                    // ZDO sends the message that we registered for
    234                    ZDNwkMgr_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \   00003D                ; Setup parameters for call to function ZDNwkMgr_ProcessMsgCBs
   \   00003D   EE           MOV     A,R6
   \   00003E   FA           MOV     R2,A
   \   00003F   EF           MOV     A,R7
   \   000040   FB           MOV     R3,A
   \   000041   12....       LCALL   `??ZDNwkMgr_ProcessMsgCBs::?relay`; Banked call to: ZDNwkMgr_ProcessMsgCBs
    235                    break;
   \   000044   8010         SJMP    ??ZDNwkMgr_event_loop_5
    236                   
    237                  case NM_CHANNEL_INTERFERE:
    238                    // NWK layer sends the message when it detectes Channel Interference
    239                    ZDNwkMgr_ProcessChannelInterference( (ZDNwkMgr_ChanInterference_t *)msgPtr );
   \                     ??ZDNwkMgr_event_loop_3:
   \   000046                ; Setup parameters for call to function ZDNwkMgr_ProcessChannelInterference
   \   000046   EE           MOV     A,R6
   \   000047   FA           MOV     R2,A
   \   000048   EF           MOV     A,R7
   \   000049   FB           MOV     R3,A
   \   00004A   12....       LCALL   `??ZDNwkMgr_ProcessChannelInterference::?relay`; Banked call to: ZDNwkMgr_ProcessChannelInterference
    240                    break;
   \   00004D   8007         SJMP    ??ZDNwkMgr_event_loop_5
    241             
    242                  case NM_ED_SCAN_CONFIRM:
    243                    // NWK layer sends the message when it receives an ED scan confirmation
    244                    ZDNwkMgr_ProcessEDScanConfirm( (ZDNwkMgr_EDScanConfirm_t *)msgPtr );
   \                     ??ZDNwkMgr_event_loop_4:
   \   00004F                ; Setup parameters for call to function ZDNwkMgr_ProcessEDScanConfirm
   \   00004F   EE           MOV     A,R6
   \   000050   FA           MOV     R2,A
   \   000051   EF           MOV     A,R7
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   `??ZDNwkMgr_ProcessEDScanConfirm::?relay`; Banked call to: ZDNwkMgr_ProcessEDScanConfirm
    245                    break;
    246          #if defined ( NWK_MANAGER )
    247                  case ZDO_NETWORK_REPORT:
    248                    // NWK layer sends this message when it receives a Network Report message
    249                    ZDNwkMgr_ProcessNetworkReport( (ZDNwkMgr_NetworkReport_t *)msgPtr );
    250                    break;
    251                 
    252                  case ZDO_NETWORK_UPDATE:
    253                    // NKW layer sends this message when it receives a Network Update message
    254                    ZDNwkMgr_ProcessNetworkUpdate( (ZDNwkMgr_NetworkUpdate_t *)msgPtr );
    255                    break;
    256          #endif // NWK_MANAGER         
    257                  default:
    258                    break;
    259                }
    260          
    261                // Release the memory
    262                osal_msg_deallocate( (uint8 *)msgPtr );
   \                     ??ZDNwkMgr_event_loop_5:
   \   000056                ; Setup parameters for call to function osal_msg_deallocate
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   00005D   E9           MOV     A,R1
    263          
    264                // Next
    265                msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
   \   00005E                ; Setup parameters for call to function osal_msg_receive
   \   00005E   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000066   8A..         MOV     ?V4,R2
   \   000068   8B..         MOV     ?V5,R3
   \   00006A   AE..         MOV     R6,?V4
   \   00006C   AF..         MOV     R7,?V5
   \   00006E   80B9         SJMP    ??ZDNwkMgr_event_loop_1
    266              }
    267              
    268              // Return unprocessed events
    269              return (events ^ SYS_EVENT_MSG);
   \                     ??ZDNwkMgr_event_loop_2:
   \   000070   E5..         MOV     A,?V0
   \   000072   6400         XRL     A,#0x0
   \   000074   FA           MOV     R2,A
   \   000075   E5..         MOV     A,?V1
   \   000077   6480         XRL     A,#0x80
   \   000079   FB           MOV     R3,A
   \   00007A   02....       LJMP    ??ZDNwkMgr_event_loop_6 & 0xFFFF
    270            }
    271          
    272            if ( events & ZDNWKMGR_CHANNEL_CHANGE_EVT )
   \                     ??ZDNwkMgr_event_loop_0:
   \   00007D   E5..         MOV     A,?V0
   \   00007F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000081   5030         JNC     ??ZDNwkMgr_event_loop_7
    273            {       
    274              // Switch channel
    275              _NIB.nwkLogicalChannel = ZDNwkMgr_NewChannel;
   \   000083   90....       MOV     DPTR,#ZDNwkMgr_NewChannel
   \   000086   E0           MOVX    A,@DPTR
   \   000087   90....       MOV     DPTR,#_NIB + 22
   \   00008A   F0           MOVX    @DPTR,A
    276              ZMacSetReq( ZMacChannel, &ZDNwkMgr_NewChannel );
   \   00008B                ; Setup parameters for call to function ZMacSetReq
   \   00008B   7A..         MOV     R2,#ZDNwkMgr_NewChannel & 0xff
   \   00008D   7B..         MOV     R3,#(ZDNwkMgr_NewChannel >> 8) & 0xff
   \   00008F   79E1         MOV     R1,#-0x1f
   \   000091   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000094   E9           MOV     A,R1
    277           
    278              // Our Channel has been changed -- notify to save info into NV
    279              ZDApp_NwkStateUpdateCB();
   \   000095                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   000095   12....       LCALL   `??ZDApp_NwkStateUpdateCB::?relay`; Banked call to: ZDApp_NwkStateUpdateCB
    280              
    281              // Reset the total transmit count and the transmit failure counters
    282              _NIB.nwkTotalTransmissions = 0;
   \   000098   90....       MOV     DPTR,#_NIB + 107
   \   00009B   7400         MOV     A,#0x0
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   7400         MOV     A,#0x0
   \   0000A1   F0           MOVX    @DPTR,A
    283              nwkTransmissionFailures( TRUE );
   \   0000A2                ; Setup parameters for call to function nwkTransmissionFailures
   \   0000A2   7901         MOV     R1,#0x1
   \   0000A4   12....       LCALL   `??nwkTransmissionFailures::?relay`; Banked call to: nwkTransmissionFailures
    284              
    285              return ( events ^ ZDNWKMGR_CHANNEL_CHANGE_EVT );
   \   0000A7   E5..         MOV     A,?V0
   \   0000A9   6401         XRL     A,#0x1
   \   0000AB   FA           MOV     R2,A
   \   0000AC   E5..         MOV     A,?V1
   \   0000AE   6400         XRL     A,#0x0
   \   0000B0   FB           MOV     R3,A
   \   0000B1   807E         SJMP    ??ZDNwkMgr_event_loop_6
    286            }
    287          
    288            if ( events & ZDNWKMGR_UPDATE_NOTIFY_EVT )
   \                     ??ZDNwkMgr_event_loop_7:
   \   0000B3   E5..         MOV     A,?V0
   \   0000B5   5402         ANL     A,#0x2
   \   0000B7   6044         JZ      ??ZDNwkMgr_event_loop_8
    289            {
    290              // Update the Update Notify timer
    291              if ( ZDNwkMgr_UpdateNotifyTimer > 0 )
   \   0000B9   90....       MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F8           MOV     R0,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F9           MOV     R1,A
   \   0000C1   E8           MOV     A,R0
   \   0000C2   49           ORL     A,R1
   \   0000C3   6026         JZ      ??ZDNwkMgr_event_loop_9
    292              {
    293                ZDNwkMgr_UpdateNotifyTimer--;
   \   0000C5   90....       MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   24FF         ADD     A,#-0x1
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   34FF         ADDC    A,#-0x1
   \   0000D0   F0           MOVX    @DPTR,A
    294                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
   \   0000D1                ; Setup parameters for call to function osal_start_timerEx
   \   0000D1   90....       MOV     DPTR,#__Constant_ea60
   \   0000D4   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000D7   7A02         MOV     R2,#0x2
   \   0000D9   7B00         MOV     R3,#0x0
   \   0000DB   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000E3   7404         MOV     A,#0x4
   \   0000E5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E8   E9           MOV     A,R1
   \   0000E9   8006         SJMP    ??ZDNwkMgr_event_loop_10
    295              }
    296              else
    297              {
    298                ZDNwkMgr_NumUpdateNotifySent = 0;
   \                     ??ZDNwkMgr_event_loop_9:
   \   0000EB   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   0000EE   7400         MOV     A,#0x0
   \   0000F0   F0           MOVX    @DPTR,A
    299              }
    300              
    301              return ( events ^ ZDNWKMGR_UPDATE_NOTIFY_EVT );
   \                     ??ZDNwkMgr_event_loop_10:
   \   0000F1   E5..         MOV     A,?V0
   \   0000F3   6402         XRL     A,#0x2
   \   0000F5   FA           MOV     R2,A
   \   0000F6   E5..         MOV     A,?V1
   \   0000F8   6400         XRL     A,#0x0
   \   0000FA   FB           MOV     R3,A
   \   0000FB   8034         SJMP    ??ZDNwkMgr_event_loop_6
    302            }
    303            
    304          #if defined ( NWK_MANAGER )
    305            if ( events & ZDNWKMGR_UPDATE_REQUEST_EVT )
    306            {
    307              // Update the Update Request timer
    308              if ( ZDNwkMgr_UpdateRequestTimer > 0 )
    309              {
    310                ZDNwkMgr_UpdateRequestTimer--;
    311                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
    312              }
    313              
    314              return ( events ^ ZDNWKMGR_UPDATE_REQUEST_EVT );
    315            }
    316          #endif // NWK_MANAGER
    317            
    318            if ( events & ZDNWKMGR_SCAN_REQUEST_EVT )
   \                     ??ZDNwkMgr_event_loop_8:
   \   0000FD   E5..         MOV     A,?V0
   \   0000FF   5408         ANL     A,#0x8
   \   000101   602A         JZ      ??ZDNwkMgr_event_loop_11
    319            {  
    320              if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
   \   000103   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   000106   E0           MOVX    A,@DPTR
   \   000107   6018         JZ      ??ZDNwkMgr_event_loop_12
    321              {
    322                if (  NLME_EDScanRequest( ZDNwkMgr_MgmtNwkUpdateReq.channelMask, 
    323                                          ZDNwkMgr_MgmtNwkUpdateReq.scanDuration ) == ZSuccess )
   \   000109                ; Setup parameters for call to function NLME_EDScanRequest
   \   000109   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 4
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   F9           MOV     R1,A
   \   00010E   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq
   \   000111   12....       LCALL   ?XLOAD_R2345
   \   000114   12....       LCALL   `??NLME_EDScanRequest::?relay`; Banked call to: NLME_EDScanRequest
   \   000117   E9           MOV     A,R1
   \   000118   7007         JNZ     ??ZDNwkMgr_event_loop_12
    324                {
    325                  ZDNwkMgr_MgmtNwkUpdateReq.scanCount--;
   \   00011A   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   24FF         ADD     A,#-0x1
   \   000120   F0           MOVX    @DPTR,A
    326                }
    327              }
    328                
    329              return ( events ^ ZDNWKMGR_SCAN_REQUEST_EVT );
   \                     ??ZDNwkMgr_event_loop_12:
   \   000121   E5..         MOV     A,?V0
   \   000123   6408         XRL     A,#0x8
   \   000125   FA           MOV     R2,A
   \   000126   E5..         MOV     A,?V1
   \   000128   6400         XRL     A,#0x0
   \   00012A   FB           MOV     R3,A
   \   00012B   8004         SJMP    ??ZDNwkMgr_event_loop_6
    330            }
    331            
    332            // Discard or make more handlers
    333            return 0;
   \                     ??ZDNwkMgr_event_loop_11:
   \   00012D   7A00         MOV     R2,#0x0
   \   00012F   7B00         MOV     R3,#0x0
   \                     ??ZDNwkMgr_event_loop_6:
   \   000131   7F06         MOV     R7,#0x6
   \   000133   02....       LJMP    ?BANKED_LEAVE_XDATA
    334          }
    335          
    336          /*********************************************************************
    337           * @fn      ZDNwkMgr_ProcessMsgCBs
    338           *
    339           * @brief   Process the incoming messages.
    340           *
    341           * @param   msgPtr - message to process
    342           *
    343           * @return  TRUE if message to be freed. FALSE otherwise.
    344           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    345          static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDNwkMgr_ProcessMsgCBs:
    346          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    347            switch ( inMsg->clusterID )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V1,A
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDNwkMgr_ProcessMsgCBs>_0`:
   \   00001E   0000         DW        0
   \   000020   0200         DW        2
   \   000022   3800         DW        56
   \   000024   ....         DW        ??ZDNwkMgr_ProcessMsgCBs_0
   \   000026   1580         DW        32789
   \   000028   ....         DW        ??ZDNwkMgr_ProcessMsgCBs_1
   \   00002A   ....         DW        ??ZDNwkMgr_ProcessMsgCBs_2
    348            {   
    349              case Mgmt_NWK_Update_req:
    350                ZDNwkMgr_ProcessMgmtNwkUpdateReq( inMsg );
   \                     ??ZDNwkMgr_ProcessMsgCBs_0:
   \   00002C                ; Setup parameters for call to function ZDNwkMgr_ProcessMgmtNwkUpdateReq
   \   00002C   EE           MOV     A,R6
   \   00002D   FA           MOV     R2,A
   \   00002E   EF           MOV     A,R7
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   `??ZDNwkMgr_ProcessMgmtNwkUpdateReq::?relay`; Banked call to: ZDNwkMgr_ProcessMgmtNwkUpdateReq
    351                break;    
   \   000033   8007         SJMP    ??ZDNwkMgr_ProcessMsgCBs_2
    352          #if defined ( NWK_MANAGER )  
    353              case Mgmt_NWK_Update_notify:
    354                ZDNwkMgr_ProcessMgmtNwkUpdateNotify( inMsg );
    355                break;
    356          #endif // NWK_MANAGER
    357              case Server_Discovery_rsp:
    358                ZDNwkMgr_ProcessServerDiscRsp( inMsg );
   \                     ??ZDNwkMgr_ProcessMsgCBs_1:
   \   000035                ; Setup parameters for call to function ZDNwkMgr_ProcessServerDiscRsp
   \   000035   EE           MOV     A,R6
   \   000036   FA           MOV     R2,A
   \   000037   EF           MOV     A,R7
   \   000038   FB           MOV     R3,A
   \   000039   12....       LCALL   `??ZDNwkMgr_ProcessServerDiscRsp::?relay`; Banked call to: ZDNwkMgr_ProcessServerDiscRsp
    359                break;
    360                
    361              default:
    362                // Unknown message
    363                break;
    364            }
    365          }
   \                     ??ZDNwkMgr_ProcessMsgCBs_2:
   \   00003C   7F02         MOV     R7,#0x2
   \   00003E   02....       LJMP    ?BANKED_LEAVE_XDATA
    366          
    367          /*********************************************************************
    368           * Frequency Agility Routines
    369           */
    370          #if defined ( NWK_MANAGER )
    371          /*********************************************************************
    372           * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateNotify
    373           *
    374           * @brief       This function processes the incoming Management
    375           *              Network Update notify.
    376           *
    377           * @param       pUpdateNotify - notify message
    378           *
    379           * @return      TRUE if message to be freed. FALSE otherwise.
    380           */
    381          static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
    382          {
    383            if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
    384            {
    385              ZDO_MgmtNwkUpdateNotify_t *pNotify = ZDO_ParseMgmtNwkUpdateNotify( inMsg ); 
    386              if ( pNotify )
    387              {
    388                ZDNwkMgr_CheckForChannelChange( pNotify );
    389          
    390                osal_mem_free( pNotify );
    391              }
    392            }
    393          }
    394          
    395          /*********************************************************************
    396           * @fn          ZDNwkMgr_CheckForChannelChange
    397           *
    398           * @brief       This function processes the incoming Management Network
    399           *              Update notify and starts an Update Request if a channel
    400           *              change is needed.
    401           *
    402           * @param       pUpdateNotify - notify message
    403           *
    404           * @return      none
    405           */
    406          static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify )
    407          {
    408            uint8  i;
    409            uint16 failureRate;
    410            uint8  lowestEnergyIndex;
    411            uint8  lowestEnergyValue = 0xFF;
    412                
    413            // If any device has more than 50% transmission failures, a channel
    414            // change should be considered
    415            failureRate = ( pNotify->transmissionFailures * 100 ) / pNotify->totalTransmissions;
    416            if ( failureRate < ZDNWKMGR_CC_TX_FAILURE )
    417            {
    418          #if defined ( LCD_SUPPORTED )
    419              HalLcdWriteString( (char*)NwkMgrStr_1, HAL_LCD_LINE_1 );
    420              HalLcdWriteStringValueValue( ": ", failureRate, 10, ZDNWKMGR_CC_TX_FAILURE, 10, HAL_LCD_LINE_2 );
    421          #endif
    422              return;
    423            }
    424          
    425            // If the current failure rate is higher than the last failure rate,
    426            // a channel change should be considered
    427            if ( failureRate < ZDNwkMgr_LastChannelFailureRate )
    428            {
    429          #if defined ( LCD_SUPPORTED )
    430              HalLcdWriteString( (char*)NwkMgrStr_2, HAL_LCD_LINE_1 );
    431              HalLcdWriteStringValueValue( ": ", failureRate, 10, 
    432                                           ZDNwkMgr_LastChannelFailureRate, 10, HAL_LCD_LINE_2 );
    433          #endif
    434              return;
    435            }
    436            
    437            // Select a single channel based on the Mgmt_NWK_Update_notify based on
    438            // the lowest energy. This is the proposed new channel. 
    439            for ( i = 0; i < pNotify->listCount; i++ )
    440            {
    441              if ( pNotify->energyValues[i] < lowestEnergyValue )
    442              {
    443                lowestEnergyIndex = i;
    444                lowestEnergyValue = pNotify->energyValues[i];
    445              }
    446            }
    447                
    448            // If this new channel does not have an energy level below an acceptable
    449            // threshold, a channel change should not be done.
    450            if ( lowestEnergyValue > ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL )
    451            {
    452          #if defined ( LCD_SUPPORTED )
    453              HalLcdWriteString( (char*)NwkMgrStr_3, HAL_LCD_LINE_1 );
    454              HalLcdWriteStringValueValue( ": ", lowestEnergyValue, 10, 
    455                                           ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL, 10, HAL_LCD_LINE_2 );
    456          #endif
    457              return;
    458            }
    459          
    460            // Channel change should be done -- find out the new active channel
    461            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
    462            {
    463              if ( ( (uint32)1 << i ) & pNotify->scannedChannels )
    464              {
    465                if ( lowestEnergyIndex == 0 )
    466                  break;
    467                lowestEnergyIndex--;
    468              }
    469            }
    470            
    471            if ( ( _NIB.nwkLogicalChannel != i ) && ( ZDNwkMgr_UpdateRequestTimer == 0 ) )
    472            {
    473              uint32 channelMask;
    474              zAddrType_t dstAddr;
    475              
    476              // The new channel
    477              ZDNwkMgr_NewChannel = i;
    478                  
    479              // Prior to changing channels, the network manager should store the 
    480              // energy scan value as the last energy scan value and the failure 
    481              // rate from the existing channel as the last failure rate.  These 
    482              // values are useful to allow comparison of the failure rate and energy
    483              // level on the previous channel to evaluate if the network is causing
    484              // its own interference.
    485              ZDNwkMgr_LastChannelEnergy = lowestEnergyValue;
    486              ZDNwkMgr_LastChannelFailureRate = failureRate;
    487                 
    488              // The network manager should broadcast a Mgmt_NWK_Update_req notifying
    489              // devices of the new channel.  The broadcast shall be to all routers 
    490              // and coordinator.
    491              dstAddr.addrMode = AddrBroadcast;
    492              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    493              channelMask = (uint32)1 << i;
    494                  
    495              // Increment the nwkUpdateId parameter and set the updateID in the beacon
    496              NLME_SetUpdateID(_NIB.nwkUpdateId + 1); 
    497              
    498              ZDP_MgmtNwkUpdateReq( &dstAddr, channelMask, 0xfe, 0, _NIB.nwkUpdateId, 0 );
    499                  
    500              // The network manager shall set a timer based on the value of 
    501              // apsChannelTimer upon issue of a Mgmt_NWK_Update_req that changes 
    502              // channels and shall not issue another such command until this 
    503              // timer expires.  
    504              ZDNwkMgr_UpdateRequestTimer = ZDNWKMGR_UPDATE_REQUEST_TIMER;
    505              osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
    506                            
    507              // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
    508              // the local network manager shall set a timer equal to the 
    509              // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
    510              // expiration of this timer.  NOTE: since we won't recevied our own
    511              // broadcasted Update Request, we start the channel change timer here.  
    512              osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
    513                                  ZDNWKMGR_BCAST_DELIVERY_TIME );
    514            }
    515          }
    516          #endif  // NWK_MANAGER
    517          
    518          /*********************************************************************
    519           * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateReq
    520           *
    521           * @brief       This function processes the incoming Management
    522           *              Network Update request and starts the request (if needed).
    523           *
    524           * @param       Request message
    525           *
    526           * @return      none
    527           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    528          static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg )
   \                     ZDNwkMgr_ProcessMgmtNwkUpdateReq:
    529          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    530            ZDO_MgmtNwkUpdateReq_t Req;
    531            
    532            ZDO_ParseMgmtNwkUpdateReq( inMsg, &Req );
   \   00000E                ; Setup parameters for call to function ZDO_ParseMgmtNwkUpdateReq
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDO_ParseMgmtNwkUpdateReq::?relay`; Banked call to: ZDO_ParseMgmtNwkUpdateReq
    533             
    534            if ( Req.scanDuration <= 0x05 )
   \   000019   7404         MOV     A,#0x4
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   C3           CLR     C
   \   000020   9406         SUBB    A,#0x6
   \   000022   507D         JNC     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0
    535            {
    536              // Request is to scan over channelMask. The result will be reported by Confirm   
    537              if ( ( !inMsg->wasBroadcast )                     && 
    538                   ( Req.scanCount >  ZDNWKMGR_MIN_SCAN_COUNT ) && 
    539                   ( Req.scanCount <= ZDNWKMGR_MAX_SCAN_COUNT ) )
   \   000024   EE           MOV     A,R6
   \   000025   240B         ADD     A,#0xb
   \   000027   F582         MOV     DPL,A
   \   000029   E4           CLR     A
   \   00002A   3F           ADDC    A,R7
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6003         JZ      $+5
   \   000030   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
   \   000033   7405         MOV     A,#0x5
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
   \   00003E   7405         MOV     A,#0x5
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E0           MOVX    A,@DPTR
   \   000044   C3           CLR     C
   \   000045   9406         SUBB    A,#0x6
   \   000047   4003         JC      $+5
   \   000049   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    540              {
    541                if ( NLME_EDScanRequest( Req.channelMask, Req.scanDuration ) == ZSuccess )
   \   00004C                ; Setup parameters for call to function NLME_EDScanRequest
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   12....       LCALL   ?XLOAD_R2345
   \   00005C   12....       LCALL   `??NLME_EDScanRequest::?relay`; Banked call to: NLME_EDScanRequest
   \   00005F   E9           MOV     A,R1
   \   000060   6003         JZ      $+5
   \   000062   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    542                {
    543                  // Save off the information to be used for the notify
    544                  ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq            = inMsg->TransSeq;
   \   000065   EE           MOV     A,R6
   \   000066   240F         ADD     A,#0xf
   \   000068   F582         MOV     DPL,A
   \   00006A   E4           CLR     A
   \   00006B   3F           ADDC    A,R7
   \   00006C   F583         MOV     DPH,A
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
   \   000072   F0           MOVX    @DPTR,A
    545                  ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F8           MOV     R0,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
   \   000081   E8           MOV     A,R0
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   E9           MOV     A,R1
   \   000085   F0           MOVX    @DPTR,A
    546                  
    547                  Req.scanCount--;
   \   000086   7405         MOV     A,#0x5
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   24FF         ADD     A,#-0x1
   \   00008E   F0           MOVX    @DPTR,A
    548                  
    549                  // Save off scan info for the subsequent scans
    550                  ZDNwkMgr_MgmtNwkUpdateReq = Req;
   \   00008F   85..82       MOV     DPL,?XSP + 0
   \   000092   85..83       MOV     DPH,?XSP + 1
   \   000095   7C..         MOV     R4,#ZDNwkMgr_MgmtNwkUpdateReq & 0xff
   \   000097   7D..         MOV     R5,#(ZDNwkMgr_MgmtNwkUpdateReq >> 8) & 0xff
   \   000099   7409         MOV     A,#0x9
   \   00009B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00009E   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    551                }
    552              }
    553            }
    554            else if ( Req.scanDuration == 0xFE )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0:
   \   0000A1   7404         MOV     A,#0x4
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   64FE         XRL     A,#0xfe
   \   0000A9   6003         JZ      $+5
   \   0000AB   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2 & 0xFFFF
    555            {
    556              // Request is to change Channel. The command provide a new active
    557              // channel as a single channel in the channelMask.
    558              if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
   \   0000AE   7406         MOV     A,#0x6
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F8           MOV     R0,A
   \   0000B5   90....       MOV     DPTR,#_NIB + 109
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   C3           CLR     C
   \   0000BA   98           SUBB    A,R0
   \   0000BB   4003         JC      $+5
   \   0000BD   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    559              {
    560                uint8 i;
    561                
    562                // Set update ID in the Beacon
    563                NLME_SetUpdateID(Req.nwkUpdateId); 
   \   0000C0                ; Setup parameters for call to function NLME_SetUpdateID
   \   0000C0   7406         MOV     A,#0x6
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F9           MOV     R1,A
   \   0000C7   12....       LCALL   `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    564                
    565                // Find out the new active channel
    566                for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   0000CA   75..00       MOV     ?V4,#0x0
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3:
   \   0000CD   E5..         MOV     A,?V4
   \   0000CF   C3           CLR     C
   \   0000D0   941B         SUBB    A,#0x1b
   \   0000D2   5028         JNC     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4
    567                {
    568                  if ( ( (uint32)1 << i ) & Req.channelMask )
   \   0000D4   85..82       MOV     DPL,?XSP + 0
   \   0000D7   85..83       MOV     DPH,?XSP + 1
   \   0000DA   78..         MOV     R0,#?V0
   \   0000DC   12....       LCALL   ?L_MOV_X
   \   0000DF   E5..         MOV     A,?V4
   \   0000E1   78..         MOV     R0,#?V0
   \   0000E3   12....       LCALL   ?UL_SHR
   \   0000E6   90....       MOV     DPTR,#__Constant_1
   \   0000E9   78..         MOV     R0,#?V0
   \   0000EB   12....       LCALL   ?L_AND_X
   \   0000EE   E5..         MOV     A,?V0
   \   0000F0   45..         ORL     A,?V1
   \   0000F2   45..         ORL     A,?V2
   \   0000F4   45..         ORL     A,?V3
   \   0000F6   7004         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4
    569                  {
    570                    break;
    571                  }
    572                }
   \   0000F8   05..         INC     ?V4
   \   0000FA   80D1         SJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3
    573          
    574                if ( _NIB.nwkLogicalChannel != i )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4:
   \   0000FC   90....       MOV     DPTR,#_NIB + 22
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   65..         XRL     A,?V4
   \   000102   7003         JNZ     $+5
   \   000104   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    575                {
    576                  ZDNwkMgr_NewChannel = i;
   \   000107   E5..         MOV     A,?V4
   \   000109   90....       MOV     DPTR,#ZDNwkMgr_NewChannel
   \   00010C   F0           MOVX    @DPTR,A
    577                    
    578                  // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
    579                  // the local network manager shall set a timer equal to the 
    580                  // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
    581                  // expiration of this timer.  Each node shall also increment the 
    582                  // nwkUpdateId parameter and also reset the total transmit count 
    583                  // and the transmit failure counters.  
    584                  osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
    585                                      ZDNWKMGR_BCAST_DELIVERY_TIME );
   \   00010D                ; Setup parameters for call to function osal_start_timerEx
   \   00010D   90....       MOV     DPTR,#_NIB + 7
   \   000110   E0           MOVX    A,@DPTR
   \   000111   F8           MOV     R0,A
   \   000112   7900         MOV     R1,#0x0
   \   000114   E8           MOV     A,R0
   \   000115   75F064       MOV     B,#0x64
   \   000118   A4           MUL     AB
   \   000119   C8           XCH     A,R0
   \   00011A   AAF0         MOV     R2,B
   \   00011C   75F000       MOV     B,#0x0
   \   00011F   A4           MUL     AB
   \   000120   2A           ADD     A,R2
   \   000121   FA           MOV     R2,A
   \   000122   75F064       MOV     B,#0x64
   \   000125   E9           MOV     A,R1
   \   000126   A4           MUL     AB
   \   000127   2A           ADD     A,R2
   \   000128   F9           MOV     R1,A
   \   000129   88..         MOV     ?V0,R0
   \   00012B   E9           MOV     A,R1
   \   00012C   F5..         MOV     ?V1,A
   \   00012E   33           RLC     A
   \   00012F   95E0         SUBB    A,0xE0 /* A   */
   \   000131   F5..         MOV     ?V2,A
   \   000133   F5..         MOV     ?V3,A
   \   000135   78..         MOV     R0,#?V0
   \   000137   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00013A   7A01         MOV     R2,#0x1
   \   00013C   7B00         MOV     R3,#0x0
   \   00013E   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000141   E0           MOVX    A,@DPTR
   \   000142   F9           MOV     R1,A
   \   000143   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000146   7404         MOV     A,#0x4
   \   000148   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014B   E9           MOV     A,R1
   \   00014C   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    586                }
    587              }
    588            }
    589            else if ( Req.scanDuration == 0xFF )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2:
   \   00014F   7404         MOV     A,#0x4
   \   000151   12....       LCALL   ?XSTACK_DISP0_8
   \   000154   E0           MOVX    A,@DPTR
   \   000155   64FF         XRL     A,#0xff
   \   000157   7061         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5
    590            {
    591              // Request is to change apsChannelMask and nwkManagerAddr
    592              if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
   \   000159   7406         MOV     A,#0x6
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   F8           MOV     R0,A
   \   000160   90....       MOV     DPTR,#_NIB + 109
   \   000163   E0           MOVX    A,@DPTR
   \   000164   C3           CLR     C
   \   000165   98           SUBB    A,R0
   \   000166   4003         JC      $+5
   \   000168   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    593              {
    594                NLME_SetUpdateID(Req.nwkUpdateId); // Set the updateID in the beacon
   \   00016B                ; Setup parameters for call to function NLME_SetUpdateID
   \   00016B   7406         MOV     A,#0x6
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   E0           MOVX    A,@DPTR
   \   000171   F9           MOV     R1,A
   \   000172   12....       LCALL   `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    595                 
    596                if ( ( Req.channelMask != 0 ) && ( _NIB.channelList != Req.channelMask ) )
   \   000175   85..82       MOV     DPL,?XSP + 0
   \   000178   85..83       MOV     DPH,?XSP + 1
   \   00017B   12....       LCALL   ?XLOAD_R0123
   \   00017E   E8           MOV     A,R0
   \   00017F   49           ORL     A,R1
   \   000180   4A           ORL     A,R2
   \   000181   4B           ORL     A,R3
   \   000182   6027         JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
   \   000184   85..82       MOV     DPL,?XSP + 0
   \   000187   85..83       MOV     DPH,?XSP + 1
   \   00018A   78..         MOV     R0,#?V0
   \   00018C   12....       LCALL   ?L_MOV_X
   \   00018F   90....       MOV     DPTR,#_NIB + 36
   \   000192   78..         MOV     R0,#?V0
   \   000194   12....       LCALL   ?L_EQ_X
   \   000197   6012         JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
    597                {
    598                  _NIB.channelList = Req.channelMask;
   \   000199   85..82       MOV     DPL,?XSP + 0
   \   00019C   85..83       MOV     DPH,?XSP + 1
   \   00019F   12....       LCALL   ?XLOAD_R0123
   \   0001A2   90....       MOV     DPTR,#_NIB + 36
   \   0001A5   12....       LCALL   ?XSTORE_R0123
    599                
    600                  // Our Channel List has been changed -- notify to save info into NV
    601                  ZDApp_NwkStateUpdateCB();
   \   0001A8                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   0001A8   12....       LCALL   `??ZDApp_NwkStateUpdateCB::?relay`; Banked call to: ZDApp_NwkStateUpdateCB
    602                }
    603              
    604                ZDNwkMgr_SetNwkManagerAddr( Req.nwkManagerAddr );
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6:
   \   0001AB                ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
   \   0001AB   7407         MOV     A,#0x7
   \   0001AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   FA           MOV     R2,A
   \   0001B2   A3           INC     DPTR
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   FB           MOV     R3,A
   \   0001B5   12....       LCALL   `??ZDNwkMgr_SetNwkManagerAddr::?relay`; Banked call to: ZDNwkMgr_SetNwkManagerAddr
   \   0001B8   806F         SJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    605              }
    606            }
    607            else // 0x06-0xFD
    608            {
    609              // Request is invalid
    610              if ( !inMsg->wasBroadcast )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5:
   \   0001BA   EE           MOV     A,R6
   \   0001BB   240B         ADD     A,#0xb
   \   0001BD   F582         MOV     DPL,A
   \   0001BF   E4           CLR     A
   \   0001C0   3F           ADDC    A,R7
   \   0001C1   F583         MOV     DPH,A
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   7063         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    611              {
    612                ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   0001C6   8E82         MOV     DPL,R6
   \   0001C8   8F83         MOV     DPH,R7
   \   0001CA   A3           INC     DPTR
   \   0001CB   A3           INC     DPTR
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   F8           MOV     R0,A
   \   0001CE   A3           INC     DPTR
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   F9           MOV     R1,A
   \   0001D1   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
   \   0001D4   E8           MOV     A,R0
   \   0001D5   F0           MOVX    @DPTR,A
   \   0001D6   A3           INC     DPTR
   \   0001D7   E9           MOV     A,R1
   \   0001D8   F0           MOVX    @DPTR,A
    613                ZDP_MgmtNwkUpdateNotify( inMsg->TransSeq, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr,
    614                                         ZDP_INVALID_REQTYPE, 0, 0, 0, 0, NULL, AF_TX_OPTIONS_NONE, false );
   \   0001D9                ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
   \   0001D9   75..00       MOV     ?V0,#0x0
   \   0001DC   78..         MOV     R0,#?V0
   \   0001DE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E1   75..00       MOV     ?V0,#0x0
   \   0001E4   78..         MOV     R0,#?V0
   \   0001E6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E9   E4           CLR     A
   \   0001EA   F5..         MOV     ?V0,A
   \   0001EC   F5..         MOV     ?V1,A
   \   0001EE   78..         MOV     R0,#?V0
   \   0001F0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F3   E4           CLR     A
   \   0001F4   F5..         MOV     ?V0,A
   \   0001F6   F5..         MOV     ?V1,A
   \   0001F8   78..         MOV     R0,#?V0
   \   0001FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FD   E4           CLR     A
   \   0001FE   F5..         MOV     ?V0,A
   \   000200   F5..         MOV     ?V1,A
   \   000202   78..         MOV     R0,#?V0
   \   000204   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000207   90....       MOV     DPTR,#__Constant_0
   \   00020A   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00020D   7D00         MOV     R5,#0x0
   \   00020F   7C80         MOV     R4,#-0x80
   \   000211   7A..         MOV     R2,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff
   \   000213   7B..         MOV     R3,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff
   \   000215   EE           MOV     A,R6
   \   000216   240F         ADD     A,#0xf
   \   000218   F582         MOV     DPL,A
   \   00021A   E4           CLR     A
   \   00021B   3F           ADDC    A,R7
   \   00021C   F583         MOV     DPH,A
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   F9           MOV     R1,A
   \   000220   12....       LCALL   `??ZDP_MgmtNwkUpdateNotify::?relay`; Banked call to: ZDP_MgmtNwkUpdateNotify
   \   000223   740C         MOV     A,#0xc
   \   000225   12....       LCALL   ?DEALLOC_XSTACK8
   \   000228   E9           MOV     A,R1
    615              }
    616            }
    617          }
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1:
   \   000229   7409         MOV     A,#0x9
   \   00022B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00022E   7F05         MOV     R7,#0x5
   \   000230   02....       LJMP    ?BANKED_LEAVE_XDATA
    618          
    619          /*********************************************************************
    620           * @fn      ZDNwkMgr_ProcessServerDiscRsp
    621           *
    622           * @brief   Process the incoming System Server Discovery Response
    623           *
    624           * @param   pRsp - Structure containing Server Discovery response
    625           *
    626           * @return  none
    627           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    628          void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDNwkMgr_ProcessServerDiscRsp:
    629          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    630            ZDO_ServerDiscRsp_t Rsp;
    631            
    632            ZDO_ParseServerDiscRsp( inMsg, &Rsp );
   \   00000E                ; Setup parameters for call to function ZDO_ParseServerDiscRsp
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDO_ParseServerDiscRsp::?relay`; Banked call to: ZDO_ParseServerDiscRsp
    633            
    634            if ( Rsp.status == ZSuccess )
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   701D         JNZ     ??ZDNwkMgr_ProcessServerDiscRsp_0
    635            {
    636              // Is the Network Manager bit set in the response?
    637              if ( Rsp.serverMask & NETWORK_MANAGER )
   \   000022   7401         MOV     A,#0x1
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   5440         ANL     A,#0x40
   \   00002F   600E         JZ      ??ZDNwkMgr_ProcessServerDiscRsp_0
    638              {
    639                // Set the Remote Device's NWK Address as the Network Manager Address
    640                ZDNwkMgr_SetNwkManagerAddr( inMsg->srcAddr.addr.shortAddr );
   \   000031                ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FA           MOV     R2,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FB           MOV     R3,A
   \   00003C   12....       LCALL   `??ZDNwkMgr_SetNwkManagerAddr::?relay`; Banked call to: ZDNwkMgr_SetNwkManagerAddr
    641              }
    642            }
    643          }
   \                     ??ZDNwkMgr_ProcessServerDiscRsp_0:
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044   7F01         MOV     R7,#0x1
   \   000046   02....       LJMP    ?BANKED_LEAVE_XDATA
    644          
    645          /*********************************************************************
    646           * @fn          ZDNwkMgr_ProcessChannelInterference
    647           *
    648           * @brief       This function processes the incoming Channel Interference
    649           *              detection message and sends out a notify (if needed).
    650           *
    651           * @param       pChannelInterference - interference message
    652           *
    653           * @return      none
    654           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    655          static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference )
   \                     ZDNwkMgr_ProcessChannelInterference:
    656          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    657            // To avoid a device with communication problems from constantly 
    658            // sending reports to the network manager, the device should not 
    659            // send a Mgmt_NWK_Update_notify more than 4 times per hour.
    660            if ( ZDNwkMgr_NumUpdateNotifySent < 4 )
   \   000009   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   C3           CLR     C
   \   00000E   9404         SUBB    A,#0x4
   \   000010   503F         JNC     ??ZDNwkMgr_ProcessChannelInterference_0
    661            {
    662              // Conduct an energy scan on all channels.
    663              if ( NLME_EDScanRequest( MAX_CHANNELS_24GHZ, _NIB.scanDuration ) == ZSuccess )
   \   000012                ; Setup parameters for call to function NLME_EDScanRequest
   \   000012   90....       MOV     DPTR,#_NIB + 42
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   90....       MOV     DPTR,#__Constant_7fff800
   \   00001A   12....       LCALL   ?XLOAD_R2345
   \   00001D   12....       LCALL   `??NLME_EDScanRequest::?relay`; Banked call to: NLME_EDScanRequest
   \   000020   E9           MOV     A,R1
   \   000021   702E         JNZ     ??ZDNwkMgr_ProcessChannelInterference_0
    664              {
    665                // Save the counters for the Update Notify message to be sent
    666                ZDNwkMgr_TotalTransmissions = pChanInterference->totalTransmissions;
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   90....       MOV     DPTR,#ZDNwkMgr_TotalTransmissions
   \   000031   E8           MOV     A,R0
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   E9           MOV     A,R1
   \   000035   F0           MOVX    @DPTR,A
    667                ZDNwkMgr_TxFailures = pChanInterference->txFailures;
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F8           MOV     R0,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   90....       MOV     DPTR,#ZDNwkMgr_TxFailures
   \   000046   E8           MOV     A,R0
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E9           MOV     A,R1
   \   00004A   F0           MOVX    @DPTR,A
    668          
    669                // Mark scan as channel inetrference check
    670                ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0xFF;
   \   00004B   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   00004E   74FF         MOV     A,#-0x1
   \   000050   F0           MOVX    @DPTR,A
    671              }
    672            }
    673          }
   \                     ??ZDNwkMgr_ProcessChannelInterference_0:
   \   000051   7F01         MOV     R7,#0x1
   \   000053   02....       LJMP    ?BANKED_LEAVE_XDATA
    674          
    675          /*********************************************************************
    676           * @fn          ZDNwkMgr_ProcessEDScanConfirm
    677           *
    678           * @brief       This function processes the incoming ED Scan Confirm
    679           *              message and sends out a notify (if needed).
    680           *
    681           * @param       pEDScanConfirm - SD Scan Confirmation message
    682           *
    683           * @return      none
    684           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    685          static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
   \                     ZDNwkMgr_ProcessEDScanConfirm:
    686          { 
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
    687            if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount == 0xFF )
   \   000009   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   64FF         XRL     A,#0xff
   \   00000F   700F         JNZ     ??ZDNwkMgr_ProcessEDScanConfirm_0
    688            {
    689              // Confirm to scan all channels for channel interference check
    690              ZDNwkMgr_CheckForChannelInterference( pEDScanConfirm ); 
   \   000011                ; Setup parameters for call to function ZDNwkMgr_CheckForChannelInterference
   \   000011   AA..         MOV     R2,?V2
   \   000013   AB..         MOV     R3,?V3
   \   000015   12....       LCALL   `??ZDNwkMgr_CheckForChannelInterference::?relay`; Banked call to: ZDNwkMgr_CheckForChannelInterference
    691              
    692              ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0;
   \   000018   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   00001B   7400         MOV     A,#0x0
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   8058         SJMP    ??ZDNwkMgr_ProcessEDScanConfirm_1
    693            }
    694            else
    695            {
    696              // Confirm to the requested scan
    697              uint16 txFailures = nwkTransmissionFailures( FALSE );
   \                     ??ZDNwkMgr_ProcessEDScanConfirm_0:
   \   000020                ; Setup parameters for call to function nwkTransmissionFailures
   \   000020   7900         MOV     R1,#0x0
   \   000022   12....       LCALL   `??nwkTransmissionFailures::?relay`; Banked call to: nwkTransmissionFailures
   \   000025   8A..         MOV     ?V4,R2
   \   000027   8B..         MOV     ?V5,R3
   \   000029   85....       MOV     ?V0,?V4
   \   00002C   85....       MOV     ?V1,?V5
    698              
    699              ZDNwkMgr_BuildAndSendUpdateNotify( ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq,
    700                                                 &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
    701                                                 _NIB.nwkTotalTransmissions, txFailures, 
    702                                                 pEDScanConfirm, AF_TX_OPTIONS_NONE );
   \   00002F                ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
   \   00002F   75..00       MOV     ?V4,#0x0
   \   000032   78..         MOV     R0,#?V4
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000037   78..         MOV     R0,#?V2
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   90....       MOV     DPTR,#_NIB + 107
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FC           MOV     R4,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FD           MOV     R5,A
   \   000049   7A..         MOV     R2,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff
   \   00004B   7B..         MOV     R3,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff
   \   00004D   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   12....       LCALL   `??ZDNwkMgr_BuildAndSendUpdateNotify::?relay`; Banked call to: ZDNwkMgr_BuildAndSendUpdateNotify
   \   000055   7405         MOV     A,#0x5
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
    703              // More scans needed?
    704              if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
   \   00005A   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   6018         JZ      ??ZDNwkMgr_ProcessEDScanConfirm_1
    705              {
    706                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_SCAN_REQUEST_EVT, 50 );
   \   000060                ; Setup parameters for call to function osal_start_timerEx
   \   000060   90....       MOV     DPTR,#__Constant_32
   \   000063   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000066   7A08         MOV     R2,#0x8
   \   000068   7B00         MOV     R3,#0x0
   \   00006A   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000072   7404         MOV     A,#0x4
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   E9           MOV     A,R1
    707              }
    708            }
    709          }
   \                     ??ZDNwkMgr_ProcessEDScanConfirm_1:
   \   000078   7F06         MOV     R7,#0x6
   \   00007A   02....       LJMP    ?BANKED_LEAVE_XDATA
    710          
    711          /*********************************************************************
    712           * @fn          ZDNwkMgr_CheckForChannelInterference
    713           *
    714           * @brief       This function processes the incoming ED Scan Confirm
    715           *              message and sends out an Update Notify (if needed).
    716           *
    717           * @param       pEDScanConfirm - SD Scan Confirmation message
    718           *
    719           * @return      none
    720           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    721          static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
   \                     ZDNwkMgr_CheckForChannelInterference:
    722          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
    723            uint8 i;
    724            uint8 channelEnergy = 0;
   \   000009   7E00         MOV     R6,#0x0
    725            uint8 energyIncreased = FALSE;
   \   00000B   7F00         MOV     R7,#0x0
    726              
    727            // Get the current channel energy
    728            if ( ( (uint32)1 << _NIB.nwkLogicalChannel ) & pEDScanConfirm->scannedChannels )
   \   00000D   85..82       MOV     DPL,?V2
   \   000010   85..83       MOV     DPH,?V3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   78..         MOV     R0,#?V4
   \   000018   12....       LCALL   ?L_MOV_X
   \   00001B   90....       MOV     DPTR,#_NIB + 22
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   78..         MOV     R0,#?V4
   \   000021   12....       LCALL   ?UL_SHR
   \   000024   90....       MOV     DPTR,#__Constant_1
   \   000027   78..         MOV     R0,#?V4
   \   000029   12....       LCALL   ?L_AND_X
   \   00002C   E5..         MOV     A,?V4
   \   00002E   45..         ORL     A,?V5
   \   000030   45..         ORL     A,?V6
   \   000032   45..         ORL     A,?V7
   \   000034   601A         JZ      ??ZDNwkMgr_CheckForChannelInterference_0
    729            {
    730              channelEnergy = pEDScanConfirm->energyDetectList[_NIB.nwkLogicalChannel];
   \   000036   90....       MOV     DPTR,#_NIB + 22
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   E5..         MOV     A,?V2
   \   00003F   28           ADD     A,R0
   \   000040   F582         MOV     DPL,A
   \   000042   E5..         MOV     A,?V3
   \   000044   39           ADDC    A,R1
   \   000045   F583         MOV     DPH,A
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FE           MOV     R6,A
    731            }
    732              
    733            // If this energy scan does not indicate higher energy on the current 
    734            // channel then other channels, no action is taken. The device should 
    735            // continue to operate as normal and the message counters are not reset.
    736            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \                     ??ZDNwkMgr_CheckForChannelInterference_0:
   \   000050   75..00       MOV     ?V0,#0x0
   \                     ??ZDNwkMgr_CheckForChannelInterference_1:
   \   000053   E5..         MOV     A,?V0
   \   000055   C3           CLR     C
   \   000056   941B         SUBB    A,#0x1b
   \   000058   5049         JNC     ??ZDNwkMgr_CheckForChannelInterference_2
    737            {
    738              if ( ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels ) && 
    739                   ( channelEnergy > pEDScanConfirm->energyDetectList[i] ) )
   \   00005A   85..82       MOV     DPL,?V2
   \   00005D   85..83       MOV     DPH,?V3
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   78..         MOV     R0,#?V4
   \   000065   12....       LCALL   ?L_MOV_X
   \   000068   E5..         MOV     A,?V0
   \   00006A   78..         MOV     R0,#?V4
   \   00006C   12....       LCALL   ?UL_SHR
   \   00006F   90....       MOV     DPTR,#__Constant_1
   \   000072   78..         MOV     R0,#?V4
   \   000074   12....       LCALL   ?L_AND_X
   \   000077   E5..         MOV     A,?V4
   \   000079   45..         ORL     A,?V5
   \   00007B   45..         ORL     A,?V6
   \   00007D   45..         ORL     A,?V7
   \   00007F   601E         JZ      ??ZDNwkMgr_CheckForChannelInterference_3
   \   000081   A8..         MOV     R0,?V0
   \   000083   7900         MOV     R1,#0x0
   \   000085   E5..         MOV     A,?V2
   \   000087   28           ADD     A,R0
   \   000088   F582         MOV     DPL,A
   \   00008A   E5..         MOV     A,?V3
   \   00008C   39           ADDC    A,R1
   \   00008D   F583         MOV     DPH,A
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   C3           CLR     C
   \   000098   9E           SUBB    A,R6
   \   000099   5004         JNC     ??ZDNwkMgr_CheckForChannelInterference_3
    740              {
    741                energyIncreased = TRUE;
   \   00009B   7F01         MOV     R7,#0x1
    742                break;
   \   00009D   8004         SJMP    ??ZDNwkMgr_CheckForChannelInterference_2
    743              }
    744            }
   \                     ??ZDNwkMgr_CheckForChannelInterference_3:
   \   00009F   05..         INC     ?V0
   \   0000A1   80B0         SJMP    ??ZDNwkMgr_CheckForChannelInterference_1
    745              
    746            // If the energy scan does indicate increased energy on the channel
    747            // in use, a Mgmt_NWK_Update_notify should be sent to the Network 
    748            // Manager to indicate interference is present.
    749            if ( energyIncreased )
   \                     ??ZDNwkMgr_CheckForChannelInterference_2:
   \   0000A3   EF           MOV     A,R7
   \   0000A4   6070         JZ      ??ZDNwkMgr_CheckForChannelInterference_4
    750            {
    751              // Send a Management Network Update notify to the Network Manager
    752              ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = _NIB.nwkManagerAddr;
   \   0000A6   90....       MOV     DPTR,#_NIB + 105
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F8           MOV     R0,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F9           MOV     R1,A
   \   0000AE   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
   \   0000B1   E8           MOV     A,R0
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E9           MOV     A,R1
   \   0000B5   F0           MOVX    @DPTR,A
    753              ZDNwkMgr_BuildAndSendUpdateNotify( 0, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
    754                                                 ZDNwkMgr_TotalTransmissions, ZDNwkMgr_TxFailures,
    755                                                 pEDScanConfirm, AF_MSG_ACK_REQUEST );
   \   0000B6                ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
   \   0000B6   75..10       MOV     ?V1,#0x10
   \   0000B9   78..         MOV     R0,#?V1
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BE   78..         MOV     R0,#?V2
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C3   90....       MOV     DPTR,#ZDNwkMgr_TxFailures
   \   0000C6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000C9   90....       MOV     DPTR,#ZDNwkMgr_TotalTransmissions
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   FC           MOV     R4,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   FD           MOV     R5,A
   \   0000D1   7A..         MOV     R2,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff
   \   0000D3   7B..         MOV     R3,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff
   \   0000D5   7900         MOV     R1,#0x0
   \   0000D7   12....       LCALL   `??ZDNwkMgr_BuildAndSendUpdateNotify::?relay`; Banked call to: ZDNwkMgr_BuildAndSendUpdateNotify
   \   0000DA   7405         MOV     A,#0x5
   \   0000DC   12....       LCALL   ?DEALLOC_XSTACK8
    756              ZDNwkMgr_WaitingForNotifyConfirm = TRUE; // Confirm will clear the counters
   \   0000DF   90....       MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
   \   0000E2   7401         MOV     A,#0x1
   \   0000E4   F0           MOVX    @DPTR,A
    757                
    758              if ( ZDNwkMgr_NumUpdateNotifySent == 0 )
   \   0000E5   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   7022         JNZ     ??ZDNwkMgr_CheckForChannelInterference_5
    759              {
    760                // First notify message sent within this hour. Start the Update Notify timer.
    761                ZDNwkMgr_UpdateNotifyTimer = ZDNWKMGR_UPDATE_NOTIFY_TIMER;
   \   0000EB   90....       MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
   \   0000EE   743C         MOV     A,#0x3c
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   7400         MOV     A,#0x0
   \   0000F4   F0           MOVX    @DPTR,A
    762                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
   \   0000F5                ; Setup parameters for call to function osal_start_timerEx
   \   0000F5   90....       MOV     DPTR,#__Constant_ea60
   \   0000F8   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000FB   7A02         MOV     R2,#0x2
   \   0000FD   7B00         MOV     R3,#0x0
   \   0000FF   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F9           MOV     R1,A
   \   000104   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000107   7404         MOV     A,#0x4
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010C   E9           MOV     A,R1
    763              }
    764              
    765              ZDNwkMgr_NumUpdateNotifySent++;
   \                     ??ZDNwkMgr_CheckForChannelInterference_5:
   \   00010D   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   000110   E0           MOVX    A,@DPTR
   \   000111   2401         ADD     A,#0x1
   \   000113   F0           MOVX    @DPTR,A
   \   000114   8038         SJMP    ??ZDNwkMgr_CheckForChannelInterference_6
    766            }
    767          #if defined ( LCD_SUPPORTED )
    768            else
    769            {
    770              HalLcdWriteString( (char*)NwkMgrStr_4, HAL_LCD_LINE_1 );
   \                     ??ZDNwkMgr_CheckForChannelInterference_4:
   \   000116                ; Setup parameters for call to function HalLcdWriteString
   \   000116   7901         MOV     R1,#0x1
   \   000118   7A..         MOV     R2,#NwkMgrStr_4 & 0xff
   \   00011A   7B..         MOV     R3,#(NwkMgrStr_4 >> 8) & 0xff
   \   00011C   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    771              HalLcdWriteStringValueValue( ": ", _NIB.nwkLogicalChannel, 10, channelEnergy, 10, HAL_LCD_LINE_2 );
   \   00011F                ; Setup parameters for call to function HalLcdWriteStringValueValue
   \   00011F   75..03       MOV     ?V1,#0x3
   \   000122   78..         MOV     R0,#?V1
   \   000124   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000127   75..0A       MOV     ?V1,#0xa
   \   00012A   78..         MOV     R0,#?V1
   \   00012C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012F   8E..         MOV     ?V4,R6
   \   000131   75..00       MOV     ?V5,#0x0
   \   000134   78..         MOV     R0,#?V4
   \   000136   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000139   790A         MOV     R1,#0xa
   \   00013B   90....       MOV     DPTR,#_NIB + 22
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   FC           MOV     R4,A
   \   000140   7D00         MOV     R5,#0x0
   \   000142   7A..         MOV     R2,#`?<Constant ": ">` & 0xff
   \   000144   7B..         MOV     R3,#(`?<Constant ": ">` >> 8) & 0xff
   \   000146   12....       LCALL   `??HalLcdWriteStringValueValue::?relay`; Banked call to: HalLcdWriteStringValueValue
   \   000149   7404         MOV     A,#0x4
   \   00014B   12....       LCALL   ?DEALLOC_XSTACK8
    772            }
    773          #endif
    774          }
   \                     ??ZDNwkMgr_CheckForChannelInterference_6:
   \   00014E   7F08         MOV     R7,#0x8
   \   000150   02....       LJMP    ?BANKED_LEAVE_XDATA
    775          
    776          /*********************************************************************
    777           * @fn          ZDNwkMgr_BuildAndSendUpdateNotify
    778           *
    779           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
    780           *              function sends a unicast message.
    781           *
    782           * @param       TransSeq - transaction sequence number
    783           * @param       dstAddr - destination address of the message
    784           * @param       pEDScanConfirm - update notify info
    785           *
    786           * @return      afStatus_t
    787           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    788          static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDNwkMgr_BuildAndSendUpdateNotify:
    789                                                         uint16 totalTransmissions, uint16 txFailures,
    790                                                         ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm,
    791                                                         uint8 txOptions )
    792          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V13,R1
   \   000007   8A..         MOV     ?V14,R2
   \   000009   8B..         MOV     ?V15,R3
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V1,R5
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FF           MOV     R7,A
   \   000019   741A         MOV     A,#0x1a
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V10,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V11,A
   \   000025   741C         MOV     A,#0x1c
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V12,A
    793            uint8 i;
    794            uint8 listCount = 0;
   \   00002D   75..00       MOV     ?V3,#0x0
    795            uint8 *energyValues = NULL;
   \   000030   75..00       MOV     ?V8,#0x0
   \   000033   75..00       MOV     ?V9,#0x0
    796            
    797            // Count number of energy detects
    798            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   000036   75..00       MOV     ?V2,#0x0
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_0:
   \   000039   E5..         MOV     A,?V2
   \   00003B   C3           CLR     C
   \   00003C   941B         SUBB    A,#0x1b
   \   00003E   502D         JNC     ??ZDNwkMgr_BuildAndSendUpdateNotify_1
    799            {
    800              if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
   \   000040   85..82       MOV     DPL,?V10
   \   000043   85..83       MOV     DPH,?V11
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   78..         MOV     R0,#?V4
   \   00004B   12....       LCALL   ?L_MOV_X
   \   00004E   E5..         MOV     A,?V2
   \   000050   78..         MOV     R0,#?V4
   \   000052   12....       LCALL   ?UL_SHR
   \   000055   90....       MOV     DPTR,#__Constant_1
   \   000058   78..         MOV     R0,#?V4
   \   00005A   12....       LCALL   ?L_AND_X
   \   00005D   E5..         MOV     A,?V4
   \   00005F   45..         ORL     A,?V5
   \   000061   45..         ORL     A,?V6
   \   000063   45..         ORL     A,?V7
   \   000065   6002         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
    801                listCount++;
   \   000067   05..         INC     ?V3
    802            }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_2:
   \   000069   05..         INC     ?V2
   \   00006B   80CC         SJMP    ??ZDNwkMgr_BuildAndSendUpdateNotify_0
    803            
    804            if ( listCount > 0 )
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_1:
   \   00006D   E5..         MOV     A,?V3
   \   00006F   6078         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_3
    805            {
    806              energyValues = (uint8 *)osal_mem_alloc( listCount );
   \   000071                ; Setup parameters for call to function osal_mem_alloc
   \   000071   AA..         MOV     R2,?V3
   \   000073   7B00         MOV     R3,#0x0
   \   000075   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000078   8A..         MOV     ?V4,R2
   \   00007A   8B..         MOV     ?V5,R3
   \   00007C   85....       MOV     ?V8,?V4
   \   00007F   85....       MOV     ?V9,?V5
    807              if ( energyValues )
   \   000082   E5..         MOV     A,?V8
   \   000084   45..         ORL     A,?V9
   \   000086   6061         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_3
    808              {
    809                uint8 j = 0;
   \   000088   7A00         MOV     R2,#0x0
    810          
    811                for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   00008A   75..00       MOV     ?V2,#0x0
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_4:
   \   00008D   E5..         MOV     A,?V2
   \   00008F   C3           CLR     C
   \   000090   941B         SUBB    A,#0x1b
   \   000092   5055         JNC     ??ZDNwkMgr_BuildAndSendUpdateNotify_3
    812                {
    813                  if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
   \   000094   85..82       MOV     DPL,?V10
   \   000097   85..83       MOV     DPH,?V11
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   78..         MOV     R0,#?V4
   \   00009F   12....       LCALL   ?L_MOV_X
   \   0000A2   E5..         MOV     A,?V2
   \   0000A4   78..         MOV     R0,#?V4
   \   0000A6   12....       LCALL   ?UL_SHR
   \   0000A9   90....       MOV     DPTR,#__Constant_1
   \   0000AC   78..         MOV     R0,#?V4
   \   0000AE   12....       LCALL   ?L_AND_X
   \   0000B1   E5..         MOV     A,?V4
   \   0000B3   45..         ORL     A,?V5
   \   0000B5   45..         ORL     A,?V6
   \   0000B7   45..         ORL     A,?V7
   \   0000B9   602A         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_5
    814                    energyValues[j++] = pEDScanConfirm->energyDetectList[i];
   \   0000BB   A8..         MOV     R0,?V2
   \   0000BD   7900         MOV     R1,#0x0
   \   0000BF   E5..         MOV     A,?V10
   \   0000C1   28           ADD     A,R0
   \   0000C2   F582         MOV     DPL,A
   \   0000C4   E5..         MOV     A,?V11
   \   0000C6   39           ADDC    A,R1
   \   0000C7   F583         MOV     DPH,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   C0E0         PUSH    A
   \   0000D3   EA           MOV     A,R2
   \   0000D4   F8           MOV     R0,A
   \   0000D5   7900         MOV     R1,#0x0
   \   0000D7   E5..         MOV     A,?V8
   \   0000D9   28           ADD     A,R0
   \   0000DA   F582         MOV     DPL,A
   \   0000DC   E5..         MOV     A,?V9
   \   0000DE   39           ADDC    A,R1
   \   0000DF   F583         MOV     DPH,A
   \   0000E1   D0E0         POP     A
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   0A           INC     R2
    815                }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_5:
   \   0000E5   05..         INC     ?V2
   \   0000E7   80A4         SJMP    ??ZDNwkMgr_BuildAndSendUpdateNotify_4
    816              }
    817            }
    818              
    819            // Send a Management Network Update notify back
    820            ZDP_MgmtNwkUpdateNotify( TransSeq, dstAddr, pEDScanConfirm->status, 
    821                                     pEDScanConfirm->scannedChannels,
    822                                     totalTransmissions, txFailures,
    823                                     listCount, energyValues, txOptions, false );
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_3:
   \   0000E9                ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
   \   0000E9   75..00       MOV     ?V4,#0x0
   \   0000EC   78..         MOV     R0,#?V4
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F1   E5..         MOV     A,?V12
   \   0000F3   F5..         MOV     ?V4,A
   \   0000F5   78..         MOV     R0,#?V4
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FA   78..         MOV     R0,#?V8
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FF   8E..         MOV     ?V4,R6
   \   000101   8F..         MOV     ?V5,R7
   \   000103   78..         MOV     R0,#?V4
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   78..         MOV     R0,#?V0
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   85..82       MOV     DPL,?V10
   \   000110   85..83       MOV     DPH,?V11
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000119   AD..         MOV     R5,?V3
   \   00011B   85..82       MOV     DPL,?V10
   \   00011E   85..83       MOV     DPH,?V11
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   E0           MOVX    A,@DPTR
   \   000124   FC           MOV     R4,A
   \   000125   AA..         MOV     R2,?V14
   \   000127   AB..         MOV     R3,?V15
   \   000129   A9..         MOV     R1,?V13
   \   00012B   12....       LCALL   `??ZDP_MgmtNwkUpdateNotify::?relay`; Banked call to: ZDP_MgmtNwkUpdateNotify
   \   00012E   740C         MOV     A,#0xc
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   \   000133   E9           MOV     A,R1
    824            if ( energyValues )
   \   000134   E5..         MOV     A,?V8
   \   000136   45..         ORL     A,?V9
   \   000138   6007         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_6
    825              osal_mem_free( energyValues );
   \   00013A                ; Setup parameters for call to function osal_mem_free
   \   00013A   AA..         MOV     R2,?V8
   \   00013C   AB..         MOV     R3,?V9
   \   00013E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    826          }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_6:
   \   000141   7F10         MOV     R7,#0x10
   \   000143   02....       LJMP    ?BANKED_LEAVE_XDATA
    827          
    828          #if defined ( NWK_MANAGER )
    829          /*********************************************************************
    830           * @fn      NwkMgr_SetNwkManager
    831           *
    832           * @brief   Set the local device as the Network Manager
    833           *
    834           * @param   none
    835           *
    836           * @return  none
    837           */
    838          void NwkMgr_SetNwkManager( void )
    839          {
    840            if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
    841            {
    842              // We're the Network Manager. Set our address as the Network Manager Address
    843              ZDNwkMgr_SetNwkManagerAddr( _NIB.nwkDevAddress );
    844              
    845              // Set the Network Manager bit of the Server Mask
    846              ZDO_Config_Node_Descriptor.ServerMask |= NETWORK_MANAGER;
    847            }
    848          }
    849          #endif // NWK_MANAGER
    850          
    851          /*********************************************************************
    852           * @fn      ZDApp_SetNwkManagerAddr()
    853           *
    854           * @brief   Sets the nwkManagerAddr in NIB.
    855           *
    856           * @param   nwkManagerAddr
    857           *
    858           * @return  none
    859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr )
   \                     ZDNwkMgr_SetNwkManagerAddr:
    861          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    862            if ( _NIB.nwkManagerAddr != nwkManagerAddr )
   \   000009   90....       MOV     DPTR,#_NIB + 105
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDNwkMgr_SetNwkManagerAddr_0
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6F           XRL     A,R7
   \                     ??ZDNwkMgr_SetNwkManagerAddr_0:
   \   000013   600B         JZ      ??ZDNwkMgr_SetNwkManagerAddr_1
    863            {
    864              // Update the Network Manager Address
    865              _NIB.nwkManagerAddr = nwkManagerAddr;
   \   000015   90....       MOV     DPTR,#_NIB + 105
   \   000018   EE           MOV     A,R6
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   EF           MOV     A,R7
   \   00001C   F0           MOVX    @DPTR,A
    866            
    867              // Our Network Manger Address has been changed -- notify to save info into NV
    868              ZDApp_NwkStateUpdateCB();
   \   00001D                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   00001D   12....       LCALL   `??ZDApp_NwkStateUpdateCB::?relay`; Banked call to: ZDApp_NwkStateUpdateCB
    869            }
    870          }
   \                     ??ZDNwkMgr_SetNwkManagerAddr_1:
   \   000020   7F01         MOV     R7,#0x1
   \   000022   02....       LJMP    ?BANKED_LEAVE_XDATA
    871          
    872          /*********************************************************************
    873           * @fn          ZDNwkMgr_ReportChannelInterference
    874           *
    875           * @brief       This function builds a Channel Interference detection
    876           *              message and then forwards it to the Network Manager.
    877           *
    878           * @param       chanInterference
    879           *
    880           * @return      none
    881           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    882          void ZDNwkMgr_ReportChannelInterference(  NLME_ChanInterference_t *chanInterference  )
   \                     ZDNwkMgr_ReportChannelInterference:
    883          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
    884            ZDNwkMgr_ChanInterference_t *pChanInterference;
    885          
    886            // Send Channel Interference message to the Network Manager task
    887            pChanInterference = (ZDNwkMgr_ChanInterference_t *)osal_msg_allocate( sizeof( ZDNwkMgr_ChanInterference_t ) );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   7A06         MOV     R2,#0x6
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000010   8A..         MOV     ?V2,R2
   \   000012   8B..         MOV     ?V3,R3
   \   000014   AE..         MOV     R6,?V2
   \   000016   AF..         MOV     R7,?V3
    888            if ( pChanInterference )
   \   000018   EE           MOV     A,R6
   \   000019   4F           ORL     A,R7
   \   00001A   6044         JZ      ??ZDNwkMgr_ReportChannelInterference_0
    889            {
    890              pChanInterference->hdr.event = NM_CHANNEL_INTERFERE;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   7431         MOV     A,#0x31
   \   000022   F0           MOVX    @DPTR,A
    891                
    892              // Build the structure
    893              pChanInterference->totalTransmissions = chanInterference->totalTransmissions;
   \   000023   85..82       MOV     DPL,?V0
   \   000026   85..83       MOV     DPH,?V1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   E8           MOV     A,R0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E9           MOV     A,R1
   \   000038   F0           MOVX    @DPTR,A
    894              pChanInterference->txFailures = chanInterference->txFailures;
   \   000039   85..82       MOV     DPL,?V0
   \   00003C   85..83       MOV     DPH,?V1
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E8           MOV     A,R0
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E9           MOV     A,R1
   \   000052   F0           MOVX    @DPTR,A
    895                        
    896              osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pChanInterference );
   \   000053                ; Setup parameters for call to function osal_msg_send
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   EF           MOV     A,R7
   \   000056   FB           MOV     R3,A
   \   000057   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00005F   E9           MOV     A,R1
    897            }
    898          }
   \                     ??ZDNwkMgr_ReportChannelInterference_0:
   \   000060   7F04         MOV     R7,#0x4
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
    899          
    900          /*********************************************************************
    901           * @fn          ZDNwkMgr_EDScanConfirmCB
    902           *
    903           * @brief       Handle Energy Scan confirm callback
    904           *
    905           * @param       scannedChannels  - scanned channels
    906           * @param       energyDetectList - measured energy for channels
    907           *
    908           * @return      none
    909           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    910          void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm )
   \                     ZDNwkMgr_EDScanConfirmCB:
    911          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
    912            ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm;
    913          
    914            // Send ED Confirm to the Network Manager task
    915            pEDScanConfirm = (ZDNwkMgr_EDScanConfirm_t *)osal_msg_allocate( sizeof( ZDNwkMgr_EDScanConfirm_t ) );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   7A22         MOV     R2,#0x22
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000010   8A..         MOV     ?V2,R2
   \   000012   8B..         MOV     ?V3,R3
   \   000014   AE..         MOV     R6,?V2
   \   000016   AF..         MOV     R7,?V3
    916            if ( pEDScanConfirm )
   \   000018   EE           MOV     A,R6
   \   000019   4F           ORL     A,R7
   \   00001A   6067         JZ      ??ZDNwkMgr_EDScanConfirmCB_0
    917            {
    918              pEDScanConfirm->hdr.event = NM_ED_SCAN_CONFIRM;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   7432         MOV     A,#0x32
   \   000022   F0           MOVX    @DPTR,A
    919                
    920              // Build the structure
    921              pEDScanConfirm->status = EDScanConfirm->status;
   \   000023   85..82       MOV     DPL,?V0
   \   000026   85..83       MOV     DPH,?V1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C0E0         PUSH    A
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
    922              pEDScanConfirm->scannedChannels = EDScanConfirm->scannedChannels;
   \   000035   85..82       MOV     DPL,?V0
   \   000038   85..83       MOV     DPH,?V1
   \   00003B   A3           INC     DPTR
   \   00003C   12....       LCALL   ?XLOAD_R0123
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   12....       LCALL   ?XSTORE_R0123
    923              osal_memcpy( pEDScanConfirm->energyDetectList, EDScanConfirm->energyDetectList, ED_SCAN_MAXCHANNELS );
   \   000049                ; Setup parameters for call to function osal_memcpy
   \   000049   85..82       MOV     DPL,?V0
   \   00004C   85..83       MOV     DPH,?V1
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V4,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F5..         MOV     ?V5,A
   \   00005B   75..00       MOV     ?V6,#0x0
   \   00005E   78..         MOV     R0,#?V4
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000063   7C1B         MOV     R4,#0x1b
   \   000065   7D00         MOV     R5,#0x0
   \   000067   EE           MOV     A,R6
   \   000068   2407         ADD     A,#0x7
   \   00006A   FA           MOV     R2,A
   \   00006B   E4           CLR     A
   \   00006C   3F           ADDC    A,R7
   \   00006D   FB           MOV     R3,A
   \   00006E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
    924                
    925              osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pEDScanConfirm );
   \   000076                ; Setup parameters for call to function osal_msg_send
   \   000076   EE           MOV     A,R6
   \   000077   FA           MOV     R2,A
   \   000078   EF           MOV     A,R7
   \   000079   FB           MOV     R3,A
   \   00007A   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000082   E9           MOV     A,R1
    926            }
    927          }
   \                     ??ZDNwkMgr_EDScanConfirmCB_0:
   \   000083   7F07         MOV     R7,#0x7
   \   000085   02....       LJMP    ?BANKED_LEAVE_XDATA
    928          
    929          /*********************************************************************
    930           * @fn      ZDNwkMgr_ProcessDataConfirm
    931           *
    932           * @brief   Process received Confirmation for Mgmt NWK Update Notify message
    933           *
    934           * @param   none
    935           *
    936           * @return  none
    937           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    938          void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm )
   \                     ZDNwkMgr_ProcessDataConfirm:
    939          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    940            if (   ZDNwkMgr_WaitingForNotifyConfirm  && 
    941                 ( afDataConfirm->transID == 0 )     && 
    942                 ( afDataConfirm->hdr.status == ZSuccess ) )
   \   000009   90....       MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6027         JZ      ??ZDNwkMgr_ProcessDataConfirm_0
   \   00000F   8E82         MOV     DPL,R6
   \   000011   8F83         MOV     DPH,R7
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   701D         JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7015         JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
    943            {
    944              // The Mgmt NWK Update Notify was sent as an APS Unicast with  
    945              // acknowledgement and once the acknowledgment is received the 
    946              // total transmit and transmit failure counters are reset to zero.  
    947              _NIB.nwkTotalTransmissions = 0;
   \   000021   90....       MOV     DPTR,#_NIB + 107
   \   000024   7400         MOV     A,#0x0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   7400         MOV     A,#0x0
   \   00002A   F0           MOVX    @DPTR,A
    948              nwkTransmissionFailures( TRUE );
   \   00002B                ; Setup parameters for call to function nwkTransmissionFailures
   \   00002B   7901         MOV     R1,#0x1
   \   00002D   12....       LCALL   `??nwkTransmissionFailures::?relay`; Banked call to: nwkTransmissionFailures
    949              
    950              ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
   \   000030   90....       MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
    951            }
    952          }
   \                     ??ZDNwkMgr_ProcessDataConfirm_0:
   \   000036   7F01         MOV     R7,#0x1
   \   000038   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_ProcessMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessMgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_ProcessServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_ProcessChannelInterference::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessChannelInterference

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_ProcessEDScanConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessEDScanConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_CheckForChannelInterference::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_CheckForChannelInterference

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_BuildAndSendUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_BuildAndSendUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_SetNwkManagerAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_SetNwkManagerAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_ReportChannelInterference::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ReportChannelInterference

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_EDScanConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_EDScanConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDNwkMgr_ProcessDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessDataConfirm

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ": ">`:
   \   000000   3A2000       DB ": "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ea60:
   \   000000   60EA0000     DD 60000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7fff800:
   \   000000   00F8FF07     DD 134215680

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50
    953          
    954          /*********************************************************************
    955           * PAN ID Conflict Routines
    956           */
    957          #if defined ( NWK_MANAGER )
    958          /*********************************************************************
    959           * @fn          ZDNwkMgr_NetworkReportCB
    960           *
    961           * @brief       Handle the Network Report Command
    962           *
    963           * @param       srcAddr     - Source Address of the message.
    964           * @param       status      - ZSuccess.
    965           * @param       serverMask  - Bit mask of services matching the req serverMask.
    966           * @param       securityUse -
    967           *
    968           * @return      none
    969           */
    970          void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport )
    971          { 
    972            // Send Network Report message to the Network Manager task
    973            osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pReport );
    974          }
    975          
    976          /*********************************************************************
    977           * @fn          ZDNwkMgr_NetworkUpdateCB
    978           *
    979           * @brief       Handle the Network Update Command
    980           *
    981           * @param       srcAddr     - Source Address of the message.
    982           * @param       status      - ZSuccess.
    983           * @param       serverMask  - Bit mask of services matching the req serverMask.
    984           * @param       securityUse -
    985           *
    986           * @return      none
    987           */
    988          void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate )
    989          {
    990            // Send Network Update message to the Network Manager task
    991            osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pUpdate );
    992          }
    993          
    994          /*********************************************************************
    995           * @fn      ZDNwkMgr_ProcessNetworkReport
    996           *
    997           * @brief   Process the incoming Network Report message
    998           *
    999           * @param   pNetworkReport - Structure containing Network Report message
   1000           *
   1001           * @return  none
   1002           */
   1003          void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport )
   1004          {
   1005            uint8 i;
   1006            uint16 newPID;
   1007            uint8 unique = TRUE;
   1008          
   1009            if ( pNetworkReport->reportType == NWKREPORT_PANID_CONFLICT )
   1010            {
   1011              if ( ZDNwkMgr_PanIdUpdateInProgress == FALSE )
   1012              {
   1013                do
   1014                {
   1015                  // select a new PAN ID
   1016                  newPID = (uint16)osal_rand();
   1017                
   1018                  // Make sure that the chosen PAN ID is not already in use in the
   1019                  // local neighborhood and also not contained within the Report 
   1020                  // Information field of the Network Report Command frame
   1021                  for ( i = 0; i < pNetworkReport->reportInfoCnt; i++ )
   1022                  {
   1023                    if ( pNetworkReport->panIDs[i] == newPID )
   1024                    {
   1025                      unique = FALSE;
   1026                      break;
   1027                    }
   1028                  }
   1029                } while ( !unique );
   1030                   
   1031                // Send out a Network Update command.
   1032                NLME_SendNetworkUpdate( NWK_BROADCAST_SHORTADDR, NWKUPDATE_PANID_UPDATE,
   1033                                        _NIB.extendedPANID, _NIB.nwkUpdateId+1, newPID );
   1034              
   1035                ZDNwkMgr_PanIdUpdateInProgress = TRUE;
   1036              }
   1037            }
   1038          }
   1039          
   1040          /*********************************************************************
   1041           * @fn      ZDNwkMgr_ProcessNetworkUpdate
   1042           *
   1043           * @brief   Process the incoming Network Update message
   1044           *
   1045           * @param   pNetworkReport - Structure containing Network Update message
   1046           *
   1047           * @return  none
   1048           */
   1049          void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate )
   1050          {
   1051            if ( pNetworkUpdate->updateType == NWKUPDATE_PANID_UPDATE )
   1052            { 
   1053              // Our PAN ID has been changed -- notify to save info into NV
   1054              ZDApp_NwkStateUpdateCB();
   1055              
   1056              ZDNwkMgr_PanIdUpdateInProgress = FALSE;
   1057            }
   1058          }
   1059          #endif // NWK_MANAGER
   1060          
   1061          
   1062          /*********************************************************************
   1063          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     57   ZDNwkMgr_BuildAndSendUpdateNotify
        0     36   -> ZDP_MgmtNwkUpdateNotify
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
      0     35   ZDNwkMgr_CheckForChannelInterference
        0     16   -> HalLcdWriteString
        0     20   -> HalLcdWriteStringValueValue
        0     21   -> ZDNwkMgr_BuildAndSendUpdateNotify
        0     20   -> osal_start_timerEx
      1     18   ZDNwkMgr_EDScanConfirmCB
        0     18   -> osal_memcpy
        0     15   -> osal_msg_allocate
        0     15   -> osal_msg_send
      0      9   ZDNwkMgr_Init
        0      9   -> ZDO_RegisterForZDOMsg
      0     23   ZDNwkMgr_ProcessChannelInterference
        0      9   -> NLME_EDScanRequest
      0      9   ZDNwkMgr_ProcessDataConfirm
        0      9   -> nwkTransmissionFailures
      0     33   ZDNwkMgr_ProcessEDScanConfirm
        0     19   -> ZDNwkMgr_BuildAndSendUpdateNotify
        0     14   -> ZDNwkMgr_CheckForChannelInterference
        0     14   -> nwkTransmissionFailures
        0     18   -> osal_start_timerEx
      0     44   ZDNwkMgr_ProcessMgmtNwkUpdateReq
        0     22   -> NLME_EDScanRequest
        0     22   -> NLME_SetUpdateID
        0     22   -> ZDApp_NwkStateUpdateCB
        0     22   -> ZDNwkMgr_SetNwkManagerAddr
        0     22   -> ZDO_ParseMgmtNwkUpdateReq
        0     34   -> ZDP_MgmtNwkUpdateNotify
        0     26   -> osal_start_timerEx
      0     24   ZDNwkMgr_ProcessMsgCBs
        0     10   -> ZDNwkMgr_ProcessMgmtNwkUpdateReq
        0     10   -> ZDNwkMgr_ProcessServerDiscRsp
      0     22   ZDNwkMgr_ProcessServerDiscRsp
        0     12   -> ZDNwkMgr_SetNwkManagerAddr
        0     12   -> ZDO_ParseServerDiscRsp
      0     12   ZDNwkMgr_ReportChannelInterference
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      0     31   ZDNwkMgr_SetNwkManagerAddr
        0      9   -> ZDApp_NwkStateUpdateCB
      0     18   ZDNwkMgr_event_loop
        0     14   -> NLME_EDScanRequest
        0     14   -> ZDApp_NwkStateUpdateCB
        0     14   -> ZDNwkMgr_ProcessChannelInterference
        0     14   -> ZDNwkMgr_ProcessEDScanConfirm
        0     14   -> ZDNwkMgr_ProcessMsgCBs
        0     14   -> ZMacSetReq
        0     14   -> nwkTransmissionFailures
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     18   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ?<Constant ": ">
      15  NwkMgrStr_1
      17  NwkMgrStr_2
      17  NwkMgrStr_3
      17  NwkMgrStr_4
     326  ZDNwkMgr_BuildAndSendUpdateNotify
       6  ZDNwkMgr_BuildAndSendUpdateNotify::?relay
     339  ZDNwkMgr_CheckForChannelInterference
       6  ZDNwkMgr_CheckForChannelInterference::?relay
     136  ZDNwkMgr_EDScanConfirmCB
       6  ZDNwkMgr_EDScanConfirmCB::?relay
      89  ZDNwkMgr_Init
       6  ZDNwkMgr_Init::?relay
       9  ZDNwkMgr_MgmtNwkUpdateNotifyAddr
       1  ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
       9  ZDNwkMgr_MgmtNwkUpdateReq
       1  ZDNwkMgr_NewChannel
       1  ZDNwkMgr_NumUpdateNotifySent
      86  ZDNwkMgr_ProcessChannelInterference
       6  ZDNwkMgr_ProcessChannelInterference::?relay
      59  ZDNwkMgr_ProcessDataConfirm
       6  ZDNwkMgr_ProcessDataConfirm::?relay
     125  ZDNwkMgr_ProcessEDScanConfirm
       6  ZDNwkMgr_ProcessEDScanConfirm::?relay
     563  ZDNwkMgr_ProcessMgmtNwkUpdateReq
       6  ZDNwkMgr_ProcessMgmtNwkUpdateReq::?relay
      65  ZDNwkMgr_ProcessMsgCBs
       6  ZDNwkMgr_ProcessMsgCBs::?relay
      73  ZDNwkMgr_ProcessServerDiscRsp
       6  ZDNwkMgr_ProcessServerDiscRsp::?relay
     101  ZDNwkMgr_ReportChannelInterference
       6  ZDNwkMgr_ReportChannelInterference::?relay
      37  ZDNwkMgr_SetNwkManagerAddr
       6  ZDNwkMgr_SetNwkManagerAddr::?relay
       1  ZDNwkMgr_TaskID
       2  ZDNwkMgr_TotalTransmissions
       2  ZDNwkMgr_TxFailures
       2  ZDNwkMgr_UpdateNotifyTimer
       1  ZDNwkMgr_WaitingForNotifyConfirm
     310  ZDNwkMgr_event_loop
       6  ZDNwkMgr_event_loop::?relay
       4  __Constant_0
       4  __Constant_1
       4  __Constant_32
       4  __Constant_7fff800
       4  __Constant_ea60
       2  pZDNwkMgr_EDScanConfirmCB
       2  pZDNwkMgr_NetworkReportCB
       2  pZDNwkMgr_NetworkUpdateCB
       2  pZDNwkMgr_ProcessDataConfirm
       2  pZDNwkMgr_ReportChannelInterference

 
 2 309 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
    89 bytes in segment XDATA_ROM_C
    39 bytes in segment XDATA_Z
 
 2 387 bytes of CODE  memory
    69 bytes of CONST memory (+ 20 bytes shared)
    39 bytes of XDATA memory

Errors: none
Warnings: none
