###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  17:49:25
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\sys\ZGlobals.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\sys\ZGlobals.c" -D ZTOOL_P1 -D MT_TASK -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_RESTORE -D
#        NV_INIT -D NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D OPEN_FCS -lC
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\ZGlobals.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\ZGlobals.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\sys\ZGlobals.c
      1          /**************************************************************************************************
      2            Filename:       ZGlobals.c
      3            Revised:        $Date: 2014-03-13 10:55:58 -0700 (Thu, 13 Mar 2014) $
      4            Revision:       $Revision: 37665 $
      5          
      6            Description:    User definable Z-Stack parameters.
      7          
      8          
      9            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL_Nv.h"
     46          #include "ZDObject.h"
     47          #include "ZGlobals.h"
     48          #include "ZDNwkMgr.h"
     49          #include "OnBoard.h"
     50          #include "ZDSecMgr.h"
     51          
     52          #include "ProtocolHandler.h"
     53          
     54          
     55          /*********************************************************************
     56           * MACROS
     57           */
     58          
     59          /*********************************************************************
     60           * CONSTANTS
     61           */
     62          
     63          /*********************************************************************
     64           * TYPEDEFS
     65           */
     66          
     67          typedef struct zgItem
     68          {
     69            uint16 id;
     70            uint16 len;
     71            void *buf;
     72          } zgItem_t;
     73          
     74          /*********************************************************************
     75           * NWK GLOBAL VARIABLES
     76           */
     77          
     78          // Polling values

   \                                 In  segment XDATA_I, align 1, keep-with-next
     79          uint16 zgPollRate = POLL_RATE;
   \                     zgPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     80          uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
   \                     zgQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgQueuedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     81          uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
   \                     zgResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgResponsePollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
   \                     zgRejoinPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgRejoinPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
     83          
     84          // Transmission retries numbers

   \                                 In  segment XDATA_I, align 1, keep-with-next
     85          uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
   \                     zgMaxDataRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxDataRetries>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     86          uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
   \                     zgMaxPollFailureRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
     87          
     88          // Default channel list

   \                                 In  segment XDATA_I, align 1, keep-with-next
     89          uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
   \                     zgDefaultChannelList:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultChannelList>`
   \   000004                REQUIRE __INIT_XDATA_I
     90          
     91          // Default channle mask
     92          #ifdef WIFI_FREQUENCY_SELECT
     93          	uint32 __xdata zgDefaultChannelMask = MAX_CHANNELS_24GHZ;
     94          #endif
     95          
     96          // Default starting scan duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     97          uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
   \                     zgDefaultStartingScanDuration:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
   \   000001                REQUIRE __INIT_XDATA_I
     98          
     99          // Stack profile Id

   \                                 In  segment XDATA_I, align 1, keep-with-next
    100          uint8 zgStackProfile = STACK_PROFILE_ID;
   \                     zgStackProfile:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStackProfile>`
   \   000001                REQUIRE __INIT_XDATA_I
    101          
    102          // Default indirect message holding timeout

   \                                 In  segment XDATA_I, align 1, keep-with-next
    103          uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
   \                     zgIndirectMsgTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I
    104          
    105          // Security mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    106          uint8 zgSecurityMode = ZG_SECURITY_MODE;
   \                     zgSecurityMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurityMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    107          
    108          // Secure permit join

   \                                 In  segment XDATA_I, align 1, keep-with-next
    109          uint8 zgSecurePermitJoin = TRUE;
   \                     zgSecurePermitJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurePermitJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    110          
    111          // Trust center address

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          uint8 zgApsTrustCenterAddr[Z_EXTADDR_LEN] = { 0 };
   \                     zgApsTrustCenterAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    113          
    114          // Route Discovery Time - amount of time that a route request lasts

   \                                 In  segment XDATA_I, align 1, keep-with-next
    115          uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
   \                     zgRouteDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    116          
    117          // Route expiry

   \                                 In  segment XDATA_I, align 1, keep-with-next
    118          uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
   \                     zgRouteExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    119          
    120          // Extended PAN Id

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          uint8 zgExtendedPANID[Z_EXTADDR_LEN];
   \                     zgExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    122          
    123          // Broadcast parameters

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124          uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
   \                     zgMaxBcastRetires:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxBcastRetires>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    125          uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
   \                     zgPassiveAckTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgPassiveAckTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
   \                     zgBcastDeliveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgBcastDeliveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    127          
    128          // Network mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    129          uint8 zgNwkMode = NWK_MODE;
   \                     zgNwkMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    130          
    131          // Many-to-one values

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
   \                     zgConcentratorEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
   \                     zgConcentratorDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    134          uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
   \                     zgConcentratorRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgConcentratorRadius>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
   \                     zgConcentratorRC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    136          uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
   \                     zgNwkSrcRtgExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    137          
    138          // Cleanup Child Table according to routing traffic

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          uint8 zgRouterOffAssocCleanup = FALSE;
   \                     zgRouterOffAssocCleanup:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          
    141          // Determines whether or not a remote NWK leave request command frame received
    142          // by the local device is accepted .

   \                                 In  segment XDATA_I, align 1, keep-with-next
    143          uint8 zgNwkLeaveRequestAllowed = TRUE;
   \                     zgNwkLeaveRequestAllowed:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkLeaveRequestAllowed>`
   \   000001                REQUIRE __INIT_XDATA_I
    144          
    145          // Determines if the Child Aging Table Management process is active or not.
    146          // This feature is optional and it is disabled by default.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 zgChildAgingEnable = FALSE;
   \                     zgChildAgingEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148          
    149          /*********************************************************************
    150           * APS GLOBAL VARIABLES
    151           */
    152          
    153          // The maximum number of retries allowed after a transmission failure

   \                                 In  segment XDATA_I, align 1, keep-with-next
    154          uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
   \                     zgApscMaxFrameRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
    155          
    156          // The maximum number of seconds (milliseconds) to wait for an
    157          // acknowledgement to a transmitted frame.
    158          
    159          // This number is used by polled devices.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    160          uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
   \                     zgApscAckWaitDurationPolled:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
   \   000002                REQUIRE __INIT_XDATA_I
    161          
    162          // This number is used by non-polled devices in the following formula:
    163          //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

   \                                 In  segment XDATA_I, align 1, keep-with-next
    164          uint8 zgApsAckWaitMultiplier = 2;
   \                     zgApsAckWaitMultiplier:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
   \   000001                REQUIRE __INIT_XDATA_I
    165          
    166          // The maximum number of milliseconds for the end device binding

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
   \                     zgApsDefaultMaxBindingTime:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
   \   000002                REQUIRE __INIT_XDATA_I
    168          
    169          // The 64-big identifier of the network to join or form.
    170          // Default set to all zeros

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
   \                     zgApsUseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    172          
    173          // A boolean flag that indicates whether it is OK to use insecure join
    174          // on startup. Default set to TRUE

   \                                 In  segment XDATA_I, align 1, keep-with-next
    175          uint8 zgApsUseInsecureJoin = TRUE;
   \                     zgApsUseInsecureJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    176          
    177          // The radius of broadcast multicast transmissions

   \                                 In  segment XDATA_I, align 1, keep-with-next
    178          uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
   \                     zgApsNonMemberRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsNonMemberRadius>`
   \   000001                REQUIRE __INIT_XDATA_I
    179          
    180          // Commissioned Network Address

   \                                 In  segment XDATA_I, align 1, keep-with-next
    181          uint16 zgNwkCommissionedNwkAddr = INVALID_NODE_ADDR;
   \                     zgNwkCommissionedNwkAddr:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgNwkCommissionedNwkAddr>`
   \   000002                REQUIRE __INIT_XDATA_I
    182          
    183          // APS Duplication Rejection table variables

   \                                 In  segment XDATA_I, align 1, keep-with-next
    184          uint16 zgApscDupRejTimeoutInc = DEFAULT_APS_DUP_REJ_TIMEOUT_INCREMENT;
   \                     zgApscDupRejTimeoutInc:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscDupRejTimeoutInc>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    185          uint8  zgApscDupRejTimeoutCount = DEFAULT_APS_DUP_REJ_TIMEOUT;
   \                     zgApscDupRejTimeoutCount:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscDupRejTimeoutCount>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    186          uint16 zgApsMinDupRejTableSize = APS_DUP_REJ_ENTRIES;
   \                     zgApsMinDupRejTableSize:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsMinDupRejTableSize>`
   \   000002                REQUIRE __INIT_XDATA_I
    187          
    188          
    189          
    190          /*********************************************************************
    191           * SECURITY GLOBAL VARIABLES
    192           */
    193          
    194          // If TRUE, preConfigKey should be configured on all devices on the network
    195          // If false, it is configured only on the coordinator and sent to other
    196          // devices upon joining.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          uint8 zgPreConfigKeys = FALSE;
   \                     zgPreConfigKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    198          
    199          // The type of link key in use.  This will determine the security
    200          // policies associated with sending and receiving APS messages.
    201          // If ZG_GLOBAL_LINK_KEY APS TCLK security may be used for specific APS commands
    202          // If ZG_UNIQUE_LINK_KEY APS TCLK security is required for specific APS commands

   \                                 In  segment XDATA_I, align 1, keep-with-next
    203          uint8 zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY;
   \                     zgApsLinkKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsLinkKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    204          
    205          // With changes introduced in R20 of the ZigBee specification,
    206          // boolean value of zgUseDefaultTCLK is set depending on zgApsLinkKeyType value.
    207          //
    208          // For zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY, zgUseDefaultTCLK = TRUE
    209          // For zgApsLinkKeyType = ZG_UNIQUE_LINK_KEY, different devices have
    210          // different value:
    211          //      ZC should have             zgUseDefaultTCLK = FALSE
    212          //      Other devices should have  zgUseDefaultTCLK = TRUE
    213          // This is initialized in zgInitItems()
    214          // If ZG_UNIQUE_LINK_KEY, individual trust center link key between each device
    215          // and the trust center should be manually configured via MT_SYS_OSAL_NV_WRITE

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    216          uint8 zgUseDefaultTCLK;
   \                     zgUseDefaultTCLK:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    217          
    218          #if defined ( APP_TP2_TEST_MODE )
    219          uint8 guTxApsSecON = FALSE;
    220          uint8 guEnforceRxApsSec = TP_GU_ALL;
    221          #endif
    222          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    223          uint8 zgApsAllowR19Sec = FALSE;
   \                     zgApsAllowR19Sec:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    224          
    225          /*********************************************************************
    226           * ZDO GLOBAL VARIABLES
    227           */
    228          
    229          // Configured PAN ID

   \                                 In  segment XDATA_I, align 1, keep-with-next
    230          uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
   \                     zgConfigPANID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgConfigPANID>`
   \   000002                REQUIRE __INIT_XDATA_I
    231          // Add the table for PANID conflict to discovery the network   //chaokw panid
    232          #if 0
    233          const uint16 zgConfigPANID_Table[] = {ZDAPP_CONFIG_PAN_ID, ZDAPP_CONFIG_PAN_ID + 1, ZDAPP_CONFIG_PAN_ID + 2,
    234                                                ZDAPP_CONFIG_PAN_ID + 3, ZDAPP_CONFIG_PAN_ID + 4, ZDAPP_CONFIG_PAN_ID + 5};//,
    235          										//ZDAPP_CONFIG_PAN_ID + 6, ZDAPP_CONFIG_PAN_ID + 7, ZDAPP_CONFIG_PAN_ID + 8,
    236          										//ZDAPP_CONFIG_PAN_ID + 9, ZDAPP_CONFIG_PAN_ID + 10, ZDAPP_CONFIG_PAN_ID + 11,
    237          										//ZDAPP_CONFIG_PAN_ID + 12, ZDAPP_CONFIG_PAN_ID + 13, ZDAPP_CONFIG_PAN_ID + 14};
    238          #else										

   \                                 In  segment XDATA_ROM_C, align 1
    239          const uint16 zgConfigPANID_Table[8] = {ZDAPP_CONFIG_PAN_ID, ZDAPP_CONFIG_PAN_ID + 1, ZDAPP_CONFIG_PAN_ID + 2,
   \                     zgConfigPANID_Table:
   \   000000   8500         DW 133
   \   000002   8600         DW 134
   \   000004   8700         DW 135
   \   000006   8800         DW 136
   \   000008   8900         DW 137
   \   00000A   8A00         DW 138
   \   00000C   8B00         DW 139
   \   00000E   8C00         DW 140
    240          								ZDAPP_CONFIG_PAN_ID + 3, ZDAPP_CONFIG_PAN_ID + 4, ZDAPP_CONFIG_PAN_ID + 5, ZDAPP_CONFIG_PAN_ID + 6,
    241          								ZDAPP_CONFIG_PAN_ID + 7};		
    242          #endif

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    243          uint8 zgScanNwkCount;
   \                     zgScanNwkCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    244          
    245          // Device Logical Type

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    246          uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
   \                     zgDeviceLogicalType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    247          
    248          // Startup Delay

   \                                 In  segment XDATA_I, align 1, keep-with-next
    249          uint8 zgStartDelay = START_DELAY;
   \                     zgStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    250          
    251          #if !defined MT_TASK
    252          // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().
    253          uint8 zgZdoDirectCB = FALSE;
    254          #endif
    255          
    256          // Min number of attempted transmissions for Channel Interference detection

   \                                 In  segment XDATA_I, align 1, keep-with-next
    257          uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
   \                     zgNwkMgrMinTransmissions:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
   \   000001                REQUIRE __INIT_XDATA_I
    258          
    259          /*********************************************************************
    260           * APPLICATION GLOBAL VARIABLES
    261           */
    262          
    263          // Network Manager Mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    264          uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
   \                     zgNwkMgrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    265          
    266          /*********************************************************************
    267           * NON-STANDARD GLOBAL VARIABLES
    268           */
    269          
    270          // Simple API Endpoint

   \                                 In  segment XDATA_I, align 1, keep-with-next
    271          uint8 zgSapiEndpoint = SAPI_ENDPOINT;
   \                     zgSapiEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSapiEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
    272          
    273          /*********************************************************************
    274           * LOCAL VARIABLES
    275           */
    276          
    277          /*********************************************************************
    278           * ZGlobal Item Table
    279           */

   \                                 In  segment CODE_C, align 1
    280          static CONST zgItem_t zgItemTable[] =
   \                     zgItemTable:
   \   000000   8700         DW 135
   \   000002   0100         DW 1
   \   000004   ....         DW zgDeviceLogicalType
   \   000006   2400         DW 36
   \   000008   0200         DW 2
   \   00000A   ....         DW zgPollRate
   \   00000C   2500         DW 37
   \   00000E   0200         DW 2
   \   000010   ....         DW zgQueuedPollRate
   \   000012   2600         DW 38
   \   000014   0200         DW 2
   \   000016   ....         DW zgResponsePollRate
   \   000018   2700         DW 39
   \   00001A   0200         DW 2
   \   00001C   ....         DW zgRejoinPollRate
   \   00001E   2800         DW 40
   \   000020   0100         DW 1
   \   000022   ....         DW zgMaxDataRetries
   \   000024   2900         DW 41
   \   000026   0100         DW 1
   \   000028   ....         DW zgMaxPollFailureRetries
   \   00002A   8600         DW 134
   \   00002C   0100         DW 1
   \   00002E   ....         DW zgDefaultStartingScanDuration
   \   000030   2A00         DW 42
   \   000032   0100         DW 1
   \   000034   ....         DW zgStackProfile
   \   000036   2B00         DW 43
   \   000038   0100         DW 1
   \   00003A   ....         DW zgIndirectMsgTimeout
   \   00003C   2C00         DW 44
   \   00003E   0100         DW 1
   \   000040   ....         DW zgRouteExpiryTime
   \   000042   2D00         DW 45
   \   000044   0800         DW 8
   \   000046   ....         DW zgExtendedPANID
   \   000048   2E00         DW 46
   \   00004A   0100         DW 1
   \   00004C   ....         DW zgMaxBcastRetires
   \   00004E   2F00         DW 47
   \   000050   0100         DW 1
   \   000052   ....         DW zgPassiveAckTimeout
   \   000054   3000         DW 48
   \   000056   0100         DW 1
   \   000058   ....         DW zgBcastDeliveryTime
   \   00005A   3100         DW 49
   \   00005C   0100         DW 1
   \   00005E   ....         DW zgNwkMode
   \   000060   3200         DW 50
   \   000062   0100         DW 1
   \   000064   ....         DW zgConcentratorEnable
   \   000066   3300         DW 51
   \   000068   0100         DW 1
   \   00006A   ....         DW zgConcentratorDiscoveryTime
   \   00006C   3400         DW 52
   \   00006E   0100         DW 1
   \   000070   ....         DW zgConcentratorRadius
   \   000072   3600         DW 54
   \   000074   0100         DW 1
   \   000076   ....         DW zgConcentratorRC
   \   000078   3800         DW 56
   \   00007A   0100         DW 1
   \   00007C   ....         DW zgNwkSrcRtgExpiryTime
   \   00007E   3900         DW 57
   \   000080   0100         DW 1
   \   000082   ....         DW zgRouteDiscoveryTime
   \   000084   6300         DW 99
   \   000086   0100         DW 1
   \   000088   ....         DW zgPreConfigKeys
   \   00008A   6400         DW 100
   \   00008C   0100         DW 1
   \   00008E   ....         DW zgSecurityMode
   \   000090   6500         DW 101
   \   000092   0100         DW 1
   \   000094   ....         DW zgSecurePermitJoin
   \   000096   6D00         DW 109
   \   000098   0100         DW 1
   \   00009A   ....         DW zgUseDefaultTCLK
   \   00009C   7100         DW 113
   \   00009E   0800         DW 8
   \   0000A0   ....         DW zgApsTrustCenterAddr
   \   0000A2   6600         DW 102
   \   0000A4   0100         DW 1
   \   0000A6   ....         DW zgApsLinkKeyType
   \   0000A8   4300         DW 67
   \   0000AA   0100         DW 1
   \   0000AC   ....         DW zgApscMaxFrameRetries
   \   0000AE   4400         DW 68
   \   0000B0   0200         DW 2
   \   0000B2   ....         DW zgApscAckWaitDurationPolled
   \   0000B4   4500         DW 69
   \   0000B6   0100         DW 1
   \   0000B8   ....         DW zgApsAckWaitMultiplier
   \   0000BA   4600         DW 70
   \   0000BC   0200         DW 2
   \   0000BE   ....         DW zgApsDefaultMaxBindingTime
   \   0000C0   4700         DW 71
   \   0000C2   0800         DW 8
   \   0000C4   ....         DW zgApsUseExtendedPANID
   \   0000C6   4800         DW 72
   \   0000C8   0100         DW 1
   \   0000CA   ....         DW zgApsUseInsecureJoin
   \   0000CC   4B00         DW 75
   \   0000CE   0100         DW 1
   \   0000D0   ....         DW zgApsNonMemberRadius
   \   0000D2   0400         DW 4
   \   0000D4   0100         DW 1
   \   0000D6   ....         DW zgStartDelay
   \   0000D8   A100         DW 161
   \   0000DA   0100         DW 1
   \   0000DC   ....         DW zgSapiEndpoint
   \   0000DE   3700         DW 55
   \   0000E0   0100         DW 1
   \   0000E2   ....         DW zgNwkMgrMode
   \   0000E4   8800         DW 136
   \   0000E6   0100         DW 1
   \   0000E8   ....         DW zgNwkMgrMinTransmissions
   \   0000EA   3C00         DW 60
   \   0000EC   0100         DW 1
   \   0000EE   ....         DW zgRouterOffAssocCleanup
   \   0000F0   3D00         DW 61
   \   0000F2   0100         DW 1
   \   0000F4   ....         DW zgNwkLeaveRequestAllowed
   \   0000F6   4900         DW 73
   \   0000F8   0200         DW 2
   \   0000FA   ....         DW zgNwkCommissionedNwkAddr
   \   0000FC   6700         DW 103
   \   0000FE   0100         DW 1
   \   000100   ....         DW zgApsAllowR19Sec
   \   000102   4D00         DW 77
   \   000104   0200         DW 2
   \   000106   ....         DW zgApscDupRejTimeoutInc
   \   000108   4E00         DW 78
   \   00010A   0100         DW 1
   \   00010C   ....         DW zgApscDupRejTimeoutCount
   \   00010E   4F00         DW 79
   \   000110   0200         DW 2
   \   000112   ....         DW zgApsMinDupRejTableSize
   \   000114   3E00         DW 62
   \   000116   0100         DW 1
   \   000118   ....         DW zgChildAgingEnable
   \   00011A   0404         DW 1028
   \   00011C   0600         DW 6
   \   00011E   ....         DW Prot_Group_T
   \   000120   0000         DW 0
   \   000122   0000         DW 0
   \   000124   0000         DW 0H
    281          {
    282          #if defined ( NV_INIT )
    283          #if !defined MT_TASK
    284            {
    285              ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
    286            },
    287          #endif
    288            {
    289              ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
    290            },
    291            {
    292              ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
    293            },
    294            {
    295              ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
    296            },
    297            {
    298              ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
    299            },
    300            {
    301              ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
    302            },
    303            {
    304              ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
    305            },
    306            {
    307              ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
    308            },
    309            // comment it for not read the channellist from NV, or will use the NV channellist info but not the channel in the config file
    310            //{
    311            //  ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
    312            //},    //chaokw panid
    313            {
    314              ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
    315            },
    316            {
    317              ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
    318            },
    319            {
    320              ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
    321            },
    322            {
    323              ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
    324            },
    325            {
    326              ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
    327            },
    328            {
    329              ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
    330            },
    331            {
    332              ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
    333            },
    334            {
    335              ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
    336            },
    337            {
    338              ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
    339            },
    340            {
    341              ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
    342            },
    343            {
    344              ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
    345            },
    346            {
    347              ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
    348            },
    349            {
    350              ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
    351            },
    352            {
    353              ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
    354            },
    355            {
    356              ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
    357            },
    358          #ifndef NONWK
    359          // disable the PANID config
    360          //  {
    361          //    ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
    362          //  },  //chaokw panid
    363            {
    364              ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
    365            },
    366            {
    367              ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
    368            },
    369            {
    370              ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
    371            },
    372            {
    373              ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
    374            },
    375            {
    376              ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN, zgApsTrustCenterAddr
    377            },
    378            {
    379              ZCD_NV_APS_LINK_KEY_TYPE, sizeof(zgApsLinkKeyType), &zgApsLinkKeyType
    380            },
    381          #endif // NONWK
    382            {
    383              ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
    384            },
    385            {
    386              ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
    387            },
    388            {
    389              ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
    390            },
    391            {
    392              ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
    393            },
    394            {
    395              ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
    396            },
    397            {
    398              ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
    399            },
    400            {
    401              ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
    402            },
    403            {
    404              ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
    405            },
    406            {
    407              ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
    408            },
    409            {
    410              ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
    411            },
    412            {
    413              ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
    414            },
    415            {
    416              ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP, sizeof(zgRouterOffAssocCleanup), &zgRouterOffAssocCleanup
    417            },
    418            {
    419              ZCD_NV_NWK_LEAVE_REQ_ALLOWED, sizeof(zgNwkLeaveRequestAllowed), &zgNwkLeaveRequestAllowed
    420            },
    421            {
    422              ZCD_NV_COMMISSIONED_NWK_ADDR, sizeof(zgNwkCommissionedNwkAddr), &zgNwkCommissionedNwkAddr
    423            },
    424            {
    425              ZCD_NV_APS_ALLOW_R19_SECURITY, sizeof(zgApsAllowR19Sec), &zgApsAllowR19Sec
    426            },
    427            {
    428              ZCD_NV_APS_DUPREJ_TIMEOUT_INC, sizeof(zgApscDupRejTimeoutInc), &zgApscDupRejTimeoutInc
    429            },
    430            {
    431              ZCD_NV_APS_DUPREJ_TIMEOUT_COUNT, sizeof(zgApscDupRejTimeoutCount), &zgApscDupRejTimeoutCount
    432            },
    433            {
    434              ZCD_NV_APS_DUPREJ_TABLE_SIZE, sizeof(zgApsMinDupRejTableSize), &zgApsMinDupRejTableSize
    435            },
    436          #if defined ( ZIGBEE_CHILD_AGING )
    437            {
    438              ZCD_NV_NWK_CHILD_AGE_ENABLE, sizeof(zgChildAgingEnable), &zgChildAgingEnable
    439            },
    440          #endif // ZIGBEE_CHILD_AGING
    441          #ifdef WIFI_FREQUENCY_SELECT
    442          	{
    443          		ZCD_NV_CHANNEL_MASK, sizeof( zgDefaultChannelMask ), &zgDefaultChannelMask
    444          	},
    445          #endif
    446          #endif // NV_INIT
    447          
    448            {
    449              ZCD_NV_MULTIWAY, sizeof(PROT_GROUP_STRUCT), &Prot_Group_T
    450            },  
    451            
    452            // Last item -- DO NOT MOVE IT!
    453            {
    454              0x00, 0, NULL
    455            }
    456          };
    457          
    458          /*********************************************************************
    459           * LOCAL FUNCTIONS
    460           */
    461          
    462          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
    463          
    464          #ifndef NONWK
    465          static uint8 zgPreconfigKeyInit( uint8 setDefault );
    466          #endif
    467          
    468          /*********************************************************************
    469           * @fn       zgItemInit()
    470           *
    471           * @brief
    472           *
    473           *   Initialize a global item. If the item doesn't exist in NV memory,
    474           *   write the system default (value passed in) into NV memory. But if
    475           *   it exists, set the item to the value stored in NV memory.
    476           *
    477           *   Also, if setDefault is TRUE and the item exists, we will write
    478           *   the default value to NV space.
    479           *
    480           * @param   id - item id
    481           * @param   len - item len
    482           * @param   buf - pointer to the item
    483           * @param   setDefault - TRUE to set default, not read
    484           *
    485           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    486           *          exist in NV, NV_OPER_FAILED if failure.
    487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    488          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
   \                     zgItemInit:
    489          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V1,R1
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V2,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V3,A
    490            uint8 status;
    491          
    492            // If the item doesn't exist in NV memory, create and initialize
    493            // it with the value passed in.
    494            status = osal_nv_item_init( id, len, buf );
   \   00001B                ; Setup parameters for call to function osal_nv_item_init
   \   00001B   78..         MOV     R0,#?V2
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   AC..         MOV     R4,?V4
   \   000022   AD..         MOV     R5,?V5
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   E9           MOV     A,R1
   \   000031   F5..         MOV     ?V0,A
    495            if ( status == ZSUCCESS )
   \   000033   E5..         MOV     A,?V0
   \   000035   7040         JNZ     ??zgItemInit_0
    496            {
    497              if ( setDefault )
   \   000037   E5..         MOV     A,?V1
   \   000039   601F         JZ      ??zgItemInit_1
    498              {
    499                // Write the default value back to NV
    500                status = osal_nv_write( id, 0, len, buf );
   \   00003B                ; Setup parameters for call to function osal_nv_write
   \   00003B   78..         MOV     R0,#?V2
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   78..         MOV     R0,#?V4
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   7C00         MOV     R4,#0x0
   \   000047   7D00         MOV     R5,#0x0
   \   000049   EE           MOV     A,R6
   \   00004A   FA           MOV     R2,A
   \   00004B   EF           MOV     A,R7
   \   00004C   FB           MOV     R3,A
   \   00004D   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000050   7404         MOV     A,#0x4
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   E9           MOV     A,R1
   \   000056   F5..         MOV     ?V0,A
   \   000058   801D         SJMP    ??zgItemInit_0
    501              }
    502              else
    503              {
    504                // The item exists in NV memory, read it from NV memory
    505                status = osal_nv_read( id, 0, len, buf );
   \                     ??zgItemInit_1:
   \   00005A                ; Setup parameters for call to function osal_nv_read
   \   00005A   78..         MOV     R0,#?V2
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   78..         MOV     R0,#?V4
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   7C00         MOV     R4,#0x0
   \   000066   7D00         MOV     R5,#0x0
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   E9           MOV     A,R1
   \   000075   F5..         MOV     ?V0,A
    506              }
    507            }
    508          
    509            return (status);
   \                     ??zgItemInit_0:
   \   000077   A9..         MOV     R1,?V0
   \   000079   7F06         MOV     R7,#0x6
   \   00007B   02....       LJMP    ?BANKED_LEAVE_XDATA
    510          }
    511          
    512          /*********************************************************************
    513           * API FUNCTIONS
    514           */
    515          
    516          /*********************************************************************
    517           * @fn          zgInit
    518           *
    519           * @brief
    520           *
    521           *   Initialize the Z-Stack Globals. If an item doesn't exist in
    522           *   NV memory, write the system default into NV memory. But if
    523           *   it exists, set the item to the value stored in NV memory.
    524           *
    525           * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
    526           *       that the Config state items (zgItemTable) need to be
    527           *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
    528           *
    529           * @param       none
    530           *
    531           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    532           *              exist in NV, NV_OPER_FAILED if failure.
    533           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    534          uint8 zgInit( void )
   \                     zgInit:
    535          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    536            uint8  setDefault = FALSE;
   \   000005   7E00         MOV     R6,#0x0
    537          
    538            // Do we want to default the Config state values
    539            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   E8           MOV     A,R0
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   5002         JNC     ??zgInit_0
    540            {
    541              setDefault = TRUE;
   \   000011   7E01         MOV     R6,#0x1
    542            }
    543          
    544          #if defined ( FEATURE_SYSTEM_STATS )
    545            // This sections tracks the number of resets
    546            uint16 bootCnt = 0;
    547          
    548            // Update the Boot Counter
    549            if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
    550            {
    551              // Get the old value from NV memory
    552              osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    553            }
    554          
    555            // Increment the Boot Counter and store it into NV memory
    556            if ( setDefault )
    557            {
    558              bootCnt = 0;
    559            }
    560            else
    561            {
    562              bootCnt++;
    563            }
    564          
    565            osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    566          #endif  // FEATURE_SYSTEM_STATS
    567          
    568            // Initialize the Extended PAN ID as my own extended address
    569            ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
   \                     ??zgInit_0:
   \   000013                ; Setup parameters for call to function ZMacGetReq
   \   000013   7A..         MOV     R2,#zgExtendedPANID & 0xff
   \   000015   7B..         MOV     R3,#(zgExtendedPANID >> 8) & 0xff
   \   000017   79E2         MOV     R1,#-0x1e
   \   000019   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   00001C   E9           MOV     A,R1
    570          
    571            // Initialize the items table
    572            zgInitItems( setDefault );
   \   00001D                ; Setup parameters for call to function zgInitItems
   \   00001D   EE           MOV     A,R6
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    573          
    574          #ifndef NONWK
    575            if ( ZG_SECURE_ENABLED )
    576            {
    577              // Initialize the Pre-Configured Key to the default key
    578              zgPreconfigKeyInit( setDefault );
   \   000022                ; Setup parameters for call to function zgPreconfigKeyInit
   \   000022   EE           MOV     A,R6
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   `??zgPreconfigKeyInit::?relay`; Banked call to: zgPreconfigKeyInit
   \   000027   E9           MOV     A,R1
    579          
    580              // Initialize NV items for all Keys: NWK, APS, TCLK and Master
    581              ZDSecMgrInitNVKeyTables( setDefault );
   \   000028                ; Setup parameters for call to function ZDSecMgrInitNVKeyTables
   \   000028   EE           MOV     A,R6
   \   000029   F9           MOV     R1,A
   \   00002A   12....       LCALL   `??ZDSecMgrInitNVKeyTables::?relay`; Banked call to: ZDSecMgrInitNVKeyTables
    582            }
    583          #endif // NONWK
    584          
    585            // Clear the Config State default
    586            if ( setDefault )
   \   00002D   EE           MOV     A,R6
   \   00002E   6008         JZ      ??zgInit_1
    587            {
    588              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   000030                ; Setup parameters for call to function zgWriteStartupOptions
   \   000030   7A01         MOV     R2,#0x1
   \   000032   7900         MOV     R1,#0x0
   \   000034   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   000037   E9           MOV     A,R1
    589            }
    590          
    591            return ( ZSUCCESS );
   \                     ??zgInit_1:
   \   000038   7900         MOV     R1,#0x0
   \   00003A   7F01         MOV     R7,#0x1
   \   00003C   02....       LJMP    ?BANKED_LEAVE_XDATA
    592          }
    593          
    594          /*********************************************************************
    595           * @fn          zgInitItems
    596           *
    597           * @brief       Initializes RAM variables from NV.  If NV items don't
    598           *              exist, then the NV is initialize with what is in RAM
    599           *              variables.
    600           *
    601           * @param       none
    602           *
    603           * @return      none
    604           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    605          void zgInitItems( uint8 setDefault )
   \                     zgInitItems:
    606          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    607            uint8  i = 0;
   \   000007   7F00         MOV     R7,#0x0
    608          
    609            if ( ZG_BUILD_COORDINATOR_TYPE && ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY ) )
   \   000009   90....       MOV     DPTR,#zgApsLinkKeyType
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   7008         JNZ     ??zgInitItems_0
    610            {
    611              zgUseDefaultTCLK = FALSE;
   \   00000F   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
   \   000015   8006         SJMP    ??zgInitItems_1
    612            }
    613            else
    614            {
    615              // Most of the time default TCLK will be used
    616              zgUseDefaultTCLK = TRUE;
   \                     ??zgInitItems_0:
   \   000017   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   00001A   7401         MOV     A,#0x1
   \   00001C   F0           MOVX    @DPTR,A
    617            }
    618          
    619            while ( zgItemTable[i].id != 0x00 )
   \                     ??zgInitItems_1:
   \   00001D   EF           MOV     A,R7
   \   00001E   F8           MOV     R0,A
   \   00001F   7900         MOV     R1,#0x0
   \   000021   E8           MOV     A,R0
   \   000022   75F006       MOV     B,#0x6
   \   000025   A4           MUL     AB
   \   000026   C8           XCH     A,R0
   \   000027   AAF0         MOV     R2,B
   \   000029   75F000       MOV     B,#0x0
   \   00002C   A4           MUL     AB
   \   00002D   2A           ADD     A,R2
   \   00002E   FA           MOV     R2,A
   \   00002F   75F006       MOV     B,#0x6
   \   000032   E9           MOV     A,R1
   \   000033   A4           MUL     AB
   \   000034   2A           ADD     A,R2
   \   000035   F9           MOV     R1,A
   \   000036   74..         MOV     A,#zgItemTable & 0xff
   \   000038   28           ADD     A,R0
   \   000039   F582         MOV     DPL,A
   \   00003B   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   00003D   39           ADDC    A,R1
   \   00003E   F583         MOV     DPH,A
   \   000040   E4           CLR     A
   \   000041   93           MOVC    A,@A+DPTR
   \   000042   F8           MOV     R0,A
   \   000043   7401         MOV     A,#0x1
   \   000045   93           MOVC    A,@A+DPTR
   \   000046   F9           MOV     R1,A
   \   000047   E8           MOV     A,R0
   \   000048   49           ORL     A,R1
   \   000049   7003         JNZ     $+5
   \   00004B   02....       LJMP    ??zgInitItems_2 & 0xFFFF
    620            {
    621              // Initialize the item
    622              zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
   \   00004E                ; Setup parameters for call to function zgItemInit
   \   00004E   EF           MOV     A,R7
   \   00004F   F8           MOV     R0,A
   \   000050   7900         MOV     R1,#0x0
   \   000052   E8           MOV     A,R0
   \   000053   75F006       MOV     B,#0x6
   \   000056   A4           MUL     AB
   \   000057   C8           XCH     A,R0
   \   000058   AAF0         MOV     R2,B
   \   00005A   75F000       MOV     B,#0x0
   \   00005D   A4           MUL     AB
   \   00005E   2A           ADD     A,R2
   \   00005F   FA           MOV     R2,A
   \   000060   75F006       MOV     B,#0x6
   \   000063   E9           MOV     A,R1
   \   000064   A4           MUL     AB
   \   000065   2A           ADD     A,R2
   \   000066   F9           MOV     R1,A
   \   000067   74..         MOV     A,#(zgItemTable + 4) & 0xff
   \   000069   28           ADD     A,R0
   \   00006A   F582         MOV     DPL,A
   \   00006C   74..         MOV     A,#((zgItemTable + 4) >> 8) & 0xff
   \   00006E   39           ADDC    A,R1
   \   00006F   F583         MOV     DPH,A
   \   000071   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   000074   EE           MOV     A,R6
   \   000075   F9           MOV     R1,A
   \   000076   EF           MOV     A,R7
   \   000077   FA           MOV     R2,A
   \   000078   7B00         MOV     R3,#0x0
   \   00007A   EA           MOV     A,R2
   \   00007B   75F006       MOV     B,#0x6
   \   00007E   A4           MUL     AB
   \   00007F   CA           XCH     A,R2
   \   000080   A8F0         MOV     R0,B
   \   000082   75F000       MOV     B,#0x0
   \   000085   A4           MUL     AB
   \   000086   28           ADD     A,R0
   \   000087   F8           MOV     R0,A
   \   000088   75F006       MOV     B,#0x6
   \   00008B   EB           MOV     A,R3
   \   00008C   A4           MUL     AB
   \   00008D   28           ADD     A,R0
   \   00008E   FB           MOV     R3,A
   \   00008F   74..         MOV     A,#(zgItemTable + 2) & 0xff
   \   000091   2A           ADD     A,R2
   \   000092   F582         MOV     DPL,A
   \   000094   74..         MOV     A,#((zgItemTable + 2) >> 8) & 0xff
   \   000096   3B           ADDC    A,R3
   \   000097   F583         MOV     DPH,A
   \   000099   E4           CLR     A
   \   00009A   93           MOVC    A,@A+DPTR
   \   00009B   FC           MOV     R4,A
   \   00009C   7401         MOV     A,#0x1
   \   00009E   93           MOVC    A,@A+DPTR
   \   00009F   FD           MOV     R5,A
   \   0000A0   C9           XCH     A,R1
   \   0000A1   FE           MOV     R6,A
   \   0000A2   C9           XCH     A,R1
   \   0000A3   EF           MOV     A,R7
   \   0000A4   F8           MOV     R0,A
   \   0000A5   7900         MOV     R1,#0x0
   \   0000A7   E8           MOV     A,R0
   \   0000A8   75F006       MOV     B,#0x6
   \   0000AB   A4           MUL     AB
   \   0000AC   C8           XCH     A,R0
   \   0000AD   AAF0         MOV     R2,B
   \   0000AF   75F000       MOV     B,#0x0
   \   0000B2   A4           MUL     AB
   \   0000B3   2A           ADD     A,R2
   \   0000B4   FA           MOV     R2,A
   \   0000B5   75F006       MOV     B,#0x6
   \   0000B8   E9           MOV     A,R1
   \   0000B9   A4           MUL     AB
   \   0000BA   2A           ADD     A,R2
   \   0000BB   F9           MOV     R1,A
   \   0000BC   74..         MOV     A,#zgItemTable & 0xff
   \   0000BE   28           ADD     A,R0
   \   0000BF   F582         MOV     DPL,A
   \   0000C1   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   0000C3   39           ADDC    A,R1
   \   0000C4   F583         MOV     DPH,A
   \   0000C6   E4           CLR     A
   \   0000C7   93           MOVC    A,@A+DPTR
   \   0000C8   FA           MOV     R2,A
   \   0000C9   7401         MOV     A,#0x1
   \   0000CB   93           MOVC    A,@A+DPTR
   \   0000CC   FB           MOV     R3,A
   \   0000CD   CE           XCH     A,R6
   \   0000CE   F9           MOV     R1,A
   \   0000CF   CE           XCH     A,R6
   \   0000D0   12....       LCALL   `??zgItemInit::?relay`; Banked call to: zgItemInit
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D8   E9           MOV     A,R1
    623          
    624              // Move on to the next item
    625              i++;
   \   0000D9   0F           INC     R7
   \   0000DA   02....       LJMP    ??zgInitItems_1 & 0xFFFF
    626            }
    627          
    628          #ifdef WIFI_FREQUENCY_SELECT
    629          	zgDefaultChannelList = zgDefaultChannelMask;
    630          #endif
    631          }
   \                     ??zgInitItems_2:
   \   0000DD   7F01         MOV     R7,#0x1
   \   0000DF   02....       LJMP    ?BANKED_LEAVE_XDATA
    632          
    633          /*********************************************************************
    634           * @fn          zgReadStartupOptions
    635           *
    636           * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
    637           *
    638           * @param       none
    639           *
    640           * @return      the ZCD_NV_STARTUP_OPTION NV item
    641           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    642          uint8 zgReadStartupOptions( void )
   \                     zgReadStartupOptions:
    643          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    644            // Default to Use Config State and Use Network State
    645            uint8 startupOption = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
    646          
    647            // This should have been done in ZMain.c, but just in case.
    648            if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
    649                                        sizeof(startupOption),
    650                                        &startupOption ) == ZSUCCESS )
   \   000013                ; Setup parameters for call to function osal_nv_item_init
   \   000013   A8..         MOV     R0,?XSP + 0
   \   000015   A9..         MOV     R1,?XSP + 1
   \   000017   88..         MOV     ?V0,R0
   \   000019   89..         MOV     ?V1,R1
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   7C01         MOV     R4,#0x1
   \   000022   7D00         MOV     R5,#0x0
   \   000024   7A03         MOV     R2,#0x3
   \   000026   7B00         MOV     R3,#0x0
   \   000028   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   E9           MOV     A,R1
   \   000031   7029         JNZ     ??zgReadStartupOptions_0
    651            {
    652              // Read saved startup control
    653              osal_nv_read( ZCD_NV_STARTUP_OPTION,
    654                            0,
    655                            sizeof( startupOption ),
    656                            &startupOption);
   \   000033                ; Setup parameters for call to function osal_nv_read
   \   000033   A8..         MOV     R0,?XSP + 0
   \   000035   A9..         MOV     R1,?XSP + 1
   \   000037   88..         MOV     ?V0,R0
   \   000039   89..         MOV     ?V1,R1
   \   00003B   78..         MOV     R0,#?V0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..01       MOV     ?V0,#0x1
   \   000043   75..00       MOV     ?V1,#0x0
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7C00         MOV     R4,#0x0
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   7A03         MOV     R2,#0x3
   \   000051   7B00         MOV     R3,#0x0
   \   000053   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   E9           MOV     A,R1
    657            }
    658            return ( startupOption );
   \                     ??zgReadStartupOptions_0:
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   7401         MOV     A,#0x1
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   7F02         MOV     R7,#0x2
   \   00006B   02....       LJMP    ?BANKED_LEAVE_XDATA
    659          }
    660          
    661          /*********************************************************************
    662           * @fn          zgWriteStartupOptions
    663           *
    664           * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
    665           *
    666           * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
    667           *               clear bit. The set bit is an OR operation, and the
    668           *               clear bit is an AND ~(bitOptions) operation.
    669           *
    670           * @param       bitOptions - which bits to perform action on:
    671           *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
    672           *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    673           *
    674           * @return      ZSUCCESS if successful
    675           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    676          uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
   \                     zgWriteStartupOptions:
    677          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   8A..         MOV     ?V0,R2
    678            uint8 status;
    679            uint8 startupOptions = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    680          
    681            status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
    682                          0,
    683                          sizeof( startupOptions ),
    684                          &startupOptions );
   \   000017                ; Setup parameters for call to function osal_nv_read
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V2,R0
   \   00001D   89..         MOV     ?V3,R1
   \   00001F   78..         MOV     R0,#?V2
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..01       MOV     ?V2,#0x1
   \   000027   75..00       MOV     ?V3,#0x0
   \   00002A   78..         MOV     R0,#?V2
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A03         MOV     R2,#0x3
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
   \   000040   FE           MOV     R6,A
    685          
    686            if ( status == ZSUCCESS )
   \   000041   EE           MOV     A,R6
   \   000042   7049         JNZ     ??zgWriteStartupOptions_0
    687            {
    688              if ( action == ZG_STARTUP_SET )
   \   000044   74FF         MOV     A,#-0x1
   \   000046   6F           XRL     A,R7
   \   000047   700C         JNZ     ??zgWriteStartupOptions_1
    689              {
    690                // Set bits
    691                startupOptions |= bitOptions;
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   45..         ORL     A,?V0
   \   000052   F0           MOVX    @DPTR,A
   \   000053   800E         SJMP    ??zgWriteStartupOptions_2
    692              }
    693              else
    694              {
    695                // Clear bits
    696                startupOptions &= (bitOptions ^ 0xFF);
   \                     ??zgWriteStartupOptions_1:
   \   000055   74FF         MOV     A,#-0x1
   \   000057   65..         XRL     A,?V0
   \   000059   F8           MOV     R0,A
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   58           ANL     A,R0
   \   000062   F0           MOVX    @DPTR,A
    697              }
    698          
    699              // Changed?
    700              status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
    701                           0,
    702                           sizeof( startupOptions ),
    703                           &startupOptions );
   \                     ??zgWriteStartupOptions_2:
   \   000063                ; Setup parameters for call to function osal_nv_write
   \   000063   A8..         MOV     R0,?XSP + 0
   \   000065   A9..         MOV     R1,?XSP + 1
   \   000067   88..         MOV     ?V2,R0
   \   000069   89..         MOV     ?V3,R1
   \   00006B   78..         MOV     R0,#?V2
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   75..01       MOV     ?V2,#0x1
   \   000073   75..00       MOV     ?V3,#0x0
   \   000076   78..         MOV     R0,#?V2
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   7C00         MOV     R4,#0x0
   \   00007D   7D00         MOV     R5,#0x0
   \   00007F   7A03         MOV     R2,#0x3
   \   000081   7B00         MOV     R3,#0x0
   \   000083   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000086   7404         MOV     A,#0x4
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008B   E9           MOV     A,R1
   \   00008C   FE           MOV     R6,A
    704            }
    705          
    706            return ( status );
   \                     ??zgWriteStartupOptions_0:
   \   00008D   EE           MOV     A,R6
   \   00008E   F9           MOV     R1,A
   \   00008F   7401         MOV     A,#0x1
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
   \   000094   7F04         MOV     R7,#0x4
   \   000096   02....       LJMP    ?BANKED_LEAVE_XDATA
    707          }
    708          
    709          /*********************************************************************
    710           * @fn          zgSetItem
    711           *
    712           * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
    713           *
    714           * @param       id - NV ID
    715           *              len - NV item length
    716           *              buf - pointer to the input buffer
    717           *
    718           * @return      none
    719           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    720          void zgSetItem( uint16 id, uint16 len, void *buf )
   \                     zgSetItem:
    721          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V1,A
    722          
    723            uint8  i = 0;
   \   000019   75..00       MOV     ?V7,#0x0
    724          
    725            // Look up the NV item table
    726            while ( zgItemTable[i].id != 0x00 )
   \                     ??zgSetItem_0:
   \   00001C   A8..         MOV     R0,?V7
   \   00001E   7900         MOV     R1,#0x0
   \   000020   E8           MOV     A,R0
   \   000021   75F006       MOV     B,#0x6
   \   000024   A4           MUL     AB
   \   000025   C8           XCH     A,R0
   \   000026   AAF0         MOV     R2,B
   \   000028   75F000       MOV     B,#0x0
   \   00002B   A4           MUL     AB
   \   00002C   2A           ADD     A,R2
   \   00002D   FA           MOV     R2,A
   \   00002E   75F006       MOV     B,#0x6
   \   000031   E9           MOV     A,R1
   \   000032   A4           MUL     AB
   \   000033   2A           ADD     A,R2
   \   000034   F9           MOV     R1,A
   \   000035   74..         MOV     A,#zgItemTable & 0xff
   \   000037   28           ADD     A,R0
   \   000038   F582         MOV     DPL,A
   \   00003A   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   00003C   39           ADDC    A,R1
   \   00003D   F583         MOV     DPH,A
   \   00003F   E4           CLR     A
   \   000040   93           MOVC    A,@A+DPTR
   \   000041   F8           MOV     R0,A
   \   000042   7401         MOV     A,#0x1
   \   000044   93           MOVC    A,@A+DPTR
   \   000045   F9           MOV     R1,A
   \   000046   E8           MOV     A,R0
   \   000047   49           ORL     A,R1
   \   000048   7003         JNZ     $+5
   \   00004A   02....       LJMP    ??zgSetItem_1 & 0xFFFF
    727            {
    728              if( zgItemTable[i].id == id )
   \   00004D   A8..         MOV     R0,?V7
   \   00004F   7900         MOV     R1,#0x0
   \   000051   E8           MOV     A,R0
   \   000052   75F006       MOV     B,#0x6
   \   000055   A4           MUL     AB
   \   000056   C8           XCH     A,R0
   \   000057   AAF0         MOV     R2,B
   \   000059   75F000       MOV     B,#0x0
   \   00005C   A4           MUL     AB
   \   00005D   2A           ADD     A,R2
   \   00005E   FA           MOV     R2,A
   \   00005F   75F006       MOV     B,#0x6
   \   000062   E9           MOV     A,R1
   \   000063   A4           MUL     AB
   \   000064   2A           ADD     A,R2
   \   000065   F9           MOV     R1,A
   \   000066   74..         MOV     A,#zgItemTable & 0xff
   \   000068   28           ADD     A,R0
   \   000069   F582         MOV     DPL,A
   \   00006B   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   00006D   39           ADDC    A,R1
   \   00006E   F583         MOV     DPH,A
   \   000070   E4           CLR     A
   \   000071   93           MOVC    A,@A+DPTR
   \   000072   F8           MOV     R0,A
   \   000073   7401         MOV     A,#0x1
   \   000075   93           MOVC    A,@A+DPTR
   \   000076   F9           MOV     R1,A
   \   000077   E5..         MOV     A,?V2
   \   000079   68           XRL     A,R0
   \   00007A   7003         JNZ     ??zgSetItem_2
   \   00007C   E5..         MOV     A,?V3
   \   00007E   69           XRL     A,R1
   \                     ??zgSetItem_2:
   \   00007F   7078         JNZ     ??zgSetItem_3
    729              {
    730                if ( zgItemTable[i].len == len )
   \   000081   A8..         MOV     R0,?V7
   \   000083   7900         MOV     R1,#0x0
   \   000085   E8           MOV     A,R0
   \   000086   75F006       MOV     B,#0x6
   \   000089   A4           MUL     AB
   \   00008A   C8           XCH     A,R0
   \   00008B   AAF0         MOV     R2,B
   \   00008D   75F000       MOV     B,#0x0
   \   000090   A4           MUL     AB
   \   000091   2A           ADD     A,R2
   \   000092   FA           MOV     R2,A
   \   000093   75F006       MOV     B,#0x6
   \   000096   E9           MOV     A,R1
   \   000097   A4           MUL     AB
   \   000098   2A           ADD     A,R2
   \   000099   F9           MOV     R1,A
   \   00009A   74..         MOV     A,#(zgItemTable + 2) & 0xff
   \   00009C   28           ADD     A,R0
   \   00009D   F582         MOV     DPL,A
   \   00009F   74..         MOV     A,#((zgItemTable + 2) >> 8) & 0xff
   \   0000A1   39           ADDC    A,R1
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E4           CLR     A
   \   0000A5   93           MOVC    A,@A+DPTR
   \   0000A6   F8           MOV     R0,A
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   93           MOVC    A,@A+DPTR
   \   0000AA   F9           MOV     R1,A
   \   0000AB   EE           MOV     A,R6
   \   0000AC   68           XRL     A,R0
   \   0000AD   7002         JNZ     ??zgSetItem_4
   \   0000AF   EF           MOV     A,R7
   \   0000B0   69           XRL     A,R1
   \                     ??zgSetItem_4:
   \   0000B1   704B         JNZ     ??zgSetItem_1
    731                {
    732                  osal_memcpy( zgItemTable[i].buf, buf, len );
   \   0000B3                ; Setup parameters for call to function osal_memcpy
   \   0000B3   85....       MOV     ?V4,?V0
   \   0000B6   85....       MOV     ?V5,?V1
   \   0000B9   75..00       MOV     ?V6,#0x0
   \   0000BC   78..         MOV     R0,#?V4
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FC           MOV     R4,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   FD           MOV     R5,A
   \   0000C5   A8..         MOV     R0,?V7
   \   0000C7   7900         MOV     R1,#0x0
   \   0000C9   E8           MOV     A,R0
   \   0000CA   75F006       MOV     B,#0x6
   \   0000CD   A4           MUL     AB
   \   0000CE   C8           XCH     A,R0
   \   0000CF   AAF0         MOV     R2,B
   \   0000D1   75F000       MOV     B,#0x0
   \   0000D4   A4           MUL     AB
   \   0000D5   2A           ADD     A,R2
   \   0000D6   FA           MOV     R2,A
   \   0000D7   75F006       MOV     B,#0x6
   \   0000DA   E9           MOV     A,R1
   \   0000DB   A4           MUL     AB
   \   0000DC   2A           ADD     A,R2
   \   0000DD   F9           MOV     R1,A
   \   0000DE   74..         MOV     A,#(zgItemTable + 4) & 0xff
   \   0000E0   28           ADD     A,R0
   \   0000E1   F582         MOV     DPL,A
   \   0000E3   74..         MOV     A,#((zgItemTable + 4) >> 8) & 0xff
   \   0000E5   39           ADDC    A,R1
   \   0000E6   F583         MOV     DPH,A
   \   0000E8   E4           CLR     A
   \   0000E9   93           MOVC    A,@A+DPTR
   \   0000EA   FA           MOV     R2,A
   \   0000EB   7401         MOV     A,#0x1
   \   0000ED   93           MOVC    A,@A+DPTR
   \   0000EE   FB           MOV     R3,A
   \   0000EF   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F2   7403         MOV     A,#0x3
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
    733                }
    734                break;
   \   0000F7   8005         SJMP    ??zgSetItem_1
    735              }
    736              // Move on to the next item
    737              i++;
   \                     ??zgSetItem_3:
   \   0000F9   05..         INC     ?V7
   \   0000FB   02....       LJMP    ??zgSetItem_0 & 0xFFFF
    738            }
    739          }
   \                     ??zgSetItem_1:
   \   0000FE   7F08         MOV     R7,#0x8
   \   000100   02....       LJMP    ?BANKED_LEAVE_XDATA
    740          
    741          #ifndef NONWK
    742          /*********************************************************************
    743           * @fn       zgPreconfigKeyInit()
    744           *
    745           * @brief
    746           *
    747           *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
    748           *   write the system default (value passed in) into NV memory. But if
    749           *   it exists do not overwrite it.
    750           *
    751           *   Also, if setDefault is TRUE and the item exists, we will write
    752           *   the default value to NV space.
    753           *
    754           * @param   setDefault - TRUE to set default
    755           *
    756           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    757           *          exist in NV, NV_OPER_FAILED if failure.
    758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    759          static uint8 zgPreconfigKeyInit( uint8 setDefault )
   \                     zgPreconfigKeyInit:
    760          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
    761            uint8 zgPreConfigKey[SEC_KEY_LEN];
    762            uint8 status;
    763          
    764            // Initialize the Pre-Configured Key to the default key
    765            osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
   \   00000C                ; Setup parameters for call to function osal_memcpy
   \   00000C   75....       MOV     ?V0,#defaultKey & 0xff
   \   00000F   75....       MOV     ?V1,#(defaultKey >> 8) & 0xff
   \   000012   75..80       MOV     ?V2,#-0x80
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001A   7C10         MOV     R4,#0x10
   \   00001C   7D00         MOV     R5,#0x0
   \   00001E   7403         MOV     A,#0x3
   \   000020   12....       LCALL   ?XSTACK_DISP101_8
   \   000023   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000026   7403         MOV     A,#0x3
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
    766          
    767            // If the item doesn't exist in NV memory, create and initialize it
    768            status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
   \   00002B                ; Setup parameters for call to function osal_nv_item_init
   \   00002B   A8..         MOV     R0,?XSP + 0
   \   00002D   A9..         MOV     R1,?XSP + 1
   \   00002F   88..         MOV     ?V0,R0
   \   000031   89..         MOV     ?V1,R1
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C10         MOV     R4,#0x10
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A62         MOV     R2,#0x62
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   FE           MOV     R6,A
    769            if ( status == ZSUCCESS )
   \   00004A   EE           MOV     A,R6
   \   00004B   702D         JNZ     ??zgPreconfigKeyInit_0
    770            {
    771              if ( setDefault )
   \   00004D   EF           MOV     A,R7
   \   00004E   602A         JZ      ??zgPreconfigKeyInit_0
    772              {
    773                // Write the default value back to NV
    774                status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
   \   000050                ; Setup parameters for call to function osal_nv_write
   \   000050   A8..         MOV     R0,?XSP + 0
   \   000052   A9..         MOV     R1,?XSP + 1
   \   000054   88..         MOV     ?V0,R0
   \   000056   89..         MOV     ?V1,R1
   \   000058   78..         MOV     R0,#?V0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   75..10       MOV     ?V0,#0x10
   \   000060   75..00       MOV     ?V1,#0x0
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   7C00         MOV     R4,#0x0
   \   00006A   7D00         MOV     R5,#0x0
   \   00006C   7A62         MOV     R2,#0x62
   \   00006E   7B00         MOV     R3,#0x0
   \   000070   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000073   7404         MOV     A,#0x4
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   E9           MOV     A,R1
   \   000079   FE           MOV     R6,A
    775              }
    776            }
    777          
    778            // clear local copy of default key
    779            osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \                     ??zgPreconfigKeyInit_0:
   \   00007A                ; Setup parameters for call to function osal_memset
   \   00007A   7C10         MOV     R4,#0x10
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   7900         MOV     R1,#0x0
   \   000080   AA..         MOV     R2,?XSP + 0
   \   000082   AB..         MOV     R3,?XSP + 1
   \   000084   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    780          
    781            return (status);
   \   000087   EE           MOV     A,R6
   \   000088   F9           MOV     R1,A
   \   000089   7410         MOV     A,#0x10
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   7F03         MOV     R7,#0x3
   \   000090   02....       LJMP    ?BANKED_LEAVE_XDATA
    782          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgQueuedPollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgResponsePollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRejoinPollRate>`:
   \   000000   B801         DW 440

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxDataRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxPollFailureRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultChannelList>`:
   \   000000   00000004     DD 67108864

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultStartingScanDuratio`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStackProfile>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgIndirectMsgTimeout>`:
   \   000000   07           DB 7

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurityMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurePermitJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteDiscoveryTime>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteExpiryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxBcastRetires>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPassiveAckTimeout>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBcastDeliveryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConcentratorRadius>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkSrcRtgExpiryTime>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkLeaveRequestAllowed>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscMaxFrameRetries>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscAckWaitDurationPolled>`:
   \   000000   B80B         DW 3000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsAckWaitMultiplier>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsDefaultMaxBindingTime>`:
   \   000000   803E         DW 16000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsUseInsecureJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsNonMemberRadius>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkCommissionedNwkAddr>`:
   \   000000   FEFF         DW 65534

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscDupRejTimeoutInc>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscDupRejTimeoutCount>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsMinDupRejTableSize>`:
   \   000000   0500         DW 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsLinkKeyType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConfigPANID>`:
   \   000000   8500         DW 133

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStartDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMinTransmissions>`:
   \   000000   14           DB 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSapiEndpoint>`:
   \   000000   E0           DB 224

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgItemInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgItemInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInitItems::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInitItems

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgReadStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgReadStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgWriteStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgWriteStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgSetItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgSetItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgPreconfigKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgPreconfigKeyInit
    783          #endif
    784          
    785          /*********************************************************************
    786          *********************************************************************/

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
      9   zgInit
        9   -> ZDSecMgrInitNVKeyTables
        9   -> ZMacGetReq
        9   -> zgInitItems
        9   -> zgPreconfigKeyInit
        9   -> zgReadStartupOptions
        9   -> zgWriteStartupOptions
     20   zgInitItems
       11   -> zgItemInit
     29   zgItemInit
       16   -> osal_nv_item_init
       18   -> osal_nv_read
       18   -> osal_nv_write
     40   zgPreconfigKeyInit
       30   -> osal_memcpy
       27   -> osal_memset
       29   -> osal_nv_item_init
       31   -> osal_nv_write
     24   zgReadStartupOptions
       13   -> osal_nv_item_init
       15   -> osal_nv_read
     21   zgSetItem
       19   -> osal_memcpy
     26   zgWriteStartupOptions
       17   -> osal_nv_read
       17   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for zgApsAckWaitMultiplier>
       2  ?<Initializer for zgApsDefaultMaxBindingTime>
       1  ?<Initializer for zgApsLinkKeyType>
       2  ?<Initializer for zgApsMinDupRejTableSize>
       1  ?<Initializer for zgApsNonMemberRadius>
       1  ?<Initializer for zgApsUseInsecureJoin>
       2  ?<Initializer for zgApscAckWaitDurationPolled>
       1  ?<Initializer for zgApscDupRejTimeoutCount>
       2  ?<Initializer for zgApscDupRejTimeoutInc>
       1  ?<Initializer for zgApscMaxFrameRetries>
       1  ?<Initializer for zgBcastDeliveryTime>
       1  ?<Initializer for zgConcentratorRadius>
       2  ?<Initializer for zgConfigPANID>
       4  ?<Initializer for zgDefaultChannelList>
       1  ?<Initializer for zgDefaultStartingScanDuratio
       1  ?<Initializer for zgIndirectMsgTimeout>
       1  ?<Initializer for zgMaxBcastRetires>
       1  ?<Initializer for zgMaxDataRetries>
       1  ?<Initializer for zgMaxPollFailureRetries>
       2  ?<Initializer for zgNwkCommissionedNwkAddr>
       1  ?<Initializer for zgNwkLeaveRequestAllowed>
       1  ?<Initializer for zgNwkMgrMinTransmissions>
       1  ?<Initializer for zgNwkMgrMode>
       1  ?<Initializer for zgNwkMode>
       1  ?<Initializer for zgNwkSrcRtgExpiryTime>
       1  ?<Initializer for zgPassiveAckTimeout>
       2  ?<Initializer for zgPollRate>
       2  ?<Initializer for zgQueuedPollRate>
       2  ?<Initializer for zgRejoinPollRate>
       2  ?<Initializer for zgResponsePollRate>
       1  ?<Initializer for zgRouteDiscoveryTime>
       1  ?<Initializer for zgRouteExpiryTime>
       1  ?<Initializer for zgSapiEndpoint>
       1  ?<Initializer for zgSecurePermitJoin>
       1  ?<Initializer for zgSecurityMode>
       1  ?<Initializer for zgStackProfile>
       1  ?<Initializer for zgStartDelay>
       1  zgApsAckWaitMultiplier
       1  zgApsAllowR19Sec
       2  zgApsDefaultMaxBindingTime
       1  zgApsLinkKeyType
       2  zgApsMinDupRejTableSize
       1  zgApsNonMemberRadius
       8  zgApsTrustCenterAddr
       8  zgApsUseExtendedPANID
       1  zgApsUseInsecureJoin
       2  zgApscAckWaitDurationPolled
       1  zgApscDupRejTimeoutCount
       2  zgApscDupRejTimeoutInc
       1  zgApscMaxFrameRetries
       1  zgBcastDeliveryTime
       1  zgChildAgingEnable
       1  zgConcentratorDiscoveryTime
       1  zgConcentratorEnable
       1  zgConcentratorRC
       1  zgConcentratorRadius
       2  zgConfigPANID
      16  zgConfigPANID_Table
       4  zgDefaultChannelList
       1  zgDefaultStartingScanDuration
       1  zgDeviceLogicalType
       8  zgExtendedPANID
       1  zgIndirectMsgTimeout
      63  zgInit
       6  zgInit::?relay
     226  zgInitItems
       6  zgInitItems::?relay
     126  zgItemInit
       6  zgItemInit::?relay
     294  zgItemTable
       1  zgMaxBcastRetires
       1  zgMaxDataRetries
       1  zgMaxPollFailureRetries
       2  zgNwkCommissionedNwkAddr
       1  zgNwkLeaveRequestAllowed
       1  zgNwkMgrMinTransmissions
       1  zgNwkMgrMode
       1  zgNwkMode
       1  zgNwkSrcRtgExpiryTime
       1  zgPassiveAckTimeout
       2  zgPollRate
       1  zgPreConfigKeys
     147  zgPreconfigKeyInit
       6  zgPreconfigKeyInit::?relay
       2  zgQueuedPollRate
     110  zgReadStartupOptions
       6  zgReadStartupOptions::?relay
       2  zgRejoinPollRate
       2  zgResponsePollRate
       1  zgRouteDiscoveryTime
       1  zgRouteExpiryTime
       1  zgRouterOffAssocCleanup
       1  zgSapiEndpoint
       1  zgScanNwkCount
       1  zgSecurePermitJoin
       1  zgSecurityMode
     259  zgSetItem
       6  zgSetItem::?relay
       1  zgStackProfile
       1  zgStartDelay
       1  zgUseDefaultTCLK
     153  zgWriteStartupOptions
       6  zgWriteStartupOptions::?relay

 
 1 084 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
   294 bytes in segment CODE_C
    50 bytes in segment XDATA_I
    50 bytes in segment XDATA_ID
    16 bytes in segment XDATA_ROM_C
    34 bytes in segment XDATA_Z
 
 1 470 bytes of CODE  memory
    16 bytes of CONST memory
    84 bytes of XDATA memory

Errors: none
Warnings: none
