###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  17:49:08
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\nwk\BindingTable.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\nwk\BindingTable.c" -D ZTOOL_P1 -D MT_TASK -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_RESTORE -D
#        NV_INIT -D NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D OPEN_FCS -lC
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\BindingTable.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\BindingTable.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\nwk\BindingTable.c
      1          /**************************************************************************************************
      2            Filename:       BindingTable.c
      3            Revised:        $Date: 2014-06-03 14:02:45 -0700 (Tue, 03 Jun 2014) $
      4            Revision:       $Revision: 38776 $
      5          
      6            Description:    Device binding table functions.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "nwk_globals.h"
     47          #include "AddrMgr.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          
     51          /*********************************************************************
     52           * MACROS
     53           */
     54          
     55          /*********************************************************************
     56           * CONSTANTS
     57           */
     58          #define NV_BIND_EMPTY   0xFF
     59          #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
     60          #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
     61          
     62          /*********************************************************************
     63           * TYPEDEFS
     64           */
     65          typedef struct
     66          {
     67            uint8        srcEP;
     68            uint16       srcIndex;
     69            uint16       dstIndex;
     70            uint8        dstEP;
     71            uint8        dstAddrMode;
     72            uint8        clusterIDs;
     73            uint16*      clusterIDList;
     74          } bindFields_t;
     75          
     76          /*********************************************************************
     77           * GLOBAL VARIABLES
     78           */
     79          
     80          /*********************************************************************
     81           * LOCAL FUNCTIONS
     82           */
     83          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
     84                              AddrMgrEntry_t *entryNew );
     85          BindingEntry_t *bindFindEmpty( void );
     86          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
     87          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
     88          void bindAddrMgrLocalLoad( void );
     89          
     90          static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen );
     91          static uint8 BindUpgradeTableInNV( void );
     92          
     93          /*********************************************************************
     94           * LOCAL VARIABLES
     95           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          static uint8 bindAddrMgrLocalLoaded = FALSE;
   \                     bindAddrMgrLocalLoaded:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     97          
     98          /*********************************************************************
     99           * Function Pointers
    100           */
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
   \                     pbindAddEntry:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    103                                            zAddrType_t *dstAddr, byte dstEpInt,
    104                                            byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
   \                     pbindNumOfEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
   \                     pbindRemoveDev:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          byte (*pBindInitNV)( void ) = (void*)NULL;
   \                     pBindInitNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          void (*pBindSetDefaultNV)( void ) = (void*)NULL;
   \                     pBindSetDefaultNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
   \                     pBindRestoreFromNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          void (*pBindWriteNV)( void ) = (void*)NULL;
   \                     pBindWriteNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    111          
    112          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    113          /*********************************************************************
    114           * @fn      BindAddrMgrCB()
    115           *
    116           * @brief   Address Manager Callback function
    117           *
    118           * @param   update -
    119           * @param   entry -
    120           *
    121           * @return  pointer to
    122           */
    123          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
    124                              AddrMgrEntry_t *entryOld )
    125          {
    126            // Check for either deleted items or changed Extended (Duplicate) addresses
    127          }
    128          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
    129          
    130          /*********************************************************************
    131           * @fn      InitBindingTable()
    132           *
    133           * @brief
    134           *
    135           *   This function is used to initialise the binding table
    136           *
    137           * @param   none
    138           *
    139           * @return  none
    140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    141          void InitBindingTable( void )
   \                     InitBindingTable:
    142          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    143            osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
   \   000005                ; Setup parameters for call to function osal_memset
   \   000005   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000008   E4           CLR     A
   \   000009   93           MOVC    A,@A+DPTR
   \   00000A   FC           MOV     R4,A
   \   00000B   7401         MOV     A,#0x1
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   FD           MOV     R5,A
   \   00000F   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000012   E4           CLR     A
   \   000013   93           MOVC    A,@A+DPTR
   \   000014   F5..         MOV     ?V0,A
   \   000016   75..00       MOV     ?V1,#0x0
   \   000019   EC           MOV     A,R4
   \   00001A   85..F0       MOV     B,?V0
   \   00001D   A4           MUL     AB
   \   00001E   CC           XCH     A,R4
   \   00001F   A8F0         MOV     R0,B
   \   000021   85..F0       MOV     B,?V1
   \   000024   A4           MUL     AB
   \   000025   28           ADD     A,R0
   \   000026   F8           MOV     R0,A
   \   000027   85..F0       MOV     B,?V0
   \   00002A   ED           MOV     A,R5
   \   00002B   A4           MUL     AB
   \   00002C   28           ADD     A,R0
   \   00002D   FD           MOV     R5,A
   \   00002E   79FF         MOV     R1,#-0x1
   \   000030   7A..         MOV     R2,#BindingTable & 0xff
   \   000032   7B..         MOV     R3,#(BindingTable >> 8) & 0xff
   \   000034   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    144          
    145            pbindAddEntry = bindAddEntry;
   \   000037   90....       MOV     DPTR,#pbindAddEntry
   \   00003A   74..         MOV     A,#`??bindAddEntry::?relay` & 0xff
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   74..         MOV     A,#(`??bindAddEntry::?relay` >> 8) & 0xff
   \   000040   F0           MOVX    @DPTR,A
    146            pbindNumOfEntries = bindNumOfEntries;
   \   000041   90....       MOV     DPTR,#pbindNumOfEntries
   \   000044   74..         MOV     A,#`??bindNumOfEntries::?relay` & 0xff
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   74..         MOV     A,#(`??bindNumOfEntries::?relay` >> 8) & 0xff
   \   00004A   F0           MOVX    @DPTR,A
    147            pbindRemoveDev = bindRemoveDev;
   \   00004B   90....       MOV     DPTR,#pbindRemoveDev
   \   00004E   74..         MOV     A,#`??bindRemoveDev::?relay` & 0xff
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   74..         MOV     A,#(`??bindRemoveDev::?relay` >> 8) & 0xff
   \   000054   F0           MOVX    @DPTR,A
    148            pBindInitNV = BindInitNV;
   \   000055   90....       MOV     DPTR,#pBindInitNV
   \   000058   74..         MOV     A,#`??BindInitNV::?relay` & 0xff
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   74..         MOV     A,#(`??BindInitNV::?relay` >> 8) & 0xff
   \   00005E   F0           MOVX    @DPTR,A
    149            pBindSetDefaultNV = BindSetDefaultNV;
   \   00005F   90....       MOV     DPTR,#pBindSetDefaultNV
   \   000062   74..         MOV     A,#`??BindSetDefaultNV::?relay` & 0xff
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   74..         MOV     A,#(`??BindSetDefaultNV::?relay` >> 8) & 0xff
   \   000068   F0           MOVX    @DPTR,A
    150            pBindRestoreFromNV = BindRestoreFromNV;
   \   000069   90....       MOV     DPTR,#pBindRestoreFromNV
   \   00006C   74..         MOV     A,#`??BindRestoreFromNV::?relay` & 0xff
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   74..         MOV     A,#(`??BindRestoreFromNV::?relay` >> 8) & 0xff
   \   000072   F0           MOVX    @DPTR,A
    151            pBindWriteNV = BindWriteNV;
   \   000073   90....       MOV     DPTR,#pBindWriteNV
   \   000076   74..         MOV     A,#`??BindWriteNV::?relay` & 0xff
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   74..         MOV     A,#(`??BindWriteNV::?relay` >> 8) & 0xff
   \   00007C   F0           MOVX    @DPTR,A
    152          
    153            bindAddrMgrLocalLoaded = FALSE;
   \   00007D   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   000080   7400         MOV     A,#0x0
   \   000082   F0           MOVX    @DPTR,A
    154          
    155          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    156            // Register with the address manager
    157            AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
    158          #endif
    159          }
   \   000083   7F02         MOV     R7,#0x2
   \   000085   02....       LJMP    ?BANKED_LEAVE_XDATA
    160          
    161          /*********************************************************************
    162           * @fn      bindFindEmpty()
    163           *
    164           * @brief   This function returns a pointer to an empty binding slot
    165           *
    166           * @param   none
    167           *
    168           * @return  pointer to binding table entry, NULL if not added
    169           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    170          BindingEntry_t *bindFindEmpty( void )
   \                     bindFindEmpty:
    171          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    172            bindTableIndex_t x;
    173          
    174            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7C00         MOV     R4,#0x0
   \                     ??bindFindEmpty_0:
   \   000006   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000009   E4           CLR     A
   \   00000A   93           MOVC    A,@A+DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   EC           MOV     A,R4
   \   00000D   C3           CLR     C
   \   00000E   98           SUBB    A,R0
   \   00000F   504E         JNC     ??bindFindEmpty_1
    175            {
    176              // It's empty if the index is "Not Found"
    177              if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
   \   000011   EC           MOV     A,R4
   \   000012   F8           MOV     R0,A
   \   000013   7900         MOV     R1,#0x0
   \   000015   E8           MOV     A,R0
   \   000016   75F00E       MOV     B,#0xe
   \   000019   A4           MUL     AB
   \   00001A   C8           XCH     A,R0
   \   00001B   AAF0         MOV     R2,B
   \   00001D   75F000       MOV     B,#0x0
   \   000020   A4           MUL     AB
   \   000021   2A           ADD     A,R2
   \   000022   FA           MOV     R2,A
   \   000023   75F00E       MOV     B,#0xe
   \   000026   E9           MOV     A,R1
   \   000027   A4           MUL     AB
   \   000028   2A           ADD     A,R2
   \   000029   F9           MOV     R1,A
   \   00002A   74..         MOV     A,#BindingTable & 0xff
   \   00002C   28           ADD     A,R0
   \   00002D   F582         MOV     DPL,A
   \   00002F   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000031   39           ADDC    A,R1
   \   000032   F583         MOV     DPH,A
   \   000034   E0           MOVX    A,@DPTR
   \   000035   64FF         XRL     A,#0xff
   \   000037   7023         JNZ     ??bindFindEmpty_2
    178              {
    179                return ( &BindingTable[x] );
   \   000039   EC           MOV     A,R4
   \   00003A   F8           MOV     R0,A
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   E8           MOV     A,R0
   \   00003E   75F00E       MOV     B,#0xe
   \   000041   A4           MUL     AB
   \   000042   C8           XCH     A,R0
   \   000043   AAF0         MOV     R2,B
   \   000045   75F000       MOV     B,#0x0
   \   000048   A4           MUL     AB
   \   000049   2A           ADD     A,R2
   \   00004A   FA           MOV     R2,A
   \   00004B   75F00E       MOV     B,#0xe
   \   00004E   E9           MOV     A,R1
   \   00004F   A4           MUL     AB
   \   000050   2A           ADD     A,R2
   \   000051   F9           MOV     R1,A
   \   000052   74..         MOV     A,#BindingTable & 0xff
   \   000054   28           ADD     A,R0
   \   000055   FA           MOV     R2,A
   \   000056   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000058   39           ADDC    A,R1
   \   000059   FB           MOV     R3,A
   \   00005A   8007         SJMP    ??bindFindEmpty_3
    180              }
    181            }
   \                     ??bindFindEmpty_2:
   \   00005C   0C           INC     R4
   \   00005D   80A7         SJMP    ??bindFindEmpty_0
    182          
    183            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindEmpty_1:
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B00         MOV     R3,#0x0
   \                     ??bindFindEmpty_3:
   \   000063   D083         POP     DPH
   \   000065   D082         POP     DPL
   \   000067   02....       LJMP    ?BRET
    184          }
    185          
    186          /*********************************************************************
    187           * @fn      bindNumOfEntries()
    188           *
    189           * @brief   This function returns the number of binding table entries.
    190           *          The return for this is the number of clusters in the
    191           *          table NOT the number of entries.
    192           *
    193           * @param   none
    194           *
    195           * @return  number of entries
    196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          uint16 bindNumOfEntries( void )
   \                     bindNumOfEntries:
    198          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    199            bindTableIndex_t x;
    200            uint16 found;
    201          
    202            for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B00         MOV     R3,#0x0
   \   000008   7C00         MOV     R4,#0x0
   \                     ??bindNumOfEntries_0:
   \   00000A   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000D   E4           CLR     A
   \   00000E   93           MOVC    A,@A+DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   EC           MOV     A,R4
   \   000011   C3           CLR     C
   \   000012   98           SUBB    A,R0
   \   000013   5058         JNC     ??bindNumOfEntries_1
    203            {
    204              // It's empty if the index is "Not Found"
    205              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \   000015   EC           MOV     A,R4
   \   000016   F8           MOV     R0,A
   \   000017   7900         MOV     R1,#0x0
   \   000019   E8           MOV     A,R0
   \   00001A   75F00E       MOV     B,#0xe
   \   00001D   A4           MUL     AB
   \   00001E   C8           XCH     A,R0
   \   00001F   ADF0         MOV     R5,B
   \   000021   75F000       MOV     B,#0x0
   \   000024   A4           MUL     AB
   \   000025   2D           ADD     A,R5
   \   000026   FD           MOV     R5,A
   \   000027   75F00E       MOV     B,#0xe
   \   00002A   E9           MOV     A,R1
   \   00002B   A4           MUL     AB
   \   00002C   2D           ADD     A,R5
   \   00002D   F9           MOV     R1,A
   \   00002E   74..         MOV     A,#BindingTable & 0xff
   \   000030   28           ADD     A,R0
   \   000031   F582         MOV     DPL,A
   \   000033   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000035   39           ADDC    A,R1
   \   000036   F583         MOV     DPH,A
   \   000038   E0           MOVX    A,@DPTR
   \   000039   64FF         XRL     A,#0xff
   \   00003B   602D         JZ      ??bindNumOfEntries_2
    206              {
    207                found += BindingTable[x].numClusterIds;
   \   00003D   EC           MOV     A,R4
   \   00003E   F8           MOV     R0,A
   \   00003F   7900         MOV     R1,#0x0
   \   000041   E8           MOV     A,R0
   \   000042   75F00E       MOV     B,#0xe
   \   000045   A4           MUL     AB
   \   000046   C8           XCH     A,R0
   \   000047   ADF0         MOV     R5,B
   \   000049   75F000       MOV     B,#0x0
   \   00004C   A4           MUL     AB
   \   00004D   2D           ADD     A,R5
   \   00004E   FD           MOV     R5,A
   \   00004F   75F00E       MOV     B,#0xe
   \   000052   E9           MOV     A,R1
   \   000053   A4           MUL     AB
   \   000054   2D           ADD     A,R5
   \   000055   F9           MOV     R1,A
   \   000056   74..         MOV     A,#(BindingTable + 5) & 0xff
   \   000058   28           ADD     A,R0
   \   000059   F582         MOV     DPL,A
   \   00005B   74..         MOV     A,#((BindingTable + 5) >> 8) & 0xff
   \   00005D   39           ADDC    A,R1
   \   00005E   F583         MOV     DPH,A
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   7900         MOV     R1,#0x0
   \   000064   EA           MOV     A,R2
   \   000065   28           ADD     A,R0
   \   000066   FA           MOV     R2,A
   \   000067   EB           MOV     A,R3
   \   000068   39           ADDC    A,R1
   \   000069   FB           MOV     R3,A
    208              }
    209            }
   \                     ??bindNumOfEntries_2:
   \   00006A   0C           INC     R4
   \   00006B   809D         SJMP    ??bindNumOfEntries_0
    210          
    211            return ( found );
   \                     ??bindNumOfEntries_1:
   \   00006D   D083         POP     DPH
   \   00006F   D082         POP     DPL
   \   000071   02....       LJMP    ?BRET
    212          }
    213          
    214          /*********************************************************************
    215           * @fn      bindCapacity()
    216           *
    217           * @brief   This function returns the number of binding entries
    218           *          possible and used.
    219           *
    220           * @param   maxEntries - pointer to a place to put the max entries
    221           * @param   usedEntries - pointer to a place to put the number
    222           *               of used entries
    223           *
    224           * @return  none
    225           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
   \                     bindCapacity:
    227          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    228            bindTableIndex_t x;
    229            bindTableIndex_t used;
    230          
    231            for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000005   7E00         MOV     R6,#0x0
   \   000007   7F00         MOV     R7,#0x0
   \                     ??bindCapacity_0:
   \   000009   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   EF           MOV     A,R7
   \   000010   C3           CLR     C
   \   000011   98           SUBB    A,R0
   \   000012   5030         JNC     ??bindCapacity_1
    232            {
    233              // It's empty if the index is "Not Found"
    234              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \   000014   EF           MOV     A,R7
   \   000015   F8           MOV     R0,A
   \   000016   7900         MOV     R1,#0x0
   \   000018   E8           MOV     A,R0
   \   000019   75F00E       MOV     B,#0xe
   \   00001C   A4           MUL     AB
   \   00001D   C8           XCH     A,R0
   \   00001E   85F0..       MOV     ?V0,B
   \   000021   75F000       MOV     B,#0x0
   \   000024   A4           MUL     AB
   \   000025   25..         ADD     A,?V0
   \   000027   F5..         MOV     ?V0,A
   \   000029   75F00E       MOV     B,#0xe
   \   00002C   E9           MOV     A,R1
   \   00002D   A4           MUL     AB
   \   00002E   25..         ADD     A,?V0
   \   000030   F9           MOV     R1,A
   \   000031   74..         MOV     A,#BindingTable & 0xff
   \   000033   28           ADD     A,R0
   \   000034   F582         MOV     DPL,A
   \   000036   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000038   39           ADDC    A,R1
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   64FF         XRL     A,#0xff
   \   00003E   6001         JZ      ??bindCapacity_2
    235              {
    236                used++;
   \   000040   0E           INC     R6
    237              }
    238            }
   \                     ??bindCapacity_2:
   \   000041   0F           INC     R7
   \   000042   80C5         SJMP    ??bindCapacity_0
    239          
    240            *maxEntries = gNWK_MAX_BINDING_ENTRIES;
   \                     ??bindCapacity_1:
   \   000044   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000047   E4           CLR     A
   \   000048   93           MOVC    A,@A+DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   E8           MOV     A,R0
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   E9           MOV     A,R1
   \   000054   F0           MOVX    @DPTR,A
    241            *usedEntries = used;
   \   000055   EE           MOV     A,R6
   \   000056   F8           MOV     R0,A
   \   000057   7900         MOV     R1,#0x0
   \   000059   8C82         MOV     DPL,R4
   \   00005B   8D83         MOV     DPH,R5
   \   00005D   E8           MOV     A,R0
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E9           MOV     A,R1
   \   000061   F0           MOVX    @DPTR,A
    242          }
   \   000062   7F01         MOV     R7,#0x1
   \   000064   02....       LJMP    ?BANKED_LEAVE_XDATA
    243          
    244          /*********************************************************************
    245           * @fn      bindAddEntry()
    246           *
    247           * @brief   This function is used to Add an entry to the binding table
    248           *
    249           * @param       srcEpInt - source endpoint
    250           * @param       dstAddr - destination Address
    251           * @param       dstEpInt - destination endpoint
    252           * @param       numClusterIds - number of cluster Ids in the list
    253           * @param       clusterIds - pointer to the Object ID list
    254           *
    255           * @return  pointer to binding table entry, NULL if not added
    256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          BindingEntry_t *bindAddEntry( byte srcEpInt,
   \                     bindAddEntry:
    258                                        zAddrType_t *dstAddr, byte dstEpInt,
    259                                        byte numClusterIds, uint16 *clusterIds )
    260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V7,R1
   \   00000C   8A..         MOV     ?V10,R2
   \   00000E   8B..         MOV     ?V11,R3
   \   000010   8C..         MOV     ?V3,R4
   \   000012   8D..         MOV     ?V1,R5
   \   000014   741E         MOV     A,#0x1e
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V8,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V9,A
    261            uint8            index;
    262            bindTableIndex_t bindIdx;
    263            BindingEntry_t*  entry;
    264            bindFields_t     fields;
    265          
    266            // initialize results
    267            entry = NULL;
   \   000020   7E00         MOV     R6,#0x0
   \   000022   7F00         MOV     R7,#0x0
    268          
    269            // make sure local addresses have been loaded
    270            bindAddrMgrLocalLoad();
   \   000024                ; Setup parameters for call to function bindAddrMgrLocalLoad
   \   000024   12....       LCALL   `??bindAddrMgrLocalLoad::?relay`; Banked call to: bindAddrMgrLocalLoad
    271          
    272            // setup fields
    273            fields.dstIndex = bindAddrIndexGet( dstAddr );
   \   000027                ; Setup parameters for call to function bindAddrIndexGet
   \   000027   AA..         MOV     R2,?V10
   \   000029   AB..         MOV     R3,?V11
   \   00002B   12....       LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   EA           MOV     A,R2
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   EB           MOV     A,R3
   \   000037   F0           MOVX    @DPTR,A
    274            fields.srcEP    = srcEpInt;
   \   000038   E5..         MOV     A,?V7
   \   00003A   C0E0         PUSH    A
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   D0E0         POP     A
   \   000044   F0           MOVX    @DPTR,A
    275          
    276            if ( dstAddr->addrMode == AddrGroup )
   \   000045   85..82       MOV     DPL,?V10
   \   000048   85..83       MOV     DPH,?V11
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   6401         XRL     A,#0x1
   \   000056   7012         JNZ     ??bindAddEntry_0
    277            {
    278              fields.dstAddrMode = DSTGROUPMODE_GROUP;
   \   000058   7406         MOV     A,#0x6
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   7401         MOV     A,#0x1
   \   00005F   F0           MOVX    @DPTR,A
    279              fields.dstEP       = 0;
   \   000060   7405         MOV     A,#0x5
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   7400         MOV     A,#0x0
   \   000067   F0           MOVX    @DPTR,A
   \   000068   8014         SJMP    ??bindAddEntry_1
    280            }
    281            else
    282            {
    283              fields.dstAddrMode = DSTGROUPMODE_ADDR;
   \                     ??bindAddEntry_0:
   \   00006A   7406         MOV     A,#0x6
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   7400         MOV     A,#0x0
   \   000071   F0           MOVX    @DPTR,A
    284              fields.dstEP       = dstEpInt;
   \   000072   E5..         MOV     A,?V3
   \   000074   C0E0         PUSH    A
   \   000076   7405         MOV     A,#0x5
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   D0E0         POP     A
   \   00007D   F0           MOVX    @DPTR,A
    285            }
    286          
    287            if ( fields.dstIndex != INVALID_NODE_ADDR  )
   \                     ??bindAddEntry_1:
   \   00007E   7403         MOV     A,#0x3
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   E0           MOVX    A,@DPTR
   \   000084   64FE         XRL     A,#0xfe
   \   000086   7004         JNZ     ??bindAddEntry_2
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   64FF         XRL     A,#0xff
   \                     ??bindAddEntry_2:
   \   00008C   7003         JNZ     $+5
   \   00008E   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
    288            {
    289              for ( bindIdx = 0; bindIdx < gNWK_MAX_BINDING_ENTRIES; bindIdx++ )
   \   000091   75..00       MOV     ?V0,#0x0
   \                     ??bindAddEntry_4:
   \   000094   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000097   E4           CLR     A
   \   000098   93           MOVC    A,@A+DPTR
   \   000099   F8           MOV     R0,A
   \   00009A   E5..         MOV     A,?V0
   \   00009C   C3           CLR     C
   \   00009D   98           SUBB    A,R0
   \   00009E   4003         JC      $+5
   \   0000A0   02....       LJMP    ??bindAddEntry_5 & 0xFFFF
    290              {
    291                if ( ( fields.srcEP       == BindingTable[bindIdx].srcEP        ) &&
    292                     ( fields.dstAddrMode == BindingTable[bindIdx].dstGroupMode ) &&
    293                     ( fields.dstIndex    == BindingTable[bindIdx].dstIdx       ) &&
    294                     ( fields.dstEP       == BindingTable[bindIdx].dstEP        )    )
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   FB           MOV     R3,A
   \   0000AB   A8..         MOV     R0,?V0
   \   0000AD   7900         MOV     R1,#0x0
   \   0000AF   E8           MOV     A,R0
   \   0000B0   75F00E       MOV     B,#0xe
   \   0000B3   A4           MUL     AB
   \   0000B4   C8           XCH     A,R0
   \   0000B5   AAF0         MOV     R2,B
   \   0000B7   75F000       MOV     B,#0x0
   \   0000BA   A4           MUL     AB
   \   0000BB   2A           ADD     A,R2
   \   0000BC   FA           MOV     R2,A
   \   0000BD   75F00E       MOV     B,#0xe
   \   0000C0   E9           MOV     A,R1
   \   0000C1   A4           MUL     AB
   \   0000C2   2A           ADD     A,R2
   \   0000C3   F9           MOV     R1,A
   \   0000C4   74..         MOV     A,#BindingTable & 0xff
   \   0000C6   28           ADD     A,R0
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0000CB   39           ADDC    A,R1
   \   0000CC   F583         MOV     DPH,A
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   6B           XRL     A,R3
   \   0000D0   6003         JZ      $+5
   \   0000D2   02....       LJMP    ??bindAddEntry_6 & 0xFFFF
   \   0000D5   7406         MOV     A,#0x6
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   FB           MOV     R3,A
   \   0000DC   A8..         MOV     R0,?V0
   \   0000DE   7900         MOV     R1,#0x0
   \   0000E0   E8           MOV     A,R0
   \   0000E1   75F00E       MOV     B,#0xe
   \   0000E4   A4           MUL     AB
   \   0000E5   C8           XCH     A,R0
   \   0000E6   AAF0         MOV     R2,B
   \   0000E8   75F000       MOV     B,#0x0
   \   0000EB   A4           MUL     AB
   \   0000EC   2A           ADD     A,R2
   \   0000ED   FA           MOV     R2,A
   \   0000EE   75F00E       MOV     B,#0xe
   \   0000F1   E9           MOV     A,R1
   \   0000F2   A4           MUL     AB
   \   0000F3   2A           ADD     A,R2
   \   0000F4   F9           MOV     R1,A
   \   0000F5   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   0000F7   28           ADD     A,R0
   \   0000F8   F582         MOV     DPL,A
   \   0000FA   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   0000FC   39           ADDC    A,R1
   \   0000FD   F583         MOV     DPH,A
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   6B           XRL     A,R3
   \   000101   6003         JZ      $+5
   \   000103   02....       LJMP    ??bindAddEntry_6 & 0xFFFF
   \   000106   7403         MOV     A,#0x3
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   FA           MOV     R2,A
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   FB           MOV     R3,A
   \   000110   A8..         MOV     R0,?V0
   \   000112   7900         MOV     R1,#0x0
   \   000114   E8           MOV     A,R0
   \   000115   75F00E       MOV     B,#0xe
   \   000118   A4           MUL     AB
   \   000119   C8           XCH     A,R0
   \   00011A   ACF0         MOV     R4,B
   \   00011C   75F000       MOV     B,#0x0
   \   00011F   A4           MUL     AB
   \   000120   2C           ADD     A,R4
   \   000121   FC           MOV     R4,A
   \   000122   75F00E       MOV     B,#0xe
   \   000125   E9           MOV     A,R1
   \   000126   A4           MUL     AB
   \   000127   2C           ADD     A,R4
   \   000128   F9           MOV     R1,A
   \   000129   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   00012B   28           ADD     A,R0
   \   00012C   F582         MOV     DPL,A
   \   00012E   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   000130   39           ADDC    A,R1
   \   000131   F583         MOV     DPH,A
   \   000133   E0           MOVX    A,@DPTR
   \   000134   6A           XRL     A,R2
   \   000135   7003         JNZ     ??bindAddEntry_7
   \   000137   A3           INC     DPTR
   \   000138   E0           MOVX    A,@DPTR
   \   000139   6B           XRL     A,R3
   \                     ??bindAddEntry_7:
   \   00013A   7055         JNZ     ??bindAddEntry_6
   \   00013C   7405         MOV     A,#0x5
   \   00013E   12....       LCALL   ?XSTACK_DISP0_8
   \   000141   E0           MOVX    A,@DPTR
   \   000142   FB           MOV     R3,A
   \   000143   A8..         MOV     R0,?V0
   \   000145   7900         MOV     R1,#0x0
   \   000147   E8           MOV     A,R0
   \   000148   75F00E       MOV     B,#0xe
   \   00014B   A4           MUL     AB
   \   00014C   C8           XCH     A,R0
   \   00014D   AAF0         MOV     R2,B
   \   00014F   75F000       MOV     B,#0x0
   \   000152   A4           MUL     AB
   \   000153   2A           ADD     A,R2
   \   000154   FA           MOV     R2,A
   \   000155   75F00E       MOV     B,#0xe
   \   000158   E9           MOV     A,R1
   \   000159   A4           MUL     AB
   \   00015A   2A           ADD     A,R2
   \   00015B   F9           MOV     R1,A
   \   00015C   74..         MOV     A,#(BindingTable + 4) & 0xff
   \   00015E   28           ADD     A,R0
   \   00015F   F582         MOV     DPL,A
   \   000161   74..         MOV     A,#((BindingTable + 4) >> 8) & 0xff
   \   000163   39           ADDC    A,R1
   \   000164   F583         MOV     DPH,A
   \   000166   E0           MOVX    A,@DPTR
   \   000167   6B           XRL     A,R3
   \   000168   7027         JNZ     ??bindAddEntry_6
    295                {
    296                  entry = &BindingTable[bindIdx];
   \   00016A   A8..         MOV     R0,?V0
   \   00016C   7900         MOV     R1,#0x0
   \   00016E   E8           MOV     A,R0
   \   00016F   75F00E       MOV     B,#0xe
   \   000172   A4           MUL     AB
   \   000173   C8           XCH     A,R0
   \   000174   AAF0         MOV     R2,B
   \   000176   75F000       MOV     B,#0x0
   \   000179   A4           MUL     AB
   \   00017A   2A           ADD     A,R2
   \   00017B   FA           MOV     R2,A
   \   00017C   75F00E       MOV     B,#0xe
   \   00017F   E9           MOV     A,R1
   \   000180   A4           MUL     AB
   \   000181   2A           ADD     A,R2
   \   000182   F9           MOV     R1,A
   \   000183   74..         MOV     A,#BindingTable & 0xff
   \   000185   28           ADD     A,R0
   \   000186   F8           MOV     R0,A
   \   000187   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000189   39           ADDC    A,R1
   \   00018A   F9           MOV     R1,A
   \   00018B   E8           MOV     A,R0
   \   00018C   FE           MOV     R6,A
   \   00018D   E9           MOV     A,R1
   \   00018E   FF           MOV     R7,A
    297          
    298                  // break from loop
    299                  break;
   \   00018F   8005         SJMP    ??bindAddEntry_5
    300                }
    301              }
   \                     ??bindAddEntry_6:
   \   000191   05..         INC     ?V0
   \   000193   02....       LJMP    ??bindAddEntry_4 & 0xFFFF
    302          
    303              if ( entry != NULL )
   \                     ??bindAddEntry_5:
   \   000196   EE           MOV     A,R6
   \   000197   4F           ORL     A,R7
   \   000198   6079         JZ      ??bindAddEntry_8
    304              {
    305                // Loop through the cluster IDs
    306                for ( index = 0; index < numClusterIds; index++ )
   \   00019A   75..00       MOV     ?V2,#0x0
   \                     ??bindAddEntry_9:
   \   00019D   E5..         MOV     A,?V2
   \   00019F   C3           CLR     C
   \   0001A0   95..         SUBB    A,?V1
   \   0001A2   4003         JC      $+5
   \   0001A4   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
    307                {
    308                  // Found - is the cluster already defined?
    309                  if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
   \   0001A7                ; Setup parameters for call to function bindIsClusterIDinList
   \   0001A7   A8..         MOV     R0,?V2
   \   0001A9   7900         MOV     R1,#0x0
   \   0001AB   E8           MOV     A,R0
   \   0001AC   75F002       MOV     B,#0x2
   \   0001AF   A4           MUL     AB
   \   0001B0   C8           XCH     A,R0
   \   0001B1   AAF0         MOV     R2,B
   \   0001B3   75F000       MOV     B,#0x0
   \   0001B6   A4           MUL     AB
   \   0001B7   2A           ADD     A,R2
   \   0001B8   FA           MOV     R2,A
   \   0001B9   75F002       MOV     B,#0x2
   \   0001BC   E9           MOV     A,R1
   \   0001BD   A4           MUL     AB
   \   0001BE   2A           ADD     A,R2
   \   0001BF   F9           MOV     R1,A
   \   0001C0   E5..         MOV     A,?V8
   \   0001C2   28           ADD     A,R0
   \   0001C3   F582         MOV     DPL,A
   \   0001C5   E5..         MOV     A,?V9
   \   0001C7   39           ADDC    A,R1
   \   0001C8   F583         MOV     DPH,A
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   FC           MOV     R4,A
   \   0001CC   A3           INC     DPTR
   \   0001CD   E0           MOVX    A,@DPTR
   \   0001CE   FD           MOV     R5,A
   \   0001CF   EE           MOV     A,R6
   \   0001D0   FA           MOV     R2,A
   \   0001D1   EF           MOV     A,R7
   \   0001D2   FB           MOV     R3,A
   \   0001D3   12....       LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   0001D6   E9           MOV     A,R1
   \   0001D7   7036         JNZ     ??bindAddEntry_10
    310                  {
    311                    // Nope, add this cluster
    312                    if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
   \   0001D9                ; Setup parameters for call to function bindAddClusterIdToList
   \   0001D9   A8..         MOV     R0,?V2
   \   0001DB   7900         MOV     R1,#0x0
   \   0001DD   E8           MOV     A,R0
   \   0001DE   75F002       MOV     B,#0x2
   \   0001E1   A4           MUL     AB
   \   0001E2   C8           XCH     A,R0
   \   0001E3   AAF0         MOV     R2,B
   \   0001E5   75F000       MOV     B,#0x0
   \   0001E8   A4           MUL     AB
   \   0001E9   2A           ADD     A,R2
   \   0001EA   FA           MOV     R2,A
   \   0001EB   75F002       MOV     B,#0x2
   \   0001EE   E9           MOV     A,R1
   \   0001EF   A4           MUL     AB
   \   0001F0   2A           ADD     A,R2
   \   0001F1   F9           MOV     R1,A
   \   0001F2   E5..         MOV     A,?V8
   \   0001F4   28           ADD     A,R0
   \   0001F5   F582         MOV     DPL,A
   \   0001F7   E5..         MOV     A,?V9
   \   0001F9   39           ADDC    A,R1
   \   0001FA   F583         MOV     DPH,A
   \   0001FC   E0           MOVX    A,@DPTR
   \   0001FD   FC           MOV     R4,A
   \   0001FE   A3           INC     DPTR
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   FD           MOV     R5,A
   \   000201   EE           MOV     A,R6
   \   000202   FA           MOV     R2,A
   \   000203   EF           MOV     A,R7
   \   000204   FB           MOV     R3,A
   \   000205   12....       LCALL   `??bindAddClusterIdToList::?relay`; Banked call to: bindAddClusterIdToList
   \   000208   E9           MOV     A,R1
   \   000209   7004         JNZ     ??bindAddEntry_10
    313                    {
    314                      // Indicate error if cluster list was full
    315                      entry = NULL;
   \   00020B   7E00         MOV     R6,#0x0
   \   00020D   7F00         MOV     R7,#0x0
    316                    }
    317                  }
    318                }
   \                     ??bindAddEntry_10:
   \   00020F   05..         INC     ?V2
   \   000211   808A         SJMP    ??bindAddEntry_9
    319              }
    320              else
    321              {
    322                // Find an empty slot
    323                entry = bindFindEmpty();
   \                     ??bindAddEntry_8:
   \   000213                ; Setup parameters for call to function bindFindEmpty
   \   000213   12....       LCALL   `??bindFindEmpty::?relay`; Banked call to: bindFindEmpty
   \   000216   8A..         MOV     ?V4,R2
   \   000218   8B..         MOV     ?V5,R3
   \   00021A   AE..         MOV     R6,?V4
   \   00021C   AF..         MOV     R7,?V5
    324          
    325                // Check against the maximum number allowed
    326                if ( entry != NULL )
   \   00021E   EE           MOV     A,R6
   \   00021F   4F           ORL     A,R7
   \   000220   7003         JNZ     $+5
   \   000222   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
    327                {
    328                  // Add new entry
    329                  entry->srcEP         = fields.srcEP;
   \   000225   85..82       MOV     DPL,?XSP + 0
   \   000228   85..83       MOV     DPH,?XSP + 1
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   C0E0         PUSH    A
   \   00022E   8E82         MOV     DPL,R6
   \   000230   8F83         MOV     DPH,R7
   \   000232   D0E0         POP     A
   \   000234   F0           MOVX    @DPTR,A
    330                  entry->dstGroupMode  = fields.dstAddrMode;
   \   000235   7406         MOV     A,#0x6
   \   000237   12....       LCALL   ?XSTACK_DISP0_8
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   C0E0         PUSH    A
   \   00023D   8E82         MOV     DPL,R6
   \   00023F   8F83         MOV     DPH,R7
   \   000241   A3           INC     DPTR
   \   000242   D0E0         POP     A
   \   000244   F0           MOVX    @DPTR,A
    331                  entry->dstIdx        = fields.dstIndex;
   \   000245   7403         MOV     A,#0x3
   \   000247   12....       LCALL   ?XSTACK_DISP0_8
   \   00024A   E0           MOVX    A,@DPTR
   \   00024B   F8           MOV     R0,A
   \   00024C   A3           INC     DPTR
   \   00024D   E0           MOVX    A,@DPTR
   \   00024E   F9           MOV     R1,A
   \   00024F   8E82         MOV     DPL,R6
   \   000251   8F83         MOV     DPH,R7
   \   000253   A3           INC     DPTR
   \   000254   A3           INC     DPTR
   \   000255   E8           MOV     A,R0
   \   000256   F0           MOVX    @DPTR,A
   \   000257   A3           INC     DPTR
   \   000258   E9           MOV     A,R1
   \   000259   F0           MOVX    @DPTR,A
    332                  entry->dstEP         = fields.dstEP;
   \   00025A   7405         MOV     A,#0x5
   \   00025C   12....       LCALL   ?XSTACK_DISP0_8
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   C0E0         PUSH    A
   \   000262   8E82         MOV     DPL,R6
   \   000264   8F83         MOV     DPH,R7
   \   000266   A3           INC     DPTR
   \   000267   A3           INC     DPTR
   \   000268   A3           INC     DPTR
   \   000269   A3           INC     DPTR
   \   00026A   D0E0         POP     A
   \   00026C   F0           MOVX    @DPTR,A
    333          
    334                  if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
   \   00026D   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   000270   E4           CLR     A
   \   000271   93           MOVC    A,@A+DPTR
   \   000272   C3           CLR     C
   \   000273   95..         SUBB    A,?V1
   \   000275   5007         JNC     ??bindAddEntry_11
    335                  {
    336                    numClusterIds = gMAX_BINDING_CLUSTER_IDS;
   \   000277   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   00027A   E4           CLR     A
   \   00027B   93           MOVC    A,@A+DPTR
   \   00027C   F5..         MOV     ?V1,A
    337                  }
    338          
    339                  entry->numClusterIds = numClusterIds;
   \                     ??bindAddEntry_11:
   \   00027E   E5..         MOV     A,?V1
   \   000280   C0E0         PUSH    A
   \   000282   8E82         MOV     DPL,R6
   \   000284   8F83         MOV     DPH,R7
   \   000286   A3           INC     DPTR
   \   000287   A3           INC     DPTR
   \   000288   A3           INC     DPTR
   \   000289   A3           INC     DPTR
   \   00028A   A3           INC     DPTR
   \   00028B   D0E0         POP     A
   \   00028D   F0           MOVX    @DPTR,A
    340          
    341                  osal_memcpy( entry->clusterIdList,
    342                               clusterIds,
    343                               numClusterIds * sizeof(uint16) );
   \   00028E                ; Setup parameters for call to function osal_memcpy
   \   00028E   85....       MOV     ?V4,?V8
   \   000291   85....       MOV     ?V5,?V9
   \   000294   75..00       MOV     ?V6,#0x0
   \   000297   78..         MOV     R0,#?V4
   \   000299   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00029C   AC..         MOV     R4,?V1
   \   00029E   7D00         MOV     R5,#0x0
   \   0002A0   EC           MOV     A,R4
   \   0002A1   75F002       MOV     B,#0x2
   \   0002A4   A4           MUL     AB
   \   0002A5   CC           XCH     A,R4
   \   0002A6   A8F0         MOV     R0,B
   \   0002A8   75F000       MOV     B,#0x0
   \   0002AB   A4           MUL     AB
   \   0002AC   28           ADD     A,R0
   \   0002AD   F8           MOV     R0,A
   \   0002AE   75F002       MOV     B,#0x2
   \   0002B1   ED           MOV     A,R5
   \   0002B2   A4           MUL     AB
   \   0002B3   28           ADD     A,R0
   \   0002B4   FD           MOV     R5,A
   \   0002B5   EE           MOV     A,R6
   \   0002B6   2406         ADD     A,#0x6
   \   0002B8   FA           MOV     R2,A
   \   0002B9   E4           CLR     A
   \   0002BA   3F           ADDC    A,R7
   \   0002BB   FB           MOV     R3,A
   \   0002BC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002BF   7403         MOV     A,#0x3
   \   0002C1   12....       LCALL   ?DEALLOC_XSTACK8
    344                }
    345              }
    346            }
    347          
    348            return entry;
   \                     ??bindAddEntry_3:
   \   0002C4   EE           MOV     A,R6
   \   0002C5   FA           MOV     R2,A
   \   0002C6   EF           MOV     A,R7
   \   0002C7   FB           MOV     R3,A
   \   0002C8   740A         MOV     A,#0xa
   \   0002CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002CD   7F0C         MOV     R7,#0xc
   \   0002CF   02....       LJMP    ?BANKED_LEAVE_XDATA
    349          }
    350          
    351          /*********************************************************************
    352           * @fn      bindRemoveEntry
    353           *
    354           * @brief   Removes a binding table entry.
    355           *
    356           * @param   pBind - pointer to binding table entry to delete
    357           *
    358           * @return  TRUE if Removed, FALSE if not
    359           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    360          byte bindRemoveEntry( BindingEntry_t *pBind )
   \                     bindRemoveEntry:
    361          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    362            osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   FC           MOV     R4,A
   \   00000F   7401         MOV     A,#0x1
   \   000011   93           MOVC    A,@A+DPTR
   \   000012   FD           MOV     R5,A
   \   000013   79FF         MOV     R1,#-0x1
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    363            return ( TRUE );
   \   00001C   7901         MOV     R1,#0x1
   \   00001E   7F01         MOV     R7,#0x1
   \   000020   02....       LJMP    ?BANKED_LEAVE_XDATA
    364          }
    365          
    366          /*********************************************************************
    367           * @fn      bindIsClusterIDinList()
    368           *
    369           * @brief   Is the clusterID in the clusterID list?
    370           *
    371           * @param   enter - binding table entry
    372           * @param   clusterId  - Cluster ID to look for
    373           *
    374           * @return  TRUE if found, FALSE if not found
    375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindIsClusterIDinList:
    377          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    378            uint8 x;
    379          
    380            if ( entry != NULL )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6049         JZ      ??bindIsClusterIDinList_0
    381            {
    382              for ( x = 0; x < entry->numClusterIds; x++ )
   \   000009   7E00         MOV     R6,#0x0
   \                     ??bindIsClusterIDinList_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   EE           MOV     A,R6
   \   000017   C3           CLR     C
   \   000018   98           SUBB    A,R0
   \   000019   5037         JNC     ??bindIsClusterIDinList_0
    383              {
    384                if ( entry->clusterIdList[x] == clusterId )
   \   00001B   EE           MOV     A,R6
   \   00001C   F8           MOV     R0,A
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   E8           MOV     A,R0
   \   000020   75F002       MOV     B,#0x2
   \   000023   A4           MUL     AB
   \   000024   C8           XCH     A,R0
   \   000025   AFF0         MOV     R7,B
   \   000027   75F000       MOV     B,#0x0
   \   00002A   A4           MUL     AB
   \   00002B   2F           ADD     A,R7
   \   00002C   FF           MOV     R7,A
   \   00002D   75F002       MOV     B,#0x2
   \   000030   E9           MOV     A,R1
   \   000031   A4           MUL     AB
   \   000032   2F           ADD     A,R7
   \   000033   F9           MOV     R1,A
   \   000034   EA           MOV     A,R2
   \   000035   28           ADD     A,R0
   \   000036   F582         MOV     DPL,A
   \   000038   EB           MOV     A,R3
   \   000039   39           ADDC    A,R1
   \   00003A   F583         MOV     DPH,A
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6C           XRL     A,R4
   \   000044   7003         JNZ     ??bindIsClusterIDinList_2
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6D           XRL     A,R5
   \                     ??bindIsClusterIDinList_2:
   \   000049   7004         JNZ     ??bindIsClusterIDinList_3
    385                {
    386                  return ( TRUE );
   \   00004B   7901         MOV     R1,#0x1
   \   00004D   8005         SJMP    ??bindIsClusterIDinList_4
    387                }
    388              }
   \                     ??bindIsClusterIDinList_3:
   \   00004F   0E           INC     R6
   \   000050   80B9         SJMP    ??bindIsClusterIDinList_1
    389            }
    390          
    391            return ( FALSE );
   \                     ??bindIsClusterIDinList_0:
   \   000052   7900         MOV     R1,#0x0
   \                     ??bindIsClusterIDinList_4:
   \   000054   7F01         MOV     R7,#0x1
   \   000056   02....       LJMP    ?BANKED_LEAVE_XDATA
    392          }
    393          
    394          /*********************************************************************
    395           * @fn      bindRemoveClusterIdFromList()
    396           *
    397           * @brief   Removes a ClusterID from a list of ClusterIDs.
    398           *
    399           * @param   enter - binding table entry
    400           * @param   clusterId  - Cluster ID to look for
    401           *
    402           * @return  TRUE if there are at least 1 clusterID left, FALSE if none
    403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    404          byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindRemoveClusterIdFromList:
    405          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    406            byte x;
    407            uint16 *listPtr;
    408            byte numIds;
    409          
    410            if ( entry )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   7003         JNZ     $+5
   \   000009   02....       LJMP    ??bindRemoveClusterIdFromList_0 & 0xFFFF
    411            {
    412              if ( entry->numClusterIds > 0 )
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??bindRemoveClusterIdFromList_0 & 0xFFFF
    413              {
    414                listPtr = entry->clusterIdList;
   \   00001B   EA           MOV     A,R2
   \   00001C   2406         ADD     A,#0x6
   \   00001E   F8           MOV     R0,A
   \   00001F   E4           CLR     A
   \   000020   3B           ADDC    A,R3
   \   000021   F9           MOV     R1,A
   \   000022   E8           MOV     A,R0
   \   000023   FE           MOV     R6,A
   \   000024   E9           MOV     A,R1
   \   000025   FF           MOV     R7,A
    415                numIds = entry->numClusterIds;
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V1,A
    416          
    417                // Copy the new list over
    418                for ( x = 0; x < numIds; x++ )
   \   000032   75..00       MOV     ?V0,#0x0
   \                     ??bindRemoveClusterIdFromList_1:
   \   000035   E5..         MOV     A,?V0
   \   000037   C3           CLR     C
   \   000038   95..         SUBB    A,?V1
   \   00003A   4003         JC      $+5
   \   00003C   02....       LJMP    ??bindRemoveClusterIdFromList_0 & 0xFFFF
    419                {
    420                  if ( entry->clusterIdList[x] != clusterId )
   \   00003F   A8..         MOV     R0,?V0
   \   000041   7900         MOV     R1,#0x0
   \   000043   E8           MOV     A,R0
   \   000044   75F002       MOV     B,#0x2
   \   000047   A4           MUL     AB
   \   000048   C8           XCH     A,R0
   \   000049   85F0..       MOV     ?V2,B
   \   00004C   75F000       MOV     B,#0x0
   \   00004F   A4           MUL     AB
   \   000050   25..         ADD     A,?V2
   \   000052   F5..         MOV     ?V2,A
   \   000054   75F002       MOV     B,#0x2
   \   000057   E9           MOV     A,R1
   \   000058   A4           MUL     AB
   \   000059   25..         ADD     A,?V2
   \   00005B   F9           MOV     R1,A
   \   00005C   EA           MOV     A,R2
   \   00005D   28           ADD     A,R0
   \   00005E   F582         MOV     DPL,A
   \   000060   EB           MOV     A,R3
   \   000061   39           ADDC    A,R1
   \   000062   F583         MOV     DPH,A
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6C           XRL     A,R4
   \   00006C   7003         JNZ     ??bindRemoveClusterIdFromList_2
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   6D           XRL     A,R5
   \                     ??bindRemoveClusterIdFromList_2:
   \   000071   6046         JZ      ??bindRemoveClusterIdFromList_3
    421                  {
    422                    *listPtr++ = entry->clusterIdList[x];
   \   000073   A8..         MOV     R0,?V0
   \   000075   7900         MOV     R1,#0x0
   \   000077   E8           MOV     A,R0
   \   000078   75F002       MOV     B,#0x2
   \   00007B   A4           MUL     AB
   \   00007C   C8           XCH     A,R0
   \   00007D   85F0..       MOV     ?V2,B
   \   000080   75F000       MOV     B,#0x0
   \   000083   A4           MUL     AB
   \   000084   25..         ADD     A,?V2
   \   000086   F5..         MOV     ?V2,A
   \   000088   75F002       MOV     B,#0x2
   \   00008B   E9           MOV     A,R1
   \   00008C   A4           MUL     AB
   \   00008D   25..         ADD     A,?V2
   \   00008F   F9           MOV     R1,A
   \   000090   EA           MOV     A,R2
   \   000091   28           ADD     A,R0
   \   000092   F582         MOV     DPL,A
   \   000094   EB           MOV     A,R3
   \   000095   39           ADDC    A,R1
   \   000096   F583         MOV     DPH,A
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F8           MOV     R0,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F9           MOV     R1,A
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   E8           MOV     A,R0
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E9           MOV     A,R1
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   EE           MOV     A,R6
   \   0000AD   2402         ADD     A,#0x2
   \   0000AF   F8           MOV     R0,A
   \   0000B0   E4           CLR     A
   \   0000B1   3F           ADDC    A,R7
   \   0000B2   F9           MOV     R1,A
   \   0000B3   E8           MOV     A,R0
   \   0000B4   FE           MOV     R6,A
   \   0000B5   E9           MOV     A,R1
   \   0000B6   FF           MOV     R7,A
   \   0000B7   8019         SJMP    ??bindRemoveClusterIdFromList_4
    423                  }
    424                  else
    425                  {
    426                    entry->numClusterIds--;
   \                     ??bindRemoveClusterIdFromList_3:
   \   0000B9   8A82         MOV     DPL,R2
   \   0000BB   8B83         MOV     DPH,R3
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   24FF         ADD     A,#-0x1
   \   0000C5   F0           MOVX    @DPTR,A
    427                    if ( entry->numClusterIds == 0 )
   \   0000C6   8A82         MOV     DPL,R2
   \   0000C8   8B83         MOV     DPH,R3
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   6005         JZ      ??bindRemoveClusterIdFromList_0
    428                    {
    429                      break;
    430                    }
    431                  }
    432                }
   \                     ??bindRemoveClusterIdFromList_4:
   \   0000D2   05..         INC     ?V0
   \   0000D4   02....       LJMP    ??bindRemoveClusterIdFromList_1 & 0xFFFF
    433              }
    434            }
    435          
    436            if ( entry && (entry->numClusterIds > 0) )
   \                     ??bindRemoveClusterIdFromList_0:
   \   0000D7   EA           MOV     A,R2
   \   0000D8   4B           ORL     A,R3
   \   0000D9   6010         JZ      ??bindRemoveClusterIdFromList_5
   \   0000DB   8A82         MOV     DPL,R2
   \   0000DD   8B83         MOV     DPH,R3
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   6004         JZ      ??bindRemoveClusterIdFromList_5
    437            {
    438              return ( TRUE );
   \   0000E7   7901         MOV     R1,#0x1
   \   0000E9   8002         SJMP    ??bindRemoveClusterIdFromList_6
    439            }
    440            else
    441            {
    442              return ( FALSE );
   \                     ??bindRemoveClusterIdFromList_5:
   \   0000EB   7900         MOV     R1,#0x0
   \                     ??bindRemoveClusterIdFromList_6:
   \   0000ED   7F03         MOV     R7,#0x3
   \   0000EF   02....       LJMP    ?BANKED_LEAVE_XDATA
    443            }
    444          }
    445          
    446          /*********************************************************************
    447           * @fn      bindAddClusterIdToList()
    448           *
    449           * @brief   Adds a ClusterID to a list of ClusterIDs.
    450           *
    451           * @param   enter - binding table entry
    452           * @param   clusterId  - Cluster ID to Add
    453           *
    454           * @return  TRUE if Added, FALSE if not
    455           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    456          byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindAddClusterIdToList:
    457          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    458            if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   605A         JZ      ??bindAddClusterIdToList_0
   \   000009   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C3           CLR     C
   \   00001A   98           SUBB    A,R0
   \   00001B   5046         JNC     ??bindAddClusterIdToList_0
    459            {
    460              // Add the new one
    461              entry->clusterIdList[entry->numClusterIds] = clusterId;
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   7900         MOV     R1,#0x0
   \   00002A   E8           MOV     A,R0
   \   00002B   75F002       MOV     B,#0x2
   \   00002E   A4           MUL     AB
   \   00002F   C8           XCH     A,R0
   \   000030   AEF0         MOV     R6,B
   \   000032   75F000       MOV     B,#0x0
   \   000035   A4           MUL     AB
   \   000036   2E           ADD     A,R6
   \   000037   FE           MOV     R6,A
   \   000038   75F002       MOV     B,#0x2
   \   00003B   E9           MOV     A,R1
   \   00003C   A4           MUL     AB
   \   00003D   2E           ADD     A,R6
   \   00003E   F9           MOV     R1,A
   \   00003F   EA           MOV     A,R2
   \   000040   28           ADD     A,R0
   \   000041   F582         MOV     DPL,A
   \   000043   EB           MOV     A,R3
   \   000044   39           ADDC    A,R1
   \   000045   F583         MOV     DPH,A
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   EC           MOV     A,R4
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   ED           MOV     A,R5
   \   000051   F0           MOVX    @DPTR,A
    462              entry->numClusterIds++;
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   2401         ADD     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
    463              return ( TRUE );
   \   00005F   7901         MOV     R1,#0x1
   \   000061   8002         SJMP    ??bindAddClusterIdToList_1
    464            }
    465            return ( FALSE );
   \                     ??bindAddClusterIdToList_0:
   \   000063   7900         MOV     R1,#0x0
   \                     ??bindAddClusterIdToList_1:
   \   000065   7F01         MOV     R7,#0x1
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA
    466          }
    467          
    468          /*********************************************************************
    469           * @fn      bindFindExisting
    470           *
    471           * @brief   Finds an existing src/epint to dst/epint bind record
    472           *
    473           * @param   srcAddr - Source address
    474           * @param   srcEpInt - Source Endpoint/Interface
    475           * @param   dstAddr - Destination address
    476           * @param   dstEpInt - Destination Endpoint/Interface
    477           *
    478           * @return  pointer to existing entry or NULL
    479           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    480          BindingEntry_t *bindFindExisting( byte srcEpInt,
   \                     bindFindExisting:
    481                                            zAddrType_t *dstAddr, byte dstEpInt )
    482          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V3,R4
    483            uint16 dstIdx;
    484            bindTableIndex_t x;
    485          
    486            // Find the records in the assoc list
    487            if ( dstAddr->addrMode == AddrGroup )
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6401         XRL     A,#0x1
   \   00001C   700D         JNZ     ??bindFindExisting_0
    488            {
    489              dstIdx = dstAddr->addr.shortAddr;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V1,A
   \   000029   8011         SJMP    ??bindFindExisting_1
    490            }
    491            else
    492            {
    493              dstIdx = bindingAddrMgsHelperFind( dstAddr );
   \                     ??bindFindExisting_0:
   \   00002B                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   00002B   EE           MOV     A,R6
   \   00002C   FA           MOV     R2,A
   \   00002D   EF           MOV     A,R7
   \   00002E   FB           MOV     R3,A
   \   00002F   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000032   8A..         MOV     ?V6,R2
   \   000034   8B..         MOV     ?V7,R3
   \   000036   85....       MOV     ?V0,?V6
   \   000039   85....       MOV     ?V1,?V7
    494            }
    495          
    496            if ( dstIdx == INVALID_NODE_ADDR )
   \                     ??bindFindExisting_1:
   \   00003C   74FE         MOV     A,#-0x2
   \   00003E   65..         XRL     A,?V0
   \   000040   7004         JNZ     ??bindFindExisting_2
   \   000042   74FF         MOV     A,#-0x1
   \   000044   65..         XRL     A,?V1
   \                     ??bindFindExisting_2:
   \   000046   7007         JNZ     ??bindFindExisting_3
    497            {
    498              return ( (BindingEntry_t *)NULL );
   \   000048   7A00         MOV     R2,#0x0
   \   00004A   7B00         MOV     R3,#0x0
   \   00004C   02....       LJMP    ??bindFindExisting_4 & 0xFFFF
    499            }
    500          
    501            // Start at the beginning
    502            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \                     ??bindFindExisting_3:
   \   00004F   75..00       MOV     ?V4,#0x0
   \                     ??bindFindExisting_5:
   \   000052   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000055   E4           CLR     A
   \   000056   93           MOVC    A,@A+DPTR
   \   000057   F8           MOV     R0,A
   \   000058   E5..         MOV     A,?V4
   \   00005A   C3           CLR     C
   \   00005B   98           SUBB    A,R0
   \   00005C   4003         JC      $+5
   \   00005E   02....       LJMP    ??bindFindExisting_6 & 0xFFFF
    503            {
    504              if ( (BindingTable[x].srcEP == srcEpInt) )
   \   000061   A8..         MOV     R0,?V4
   \   000063   7900         MOV     R1,#0x0
   \   000065   E8           MOV     A,R0
   \   000066   75F00E       MOV     B,#0xe
   \   000069   A4           MUL     AB
   \   00006A   C8           XCH     A,R0
   \   00006B   AAF0         MOV     R2,B
   \   00006D   75F000       MOV     B,#0x0
   \   000070   A4           MUL     AB
   \   000071   2A           ADD     A,R2
   \   000072   FA           MOV     R2,A
   \   000073   75F00E       MOV     B,#0xe
   \   000076   E9           MOV     A,R1
   \   000077   A4           MUL     AB
   \   000078   2A           ADD     A,R2
   \   000079   F9           MOV     R1,A
   \   00007A   74..         MOV     A,#BindingTable & 0xff
   \   00007C   28           ADD     A,R0
   \   00007D   F582         MOV     DPL,A
   \   00007F   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000081   39           ADDC    A,R1
   \   000082   F583         MOV     DPH,A
   \   000084   E0           MOVX    A,@DPTR
   \   000085   65..         XRL     A,?V2
   \   000087   6003         JZ      $+5
   \   000089   02....       LJMP    ??bindFindExisting_7 & 0xFFFF
    505              {
    506                if ( ((dstAddr->addrMode == AddrGroup)
    507                        && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    508                        && (dstIdx == BindingTable[x].dstIdx))
    509                   || ((dstAddr->addrMode != AddrGroup)
    510                       && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    511                       && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   6401         XRL     A,#0x1
   \   00009B   7059         JNZ     ??bindFindExisting_8
   \   00009D   A8..         MOV     R0,?V4
   \   00009F   7900         MOV     R1,#0x0
   \   0000A1   E8           MOV     A,R0
   \   0000A2   75F00E       MOV     B,#0xe
   \   0000A5   A4           MUL     AB
   \   0000A6   C8           XCH     A,R0
   \   0000A7   AAF0         MOV     R2,B
   \   0000A9   75F000       MOV     B,#0x0
   \   0000AC   A4           MUL     AB
   \   0000AD   2A           ADD     A,R2
   \   0000AE   FA           MOV     R2,A
   \   0000AF   75F00E       MOV     B,#0xe
   \   0000B2   E9           MOV     A,R1
   \   0000B3   A4           MUL     AB
   \   0000B4   2A           ADD     A,R2
   \   0000B5   F9           MOV     R1,A
   \   0000B6   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   0000B8   28           ADD     A,R0
   \   0000B9   F582         MOV     DPL,A
   \   0000BB   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   0000BD   39           ADDC    A,R1
   \   0000BE   F583         MOV     DPH,A
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   6401         XRL     A,#0x1
   \   0000C3   7031         JNZ     ??bindFindExisting_8
   \   0000C5   A8..         MOV     R0,?V4
   \   0000C7   7900         MOV     R1,#0x0
   \   0000C9   E8           MOV     A,R0
   \   0000CA   75F00E       MOV     B,#0xe
   \   0000CD   A4           MUL     AB
   \   0000CE   C8           XCH     A,R0
   \   0000CF   AAF0         MOV     R2,B
   \   0000D1   75F000       MOV     B,#0x0
   \   0000D4   A4           MUL     AB
   \   0000D5   2A           ADD     A,R2
   \   0000D6   FA           MOV     R2,A
   \   0000D7   75F00E       MOV     B,#0xe
   \   0000DA   E9           MOV     A,R1
   \   0000DB   A4           MUL     AB
   \   0000DC   2A           ADD     A,R2
   \   0000DD   F9           MOV     R1,A
   \   0000DE   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   0000E0   28           ADD     A,R0
   \   0000E1   F582         MOV     DPL,A
   \   0000E3   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   0000E5   39           ADDC    A,R1
   \   0000E6   F583         MOV     DPH,A
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   65..         XRL     A,?V0
   \   0000EB   7004         JNZ     ??bindFindExisting_9
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   65..         XRL     A,?V1
   \                     ??bindFindExisting_9:
   \   0000F1   7003         JNZ     $+5
   \   0000F3   02....       LJMP    ??bindFindExisting_10 & 0xFFFF
   \                     ??bindFindExisting_8:
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   6401         XRL     A,#0x1
   \   000105   7003         JNZ     $+5
   \   000107   02....       LJMP    ??bindFindExisting_7 & 0xFFFF
   \   00010A   A8..         MOV     R0,?V4
   \   00010C   7900         MOV     R1,#0x0
   \   00010E   E8           MOV     A,R0
   \   00010F   75F00E       MOV     B,#0xe
   \   000112   A4           MUL     AB
   \   000113   C8           XCH     A,R0
   \   000114   AAF0         MOV     R2,B
   \   000116   75F000       MOV     B,#0x0
   \   000119   A4           MUL     AB
   \   00011A   2A           ADD     A,R2
   \   00011B   FA           MOV     R2,A
   \   00011C   75F00E       MOV     B,#0xe
   \   00011F   E9           MOV     A,R1
   \   000120   A4           MUL     AB
   \   000121   2A           ADD     A,R2
   \   000122   F9           MOV     R1,A
   \   000123   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   000125   28           ADD     A,R0
   \   000126   F582         MOV     DPL,A
   \   000128   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   00012A   39           ADDC    A,R1
   \   00012B   F583         MOV     DPH,A
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   7079         JNZ     ??bindFindExisting_7
   \   000130   A8..         MOV     R0,?V4
   \   000132   7900         MOV     R1,#0x0
   \   000134   E8           MOV     A,R0
   \   000135   75F00E       MOV     B,#0xe
   \   000138   A4           MUL     AB
   \   000139   C8           XCH     A,R0
   \   00013A   AAF0         MOV     R2,B
   \   00013C   75F000       MOV     B,#0x0
   \   00013F   A4           MUL     AB
   \   000140   2A           ADD     A,R2
   \   000141   FA           MOV     R2,A
   \   000142   75F00E       MOV     B,#0xe
   \   000145   E9           MOV     A,R1
   \   000146   A4           MUL     AB
   \   000147   2A           ADD     A,R2
   \   000148   F9           MOV     R1,A
   \   000149   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   00014B   28           ADD     A,R0
   \   00014C   F582         MOV     DPL,A
   \   00014E   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   000150   39           ADDC    A,R1
   \   000151   F583         MOV     DPH,A
   \   000153   E0           MOVX    A,@DPTR
   \   000154   65..         XRL     A,?V0
   \   000156   7004         JNZ     ??bindFindExisting_11
   \   000158   A3           INC     DPTR
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   65..         XRL     A,?V1
   \                     ??bindFindExisting_11:
   \   00015C   704B         JNZ     ??bindFindExisting_7
   \   00015E   A8..         MOV     R0,?V4
   \   000160   7900         MOV     R1,#0x0
   \   000162   E8           MOV     A,R0
   \   000163   75F00E       MOV     B,#0xe
   \   000166   A4           MUL     AB
   \   000167   C8           XCH     A,R0
   \   000168   AAF0         MOV     R2,B
   \   00016A   75F000       MOV     B,#0x0
   \   00016D   A4           MUL     AB
   \   00016E   2A           ADD     A,R2
   \   00016F   FA           MOV     R2,A
   \   000170   75F00E       MOV     B,#0xe
   \   000173   E9           MOV     A,R1
   \   000174   A4           MUL     AB
   \   000175   2A           ADD     A,R2
   \   000176   F9           MOV     R1,A
   \   000177   74..         MOV     A,#(BindingTable + 4) & 0xff
   \   000179   28           ADD     A,R0
   \   00017A   F582         MOV     DPL,A
   \   00017C   74..         MOV     A,#((BindingTable + 4) >> 8) & 0xff
   \   00017E   39           ADDC    A,R1
   \   00017F   F583         MOV     DPH,A
   \   000181   E0           MOVX    A,@DPTR
   \   000182   65..         XRL     A,?V3
   \   000184   7023         JNZ     ??bindFindExisting_7
    512                {
    513                  return ( &BindingTable[x] );
   \                     ??bindFindExisting_10:
   \   000186   A8..         MOV     R0,?V4
   \   000188   7900         MOV     R1,#0x0
   \   00018A   E8           MOV     A,R0
   \   00018B   75F00E       MOV     B,#0xe
   \   00018E   A4           MUL     AB
   \   00018F   C8           XCH     A,R0
   \   000190   AAF0         MOV     R2,B
   \   000192   75F000       MOV     B,#0x0
   \   000195   A4           MUL     AB
   \   000196   2A           ADD     A,R2
   \   000197   FA           MOV     R2,A
   \   000198   75F00E       MOV     B,#0xe
   \   00019B   E9           MOV     A,R1
   \   00019C   A4           MUL     AB
   \   00019D   2A           ADD     A,R2
   \   00019E   F9           MOV     R1,A
   \   00019F   74..         MOV     A,#BindingTable & 0xff
   \   0001A1   28           ADD     A,R0
   \   0001A2   FA           MOV     R2,A
   \   0001A3   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0001A5   39           ADDC    A,R1
   \   0001A6   FB           MOV     R3,A
   \   0001A7   8009         SJMP    ??bindFindExisting_4
    514                }
    515              }
    516            }
   \                     ??bindFindExisting_7:
   \   0001A9   05..         INC     ?V4
   \   0001AB   02....       LJMP    ??bindFindExisting_5 & 0xFFFF
    517          
    518            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindExisting_6:
   \   0001AE   7A00         MOV     R2,#0x0
   \   0001B0   7B00         MOV     R3,#0x0
   \                     ??bindFindExisting_4:
   \   0001B2   7F08         MOV     R7,#0x8
   \   0001B4   02....       LJMP    ?BANKED_LEAVE_XDATA
    519          }
    520          
    521          /*********************************************************************
    522           * @fn       bindRemoveDev()
    523           *
    524           * @brief
    525           *
    526           *   Remove all bind(s) entries associated to a device address (destination).
    527           *   Updates binding table.
    528           *
    529           * @param   Addr - address of device to be removed from Binding Table
    530           *
    531           * @return  none
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          void bindRemoveDev( zAddrType_t *Addr )
   \                     bindRemoveDev:
    534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    535            uint16 idx;
    536            bindTableIndex_t x;
    537          
    538            if ( Addr->addrMode == AddrGroup )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6401         XRL     A,#0x1
   \   000018   700D         JNZ     ??bindRemoveDev_0
    539            {
    540              idx = Addr->addr.shortAddr;
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V1,A
   \   000025   8011         SJMP    ??bindRemoveDev_1
    541            }
    542            else
    543            {
    544              idx = bindingAddrMgsHelperFind( Addr );
   \                     ??bindRemoveDev_0:
   \   000027                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   00002E   8A..         MOV     ?V4,R2
   \   000030   8B..         MOV     ?V5,R3
   \   000032   85....       MOV     ?V0,?V4
   \   000035   85....       MOV     ?V1,?V5
    545            }
    546          
    547            if ( idx == INVALID_NODE_ADDR )
   \                     ??bindRemoveDev_1:
   \   000038   74FE         MOV     A,#-0x2
   \   00003A   65..         XRL     A,?V0
   \   00003C   7004         JNZ     ??bindRemoveDev_2
   \   00003E   74FF         MOV     A,#-0x1
   \   000040   65..         XRL     A,?V1
   \                     ??bindRemoveDev_2:
   \   000042   7003         JNZ     $+5
   \   000044   02....       LJMP    ??bindRemoveDev_3 & 0xFFFF
    548            {
    549              return;
    550            }
    551          
    552            // Removes all the entries that match the destination Address/Index
    553            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000047   75..00       MOV     ?V2,#0x0
   \                     ??bindRemoveDev_4:
   \   00004A   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00004D   E4           CLR     A
   \   00004E   93           MOVC    A,@A+DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   E5..         MOV     A,?V2
   \   000052   C3           CLR     C
   \   000053   98           SUBB    A,R0
   \   000054   4003         JC      $+5
   \   000056   02....       LJMP    ??bindRemoveDev_5 & 0xFFFF
    554            {
    555              if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    556                                                   && (BindingTable[x].dstIdx == idx) ) ||
    557                   ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    558                                                   && (BindingTable[x].dstIdx == idx) ) )
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   6401         XRL     A,#0x1
   \   000068   7056         JNZ     ??bindRemoveDev_6
   \   00006A   A8..         MOV     R0,?V2
   \   00006C   7900         MOV     R1,#0x0
   \   00006E   E8           MOV     A,R0
   \   00006F   75F00E       MOV     B,#0xe
   \   000072   A4           MUL     AB
   \   000073   C8           XCH     A,R0
   \   000074   AAF0         MOV     R2,B
   \   000076   75F000       MOV     B,#0x0
   \   000079   A4           MUL     AB
   \   00007A   2A           ADD     A,R2
   \   00007B   FA           MOV     R2,A
   \   00007C   75F00E       MOV     B,#0xe
   \   00007F   E9           MOV     A,R1
   \   000080   A4           MUL     AB
   \   000081   2A           ADD     A,R2
   \   000082   F9           MOV     R1,A
   \   000083   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   000085   28           ADD     A,R0
   \   000086   F582         MOV     DPL,A
   \   000088   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   00008A   39           ADDC    A,R1
   \   00008B   F583         MOV     DPH,A
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   6401         XRL     A,#0x1
   \   000090   702E         JNZ     ??bindRemoveDev_6
   \   000092   A8..         MOV     R0,?V2
   \   000094   7900         MOV     R1,#0x0
   \   000096   E8           MOV     A,R0
   \   000097   75F00E       MOV     B,#0xe
   \   00009A   A4           MUL     AB
   \   00009B   C8           XCH     A,R0
   \   00009C   AAF0         MOV     R2,B
   \   00009E   75F000       MOV     B,#0x0
   \   0000A1   A4           MUL     AB
   \   0000A2   2A           ADD     A,R2
   \   0000A3   FA           MOV     R2,A
   \   0000A4   75F00E       MOV     B,#0xe
   \   0000A7   E9           MOV     A,R1
   \   0000A8   A4           MUL     AB
   \   0000A9   2A           ADD     A,R2
   \   0000AA   F9           MOV     R1,A
   \   0000AB   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   0000AD   28           ADD     A,R0
   \   0000AE   F582         MOV     DPL,A
   \   0000B0   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   0000B2   39           ADDC    A,R1
   \   0000B3   F583         MOV     DPH,A
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   65..         XRL     A,?V0
   \   0000B8   7004         JNZ     ??bindRemoveDev_7
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   65..         XRL     A,?V1
   \                     ??bindRemoveDev_7:
   \   0000BE   6065         JZ      ??bindRemoveDev_8
   \                     ??bindRemoveDev_6:
   \   0000C0   8E82         MOV     DPL,R6
   \   0000C2   8F83         MOV     DPH,R7
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   6401         XRL     A,#0x1
   \   0000CF   6079         JZ      ??bindRemoveDev_9
   \   0000D1   A8..         MOV     R0,?V2
   \   0000D3   7900         MOV     R1,#0x0
   \   0000D5   E8           MOV     A,R0
   \   0000D6   75F00E       MOV     B,#0xe
   \   0000D9   A4           MUL     AB
   \   0000DA   C8           XCH     A,R0
   \   0000DB   AAF0         MOV     R2,B
   \   0000DD   75F000       MOV     B,#0x0
   \   0000E0   A4           MUL     AB
   \   0000E1   2A           ADD     A,R2
   \   0000E2   FA           MOV     R2,A
   \   0000E3   75F00E       MOV     B,#0xe
   \   0000E6   E9           MOV     A,R1
   \   0000E7   A4           MUL     AB
   \   0000E8   2A           ADD     A,R2
   \   0000E9   F9           MOV     R1,A
   \   0000EA   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   0000EC   28           ADD     A,R0
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   0000F1   39           ADDC    A,R1
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   7053         JNZ     ??bindRemoveDev_9
   \   0000F7   A8..         MOV     R0,?V2
   \   0000F9   7900         MOV     R1,#0x0
   \   0000FB   E8           MOV     A,R0
   \   0000FC   75F00E       MOV     B,#0xe
   \   0000FF   A4           MUL     AB
   \   000100   C8           XCH     A,R0
   \   000101   AAF0         MOV     R2,B
   \   000103   75F000       MOV     B,#0x0
   \   000106   A4           MUL     AB
   \   000107   2A           ADD     A,R2
   \   000108   FA           MOV     R2,A
   \   000109   75F00E       MOV     B,#0xe
   \   00010C   E9           MOV     A,R1
   \   00010D   A4           MUL     AB
   \   00010E   2A           ADD     A,R2
   \   00010F   F9           MOV     R1,A
   \   000110   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   000112   28           ADD     A,R0
   \   000113   F582         MOV     DPL,A
   \   000115   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   000117   39           ADDC    A,R1
   \   000118   F583         MOV     DPH,A
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   65..         XRL     A,?V0
   \   00011D   7004         JNZ     ??bindRemoveDev_10
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   65..         XRL     A,?V1
   \                     ??bindRemoveDev_10:
   \   000123   7025         JNZ     ??bindRemoveDev_9
    559              {
    560                bindRemoveEntry( &BindingTable[x] );
   \                     ??bindRemoveDev_8:
   \   000125                ; Setup parameters for call to function bindRemoveEntry
   \   000125   A8..         MOV     R0,?V2
   \   000127   7900         MOV     R1,#0x0
   \   000129   E8           MOV     A,R0
   \   00012A   75F00E       MOV     B,#0xe
   \   00012D   A4           MUL     AB
   \   00012E   C8           XCH     A,R0
   \   00012F   AAF0         MOV     R2,B
   \   000131   75F000       MOV     B,#0x0
   \   000134   A4           MUL     AB
   \   000135   2A           ADD     A,R2
   \   000136   FA           MOV     R2,A
   \   000137   75F00E       MOV     B,#0xe
   \   00013A   E9           MOV     A,R1
   \   00013B   A4           MUL     AB
   \   00013C   2A           ADD     A,R2
   \   00013D   F9           MOV     R1,A
   \   00013E   74..         MOV     A,#BindingTable & 0xff
   \   000140   28           ADD     A,R0
   \   000141   FA           MOV     R2,A
   \   000142   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000144   39           ADDC    A,R1
   \   000145   FB           MOV     R3,A
   \   000146   12....       LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
   \   000149   E9           MOV     A,R1
    561              }
    562            }
   \                     ??bindRemoveDev_9:
   \   00014A   05..         INC     ?V2
   \   00014C   02....       LJMP    ??bindRemoveDev_4 & 0xFFFF
    563          
    564            // If this is the last Bind Entry for that idx then clear BINDING
    565            // user from Address Manager
    566            bindAddressClear( idx );
   \                     ??bindRemoveDev_5:
   \   00014F                ; Setup parameters for call to function bindAddressClear
   \   00014F   AA..         MOV     R2,?V0
   \   000151   AB..         MOV     R3,?V1
   \   000153   12....       LCALL   `??bindAddressClear::?relay`; Banked call to: bindAddressClear
    567          }
   \                     ??bindRemoveDev_3:
   \   000156   7F06         MOV     R7,#0x6
   \   000158   02....       LJMP    ?BANKED_LEAVE_XDATA
    568          
    569          /*********************************************************************
    570           * @fn       bindRemoveSrcDev()
    571           *
    572           * @brief
    573           *
    574           *   Remove binds(s) associated to device address (source).
    575           *   Updates binding table.
    576           *
    577           * @param   srcAddr - address of device
    578           * @param   ep - endpoint to remove, 0xFF is all endpoints
    579           *
    580           * @return  none
    581           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    582          void bindRemoveSrcDev( uint8 ep )
   \                     bindRemoveSrcDev:
    583          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
    584            bindTableIndex_t x;
    585          
    586            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000007   75..00       MOV     ?V0,#0x0
   \                     ??bindRemoveSrcDev_0:
   \   00000A   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000D   E4           CLR     A
   \   00000E   93           MOVC    A,@A+DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   E5..         MOV     A,?V0
   \   000012   C3           CLR     C
   \   000013   98           SUBB    A,R0
   \   000014   4003         JC      $+5
   \   000016   02....       LJMP    ??bindRemoveSrcDev_1 & 0xFFFF
    587            {
    588              if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
   \   000019   74FF         MOV     A,#-0x1
   \   00001B   65..         XRL     A,?V1
   \   00001D   6028         JZ      ??bindRemoveSrcDev_2
   \   00001F   A8..         MOV     R0,?V0
   \   000021   7900         MOV     R1,#0x0
   \   000023   E8           MOV     A,R0
   \   000024   75F00E       MOV     B,#0xe
   \   000027   A4           MUL     AB
   \   000028   C8           XCH     A,R0
   \   000029   AAF0         MOV     R2,B
   \   00002B   75F000       MOV     B,#0x0
   \   00002E   A4           MUL     AB
   \   00002F   2A           ADD     A,R2
   \   000030   FA           MOV     R2,A
   \   000031   75F00E       MOV     B,#0xe
   \   000034   E9           MOV     A,R1
   \   000035   A4           MUL     AB
   \   000036   2A           ADD     A,R2
   \   000037   F9           MOV     R1,A
   \   000038   74..         MOV     A,#BindingTable & 0xff
   \   00003A   28           ADD     A,R0
   \   00003B   F582         MOV     DPL,A
   \   00003D   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00003F   39           ADDC    A,R1
   \   000040   F583         MOV     DPH,A
   \   000042   E0           MOVX    A,@DPTR
   \   000043   65..         XRL     A,?V1
   \   000045   7054         JNZ     ??bindRemoveSrcDev_3
    589              {
    590                uint16 idx = BindingTable[x].dstIdx;
   \                     ??bindRemoveSrcDev_2:
   \   000047   A8..         MOV     R0,?V0
   \   000049   7900         MOV     R1,#0x0
   \   00004B   E8           MOV     A,R0
   \   00004C   75F00E       MOV     B,#0xe
   \   00004F   A4           MUL     AB
   \   000050   C8           XCH     A,R0
   \   000051   AAF0         MOV     R2,B
   \   000053   75F000       MOV     B,#0x0
   \   000056   A4           MUL     AB
   \   000057   2A           ADD     A,R2
   \   000058   FA           MOV     R2,A
   \   000059   75F00E       MOV     B,#0xe
   \   00005C   E9           MOV     A,R1
   \   00005D   A4           MUL     AB
   \   00005E   2A           ADD     A,R2
   \   00005F   F9           MOV     R1,A
   \   000060   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   000062   28           ADD     A,R0
   \   000063   F582         MOV     DPL,A
   \   000065   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   000067   39           ADDC    A,R1
   \   000068   F583         MOV     DPH,A
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FE           MOV     R6,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FF           MOV     R7,A
    591          
    592                bindRemoveEntry( &BindingTable[x] );
   \   00006F                ; Setup parameters for call to function bindRemoveEntry
   \   00006F   A8..         MOV     R0,?V0
   \   000071   7900         MOV     R1,#0x0
   \   000073   E8           MOV     A,R0
   \   000074   75F00E       MOV     B,#0xe
   \   000077   A4           MUL     AB
   \   000078   C8           XCH     A,R0
   \   000079   AAF0         MOV     R2,B
   \   00007B   75F000       MOV     B,#0x0
   \   00007E   A4           MUL     AB
   \   00007F   2A           ADD     A,R2
   \   000080   FA           MOV     R2,A
   \   000081   75F00E       MOV     B,#0xe
   \   000084   E9           MOV     A,R1
   \   000085   A4           MUL     AB
   \   000086   2A           ADD     A,R2
   \   000087   F9           MOV     R1,A
   \   000088   74..         MOV     A,#BindingTable & 0xff
   \   00008A   28           ADD     A,R0
   \   00008B   FA           MOV     R2,A
   \   00008C   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00008E   39           ADDC    A,R1
   \   00008F   FB           MOV     R3,A
   \   000090   12....       LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
   \   000093   E9           MOV     A,R1
    593          
    594                // If this is the last Bind Entry for that idx then clear BINDING
    595                // user from Address Manager
    596                bindAddressClear( idx );
   \   000094                ; Setup parameters for call to function bindAddressClear
   \   000094   EE           MOV     A,R6
   \   000095   FA           MOV     R2,A
   \   000096   EF           MOV     A,R7
   \   000097   FB           MOV     R3,A
   \   000098   12....       LCALL   `??bindAddressClear::?relay`; Banked call to: bindAddressClear
    597              }
    598            }
   \                     ??bindRemoveSrcDev_3:
   \   00009B   05..         INC     ?V0
   \   00009D   02....       LJMP    ??bindRemoveSrcDev_0 & 0xFFFF
    599          }
   \                     ??bindRemoveSrcDev_1:
   \   0000A0   7F02         MOV     R7,#0x2
   \   0000A2   02....       LJMP    ?BANKED_LEAVE_XDATA
    600          
    601          /*********************************************************************
    602           * @fn          bindNumBoundTo
    603           *
    604           * @brief       Calculate the number items this device is bound to.
    605           *              When srcMode is set to TRUE, discard what value devAddr
    606           *              has, it returns number count bound to the local dev.
    607           *
    608           * @param       devAddr - device Address
    609           * @param       devEP - endpoint
    610           * @param       srcMode - TRUE - assume devHandle is a source address
    611           *                        FALSE - destination address
    612           *
    613           * @return      status
    614           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    615          byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
   \                     bindNumBoundTo:
    616          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V6,R1
   \   00000B   8C..         MOV     ?V7,R4
    617            BindingEntry_t *pBind;
    618            uint16 idx;
    619            byte   num;
    620            bindTableIndex_t x;
    621          
    622            // Init
    623            num = 0;
   \   00000D   75..00       MOV     ?V0,#0x0
    624          
    625            if ( devAddr->addrMode == AddrGroup )
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   700D         JNZ     ??bindNumBoundTo_0
    626            {
    627              idx = devAddr->addr.shortAddr;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V4,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V5,A
   \   00002C   8011         SJMP    ??bindNumBoundTo_1
    628            }
    629            else
    630            {
    631              idx = bindingAddrMgsHelperFind( devAddr );
   \                     ??bindNumBoundTo_0:
   \   00002E                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000035   8A..         MOV     ?V8,R2
   \   000037   8B..         MOV     ?V9,R3
   \   000039   85....       MOV     ?V4,?V8
   \   00003C   85....       MOV     ?V5,?V9
    632            }
    633          
    634            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \                     ??bindNumBoundTo_1:
   \   00003F   75..00       MOV     ?V1,#0x0
   \                     ??bindNumBoundTo_2:
   \   000042   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000045   E4           CLR     A
   \   000046   93           MOVC    A,@A+DPTR
   \   000047   F8           MOV     R0,A
   \   000048   E5..         MOV     A,?V1
   \   00004A   C3           CLR     C
   \   00004B   98           SUBB    A,R0
   \   00004C   4003         JC      $+5
   \   00004E   02....       LJMP    ??bindNumBoundTo_3 & 0xFFFF
    635            {
    636              pBind = &BindingTable[x];
   \   000051   A8..         MOV     R0,?V1
   \   000053   7900         MOV     R1,#0x0
   \   000055   E8           MOV     A,R0
   \   000056   75F00E       MOV     B,#0xe
   \   000059   A4           MUL     AB
   \   00005A   C8           XCH     A,R0
   \   00005B   AAF0         MOV     R2,B
   \   00005D   75F000       MOV     B,#0x0
   \   000060   A4           MUL     AB
   \   000061   2A           ADD     A,R2
   \   000062   FA           MOV     R2,A
   \   000063   75F00E       MOV     B,#0xe
   \   000066   E9           MOV     A,R1
   \   000067   A4           MUL     AB
   \   000068   2A           ADD     A,R2
   \   000069   F9           MOV     R1,A
   \   00006A   74..         MOV     A,#BindingTable & 0xff
   \   00006C   28           ADD     A,R0
   \   00006D   F8           MOV     R0,A
   \   00006E   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000070   39           ADDC    A,R1
   \   000071   F9           MOV     R1,A
   \   000072   88..         MOV     ?V2,R0
   \   000074   89..         MOV     ?V3,R1
    637              if ( srcMode )
   \   000076   E5..         MOV     A,?V7
   \   000078   600F         JZ      ??bindNumBoundTo_4
    638              {
    639                if ( pBind->srcEP == devEpInt )
   \   00007A   85..82       MOV     DPL,?V2
   \   00007D   85..83       MOV     DPH,?V3
   \   000080   E0           MOVX    A,@DPTR
   \   000081   65..         XRL     A,?V6
   \   000083   7073         JNZ     ??bindNumBoundTo_5
    640                {
    641                  num++;
   \   000085   05..         INC     ?V0
   \   000087   806F         SJMP    ??bindNumBoundTo_5
    642                }
    643              }
    644              else
    645              {
    646                if ( ((devAddr->addrMode == AddrGroup)
    647                        && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
    648                    || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
    649                                          && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
   \                     ??bindNumBoundTo_4:
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   6401         XRL     A,#0x1
   \   000098   701F         JNZ     ??bindNumBoundTo_6
   \   00009A   85..82       MOV     DPL,?V2
   \   00009D   85..83       MOV     DPH,?V3
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   6401         XRL     A,#0x1
   \   0000A4   7013         JNZ     ??bindNumBoundTo_6
   \   0000A6   85..82       MOV     DPL,?V2
   \   0000A9   85..83       MOV     DPH,?V3
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   65..         XRL     A,?V4
   \   0000B1   7004         JNZ     ??bindNumBoundTo_7
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   65..         XRL     A,?V5
   \                     ??bindNumBoundTo_7:
   \   0000B7   603D         JZ      ??bindNumBoundTo_8
   \                     ??bindNumBoundTo_6:
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   6401         XRL     A,#0x1
   \   0000C8   602E         JZ      ??bindNumBoundTo_5
   \   0000CA   85..82       MOV     DPL,?V2
   \   0000CD   85..83       MOV     DPH,?V3
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   7024         JNZ     ??bindNumBoundTo_5
   \   0000D4   85..82       MOV     DPL,?V2
   \   0000D7   85..83       MOV     DPH,?V3
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   65..         XRL     A,?V4
   \   0000DF   7004         JNZ     ??bindNumBoundTo_9
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   65..         XRL     A,?V5
   \                     ??bindNumBoundTo_9:
   \   0000E5   7011         JNZ     ??bindNumBoundTo_5
   \   0000E7   85..82       MOV     DPL,?V2
   \   0000EA   85..83       MOV     DPH,?V3
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   65..         XRL     A,?V6
   \   0000F4   7002         JNZ     ??bindNumBoundTo_5
    650                {
    651                  num++;
   \                     ??bindNumBoundTo_8:
   \   0000F6   05..         INC     ?V0
    652                }
    653              }
    654            }
   \                     ??bindNumBoundTo_5:
   \   0000F8   05..         INC     ?V1
   \   0000FA   02....       LJMP    ??bindNumBoundTo_2 & 0xFFFF
    655          
    656            return num;
   \                     ??bindNumBoundTo_3:
   \   0000FD   A9..         MOV     R1,?V0
   \   0000FF   7F0A         MOV     R7,#0xa
   \   000101   02....       LJMP    ?BANKED_LEAVE_XDATA
    657          }
    658          
    659          /*********************************************************************
    660           * @fn          bindNumReflections
    661           *
    662           * @brief       Counts the number of reflections needed for a
    663           *              endpoint and cluster ID combo.
    664           *
    665           * @param       ep - source endpoint
    666           * @param       clusterID - matching clusterID
    667           *
    668           * @return      number of reflections needed.
    669           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    670          uint16 bindNumReflections( uint8 ep, uint16 clusterID )
   \                     bindNumReflections:
    671          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V6,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
    672            bindTableIndex_t x;
    673            BindingEntry_t *pBind;
    674            uint16 cnt = 0;
   \   00000B   7E00         MOV     R6,#0x0
   \   00000D   7F00         MOV     R7,#0x0
    675            uint8 bindEP;
    676          
    677            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00000F   75..00       MOV     ?V4,#0x0
   \                     ??bindNumReflections_0:
   \   000012   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000015   E4           CLR     A
   \   000016   93           MOVC    A,@A+DPTR
   \   000017   F8           MOV     R0,A
   \   000018   E5..         MOV     A,?V4
   \   00001A   C3           CLR     C
   \   00001B   98           SUBB    A,R0
   \   00001C   504B         JNC     ??bindNumReflections_1
    678            {
    679              pBind = &BindingTable[x];
   \   00001E   A8..         MOV     R0,?V4
   \   000020   7900         MOV     R1,#0x0
   \   000022   E8           MOV     A,R0
   \   000023   75F00E       MOV     B,#0xe
   \   000026   A4           MUL     AB
   \   000027   C8           XCH     A,R0
   \   000028   AAF0         MOV     R2,B
   \   00002A   75F000       MOV     B,#0x0
   \   00002D   A4           MUL     AB
   \   00002E   2A           ADD     A,R2
   \   00002F   FA           MOV     R2,A
   \   000030   75F00E       MOV     B,#0xe
   \   000033   E9           MOV     A,R1
   \   000034   A4           MUL     AB
   \   000035   2A           ADD     A,R2
   \   000036   F9           MOV     R1,A
   \   000037   74..         MOV     A,#BindingTable & 0xff
   \   000039   28           ADD     A,R0
   \   00003A   F8           MOV     R0,A
   \   00003B   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00003D   39           ADDC    A,R1
   \   00003E   F9           MOV     R1,A
   \   00003F   88..         MOV     ?V2,R0
   \   000041   89..         MOV     ?V3,R1
    680              bindEP = pBind->srcEP;
   \   000043   85..82       MOV     DPL,?V2
   \   000046   85..83       MOV     DPH,?V3
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F5..         MOV     ?V5,A
    681          
    682              if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
   \   00004C   E5..         MOV     A,?V6
   \   00004E   65..         XRL     A,?V5
   \   000050   7013         JNZ     ??bindNumReflections_2
   \   000052                ; Setup parameters for call to function bindIsClusterIDinList
   \   000052   AC..         MOV     R4,?V0
   \   000054   AD..         MOV     R5,?V1
   \   000056   AA..         MOV     R2,?V2
   \   000058   AB..         MOV     R3,?V3
   \   00005A   12....       LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   00005D   E9           MOV     A,R1
   \   00005E   6005         JZ      ??bindNumReflections_2
    683              {
    684                cnt++;
   \   000060   0E           INC     R6
   \   000061   EE           MOV     A,R6
   \   000062   7001         JNZ     ??bindNumReflections_2
   \   000064   0F           INC     R7
    685              }
    686            }
   \                     ??bindNumReflections_2:
   \   000065   05..         INC     ?V4
   \   000067   80A9         SJMP    ??bindNumReflections_0
    687          
    688            return ( cnt );
   \                     ??bindNumReflections_1:
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   EF           MOV     A,R7
   \   00006C   FB           MOV     R3,A
   \   00006D   7F07         MOV     R7,#0x7
   \   00006F   02....       LJMP    ?BANKED_LEAVE_XDATA
    689          }
    690          
    691          /*********************************************************************
    692           * @fn          bindFind
    693           *
    694           * @brief       Finds the binding entry for the source address, endpoint
    695           *              and cluster ID passed in as a parameter.
    696           *
    697           * @param       ep - source endpoint
    698           * @param       clusterID - matching clusterID
    699           * @param       skip - number of matches to skip before returning
    700           *
    701           * @return      pointer to the binding table entry, NULL if not found
    702           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    703          BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
   \                     bindFind:
    704          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   8C..         MOV     ?V5,R4
    705            BindingEntry_t *pBind;
    706            byte skipped = 0;
   \   00000D   75..00       MOV     ?V3,#0x0
    707            bindTableIndex_t x;
    708          
    709            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000010   75..00       MOV     ?V2,#0x0
   \                     ??bindFind_0:
   \   000013   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000016   E4           CLR     A
   \   000017   93           MOVC    A,@A+DPTR
   \   000018   F8           MOV     R0,A
   \   000019   E5..         MOV     A,?V2
   \   00001B   C3           CLR     C
   \   00001C   98           SUBB    A,R0
   \   00001D   5051         JNC     ??bindFind_1
    710            {
    711              pBind = &BindingTable[x];
   \   00001F   A8..         MOV     R0,?V2
   \   000021   7900         MOV     R1,#0x0
   \   000023   E8           MOV     A,R0
   \   000024   75F00E       MOV     B,#0xe
   \   000027   A4           MUL     AB
   \   000028   C8           XCH     A,R0
   \   000029   AAF0         MOV     R2,B
   \   00002B   75F000       MOV     B,#0x0
   \   00002E   A4           MUL     AB
   \   00002F   2A           ADD     A,R2
   \   000030   FA           MOV     R2,A
   \   000031   75F00E       MOV     B,#0xe
   \   000034   E9           MOV     A,R1
   \   000035   A4           MUL     AB
   \   000036   2A           ADD     A,R2
   \   000037   F9           MOV     R1,A
   \   000038   74..         MOV     A,#BindingTable & 0xff
   \   00003A   28           ADD     A,R0
   \   00003B   F8           MOV     R0,A
   \   00003C   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   E8           MOV     A,R0
   \   000041   FE           MOV     R6,A
   \   000042   E9           MOV     A,R1
   \   000043   FF           MOV     R7,A
    712          
    713              if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65..         XRL     A,?V4
   \   00004B   701F         JNZ     ??bindFind_2
   \   00004D                ; Setup parameters for call to function bindIsClusterIDinList
   \   00004D   AC..         MOV     R4,?V0
   \   00004F   AD..         MOV     R5,?V1
   \   000051   EE           MOV     A,R6
   \   000052   FA           MOV     R2,A
   \   000053   EF           MOV     A,R7
   \   000054   FB           MOV     R3,A
   \   000055   12....       LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   000058   E9           MOV     A,R1
   \   000059   6011         JZ      ??bindFind_2
    714              {
    715                if ( skipped < skipping )
   \   00005B   E5..         MOV     A,?V3
   \   00005D   C3           CLR     C
   \   00005E   95..         SUBB    A,?V5
   \   000060   5004         JNC     ??bindFind_3
    716                {
    717                  skipped++;
   \   000062   05..         INC     ?V3
   \   000064   8006         SJMP    ??bindFind_2
    718                }
    719                else
    720                {
    721                  return ( pBind );
   \                     ??bindFind_3:
   \   000066   EE           MOV     A,R6
   \   000067   FA           MOV     R2,A
   \   000068   EF           MOV     A,R7
   \   000069   FB           MOV     R3,A
   \   00006A   8008         SJMP    ??bindFind_4
    722                }
    723              }
    724            }
   \                     ??bindFind_2:
   \   00006C   05..         INC     ?V2
   \   00006E   80A3         SJMP    ??bindFind_0
    725          
    726            return ( (BindingEntry_t *)NULL );
   \                     ??bindFind_1:
   \   000070   7A00         MOV     R2,#0x0
   \   000072   7B00         MOV     R3,#0x0
   \                     ??bindFind_4:
   \   000074   7F06         MOV     R7,#0x6
   \   000076   02....       LJMP    ?BANKED_LEAVE_XDATA
    727          }
    728          
    729          /*********************************************************************
    730           * @fn      bindAddressClear
    731           *
    732           * @brief   Lookup a binding entry by specific Idx, if none is found
    733           *          clears the BINDING user from Address Manager.
    734           *
    735           * @param   dstIdx - Source Address Manager Index
    736           *
    737           * @return  none
    738           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    739          void bindAddressClear( uint16 dstIdx )
   \                     bindAddressClear:
    740          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    741            bindTableIndex_t i;
    742          
    743            if ( dstIdx != INVALID_NODE_ADDR )
   \   00000E   74FE         MOV     A,#-0x2
   \   000010   6E           XRL     A,R6
   \   000011   7003         JNZ     ??bindAddressClear_0
   \   000013   74FF         MOV     A,#-0x1
   \   000015   6F           XRL     A,R7
   \                     ??bindAddressClear_0:
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??bindAddressClear_1 & 0xFFFF
    744            {
    745              // Looks for a specific Idx
    746              for ( i = 0; i < gNWK_MAX_BINDING_ENTRIES; i++ )
   \   00001B   75..00       MOV     ?V0,#0x0
   \                     ??bindAddressClear_2:
   \   00001E   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000021   E4           CLR     A
   \   000022   93           MOVC    A,@A+DPTR
   \   000023   F8           MOV     R0,A
   \   000024   E5..         MOV     A,?V0
   \   000026   C3           CLR     C
   \   000027   98           SUBB    A,R0
   \   000028   507F         JNC     ??bindAddressClear_3
    747              {
    748                if ( ( BindingTable[i].dstGroupMode != AddrGroup ) &&
    749                     ( BindingTable[i].dstGroupMode == DSTGROUPMODE_ADDR ) &&
    750                     ( BindingTable[i].dstIdx == dstIdx ) )
   \   00002A   A8..         MOV     R0,?V0
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   E8           MOV     A,R0
   \   00002F   75F00E       MOV     B,#0xe
   \   000032   A4           MUL     AB
   \   000033   C8           XCH     A,R0
   \   000034   AAF0         MOV     R2,B
   \   000036   75F000       MOV     B,#0x0
   \   000039   A4           MUL     AB
   \   00003A   2A           ADD     A,R2
   \   00003B   FA           MOV     R2,A
   \   00003C   75F00E       MOV     B,#0xe
   \   00003F   E9           MOV     A,R1
   \   000040   A4           MUL     AB
   \   000041   2A           ADD     A,R2
   \   000042   F9           MOV     R1,A
   \   000043   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   000045   28           ADD     A,R0
   \   000046   F582         MOV     DPL,A
   \   000048   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   00004A   39           ADDC    A,R1
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   6401         XRL     A,#0x1
   \   000050   6052         JZ      ??bindAddressClear_4
   \   000052   A8..         MOV     R0,?V0
   \   000054   7900         MOV     R1,#0x0
   \   000056   E8           MOV     A,R0
   \   000057   75F00E       MOV     B,#0xe
   \   00005A   A4           MUL     AB
   \   00005B   C8           XCH     A,R0
   \   00005C   AAF0         MOV     R2,B
   \   00005E   75F000       MOV     B,#0x0
   \   000061   A4           MUL     AB
   \   000062   2A           ADD     A,R2
   \   000063   FA           MOV     R2,A
   \   000064   75F00E       MOV     B,#0xe
   \   000067   E9           MOV     A,R1
   \   000068   A4           MUL     AB
   \   000069   2A           ADD     A,R2
   \   00006A   F9           MOV     R1,A
   \   00006B   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   00006D   28           ADD     A,R0
   \   00006E   F582         MOV     DPL,A
   \   000070   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   000072   39           ADDC    A,R1
   \   000073   F583         MOV     DPH,A
   \   000075   E0           MOVX    A,@DPTR
   \   000076   702C         JNZ     ??bindAddressClear_4
   \   000078   A8..         MOV     R0,?V0
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   E8           MOV     A,R0
   \   00007D   75F00E       MOV     B,#0xe
   \   000080   A4           MUL     AB
   \   000081   C8           XCH     A,R0
   \   000082   AAF0         MOV     R2,B
   \   000084   75F000       MOV     B,#0x0
   \   000087   A4           MUL     AB
   \   000088   2A           ADD     A,R2
   \   000089   FA           MOV     R2,A
   \   00008A   75F00E       MOV     B,#0xe
   \   00008D   E9           MOV     A,R1
   \   00008E   A4           MUL     AB
   \   00008F   2A           ADD     A,R2
   \   000090   F9           MOV     R1,A
   \   000091   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   000093   28           ADD     A,R0
   \   000094   F582         MOV     DPL,A
   \   000096   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   000098   39           ADDC    A,R1
   \   000099   F583         MOV     DPH,A
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   6E           XRL     A,R6
   \   00009D   7003         JNZ     ??bindAddressClear_5
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   6F           XRL     A,R7
   \                     ??bindAddressClear_5:
   \   0000A2   6005         JZ      ??bindAddressClear_3
    751                {
    752                  break;  // found at least one
    753                }
    754              }
   \                     ??bindAddressClear_4:
   \   0000A4   05..         INC     ?V0
   \   0000A6   02....       LJMP    ??bindAddressClear_2 & 0xFFFF
    755          
    756              if ( i == gNWK_MAX_BINDING_ENTRIES )
   \                     ??bindAddressClear_3:
   \   0000A9   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000AC   E4           CLR     A
   \   0000AD   93           MOVC    A,@A+DPTR
   \   0000AE   65..         XRL     A,?V0
   \   0000B0   701B         JNZ     ??bindAddressClear_1
    757              {
    758                // No binding entry is associated with dstIdx.
    759                // Remove user binding bit from the address manager entry corresponding to dstIdx.
    760                AddrMgrEntry_t addrEntry;
    761          
    762                addrEntry.user = ADDRMGR_USER_BINDING;
   \   0000B2   85..82       MOV     DPL,?XSP + 0
   \   0000B5   85..83       MOV     DPH,?XSP + 1
   \   0000B8   7404         MOV     A,#0x4
   \   0000BA   F0           MOVX    @DPTR,A
    763                addrEntry.index = dstIdx;
   \   0000BB   740B         MOV     A,#0xb
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   EE           MOV     A,R6
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   EF           MOV     A,R7
   \   0000C4   F0           MOVX    @DPTR,A
    764          
    765                AddrMgrEntryRelease( &addrEntry );
   \   0000C5                ; Setup parameters for call to function AddrMgrEntryRelease
   \   0000C5   AA..         MOV     R2,?XSP + 0
   \   0000C7   AB..         MOV     R3,?XSP + 1
   \   0000C9   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   0000CC   E9           MOV     A,R1
    766              }
    767            }
    768          }
   \                     ??bindAddressClear_1:
   \   0000CD   740D         MOV     A,#0xd
   \   0000CF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D2   7F01         MOV     R7,#0x1
   \   0000D4   02....       LJMP    ?BANKED_LEAVE_XDATA
    769          
    770          /*********************************************************************
    771           * @fn          BindInitNV
    772           *
    773           * @brief       Initialize the Binding NV Item
    774           *
    775           * @param       none
    776           *
    777           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    778           *              exist in NV, NV_OPER_FAILED if failure.
    779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    780          byte BindInitNV( void )
   \                     BindInitNV:
    781          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    782            byte ret;
    783          
    784            // Initialize the device list
    785            ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
    786                            (uint16)( sizeof( nvBindingHdr_t ) + NV_BIND_ITEM_SIZE ), NULL );
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR     A
   \   000006   F5..         MOV     ?V0,A
   \   000008   F5..         MOV     ?V1,A
   \   00000A   78..         MOV     R0,#?V0
   \   00000C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000F   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000012   E4           CLR     A
   \   000013   93           MOVC    A,@A+DPTR
   \   000014   F8           MOV     R0,A
   \   000015   7401         MOV     A,#0x1
   \   000017   93           MOVC    A,@A+DPTR
   \   000018   F9           MOV     R1,A
   \   000019   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001C   E4           CLR     A
   \   00001D   93           MOVC    A,@A+DPTR
   \   00001E   F5..         MOV     ?V0,A
   \   000020   75..00       MOV     ?V1,#0x0
   \   000023   E8           MOV     A,R0
   \   000024   85..F0       MOV     B,?V0
   \   000027   A4           MUL     AB
   \   000028   C8           XCH     A,R0
   \   000029   AAF0         MOV     R2,B
   \   00002B   85..F0       MOV     B,?V1
   \   00002E   A4           MUL     AB
   \   00002F   2A           ADD     A,R2
   \   000030   FA           MOV     R2,A
   \   000031   85..F0       MOV     B,?V0
   \   000034   E9           MOV     A,R1
   \   000035   A4           MUL     AB
   \   000036   2A           ADD     A,R2
   \   000037   F9           MOV     R1,A
   \   000038   E8           MOV     A,R0
   \   000039   2402         ADD     A,#0x2
   \   00003B   FC           MOV     R4,A
   \   00003C   E4           CLR     A
   \   00003D   39           ADDC    A,R1
   \   00003E   FD           MOV     R5,A
   \   00003F   7A41         MOV     R2,#0x41
   \   000041   7B00         MOV     R3,#0x0
   \   000043   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000046   7402         MOV     A,#0x2
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   E9           MOV     A,R1
   \   00004C   FE           MOV     R6,A
    787          
    788            if ( ret != ZSUCCESS )
   \   00004D   EE           MOV     A,R6
   \   00004E   6003         JZ      ??BindInitNV_0
    789            {
    790              BindSetDefaultNV();
   \   000050                ; Setup parameters for call to function BindSetDefaultNV
   \   000050   12....       LCALL   `??BindSetDefaultNV::?relay`; Banked call to: BindSetDefaultNV
    791            }
    792          
    793            return ( ret );
   \                     ??BindInitNV_0:
   \   000053   EE           MOV     A,R6
   \   000054   F9           MOV     R1,A
   \   000055   7F02         MOV     R7,#0x2
   \   000057   02....       LJMP    ?BANKED_LEAVE_XDATA
    794          }
    795          
    796          /*********************************************************************
    797           * @fn          BindSetDefaultNV
    798           *
    799           * @brief       Write the defaults to NV
    800           *
    801           * @param       none
    802           *
    803           * @return      none
    804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    805          void BindSetDefaultNV( void )
   \                     BindSetDefaultNV:
    806          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    807            nvBindingHdr_t hdr;
    808          
    809            // Initialize the header
    810            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    811          
    812            // Save off the header
    813            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV     ?V0,#0x2
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A41         MOV     R2,#0x41
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
    814          }
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   7F02         MOV     R7,#0x2
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
    815          
    816          /*********************************************************************
    817           * @fn          BindCopyBackupToNewNV
    818           *
    819           * @brief       Creates the New NV item, copies the backup data into
    820           *              the New NV ID, and Deletes the duplicate NV item.
    821           *
    822           * @param       dupLen - NV item length of the old Binding table.
    823           * @param       newLen - NV item length of the new Binding table to be created.
    824           *
    825           * @return      ZSuccess - All the actions were successful.
    826           *              ZFailure - Any of the actions failed.
    827           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    828          static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen )
   \                     BindCopyBackupToNewNV:
    829          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
    830            uint16 bindLen;
    831            uint8 status = ZSuccess;
   \   000012   7E00         MOV     R6,#0x0
    832          
    833            bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
   \   000014                ; Setup parameters for call to function osal_nv_item_len
   \   000014   7A41         MOV     R2,#0x41
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00001B   8A..         MOV     ?V6,R2
   \   00001D   8B..         MOV     ?V7,R3
   \   00001F   85....       MOV     ?V0,?V6
   \   000022   85....       MOV     ?V1,?V7
    834          
    835          
    836            if ( ( bindLen > 0 ) && ( bindLen != newLen ) )
   \   000025   E5..         MOV     A,?V0
   \   000027   45..         ORL     A,?V1
   \   000029   6018         JZ      ??BindCopyBackupToNewNV_0
   \   00002B   E5..         MOV     A,?V2
   \   00002D   65..         XRL     A,?V0
   \   00002F   7004         JNZ     ??BindCopyBackupToNewNV_1
   \   000031   E5..         MOV     A,?V3
   \   000033   65..         XRL     A,?V1
   \                     ??BindCopyBackupToNewNV_1:
   \   000035   600C         JZ      ??BindCopyBackupToNewNV_0
    837            {
    838              // The existing item does not match the New length
    839              osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen );
   \   000037                ; Setup parameters for call to function osal_nv_delete
   \   000037   AC..         MOV     R4,?V0
   \   000039   AD..         MOV     R5,?V1
   \   00003B   7A41         MOV     R2,#0x41
   \   00003D   7B00         MOV     R3,#0x0
   \   00003F   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   000042   E9           MOV     A,R1
    840            }
    841          
    842            // Create Binding Table NV item with the NEW legth
    843            if ( osal_nv_item_init( ZCD_NV_BINDING_TABLE, newLen, NULL ) != NV_OPER_FAILED )
   \                     ??BindCopyBackupToNewNV_0:
   \   000043                ; Setup parameters for call to function osal_nv_item_init
   \   000043   E4           CLR     A
   \   000044   F5..         MOV     ?V6,A
   \   000046   F5..         MOV     ?V7,A
   \   000048   78..         MOV     R0,#?V6
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   AC..         MOV     R4,?V2
   \   00004F   AD..         MOV     R5,?V3
   \   000051   7A41         MOV     R2,#0x41
   \   000053   7B00         MOV     R3,#0x0
   \   000055   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005D   E9           MOV     A,R1
   \   00005E   640A         XRL     A,#0xa
   \   000060   7003         JNZ     $+5
   \   000062   02....       LJMP    ??BindCopyBackupToNewNV_2 & 0xFFFF
    844            {
    845              nvBindingHdr_t hdrBackup;
    846          
    847              // Copy ONLY the valid records from the duplicate NV table into the new table
    848              // at the end of this process the table content will be compacted
    849              if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdrBackup ) == ZSuccess )
   \   000065                ; Setup parameters for call to function osal_nv_read
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP100_8
   \   00006A   88..         MOV     ?V6,R0
   \   00006C   89..         MOV     ?V7,R1
   \   00006E   78..         MOV     R0,#?V6
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   75..02       MOV     ?V6,#0x2
   \   000076   75..00       MOV     ?V7,#0x0
   \   000079   78..         MOV     R0,#?V6
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   7C00         MOV     R4,#0x0
   \   000080   7D00         MOV     R5,#0x0
   \   000082   7A00         MOV     R2,#0x0
   \   000084   7B03         MOV     R3,#0x3
   \   000086   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000089   7404         MOV     A,#0x4
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   E9           MOV     A,R1
   \   00008F   6003         JZ      $+5
   \   000091   02....       LJMP    ??BindCopyBackupToNewNV_3 & 0xFFFF
    850              {
    851                bindTableIndex_t i;
    852                uint16 validBackupRecs = 0;
   \   000094   85..82       MOV     DPL,?XSP + 0
   \   000097   85..83       MOV     DPH,?XSP + 1
   \   00009A   7400         MOV     A,#0x0
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   A3           INC     DPTR
   \   00009E   7400         MOV     A,#0x0
   \   0000A0   F0           MOVX    @DPTR,A
    853                BindingEntry_t backupRec;
    854          
    855                // Read in the device list. This loop will stop when:
    856                // The total number of valid records has been reached either because:
    857                //          The new table is full of valid records OR
    858                //          The old table has less valid records than the size of the table
    859                for ( i = 0; ( validBackupRecs < gNWK_MAX_BINDING_ENTRIES ) && ( validBackupRecs < hdrBackup.numRecs ); i++ )
   \   0000A1   7F00         MOV     R7,#0x0
   \                     ??BindCopyBackupToNewNV_4:
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   C082         PUSH    DPL
   \   0000AB   C083         PUSH    DPH
   \   0000AD   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000B0   E4           CLR     A
   \   0000B1   93           MOVC    A,@A+DPTR
   \   0000B2   F8           MOV     R0,A
   \   0000B3   7900         MOV     R1,#0x0
   \   0000B5   D083         POP     DPH
   \   0000B7   D082         POP     DPL
   \   0000B9   C3           CLR     C
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   98           SUBB    A,R0
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   99           SUBB    A,R1
   \   0000BF   4003         JC      $+5
   \   0000C1   02....       LJMP    ??BindCopyBackupToNewNV_5 & 0xFFFF
   \   0000C4   85..82       MOV     DPL,?XSP + 0
   \   0000C7   85..83       MOV     DPH,?XSP + 1
   \   0000CA   C082         PUSH    DPL
   \   0000CC   C083         PUSH    DPH
   \   0000CE   7402         MOV     A,#0x2
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F8           MOV     R0,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F9           MOV     R1,A
   \   0000D8   D083         POP     DPH
   \   0000DA   D082         POP     DPL
   \   0000DC   C3           CLR     C
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   98           SUBB    A,R0
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   99           SUBB    A,R1
   \   0000E2   4003         JC      $+5
   \   0000E4   02....       LJMP    ??BindCopyBackupToNewNV_5 & 0xFFFF
    860                {
    861                  if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE,
    862                                    (uint16)(sizeof(nvBindingHdr_t) + (i * NV_BIND_REC_SIZE)),
    863                                    NV_BIND_REC_SIZE, &backupRec ) == ZSuccess )
   \   0000E7                ; Setup parameters for call to function osal_nv_read
   \   0000E7   7404         MOV     A,#0x4
   \   0000E9   12....       LCALL   ?XSTACK_DISP100_8
   \   0000EC   88..         MOV     ?V6,R0
   \   0000EE   89..         MOV     ?V7,R1
   \   0000F0   78..         MOV     R0,#?V6
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F5   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   0000F8   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   0000FB   EF           MOV     A,R7
   \   0000FC   F8           MOV     R0,A
   \   0000FD   7900         MOV     R1,#0x0
   \   0000FF   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000102   E4           CLR     A
   \   000103   93           MOVC    A,@A+DPTR
   \   000104   F5..         MOV     ?V6,A
   \   000106   7401         MOV     A,#0x1
   \   000108   93           MOVC    A,@A+DPTR
   \   000109   F5..         MOV     ?V7,A
   \   00010B   E8           MOV     A,R0
   \   00010C   85..F0       MOV     B,?V6
   \   00010F   A4           MUL     AB
   \   000110   C8           XCH     A,R0
   \   000111   AAF0         MOV     R2,B
   \   000113   85..F0       MOV     B,?V7
   \   000116   A4           MUL     AB
   \   000117   2A           ADD     A,R2
   \   000118   FA           MOV     R2,A
   \   000119   85..F0       MOV     B,?V6
   \   00011C   E9           MOV     A,R1
   \   00011D   A4           MUL     AB
   \   00011E   2A           ADD     A,R2
   \   00011F   F9           MOV     R1,A
   \   000120   E8           MOV     A,R0
   \   000121   2402         ADD     A,#0x2
   \   000123   FC           MOV     R4,A
   \   000124   E4           CLR     A
   \   000125   39           ADDC    A,R1
   \   000126   FD           MOV     R5,A
   \   000127   7A00         MOV     R2,#0x0
   \   000129   7B03         MOV     R3,#0x3
   \   00012B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00012E   7404         MOV     A,#0x4
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   \   000133   E9           MOV     A,R1
   \   000134   7076         JNZ     ??BindCopyBackupToNewNV_6
    864                  {
    865                    if ( backupRec.srcEP != NV_BIND_EMPTY )
   \   000136   7404         MOV     A,#0x4
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   64FF         XRL     A,#0xff
   \   00013E   6068         JZ      ??BindCopyBackupToNewNV_7
    866                    {
    867                      // Save the valid record into the NEW NV table.
    868                      if ( osal_nv_write( ZCD_NV_BINDING_TABLE,
    869                                          (uint16)((sizeof(nvBindingHdr_t)) + (validBackupRecs * NV_BIND_REC_SIZE)),
    870                                          NV_BIND_REC_SIZE, &backupRec ) != ZSuccess )
   \   000140                ; Setup parameters for call to function osal_nv_write
   \   000140   7404         MOV     A,#0x4
   \   000142   12....       LCALL   ?XSTACK_DISP100_8
   \   000145   88..         MOV     ?V6,R0
   \   000147   89..         MOV     ?V7,R1
   \   000149   78..         MOV     R0,#?V6
   \   00014B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014E   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000151   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   000154   7404         MOV     A,#0x4
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F8           MOV     R0,A
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F9           MOV     R1,A
   \   00015E   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000161   E4           CLR     A
   \   000162   93           MOVC    A,@A+DPTR
   \   000163   F5..         MOV     ?V6,A
   \   000165   7401         MOV     A,#0x1
   \   000167   93           MOVC    A,@A+DPTR
   \   000168   F5..         MOV     ?V7,A
   \   00016A   E8           MOV     A,R0
   \   00016B   85..F0       MOV     B,?V6
   \   00016E   A4           MUL     AB
   \   00016F   C8           XCH     A,R0
   \   000170   AAF0         MOV     R2,B
   \   000172   85..F0       MOV     B,?V7
   \   000175   A4           MUL     AB
   \   000176   2A           ADD     A,R2
   \   000177   FA           MOV     R2,A
   \   000178   85..F0       MOV     B,?V6
   \   00017B   E9           MOV     A,R1
   \   00017C   A4           MUL     AB
   \   00017D   2A           ADD     A,R2
   \   00017E   F9           MOV     R1,A
   \   00017F   E8           MOV     A,R0
   \   000180   2402         ADD     A,#0x2
   \   000182   FC           MOV     R4,A
   \   000183   E4           CLR     A
   \   000184   39           ADDC    A,R1
   \   000185   FD           MOV     R5,A
   \   000186   7A41         MOV     R2,#0x41
   \   000188   7B00         MOV     R3,#0x0
   \   00018A   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00018D   7404         MOV     A,#0x4
   \   00018F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000192   E9           MOV     A,R1
   \   000193   6004         JZ      ??BindCopyBackupToNewNV_8
    871                      {
    872                         status = ZFailure;
   \   000195   7E01         MOV     R6,#0x1
    873                         break; // Terminate the loop as soon as a problem with NV is detected
   \   000197   8015         SJMP    ??BindCopyBackupToNewNV_5
    874                      }
    875          
    876                      validBackupRecs++;
   \                     ??BindCopyBackupToNewNV_8:
   \   000199   85..82       MOV     DPL,?XSP + 0
   \   00019C   85..83       MOV     DPH,?XSP + 1
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   2401         ADD     A,#0x1
   \   0001A2   F0           MOVX    @DPTR,A
   \   0001A3   A3           INC     DPTR
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   3400         ADDC    A,#0x0
   \   0001A7   F0           MOVX    @DPTR,A
    877                    }
    878                  }
   \                     ??BindCopyBackupToNewNV_7:
   \   0001A8   0F           INC     R7
   \   0001A9   02....       LJMP    ??BindCopyBackupToNewNV_4 & 0xFFFF
    879                  else
    880                  {
    881                     status = ZFailure;
   \                     ??BindCopyBackupToNewNV_6:
   \   0001AC   7E01         MOV     R6,#0x1
    882                     break; // Terminate the loop as soon as a problem with NV is detected
    883                  }
    884                }
    885          
    886                // Only save the header and delete the duplicate element if the previous
    887                // process was successful
    888                if ( status == ZSuccess )
   \                     ??BindCopyBackupToNewNV_5:
   \   0001AE   EE           MOV     A,R6
   \   0001AF   7047         JNZ     ??BindCopyBackupToNewNV_9
    889                {
    890                  // Save off the header
    891                  if ( osal_nv_write( ZCD_NV_BINDING_TABLE, 0,
    892                                      sizeof(nvBindingHdr_t), &validBackupRecs ) == ZSuccess )
   \   0001B1                ; Setup parameters for call to function osal_nv_write
   \   0001B1   A8..         MOV     R0,?XSP + 0
   \   0001B3   A9..         MOV     R1,?XSP + 1
   \   0001B5   88..         MOV     ?V6,R0
   \   0001B7   89..         MOV     ?V7,R1
   \   0001B9   78..         MOV     R0,#?V6
   \   0001BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BE   75..02       MOV     ?V6,#0x2
   \   0001C1   75..00       MOV     ?V7,#0x0
   \   0001C4   78..         MOV     R0,#?V6
   \   0001C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C9   7C00         MOV     R4,#0x0
   \   0001CB   7D00         MOV     R5,#0x0
   \   0001CD   7A41         MOV     R2,#0x41
   \   0001CF   7B00         MOV     R3,#0x0
   \   0001D1   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001D4   7404         MOV     A,#0x4
   \   0001D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D9   E9           MOV     A,R1
   \   0001DA   7012         JNZ     ??BindCopyBackupToNewNV_10
    893                  {
    894                    // Delete the duplicate NV Item, once the data has been stored in the NEW table
    895                    if ( osal_nv_delete( ZCD_NV_DUPLICATE_BINDING_TABLE, dupLen ) != ZSuccess )
   \   0001DC                ; Setup parameters for call to function osal_nv_delete
   \   0001DC   AC..         MOV     R4,?V4
   \   0001DE   AD..         MOV     R5,?V5
   \   0001E0   7A00         MOV     R2,#0x0
   \   0001E2   7B03         MOV     R3,#0x3
   \   0001E4   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   0001E7   E9           MOV     A,R1
   \   0001E8   600E         JZ      ??BindCopyBackupToNewNV_9
    896                    {
    897                      status = ZFailure;
   \   0001EA   7E01         MOV     R6,#0x1
   \   0001EC   800A         SJMP    ??BindCopyBackupToNewNV_9
    898                    }
    899                  }
    900                  else
    901                  {
    902                    status = ZFailure;
   \                     ??BindCopyBackupToNewNV_10:
   \   0001EE   7E01         MOV     R6,#0x1
   \   0001F0   8006         SJMP    ??BindCopyBackupToNewNV_9
    903                  }
    904                }
    905              }
    906              else
    907              {
    908                status = ZFailure;
   \                     ??BindCopyBackupToNewNV_3:
   \   0001F2   7E01         MOV     R6,#0x1
   \   0001F4   8002         SJMP    ??BindCopyBackupToNewNV_9
    909              }
    910            }
    911            else
    912            {
    913              status = ZFailure;
   \                     ??BindCopyBackupToNewNV_2:
   \   0001F6   7E01         MOV     R6,#0x1
    914            }
    915          
    916            return ( status );
   \                     ??BindCopyBackupToNewNV_9:
   \   0001F8   EE           MOV     A,R6
   \   0001F9   F9           MOV     R1,A
   \   0001FA   7412         MOV     A,#0x12
   \   0001FC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FF   7F08         MOV     R7,#0x8
   \   000201   02....       LJMP    ?BANKED_LEAVE_XDATA
    917          }
    918          
    919          /*********************************************************************
    920           * @fn          BindUpgradeTableInNV
    921           *
    922           * @brief       Verifies if the existing table in NV has different size
    923           *              than the table defined by parameters in the current code.
    924           *              If different, creates a backup table, deletes the existing
    925           *              table and creates the new table with the new size. After
    926           *              this process is done ZCD_NV_BINDING_TABLE NV item contains
    927           *              only valid records retrieved from the original table, up to
    928           *              the maximum number of records defined by gNWK_MAX_BINDING_ENTRIES
    929           *
    930           * @param       none
    931           *
    932           * @return      ZSuccess - the Update process was sucessful.
    933           *              ZFailure - otherwise.
    934           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    935          static uint8 BindUpgradeTableInNV( void )
   \                     BindUpgradeTableInNV:
    936          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    937            nvBindingHdr_t hdr;
    938            uint16 dupLen;
    939            uint16 bindLen;
    940            uint16 newLen;
    941            uint8 status = ZSuccess;
   \   00000A   75..00       MOV     ?V2,#0x0
    942            bool duplicateReady = FALSE;
   \   00000D   75..00       MOV     ?V3,#0x0
    943          
    944            // Size of the Binding table based on current paramenters in the code
    945            newLen = sizeof(nvBindingHdr_t) + NV_BIND_ITEM_SIZE;
   \   000010   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000013   E4           CLR     A
   \   000014   93           MOVC    A,@A+DPTR
   \   000015   F8           MOV     R0,A
   \   000016   7401         MOV     A,#0x1
   \   000018   93           MOVC    A,@A+DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001D   E4           CLR     A
   \   00001E   93           MOVC    A,@A+DPTR
   \   00001F   F5..         MOV     ?V6,A
   \   000021   75..00       MOV     ?V7,#0x0
   \   000024   E8           MOV     A,R0
   \   000025   85..F0       MOV     B,?V6
   \   000028   A4           MUL     AB
   \   000029   C8           XCH     A,R0
   \   00002A   AAF0         MOV     R2,B
   \   00002C   85..F0       MOV     B,?V7
   \   00002F   A4           MUL     AB
   \   000030   2A           ADD     A,R2
   \   000031   FA           MOV     R2,A
   \   000032   85..F0       MOV     B,?V6
   \   000035   E9           MOV     A,R1
   \   000036   A4           MUL     AB
   \   000037   2A           ADD     A,R2
   \   000038   F9           MOV     R1,A
   \   000039   E8           MOV     A,R0
   \   00003A   2402         ADD     A,#0x2
   \   00003C   F8           MOV     R0,A
   \   00003D   5001         JNC     ??BindUpgradeTableInNV_0
   \   00003F   09           INC     R1
   \                     ??BindUpgradeTableInNV_0:
   \   000040   88..         MOV     ?V0,R0
   \   000042   89..         MOV     ?V1,R1
    946          
    947            // Size of the Binding table NV item, this is the whole size of the item,
    948            // it could inculde invalid records also
    949            bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
   \   000044                ; Setup parameters for call to function osal_nv_item_len
   \   000044   7A41         MOV     R2,#0x41
   \   000046   7B00         MOV     R3,#0x0
   \   000048   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00004B   8A..         MOV     ?V6,R2
   \   00004D   8B..         MOV     ?V7,R3
   \   00004F   AE..         MOV     R6,?V6
   \   000051   AF..         MOV     R7,?V7
    950          
    951            // Get the number of valid records from the Binding table
    952            osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \   000053                ; Setup parameters for call to function osal_nv_read
   \   000053   A8..         MOV     R0,?XSP + 0
   \   000055   A9..         MOV     R1,?XSP + 1
   \   000057   88..         MOV     ?V6,R0
   \   000059   89..         MOV     ?V7,R1
   \   00005B   78..         MOV     R0,#?V6
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   75..02       MOV     ?V6,#0x2
   \   000063   75..00       MOV     ?V7,#0x0
   \   000066   78..         MOV     R0,#?V6
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   7C00         MOV     R4,#0x0
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   7A41         MOV     R2,#0x41
   \   000071   7B00         MOV     R3,#0x0
   \   000073   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000076   7404         MOV     A,#0x4
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   E9           MOV     A,R1
    953          
    954            // Identify if there is a duplicate NV item, if it is there, that means an
    955            // Upgrade process did not finish properly last time
    956            // The length function will return 0 if the Backup NV ID does not exist.
    957            dupLen = osal_nv_item_len( ZCD_NV_DUPLICATE_BINDING_TABLE );
   \   00007C                ; Setup parameters for call to function osal_nv_item_len
   \   00007C   7A00         MOV     R2,#0x0
   \   00007E   7B03         MOV     R3,#0x3
   \   000080   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000083   8A..         MOV     ?V6,R2
   \   000085   8B..         MOV     ?V7,R3
   \   000087   85....       MOV     ?V4,?V6
   \   00008A   85....       MOV     ?V5,?V7
    958          
    959            // A duplicate of the original Binding item will be done if:
    960            // 1) A duplicate NV item DOES NOT exist AND the size of the original Binding
    961            //    item in NV is different (larger/smaller) than the the length calculated
    962            //    from the parameters in the code. If they are the same there is no need
    963            //    to do the Upgrade process.
    964            // 2) A duplicate NV item exists (probably because the previous upgrade
    965            //    process was interrupted) and [the original Binding NV items exists AND
    966            //    has valid recods (it is important to make sure that valid records exist
    967            //    in the binding table because it is possible that the item was created
    968            //    but the data was not copied in the previous upgrade process).
    969            if ( ( ( dupLen == 0 ) && ( bindLen != newLen ) ) ||
    970                 ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs > 0 ) ) )
   \   00008D   E5..         MOV     A,?V4
   \   00008F   45..         ORL     A,?V5
   \   000091   700A         JNZ     ??BindUpgradeTableInNV_1
   \   000093   E5..         MOV     A,?V0
   \   000095   6E           XRL     A,R6
   \   000096   7003         JNZ     ??BindUpgradeTableInNV_2
   \   000098   E5..         MOV     A,?V1
   \   00009A   6F           XRL     A,R7
   \                     ??BindUpgradeTableInNV_2:
   \   00009B   7019         JNZ     ??BindUpgradeTableInNV_3
   \                     ??BindUpgradeTableInNV_1:
   \   00009D   E5..         MOV     A,?V4
   \   00009F   45..         ORL     A,?V5
   \   0000A1   603D         JZ      ??BindUpgradeTableInNV_4
   \   0000A3   EE           MOV     A,R6
   \   0000A4   4F           ORL     A,R7
   \   0000A5   6039         JZ      ??BindUpgradeTableInNV_4
   \   0000A7   85..82       MOV     DPL,?XSP + 0
   \   0000AA   85..83       MOV     DPH,?XSP + 1
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F8           MOV     R0,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F9           MOV     R1,A
   \   0000B2   E8           MOV     A,R0
   \   0000B3   49           ORL     A,R1
   \   0000B4   602A         JZ      ??BindUpgradeTableInNV_4
    971            {
    972              // Create a copy from original NV item into a duplicate NV item
    973              if ( ( status = nwkCreateDuplicateNV( ZCD_NV_BINDING_TABLE,
    974                                                    ZCD_NV_DUPLICATE_BINDING_TABLE ) ) == ZSuccess )
   \                     ??BindUpgradeTableInNV_3:
   \   0000B6                ; Setup parameters for call to function nwkCreateDuplicateNV
   \   0000B6   7C00         MOV     R4,#0x0
   \   0000B8   7D03         MOV     R5,#0x3
   \   0000BA   7A41         MOV     R2,#0x41
   \   0000BC   7B00         MOV     R3,#0x0
   \   0000BE   12....       LCALL   `??nwkCreateDuplicateNV::?relay`; Banked call to: nwkCreateDuplicateNV
   \   0000C1   E9           MOV     A,R1
   \   0000C2   F8           MOV     R0,A
   \   0000C3   88..         MOV     ?V2,R0
   \   0000C5   E8           MOV     A,R0
   \   0000C6   7042         JNZ     ??BindUpgradeTableInNV_5
    975              {
    976                // Delete the original NV item once the duplicate is ready
    977                if ( osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen ) != ZSuccess )
   \   0000C8                ; Setup parameters for call to function osal_nv_delete
   \   0000C8   EE           MOV     A,R6
   \   0000C9   FC           MOV     R4,A
   \   0000CA   EF           MOV     A,R7
   \   0000CB   FD           MOV     R5,A
   \   0000CC   7A41         MOV     R2,#0x41
   \   0000CE   7B00         MOV     R3,#0x0
   \   0000D0   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   0000D3   E9           MOV     A,R1
   \   0000D4   6005         JZ      ??BindUpgradeTableInNV_6
    978                {
    979                  status = ZFailure;
   \   0000D6   75..01       MOV     ?V2,#0x1
   \   0000D9   802F         SJMP    ??BindUpgradeTableInNV_5
    980                }
    981                else
    982                {
    983                  duplicateReady = TRUE;
   \                     ??BindUpgradeTableInNV_6:
   \   0000DB   75..01       MOV     ?V3,#0x1
   \   0000DE   802A         SJMP    ??BindUpgradeTableInNV_5
    984                }
    985              }
    986            }
    987            else if ( ( ( dupLen > 0 ) && ( bindLen == 0 ) ) ||
    988                      ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs == 0 ) ) )
   \                     ??BindUpgradeTableInNV_4:
   \   0000E0   E5..         MOV     A,?V4
   \   0000E2   45..         ORL     A,?V5
   \   0000E4   6004         JZ      ??BindUpgradeTableInNV_7
   \   0000E6   EE           MOV     A,R6
   \   0000E7   4F           ORL     A,R7
   \   0000E8   6019         JZ      ??BindUpgradeTableInNV_8
   \                     ??BindUpgradeTableInNV_7:
   \   0000EA   E5..         MOV     A,?V4
   \   0000EC   45..         ORL     A,?V5
   \   0000EE   601A         JZ      ??BindUpgradeTableInNV_5
   \   0000F0   EE           MOV     A,R6
   \   0000F1   4F           ORL     A,R7
   \   0000F2   6016         JZ      ??BindUpgradeTableInNV_5
   \   0000F4   85..82       MOV     DPL,?XSP + 0
   \   0000F7   85..83       MOV     DPH,?XSP + 1
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F8           MOV     R0,A
   \   0000FC   A3           INC     DPTR
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F9           MOV     R1,A
   \   0000FF   E8           MOV     A,R0
   \   000100   49           ORL     A,R1
   \   000101   7007         JNZ     ??BindUpgradeTableInNV_5
    989            {
    990              // If for some reason a duplicate NV item was left in the system from a
    991              // previous upgrade process and:
    992              // 1) The original Binding NV item DOES NOT exist OR
    993              // 2) The original Binding NV item exist, but has no valid records.
    994              // it is necessary to rely in the data in the Duplicate item to create
    995              // the Binding table
    996              bindLen = dupLen;
   \                     ??BindUpgradeTableInNV_8:
   \   000103   AE..         MOV     R6,?V4
   \   000105   AF..         MOV     R7,?V5
    997          
    998              duplicateReady = TRUE;
   \   000107   75..01       MOV     ?V3,#0x1
    999            }
   1000          
   1001            if ( duplicateReady == TRUE )
   \                     ??BindUpgradeTableInNV_5:
   \   00010A   7401         MOV     A,#0x1
   \   00010C   65..         XRL     A,?V3
   \   00010E   700E         JNZ     ??BindUpgradeTableInNV_9
   1002            {
   1003              // Creates the New Binding table, Copy data from backup and Delete backup NV ID
   1004              status = BindCopyBackupToNewNV( bindLen, newLen );
   \   000110                ; Setup parameters for call to function BindCopyBackupToNewNV
   \   000110   AC..         MOV     R4,?V0
   \   000112   AD..         MOV     R5,?V1
   \   000114   EE           MOV     A,R6
   \   000115   FA           MOV     R2,A
   \   000116   EF           MOV     A,R7
   \   000117   FB           MOV     R3,A
   \   000118   12....       LCALL   `??BindCopyBackupToNewNV::?relay`; Banked call to: BindCopyBackupToNewNV
   \   00011B   E9           MOV     A,R1
   \   00011C   F5..         MOV     ?V2,A
   1005            }
   1006          
   1007            return ( status );
   \                     ??BindUpgradeTableInNV_9:
   \   00011E   A9..         MOV     R1,?V2
   \   000120   7402         MOV     A,#0x2
   \   000122   12....       LCALL   ?DEALLOC_XSTACK8
   \   000125   7F08         MOV     R7,#0x8
   \   000127   02....       LJMP    ?BANKED_LEAVE_XDATA
   1008          }
   1009          
   1010          /*********************************************************************
   1011           * @fn          BindRestoreFromNV
   1012           *
   1013           * @brief       Restore the binding table from NV
   1014           *
   1015           * @param       none
   1016           *
   1017           * @return      Number of entries restored
   1018           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1019          uint16 BindRestoreFromNV( void )
   \                     BindRestoreFromNV:
   1020          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1021            nvBindingHdr_t hdr;
   1022          
   1023            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   1024          
   1025            if ( BindUpgradeTableInNV() == ZSuccess )
   \   000017                ; Setup parameters for call to function BindUpgradeTableInNV
   \   000017   12....       LCALL   `??BindUpgradeTableInNV::?relay`; Banked call to: BindUpgradeTableInNV
   \   00001A   E9           MOV     A,R1
   \   00001B   6003         JZ      $+5
   \   00001D   02....       LJMP    ??BindRestoreFromNV_0 & 0xFFFF
   1026            {
   1027              if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
   \   000020                ; Setup parameters for call to function osal_nv_read
   \   000020   A8..         MOV     R0,?XSP + 0
   \   000022   A9..         MOV     R1,?XSP + 1
   \   000024   88..         MOV     ?V0,R0
   \   000026   89..         MOV     ?V1,R1
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..02       MOV     ?V0,#0x2
   \   000030   75..00       MOV     ?V1,#0x0
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A41         MOV     R2,#0x41
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   6003         JZ      $+5
   \   00004B   02....       LJMP    ??BindRestoreFromNV_0 & 0xFFFF
   1028              {
   1029                bindTableIndex_t x;
   1030                uint16 validRecsCount = 0;
   \   00004E   7E00         MOV     R6,#0x0
   \   000050   7F00         MOV     R7,#0x0
   1031          
   1032                // Read in the device list
   1033                for ( x = 0; ( x < gNWK_MAX_BINDING_ENTRIES ) && ( validRecsCount < hdr.numRecs ); x++ )
   \   000052   75..00       MOV     ?V0,#0x0
   \                     ??BindRestoreFromNV_1:
   \   000055   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000058   E4           CLR     A
   \   000059   93           MOVC    A,@A+DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   E5..         MOV     A,?V0
   \   00005D   C3           CLR     C
   \   00005E   98           SUBB    A,R0
   \   00005F   4003         JC      $+5
   \   000061   02....       LJMP    ??BindRestoreFromNV_0 & 0xFFFF
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F8           MOV     R0,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   C3           CLR     C
   \   000070   EE           MOV     A,R6
   \   000071   98           SUBB    A,R0
   \   000072   EF           MOV     A,R7
   \   000073   99           SUBB    A,R1
   \   000074   4003         JC      $+5
   \   000076   02....       LJMP    ??BindRestoreFromNV_0 & 0xFFFF
   1034                {
   1035                  if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
   1036                                     (uint16)(sizeof(nvBindingHdr_t) + (x * NV_BIND_REC_SIZE)),
   1037                                     NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
   \   000079                ; Setup parameters for call to function osal_nv_read
   \   000079   A8..         MOV     R0,?V0
   \   00007B   7900         MOV     R1,#0x0
   \   00007D   E8           MOV     A,R0
   \   00007E   75F00E       MOV     B,#0xe
   \   000081   A4           MUL     AB
   \   000082   C8           XCH     A,R0
   \   000083   AAF0         MOV     R2,B
   \   000085   75F000       MOV     B,#0x0
   \   000088   A4           MUL     AB
   \   000089   2A           ADD     A,R2
   \   00008A   FA           MOV     R2,A
   \   00008B   75F00E       MOV     B,#0xe
   \   00008E   E9           MOV     A,R1
   \   00008F   A4           MUL     AB
   \   000090   2A           ADD     A,R2
   \   000091   F9           MOV     R1,A
   \   000092   74..         MOV     A,#BindingTable & 0xff
   \   000094   28           ADD     A,R0
   \   000095   F5..         MOV     ?V2,A
   \   000097   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000099   39           ADDC    A,R1
   \   00009A   F5..         MOV     ?V3,A
   \   00009C   78..         MOV     R0,#?V2
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   0000A4   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   0000A7   A8..         MOV     R0,?V0
   \   0000A9   7900         MOV     R1,#0x0
   \   0000AB   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   0000AE   E4           CLR     A
   \   0000AF   93           MOVC    A,@A+DPTR
   \   0000B0   F5..         MOV     ?V2,A
   \   0000B2   7401         MOV     A,#0x1
   \   0000B4   93           MOVC    A,@A+DPTR
   \   0000B5   F5..         MOV     ?V3,A
   \   0000B7   E8           MOV     A,R0
   \   0000B8   85..F0       MOV     B,?V2
   \   0000BB   A4           MUL     AB
   \   0000BC   C8           XCH     A,R0
   \   0000BD   AAF0         MOV     R2,B
   \   0000BF   85..F0       MOV     B,?V3
   \   0000C2   A4           MUL     AB
   \   0000C3   2A           ADD     A,R2
   \   0000C4   FA           MOV     R2,A
   \   0000C5   85..F0       MOV     B,?V2
   \   0000C8   E9           MOV     A,R1
   \   0000C9   A4           MUL     AB
   \   0000CA   2A           ADD     A,R2
   \   0000CB   F9           MOV     R1,A
   \   0000CC   E8           MOV     A,R0
   \   0000CD   2402         ADD     A,#0x2
   \   0000CF   FC           MOV     R4,A
   \   0000D0   E4           CLR     A
   \   0000D1   39           ADDC    A,R1
   \   0000D2   FD           MOV     R5,A
   \   0000D3   7A41         MOV     R2,#0x41
   \   0000D5   7B00         MOV     R3,#0x0
   \   0000D7   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000DA   7404         MOV     A,#0x4
   \   0000DC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DF   E9           MOV     A,R1
   \   0000E0   702D         JNZ     ??BindRestoreFromNV_2
   1038                  {
   1039                    if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \   0000E2   A8..         MOV     R0,?V0
   \   0000E4   7900         MOV     R1,#0x0
   \   0000E6   E8           MOV     A,R0
   \   0000E7   75F00E       MOV     B,#0xe
   \   0000EA   A4           MUL     AB
   \   0000EB   C8           XCH     A,R0
   \   0000EC   AAF0         MOV     R2,B
   \   0000EE   75F000       MOV     B,#0x0
   \   0000F1   A4           MUL     AB
   \   0000F2   2A           ADD     A,R2
   \   0000F3   FA           MOV     R2,A
   \   0000F4   75F00E       MOV     B,#0xe
   \   0000F7   E9           MOV     A,R1
   \   0000F8   A4           MUL     AB
   \   0000F9   2A           ADD     A,R2
   \   0000FA   F9           MOV     R1,A
   \   0000FB   74..         MOV     A,#BindingTable & 0xff
   \   0000FD   28           ADD     A,R0
   \   0000FE   F582         MOV     DPL,A
   \   000100   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000102   39           ADDC    A,R1
   \   000103   F583         MOV     DPH,A
   \   000105   E0           MOVX    A,@DPTR
   \   000106   64FF         XRL     A,#0xff
   \   000108   6005         JZ      ??BindRestoreFromNV_2
   1040                    {
   1041                      validRecsCount++;
   \   00010A   0E           INC     R6
   \   00010B   EE           MOV     A,R6
   \   00010C   7001         JNZ     ??BindRestoreFromNV_2
   \   00010E   0F           INC     R7
   1042                    }
   1043                  }
   1044                }
   \                     ??BindRestoreFromNV_2:
   \   00010F   05..         INC     ?V0
   \   000111   02....       LJMP    ??BindRestoreFromNV_1 & 0xFFFF
   1045              }
   1046            }
   1047            return ( hdr.numRecs );
   \                     ??BindRestoreFromNV_0:
   \   000114   85..82       MOV     DPL,?XSP + 0
   \   000117   85..83       MOV     DPH,?XSP + 1
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   FA           MOV     R2,A
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   FB           MOV     R3,A
   \   00011F   7402         MOV     A,#0x2
   \   000121   12....       LCALL   ?DEALLOC_XSTACK8
   \   000124   7F04         MOV     R7,#0x4
   \   000126   02....       LJMP    ?BANKED_LEAVE_XDATA
   1048          }
   1049          
   1050          /*********************************************************************
   1051           * @fn          BindWriteNV
   1052           *
   1053           * @brief       Save the Binding Table in NV
   1054           *
   1055           * @param       none
   1056           *
   1057           * @return      none
   1058           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1059          void BindWriteNV( void )
   \                     BindWriteNV:
   1060          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1061            BindingEntry_t *pBind;
   1062            BindingEntry_t bind;
   1063            nvBindingHdr_t hdr;
   1064            bindTableIndex_t x;
   1065          
   1066            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   1067          
   1068            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000017   7E00         MOV     R6,#0x0
   \                     ??BindWriteNV_0:
   \   000019   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001C   E4           CLR     A
   \   00001D   93           MOVC    A,@A+DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   EE           MOV     A,R6
   \   000020   C3           CLR     C
   \   000021   98           SUBB    A,R0
   \   000022   4003         JC      $+5
   \   000024   02....       LJMP    ??BindWriteNV_1 & 0xFFFF
   1069            {
   1070              pBind = &BindingTable[x];
   \   000027   EE           MOV     A,R6
   \   000028   F8           MOV     R0,A
   \   000029   7900         MOV     R1,#0x0
   \   00002B   E8           MOV     A,R0
   \   00002C   75F00E       MOV     B,#0xe
   \   00002F   A4           MUL     AB
   \   000030   C8           XCH     A,R0
   \   000031   AAF0         MOV     R2,B
   \   000033   75F000       MOV     B,#0x0
   \   000036   A4           MUL     AB
   \   000037   2A           ADD     A,R2
   \   000038   FA           MOV     R2,A
   \   000039   75F00E       MOV     B,#0xe
   \   00003C   E9           MOV     A,R1
   \   00003D   A4           MUL     AB
   \   00003E   2A           ADD     A,R2
   \   00003F   F9           MOV     R1,A
   \   000040   74..         MOV     A,#BindingTable & 0xff
   \   000042   28           ADD     A,R0
   \   000043   F8           MOV     R0,A
   \   000044   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000046   39           ADDC    A,R1
   \   000047   F9           MOV     R1,A
   \   000048   88..         MOV     ?V0,R0
   \   00004A   89..         MOV     ?V1,R1
   1071          
   1072              osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
   \   00004C                ; Setup parameters for call to function osal_memcpy
   \   00004C   85....       MOV     ?V4,?V0
   \   00004F   85....       MOV     ?V5,?V1
   \   000052   75..00       MOV     ?V6,#0x0
   \   000055   78..         MOV     R0,#?V4
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005A   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   00005D   E4           CLR     A
   \   00005E   93           MOVC    A,@A+DPTR
   \   00005F   FC           MOV     R4,A
   \   000060   7401         MOV     A,#0x1
   \   000062   93           MOVC    A,@A+DPTR
   \   000063   FD           MOV     R5,A
   \   000064   7405         MOV     A,#0x5
   \   000066   12....       LCALL   ?XSTACK_DISP101_8
   \   000069   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   1073          
   1074              // Save the record to NV
   1075              osal_nv_write( ZCD_NV_BINDING_TABLE,
   1076                             (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
   1077                             NV_BIND_REC_SIZE, &bind );
   \   000071                ; Setup parameters for call to function osal_nv_write
   \   000071   7402         MOV     A,#0x2
   \   000073   12....       LCALL   ?XSTACK_DISP100_8
   \   000076   88..         MOV     ?V2,R0
   \   000078   89..         MOV     ?V3,R1
   \   00007A   78..         MOV     R0,#?V2
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007F   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000082   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   000085   EE           MOV     A,R6
   \   000086   F8           MOV     R0,A
   \   000087   7900         MOV     R1,#0x0
   \   000089   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   00008C   E4           CLR     A
   \   00008D   93           MOVC    A,@A+DPTR
   \   00008E   F5..         MOV     ?V2,A
   \   000090   7401         MOV     A,#0x1
   \   000092   93           MOVC    A,@A+DPTR
   \   000093   F5..         MOV     ?V3,A
   \   000095   E8           MOV     A,R0
   \   000096   85..F0       MOV     B,?V2
   \   000099   A4           MUL     AB
   \   00009A   C8           XCH     A,R0
   \   00009B   AAF0         MOV     R2,B
   \   00009D   85..F0       MOV     B,?V3
   \   0000A0   A4           MUL     AB
   \   0000A1   2A           ADD     A,R2
   \   0000A2   FA           MOV     R2,A
   \   0000A3   85..F0       MOV     B,?V2
   \   0000A6   E9           MOV     A,R1
   \   0000A7   A4           MUL     AB
   \   0000A8   2A           ADD     A,R2
   \   0000A9   F9           MOV     R1,A
   \   0000AA   E8           MOV     A,R0
   \   0000AB   2402         ADD     A,#0x2
   \   0000AD   FC           MOV     R4,A
   \   0000AE   E4           CLR     A
   \   0000AF   39           ADDC    A,R1
   \   0000B0   FD           MOV     R5,A
   \   0000B1   7A41         MOV     R2,#0x41
   \   0000B3   7B00         MOV     R3,#0x0
   \   0000B5   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B8   7404         MOV     A,#0x4
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BD   E9           MOV     A,R1
   1078          
   1079              if ( pBind->srcEP != NV_BIND_EMPTY )
   \   0000BE   85..82       MOV     DPL,?V0
   \   0000C1   85..83       MOV     DPH,?V1
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   64FF         XRL     A,#0xff
   \   0000C7   600F         JZ      ??BindWriteNV_2
   1080              {
   1081                hdr.numRecs++;
   \   0000C9   85..82       MOV     DPL,?XSP + 0
   \   0000CC   85..83       MOV     DPH,?XSP + 1
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   2401         ADD     A,#0x1
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   3400         ADDC    A,#0x0
   \   0000D7   F0           MOVX    @DPTR,A
   1082              }
   1083            }
   \                     ??BindWriteNV_2:
   \   0000D8   0E           INC     R6
   \   0000D9   02....       LJMP    ??BindWriteNV_0 & 0xFFFF
   1084          
   1085            // Save off the header
   1086            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \                     ??BindWriteNV_1:
   \   0000DC                ; Setup parameters for call to function osal_nv_write
   \   0000DC   A8..         MOV     R0,?XSP + 0
   \   0000DE   A9..         MOV     R1,?XSP + 1
   \   0000E0   88..         MOV     ?V2,R0
   \   0000E2   89..         MOV     ?V3,R1
   \   0000E4   78..         MOV     R0,#?V2
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E9   75..02       MOV     ?V2,#0x2
   \   0000EC   75..00       MOV     ?V3,#0x0
   \   0000EF   78..         MOV     R0,#?V2
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F4   7C00         MOV     R4,#0x0
   \   0000F6   7D00         MOV     R5,#0x0
   \   0000F8   7A41         MOV     R2,#0x41
   \   0000FA   7B00         MOV     R3,#0x0
   \   0000FC   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000FF   7404         MOV     A,#0x4
   \   000101   12....       LCALL   ?DEALLOC_XSTACK8
   \   000104   E9           MOV     A,R1
   1087          }
   \   000105   7410         MOV     A,#0x10
   \   000107   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010A   7F07         MOV     R7,#0x7
   \   00010C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1088          
   1089          /*********************************************************************
   1090           * @fn          bindUpdateAddr
   1091           *
   1092           * @brief       Update the network address in the binding table.
   1093           *
   1094           * @param       oldAddr - old network address
   1095           * @param       newAddr - new network address
   1096           *
   1097           * @return      none
   1098           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1099          void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
   \                     bindUpdateAddr:
   1100          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1101            uint16 oldIdx;
   1102            uint16 newIdx;
   1103            zAddrType_t addr;
   1104            bindTableIndex_t x;
   1105            BindingEntry_t *pBind;
   1106          
   1107            addr.addrMode = Addr16Bit;
   \   000012   7408         MOV     A,#0x8
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7402         MOV     A,#0x2
   \   000019   F0           MOVX    @DPTR,A
   1108            addr.addr.shortAddr = oldAddr;
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   E5..         MOV     A,?V2
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E5..         MOV     A,?V3
   \   000026   F0           MOVX    @DPTR,A
   1109            oldIdx = bindingAddrMgsHelperFind( &addr );
   \   000027                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000027   AA..         MOV     R2,?XSP + 0
   \   000029   AB..         MOV     R3,?XSP + 1
   \   00002B   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   00002E   8A..         MOV     ?V10,R2
   \   000030   8B..         MOV     ?V11,R3
   \   000032   85....       MOV     ?V0,?V10
   \   000035   85....       MOV     ?V1,?V11
   1110            addr.addr.shortAddr = newAddr;
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   EE           MOV     A,R6
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   EF           MOV     A,R7
   \   000042   F0           MOVX    @DPTR,A
   1111            newIdx = bindingAddrMgsHelperFind( &addr );
   \   000043                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000043   AA..         MOV     R2,?XSP + 0
   \   000045   AB..         MOV     R3,?XSP + 1
   \   000047   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   00004A   8A..         MOV     ?V10,R2
   \   00004C   8B..         MOV     ?V11,R3
   \   00004E   85....       MOV     ?V6,?V10
   \   000051   85....       MOV     ?V7,?V11
   1112          
   1113            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000054   75..00       MOV     ?V8,#0x0
   \                     ??bindUpdateAddr_0:
   \   000057   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00005A   E4           CLR     A
   \   00005B   93           MOVC    A,@A+DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   E5..         MOV     A,?V8
   \   00005F   C3           CLR     C
   \   000060   98           SUBB    A,R0
   \   000061   504B         JNC     ??bindUpdateAddr_1
   1114            {
   1115              pBind = &BindingTable[x];
   \   000063   A8..         MOV     R0,?V8
   \   000065   7900         MOV     R1,#0x0
   \   000067   E8           MOV     A,R0
   \   000068   75F00E       MOV     B,#0xe
   \   00006B   A4           MUL     AB
   \   00006C   C8           XCH     A,R0
   \   00006D   AAF0         MOV     R2,B
   \   00006F   75F000       MOV     B,#0x0
   \   000072   A4           MUL     AB
   \   000073   2A           ADD     A,R2
   \   000074   FA           MOV     R2,A
   \   000075   75F00E       MOV     B,#0xe
   \   000078   E9           MOV     A,R1
   \   000079   A4           MUL     AB
   \   00007A   2A           ADD     A,R2
   \   00007B   F9           MOV     R1,A
   \   00007C   74..         MOV     A,#BindingTable & 0xff
   \   00007E   28           ADD     A,R0
   \   00007F   F8           MOV     R0,A
   \   000080   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000082   39           ADDC    A,R1
   \   000083   F9           MOV     R1,A
   \   000084   88..         MOV     ?V4,R0
   \   000086   89..         MOV     ?V5,R1
   1116          
   1117              if ( pBind->dstIdx == oldIdx )
   \   000088   85..82       MOV     DPL,?V4
   \   00008B   85..83       MOV     DPH,?V5
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   65..         XRL     A,?V0
   \   000093   7004         JNZ     ??bindUpdateAddr_2
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   65..         XRL     A,?V1
   \                     ??bindUpdateAddr_2:
   \   000099   700F         JNZ     ??bindUpdateAddr_3
   1118              {
   1119                pBind->dstIdx = newIdx;
   \   00009B   85..82       MOV     DPL,?V4
   \   00009E   85..83       MOV     DPH,?V5
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   E5..         MOV     A,?V6
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E5..         MOV     A,?V7
   \   0000A9   F0           MOVX    @DPTR,A
   1120              }
   1121            }
   \                     ??bindUpdateAddr_3:
   \   0000AA   05..         INC     ?V8
   \   0000AC   80A9         SJMP    ??bindUpdateAddr_0
   1122          }
   \                     ??bindUpdateAddr_1:
   \   0000AE   7409         MOV     A,#0x9
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B3   7F0C         MOV     R7,#0xc
   \   0000B5   02....       LJMP    ?BANKED_LEAVE_XDATA
   1123          
   1124          /*********************************************************************
   1125           * @fn      bindingAddrMgsHelperFind
   1126           *
   1127           * @brief   Turns an zAddrType_t to an Addr Manager index
   1128           *
   1129           * @param   addr - zAddrType_t
   1130           *
   1131           * @return  INVALID_NODE_ADDR if not found, otherwise an index
   1132           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1133          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
   \                     bindingAddrMgsHelperFind:
   1134          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1135            AddrMgrEntry_t entry;
   1136          
   1137            // Resolve addresses with the address manager
   1138            entry.user = ADDRMGR_USER_BINDING;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7404         MOV     A,#0x4
   \   000016   F0           MOVX    @DPTR,A
   1139            if ( addr->addrMode == Addr16Bit )
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6402         XRL     A,#0x2
   \   000026   701D         JNZ     ??bindingAddrMgsHelperFind_0
   1140            {
   1141              entry.nwkAddr = addr->addr.shortAddr;
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   E8           MOV     A,R0
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   E9           MOV     A,R1
   \   00003A   F0           MOVX    @DPTR,A
   1142              AddrMgrEntryLookupNwk( &entry );
   \   00003B                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00003B   AA..         MOV     R2,?XSP + 0
   \   00003D   AB..         MOV     R3,?XSP + 1
   \   00003F   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000042   E9           MOV     A,R1
   \   000043   8018         SJMP    ??bindingAddrMgsHelperFind_1
   1143            }
   1144            else
   1145            {
   1146              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \                     ??bindingAddrMgsHelperFind_0:
   \   000045                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000045   EE           MOV     A,R6
   \   000046   FC           MOV     R4,A
   \   000047   EF           MOV     A,R7
   \   000048   FD           MOV     R5,A
   \   000049   7403         MOV     A,#0x3
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   AA82         MOV     R2,DPL
   \   000050   AB83         MOV     R3,DPH
   \   000052   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1147              AddrMgrEntryLookupExt( &entry );
   \   000055                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000055   AA..         MOV     R2,?XSP + 0
   \   000057   AB..         MOV     R3,?XSP + 1
   \   000059   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00005C   E9           MOV     A,R1
   1148            }
   1149          
   1150            return ( entry.index );
   \                     ??bindingAddrMgsHelperFind_1:
   \   00005D   740B         MOV     A,#0xb
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FB           MOV     R3,A
   \   000067   740D         MOV     A,#0xd
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   7F01         MOV     R7,#0x1
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1151          }
   1152          
   1153          /*********************************************************************
   1154           * @fn      bindingAddrMgsHelperConvert
   1155           *
   1156           * @brief   Convert an index into an zAddrType_t
   1157           *
   1158           * @param   idx -
   1159           * @param   addr - zAddrType_t
   1160           *
   1161           * @return  TRUE if found, FALSE if not
   1162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1163          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
   \                     bindingAddrMgsHelperConvert:
   1164          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1165            AddrMgrEntry_t entry;
   1166            uint8 stat;
   1167          
   1168            // Resolve addresses with the address manager
   1169            entry.user = ADDRMGR_USER_BINDING;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   7404         MOV     A,#0x4
   \   00001A   F0           MOVX    @DPTR,A
   1170            entry.index = idx;
   \   00001B   740B         MOV     A,#0xb
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E5..         MOV     A,?V2
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E5..         MOV     A,?V3
   \   000026   F0           MOVX    @DPTR,A
   1171            stat = AddrMgrEntryGet( &entry );
   \   000027                ; Setup parameters for call to function AddrMgrEntryGet
   \   000027   AA..         MOV     R2,?XSP + 0
   \   000029   AB..         MOV     R3,?XSP + 1
   \   00002B   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   00002E   E9           MOV     A,R1
   \   00002F   F5..         MOV     ?V0,A
   1172            if ( stat )
   \   000031   E5..         MOV     A,?V0
   \   000033   601F         JZ      ??bindingAddrMgsHelperConvert_0
   1173            {
   1174              addr->addrMode = Addr64Bit;
   \   000035   8E82         MOV     DPL,R6
   \   000037   8F83         MOV     DPH,R7
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   7403         MOV     A,#0x3
   \   000043   F0           MOVX    @DPTR,A
   1175              osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
   \   000044                ; Setup parameters for call to function sAddrExtCpy
   \   000044   7403         MOV     A,#0x3
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   AC82         MOV     R4,DPL
   \   00004B   AD83         MOV     R5,DPH
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1176            }
   1177          
   1178            return ( stat );
   \                     ??bindingAddrMgsHelperConvert_0:
   \   000054   A9..         MOV     R1,?V0
   \   000056   740D         MOV     A,#0xd
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   7F04         MOV     R7,#0x4
   \   00005D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1179          }
   1180          
   1181          /*********************************************************************
   1182           * @fn      bindingAddrMgsHelperConvertShort
   1183           *
   1184           * @brief   Convert an index into a short address
   1185           *
   1186           * @param   idx -
   1187           *
   1188           * @return  INVALID_NODE_ADDR if not available, otherwise the short address
   1189           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1190          uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
   \                     bindingAddrMgsHelperConvertShort:
   1191          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1192            AddrMgrEntry_t entry;
   1193          
   1194            // Resolve addresses with the address manager
   1195            entry.user = ADDRMGR_USER_BINDING;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7404         MOV     A,#0x4
   \   000016   F0           MOVX    @DPTR,A
   1196            entry.index = idx;
   \   000017   740B         MOV     A,#0xb
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   EE           MOV     A,R6
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   EF           MOV     A,R7
   \   000020   F0           MOVX    @DPTR,A
   1197            AddrMgrEntryGet( &entry );
   \   000021                ; Setup parameters for call to function AddrMgrEntryGet
   \   000021   AA..         MOV     R2,?XSP + 0
   \   000023   AB..         MOV     R3,?XSP + 1
   \   000025   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000028   E9           MOV     A,R1
   1198          
   1199            return ( entry.nwkAddr );
   \   000029   7401         MOV     A,#0x1
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FA           MOV     R2,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FB           MOV     R3,A
   \   000033   740D         MOV     A,#0xd
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   7F01         MOV     R7,#0x1
   \   00003A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1200          }
   1201          
   1202          /*********************************************************************
   1203           * @fn      bindAddrMgrLocalLoad
   1204           *
   1205           * @brief   Load local(self and parent) address information into
   1206           *          Address Manager
   1207           *
   1208           * @param   none
   1209           *
   1210           * @return  none
   1211           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1212          void bindAddrMgrLocalLoad( void )
   \                     bindAddrMgrLocalLoad:
   1213          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1214            AddrMgrEntry_t entry;
   1215            uint16         parent;
   1216          
   1217            // add "local"(self and parent) address informtion into the Address
   1218            // Manager
   1219            if ( bindAddrMgrLocalLoaded == FALSE )
   \   00000A   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6003         JZ      $+5
   \   000010   02....       LJMP    ??bindAddrMgrLocalLoad_0 & 0xFFFF
   1220            {
   1221              // add the device's address information
   1222              entry.user    = ADDRMGR_USER_BINDING;
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   7404         MOV     A,#0x4
   \   00001B   F0           MOVX    @DPTR,A
   1223              entry.nwkAddr = _NIB.nwkDevAddress;
   \   00001C   90....       MOV     DPTR,#_NIB + 20
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   7401         MOV     A,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E8           MOV     A,R0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   E9           MOV     A,R1
   \   00002D   F0           MOVX    @DPTR,A
   1224              AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
   \   00002E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00002E   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000031   8A..         MOV     ?V0,R2
   \   000033   8B..         MOV     ?V1,R3
   \   000035   AC..         MOV     R4,?V0
   \   000037   AD..         MOV     R5,?V1
   \   000039                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   AA82         MOV     R2,DPL
   \   000040   AB83         MOV     R3,DPH
   \   000042   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1225              AddrMgrEntryUpdate( &entry );
   \   000045                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000045   AA..         MOV     R2,?XSP + 0
   \   000047   AB..         MOV     R3,?XSP + 1
   \   000049   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00004C   E9           MOV     A,R1
   1226          
   1227              // make sure parent address is valid
   1228              parent = NLME_GetCoordShortAddr();
   \   00004D                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00004D   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000050   8A..         MOV     ?V0,R2
   \   000052   8B..         MOV     ?V1,R3
   \   000054   AE..         MOV     R6,?V0
   \   000056   AF..         MOV     R7,?V1
   1229              if ( ( parent != entry.nwkAddr     ) &&
   1230                   ( parent != INVALID_NODE_ADDR )    )
   \   000058   7401         MOV     A,#0x1
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   6E           XRL     A,R6
   \   00005F   7003         JNZ     ??bindAddrMgrLocalLoad_1
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   6F           XRL     A,R7
   \                     ??bindAddrMgrLocalLoad_1:
   \   000064   6028         JZ      ??bindAddrMgrLocalLoad_2
   \   000066   74FE         MOV     A,#-0x2
   \   000068   6E           XRL     A,R6
   \   000069   7003         JNZ     ??bindAddrMgrLocalLoad_3
   \   00006B   74FF         MOV     A,#-0x1
   \   00006D   6F           XRL     A,R7
   \                     ??bindAddrMgrLocalLoad_3:
   \   00006E   601E         JZ      ??bindAddrMgrLocalLoad_2
   1231              {
   1232                // add the parent's address information
   1233                entry.nwkAddr = parent;
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   EE           MOV     A,R6
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   EF           MOV     A,R7
   \   000079   F0           MOVX    @DPTR,A
   1234                NLME_GetCoordExtAddr( entry.extAddr );
   \   00007A                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00007A   7403         MOV     A,#0x3
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   AA82         MOV     R2,DPL
   \   000081   AB83         MOV     R3,DPH
   \   000083   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   1235                AddrMgrEntryUpdate( &entry );
   \   000086                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000086   AA..         MOV     R2,?XSP + 0
   \   000088   AB..         MOV     R3,?XSP + 1
   \   00008A   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00008D   E9           MOV     A,R1
   1236              }
   1237          
   1238              bindAddrMgrLocalLoaded = TRUE;
   \                     ??bindAddrMgrLocalLoad_2:
   \   00008E   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   000091   7401         MOV     A,#0x1
   \   000093   F0           MOVX    @DPTR,A
   1239            }
   1240          }
   \                     ??bindAddrMgrLocalLoad_0:
   \   000094   740D         MOV     A,#0xd
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   7F02         MOV     R7,#0x2
   \   00009B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1241          
   1242          /*********************************************************************
   1243           * @fn      bindAddrIndexGet
   1244           *
   1245           * @brief   Get bind address index.
   1246           *
   1247           * @param   addr - <zAddrType_t>
   1248           *
   1249           * @return  (uint16) address index
   1250           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1251          uint16 bindAddrIndexGet( zAddrType_t* addr )
   \                     bindAddrIndexGet:
   1252          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1253            AddrMgrEntry_t entry;
   1254            uint8          update;
   1255          
   1256            update = FALSE;
   \   00000E   75..00       MOV     ?V0,#0x0
   1257          
   1258            // sync binding addresses with the address manager
   1259            entry.user = ADDRMGR_USER_BINDING;
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   7404         MOV     A,#0x4
   \   000019   F0           MOVX    @DPTR,A
   1260          
   1261            if ( addr->addrMode == Addr16Bit )
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6402         XRL     A,#0x2
   \   000029   7022         JNZ     ??bindAddrIndexGet_0
   1262            {
   1263              entry.nwkAddr = addr->addr.shortAddr;
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
   1264          
   1265              if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
   \   00003E                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00003E   AA..         MOV     R2,?XSP + 0
   \   000040   AB..         MOV     R3,?XSP + 1
   \   000042   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000045   E9           MOV     A,R1
   \   000046   7067         JNZ     ??bindAddrIndexGet_1
   1266              {
   1267                update = TRUE;
   \   000048   75..01       MOV     ?V0,#0x1
   \   00004B   8062         SJMP    ??bindAddrIndexGet_1
   1268              }
   1269            }
   1270            else if ( addr->addrMode == Addr64Bit )
   \                     ??bindAddrIndexGet_0:
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6403         XRL     A,#0x3
   \   00005C   701F         JNZ     ??bindAddrIndexGet_2
   1271            {
   1272              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \   00005E                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00005E   EE           MOV     A,R6
   \   00005F   FC           MOV     R4,A
   \   000060   EF           MOV     A,R7
   \   000061   FD           MOV     R5,A
   \   000062   7403         MOV     A,#0x3
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   AA82         MOV     R2,DPL
   \   000069   AB83         MOV     R3,DPH
   \   00006B   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1273          
   1274              if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
   \   00006E                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00006E   AA..         MOV     R2,?XSP + 0
   \   000070   AB..         MOV     R3,?XSP + 1
   \   000072   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000075   E9           MOV     A,R1
   \   000076   7037         JNZ     ??bindAddrIndexGet_1
   1275              {
   1276                update = TRUE;
   \   000078   75..01       MOV     ?V0,#0x1
   \   00007B   8032         SJMP    ??bindAddrIndexGet_1
   1277              }
   1278            }
   1279            else if ( addr->addrMode == AddrGroup )
   \                     ??bindAddrIndexGet_2:
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   6401         XRL     A,#0x1
   \   00008C   7015         JNZ     ??bindAddrIndexGet_3
   1280            {
   1281              entry.index = addr->addr.shortAddr;
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F8           MOV     R0,A
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F9           MOV     R1,A
   \   000097   740B         MOV     A,#0xb
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   E8           MOV     A,R0
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   E9           MOV     A,R1
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   800C         SJMP    ??bindAddrIndexGet_1
   1282            }
   1283            else
   1284            {
   1285              entry.index = INVALID_NODE_ADDR;
   \                     ??bindAddrIndexGet_3:
   \   0000A3   740B         MOV     A,#0xb
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   74FE         MOV     A,#-0x2
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   74FF         MOV     A,#-0x1
   \   0000AE   F0           MOVX    @DPTR,A
   1286            }
   1287          
   1288            if ( update )
   \                     ??bindAddrIndexGet_1:
   \   0000AF   E5..         MOV     A,?V0
   \   0000B1   6008         JZ      ??bindAddrIndexGet_4
   1289            {
   1290              AddrMgrEntryUpdate( &entry );
   \   0000B3                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   0000B3   AA..         MOV     R2,?XSP + 0
   \   0000B5   AB..         MOV     R3,?XSP + 1
   \   0000B7   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   0000BA   E9           MOV     A,R1
   1291            }
   1292          
   1293            return entry.index;
   \                     ??bindAddrIndexGet_4:
   \   0000BB   740B         MOV     A,#0xb
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   FA           MOV     R2,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   FB           MOV     R3,A
   \   0000C5   740D         MOV     A,#0xd
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CA   7F01         MOV     R7,#0x1
   \   0000CC   02....       LJMP    ?BANKED_LEAVE_XDATA
   1294          }
   1295          
   1296          /*********************************************************************
   1297           * @fn      GetBindingTableEntry
   1298           *
   1299           * @brief   Get a pointer to the Nth valid binding table entry.
   1300           *
   1301           * @param   Nth valid entry being requested.
   1302           *
   1303           * @return  The Nth valid binding table entry.
   1304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1305          BindingEntry_t *GetBindingTableEntry( uint16 Nth )
   \                     GetBindingTableEntry:
   1306          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1307            BindingEntry_t *rtrn = NULL;
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   7B00         MOV     R3,#0x0
   1308          
   1309          #if defined ( REFLECTOR )
   1310            bindTableIndex_t idx, cnt = 0;
   \   00000D   7C00         MOV     R4,#0x0
   1311          
   1312            for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
   \   00000F   7D00         MOV     R5,#0x0
   \                     ??GetBindingTableEntry_0:
   \   000011   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000014   E4           CLR     A
   \   000015   93           MOVC    A,@A+DPTR
   \   000016   F8           MOV     R0,A
   \   000017   ED           MOV     A,R5
   \   000018   C3           CLR     C
   \   000019   98           SUBB    A,R0
   \   00001A   506D         JNC     ??GetBindingTableEntry_1
   1313            {
   1314              if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
   \   00001C   ED           MOV     A,R5
   \   00001D   F8           MOV     R0,A
   \   00001E   7900         MOV     R1,#0x0
   \   000020   E8           MOV     A,R0
   \   000021   75F00E       MOV     B,#0xe
   \   000024   A4           MUL     AB
   \   000025   C8           XCH     A,R0
   \   000026   85F0..       MOV     ?V0,B
   \   000029   75F000       MOV     B,#0x0
   \   00002C   A4           MUL     AB
   \   00002D   25..         ADD     A,?V0
   \   00002F   F5..         MOV     ?V0,A
   \   000031   75F00E       MOV     B,#0xe
   \   000034   E9           MOV     A,R1
   \   000035   A4           MUL     AB
   \   000036   25..         ADD     A,?V0
   \   000038   F9           MOV     R1,A
   \   000039   74..         MOV     A,#BindingTable & 0xff
   \   00003B   28           ADD     A,R0
   \   00003C   F582         MOV     DPL,A
   \   00003E   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000040   39           ADDC    A,R1
   \   000041   F583         MOV     DPH,A
   \   000043   E0           MOVX    A,@DPTR
   \   000044   64FF         XRL     A,#0xff
   \   000046   603E         JZ      ??GetBindingTableEntry_2
   1315              {
   1316                if ( cnt++ == Nth )
   \   000048   8C..         MOV     ?V1,R4
   \   00004A   7401         MOV     A,#0x1
   \   00004C   25..         ADD     A,?V1
   \   00004E   FC           MOV     R4,A
   \   00004F   A8..         MOV     R0,?V1
   \   000051   7900         MOV     R1,#0x0
   \   000053   EE           MOV     A,R6
   \   000054   68           XRL     A,R0
   \   000055   7002         JNZ     ??GetBindingTableEntry_3
   \   000057   EF           MOV     A,R7
   \   000058   69           XRL     A,R1
   \                     ??GetBindingTableEntry_3:
   \   000059   702B         JNZ     ??GetBindingTableEntry_2
   1317                {
   1318                  rtrn = BindingTable+idx;
   \   00005B   ED           MOV     A,R5
   \   00005C   F8           MOV     R0,A
   \   00005D   7900         MOV     R1,#0x0
   \   00005F   E8           MOV     A,R0
   \   000060   75F00E       MOV     B,#0xe
   \   000063   A4           MUL     AB
   \   000064   C8           XCH     A,R0
   \   000065   85F0..       MOV     ?V0,B
   \   000068   75F000       MOV     B,#0x0
   \   00006B   A4           MUL     AB
   \   00006C   25..         ADD     A,?V0
   \   00006E   F5..         MOV     ?V0,A
   \   000070   75F00E       MOV     B,#0xe
   \   000073   E9           MOV     A,R1
   \   000074   A4           MUL     AB
   \   000075   25..         ADD     A,?V0
   \   000077   F9           MOV     R1,A
   \   000078   74..         MOV     A,#BindingTable & 0xff
   \   00007A   28           ADD     A,R0
   \   00007B   F8           MOV     R0,A
   \   00007C   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00007E   39           ADDC    A,R1
   \   00007F   F9           MOV     R1,A
   \   000080   E8           MOV     A,R0
   \   000081   FA           MOV     R2,A
   \   000082   E9           MOV     A,R1
   \   000083   FB           MOV     R3,A
   1319                  break;
   \   000084   8003         SJMP    ??GetBindingTableEntry_1
   1320                }
   1321              }
   1322            }
   \                     ??GetBindingTableEntry_2:
   \   000086   0D           INC     R5
   \   000087   8088         SJMP    ??GetBindingTableEntry_0
   1323          #else
   1324            (void)Nth;
   1325          #endif
   1326          
   1327            return rtrn;
   \                     ??GetBindingTableEntry_1:
   \   000089   7F02         MOV     R7,#0x2
   \   00008B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1328          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??InitBindingTable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBindingTable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFindEmpty::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFindEmpty

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumOfEntries::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumOfEntries

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindCapacity::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindCapacity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindIsClusterIDinList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindIsClusterIDinList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveClusterIdFromList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveClusterIdFromList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddClusterIdToList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddClusterIdToList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFindExisting::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFindExisting

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveDev::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveSrcDev::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveSrcDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumBoundTo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumBoundTo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumReflections::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumReflections

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddressClear::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddressClear

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindInitNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindInitNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindSetDefaultNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindSetDefaultNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindCopyBackupToNewNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindCopyBackupToNewNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindUpgradeTableInNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindUpgradeTableInNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindRestoreFromNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindRestoreFromNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindWriteNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindWriteNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindUpdateAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindUpdateAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperFind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperConvert::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperConvert

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperConvertShort::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperConvertShort

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddrMgrLocalLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddrMgrLocalLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddrIndexGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddrIndexGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GetBindingTableEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetBindingTableEntry
   1329          
   1330          /*********************************************************************
   1331          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     56   BindCopyBackupToNewNV
        0     34   -> osal_nv_delete
        0     36   -> osal_nv_item_init
        0     34   -> osal_nv_item_len
        0     38   -> osal_nv_read
        0     38   -> osal_nv_write
      0     12   BindInitNV
        0     10   -> BindSetDefaultNV
        0     12   -> osal_nv_item_init
      0     18   BindRestoreFromNV
        0     14   -> BindUpgradeTableInNV
        0     18   -> osal_nv_read
      0     26   BindSetDefaultNV
        0     16   -> osal_nv_write
      0     36   BindUpgradeTableInNV
        0     18   -> BindCopyBackupToNewNV
        0     18   -> nwkCreateDuplicateNV
        0     18   -> osal_nv_delete
        0     18   -> osal_nv_item_len
        0     22   -> osal_nv_read
      0     35   BindWriteNV
        0     34   -> osal_memcpy
        0     35   -> osal_nv_write
      0     10   GetBindingTableEntry
      0     10   InitBindingTable
        0     10   -> osal_memset
      0     39   bindAddClusterIdToList
      1     35   bindAddEntry
        0     30   -> bindAddClusterIdToList
        0     30   -> bindAddrIndexGet
        0     30   -> bindAddrMgrLocalLoad
        0     30   -> bindFindEmpty
        0     30   -> bindIsClusterIDinList
        0     33   -> osal_memcpy
      0     52   bindAddrIndexGet
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrEntryLookupNwk
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      0     53   bindAddrMgrLocalLoad
        0     23   -> AddrMgrEntryUpdate
        0     23   -> AddrMgrExtAddrSet
        0     23   -> NLME_GetCoordExtAddr
        0     23   -> NLME_GetCoordShortAddr
        0     23   -> NLME_GetExtAddr
      0     36   bindAddressClear
        0     22   -> AddrMgrEntryRelease
      0      9   bindCapacity
      0     14   bindFind
        0     14   -> bindIsClusterIDinList
      2     30   bindFindEmpty
      0     16   bindFindExisting
        0     16   -> bindingAddrMgsHelperFind
      0     39   bindIsClusterIDinList
      0     18   bindNumBoundTo
        0     18   -> bindingAddrMgsHelperFind
      2      0   bindNumOfEntries
      0     15   bindNumReflections
        0     15   -> bindIsClusterIDinList
      0     11   bindRemoveClusterIdFromList
      0     14   bindRemoveDev
        0     14   -> bindAddressClear
        0     14   -> bindRemoveEntry
        0     14   -> bindingAddrMgsHelperFind
      0     23   bindRemoveEntry
        0      9   -> osal_memset
      0     10   bindRemoveSrcDev
        0     10   -> bindAddressClear
        0     10   -> bindRemoveEntry
      0     29   bindUpdateAddr
        0     29   -> bindingAddrMgsHelperFind
      0     25   bindingAddrMgsHelperConvert
        0     25   -> AddrMgrEntryGet
        0     25   -> sAddrExtCpy
      0     22   bindingAddrMgsHelperConvertShort
        0     22   -> AddrMgrEntryGet
      0     51   bindingAddrMgsHelperFind
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrEntryLookupNwk
        0     22   -> AddrMgrExtAddrSet


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     516  BindCopyBackupToNewNV
       6  BindCopyBackupToNewNV::?relay
      90  BindInitNV
       6  BindInitNV::?relay
     297  BindRestoreFromNV
       6  BindRestoreFromNV::?relay
      74  BindSetDefaultNV
       6  BindSetDefaultNV::?relay
     298  BindUpgradeTableInNV
       6  BindUpgradeTableInNV::?relay
     271  BindWriteNV
       6  BindWriteNV::?relay
     142  GetBindingTableEntry
       6  GetBindingTableEntry::?relay
     136  InitBindingTable
       6  InitBindingTable::?relay
     106  bindAddClusterIdToList
       6  bindAddClusterIdToList::?relay
     722  bindAddEntry
       6  bindAddEntry::?relay
     207  bindAddrIndexGet
       6  bindAddrIndexGet::?relay
     158  bindAddrMgrLocalLoad
       6  bindAddrMgrLocalLoad::?relay
       1  bindAddrMgrLocalLoaded
     215  bindAddressClear
       6  bindAddressClear::?relay
     103  bindCapacity
       6  bindCapacity::?relay
     121  bindFind
       6  bindFind::?relay
     106  bindFindEmpty
       6  bindFindEmpty::?relay
     439  bindFindExisting
       6  bindFindExisting::?relay
      89  bindIsClusterIDinList
       6  bindIsClusterIDinList::?relay
     260  bindNumBoundTo
       6  bindNumBoundTo::?relay
     116  bindNumOfEntries
       6  bindNumOfEntries::?relay
     114  bindNumReflections
       6  bindNumReflections::?relay
     242  bindRemoveClusterIdFromList
       6  bindRemoveClusterIdFromList::?relay
     347  bindRemoveDev
       6  bindRemoveDev::?relay
      35  bindRemoveEntry
       6  bindRemoveEntry::?relay
     165  bindRemoveSrcDev
       6  bindRemoveSrcDev::?relay
     184  bindUpdateAddr
       6  bindUpdateAddr::?relay
      96  bindingAddrMgsHelperConvert
       6  bindingAddrMgsHelperConvert::?relay
      61  bindingAddrMgsHelperConvertShort
       6  bindingAddrMgsHelperConvertShort::?relay
     113  bindingAddrMgsHelperFind
       6  bindingAddrMgsHelperFind::?relay
       2  pBindInitNV
       2  pBindRestoreFromNV
       2  pBindSetDefaultNV
       2  pBindWriteNV
       2  pbindAddEntry
       2  pbindNumOfEntries
       2  pbindRemoveDev

 
 5 823 bytes in segment BANKED_CODE
   174 bytes in segment BANK_RELAYS
    15 bytes in segment XDATA_Z
 
 5 997 bytes of CODE  memory
    15 bytes of XDATA memory

Errors: none
Warnings: none
