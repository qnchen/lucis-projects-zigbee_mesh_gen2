###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  17:49:23
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDApp.c" -D ZTOOL_P1 -D MT_TASK -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_RESTORE -D
#        NV_INIT -D NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D OPEN_FCS -lC
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\ZDApp.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\ZDApp.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2014-06-03 18:29:46 -0700 (Tue, 03 Jun 2014) $
      4            Revision:       $Revision: 38789 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          #if NODE_AUTH
     79          #include "NodeAuth.h"
     80          #endif
     81          #include "GenericApp.h"
     82          
     83          
     84          /*********************************************************************
     85           * CONSTANTS
     86           */
     87          
     88          #if !defined( NWK_START_DELAY )
     89            #define NWK_START_DELAY             100   // in milliseconds
     90          #endif
     91          
     92          #if !defined( LEAVE_RESET_DELAY )
     93            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     94          #endif
     95          
     96          // Init ZDO, but hold and wait for application to start the joining or
     97          // forming network
     98          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     99          
    100          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
    101            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
    102          #endif
    103          
    104          #if !defined( BEACON_REQUEST_DELAY )
    105            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    106          #endif
    107          
    108          #if !defined( BEACON_REQ_DELAY_MASK )
    109            #define BEACON_REQ_DELAY_MASK       0x007F
    110          #endif
    111          
    112          #define MAX_RESUME_RETRY            3
    113          
    114          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds  //chaokw
    115          
    116          // Beacon Order Settings (see NLMEDE.h)
    117          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    118          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    119          
    120          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    121          // Additional counts to add to the frame counter when restoring from NV
    122          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    123          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    124          #endif
    125          
    126          // Leave control bits
    127          #define ZDAPP_LEAVE_CTRL_INIT 0
    128          #define ZDAPP_LEAVE_CTRL_SET  1
    129          #define ZDAPP_LEAVE_CTRL_RA   2
    130          
    131          // Address Manager Stub Implementation
    132          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    133          
    134          
    135          #if !defined ZDO_NV_SAVE_RFDs
    136          #define ZDO_NV_SAVE_RFDs  TRUE
    137          #endif
    138          
    139          // Delay time before updating NWK NV data to force fewer writes during high activity.
    140          #if ZDO_NV_SAVE_RFDs
    141          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    142          #else
    143          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    144          #endif
    145          
    146          // Timeout value to process New Devices
    147          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    148          
    149          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    150          #if !defined MAX_PENDING_BIND_REQ
    151          #define MAX_PENDING_BIND_REQ 3
    152          #endif
    153          #endif
    154          
    155          /******************************************************************************
    156           * TYPEDEFS
    157           */
    158          typedef struct
    159          {
    160            void   *next;
    161            uint16 shortAddr;
    162            uint16 timeDelta;
    163          } ZDAppNewDevice_t;
    164          
    165          /*********************************************************************
    166           * GLOBAL VARIABLES
    167           */
    168          
    169          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    171          #endif
    172          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    173          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    174          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    182          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    183          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    184          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    186          
    187          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    191          
    192          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    194          #endif
    195          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          uint8 join_device_extaddr[SADDR_EXT_LEN] = {0};
   \                     join_device_extaddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          ZDO_Permit_Join_Device_t *zdo_join_device = NULL;   //chaokw
   \                     zdo_join_device:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    198          
    199          /*********************************************************************
    200           * EXTERNAL VARIABLES
    201           */
    202          
    203          /*********************************************************************
    204           * EXTERNAL FUNCTIONS
    205           */
    206          
    207          /*********************************************************************
    208           * LOCAL FUNCTIONS
    209           */
    210          
    211          void ZDApp_NetworkStartEvt( void );
    212          void ZDApp_DeviceAuthEvt( void );
    213          void ZDApp_SaveNetworkStateEvt( void );
    214          
    215          uint8 ZDApp_ReadNetworkRestoreState( void );
    216          uint8 ZDApp_RestoreNetworkState( void );
    217          void ZDAppDetermineDeviceType( void );
    218          void ZDApp_InitUserDesc( void );
    219          void ZDAppCheckForHoldKey( void );
    220          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    221          void ZDApp_ProcessNetworkJoin( void );
    222          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    223          uint8 ZDApp_RestoreNwkKey( void );
    224          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    225          
    226          void ZDApp_SecInit( uint8 state );
    227          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    228          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    229          
    230          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    231          
    232          void ZDApp_ResetTimerStart( uint16 delay );
    233          void ZDApp_ResetTimerCancel( void );
    234          void ZDApp_LeaveCtrlInit( void );
    235          void ZDApp_LeaveCtrlSet( uint8 ra );
    236          uint8 ZDApp_LeaveCtrlBypass( void );
    237          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    238          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    239                                  uint8 removeChildren );
    240          void ZDApp_NodeProfileSync( uint8 stackProfile );
    241          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    242          void ZDApp_RegisterCBs( void );
    243          void ZDApp_InitZdoCBFunc(void);
    244          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    245          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    246          void ZDApp_InitPendingBind( void );
    247          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    248          void ZDApp_AgeOutPendingBindEntry( void );
    249          #endif
    250          
    251          /*********************************************************************
    252           * LOCAL VARIABLES
    253           */
    254          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    255          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    256          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    257          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    259          
    260          #if defined( HOLD_AUTO_START )
    261            devStates_t devState = DEV_HOLD;
    262          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    263            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    264          #endif
    265          
    266          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )
    267            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
    268            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    269                                  // to parent. Set to make the device do an Orphan scan.
    270          #else
    271            // Set the default to coodinator

   \                                 In  segment XDATA_I, align 1, keep-with-next
    272            devStartModes_t devStartMode = MODE_HARD;
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devStartMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    273          #endif
    274          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    275          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    276          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    277          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    278          {
    279            ZDO_EP,
    280            &ZDAppTaskID,
    281            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    282            (afNetworkLatencyReq_t)0            // No Network Latency req
    283          };
    284          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    285          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    286          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    287          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    288          
    289          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    290          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    291          
    292          /*********************************************************************
    293           * @fn      ZDApp_Init
    294           *
    295           * @brief   ZDApp Initialization function.
    296           *
    297           * @param   task_id - ZDApp Task ID
    298           *
    299           * @return  None
    300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    303            // Save the task ID
    304            ZDAppTaskID = task_id;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   F0           MOVX    @DPTR,A
    305          
    306            // Initialize the ZDO global device short address storage
    307            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000C   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    308            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000012   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000015   74FE         MOV     A,#-0x2
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   74FF         MOV     A,#-0x1
   \   00001B   F0           MOVX    @DPTR,A
    309            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   00001C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001C   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00001F   8A..         MOV     ?V2,R2
   \   000021   8B..         MOV     ?V3,R3
   \   000023   85....       MOV     ?V0,?V2
   \   000026   85....       MOV     ?V1,?V3
    310          
    311            // Check for manual "Hold Auto Start"
    312            ZDAppCheckForHoldKey();
   \   000029                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   000029   12....       LCALL   `??ZDAppCheckForHoldKey::?relay`; Banked call to: ZDAppCheckForHoldKey
    313          
    314            // Initialize ZDO items and setup the device - type of device to create.
    315            ZDO_Init();
   \   00002C                ; Setup parameters for call to function ZDO_Init
   \   00002C   12....       LCALL   `??ZDO_Init::?relay` ; Banked call to: ZDO_Init
    316          
    317            // Register the endpoint description with the AF
    318            // This task doesn't have a Simple description, but we still need
    319            // to register the endpoint.
    320            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   00002F                ; Setup parameters for call to function afRegister
   \   00002F   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000031   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000033   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
   \   000036   E9           MOV     A,R1
    321          
    322          #if defined( ZDO_USERDESC_RESPONSE )
    323            ZDApp_InitUserDesc();
   \   000037                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000037   12....       LCALL   `??ZDApp_InitUserDesc::?relay`; Banked call to: ZDApp_InitUserDesc
    324          #endif // ZDO_USERDESC_RESPONSE
    325          
    326            // Start the device?
    327            if ( devState != DEV_HOLD )
   \   00003A   90....       MOV     DPTR,#devState
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   600A         JZ      ??ZDApp_Init_0
    328            {
    329              ZDOInitDevice( 0 );
   \   000040                ; Setup parameters for call to function ZDOInitDevice
   \   000040   7A00         MOV     R2,#0x0
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000047   E9           MOV     A,R1
   \   000048   8015         SJMP    ??ZDApp_Init_1
    330            }
    331            else
    332            {
    333              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   00004A                ; Setup parameters for call to function ZDOInitDevice
   \   00004A   7AFF         MOV     R2,#-0x1
   \   00004C   7BFF         MOV     R3,#-0x1
   \   00004E   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000051   E9           MOV     A,R1
    334              // Blink LED to indicate HOLD_START
    335              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   000052                ; Setup parameters for call to function HalLedBlink
   \   000052   7CF4         MOV     R4,#-0xc
   \   000054   7D01         MOV     R5,#0x1
   \   000056   7B32         MOV     R3,#0x32
   \   000058   7A00         MOV     R2,#0x0
   \   00005A   7908         MOV     R1,#0x8
   \   00005C   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    336            }
    337          
    338            // Initialize the ZDO callback function pointers zdoCBFunc[]
    339            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00005F                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00005F   12....       LCALL   `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    340          
    341            ZDApp_RegisterCBs();
   \   000062                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000062   12....       LCALL   `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    342          
    343          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    344          #if defined ( REFLECTOR )
    345            ZDApp_InitPendingBind();
   \   000065                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   000065   12....       LCALL   `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
    346          #endif
    347          #endif
    348          } /* ZDApp_Init() */
   \   000068   7F04         MOV     R7,#0x4
   \   00006A   02....       LJMP    ?BANKED_LEAVE_XDATA
    349          
    350          /*********************************************************************
    351           * @fn          ZDApp_SecInit
    352           *
    353           * @brief       ZDApp initialize security.
    354           *
    355           * @param       state - device initialization state
    356           *
    357           * @return      none
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    360          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
    361            uint8 zgPreConfigKey[SEC_KEY_LEN];
    362          
    363            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    364            {
    365              // Set the Trust Center bit
    366              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
   \   00000C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   4401         ORL     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   4400         ORL     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
    367            }
    368          
    369            // Initialize ZigBee Device Security Manager
    370            ZDSecMgrInit(state);
   \   000018                ; Setup parameters for call to function ZDSecMgrInit
   \   000018   A9..         MOV     R1,?V0
   \   00001A   12....       LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    371          
    372            if ( ZG_SECURE_ENABLED )
    373            {
    374              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   00001D   E5..         MOV     A,?V0
   \   00001F   6043         JZ      ??ZDApp_SecInit_0
    375              {
    376                nwkFrameCounter = 0;
   \   000021   7C00         MOV     R4,#0x0
   \   000023   7D00         MOV     R5,#0x0
   \   000025   7E00         MOV     R6,#0x0
   \   000027   7F00         MOV     R7,#0x0
   \   000029   90....       MOV     DPTR,#nwkFrameCounter
   \   00002C   EC           MOV     A,R4
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   ED           MOV     A,R5
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   EE           MOV     A,R6
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   EF           MOV     A,R7
   \   000036   F0           MOVX    @DPTR,A
    377          
    378                if( _NIB.nwkKeyLoaded == FALSE )
   \   000037   90....       MOV     DPTR,#_NIB + 61
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   7027         JNZ     ??ZDApp_SecInit_0
    379                {
    380                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    381                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    382                  {
    383                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   00003D                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   00003D   AC..         MOV     R4,?XSP + 0
   \   00003F   AD..         MOV     R5,?XSP + 1
   \   000041   7A62         MOV     R2,#0x62
   \   000043   7B00         MOV     R3,#0x0
   \   000045   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   \   000048   E9           MOV     A,R1
    384                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   000049                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000049   7900         MOV     R1,#0x0
   \   00004B   AA..         MOV     R2,?XSP + 0
   \   00004D   AB..         MOV     R3,?XSP + 1
   \   00004F   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    385                      SSP_SwitchNwkKey( 0 );
   \   000052                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000052   7900         MOV     R1,#0x0
   \   000054   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    386          
    387                      // clear local copy of key
    388                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   000057                ; Setup parameters for call to function osal_memset
   \   000057   7C10         MOV     R4,#0x10
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   7900         MOV     R1,#0x0
   \   00005D   AA..         MOV     R2,?XSP + 0
   \   00005F   AB..         MOV     R3,?XSP + 1
   \   000061   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    389                  }
    390                }
    391              }
    392          
    393              // clean the new devices list when Security module is initialized
    394              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   000064   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F8           MOV     R0,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F9           MOV     R1,A
   \   00006C   E8           MOV     A,R0
   \   00006D   49           ORL     A,R1
   \   00006E   6039         JZ      ??ZDApp_SecInit_1
    395              {
    396                ZDAppNewDevice_t *pNewDeviceNext;
    397          
    398                while ( ZDApp_NewDeviceList )
   \                     ??ZDApp_SecInit_2:
   \   000070   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F8           MOV     R0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   E8           MOV     A,R0
   \   000079   49           ORL     A,R1
   \   00007A   602D         JZ      ??ZDApp_SecInit_1
    399                {
    400                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   00007C   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F8           MOV     R0,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F583         MOV     DPH,A
   \   000085   8882         MOV     DPL,R0
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F8           MOV     R0,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   E8           MOV     A,R0
   \   00008D   FE           MOV     R6,A
   \   00008E   E9           MOV     A,R1
   \   00008F   FF           MOV     R7,A
    401                  osal_mem_free( ZDApp_NewDeviceList );
   \   000090                ; Setup parameters for call to function osal_mem_free
   \   000090   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000093   E0           MOVX    A,@DPTR
   \   000094   FA           MOV     R2,A
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FB           MOV     R3,A
   \   000098   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    402                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   00009B   EE           MOV     A,R6
   \   00009C   F8           MOV     R0,A
   \   00009D   EF           MOV     A,R7
   \   00009E   F9           MOV     R1,A
   \   00009F   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   0000A2   E8           MOV     A,R0
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E9           MOV     A,R1
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   80C7         SJMP    ??ZDApp_SecInit_2
    403                }
    404              }
    405            }
    406          }
   \                     ??ZDApp_SecInit_1:
   \   0000A9   7410         MOV     A,#0x10
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   7F01         MOV     R7,#0x1
   \   0000B0   02....       LJMP    ?BANKED_LEAVE_XDATA
    407          
    408          /*********************************************************************
    409           * @fn      ZDApp_event_loop()
    410           *
    411           * @brief   Main event loop for Zigbee device objects task. This function
    412           *          should be called at periodic intervals.
    413           *
    414           * @param   task_id - Task ID
    415           * @param   events  - Bitmap of events
    416           *
    417           * @return  none
    418           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    419          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    420          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    421            uint8 *msg_ptr;
    422          
    423            if ( events & SYS_EVENT_MSG )
   \   00000B   EE           MOV     A,R6
   \   00000C   5400         ANL     A,#0x0
   \   00000E   F8           MOV     R0,A
   \   00000F   EF           MOV     A,R7
   \   000010   5480         ANL     A,#0x80
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   49           ORL     A,R1
   \   000015   6034         JZ      ??ZDApp_event_loop_0
    424            {
    425              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
   \                     ??ZDApp_event_loop_1:
   \   000017                ; Setup parameters for call to function osal_msg_receive
   \   000017   90....       MOV     DPTR,#ZDAppTaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00001F   8A..         MOV     ?V4,R2
   \   000021   8B..         MOV     ?V5,R3
   \   000023   A8..         MOV     R0,?V4
   \   000025   A9..         MOV     R1,?V5
   \   000027   88..         MOV     ?V0,R0
   \   000029   89..         MOV     ?V1,R1
   \   00002B   E8           MOV     A,R0
   \   00002C   49           ORL     A,R1
   \   00002D   6011         JZ      ??ZDApp_event_loop_2
    426              {
    427                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
   \   00002F                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   00002F   AA..         MOV     R2,?V0
   \   000031   AB..         MOV     R3,?V1
   \   000033   12....       LCALL   `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
    428          
    429                // Release the memory
    430                osal_msg_deallocate( msg_ptr );
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V0
   \   000038   AB..         MOV     R3,?V1
   \   00003A   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   00003D   E9           MOV     A,R1
   \   00003E   80D7         SJMP    ??ZDApp_event_loop_1
    431              }
    432          
    433              // Return unprocessed events
    434              return (events ^ SYS_EVENT_MSG);
   \                     ??ZDApp_event_loop_2:
   \   000040   EE           MOV     A,R6
   \   000041   6400         XRL     A,#0x0
   \   000043   FA           MOV     R2,A
   \   000044   EF           MOV     A,R7
   \   000045   6480         XRL     A,#0x80
   \   000047   FB           MOV     R3,A
   \   000048   02....       LJMP    ??ZDApp_event_loop_3 & 0xFFFF
    435            }
    436          
    437            if ( events & ZDO_NETWORK_INIT )
   \                     ??ZDApp_event_loop_0:
   \   00004B   EE           MOV     A,R6
   \   00004C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004E   5031         JNC     ??ZDApp_event_loop_4
    438            {
    439              // Initialize apps and start the network
    440              devState = DEV_INIT;
   \   000050   90....       MOV     DPTR,#devState
   \   000053   7401         MOV     A,#0x1
   \   000055   F0           MOVX    @DPTR,A
    441              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000056                ; Setup parameters for call to function osal_set_event
   \   000056   7A10         MOV     R2,#0x10
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   90....       MOV     DPTR,#ZDAppTaskID
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000062   E9           MOV     A,R1
    442          
    443              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    444                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000063                ; Setup parameters for call to function ZDO_StartDevice
   \   000063   7C0F         MOV     R4,#0xf
   \   000065   7B0F         MOV     R3,#0xf
   \   000067   90....       MOV     DPTR,#devStartMode
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FA           MOV     R2,A
   \   00006C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   5407         ANL     A,#0x7
   \   000072   F9           MOV     R1,A
   \   000073   12....       LCALL   `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    445          
    446              // Return unprocessed events
    447              return (events ^ ZDO_NETWORK_INIT);
   \   000076   EE           MOV     A,R6
   \   000077   6401         XRL     A,#0x1
   \   000079   FA           MOV     R2,A
   \   00007A   EF           MOV     A,R7
   \   00007B   6400         XRL     A,#0x0
   \   00007D   FB           MOV     R3,A
   \   00007E   02....       LJMP    ??ZDApp_event_loop_3 & 0xFFFF
    448            }
    449          
    450            if ( ZSTACK_ROUTER_BUILD )
    451            {
    452              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_4:
   \   000081   EE           MOV     A,R6
   \   000082   5402         ANL     A,#0x2
   \   000084   600E         JZ      ??ZDApp_event_loop_5
    453              {
    454                ZDApp_NetworkStartEvt();
   \   000086                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   000086   12....       LCALL   `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
    455          
    456                // Return unprocessed events
    457                return (events ^ ZDO_NETWORK_START);
   \   000089   EE           MOV     A,R6
   \   00008A   6402         XRL     A,#0x2
   \   00008C   FA           MOV     R2,A
   \   00008D   EF           MOV     A,R7
   \   00008E   6400         XRL     A,#0x0
   \   000090   FB           MOV     R3,A
   \   000091   02....       LJMP    ??ZDApp_event_loop_3 & 0xFFFF
    458              }
    459          
    460              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_5:
   \   000094   EE           MOV     A,R6
   \   000095   5420         ANL     A,#0x20
   \   000097   6031         JZ      ??ZDApp_event_loop_6
    461              {
    462                if ( nwkStatus == ZSuccess )
   \   000099   90....       MOV     DPTR,#nwkStatus
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   7013         JNZ     ??ZDApp_event_loop_7
    463                {
    464                  if ( devState == DEV_END_DEVICE )
   \   00009F   90....       MOV     DPTR,#devState
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   6406         XRL     A,#0x6
   \   0000A5   7006         JNZ     ??ZDApp_event_loop_8
    465                    devState = DEV_ROUTER;
   \   0000A7   90....       MOV     DPTR,#devState
   \   0000AA   7407         MOV     A,#0x7
   \   0000AC   F0           MOVX    @DPTR,A
    466          
    467                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_8:
   \   0000AD                ; Setup parameters for call to function osal_pwrmgr_device
   \   0000AD   7900         MOV     R1,#0x0
   \   0000AF   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    468                }
    469                else
    470                {
    471                  // remain as end device
    472                }
    473                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_7:
   \   0000B2                ; Setup parameters for call to function osal_set_event
   \   0000B2   7A10         MOV     R2,#0x10
   \   0000B4   7B00         MOV     R3,#0x0
   \   0000B6   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F9           MOV     R1,A
   \   0000BB   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0000BE   E9           MOV     A,R1
    474          
    475                // Return unprocessed events
    476                return (events ^ ZDO_ROUTER_START);
   \   0000BF   EE           MOV     A,R6
   \   0000C0   6420         XRL     A,#0x20
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   6400         XRL     A,#0x0
   \   0000C6   FB           MOV     R3,A
   \   0000C7   02....       LJMP    ??ZDApp_event_loop_3 & 0xFFFF
    477              }
    478            }
    479          
    480            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_6:
   \   0000CA   EE           MOV     A,R6
   \   0000CB   5410         ANL     A,#0x10
   \   0000CD   6032         JZ      ??ZDApp_event_loop_9
    481            {
    482              ZDO_UpdateNwkStatus( devState );
   \   0000CF                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   0000CF   90....       MOV     DPTR,#devState
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F9           MOV     R1,A
   \   0000D4   12....       LCALL   `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    483          
    484              // At start up, do one MTO route discovery if the device is a concentrator
    485              if ( zgConcentratorEnable == TRUE )
   \   0000D7   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   6401         XRL     A,#0x1
   \   0000DD   7018         JNZ     ??ZDApp_event_loop_10
    486              {
    487                // Start next event
    488                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000DF                ; Setup parameters for call to function osal_start_timerEx
   \   0000DF   90....       MOV     DPTR,#__Constant_64
   \   0000E2   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000E5   7A00         MOV     R2,#0x0
   \   0000E7   7B08         MOV     R3,#0x8
   \   0000E9   90....       MOV     DPTR,#NWK_TaskID
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F9           MOV     R1,A
   \   0000EE   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000F1   7404         MOV     A,#0x4
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F6   E9           MOV     A,R1
    489              }
    490          
    491              // Return unprocessed events
    492              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_10:
   \   0000F7   EE           MOV     A,R6
   \   0000F8   6410         XRL     A,#0x10
   \   0000FA   FA           MOV     R2,A
   \   0000FB   EF           MOV     A,R7
   \   0000FC   6400         XRL     A,#0x0
   \   0000FE   FB           MOV     R3,A
   \   0000FF   805A         SJMP    ??ZDApp_event_loop_3
    493            }
    494          
    495            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_9:
   \   000101   EE           MOV     A,R6
   \   000102   5408         ANL     A,#0x8
   \   000104   600A         JZ      ??ZDApp_event_loop_11
    496            {
    497              // User defined logic
    498          
    499              // Return unprocessed events
    500              return (events ^ ZDO_COMMAND_CNF);
   \   000106   EE           MOV     A,R6
   \   000107   6408         XRL     A,#0x8
   \   000109   FA           MOV     R2,A
   \   00010A   EF           MOV     A,R7
   \   00010B   6400         XRL     A,#0x0
   \   00010D   FB           MOV     R3,A
   \   00010E   804B         SJMP    ??ZDApp_event_loop_3
    501            }
    502          
    503            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_11:
   \   000110   EE           MOV     A,R6
   \   000111   5400         ANL     A,#0x0
   \   000113   F8           MOV     R0,A
   \   000114   EF           MOV     A,R7
   \   000115   5401         ANL     A,#0x1
   \   000117   F9           MOV     R1,A
   \   000118   E8           MOV     A,R0
   \   000119   49           ORL     A,R1
   \   00011A   600D         JZ      ??ZDApp_event_loop_12
    504            {
    505              ZDApp_SaveNetworkStateEvt();
   \   00011C                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   00011C   12....       LCALL   `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
    506          
    507              // Return unprocessed events
    508              return (events ^ ZDO_NWK_UPDATE_NV);
   \   00011F   EE           MOV     A,R6
   \   000120   6400         XRL     A,#0x0
   \   000122   FA           MOV     R2,A
   \   000123   EF           MOV     A,R7
   \   000124   6401         XRL     A,#0x1
   \   000126   FB           MOV     R3,A
   \   000127   8032         SJMP    ??ZDApp_event_loop_3
    509            }
    510          
    511            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_12:
   \   000129   EE           MOV     A,R6
   \   00012A   5404         ANL     A,#0x4
   \   00012C   600B         JZ      ??ZDApp_event_loop_13
    512            {
    513          #ifdef ZBA_FALLBACK_NWKKEY
    514              if ( devState == DEV_END_DEVICE_UNAUTH )
    515              {
    516                ZDSecMgrFallbackNwkKey();
    517              }
    518              else
    519          #endif
    520              {
    521                // Set the NV startup option to force a "new" join.
    522                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00012E                ; Setup parameters for call to function zgWriteStartupOptions
   \   00012E   7A02         MOV     R2,#0x2
   \   000130   79FF         MOV     R1,#-0x1
   \   000132   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   000135   E9           MOV     A,R1
    523          
    524                // The device has been in the UNAUTH state, so reset
    525                // Note: there will be no return from this call
    526                SystemResetSoft();    //chaokw 20170413
   \   000136                ; Setup parameters for call to function Onboard_soft_reset
   \   000136   12....       LCALL   Onboard_soft_reset & 0xFFFF
    527              }
    528            }
    529          
    530          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    531            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_13:
   \   000139   EE           MOV     A,R6
   \   00013A   5400         ANL     A,#0x0
   \   00013C   F8           MOV     R0,A
   \   00013D   EF           MOV     A,R7
   \   00013E   5410         ANL     A,#0x10
   \   000140   F9           MOV     R1,A
   \   000141   E8           MOV     A,R0
   \   000142   49           ORL     A,R1
   \   000143   600D         JZ      ??ZDApp_event_loop_14
    532            {
    533          #if defined ( REFLECTOR )
    534              ZDApp_AgeOutPendingBindEntry();
   \   000145                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   000145   12....       LCALL   `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
    535          #endif
    536              // Return unprocessed events
    537              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   000148   EE           MOV     A,R6
   \   000149   6400         XRL     A,#0x0
   \   00014B   FA           MOV     R2,A
   \   00014C   EF           MOV     A,R7
   \   00014D   6410         XRL     A,#0x10
   \   00014F   FB           MOV     R3,A
   \   000150   8009         SJMP    ??ZDApp_event_loop_3
    538            }
    539          #endif
    540          
    541            if ( ZG_SECURE_ENABLED )
    542            {
    543              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_14:
   \   000152                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   000152   EE           MOV     A,R6
   \   000153   FA           MOV     R2,A
   \   000154   EF           MOV     A,R7
   \   000155   FB           MOV     R3,A
   \   000156   A9..         MOV     R1,?V2
   \   000158   12....       LCALL   `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
   \                     ??ZDApp_event_loop_3:
   \   00015B   7F06         MOV     R7,#0x6
   \   00015D   02....       LJMP    ?BANKED_LEAVE_XDATA
    544            }
    545            else
    546            {
    547              // Discard or make more handlers
    548              return 0;
    549            }
    550          }
    551          
    552          /*********************************************************************
    553           * @fn      ZDApp_ProcessSecEvent()
    554           *
    555           * @brief   Process incoming security events.
    556           *
    557           * @param   task_id - Task ID
    558           * @param   events  - Bitmap of events
    559           *
    560           * @return  none
    561           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    563          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V8,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    564            (void)task_id;  // Intentionally unreferenced parameter
    565          
    566            if ( ZSTACK_ROUTER_BUILD )
    567            {
    568              if ( events & ZDO_NEW_DEVICE )
   \   00000B   EE           MOV     A,R6
   \   00000C   5440         ANL     A,#0x40
   \   00000E   7003         JNZ     $+5
   \   000010   02....       LJMP    ??ZDApp_ProcessSecEvent_0 & 0xFFFF
    569              {
    570                // process the new device event
    571                if ( ZDApp_NewDeviceList )
   \   000013   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   E8           MOV     A,R0
   \   00001C   49           ORL     A,R1
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??ZDApp_ProcessSecEvent_1 & 0xFFFF
    572                {
    573                  ZDAppNewDevice_t *pNewDevice;
    574                  uint16 timeDelta;
    575          
    576                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
   \   000022                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   000022   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F583         MOV     DPH,A
   \   00002B   8882         MOV     DPL,R0
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
   \   000037   E9           MOV     A,R1
   \   000038   F5..         MOV     ?V4,A
    577          
    578                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   00003A   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F583         MOV     DPH,A
   \   000043   8882         MOV     DPL,R0
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F8           MOV     R0,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   88..         MOV     ?V0,R0
   \   00004C   89..         MOV     ?V1,R1
    579                  osal_mem_free( ZDApp_NewDeviceList );
   \   00004E                ; Setup parameters for call to function osal_mem_free
   \   00004E   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000051   E0           MOVX    A,@DPTR
   \   000052   FA           MOV     R2,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FB           MOV     R3,A
   \   000056   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    580                  ZDApp_NewDeviceList = pNewDevice;
   \   000059   A8..         MOV     R0,?V0
   \   00005B   A9..         MOV     R1,?V1
   \   00005D   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000060   E8           MOV     A,R0
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   E9           MOV     A,R1
   \   000064   F0           MOVX    @DPTR,A
    581          
    582                  if ( pNewDevice )
   \   000065   E5..         MOV     A,?V0
   \   000067   45..         ORL     A,?V1
   \   000069   6069         JZ      ??ZDApp_ProcessSecEvent_1
    583                  {
    584                    timeDelta = pNewDevice->timeDelta;
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F5..         MOV     ?V2,A
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F5..         MOV     ?V3,A
    585                    pNewDevice = pNewDevice->next;
   \   00007C   85..82       MOV     DPL,?V0
   \   00007F   85..83       MOV     DPH,?V1
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F5..         MOV     ?V0,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F5..         MOV     ?V1,A
    586          
    587                    while ( pNewDevice )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000089   E5..         MOV     A,?V0
   \   00008B   45..         ORL     A,?V1
   \   00008D   6023         JZ      ??ZDApp_ProcessSecEvent_3
    588                    {
    589                      pNewDevice->timeDelta -= timeDelta;
   \   00008F   85..82       MOV     DPL,?V0
   \   000092   85..83       MOV     DPH,?V1
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   C3           CLR     C
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   95..         SUBB    A,?V2
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   95..         SUBB    A,?V3
   \   0000A2   F0           MOVX    @DPTR,A
    590                      pNewDevice = pNewDevice->next;
   \   0000A3   85..82       MOV     DPL,?V0
   \   0000A6   85..83       MOV     DPH,?V1
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F5..         MOV     ?V0,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F5..         MOV     ?V1,A
   \   0000B0   80D7         SJMP    ??ZDApp_ProcessSecEvent_2
    591                    }
    592          
    593                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
   \                     ??ZDApp_ProcessSecEvent_3:
   \   0000B2                ; Setup parameters for call to function osal_start_timerEx
   \   0000B2   85....       MOV     ?V4,?V2
   \   0000B5   85....       MOV     ?V5,?V3
   \   0000B8   E4           CLR     A
   \   0000B9   F5..         MOV     ?V6,A
   \   0000BB   F5..         MOV     ?V7,A
   \   0000BD   78..         MOV     R0,#?V4
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000C2   7A40         MOV     R2,#0x40
   \   0000C4   7B00         MOV     R3,#0x0
   \   0000C6   90....       MOV     DPTR,#ZDAppTaskID
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F9           MOV     R1,A
   \   0000CB   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000CE   7404         MOV     A,#0x4
   \   0000D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D3   E9           MOV     A,R1
    594                  }
    595                }
    596          
    597                // Return unprocessed events
    598                return (events ^ ZDO_NEW_DEVICE);
   \                     ??ZDApp_ProcessSecEvent_1:
   \   0000D4   EE           MOV     A,R6
   \   0000D5   6440         XRL     A,#0x40
   \   0000D7   FA           MOV     R2,A
   \   0000D8   EF           MOV     A,R7
   \   0000D9   6400         XRL     A,#0x0
   \   0000DB   FB           MOV     R3,A
   \   0000DC   8061         SJMP    ??ZDApp_ProcessSecEvent_4
    599              }
    600            }
    601          
    602            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   0000DE   EE           MOV     A,R6
   \   0000DF   5480         ANL     A,#0x80
   \   0000E1   600D         JZ      ??ZDApp_ProcessSecEvent_5
    603            {
    604              ZDApp_DeviceAuthEvt();
   \   0000E3                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   0000E3   12....       LCALL   `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    605          
    606              // Return unprocessed events
    607              return (events ^ ZDO_DEVICE_AUTH);
   \   0000E6   EE           MOV     A,R6
   \   0000E7   6480         XRL     A,#0x80
   \   0000E9   FA           MOV     R2,A
   \   0000EA   EF           MOV     A,R7
   \   0000EB   6400         XRL     A,#0x0
   \   0000ED   FB           MOV     R3,A
   \   0000EE   804F         SJMP    ??ZDApp_ProcessSecEvent_4
    608            }
    609          
    610            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_5:
   \   0000F0   EE           MOV     A,R6
   \   0000F1   5400         ANL     A,#0x0
   \   0000F3   F8           MOV     R0,A
   \   0000F4   EF           MOV     A,R7
   \   0000F5   5402         ANL     A,#0x2
   \   0000F7   F9           MOV     R1,A
   \   0000F8   E8           MOV     A,R0
   \   0000F9   49           ORL     A,R1
   \   0000FA   600D         JZ      ??ZDApp_ProcessSecEvent_6
    611            {
    612              ZDApp_SaveNwkKey();
   \   0000FC                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   0000FC   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    613          
    614              // Return unprocessed events
    615              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   0000FF   EE           MOV     A,R6
   \   000100   6400         XRL     A,#0x0
   \   000102   FA           MOV     R2,A
   \   000103   EF           MOV     A,R7
   \   000104   6402         XRL     A,#0x2
   \   000106   FB           MOV     R3,A
   \   000107   8036         SJMP    ??ZDApp_ProcessSecEvent_4
    616            }
    617          
    618            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_6:
   \   000109   EE           MOV     A,R6
   \   00010A   5400         ANL     A,#0x0
   \   00010C   F8           MOV     R0,A
   \   00010D   EF           MOV     A,R7
   \   00010E   5408         ANL     A,#0x8
   \   000110   F9           MOV     R1,A
   \   000111   E8           MOV     A,R0
   \   000112   49           ORL     A,R1
   \   000113   600D         JZ      ??ZDApp_ProcessSecEvent_7
    619            {
    620          #if defined (NV_RESTORE)
    621              ZDSecMgrSaveApsLinkKey();
   \   000115                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   000115   12....       LCALL   `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
    622          #endif // (NV_RESTORE)
    623          
    624              // Return unprocessed events
    625              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   000118   EE           MOV     A,R6
   \   000119   6400         XRL     A,#0x0
   \   00011B   FA           MOV     R2,A
   \   00011C   EF           MOV     A,R7
   \   00011D   6408         XRL     A,#0x8
   \   00011F   FB           MOV     R3,A
   \   000120   801D         SJMP    ??ZDApp_ProcessSecEvent_4
    626            }
    627          
    628            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_7:
   \   000122   EE           MOV     A,R6
   \   000123   5400         ANL     A,#0x0
   \   000125   F8           MOV     R0,A
   \   000126   EF           MOV     A,R7
   \   000127   5404         ANL     A,#0x4
   \   000129   F9           MOV     R1,A
   \   00012A   E8           MOV     A,R0
   \   00012B   49           ORL     A,R1
   \   00012C   600D         JZ      ??ZDApp_ProcessSecEvent_8
    629            {
    630              ZDSecMgrSaveTCLinkKey();
   \   00012E                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   00012E   12....       LCALL   `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    631          
    632              // Return unprocessed events
    633              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   000131   EE           MOV     A,R6
   \   000132   6400         XRL     A,#0x0
   \   000134   FA           MOV     R2,A
   \   000135   EF           MOV     A,R7
   \   000136   6404         XRL     A,#0x4
   \   000138   FB           MOV     R3,A
   \   000139   8004         SJMP    ??ZDApp_ProcessSecEvent_4
    634            }
    635          
    636            // Discard or make more handlers
    637            return 0;
   \                     ??ZDApp_ProcessSecEvent_8:
   \   00013B   7A00         MOV     R2,#0x0
   \   00013D   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_4:
   \   00013F   7F09         MOV     R7,#0x9
   \   000141   02....       LJMP    ?BANKED_LEAVE_XDATA
    638          }
    639          
    640          /*********************************************************************
    641           * Application Functions
    642           */
    643          
    644          /*********************************************************************
    645           * @fn      ZDOInitDevice
    646           *
    647           * @brief   Start the device in the network.  This function will read
    648           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    649           *   restore the network state of the device.
    650           *
    651           * @param   startDelay - timeDelay to start device (in milliseconds).
    652           *                       There is a jitter added to this delay:
    653           *                       ((NWK_START_DELAY + startDelay)
    654           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    655           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    656           *                       this function will hold the network init. Application
    657           *                       can start the device.
    658           *
    659           * NOTE:    If the application would like to force a "new" join, the
    660           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    661           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    662           *          this function. "new" join means to not restore the network
    663           *          state of the device. Use zgWriteStartupOptions() to set these
    664           *          options.
    665           *
    666           * @return
    667           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    668           *          restored.
    669           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    670           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    671           *          it could mean that there was no network state to restore.
    672           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    673           *          with the rejoin option set to TRUE.  So, the device was not
    674           *          started in the network (one time only).  The next time this
    675           *          function is called it will start.
    676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    678          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    679            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000015   7E01         MOV     R6,#0x1
    680            uint16 extendedDelay = 0;
   \   000017   75..00       MOV     ?V0,#0x0
   \   00001A   75..00       MOV     ?V1,#0x0
    681          
    682            if ( devState == DEV_HOLD )
   \   00001D   90....       MOV     DPTR,#devState
   \   000020   E0           MOVX    A,@DPTR
   \   000021   7005         JNZ     ??ZDOInitDevice_0
    683            {
    684              // Initialize the RAM items table, in case an NV item has been updated.
    685              zgInitItems( FALSE );
   \   000023                ; Setup parameters for call to function zgInitItems
   \   000023   7900         MOV     R1,#0x0
   \   000025   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    686            }
    687          
    688            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000028                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000028   12....       LCALL   `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    689            //devtag.071807.todo - fix this temporary solution
    690            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00002B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   90....       MOV     DPTR,#_NIB + 14
   \   000032   F0           MOVX    @DPTR,A
    691          
    692          #if defined ( NV_RESTORE )
    693            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    694            // while booting to skip past NV Restore.
    695            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   000033   90....       MOV     DPTR,#zdappHoldKeys
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6404         XRL     A,#0x4
   \   000039   700A         JNZ     ??ZDOInitDevice_1
    696            {
    697              zdappHoldKeys = 0;   // Only once
   \   00003B   90....       MOV     DPTR,#zdappHoldKeys
   \   00003E   7400         MOV     A,#0x0
   \   000040   F0           MOVX    @DPTR,A
    698              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000041   7E01         MOV     R6,#0x1
   \   000043   8005         SJMP    ??ZDOInitDevice_2
    699            }
    700            else
    701            {
    702              // Determine if NV should be restored
    703              networkStateNV = ZDApp_ReadNetworkRestoreState();
   \                     ??ZDOInitDevice_1:
   \   000045                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   000045   12....       LCALL   `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   000048   E9           MOV     A,R1
   \   000049   FE           MOV     R6,A
    704            }
    705          
    706            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \                     ??ZDOInitDevice_2:
   \   00004A   EE           MOV     A,R6
   \   00004B   7007         JNZ     ??ZDOInitDevice_3
    707            {
    708              networkStateNV = ZDApp_RestoreNetworkState();
   \   00004D                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   00004D   12....       LCALL   `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
   \   000050   E9           MOV     A,R1
   \   000051   FE           MOV     R6,A
   \   000052   800A         SJMP    ??ZDOInitDevice_4
    709            }
    710            else
    711            {
    712              // Wipe out the network state in NV
    713              NLME_InitNV();
   \                     ??ZDOInitDevice_3:
   \   000054                ; Setup parameters for call to function NLME_InitNV
   \   000054   12....       LCALL   `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000057   E9           MOV     A,R1
    714              NLME_SetDefaultNV();
   \   000058                ; Setup parameters for call to function NLME_SetDefaultNV
   \   000058   12....       LCALL   `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
    715              // clear NWK key values
    716              ZDSecMgrClearNVKeyValues();
   \   00005B                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   00005B   12....       LCALL   `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
    717            }
    718          #endif
    719          
    720            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDevice_4:
   \   00005E   7401         MOV     A,#0x1
   \   000060   6E           XRL     A,R6
   \   000061   702E         JNZ     ??ZDOInitDevice_5
    721            {
    722              ZDAppDetermineDeviceType();
   \   000063                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000063   12....       LCALL   `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    723          
    724              // Only delay if joining network - not restoring network state
    725              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    726                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000066                ; Setup parameters for call to function osal_rand
   \   000066   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000069   8A..         MOV     ?V2,R2
   \   00006B   8B..         MOV     ?V3,R3
   \   00006D   A8..         MOV     R0,?V2
   \   00006F   A9..         MOV     R1,?V3
   \   000071   85..82       MOV     DPL,?XSP + 0
   \   000074   85..83       MOV     DPH,?XSP + 1
   \   000077   E8           MOV     A,R0
   \   000078   547F         ANL     A,#0x7f
   \   00007A   F8           MOV     R0,A
   \   00007B   E9           MOV     A,R1
   \   00007C   5400         ANL     A,#0x0
   \   00007E   F9           MOV     R1,A
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   28           ADD     A,R0
   \   000081   F8           MOV     R0,A
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   39           ADDC    A,R1
   \   000085   F9           MOV     R1,A
   \   000086   E8           MOV     A,R0
   \   000087   2464         ADD     A,#0x64
   \   000089   F8           MOV     R0,A
   \   00008A   5001         JNC     ??ZDOInitDevice_6
   \   00008C   09           INC     R1
   \                     ??ZDOInitDevice_6:
   \   00008D   88..         MOV     ?V0,R0
   \   00008F   89..         MOV     ?V1,R1
    727            }
    728          
    729            // Initialize the security for type of device
    730            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDevice_5:
   \   000091                ; Setup parameters for call to function ZDApp_SecInit
   \   000091   EE           MOV     A,R6
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    731          
    732            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000096   85..82       MOV     DPL,?XSP + 0
   \   000099   85..83       MOV     DPH,?XSP + 1
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   64FF         XRL     A,#0xff
   \   00009F   7004         JNZ     ??ZDOInitDevice_7
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   64FF         XRL     A,#0xff
   \                     ??ZDOInitDevice_7:
   \   0000A5   603A         JZ      ??ZDOInitDevice_8
    733            {
    734              devState = DEV_INIT;    // Remove the Hold state
   \   0000A7   90....       MOV     DPTR,#devState
   \   0000AA   7401         MOV     A,#0x1
   \   0000AC   F0           MOVX    @DPTR,A
    735          
    736              // Initialize leave control logic
    737              ZDApp_LeaveCtrlInit();
   \   0000AD                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   0000AD   12....       LCALL   `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    738          
    739              // Check leave control reset settings
    740              ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   0000B0                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   0000B0   AC..         MOV     R4,?XSP + 0
   \   0000B2   AD..         MOV     R5,?XSP + 1
   \   0000B4   7A..         MOV     R2,#devState & 0xff
   \   0000B6   7B..         MOV     R3,#(devState >> 8) & 0xff
   \   0000B8   12....       LCALL   `??ZDApp_LeaveCtrlStartup::?relay`; Banked call to: ZDApp_LeaveCtrlStartup
    741          
    742              // Leave may make the hold state come back
    743              if ( devState == DEV_HOLD )
   \   0000BB   90....       MOV     DPTR,#devState
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   7019         JNZ     ??ZDOInitDevice_9
    744              {
    745                // Set the NV startup option to force a "new" join.
    746                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   0000C1                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000C1   7A02         MOV     R2,#0x2
   \   0000C3   79FF         MOV     R1,#-0x1
   \   0000C5   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   0000C8   E9           MOV     A,R1
    747          
    748                // Notify the applications
    749                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0000C9                ; Setup parameters for call to function osal_set_event
   \   0000C9   7A10         MOV     R2,#0x10
   \   0000CB   7B00         MOV     R3,#0x0
   \   0000CD   90....       MOV     DPTR,#ZDAppTaskID
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F9           MOV     R1,A
   \   0000D2   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0000D5   E9           MOV     A,R1
    750          
    751                return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \   0000D6   7902         MOV     R1,#0x2
   \   0000D8   8011         SJMP    ??ZDOInitDevice_10
    752              }
    753          
    754              // Trigger the network start
    755              ZDApp_NetworkInit( extendedDelay );
   \                     ??ZDOInitDevice_9:
   \   0000DA                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000DA   AA..         MOV     R2,?V0
   \   0000DC   AB..         MOV     R3,?V1
   \   0000DE   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    756            }
    757          
    758            // set broadcast address mask to support broadcast filtering
    759            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_8:
   \   0000E1                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   0000E1   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F9           MOV     R1,A
   \   0000E6   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    760          
    761            return ( networkStateNV );
   \   0000E9   EE           MOV     A,R6
   \   0000EA   F9           MOV     R1,A
   \                     ??ZDOInitDevice_10:
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F0   7F04         MOV     R7,#0x4
   \   0000F2   02....       LJMP    ?BANKED_LEAVE_XDATA
    762          }
    763          
    764          /*********************************************************************
    765           * @fn      ZDApp_ReadNetworkRestoreState
    766           *
    767           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    768           *          or not to restore the network state.
    769           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    770           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    771           *
    772           * @param   none
    773           *
    774           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    775           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    776           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    777           *          ZCD_NV_STARTUP_OPTION
    778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    780          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    781            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    782          
    783            // Look for the New Network State option.
    784            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   E8           MOV     A,R0
   \   00000D   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000F   5002         JNC     ??ZDApp_ReadNetworkRestoreState_0
    785            {
    786              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000011   7E01         MOV     R6,#0x1
    787            }
    788          
    789            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000013   EE           MOV     A,R6
   \   000014   F9           MOV     R1,A
   \   000015   7F01         MOV     R7,#0x1
   \   000017   02....       LJMP    ?BANKED_LEAVE_XDATA
    790          }
    791          
    792          /*********************************************************************
    793           * @fn      ZDAppDetermineDeviceType()
    794           *
    795           * @brief   Determines the type of device to start.
    796           *
    797           *          Looks at zgDeviceLogicalType and determines what type of
    798           *          device to start.  The types are:
    799           *            ZG_DEVICETYPE_COORDINATOR
    800           *            ZG_DEVICETYPE_ROUTER
    801           *            ZG_DEVICETYPE_ENDDEVICE
    802           *
    803           * @param   none
    804           *
    805           * @return  none
    806           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    807          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    808          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    809            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700F         JNZ     ??ZDAppDetermineDeviceType_0
    810            {
    811              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    812              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   F0           MOVX    @DPTR,A
   \   000017   8046         SJMP    ??ZDAppDetermineDeviceType_1
    813            }
    814            else
    815            {
    816              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   7010         JNZ     ??ZDAppDetermineDeviceType_2
    817                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000021   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000024   E0           MOVX    A,@DPTR
   \   000025   54F8         ANL     A,#0xf8
   \   000027   F0           MOVX    @DPTR,A
   \   000028   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   4401         ORL     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   8016         SJMP    ??ZDAppDetermineDeviceType_3
    818              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000031   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   700E         JNZ     ??ZDAppDetermineDeviceType_3
    819                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000039   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   54F8         ANL     A,#0xf8
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000043   E0           MOVX    A,@DPTR
   \   000044   4402         ORL     A,#0x2
   \   000046   F0           MOVX    @DPTR,A
    820          
    821              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    822              // The device shall do rejoin the network. Otherwise, do normal join
    823              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_3:
   \   000047                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000047   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000049   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00004B   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00004E   E9           MOV     A,R1
   \   00004F   7008         JNZ     ??ZDAppDetermineDeviceType_4
    824              {
    825                devStartMode = MODE_JOIN;     // Assume joining
   \   000051   90....       MOV     DPTR,#devStartMode
   \   000054   7400         MOV     A,#0x0
   \   000056   F0           MOVX    @DPTR,A
   \   000057   8006         SJMP    ??ZDAppDetermineDeviceType_1
    826              }
    827              else
    828              {
    829                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_4:
   \   000059   90....       MOV     DPTR,#devStartMode
   \   00005C   7403         MOV     A,#0x3
   \   00005E   F0           MOVX    @DPTR,A
    830              }
    831            }
    832          }
   \                     ??ZDAppDetermineDeviceType_1:
   \   00005F   D083         POP     DPH
   \   000061   D082         POP     DPL
   \   000063   02....       LJMP    ?BRET
    833          
    834          /*********************************************************************
    835           * @fn      ZDApp_NetworkStartEvt()
    836           *
    837           * @brief   Process the Network Start Event
    838           *
    839           * @param   none
    840           *
    841           * @return  none
    842           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    843          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    844          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    845            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7022         JNZ     ??ZDApp_NetworkStartEvt_0
    846            {
    847              // Successfully started a ZigBee network
    848              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7006         JNZ     ??ZDApp_NetworkStartEvt_1
    849              {
    850                devState = DEV_ZB_COORD;
   \   000012   90....       MOV     DPTR,#devState
   \   000015   7409         MOV     A,#0x9
   \   000017   F0           MOVX    @DPTR,A
    851              }
    852          
    853              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000018                ; Setup parameters for call to function osal_pwrmgr_device
   \   000018   7900         MOV     R1,#0x0
   \   00001A   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    854              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001D                ; Setup parameters for call to function osal_set_event
   \   00001D   7A10         MOV     R2,#0x10
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   90....       MOV     DPTR,#ZDAppTaskID
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000029   E9           MOV     A,R1
   \   00002A   804A         SJMP    ??ZDApp_NetworkStartEvt_2
    855            }
    856            else
    857            {
    858              // Try again with a higher energy threshold
    859              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00002C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00002C   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00002F   E9           MOV     A,R1
   \   000030   F8           MOV     R0,A
   \   000031   7900         MOV     R1,#0x0
   \   000033   E8           MOV     A,R0
   \   000034   2410         ADD     A,#0x10
   \   000036   F8           MOV     R0,A
   \   000037   5001         JNC     ??ZDApp_NetworkStartEvt_3
   \   000039   09           INC     R1
   \                     ??ZDApp_NetworkStartEvt_3:
   \   00003A   C3           CLR     C
   \   00003B   E8           MOV     A,R0
   \   00003C   94FF         SUBB    A,#-0x1
   \   00003E   E9           MOV     A,R1
   \   00003F   9400         SUBB    A,#0x0
   \   000041   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000043   65D0         XRL     A,PSW
   \   000045   33           RLC     A
   \   000046   501B         JNC     ??ZDApp_NetworkStartEvt_4
    860              {
    861                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000048                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000048   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00004B   E9           MOV     A,R1
   \   00004C   F8           MOV     R0,A
   \   00004D                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   00004D   7410         MOV     A,#0x10
   \   00004F   28           ADD     A,R0
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    862                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000054                ; Setup parameters for call to function osal_set_event
   \   000054   7A01         MOV     R2,#0x1
   \   000056   7B00         MOV     R3,#0x0
   \   000058   90....       MOV     DPTR,#ZDAppTaskID
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000060   E9           MOV     A,R1
   \   000061   8013         SJMP    ??ZDApp_NetworkStartEvt_2
    863              }
    864              else
    865              {
    866                // Failed to start network. Enter a dormant state (until user intervenes)
    867                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000063   90....       MOV     DPTR,#devState
   \   000066   7401         MOV     A,#0x1
   \   000068   F0           MOVX    @DPTR,A
    868                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000069                ; Setup parameters for call to function osal_set_event
   \   000069   7A10         MOV     R2,#0x10
   \   00006B   7B00         MOV     R3,#0x0
   \   00006D   90....       MOV     DPTR,#ZDAppTaskID
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000075   E9           MOV     A,R1
    869              }
    870            }
    871          }
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000076   D083         POP     DPH
   \   000078   D082         POP     DPL
   \   00007A   02....       LJMP    ?BRET
    872          
    873          /*********************************************************************
    874           * @fn      ZDApp_DeviceAuthEvt()
    875           *
    876           * @brief   Process the Device Authentic Event
    877           *
    878           * @param   none
    879           *
    880           * @return  none
    881           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    882          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    883          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    884            // received authentication from trust center
    885            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   7058         JNZ     ??ZDApp_DeviceAuthEvt_0
    886            {
    887              // Stop the reset timer so it doesn't reset
    888              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    889          
    890              devState = DEV_END_DEVICE;
   \   00000F   90....       MOV     DPTR,#devState
   \   000012   7406         MOV     A,#0x6
   \   000014   F0           MOVX    @DPTR,A
    891              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000015                ; Setup parameters for call to function osal_set_event
   \   000015   7A10         MOV     R2,#0x10
   \   000017   7B00         MOV     R3,#0x0
   \   000019   90....       MOV     DPTR,#ZDAppTaskID
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000021   E9           MOV     A,R1
    892          
    893              // Set the Power Manager Device
    894          #if defined ( POWER_SAVING )
    895              osal_pwrmgr_device( PWRMGR_BATTERY );
    896          #endif
    897          
    898              if ( ZSTACK_ROUTER_BUILD )
    899              {
    900                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000022   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000025   E0           MOVX    A,@DPTR
   \   000026   5407         ANL     A,#0x7
   \   000028   6402         XRL     A,#0x2
   \   00002A   600A         JZ      ??ZDApp_DeviceAuthEvt_1
    901                {
    902                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    903                  NLME_StartRouterRequest( 0, 0, false );
   \   00002C                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   7A00         MOV     R2,#0x0
   \   000030   7900         MOV     R1,#0x0
   \   000032   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   000035   E9           MOV     A,R1
    904                }
    905              }
    906          
    907              // Notify to save info into NV
    908              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000036                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000036   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    909          
    910              // Save off the security
    911              ZDApp_SaveNwkKey();
   \   000039                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000039   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    912          
    913              ZDApp_AnnounceNewAddress();
   \   00003C                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00003C   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
    914          
    915              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    916                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    917          #if defined ( ZIGBEE_CHILD_AGING )
    918                    && (zgChildAgingEnable == TRUE)
    919          #endif // ZIGBEE_CHILD_AGING
    920                       ) )
   \   00003F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000042   E0           MOVX    A,@DPTR
   \   000043   A2E3         MOV     C,0xE0 /* A   */.3
   \   000045   5010         JNC     ??ZDApp_DeviceAuthEvt_2
   \   000047   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   A2E3         MOV     C,0xE0 /* A   */.3
   \   00004D   5018         JNC     ??ZDApp_DeviceAuthEvt_3
   \   00004F   90....       MOV     DPTR,#zgChildAgingEnable
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6401         XRL     A,#0x1
   \   000055   7010         JNZ     ??ZDApp_DeviceAuthEvt_3
    921              {
    922                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   000057                ; Setup parameters for call to function NLME_SetPollRate
   \   000057   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FA           MOV     R2,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FB           MOV     R3,A
   \   00005F   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000062   8003         SJMP    ??ZDApp_DeviceAuthEvt_3
    923              }
    924            }
    925            else
    926            {
    927              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000064                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000064   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    928            }
    929          }
   \                     ??ZDApp_DeviceAuthEvt_3:
   \   000067   D083         POP     DPH
   \   000069   D082         POP     DPL
   \   00006B   02....       LJMP    ?BRET
    930          
    931          /*********************************************************************
    932           * @fn      ZDApp_SaveNetworkStateEvt()
    933           *
    934           * @brief   Process the Save the Network State Event
    935           *
    936           * @param   none
    937           *
    938           * @return  none
    939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    940          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    941          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    942          #if defined ( NV_RESTORE )
    943           #if defined ( NV_TURN_OFF_RADIO )
    944            // Turn off the radio's receiver during an NV update
    945            uint8 RxOnIdle;
    946            uint8 x = false;
    947            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    948            ZMacSetReq( ZMacRxOnIdle, &x );
    949           #endif
    950          
    951            // Update the Network State in NV
    952            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    953                           NWK_NV_DEVICELIST_ENABLE |
    954                           NWK_NV_BINDING_ENABLE    |
    955                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV     R1,#0xf
   \   000006   12....       LCALL   `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
    956          
    957            // Reset the NV startup option to resume from NV by
    958            // clearing the "New" join option.
    959            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV     R2,#0x2
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   000010   E9           MOV     A,R1
    960          
    961           #if defined ( NV_TURN_OFF_RADIO )
    962            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    963           #endif
    964          #endif // NV_RESTORE
    965          }
   \   000011   D083         POP     DPH
   \   000013   D082         POP     DPL
   \   000015   02....       LJMP    ?BRET
    966          
    967          #if defined ( NV_RESTORE )
    968          /*********************************************************************
    969           * @fn      ZDApp_RestoreNetworkState()
    970           *
    971           * @brief   This function will restore the network state of the
    972           *          device if the network state is stored in NV.
    973           *
    974           * @param   none
    975           *
    976           * @return
    977           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    978           *          restored.
    979           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    980           *          This could mean that zgStartupOption said to not restore, or
    981           *          it could mean that there was no network state to restore.
    982           *
    983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    984          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    985          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    986            uint8 nvStat;
    987          
    988            // Initialize NWK NV items
    989            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    990          
    991            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   6047         JZ      ??ZDApp_RestoreNetworkState_0
    992            {
    993              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   000012   E9           MOV     A,R1
   \   000013   6031         JZ      ??ZDApp_RestoreNetworkState_1
    994              {
    995                // Are we a coordinator
    996                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
    997                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \   000020   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   E8           MOV     A,R0
   \   000029   49           ORL     A,R1
   \   00002A   7007         JNZ     ??ZDApp_RestoreNetworkState_2
    998                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   00002C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   54F8         ANL     A,#0xf8
   \   000032   F0           MOVX    @DPTR,A
    999                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000033   90....       MOV     DPTR,#devStartMode
   \   000036   7401         MOV     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
   1000                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000039                ; Setup parameters for call to function sAddrExtCpy
   \   000039   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00003B   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   00003D   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00003F   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000041   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000044   8002         SJMP    ??ZDApp_RestoreNetworkState_3
   1001              }
   1002              else
   1003                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000046   7E09         MOV     R6,#0x9
   1004          
   1005              if ( ZG_SECURE_ENABLED )
   1006              {
   1007                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   000048   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00004B   7400         MOV     A,#0x0
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   7400         MOV     A,#0x0
   \   000051   F0           MOVX    @DPTR,A
   1008          
   1009                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1010                {
   1011                  ZDApp_RestoreNwkKey();
   \   000052                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000052   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000055   E9           MOV     A,R1
   1012                }
   1013              }
   1014          
   1015              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1016              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1017              // other than default.
   1018            }
   1019          
   1020            if ( nvStat == ZSUCCESS )
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000056   EE           MOV     A,R6
   \   000057   7004         JNZ     ??ZDApp_RestoreNetworkState_4
   1021              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   000059   7900         MOV     R1,#0x0
   \   00005B   8002         SJMP    ??ZDApp_RestoreNetworkState_5
   1022            else
   1023              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_4:
   \   00005D   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_5:
   \   00005F   7F01         MOV     R7,#0x1
   \   000061   02....       LJMP    ?BANKED_LEAVE_XDATA
   1024          }
   1025          #endif // NV_RESTORE
   1026          
   1027          /*********************************************************************
   1028           * @fn      ZDApp_InitUserDesc()
   1029           *
   1030           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1031           *          when needed.  If you want to initialize the User descriptor to
   1032           *          something other than all zero, do it here.
   1033           *
   1034           * @param   none
   1035           *
   1036           * @return  none
   1037           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1038          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1039          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1040            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1041          
   1042            // Initialize the User Descriptor, the descriptor is read from NV
   1043            // when needed.  If you want to initialize the User descriptor to something
   1044            // other than all zero, do it here.
   1045            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1046            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1047                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV     R4,#0x11
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A81         MOV     R2,#-0x7f
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   703B         JNZ     ??ZDApp_InitUserDesc_0
   1048            {
   1049              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1050                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   A8..         MOV     R0,?XSP + 0
   \   000039   A9..         MOV     R1,?XSP + 1
   \   00003B   88..         MOV     ?V0,R0
   \   00003D   89..         MOV     ?V1,R1
   \   00003F   78..         MOV     R0,#?V0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   75..11       MOV     ?V0,#0x11
   \   000047   75..00       MOV     ?V1,#0x0
   \   00004A   78..         MOV     R0,#?V0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7C00         MOV     R4,#0x0
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7A81         MOV     R2,#-0x7f
   \   000055   7B00         MOV     R3,#0x0
   \   000057   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005F   E9           MOV     A,R1
   \   000060   7010         JNZ     ??ZDApp_InitUserDesc_0
   1051              {
   1052                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   6007         JZ      ??ZDApp_InitUserDesc_0
   1053                {
   1054                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00006B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   D2E4         SETB    0xE0 /* A   */.4
   \   000071   F0           MOVX    @DPTR,A
   1055                }
   1056              }
   1057            }
   1058          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000072   7411         MOV     A,#0x11
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   7F02         MOV     R7,#0x2
   \   000079   02....       LJMP    ?BANKED_LEAVE_XDATA
   1059          
   1060          /*********************************************************************
   1061           * @fn      ZDAppCheckForHoldKey()
   1062           *
   1063           * @brief   Check for key to set the device into Hold Auto Start
   1064           *
   1065           * @param   none
   1066           *
   1067           * @return  none
   1068           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1069          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1070          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1071          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1072            
   1073            // Get Keypad directly to see if a HOLD is needed
   1074            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV     A,R1
   \   000008   90....       MOV     DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX    @DPTR,A
   1075            
   1076            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1077            // while booting to avoid starting up the device.
   1078            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   90....       MOV     DPTR,#zdappHoldKeys
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6401         XRL     A,#0x1
   \   000012   7006         JNZ     ??ZDAppCheckForHoldKey_0
   1079            {
   1080              // Change the device state to HOLD on start up
   1081              devState = DEV_HOLD;
   \   000014   90....       MOV     DPTR,#devState
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
   1082            }
   1083          #endif // HAL_KEY
   1084          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   00001A   D083         POP     DPH
   \   00001C   D082         POP     DPL
   \   00001E   02....       LJMP    ?BRET
   1085          
   1086          /*********************************************************************
   1087           * @fn      ZDApp_ProcessOSALMsg()
   1088           *
   1089           * @brief   Process the incoming task message.
   1090           *
   1091           * @param   msgPtr - message to process
   1092           *
   1093           * @return  none
   1094           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1095          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1096          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1097            // Data Confirmation message fields
   1098            uint8 sentEP;       // This should always be 0
   1099            uint8 sentStatus;
   1100            afDataConfirm_t *afDataConfirm;
   1101            uint8 tmp;
   1102          
   1103            switch ( msgPtr->event )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   14           DEC     A
   \   00000F   605F         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000011   14           DEC     A
   \   000012   606D         JZ      ??ZDApp_ProcessOSALMsg_1
   \   000014   14           DEC     A
   \   000015   606A         JZ      ??ZDApp_ProcessOSALMsg_1
   \   000017   24E9         ADD     A,#-0x17
   \   000019   600A         JZ      ??ZDApp_ProcessOSALMsg_2
   \   00001B   2447         ADD     A,#0x47
   \   00001D   600F         JZ      ??ZDApp_ProcessOSALMsg_3
   \   00001F   24D6         ADD     A,#-0x2a
   \   000021   6014         JZ      ??ZDApp_ProcessOSALMsg_4
   \   000023   8055         SJMP    ??ZDApp_ProcessOSALMsg_5
   1104            {
   1105              // Incoming ZDO Message
   1106              case AF_INCOMING_MSG_CMD:
   1107                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000025                ; Setup parameters for call to function ZDP_IncomingData
   \   000025   EE           MOV     A,R6
   \   000026   FA           MOV     R2,A
   \   000027   EF           MOV     A,R7
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1108                break;
   \   00002C   8053         SJMP    ??ZDApp_ProcessOSALMsg_1
   1109          
   1110              case ZDO_CB_MSG:
   1111                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   00002E                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1112                break;
   \   000035   804A         SJMP    ??ZDApp_ProcessOSALMsg_1
   1113          
   1114              case AF_DATA_CONFIRM_CMD:
   1115                // This message is received as a confirmation of a data packet sent.
   1116                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1117                // The message fields are defined in AF.h
   1118                afDataConfirm = (afDataConfirm_t *)msgPtr;
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000037   8E..         MOV     ?V0,R6
   \   000039   8F..         MOV     ?V1,R7
   1119                sentEP = afDataConfirm->endpoint;
   \   00003B   85..82       MOV     DPL,?V0
   \   00003E   85..83       MOV     DPH,?V1
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V3,A
   1120                sentStatus = afDataConfirm->hdr.status;
   \   000046   85..82       MOV     DPL,?V0
   \   000049   85..83       MOV     DPH,?V1
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V2,A
   1121          
   1122                // Action taken when confirmation is received.
   1123          #if defined ( ZIGBEE_FREQ_AGILITY )
   1124                if ( pZDNwkMgr_ProcessDataConfirm )
   \   000050   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F8           MOV     R0,A
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F9           MOV     R1,A
   \   000058   E8           MOV     A,R0
   \   000059   49           ORL     A,R1
   \   00005A   6025         JZ      ??ZDApp_ProcessOSALMsg_1
   1125                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   00005C                ; Setup parameters for indirect call
   \   00005C   AA..         MOV     R2,?V0
   \   00005E   AB..         MOV     R3,?V1
   \   000060   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F583         MOV     DPH,A
   \   000069   8882         MOV     DPL,R0
   \   00006B   12....       LCALL   ?CALL_IND
   1126          #endif
   1127                (void)sentEP;
   1128                (void)sentStatus;
   1129                break;
   \   00006E   8011         SJMP    ??ZDApp_ProcessOSALMsg_1
   1130          
   1131              case ZDO_NWK_DISC_CNF:
   1132                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000070   90....       MOV     DPTR,#devState
   \   000073   E0           MOVX    A,@DPTR
   \   000074   6402         XRL     A,#0x2
   \   000076   6009         JZ      ??ZDApp_ProcessOSALMsg_1
   1133                  break;
   \   000078   8007         SJMP    ??ZDApp_ProcessOSALMsg_1
   1134          
   1135                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1136                {
   1137                  // Process the network discovery scan results and choose a parent
   1138                  // device to join/rejoin itself
   1139                  networkDesc_t *pChosenNwk;
   1140                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   1141                  {
   1142                    if ( devStartMode == MODE_JOIN )
   1143                    {
   1144                      devState = DEV_NWK_JOINING;
   1145          
   1146                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   1147          
   1148                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1149                                            pChosenNwk->logicalChannel,
   1150                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1151                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   1152                      {
   1153                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1154                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1155                      }
   1156                    } // if ( devStartMode == MODE_JOIN )
   1157                    else if ( devStartMode == MODE_REJOIN )
   1158                    {
   1159                      ZStatus_t rejoinStatus;
   1160          
   1161                      devState = DEV_NWK_REJOIN;
   1162          
   1163                      // Before trying to do rejoin, check if the device has a valid short address
   1164                      // If not, generate a random short address for itself
   1165                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   1166                      {
   1167                        uint16 commNwkAddr;
   1168          
   1169                        // Verify if the Network address has been commissioned by external tool
   1170                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1171                                           sizeof(commNwkAddr),
   1172                                           (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1173                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   1174                        {
   1175                          _NIB.nwkDevAddress = commNwkAddr;
   1176          
   1177                          // clear Allocate address bit because device has a commissioned address
   1178                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   1179                        }
   1180                        else
   1181                        {
   1182                          _NIB.nwkDevAddress = osal_rand();
   1183                        }
   1184          
   1185                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   1186                      }
   1187          
   1188                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1189                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   1190                      {
   1191                        _NIB.nwkPanId = pChosenNwk->panId;
   1192                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   1193                      }
   1194          
   1195                      tmp = true;
   1196                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   1197          
   1198                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1199                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == TRUE ) )
   1200                      {
   1201                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   1202                      }
   1203                      else
   1204                      {
   1205                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   1206                      }
   1207          
   1208                      if ( rejoinStatus != ZSuccess )
   1209                      {
   1210                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1211                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1212                      }
   1213                    } // else if ( devStartMode == MODE_REJOIN )
   1214          
   1215                    // The receiver is on, turn network layer polling off.
   1216                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   1217                    {
   1218                      // for an End Device with NO Child Table Management process or for a Router
   1219                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1220          #if defined ( ZIGBEE_CHILD_AGING )
   1221                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   1222          #else
   1223                           (ZG_DEVICE_ENDDEVICE_TYPE) )
   1224          #endif // ZIGBEE_CHILD_AGING
   1225                      {
   1226                        NLME_SetPollRate( 0 );
   1227                        NLME_SetQueuedPollRate( 0 );
   1228                        NLME_SetResponseRate( 0 );
   1229                      }
   1230                    }
   1231                    else
   1232                    {
   1233                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1234                      {
   1235                        ZDApp_SavedPollRate = zgPollRate;
   1236                        NLME_SetPollRate( zgRejoinPollRate );
   1237                      }
   1238                    }
   1239                  }
   1240                  else
   1241                  {
   1242                    if ( continueJoining )
   1243                    {
   1244              #if defined ( MANAGED_SCAN )
   1245                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1246              #else
   1247                      zdoDiscCounter++;
   1248                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1249                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   1250              #endif
   1251                    }
   1252                  }
   1253                }
   1254                break;
   1255          
   1256              case ZDO_NWK_JOIN_IND:
   1257                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1258                {
   1259                  ZDApp_ProcessNetworkJoin();
   1260                }
   1261                break;
   1262          
   1263              case ZDO_NWK_JOIN_REQ:
   1264                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1265                {
   1266                  retryCnt = 0;
   1267                  devStartMode = MODE_RESUME;
   1268                  _tmpRejoinState = true;
   1269                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1270                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   1271                  ZDApp_NetworkInit( 0 );
   1272                }
   1273                break;
   1274          
   1275              default:
   1276                if ( ZG_SECURE_ENABLED )
   1277                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   00007A                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   00007A   EE           MOV     A,R6
   \   00007B   FA           MOV     R2,A
   \   00007C   EF           MOV     A,R7
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1278                break;
   1279            }
   1280          
   1281          }
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000081   7F04         MOV     R7,#0x4
   \   000083   02....       LJMP    ?BANKED_LEAVE_XDATA
   1282          
   1283          /*********************************************************************
   1284           * @fn      ZDApp_ProcessMsgCBs()
   1285           *
   1286           * @brief   Process response messages
   1287           *
   1288           * @param   none
   1289           *
   1290           * @return  none
   1291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1292          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV     A,#-0x2c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1294            switch ( inMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V1,A
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000023   0300         DW        3
   \   000025   2100         DW        33
   \   000027   2200         DW        34
   \   000029   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   00002B   0080         DW        32768
   \   00002D   0180         DW        32769
   \   00002F   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000031   2180         DW        32801
   \   000033   2280         DW        32802
   \   000035   ....         DW        ??ZDApp_ProcessMsgCBs_2
   \   000037   0100         DW        1
   \   000039   2000         DW        32
   \   00003B   ....         DW        ??ZDApp_ProcessMsgCBs_3
   \   00003D   ....         DW        ??ZDApp_ProcessMsgCBs_4
   1295            {
   1296          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1297              case NWK_addr_rsp:
   1298              case IEEE_addr_rsp:
   1299                {
   1300                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1301          
   1302                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003F                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000046   8A..         MOV     ?V2,R2
   \   000048   8B..         MOV     ?V3,R3
   \   00004A   85....       MOV     ?V0,?V2
   \   00004D   85....       MOV     ?V1,?V3
   1303                  if ( pAddrRsp )
   \   000050   E5..         MOV     A,?V0
   \   000052   45..         ORL     A,?V1
   \   000054   6048         JZ      ??ZDApp_ProcessMsgCBs_5
   1304                  {
   1305                    if ( pAddrRsp->status == ZSuccess )
   \   000056   85..82       MOV     DPL,?V0
   \   000059   85..83       MOV     DPH,?V1
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   7018         JNZ     ??ZDApp_ProcessMsgCBs_6
   1306                    {
   1307                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   00005F                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   00005F   E5..         MOV     A,?V0
   \   000061   2403         ADD     A,#0x3
   \   000063   FC           MOV     R4,A
   \   000064   E4           CLR     A
   \   000065   35..         ADDC    A,?V1
   \   000067   FD           MOV     R5,A
   \   000068   85..82       MOV     DPL,?V0
   \   00006B   85..83       MOV     DPH,?V1
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   FA           MOV     R2,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   FB           MOV     R3,A
   \   000074   12....       LCALL   `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1308                    }
   1309          
   1310          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1311                    // look for pending bind entry for NWK_addr_rsp Only
   1312                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_6:
   \   000077   EE           MOV     A,R6
   \   000078   240C         ADD     A,#0xc
   \   00007A   F582         MOV     DPL,A
   \   00007C   E4           CLR     A
   \   00007D   3F           ADDC    A,R7
   \   00007E   F583         MOV     DPH,A
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6400         XRL     A,#0x0
   \   000083   7004         JNZ     ??ZDApp_ProcessMsgCBs_7
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_7:
   \   000089   700C         JNZ     ??ZDApp_ProcessMsgCBs_8
   1313                    {
   1314          #if defined ( REFLECTOR )
   1315                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   00008B                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   00008B   E5..         MOV     A,?V0
   \   00008D   2403         ADD     A,#0x3
   \   00008F   FA           MOV     R2,A
   \   000090   E4           CLR     A
   \   000091   35..         ADDC    A,?V1
   \   000093   FB           MOV     R3,A
   \   000094   12....       LCALL   `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
   1316          #endif
   1317                    }
   1318          #endif
   1319          
   1320                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_8:
   \   000097                ; Setup parameters for call to function osal_mem_free
   \   000097   AA..         MOV     R2,?V0
   \   000099   AB..         MOV     R3,?V1
   \   00009B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1321                  }
   1322                }
   1323                break;
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   00009E   02....       LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1324          #endif
   1325          
   1326          #if defined ( REFLECTOR )
   1327              case Bind_req:
   1328              case Unbind_req:
   1329                {
   1330                  ZDO_BindUnbindReq_t bindReq;
   1331                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   0000A1                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   0000A1   7417         MOV     A,#0x17
   \   0000A3   12....       LCALL   ?XSTACK_DISP102_8
   \   0000A6   EE           MOV     A,R6
   \   0000A7   FA           MOV     R2,A
   \   0000A8   EF           MOV     A,R7
   \   0000A9   FB           MOV     R3,A
   \   0000AA   12....       LCALL   `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1332                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   0000AD                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   0000AD   7417         MOV     A,#0x17
   \   0000AF   12....       LCALL   ?XSTACK_DISP102_8
   \   0000B2   EE           MOV     A,R6
   \   0000B3   FA           MOV     R2,A
   \   0000B4   EF           MOV     A,R7
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1333                }
   1334                break;
   \   0000B9   02....       LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1335          #endif
   1336          
   1337          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1338              case Bind_rsp:
   1339              case Unbind_rsp:
   1340                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   0000BC   90....       MOV     DPTR,#matchED
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F8           MOV     R0,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F9           MOV     R1,A
   \   0000C4   E8           MOV     A,R0
   \   0000C5   49           ORL     A,R1
   \   0000C6   607A         JZ      ??ZDApp_ProcessMsgCBs_4
   1341                {
   1342                  ZDMatchSendState(
   1343                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1344                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   \   0000C8   EE           MOV     A,R6
   \   0000C9   240C         ADD     A,#0xc
   \   0000CB   F582         MOV     DPL,A
   \   0000CD   E4           CLR     A
   \   0000CE   3F           ADDC    A,R7
   \   0000CF   F583         MOV     DPH,A
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   6421         XRL     A,#0x21
   \   0000D4   7004         JNZ     ??ZDApp_ProcessMsgCBs_9
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_9:
   \   0000DA   7004         JNZ     ??ZDApp_ProcessMsgCBs_10
   \   0000DC   7903         MOV     R1,#0x3
   \   0000DE   8002         SJMP    ??ZDApp_ProcessMsgCBs_11
   \                     ??ZDApp_ProcessMsgCBs_10:
   \   0000E0   7902         MOV     R1,#0x2
   \                     ??ZDApp_ProcessMsgCBs_11:
   \   0000E2                ; Setup parameters for call to function ZDMatchSendState
   \   0000E2   EE           MOV     A,R6
   \   0000E3   240F         ADD     A,#0xf
   \   0000E5   F582         MOV     DPL,A
   \   0000E7   E4           CLR     A
   \   0000E8   3F           ADDC    A,R7
   \   0000E9   F583         MOV     DPH,A
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   FB           MOV     R3,A
   \   0000ED   EE           MOV     A,R6
   \   0000EE   2413         ADD     A,#0x13
   \   0000F0   F582         MOV     DPL,A
   \   0000F2   E4           CLR     A
   \   0000F3   3F           ADDC    A,R7
   \   0000F4   F583         MOV     DPH,A
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F8           MOV     R0,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F583         MOV     DPH,A
   \   0000FC   8882         MOV     DPL,R0
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   FA           MOV     R2,A
   \   000100   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   000103   E9           MOV     A,R1
   1345                }
   1346                break;
   \   000104   803C         SJMP    ??ZDApp_ProcessMsgCBs_4
   1347          
   1348              case End_Device_Bind_req:
   1349                if (ZG_DEVICE_COORDINATOR_TYPE)
   1350                {
   1351                  ZDEndDeviceBind_t bindReq;
   1352                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   000106                ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
   \   000106   AC..         MOV     R4,?XSP + 0
   \   000108   AD..         MOV     R5,?XSP + 1
   \   00010A   EE           MOV     A,R6
   \   00010B   FA           MOV     R2,A
   \   00010C   EF           MOV     A,R7
   \   00010D   FB           MOV     R3,A
   \   00010E   12....       LCALL   `??ZDO_ParseEndDeviceBindReq::?relay`; Banked call to: ZDO_ParseEndDeviceBindReq
   1353                  ZDO_MatchEndDeviceBind( &bindReq );
   \   000111                ; Setup parameters for call to function ZDO_MatchEndDeviceBind
   \   000111   AA..         MOV     R2,?XSP + 0
   \   000113   AB..         MOV     R3,?XSP + 1
   \   000115   12....       LCALL   `??ZDO_MatchEndDeviceBind::?relay`; Banked call to: ZDO_MatchEndDeviceBind
   1354          
   1355                  // Freeing the cluster lists - if allocated.
   1356                  if ( bindReq.numInClusters )
   \   000118   7411         MOV     A,#0x11
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   600D         JZ      ??ZDApp_ProcessMsgCBs_12
   1357                    osal_mem_free( bindReq.inClusters );
   \   000120                ; Setup parameters for call to function osal_mem_free
   \   000120   7412         MOV     A,#0x12
   \   000122   12....       LCALL   ?XSTACK_DISP0_8
   \   000125   E0           MOVX    A,@DPTR
   \   000126   FA           MOV     R2,A
   \   000127   A3           INC     DPTR
   \   000128   E0           MOVX    A,@DPTR
   \   000129   FB           MOV     R3,A
   \   00012A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1358                  if ( bindReq.numOutClusters )
   \                     ??ZDApp_ProcessMsgCBs_12:
   \   00012D   7414         MOV     A,#0x14
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   E0           MOVX    A,@DPTR
   \   000133   600D         JZ      ??ZDApp_ProcessMsgCBs_4
   1359                    osal_mem_free( bindReq.outClusters );
   \   000135                ; Setup parameters for call to function osal_mem_free
   \   000135   7415         MOV     A,#0x15
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   FA           MOV     R2,A
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   FB           MOV     R3,A
   \   00013F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1360                }
   1361                break;
   1362          #endif
   1363            }
   1364          }
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   000142   742C         MOV     A,#0x2c
   \   000144   12....       LCALL   ?DEALLOC_XSTACK8
   \   000147   7F04         MOV     R7,#0x4
   \   000149   02....       LJMP    ?BANKED_LEAVE_XDATA
   1365          
   1366          /*********************************************************************
   1367           * @fn      ZDApp_RegisterCBs()
   1368           *
   1369           * @brief   Process response messages
   1370           *
   1371           * @param   none
   1372           *
   1373           * @return  none
   1374           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1375          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1376          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1377          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1378            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000010   E9           MOV     A,R1
   1379          #endif
   1380          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1381            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000011                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B80         MOV     R3,#-0x80
   \   000015   90....       MOV     DPTR,#ZDAppTaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   00001D   E9           MOV     A,R1
   1382          #endif
   1383          #if ZG_BUILD_COORDINATOR_TYPE
   1384            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   \   00001E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001E   7A21         MOV     R2,#0x21
   \   000020   7B80         MOV     R3,#-0x80
   \   000022   90....       MOV     DPTR,#ZDAppTaskID
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   00002A   E9           MOV     A,R1
   1385            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   \   00002B                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00002B   7A22         MOV     R2,#0x22
   \   00002D   7B80         MOV     R3,#-0x80
   \   00002F   90....       MOV     DPTR,#ZDAppTaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000037   E9           MOV     A,R1
   1386            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   \   000038                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000038   7A20         MOV     R2,#0x20
   \   00003A   7B00         MOV     R3,#0x0
   \   00003C   90....       MOV     DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000044   E9           MOV     A,R1
   1387          #endif
   1388          #if defined ( REFLECTOR )
   1389            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   000045                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000045   7A21         MOV     R2,#0x21
   \   000047   7B00         MOV     R3,#0x0
   \   000049   90....       MOV     DPTR,#ZDAppTaskID
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000051   E9           MOV     A,R1
   1390            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000052                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000052   7A22         MOV     R2,#0x22
   \   000054   7B00         MOV     R3,#0x0
   \   000056   90....       MOV     DPTR,#ZDAppTaskID
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   00005E   E9           MOV     A,R1
   1391          #endif
   1392          }
   \   00005F   D083         POP     DPH
   \   000061   D082         POP     DPL
   \   000063   02....       LJMP    ?BRET
   1393          
   1394          /*********************************************************************
   1395           * @fn      ZDApp_ProcessSecMsg()
   1396           *
   1397           * @brief   Process the incoming security message.
   1398           *
   1399           * @param   msgPtr - message to process
   1400           *
   1401           * @return  none
   1402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1403          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1404          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1405            switch ( msgPtr->event )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   24FC         ADD     A,#-0x4
   \   000010   6015         JZ      ??ZDApp_ProcessSecMsg_0
   \   000012   14           DEC     A
   \   000013   600B         JZ      ??ZDApp_ProcessSecMsg_1
   \   000015   14           DEC     A
   \   000016   600F         JZ      ??ZDApp_ProcessSecMsg_0
   \   000018   14           DEC     A
   \   000019   600C         JZ      ??ZDApp_ProcessSecMsg_0
   \   00001B   14           DEC     A
   \   00001C   6009         JZ      ??ZDApp_ProcessSecMsg_0
   \   00001E   8007         SJMP    ??ZDApp_ProcessSecMsg_0
   1406            {
   1407              case ZDO_TRANSPORT_KEY_IND:
   1408                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1409                {
   1410                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   1411                }
   1412                break;
   1413          
   1414              case ZDO_UPDATE_DEVICE_IND:
   1415                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1416                {
   1417                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000020                ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   `??ZDSecMgrUpdateDeviceInd::?relay`; Banked call to: ZDSecMgrUpdateDeviceInd
   1418                }
   1419                break;
   1420          
   1421              case ZDO_REMOVE_DEVICE_IND:
   1422                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1423                {
   1424                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1425                }
   1426                break;
   1427          
   1428              case ZDO_REQUEST_KEY_IND:
   1429                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1430                {
   1431                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1432                  {
   1433                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1434                  }
   1435                }
   1436                break;
   1437          
   1438              case ZDO_SWITCH_KEY_IND:
   1439                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1440                {
   1441                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   1442                }
   1443                break;
   1444          
   1445              default:
   1446                // Unsupported messages
   1447                break;
   1448            }
   1449          }
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000027   7F01         MOV     R7,#0x1
   \   000029   02....       LJMP    ?BANKED_LEAVE_XDATA
   1450          
   1451          /*********************************************************************
   1452           * @fn      ZDApp_ProcessNetworkJoin()
   1453           *
   1454           * @brief
   1455           *
   1456           *   Save off the Network key information.
   1457           *
   1458           * @param   none
   1459           *
   1460           * @return  none
   1461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1462          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1463          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1464            if ( (devState == DEV_NWK_JOINING) ||
   1465                ((devState == DEV_NWK_ORPHAN)  &&
   1466                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6018         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   90....       MOV     DPTR,#devState
   \   000015   E0           MOVX    A,@DPTR
   \   000016   640A         XRL     A,#0xa
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000020   E0           MOVX    A,@DPTR
   \   000021   5407         ANL     A,#0x7
   \   000023   6401         XRL     A,#0x1
   \   000025   6003         JZ      $+5
   \   000027   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   1467            {
   1468              // Result of a Join attempt by this device.
   1469              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   00002A   90....       MOV     DPTR,#nwkStatus
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   7066         JNZ     ??ZDApp_ProcessNetworkJoin_2
   1470              {
   1471                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000030                ; Setup parameters for call to function osal_set_event
   \   000030   7A10         MOV     R2,#0x10
   \   000032   7B00         MOV     R3,#0x0
   \   000034   90....       MOV     DPTR,#ZDAppTaskID
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00003C   E9           MOV     A,R1
   1472          
   1473          #if defined ( POWER_SAVING )
   1474                osal_pwrmgr_device( PWRMGR_BATTERY );
   1475          #endif
   1476          
   1477                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   \   00003D                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00003D   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000040   E9           MOV     A,R1
   \   000041   7010         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1478                {
   1479                  // wait for auth from trust center
   1480                  devState = DEV_END_DEVICE_UNAUTH;
   \   000043   90....       MOV     DPTR,#devState
   \   000046   7405         MOV     A,#0x5
   \   000048   F0           MOVX    @DPTR,A
   1481          
   1482                  // Start the reset timer for MAX UNAUTH time
   1483                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   000049                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000049   7A10         MOV     R2,#0x10
   \   00004B   7B27         MOV     R3,#0x27
   \   00004D   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   000050   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1484                }
   1485                else
   1486                {
   1487                  if ( ZSTACK_ROUTER_BUILD )
   1488                  {
   1489                    if ( devState == DEV_NWK_ORPHAN
   1490                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000053   90....       MOV     DPTR,#devState
   \   000056   E0           MOVX    A,@DPTR
   \   000057   640A         XRL     A,#0xa
   \   000059   7010         JNZ     ??ZDApp_ProcessNetworkJoin_5
   \   00005B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   5407         ANL     A,#0x7
   \   000061   6402         XRL     A,#0x2
   \   000063   6006         JZ      ??ZDApp_ProcessNetworkJoin_5
   1491                    {
   1492                      // Change NIB state to router for restore
   1493                      _NIB.nwkState = NWK_ROUTER;
   \   000065   90....       MOV     DPTR,#_NIB + 35
   \   000068   7408         MOV     A,#0x8
   \   00006A   F0           MOVX    @DPTR,A
   1494                    }
   1495                  }
   1496          
   1497                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00006B   90....       MOV     DPTR,#devState
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   6403         XRL     A,#0x3
   \   000071   7003         JNZ     ??ZDApp_ProcessNetworkJoin_6
   1498                  {
   1499                    ZDApp_AnnounceNewAddress();
   \   000073                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000073   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1500                  }
   1501          
   1502                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   000076   90....       MOV     DPTR,#devState
   \   000079   7406         MOV     A,#0x6
   \   00007B   F0           MOVX    @DPTR,A
   1503                  if ( ZSTACK_ROUTER_BUILD )
   1504                  {
   1505                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1506                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   00007C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   5407         ANL     A,#0x7
   \   000082   6402         XRL     A,#0x2
   \   000084   7003         JNZ     $+5
   \   000086   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1507                    {
   1508                      NLME_StartRouterRequest( 0, 0, false );
   \   000089                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000089   7B00         MOV     R3,#0x0
   \   00008B   7A00         MOV     R2,#0x0
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   000092   E9           MOV     A,R1
   \   000093   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1509                    }
   1510                  }
   1511                }
   1512              }
   1513              else
   1514              {
   1515                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   000096   90....       MOV     DPTR,#devStartMode
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   6401         XRL     A,#0x1
   \   00009C   7040         JNZ     ??ZDApp_ProcessNetworkJoin_7
   \   00009E   90....       MOV     DPTR,#retryCnt
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   2401         ADD     A,#0x1
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   90....       MOV     DPTR,#retryCnt
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   C3           CLR     C
   \   0000AA   9403         SUBB    A,#0x3
   \   0000AC   4030         JC      ??ZDApp_ProcessNetworkJoin_7
   1516                {
   1517                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   0000AE   90....       MOV     DPTR,#_NIB + 33
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   64FF         XRL     A,#0xff
   \   0000B4   7004         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   0000BA   600E         JZ      ??ZDApp_ProcessNetworkJoin_9
   \   0000BC   90....       MOV     DPTR,#_NIB + 33
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   64FE         XRL     A,#0xfe
   \   0000C2   7004         JNZ     ??ZDApp_ProcessNetworkJoin_10
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000C8   7008         JNZ     ??ZDApp_ProcessNetworkJoin_11
   1518                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   0000CA   90....       MOV     DPTR,#devStartMode
   \   0000CD   7400         MOV     A,#0x0
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   800C         SJMP    ??ZDApp_ProcessNetworkJoin_7
   1519                  else
   1520                  {
   1521                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000D2   90....       MOV     DPTR,#devStartMode
   \   0000D5   7403         MOV     A,#0x3
   \   0000D7   F0           MOVX    @DPTR,A
   1522                    _tmpRejoinState = true;
   \   0000D8   90....       MOV     DPTR,#_tmpRejoinState
   \   0000DB   7401         MOV     A,#0x1
   \   0000DD   F0           MOVX    @DPTR,A
   1523                  }
   1524                }
   1525          
   1526                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1527                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   0000DE                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000DE   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000E1   8A..         MOV     ?V0,R2
   \   0000E3   8B..         MOV     ?V1,R3
   \   0000E5   74FE         MOV     A,#-0x2
   \   0000E7   65..         XRL     A,?V0
   \   0000E9   7004         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   0000EB   74FF         MOV     A,#-0x1
   \   0000ED   65..         XRL     A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000EF   700E         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   0000F1   90....       MOV     DPTR,#_NIB + 20
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   64FE         XRL     A,#0xfe
   \   0000F7   7004         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000FD   6021         JZ      ??ZDApp_ProcessNetworkJoin_15
   1528                {
   1529                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000FF   85..82       MOV     DPL,?XSP + 0
   \   000102   85..83       MOV     DPH,?XSP + 1
   \   000105   74FE         MOV     A,#-0x2
   \   000107   F0           MOVX    @DPTR,A
   \   000108   A3           INC     DPTR
   \   000109   74FF         MOV     A,#-0x1
   \   00010B   F0           MOVX    @DPTR,A
   1530                  // Invalidate nwk addr so end device does not use in its data reqs.
   1531                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   00010C   90....       MOV     DPTR,#_NIB + 20
   \   00010F   74FE         MOV     A,#-0x2
   \   000111   F0           MOVX    @DPTR,A
   \   000112   A3           INC     DPTR
   \   000113   74FF         MOV     A,#-0x1
   \   000115   F0           MOVX    @DPTR,A
   1532                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   000116                ; Setup parameters for call to function ZMacSetReq
   \   000116   AA..         MOV     R2,?XSP + 0
   \   000118   AB..         MOV     R3,?XSP + 1
   \   00011A   7953         MOV     R1,#0x53
   \   00011C   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00011F   E9           MOV     A,R1
   1533                }
   1534          
   1535                // Clear the neighbor Table and network discovery tables.
   1536                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   000120                ; Setup parameters for call to function nwkNeighborInitTable
   \   000120   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1537                NLME_NwkDiscTerm();
   \   000123                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000123   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1538          
   1539                zdoDiscCounter = 1;
   \   000126   90....       MOV     DPTR,#zdoDiscCounter
   \   000129   7401         MOV     A,#0x1
   \   00012B   F0           MOVX    @DPTR,A
   1540          
   1541          //      ZDApp_NetworkInit( (uint16)
   1542          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1543          //                          (NWK_START_DELAY * 5)) );
   1544                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1545                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   00012C                ; Setup parameters for call to function osal_rand
   \   00012C   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   00012F   8A..         MOV     ?V0,R2
   \   000131   8B..         MOV     ?V1,R3
   \   000133   A8..         MOV     R0,?V0
   \   000135   A9..         MOV     R1,?V1
   \   000137                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000137   E8           MOV     A,R0
   \   000138   547F         ANL     A,#0x7f
   \   00013A   F8           MOV     R0,A
   \   00013B   E9           MOV     A,R1
   \   00013C   5400         ANL     A,#0x0
   \   00013E   F9           MOV     R1,A
   \   00013F   E8           MOV     A,R0
   \   000140   2464         ADD     A,#0x64
   \   000142   FA           MOV     R2,A
   \   000143   E4           CLR     A
   \   000144   39           ADDC    A,R1
   \   000145   FB           MOV     R3,A
   \   000146   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000149   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1546              }
   1547            }
   1548            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   00014C   90....       MOV     DPTR,#devState
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   640A         XRL     A,#0xa
   \   000152   600B         JZ      ??ZDApp_ProcessNetworkJoin_16
   \   000154   90....       MOV     DPTR,#devState
   \   000157   E0           MOVX    A,@DPTR
   \   000158   6404         XRL     A,#0x4
   \   00015A   6003         JZ      $+5
   \   00015C   02....       LJMP    ??ZDApp_ProcessNetworkJoin_17 & 0xFFFF
   1549            {
   1550              // results of an orphaning attempt by this device
   1551              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   00015F   90....       MOV     DPTR,#nwkStatus
   \   000162   E0           MOVX    A,@DPTR
   \   000163   7073         JNZ     ??ZDApp_ProcessNetworkJoin_18
   1552              {
   1553                // Verify NWK key is available before sending Device_annce
   1554                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   \   000165                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000165   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000168   E9           MOV     A,R1
   \   000169   701D         JNZ     ??ZDApp_ProcessNetworkJoin_19
   1555                {
   1556                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00016B                ; Setup parameters for call to function osal_set_event
   \   00016B   7A10         MOV     R2,#0x10
   \   00016D   7B00         MOV     R3,#0x0
   \   00016F   90....       MOV     DPTR,#ZDAppTaskID
   \   000172   E0           MOVX    A,@DPTR
   \   000173   F9           MOV     R1,A
   \   000174   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000177   E9           MOV     A,R1
   1557          
   1558                  // wait for auth from trust center
   1559                  devState = DEV_END_DEVICE_UNAUTH;
   \   000178   90....       MOV     DPTR,#devState
   \   00017B   7405         MOV     A,#0x5
   \   00017D   F0           MOVX    @DPTR,A
   1560          
   1561                  // Start the reset timer for MAX UNAUTH time
   1562                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   00017E                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   00017E   7A10         MOV     R2,#0x10
   \   000180   7B27         MOV     R3,#0x27
   \   000182   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   000185   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1563                }
   1564                else
   1565                {
   1566          
   1567                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000188   90....       MOV     DPTR,#devState
   \   00018B   7406         MOV     A,#0x6
   \   00018D   F0           MOVX    @DPTR,A
   1568                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00018E                ; Setup parameters for call to function osal_set_event
   \   00018E   7A10         MOV     R2,#0x10
   \   000190   7B00         MOV     R3,#0x0
   \   000192   90....       MOV     DPTR,#ZDAppTaskID
   \   000195   E0           MOVX    A,@DPTR
   \   000196   F9           MOV     R1,A
   \   000197   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00019A   E9           MOV     A,R1
   1569                  // setup Power Manager Device
   1570          #if defined ( POWER_SAVING )
   1571                  osal_pwrmgr_device( PWRMGR_BATTERY );
   1572          #endif
   1573          
   1574                  // The receiver is on, turn network layer polling off.
   1575                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   00019B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   A2E3         MOV     C,0xE0 /* A   */.3
   \   0001A1   501B         JNC     ??ZDApp_ProcessNetworkJoin_20
   1576                  {
   1577          #if defined ( ZIGBEE_CHILD_AGING )
   1578                    // if Child Table Management process is not enabled
   1579                    if ( zgChildAgingEnable == FALSE )
   \   0001A3   90....       MOV     DPTR,#zgChildAgingEnable
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   7015         JNZ     ??ZDApp_ProcessNetworkJoin_20
   1580          #endif // ZIGBEE_CHILD_AGING
   1581                    {
   1582                      NLME_SetPollRate( 0 );
   \   0001A9                ; Setup parameters for call to function NLME_SetPollRate
   \   0001A9   7A00         MOV     R2,#0x0
   \   0001AB   7B00         MOV     R3,#0x0
   \   0001AD   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1583                      NLME_SetQueuedPollRate( 0 );
   \   0001B0                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0001B0   7A00         MOV     R2,#0x0
   \   0001B2   7B00         MOV     R3,#0x0
   \   0001B4   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1584                      NLME_SetResponseRate( 0 );
   \   0001B7                ; Setup parameters for call to function NLME_SetResponseRate
   \   0001B7   7A00         MOV     R2,#0x0
   \   0001B9   7B00         MOV     R3,#0x0
   \   0001BB   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1585                    }
   1586                  }
   1587          
   1588                  if ( ZSTACK_ROUTER_BUILD )
   1589                  {
   1590                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1591                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   0001BE   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   5407         ANL     A,#0x7
   \   0001C4   6402         XRL     A,#0x2
   \   0001C6   600A         JZ      ??ZDApp_ProcessNetworkJoin_21
   1592                    {
   1593                      NLME_StartRouterRequest( 0, 0, false );
   \   0001C8                ; Setup parameters for call to function NLME_StartRouterRequest
   \   0001C8   7B00         MOV     R3,#0x0
   \   0001CA   7A00         MOV     R2,#0x0
   \   0001CC   7900         MOV     R1,#0x0
   \   0001CE   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   0001D1   E9           MOV     A,R1
   1594                    }
   1595                  }
   1596          
   1597                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   0001D2                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001D2   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   0001D5   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1598                }
   1599              }
   1600              else
   1601              {
   1602                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   0001D8   90....       MOV     DPTR,#devStartMode
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   6401         XRL     A,#0x1
   \   0001DE   7050         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1603                {
   1604                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   0001E0   90....       MOV     DPTR,#retryCnt
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   2401         ADD     A,#0x1
   \   0001E6   F0           MOVX    @DPTR,A
   \   0001E7   90....       MOV     DPTR,#retryCnt
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   C3           CLR     C
   \   0001EC   9404         SUBB    A,#0x4
   \   0001EE   5032         JNC     ??ZDApp_ProcessNetworkJoin_23
   1605                  {
   1606                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   0001F0   90....       MOV     DPTR,#_NIB + 33
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   64FF         XRL     A,#0xff
   \   0001F6   7004         JNZ     ??ZDApp_ProcessNetworkJoin_24
   \   0001F8   A3           INC     DPTR
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   0001FC   600E         JZ      ??ZDApp_ProcessNetworkJoin_25
   \   0001FE   90....       MOV     DPTR,#_NIB + 33
   \   000201   E0           MOVX    A,@DPTR
   \   000202   64FE         XRL     A,#0xfe
   \   000204   7004         JNZ     ??ZDApp_ProcessNetworkJoin_26
   \   000206   A3           INC     DPTR
   \   000207   E0           MOVX    A,@DPTR
   \   000208   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   00020A   7008         JNZ     ??ZDApp_ProcessNetworkJoin_27
   1607                      devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   00020C   90....       MOV     DPTR,#devStartMode
   \   00020F   7400         MOV     A,#0x0
   \   000211   F0           MOVX    @DPTR,A
   \   000212   801C         SJMP    ??ZDApp_ProcessNetworkJoin_22
   1608                    else
   1609                    {
   1610                      devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   000214   90....       MOV     DPTR,#devStartMode
   \   000217   7403         MOV     A,#0x3
   \   000219   F0           MOVX    @DPTR,A
   1611                      _tmpRejoinState = true;
   \   00021A   90....       MOV     DPTR,#_tmpRejoinState
   \   00021D   7401         MOV     A,#0x1
   \   00021F   F0           MOVX    @DPTR,A
   \   000220   800E         SJMP    ??ZDApp_ProcessNetworkJoin_22
   1612                    }
   1613                  }
   1614                  // Do a normal join to the network after certain times of rejoin retries
   1615                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000222   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   000225   E0           MOVX    A,@DPTR
   \   000226   6401         XRL     A,#0x1
   \   000228   7006         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1616                  {
   1617                    devStartMode = MODE_JOIN;
   \   00022A   90....       MOV     DPTR,#devStartMode
   \   00022D   7400         MOV     A,#0x0
   \   00022F   F0           MOVX    @DPTR,A
   1618                  }
   1619                }
   1620          
   1621                // Clear the neighbor Table and network discovery tables.
   1622                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000230                ; Setup parameters for call to function nwkNeighborInitTable
   \   000230   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1623                NLME_NwkDiscTerm();
   \   000233                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000233   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1624          
   1625                // setup a retry for later...
   1626                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1627                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   000236                ; Setup parameters for call to function osal_rand
   \   000236   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000239   8A..         MOV     ?V0,R2
   \   00023B   8B..         MOV     ?V1,R3
   \   00023D   A8..         MOV     R0,?V0
   \   00023F   A9..         MOV     R1,?V1
   \   000241                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000241   E8           MOV     A,R0
   \   000242   547F         ANL     A,#0x7f
   \   000244   F8           MOV     R0,A
   \   000245   E9           MOV     A,R1
   \   000246   5400         ANL     A,#0x0
   \   000248   F9           MOV     R1,A
   \   000249   E8           MOV     A,R0
   \   00024A   2464         ADD     A,#0x64
   \   00024C   FA           MOV     R2,A
   \   00024D   E4           CLR     A
   \   00024E   39           ADDC    A,R1
   \   00024F   FB           MOV     R3,A
   \   000250   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000253   8018         SJMP    ??ZDApp_ProcessNetworkJoin_4
   1628              }
   1629            }
   1630          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1631            else
   1632            {
   1633              // Assume from address conflict
   1634              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   000255   90....       MOV     DPTR,#_NIB + 96
   \   000258   E0           MOVX    A,@DPTR
   \   000259   6402         XRL     A,#0x2
   \   00025B   7010         JNZ     ??ZDApp_ProcessNetworkJoin_4
   1635              {
   1636                // Notify the network
   1637                ZDApp_AnnounceNewAddress();
   \   00025D                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00025D   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1638          
   1639                // Notify apps
   1640                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000260                ; Setup parameters for call to function osal_set_event
   \   000260   7A10         MOV     R2,#0x10
   \   000262   7B00         MOV     R3,#0x0
   \   000264   90....       MOV     DPTR,#ZDAppTaskID
   \   000267   E0           MOVX    A,@DPTR
   \   000268   F9           MOV     R1,A
   \   000269   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00026C   E9           MOV     A,R1
   1641              }
   1642            }
   1643          #endif
   1644          }
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   00026D   7402         MOV     A,#0x2
   \   00026F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000272   7F02         MOV     R7,#0x2
   \   000274   02....       LJMP    ?BANKED_LEAVE_XDATA
   1645          
   1646          /*********************************************************************
   1647           * @fn      ZDApp_SaveNwkKey()
   1648           *
   1649           * @brief   Save off the Network key information.
   1650           *
   1651           * @param   none
   1652           *
   1653           * @return  none
   1654           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1655          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1656          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1657            nwkActiveKeyItems keyItems;
   1658          
   1659            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1660          
   1661            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1662                          (void *)&keyItems );
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   A8..         MOV     R0,?XSP + 0
   \   000013   A9..         MOV     R1,?XSP + 1
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..15       MOV     ?V0,#0x15
   \   000021   75..00       MOV     ?V1,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A82         MOV     R2,#-0x7e
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   E9           MOV     A,R1
   1663          
   1664            nwkFrameCounterChanges = 0;
   \   00003A   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003D   7400         MOV     A,#0x0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   7400         MOV     A,#0x0
   \   000043   F0           MOVX    @DPTR,A
   1665          
   1666            // Clear copy in RAM before return.
   1667            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000044                ; Setup parameters for call to function osal_memset
   \   000044   7C15         MOV     R4,#0x15
   \   000046   7D00         MOV     R5,#0x0
   \   000048   7900         MOV     R1,#0x0
   \   00004A   AA..         MOV     R2,?XSP + 0
   \   00004C   AB..         MOV     R3,?XSP + 1
   \   00004E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1668          
   1669          }
   \   000051   7415         MOV     A,#0x15
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   7F02         MOV     R7,#0x2
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
   1670          
   1671          /*********************************************************************
   1672           * @fn      ZDApp_ForceConcentratorChange()
   1673           *
   1674           * @brief   Force a network concentrator change by resetting 
   1675           *          zgConcentratorEnable and zgConcentratorDiscoveryTime 
   1676           *          from NV and set nwk event.
   1677           *
   1678           * @param   none
   1679           *
   1680           * @return  none
   1681           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1682          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1683          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1684            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV     ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV     ?V0,#0x1
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A32         MOV     R2,#0x32
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002B   E9           MOV     A,R1
   1685            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002C                ; Setup parameters for call to function osal_nv_read
   \   00002C   75....       MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002F   75....       MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   75..01       MOV     ?V0,#0x1
   \   00003A   75..00       MOV     ?V1,#0x0
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C00         MOV     R4,#0x0
   \   000044   7D00         MOV     R5,#0x0
   \   000046   7A33         MOV     R2,#0x33
   \   000048   7B00         MOV     R3,#0x0
   \   00004A   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004D   7404         MOV     A,#0x4
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000052   E9           MOV     A,R1
   1686           
   1687            if ( zgConcentratorEnable == TRUE )
   \   000053   90....       MOV     DPTR,#zgConcentratorEnable
   \   000056   E0           MOVX    A,@DPTR
   \   000057   6401         XRL     A,#0x1
   \   000059   701A         JNZ     ??ZDApp_ForceConcentratorChange_0
   1688            {
   1689              // Start next event
   1690              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   00005B                ; Setup parameters for call to function osal_start_timerEx
   \   00005B   90....       MOV     DPTR,#__Constant_64
   \   00005E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000061   7A00         MOV     R2,#0x0
   \   000063   7B08         MOV     R3,#0x8
   \   000065   90....       MOV     DPTR,#NWK_TaskID
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006D   7404         MOV     A,#0x4
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000072   E9           MOV     A,R1
   \   000073   800D         SJMP    ??ZDApp_ForceConcentratorChange_1
   1691            }
   1692            else
   1693            {
   1694              // Stop the next event
   1695              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000075                ; Setup parameters for call to function osal_stop_timerEx
   \   000075   7A00         MOV     R2,#0x0
   \   000077   7B08         MOV     R3,#0x8
   \   000079   90....       MOV     DPTR,#NWK_TaskID
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000081   E9           MOV     A,R1
   1696            }
   1697          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   000082   7F02         MOV     R7,#0x2
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
   1698          
   1699          /*********************************************************************
   1700           * @fn      ZDApp_ResetNwkKey()
   1701           *
   1702           * @brief   Reset the Network key information in NV.
   1703           *
   1704           * @param   none
   1705           *
   1706           * @return  none
   1707           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1708          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1709          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1710            nwkActiveKeyItems keyItems;
   1711          
   1712            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1713            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1714                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV     ?V0,#0x15
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A82         MOV     R2,#-0x7e
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
   1715          }
   \   000040   7415         MOV     A,#0x15
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   7F02         MOV     R7,#0x2
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
   1716          
   1717          /*********************************************************************
   1718           * @fn      ZDApp_RestoreNwkKey()
   1719           *
   1720           * @brief
   1721           *
   1722           *   Save off the Network key information.
   1723           *
   1724           * @param   none
   1725           *
   1726           * @return  true if restored from NV, false if not
   1727           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1728          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1729          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1730            nwkActiveKeyItems keyItems;
   1731            uint8 ret = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   1732          
   1733            // Restore the key information
   1734            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1735                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   A8..         MOV     R0,?XSP + 0
   \   00000E   A9..         MOV     R1,?XSP + 1
   \   000010   88..         MOV     ?V0,R0
   \   000012   89..         MOV     ?V1,R1
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   75..15       MOV     ?V0,#0x15
   \   00001C   75..00       MOV     ?V1,#0x0
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C00         MOV     R4,#0x0
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A82         MOV     R2,#-0x7e
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   6003         JZ      $+5
   \   000037   02....       LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1736            {
   1737              uint8 nullKey[SEC_KEY_LEN];
   1738          
   1739              // initialize default value to compare to
   1740              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   00003A                ; Setup parameters for call to function osal_memset
   \   00003A   7C10         MOV     R4,#0x10
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   7900         MOV     R1,#0x0
   \   000040   7415         MOV     A,#0x15
   \   000042   12....       LCALL   ?XSTACK_DISP101_8
   \   000045   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1741          
   1742              // if stored key is different than default value, then a key has been established
   1743              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000048                ; Setup parameters for call to function osal_memcmp
   \   000048   7415         MOV     A,#0x15
   \   00004A   12....       LCALL   ?XSTACK_DISP100_8
   \   00004D   88..         MOV     ?V0,R0
   \   00004F   89..         MOV     ?V1,R1
   \   000051   75..00       MOV     ?V2,#0x0
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   7C10         MOV     R4,#0x10
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7404         MOV     A,#0x4
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   A982         MOV     R1,DPL
   \   000064   AA83         MOV     R2,DPH
   \   000066   7B00         MOV     R3,#0x0
   \   000068   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00006B   7403         MOV     A,#0x3
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   E9           MOV     A,R1
   \   000071   7062         JNZ     ??ZDApp_RestoreNwkKey_0
   1744              {
   1745                // Increment the frame counter stored in NV
   1746                keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1747                                           NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000073   90....       MOV     DPTR,#__Constant_4e2
   \   000076   78..         MOV     R0,#?V0
   \   000078   12....       LCALL   ?L_MOV_X
   \   00007B   7411         MOV     A,#0x11
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   78..         MOV     R0,#?V0
   \   000082   12....       LCALL   ?L_ADD_TO_X
   1748          
   1749                nwkFrameCounter = keyItems.frameCounter;
   \   000085   7411         MOV     A,#0x11
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   12....       LCALL   ?XLOAD_R0123
   \   00008D   90....       MOV     DPTR,#nwkFrameCounter
   \   000090   12....       LCALL   ?XSTORE_R0123
   1750          
   1751                // Save the updated Frame Counter right away
   1752                osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1753                               (void *)&keyItems );
   \   000093                ; Setup parameters for call to function osal_nv_write
   \   000093   A8..         MOV     R0,?XSP + 0
   \   000095   A9..         MOV     R1,?XSP + 1
   \   000097   88..         MOV     ?V0,R0
   \   000099   89..         MOV     ?V1,R1
   \   00009B   78..         MOV     R0,#?V0
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   75..15       MOV     ?V0,#0x15
   \   0000A3   75..00       MOV     ?V1,#0x0
   \   0000A6   78..         MOV     R0,#?V0
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AB   7C00         MOV     R4,#0x0
   \   0000AD   7D00         MOV     R5,#0x0
   \   0000AF   7A82         MOV     R2,#-0x7e
   \   0000B1   7B00         MOV     R3,#0x0
   \   0000B3   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B6   7404         MOV     A,#0x4
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV     A,R1
   1754          
   1755                nwkFrameCounterChanges = 0;
   \   0000BC   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   0000BF   7400         MOV     A,#0x0
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   7400         MOV     A,#0x0
   \   0000C5   F0           MOVX    @DPTR,A
   1756          
   1757                ret = TRUE;
   \   0000C6   7E01         MOV     R6,#0x1
   1758          
   1759                // Clear copy in RAM before return.
   1760                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000C8                ; Setup parameters for call to function osal_memset
   \   0000C8   7C15         MOV     R4,#0x15
   \   0000CA   7D00         MOV     R5,#0x0
   \   0000CC   7900         MOV     R1,#0x0
   \   0000CE   AA..         MOV     R2,?XSP + 0
   \   0000D0   AB..         MOV     R3,?XSP + 1
   \   0000D2   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1761              }
   1762            }
   1763          
   1764            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000D5   EE           MOV     A,R6
   \   0000D6   F9           MOV     R1,A
   \   0000D7   7425         MOV     A,#0x25
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DC   7F04         MOV     R7,#0x4
   \   0000DE   02....       LJMP    ?BANKED_LEAVE_XDATA
   1765          }
   1766          
   1767          /*********************************************************************
   1768           * @fn      ZDApp_ResetTimerStart
   1769           *
   1770           * @brief   Start the reset timer.
   1771           *
   1772           * @param   delay - delay time(ms) before reset
   1773           *
   1774           * @return  none
   1775           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1776          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1777          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1778            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   7020         JNZ     ??ZDApp_ResetTimerStart_0
   1779            {
   1780              // Start the rest timer
   1781              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   8E..         MOV     ?V0,R6
   \   00001D   8F..         MOV     ?V1,R7
   \   00001F   E4           CLR     A
   \   000020   F5..         MOV     ?V2,A
   \   000022   F5..         MOV     ?V3,A
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000029   7A04         MOV     R2,#0x4
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   90....       MOV     DPTR,#ZDAppTaskID
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F9           MOV     R1,A
   \   000032   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000035   7404         MOV     A,#0x4
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003A   E9           MOV     A,R1
   1782            }
   1783          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   00003B   7F04         MOV     R7,#0x4
   \   00003D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1784          
   1785          /*********************************************************************
   1786           * @fn      ZDApp_ResetTimerCancel
   1787           *
   1788           * @brief   Cancel the reset timer.
   1789           *
   1790           * @param   none
   1791           *
   1792           * @return  none
   1793           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1794          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1795          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1796            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000005                ; Setup parameters for call to function osal_stop_timerEx
   \   000005   7A04         MOV     R2,#0x4
   \   000007   7B00         MOV     R3,#0x0
   \   000009   90....       MOV     DPTR,#ZDAppTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000011   E9           MOV     A,R1
   \   000012   FE           MOV     R6,A
   1797            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000013                ; Setup parameters for call to function osal_clear_event
   \   000013   7A04         MOV     R2,#0x4
   \   000015   7B00         MOV     R3,#0x0
   \   000017   90....       MOV     DPTR,#ZDAppTaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   \   00001F   E9           MOV     A,R1
   1798          }
   \   000020   7F01         MOV     R7,#0x1
   \   000022   02....       LJMP    ?BANKED_LEAVE_XDATA
   1799          
   1800          /*********************************************************************
   1801           * @fn      ZDApp_LeaveCtrlInit
   1802           *
   1803           * @brief   Initialize the leave control logic.
   1804           *
   1805           * @param   none
   1806           *
   1807           * @return  none
   1808           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1809          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1810          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1811            uint8 status;
   1812          
   1813          
   1814            // Initialize control state
   1815            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   7400         MOV     A,#0x0
   \   00000A   F0           MOVX    @DPTR,A
   1816          
   1817            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1818                                        sizeof(ZDApp_LeaveCtrl),
   1819                                        &ZDApp_LeaveCtrl );
   \   00000B                ; Setup parameters for call to function osal_nv_item_init
   \   00000B   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000E   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C01         MOV     R4,#0x1
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
   \   000026   E9           MOV     A,R1
   \   000027   FE           MOV     R6,A
   1820          
   1821            if ( status == ZSUCCESS )
   \   000028   EE           MOV     A,R6
   \   000029   7027         JNZ     ??ZDApp_LeaveCtrlInit_0
   1822            {
   1823              // Read saved control
   1824              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1825                            0,
   1826                            sizeof( uint8 ),
   1827                            &ZDApp_LeaveCtrl);
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00002E   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A85         MOV     R2,#-0x7b
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   E9           MOV     A,R1
   1828            }
   1829          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000052   7F02         MOV     R7,#0x2
   \   000054   02....       LJMP    ?BANKED_LEAVE_XDATA
   1830          
   1831          /*********************************************************************
   1832           * @fn      ZDApp_LeaveCtrlSet
   1833           *
   1834           * @brief   Set the leave control logic.
   1835           *
   1836           * @param   ra - reassociate flag
   1837           *
   1838           * @return  none
   1839           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1840          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1841          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1842            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1843          
   1844            if ( ra == TRUE )
   \   00000D   7401         MOV     A,#0x1
   \   00000F   6E           XRL     A,R6
   \   000010   7007         JNZ     ??ZDApp_LeaveCtrlSet_0
   1845            {
   1846              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000012   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000015   E0           MOVX    A,@DPTR
   \   000016   D2E1         SETB    0xE0 /* A   */.1
   \   000018   F0           MOVX    @DPTR,A
   1847            }
   1848          
   1849            // Write the leave control
   1850            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1851                           0,
   1852                           sizeof( uint8 ),
   1853                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000019                ; Setup parameters for call to function osal_nv_write
   \   000019   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00001C   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..01       MOV     ?V0,#0x1
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A85         MOV     R2,#-0x7b
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
   1854          }
   \   000040   7F02         MOV     R7,#0x2
   \   000042   02....       LJMP    ?BANKED_LEAVE_XDATA
   1855          
   1856          /*********************************************************************
   1857           * @fn      ZDApp_LeaveCtrlReset
   1858           *
   1859           * @brief   Re-initialize the leave control logic.
   1860           *
   1861           * @param   none
   1862           *
   1863           * @return  none
   1864           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1865          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1867            // Set leave control to initialized state
   1868            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   7400         MOV     A,#0x0
   \   00000A   F0           MOVX    @DPTR,A
   1869          
   1870            // Write initialized control
   1871            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1872                          0,
   1873                          sizeof( uint8 ),
   1874                          &ZDApp_LeaveCtrl);
   \   00000B                ; Setup parameters for call to function osal_nv_write
   \   00000B   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000E   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   75..01       MOV     ?V0,#0x1
   \   000019   75..00       MOV     ?V1,#0x0
   \   00001C   78..         MOV     R0,#?V0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   7C00         MOV     R4,#0x0
   \   000023   7D00         MOV     R5,#0x0
   \   000025   7A85         MOV     R2,#-0x7b
   \   000027   7B00         MOV     R3,#0x0
   \   000029   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000031   E9           MOV     A,R1
   1875          }
   \   000032   7F02         MOV     R7,#0x2
   \   000034   02....       LJMP    ?BANKED_LEAVE_XDATA
   1876          
   1877          /*********************************************************************
   1878           * @fn      ZDApp_LeaveCtrlBypass
   1879           *
   1880           * @brief   Check if NV restore should be skipped during a leave reset.
   1881           *
   1882           * @param   none
   1883           *
   1884           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1886          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1887          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1888            uint8 bypass;
   1889          
   1890            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   5004         JNC     ??ZDApp_LeaveCtrlBypass_0
   1891            {
   1892              bypass = TRUE;
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   8002         SJMP    ??ZDApp_LeaveCtrlBypass_1
   1893            }
   1894            else
   1895            {
   1896              bypass = FALSE;
   \                     ??ZDApp_LeaveCtrlBypass_0:
   \   000010   7900         MOV     R1,#0x0
   1897            }
   1898          
   1899            return bypass;
   \                     ??ZDApp_LeaveCtrlBypass_1:
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
   1900          }
   1901          
   1902          /*********************************************************************
   1903           * @fn      ZDApp_LeaveCtrlStartup
   1904           *
   1905           * @brief   Check for startup conditions during a leave reset.
   1906           *
   1907           * @param   state      - devState_t determined by leave control logic
   1908           * @param   startDelay - startup delay
   1909           *
   1910           * @return  none
   1911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1912          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1913          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   1914            *startDelay = 0;
   \   00000D   85..82       MOV     DPL,?V0
   \   000010   85..83       MOV     DPH,?V1
   \   000013   7400         MOV     A,#0x0
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
   1915          
   1916            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00001A   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000020   5021         JNC     ??ZDApp_LeaveCtrlStartup_0
   1917            {
   1918              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000022   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000025   E0           MOVX    A,@DPTR
   \   000026   A2E1         MOV     C,0xE0 /* A   */.1
   \   000028   500F         JNC     ??ZDApp_LeaveCtrlStartup_1
   1919              {
   1920                *startDelay = LEAVE_RESET_DELAY;
   \   00002A   85..82       MOV     DPL,?V0
   \   00002D   85..83       MOV     DPH,?V1
   \   000030   7488         MOV     A,#-0x78
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   7413         MOV     A,#0x13
   \   000036   F0           MOVX    @DPTR,A
   \   000037   8007         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1921              }
   1922              else
   1923              {
   1924                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   7400         MOV     A,#0x0
   \   00003F   F0           MOVX    @DPTR,A
   1925              }
   1926          
   1927              // Reset leave control logic
   1928              ZDApp_LeaveCtrlReset();
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000040                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   000040   12....       LCALL   `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   1929            }
   1930          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   000043   7F02         MOV     R7,#0x2
   \   000045   02....       LJMP    ?BANKED_LEAVE_XDATA
   1931          
   1932          /*********************************************************************
   1933           * @fn      ZDApp_LeaveReset
   1934           *
   1935           * @brief   Setup a device reset due to a leave indication/confirm.
   1936           *
   1937           * @param   ra - reassociate flag
   1938           *
   1939           * @return  none
   1940           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1941          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1942          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1943            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   1944          
   1945            ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   00000C   7A88         MOV     R2,#-0x78
   \   00000E   7B13         MOV     R3,#0x13
   \   000010   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1946          }
   \   000013   7F01         MOV     R7,#0x1
   \   000015   02....       LJMP    ?BANKED_LEAVE_XDATA
   1947          
   1948          /*********************************************************************
   1949           * @fn      ZDApp_LeaveUpdate
   1950           *
   1951           * @brief   Update local device data related to leaving device.
   1952           *
   1953           * @param   nwkAddr        - NWK address of leaving device
   1954           * @param   extAddr        - EXT address of leaving device
   1955           * @param   removeChildren - remove children of leaving device
   1956           *
   1957           * @return  none
   1958           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1959          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1960                                  uint8 removeChildren )
   1961          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
   1962            // Remove Apps Key for leaving device
   1963            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000014                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   \   00001B   E9           MOV     A,R1
   1964          
   1965            // Clear SECURITY bit from Address Manager
   1966            ZDSecMgrAddrClear( extAddr );
   \   00001C                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00001C   EE           MOV     A,R6
   \   00001D   FA           MOV     R2,A
   \   00001E   EF           MOV     A,R7
   \   00001F   FB           MOV     R3,A
   \   000020   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   000023   E9           MOV     A,R1
   1967          
   1968            if ( pbindRemoveDev )
   \   000024   90....       MOV     DPTR,#pbindRemoveDev
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   49           ORL     A,R1
   \   00002E   6038         JZ      ??ZDApp_LeaveUpdate_0
   1969            {
   1970              zAddrType_t devAddr;
   1971          
   1972              // Remove bind entry and all related data
   1973              devAddr.addrMode = Addr64Bit;
   \   000030   7410         MOV     A,#0x10
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   7403         MOV     A,#0x3
   \   000037   F0           MOVX    @DPTR,A
   1974              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   8E..         MOV     ?V4,R6
   \   00003A   8F..         MOV     ?V5,R7
   \   00003C   75..00       MOV     ?V6,#0x0
   \   00003F   78..         MOV     R0,#?V4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000044   7C08         MOV     R4,#0x8
   \   000046   7D00         MOV     R5,#0x0
   \   000048   740B         MOV     A,#0xb
   \   00004A   12....       LCALL   ?XSTACK_DISP101_8
   \   00004D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   1975          
   1976              pbindRemoveDev(&devAddr);
   \   000055                ; Setup parameters for indirect call
   \   000055   7408         MOV     A,#0x8
   \   000057   12....       LCALL   ?XSTACK_DISP101_8
   \   00005A   90....       MOV     DPTR,#pbindRemoveDev
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F8           MOV     R0,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F583         MOV     DPH,A
   \   000063   8882         MOV     DPL,R0
   \   000065   12....       LCALL   ?CALL_IND
   1977            }
   1978          
   1979            // Remove if child
   1980            if ( ZSTACK_ROUTER_BUILD )
   1981            {
   1982              // Router shall notify the Trust Center that a child device has left the network
   1983              if ( AssocIsChild( nwkAddr ) == TRUE )
   \                     ??ZDApp_LeaveUpdate_0:
   \   000068                ; Setup parameters for call to function AssocIsChild
   \   000068   AA..         MOV     R2,?V0
   \   00006A   AB..         MOV     R3,?V1
   \   00006C   12....       LCALL   `??AssocIsChild::?relay`; Banked call to: AssocIsChild
   \   00006F   E9           MOV     A,R1
   \   000070   6401         XRL     A,#0x1
   \   000072   703B         JNZ     ??ZDApp_LeaveUpdate_1
   1984              {
   1985                  APSME_UpdateDeviceReq_t req;
   1986          
   1987                  // forward authorization to the Trust Center
   1988                  req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   000074   85..82       MOV     DPL,?XSP + 0
   \   000077   85..83       MOV     DPH,?XSP + 1
   \   00007A   7400         MOV     A,#0x0
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   7400         MOV     A,#0x0
   \   000080   F0           MOVX    @DPTR,A
   1989                  req.devAddr    = nwkAddr;
   \   000081   7402         MOV     A,#0x2
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   E5..         MOV     A,?V0
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   E5..         MOV     A,?V1
   \   00008C   F0           MOVX    @DPTR,A
   1990                  req.devExtAddr = extAddr;
   \   00008D   7404         MOV     A,#0x4
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   EE           MOV     A,R6
   \   000093   F0           MOVX    @DPTR,A
   \   000094   A3           INC     DPTR
   \   000095   EF           MOV     A,R7
   \   000096   F0           MOVX    @DPTR,A
   1991                  req.status = APSME_UD_DEVICE_LEFT;
   \   000097   7406         MOV     A,#0x6
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   7402         MOV     A,#0x2
   \   00009E   F0           MOVX    @DPTR,A
   1992          
   1993                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1994                  {
   1995                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1996                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1997                    // with legacy Coordinator devices which can only handle one or the other.
   1998                    if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   1999                    {
   2000                      req.apsSecure = FALSE;
   2001          
   2002                      // send and APSME_UPDATE_DEVICE request to the trust center
   2003                      APSME_UpdateDeviceReq( &req );
   2004                    }
   2005          
   2006                    // send the message APS encrypted
   2007                    req.apsSecure = TRUE;
   2008          
   2009                    // send and APSME_UPDATE_DEVICE request to the trust center
   2010                    APSME_UpdateDeviceReq( &req );
   2011                  }
   2012                  else
   2013                  {
   2014                    req.apsSecure = FALSE;
   \   00009F   7407         MOV     A,#0x7
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   7400         MOV     A,#0x0
   \   0000A6   F0           MOVX    @DPTR,A
   2015          
   2016                    // send and APSME_UPDATE_DEVICE request to the trust center
   2017                    APSME_UpdateDeviceReq( &req );
   \   0000A7                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000A7   AA..         MOV     R2,?XSP + 0
   \   0000A9   AB..         MOV     R3,?XSP + 1
   \   0000AB   12....       LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   \   0000AE   E9           MOV     A,R1
   2018                  }
   2019              }
   2020          
   2021              NLME_RemoveChild( extAddr, removeChildren );
   \                     ??ZDApp_LeaveUpdate_1:
   \   0000AF                ; Setup parameters for call to function NLME_RemoveChild
   \   0000AF   A9..         MOV     R1,?V2
   \   0000B1   EE           MOV     A,R6
   \   0000B2   FA           MOV     R2,A
   \   0000B3   EF           MOV     A,R7
   \   0000B4   FB           MOV     R3,A
   \   0000B5   12....       LCALL   `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
   2022            }
   2023          
   2024            // Remove Routing table related entry
   2025            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \   0000B8                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000B8   7900         MOV     R1,#0x0
   \   0000BA   AA..         MOV     R2,?V0
   \   0000BC   AB..         MOV     R3,?V1
   \   0000BE   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   \   0000C1   E9           MOV     A,R1
   2026          
   2027            // Remove entry from neighborTable
   2028            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   0000C2                ; Setup parameters for call to function nwkNeighborRemove
   \   0000C2   90....       MOV     DPTR,#_NIB + 33
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   FC           MOV     R4,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FD           MOV     R5,A
   \   0000CA   AA..         MOV     R2,?V0
   \   0000CC   AB..         MOV     R3,?V1
   \   0000CE   12....       LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2029          
   2030            // Schedule to save data to NV
   2031            ZDApp_NwkWriteNVRequest();
   \   0000D1                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   0000D1   12....       LCALL   `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
   2032          }
   \   0000D4   7411         MOV     A,#0x11
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D9   7F07         MOV     R7,#0x7
   \   0000DB   02....       LJMP    ?BANKED_LEAVE_XDATA
   2033          
   2034          /*********************************************************************
   2035           * @fn      ZDApp_NetworkDiscoveryReq
   2036           *
   2037           * @brief   Request a network discovery.
   2038           *
   2039           * @param  scanChannels -
   2040           * @param  scanDuration -
   2041           *
   2042           * @return  ZStatus_t
   2043           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2044          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2045          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   E9           MOV     A,R1
   \   00000E   FE           MOV     R6,A
   2046            // Setup optional filters - tbd
   2047          
   2048            // Request NLME network discovery
   2049            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   00000F                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   00000F   EE           MOV     A,R6
   \   000010   F9           MOV     R1,A
   \   000011   AA..         MOV     R2,?V0
   \   000013   AB..         MOV     R3,?V1
   \   000015   AC..         MOV     R4,?V2
   \   000017   AD..         MOV     R5,?V3
   \   000019   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   00001C   7F04         MOV     R7,#0x4
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2050          }
   2051          
   2052          /*********************************************************************
   2053           * @fn      ZDApp_JoinReq
   2054           *
   2055           * @brief   Request the device to join a parent in a network.
   2056           *
   2057           * @param   channel -
   2058           * @param   panID -
   2059           *
   2060           * @return  ZStatus_t
   2061           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2062          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2063                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2064          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V6,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V7,A
   \   00001B   7412         MOV     A,#0x12
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V3,A
   \   000023   7413         MOV     A,#0x13
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V2,A
   2065            // Sync up the node with the stack profile (In the case where a pro device
   2066            // joins a non-pro network, or verse versa)
   2067            ZDApp_NodeProfileSync( stackProfile);
   \   00002B                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00002B   A9..         MOV     R1,?V2
   \   00002D   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2068          
   2069            // Request NLME Join Request
   2070            return NLME_JoinRequest(extendedPanID, panID,channel,
   2071                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2072                                    chosenParent, parentDepth);
   \   000030                ; Setup parameters for call to function NLME_JoinRequest
   \   000030   E5..         MOV     A,?V3
   \   000032   F5..         MOV     ?V5,A
   \   000034   78..         MOV     R0,#?V5
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   78..         MOV     R0,#?V6
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F5..         MOV     ?V5,A
   \   000044   78..         MOV     R0,#?V5
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   A9..         MOV     R1,?V4
   \   00004B   AC..         MOV     R4,?V0
   \   00004D   AD..         MOV     R5,?V1
   \   00004F   EE           MOV     A,R6
   \   000050   FA           MOV     R2,A
   \   000051   EF           MOV     A,R7
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   7F08         MOV     R7,#0x8
   \   00005D   02....       LJMP    ?BANKED_LEAVE_XDATA
   2073          
   2074          }
   2075          
   2076          /*********************************************************************
   2077           * @fn      ZDApp_DeviceConfigured
   2078           *
   2079           * @brief   Check to see if the local device is configured (i.e., part
   2080           *          of a network).
   2081           *
   2082           * @param   none
   2083           *
   2084           * @return  TRUE if configured. FALSE, otherwise.
   2085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2086          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2087          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2088            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   74FF         MOV     A,#-0x1
   \   000016   F0           MOVX    @DPTR,A
   2089          
   2090            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2091                          sizeof( uint16), &nwkAddr );
   \   000017                ; Setup parameters for call to function osal_nv_read
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV     ?V0,#0x2
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C14         MOV     R4,#0x14
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A21         MOV     R2,#0x21
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
   2092          
   2093            // Does the NIB have anything more than default?
   2094            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   E0           MOVX    A,@DPTR
   \   000047   64FE         XRL     A,#0xfe
   \   000049   7004         JNZ     ??ZDApp_DeviceConfigured_0
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   64FF         XRL     A,#0xff
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004F   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   000051   7900         MOV     R1,#0x0
   \   000053   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000055   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   7F02         MOV     R7,#0x2
   \   00005E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2095          }
   2096          
   2097          /*********************************************************************
   2098           * CALLBACK FUNCTIONS
   2099           */
   2100          
   2101          
   2102          /*********************************************************************
   2103           * @fn      ZDApp_SendEventMsg()
   2104           *
   2105           * @brief
   2106           *
   2107           *   Sends a Network Join message
   2108           *
   2109           * @param  cmd - command ID
   2110           * @param  len - length (in bytes) of the buf field
   2111           * @param  buf - buffer for the rest of the message.
   2112           *
   2113           * @return  none
   2114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2115          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2116          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   2117            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   00000D                ; Setup parameters for call to function ZDApp_SendMsg
   \   00000D   EE           MOV     A,R6
   \   00000E   FC           MOV     R4,A
   \   00000F   EF           MOV     A,R7
   \   000010   FD           MOV     R5,A
   \   000011   AB..         MOV     R3,?V1
   \   000013   AA..         MOV     R2,?V0
   \   000015   90....       MOV     DPTR,#ZDAppTaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2118          }
   \   00001D   7F02         MOV     R7,#0x2
   \   00001F   02....       LJMP    ?BANKED_LEAVE_XDATA
   2119          
   2120          /*********************************************************************
   2121           * @fn      ZDApp_SendMsg()
   2122           *
   2123           * @brief   Sends a OSAL message
   2124           *
   2125           * @param  taskID - Where to send the message
   2126           * @param  cmd - command ID
   2127           * @param  len - length (in bytes) of the buf field
   2128           * @param  buf - buffer for the rest of the message.
   2129           *
   2130           * @return  none
   2131           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2132          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2133          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V3,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V1,R5
   2134            osal_event_hdr_t *msgPtr;
   2135          
   2136            // Send the address to the task
   2137            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   AA..         MOV     R2,?V7
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000016   8A..         MOV     ?V4,R2
   \   000018   8B..         MOV     ?V5,R3
   \   00001A   AE..         MOV     R6,?V4
   \   00001C   AF..         MOV     R7,?V5
   2138            if ( msgPtr )
   \   00001E   EE           MOV     A,R6
   \   00001F   4F           ORL     A,R7
   \   000020   603D         JZ      ??ZDApp_SendMsg_0
   2139            {
   2140              if ( (len > 0) && (buf != NULL) )
   \   000022   E5..         MOV     A,?V7
   \   000024   6024         JZ      ??ZDApp_SendMsg_1
   \   000026   E5..         MOV     A,?V0
   \   000028   45..         ORL     A,?V1
   \   00002A   601E         JZ      ??ZDApp_SendMsg_1
   2141                osal_memcpy( msgPtr, buf, len );
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   85....       MOV     ?V4,?V0
   \   00002F   85....       MOV     ?V5,?V1
   \   000032   75..00       MOV     ?V6,#0x0
   \   000035   78..         MOV     R0,#?V4
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003A   AC..         MOV     R4,?V7
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   FB           MOV     R3,A
   \   000042   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   2142          
   2143              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   00004A   E5..         MOV     A,?V3
   \   00004C   C0E0         PUSH    A
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   D0E0         POP     A
   \   000054   F0           MOVX    @DPTR,A
   2144              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000055                ; Setup parameters for call to function osal_msg_send
   \   000055   EE           MOV     A,R6
   \   000056   FA           MOV     R2,A
   \   000057   EF           MOV     A,R7
   \   000058   FB           MOV     R3,A
   \   000059   A9..         MOV     R1,?V2
   \   00005B   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00005E   E9           MOV     A,R1
   2145            }
   2146          }
   \                     ??ZDApp_SendMsg_0:
   \   00005F   7F08         MOV     R7,#0x8
   \   000061   02....       LJMP    ?BANKED_LEAVE_XDATA
   2147          
   2148          /*********************************************************************
   2149           * Call Back Functions from NWK  - API
   2150           */
   2151          
   2152          /*********************************************************************
   2153           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2154           *
   2155           * @brief       This function returns a choice of PAN to join.
   2156           *
   2157           * @param       status - return status of the nwk discovery confirm
   2158           *
   2159           * @return      ZStatus_t
   2160           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2161          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2162          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   C0E0         PUSH    A
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   2163            osal_event_hdr_t msg;
   2164          
   2165            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2166            // Send ZDO_MGMT_NWK_DISC_RSP back
   2167          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2168            if ( zdappMgmtNwkDiscReqInProgress )
   2169            {
   2170              zdappMgmtNwkDiscReqInProgress = false;
   2171              ZDO_FinishProcessingMgmtNwkDiscReq();
   2172            }
   2173            else
   2174          #endif
   2175            {
   2176              // Pass the confirm to another task if it registers the callback
   2177              // Otherwise, pass the confirm to ZDApp.
   2178              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000015   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   49           ORL     A,R1
   \   00001F   6014         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2179              {
   2180                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000021                ; Setup parameters for indirect call
   \   000021   AA..         MOV     R2,?XSP + 0
   \   000023   AB..         MOV     R3,?XSP + 1
   \   000025   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   8882         MOV     DPL,R0
   \   000030   12....       LCALL   ?CALL_IND
   \   000033   8019         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2181              }
   2182              else
   2183              {
   2184                // Otherwise, send scan confirm to ZDApp task to proceed
   2185                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   7400         MOV     A,#0x0
   \   00003C   F0           MOVX    @DPTR,A
   2186                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   00003D                ; Setup parameters for call to function ZDApp_SendMsg
   \   00003D   7401         MOV     A,#0x1
   \   00003F   12....       LCALL   ?XSTACK_DISP102_8
   \   000042   7B02         MOV     R3,#0x2
   \   000044   7A01         MOV     R2,#0x1
   \   000046   90....       MOV     DPTR,#ZDAppTaskID
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2187              }
   2188            }
   2189            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   00004E   7900         MOV     R1,#0x0
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   D083         POP     DPH
   \   000057   D082         POP     DPL
   \   000059   02....       LJMP    ?BRET
   2190          }  // ZDO_NetworkDiscoveryConfirmCB
   2191          
   2192          /*********************************************************************
   2193           * @fn          ZDApp_NwkDescListProcessing
   2194           *
   2195           * @brief       This function process the network discovery result and select
   2196           *              a parent device to join itself.
   2197           *
   2198           * @param       none
   2199           *
   2200           * @return      ZStatus_t
   2201           */
   2202          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2203          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2204          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2205            networkDesc_t *pNwkDesc;
   2206            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V3,#0x0
   2207            uint8 stackProfile;
   2208            uint8 stackProfilePro;
   2209            uint8 selected;
   2210          
   2211            // Count the number of nwk descriptors in the list
   2212            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV     ?V6,R2
   \   00000D   8B..         MOV     ?V7,R3
   \   00000F   AE..         MOV     R6,?V6
   \   000011   AF..         MOV     R7,?V7
   2213            while (pNwkDesc)
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000013   EE           MOV     A,R6
   \   000014   4F           ORL     A,R7
   \   000015   6012         JZ      ??ZDApp_NwkDescListProcessing_1
   2214            {
   2215              ResultCount++;
   \   000017   05..         INC     ?V3
   2216              pNwkDesc = pNwkDesc->nextDesc;
   \   000019   EE           MOV     A,R6
   \   00001A   2414         ADD     A,#0x14
   \   00001C   F582         MOV     DPL,A
   \   00001E   E4           CLR     A
   \   00001F   3F           ADDC    A,R7
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FE           MOV     R6,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FF           MOV     R7,A
   \   000027   80EA         SJMP    ??ZDApp_NwkDescListProcessing_0
   2217            }
   2218          
   2219            // process discovery results
   2220            stackProfilePro = FALSE;
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000029   75..00       MOV     ?V0,#0x0
   2221            selected = FALSE;
   \   00002C   75..00       MOV     ?V1,#0x0
   2222          
   2223          
   2224            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   00002F   75..00       MOV     ?V4,#0x0
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000032   E5..         MOV     A,?V4
   \   000034   C3           CLR     C
   \   000035   9402         SUBB    A,#0x2
   \   000037   4003         JC      $+5
   \   000039   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   2225            {
   2226              pNwkDesc = nwk_getNwkDescList();
   \   00003C                ; Setup parameters for call to function nwk_getNwkDescList
   \   00003C   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00003F   8A..         MOV     ?V6,R2
   \   000041   8B..         MOV     ?V7,R3
   \   000043   AE..         MOV     R6,?V6
   \   000045   AF..         MOV     R7,?V7
   2227              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   000047   75..00       MOV     ?V2,#0x0
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00004A   E5..         MOV     A,?V2
   \   00004C   C3           CLR     C
   \   00004D   95..         SUBB    A,?V3
   \   00004F   4003         JC      $+5
   \   000051   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   2228              {
   2229                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   \   000054                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000054   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000056   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000058   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005B   E9           MOV     A,R1
   \   00005C   6401         XRL     A,#0x1
   \   00005E   7014         JNZ     ??ZDApp_NwkDescListProcessing_6
   2230                {
   2231                  // If the extended Pan ID is commissioned to a non zero value
   2232                  // Only join the Pan that has match EPID
   2233                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   \   000060                ; Setup parameters for call to function sAddrExtCmp
   \   000060   EE           MOV     A,R6
   \   000061   240B         ADD     A,#0xb
   \   000063   FC           MOV     R4,A
   \   000064   E4           CLR     A
   \   000065   3F           ADDC    A,R7
   \   000066   FD           MOV     R5,A
   \   000067   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000069   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006B   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00006E   E9           MOV     A,R1
   \   00006F   7026         JNZ     ??ZDApp_NwkDescListProcessing_7
   2234                    continue;
   \   000071   02....       LJMP    ??ZDApp_NwkDescListProcessing_8 & 0xFFFF
   2235          
   2236                }
   2237                else if ( zgConfigPANID != 0xFFFF )
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000074   90....       MOV     DPTR,#zgConfigPANID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   64FF         XRL     A,#0xff
   \   00007A   7004         JNZ     ??ZDApp_NwkDescListProcessing_9
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   64FF         XRL     A,#0xff
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000080   6015         JZ      ??ZDApp_NwkDescListProcessing_7
   2238                {
   2239                  // PAN Id is preconfigured. check if it matches
   2240                  if ( pNwkDesc->panId != zgConfigPANID )
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F8           MOV     R0,A
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   90....       MOV     DPTR,#zgConfigPANID
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   68           XRL     A,R0
   \   000090   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000095   7075         JNZ     ??ZDApp_NwkDescListProcessing_8
   2241                    continue;
   2242                }
   2243          
   2244                // check that network is allowing joining
   2245                if ( ZSTACK_ROUTER_BUILD )
   2246                {
   2247                  if ( stackProfilePro == FALSE )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   000097   E5..         MOV     A,?V0
   \   000099   700C         JNZ     ??ZDApp_NwkDescListProcessing_11
   2248                  {
   2249                    if ( !pNwkDesc->routerCapacity )
   \   00009B   8E82         MOV     DPL,R6
   \   00009D   8F83         MOV     DPH,R7
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   700D         JNZ     ??ZDApp_NwkDescListProcessing_12
   2250                    {
   2251                      continue;
   \   0000A5   8065         SJMP    ??ZDApp_NwkDescListProcessing_8
   2252                    }
   2253                  }
   2254                  else
   2255                  {
   2256                    if ( !pNwkDesc->deviceCapacity )
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   0000A7   8E82         MOV     DPL,R6
   \   0000A9   8F83         MOV     DPH,R7
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   605A         JZ      ??ZDApp_NwkDescListProcessing_8
   2257                    {
   2258                      continue;
   2259                    }
   2260                  }
   2261                }
   2262                else if ( ZSTACK_END_DEVICE_BUILD )
   2263                {
   2264                  if ( !pNwkDesc->deviceCapacity )
   2265                  {
   2266                    continue;
   2267                  }
   2268                }
   2269          
   2270                // check version of zigbee protocol
   2271                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F8           MOV     R0,A
   \   0000BD   90....       MOV     DPTR,#_NIB + 17
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   68           XRL     A,R0
   \   0000C2   7048         JNZ     ??ZDApp_NwkDescListProcessing_8
   2272                  continue;
   2273          
   2274                // check version of stack profile
   2275                if ( pNwkDesc->stackProfile != zgStackProfile  )
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F8           MOV     R0,A
   \   0000D0   90....       MOV     DPTR,#zgStackProfile
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   68           XRL     A,R0
   \   0000D5   6048         JZ      ??ZDApp_NwkDescListProcessing_5
   2276                {
   2277                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2278                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \   0000D7   90....       MOV     DPTR,#zgStackProfile
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   6401         XRL     A,#0x1
   \   0000DD   700F         JNZ     ??ZDApp_NwkDescListProcessing_13
   \   0000DF   8E82         MOV     DPL,R6
   \   0000E1   8F83         MOV     DPH,R7
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   6402         XRL     A,#0x2
   \   0000EC   6017         JZ      ??ZDApp_NwkDescListProcessing_14
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000EE   90....       MOV     DPTR,#zgStackProfile
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   6402         XRL     A,#0x2
   \   0000F4   7012         JNZ     ??ZDApp_NwkDescListProcessing_15
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   6401         XRL     A,#0x1
   \   000103   7003         JNZ     ??ZDApp_NwkDescListProcessing_15
   2279                  {
   2280                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   000105   75..01       MOV     ?V0,#0x1
   2281                  }
   2282          
   2283                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   000108   E5..         MOV     A,?V4
   \   00010A   7013         JNZ     ??ZDApp_NwkDescListProcessing_5
   2284                  {
   2285                    continue;
   2286                  }
   2287                }
   2288          
   2289                break;
   2290              }
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   00010C   05..         INC     ?V2
   \   00010E   EE           MOV     A,R6
   \   00010F   2414         ADD     A,#0x14
   \   000111   F582         MOV     DPL,A
   \   000113   E4           CLR     A
   \   000114   3F           ADDC    A,R7
   \   000115   F583         MOV     DPH,A
   \   000117   E0           MOVX    A,@DPTR
   \   000118   FE           MOV     R6,A
   \   000119   A3           INC     DPTR
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   FF           MOV     R7,A
   \   00011C   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2291          
   2292              if (i < ResultCount)
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00011F   E5..         MOV     A,?V2
   \   000121   C3           CLR     C
   \   000122   95..         SUBB    A,?V3
   \   000124   5005         JNC     ??ZDApp_NwkDescListProcessing_16
   2293              {
   2294               selected = TRUE;
   \   000126   75..01       MOV     ?V1,#0x1
   2295                break;
   \   000129   800F         SJMP    ??ZDApp_NwkDescListProcessing_3
   2296              }
   2297          
   2298              // break if selected or stack profile pro wasn't found
   2299              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   00012B   7401         MOV     A,#0x1
   \   00012D   65..         XRL     A,?V1
   \   00012F   6009         JZ      ??ZDApp_NwkDescListProcessing_3
   \   000131   E5..         MOV     A,?V0
   \   000133   6005         JZ      ??ZDApp_NwkDescListProcessing_3
   2300              {
   2301                break;
   2302              }
   2303            }
   \   000135   05..         INC     ?V4
   \   000137   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   2304          
   2305            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   00013A   E5..         MOV     A,?V3
   \   00013C   65..         XRL     A,?V2
   \   00013E   7006         JNZ     ??ZDApp_NwkDescListProcessing_17
   2306            {
   2307              return (NULL);   // couldn't find appropriate PAN to join !
   \   000140   7A00         MOV     R2,#0x0
   \   000142   7B00         MOV     R3,#0x0
   \   000144   8004         SJMP    ??ZDApp_NwkDescListProcessing_18
   2308            }
   2309            else
   2310            {
   2311              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   000146   EE           MOV     A,R6
   \   000147   FA           MOV     R2,A
   \   000148   EF           MOV     A,R7
   \   000149   FB           MOV     R3,A
   \                     ??ZDApp_NwkDescListProcessing_18:
   \   00014A   7F08         MOV     R7,#0x8
   \   00014C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2312            }
   2313          }// ZDApp_NwkDescListProcessing()
   2314          
   2315          /*********************************************************************
   2316           * @fn          ZDO_NetworkFormationConfirmCB
   2317           *
   2318           * @brief       This function reports the results of the request to
   2319           *              initialize a coordinator in a network.
   2320           *
   2321           * @param       Status - Result of NLME_NetworkFormationRequest()
   2322           *
   2323           * @return      none
   2324           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2325          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2326          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2327            nwkStatus = (byte)Status;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#nwkStatus
   \   00000B   F0           MOVX    @DPTR,A
   2328          
   2329            if ( Status == ZSUCCESS )
   \   00000C   EE           MOV     A,R6
   \   00000D   701E         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2330            {
   2331              // LED on shows Coordinator started
   2332              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000F                ; Setup parameters for call to function HalLedSet
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   7904         MOV     R1,#0x4
   \   000013   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000016   E9           MOV     A,R1
   2333          
   2334              // LED off forgets HOLD_AUTO_START
   2335              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000017                ; Setup parameters for call to function HalLedSet
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7908         MOV     R1,#0x8
   \   00001B   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00001E   E9           MOV     A,R1
   2336          
   2337          #if defined ( ZBIT )
   2338              SIM_SetColor(0xd0ffd0);
   2339          #endif
   2340          
   2341              if ( devState == DEV_HOLD )
   \   00001F   90....       MOV     DPTR,#devState
   \   000022   E0           MOVX    A,@DPTR
   \   000023   7010         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2342              {
   2343                // Began with HOLD_AUTO_START
   2344                devState = DEV_COORD_STARTING;
   \   000025   90....       MOV     DPTR,#devState
   \   000028   7408         MOV     A,#0x8
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   8008         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2345              }
   2346            }
   2347          #if defined(BLINK_LEDS)
   2348            else
   2349            {
   2350              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   00002D                ; Setup parameters for call to function HalLedSet
   \   00002D   7A04         MOV     R2,#0x4
   \   00002F   7904         MOV     R1,#0x4
   \   000031   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000034   E9           MOV     A,R1
   2351            }
   2352          #endif
   2353          
   2354            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   000035                ; Setup parameters for call to function osal_set_event
   \   000035   7A02         MOV     R2,#0x2
   \   000037   7B00         MOV     R3,#0x0
   \   000039   90....       MOV     DPTR,#ZDAppTaskID
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000041   E9           MOV     A,R1
   2355          }
   \   000042   7F01         MOV     R7,#0x1
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   2356          
   2357          /****************************************************************************
   2358           * @fn          ZDApp_beaconIndProcessing
   2359           *
   2360           * @brief       This function processes the incoming beacon indication.
   2361           *
   2362           *              When another task (MT or App) is registered to process
   2363           *              beacon indication themselves, this function will parse the
   2364           *              beacon payload and pass the beacon descriptor to that task
   2365           *              If no other tasks registered, this function will process
   2366           *              the beacon payload and generate the network descriptor link
   2367           *              list.
   2368           *
   2369           * @param
   2370           *
   2371           * @return      none
   2372           *
   2373           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2374          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2375          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2376            // Pass the beacon Indication to another task if it registers the callback
   2377            // Otherwise, process the beacon notification here.
   2378            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   6015         JZ      ??ZDO_beaconNotifyIndCB_0
   2379            {
   2380              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000015                ; Setup parameters for indirect call
   \   000015   AA..         MOV     R2,?V0
   \   000017   AB..         MOV     R3,?V1
   \   000019   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F583         MOV     DPH,A
   \   000022   8882         MOV     DPL,R0
   \   000024   12....       LCALL   ?CALL_IND
   \   000027   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2381            }
   2382            else
   2383            {
   2384              networkDesc_t *pNwkDesc;
   2385              networkDesc_t *pLastNwkDesc;
   2386              uint8 found = false;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   00002A   75..00       MOV     ?V2,#0x0
   2387          
   2388              // Add the network to the Network Descriptor List
   2389              pNwkDesc = NwkDescList;
   \   00002D   90....       MOV     DPTR,#NwkDescList
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   E8           MOV     A,R0
   \   000036   FE           MOV     R6,A
   \   000037   E9           MOV     A,R1
   \   000038   FF           MOV     R7,A
   2390              pLastNwkDesc = NwkDescList;
   \   000039   90....       MOV     DPTR,#NwkDescList
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   88..         MOV     ?V4,R0
   \   000043   89..         MOV     ?V5,R1
   2391              while (pNwkDesc)
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   000045   EE           MOV     A,R6
   \   000046   4F           ORL     A,R7
   \   000047   6049         JZ      ??ZDO_beaconNotifyIndCB_3
   2392              {
   2393                if ((pNwkDesc->panId == pBeacon->panID) &&
   2394                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   85..82       MOV     DPL,?V0
   \   000055   85..83       MOV     DPH,?V1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   68           XRL     A,R0
   \   00005C   7003         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000061   701B         JNZ     ??ZDO_beaconNotifyIndCB_5
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F8           MOV     R0,A
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   68           XRL     A,R0
   \   000077   7005         JNZ     ??ZDO_beaconNotifyIndCB_5
   2395                {
   2396                  found = true;
   \   000079   75..01       MOV     ?V2,#0x1
   2397                  break;
   \   00007C   8014         SJMP    ??ZDO_beaconNotifyIndCB_3
   2398                }
   2399                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   00007E   8E..         MOV     ?V4,R6
   \   000080   8F..         MOV     ?V5,R7
   2400                pNwkDesc = pNwkDesc->nextDesc;
   \   000082   EE           MOV     A,R6
   \   000083   2414         ADD     A,#0x14
   \   000085   F582         MOV     DPL,A
   \   000087   E4           CLR     A
   \   000088   3F           ADDC    A,R7
   \   000089   F583         MOV     DPH,A
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   FE           MOV     R6,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   FF           MOV     R7,A
   \   000090   80B3         SJMP    ??ZDO_beaconNotifyIndCB_2
   2401              }
   2402          
   2403              // If no existing descriptor found, make a new one and add to the list
   2404              if (found == false)
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   000092   E5..         MOV     A,?V2
   \   000094   706C         JNZ     ??ZDO_beaconNotifyIndCB_6
   2405              {
   2406                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   000096                ; Setup parameters for call to function osal_mem_alloc
   \   000096   7A16         MOV     R2,#0x16
   \   000098   7B00         MOV     R3,#0x0
   \   00009A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00009D   8A..         MOV     ?V6,R2
   \   00009F   8B..         MOV     ?V7,R3
   \   0000A1   AE..         MOV     R6,?V6
   \   0000A3   AF..         MOV     R7,?V7
   2407                if ( !pNwkDesc )
   \   0000A5   EE           MOV     A,R6
   \   0000A6   4F           ORL     A,R7
   \   0000A7   7003         JNZ     $+5
   \   0000A9   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2408                {
   2409                  // Memory alloc failed, discard this beacon
   2410                  return;
   2411                }
   2412          
   2413                // Clear the network descriptor
   2414                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   0000AC                ; Setup parameters for call to function osal_memset
   \   0000AC   7C16         MOV     R4,#0x16
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   7900         MOV     R1,#0x0
   \   0000B2   EE           MOV     A,R6
   \   0000B3   FA           MOV     R2,A
   \   0000B4   EF           MOV     A,R7
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2415          
   2416                // Initialize the descriptor
   2417                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   74FE         MOV     A,#-0x2
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   74FF         MOV     A,#-0x1
   \   0000CA   F0           MOVX    @DPTR,A
   2418                pNwkDesc->chosenRouterDepth = 0xFF;
   \   0000CB   8E82         MOV     DPL,R6
   \   0000CD   8F83         MOV     DPH,R7
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   74FF         MOV     A,#-0x1
   \   0000DB   F0           MOVX    @DPTR,A
   2419          
   2420                // Save new entry into the descriptor list
   2421                if ( !NwkDescList )
   \   0000DC   90....       MOV     DPTR,#NwkDescList
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F8           MOV     R0,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F9           MOV     R1,A
   \   0000E4   E8           MOV     A,R0
   \   0000E5   49           ORL     A,R1
   \   0000E6   700A         JNZ     ??ZDO_beaconNotifyIndCB_7
   2422                {
   2423                  NwkDescList = pNwkDesc;
   \   0000E8   90....       MOV     DPTR,#NwkDescList
   \   0000EB   EE           MOV     A,R6
   \   0000EC   F0           MOVX    @DPTR,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   EF           MOV     A,R7
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   8010         SJMP    ??ZDO_beaconNotifyIndCB_6
   2424                }
   2425                else
   2426                {
   2427                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000F2   E5..         MOV     A,?V4
   \   0000F4   2414         ADD     A,#0x14
   \   0000F6   F582         MOV     DPL,A
   \   0000F8   E4           CLR     A
   \   0000F9   35..         ADDC    A,?V5
   \   0000FB   F583         MOV     DPH,A
   \   0000FD   EE           MOV     A,R6
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   A3           INC     DPTR
   \   000100   EF           MOV     A,R7
   \   000101   F0           MOVX    @DPTR,A
   2428                }
   2429              }
   2430          
   2431              // Update the descriptor with the incoming beacon
   2432              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   000102   85..82       MOV     DPL,?V0
   \   000105   85..83       MOV     DPH,?V1
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   C0E0         PUSH    A
   \   000114   8E82         MOV     DPL,R6
   \   000116   8F83         MOV     DPH,R7
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   D0E0         POP     A
   \   000120   F0           MOVX    @DPTR,A
   2433              pNwkDesc->version        = pBeacon->protocolVersion;
   \   000121   85..82       MOV     DPL,?V0
   \   000124   85..83       MOV     DPH,?V1
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   C0E0         PUSH    A
   \   000132   8E82         MOV     DPL,R6
   \   000134   8F83         MOV     DPH,R7
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   D0E0         POP     A
   \   00013D   F0           MOVX    @DPTR,A
   2434              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   00013E   85..82       MOV     DPL,?V0
   \   000141   85..83       MOV     DPH,?V1
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   C0E0         PUSH    A
   \   00014B   8E82         MOV     DPL,R6
   \   00014D   8F83         MOV     DPH,R7
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   D0E0         POP     A
   \   000153   F0           MOVX    @DPTR,A
   2435              pNwkDesc->panId          = pBeacon->panID;
   \   000154   85..82       MOV     DPL,?V0
   \   000157   85..83       MOV     DPH,?V1
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F8           MOV     R0,A
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F9           MOV     R1,A
   \   000161   8E82         MOV     DPL,R6
   \   000163   8F83         MOV     DPH,R7
   \   000165   E8           MOV     A,R0
   \   000166   F0           MOVX    @DPTR,A
   \   000167   A3           INC     DPTR
   \   000168   E9           MOV     A,R1
   \   000169   F0           MOVX    @DPTR,A
   2436              pNwkDesc->updateId       = pBeacon->updateID;
   \   00016A   E5..         MOV     A,?V0
   \   00016C   240C         ADD     A,#0xc
   \   00016E   F582         MOV     DPL,A
   \   000170   E4           CLR     A
   \   000171   35..         ADDC    A,?V1
   \   000173   F583         MOV     DPH,A
   \   000175   E0           MOVX    A,@DPTR
   \   000176   C0E0         PUSH    A
   \   000178   EE           MOV     A,R6
   \   000179   2413         ADD     A,#0x13
   \   00017B   F582         MOV     DPL,A
   \   00017D   E4           CLR     A
   \   00017E   3F           ADDC    A,R7
   \   00017F   F583         MOV     DPH,A
   \   000181   D0E0         POP     A
   \   000183   F0           MOVX    @DPTR,A
   2437          
   2438              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2439              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000184   85..82       MOV     DPL,?V0
   \   000187   85..83       MOV     DPH,?V1
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   6401         XRL     A,#0x1
   \   000195   6015         JZ      ??ZDO_beaconNotifyIndCB_8
   2440              {
   2441                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000197                ; Setup parameters for call to function sAddrExtCpy
   \   000197   E5..         MOV     A,?V0
   \   000199   240D         ADD     A,#0xd
   \   00019B   FC           MOV     R4,A
   \   00019C   E4           CLR     A
   \   00019D   35..         ADDC    A,?V1
   \   00019F   FD           MOV     R5,A
   \   0001A0   EE           MOV     A,R6
   \   0001A1   240B         ADD     A,#0xb
   \   0001A3   FA           MOV     R2,A
   \   0001A4   E4           CLR     A
   \   0001A5   3F           ADDC    A,R7
   \   0001A6   FB           MOV     R3,A
   \   0001A7   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001AA   8010         SJMP    ??ZDO_beaconNotifyIndCB_9
   2442              }
   2443              else
   2444              {
   2445                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   0001AC                ; Setup parameters for call to function osal_memset
   \   0001AC   7C08         MOV     R4,#0x8
   \   0001AE   7D00         MOV     R5,#0x0
   \   0001B0   79FF         MOV     R1,#-0x1
   \   0001B2   EE           MOV     A,R6
   \   0001B3   240B         ADD     A,#0xb
   \   0001B5   FA           MOV     R2,A
   \   0001B6   E4           CLR     A
   \   0001B7   3F           ADDC    A,R7
   \   0001B8   FB           MOV     R3,A
   \   0001B9   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2446              }
   2447          
   2448              // check if this device is a better choice to join...
   2449              // ...dont bother checking assocPermit flag is doing a rejoin
   2450              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2451                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   0001BC   85..82       MOV     DPL,?V0
   \   0001BF   85..83       MOV     DPH,?V1
   \   0001C2   A3           INC     DPTR
   \   0001C3   A3           INC     DPTR
   \   0001C4   A3           INC     DPTR
   \   0001C5   A3           INC     DPTR
   \   0001C6   A3           INC     DPTR
   \   0001C7   A3           INC     DPTR
   \   0001C8   A3           INC     DPTR
   \   0001C9   A3           INC     DPTR
   \   0001CA   A3           INC     DPTR
   \   0001CB   A3           INC     DPTR
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   F8           MOV     R0,A
   \   0001CE   90....       MOV     DPTR,#gMIN_TREE_LQI
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   C3           CLR     C
   \   0001D3   98           SUBB    A,R0
   \   0001D4   4003         JC      $+5
   \   0001D6   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   0001D9   85..82       MOV     DPL,?V0
   \   0001DC   85..83       MOV     DPH,?V1
   \   0001DF   A3           INC     DPTR
   \   0001E0   A3           INC     DPTR
   \   0001E1   A3           INC     DPTR
   \   0001E2   A3           INC     DPTR
   \   0001E3   A3           INC     DPTR
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   6401         XRL     A,#0x1
   \   0001E7   6009         JZ      ??ZDO_beaconNotifyIndCB_10
   \   0001E9   90....       MOV     DPTR,#_tmpRejoinState
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   7003         JNZ     $+5
   \   0001EF   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2452              {
   2453                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   0001F2   7800         MOV     R0,#0x0
   2454                uint8 capacity = FALSE;
   \   0001F4   7900         MOV     R1,#0x0
   2455          
   2456                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \   0001F6   90....       MOV     DPTR,#_NIB + 96
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   6402         XRL     A,#0x2
   \   0001FC   707C         JNZ     ??ZDO_beaconNotifyIndCB_11
   2457                {
   2458                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2459                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2460                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2461                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   0001FE   85..82       MOV     DPL,?V0
   \   000201   85..83       MOV     DPH,?V1
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   A3           INC     DPTR
   \   00020C   A3           INC     DPTR
   \   00020D   A3           INC     DPTR
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   FA           MOV     R2,A
   \   000210   8E82         MOV     DPL,R6
   \   000212   8F83         MOV     DPH,R7
   \   000214   A3           INC     DPTR
   \   000215   A3           INC     DPTR
   \   000216   A3           INC     DPTR
   \   000217   A3           INC     DPTR
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   C3           CLR     C
   \   00021F   9A           SUBB    A,R2
   \   000220   5011         JNC     ??ZDO_beaconNotifyIndCB_12
   \   000222   E5..         MOV     A,?V0
   \   000224   240B         ADD     A,#0xb
   \   000226   F582         MOV     DPL,A
   \   000228   E4           CLR     A
   \   000229   35..         ADDC    A,?V1
   \   00022B   F583         MOV     DPH,A
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   C3           CLR     C
   \   00022F   9414         SUBB    A,#0x14
   \   000231   4043         JC      ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   000233   85..82       MOV     DPL,?V0
   \   000236   85..83       MOV     DPH,?V1
   \   000239   A3           INC     DPTR
   \   00023A   A3           INC     DPTR
   \   00023B   A3           INC     DPTR
   \   00023C   A3           INC     DPTR
   \   00023D   A3           INC     DPTR
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   E0           MOVX    A,@DPTR
   \   000244   FA           MOV     R2,A
   \   000245   8E82         MOV     DPL,R6
   \   000247   8F83         MOV     DPH,R7
   \   000249   A3           INC     DPTR
   \   00024A   A3           INC     DPTR
   \   00024B   A3           INC     DPTR
   \   00024C   A3           INC     DPTR
   \   00024D   A3           INC     DPTR
   \   00024E   A3           INC     DPTR
   \   00024F   A3           INC     DPTR
   \   000250   A3           INC     DPTR
   \   000251   A3           INC     DPTR
   \   000252   E0           MOVX    A,@DPTR
   \   000253   6A           XRL     A,R2
   \   000254   7046         JNZ     ??ZDO_beaconNotifyIndCB_14
   \   000256   8E82         MOV     DPL,R6
   \   000258   8F83         MOV     DPH,R7
   \   00025A   A3           INC     DPTR
   \   00025B   A3           INC     DPTR
   \   00025C   A3           INC     DPTR
   \   00025D   A3           INC     DPTR
   \   00025E   A3           INC     DPTR
   \   00025F   A3           INC     DPTR
   \   000260   A3           INC     DPTR
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   A3           INC     DPTR
   \   000264   E0           MOVX    A,@DPTR
   \   000265   FA           MOV     R2,A
   \   000266   E5..         MOV     A,?V0
   \   000268   240B         ADD     A,#0xb
   \   00026A   F582         MOV     DPL,A
   \   00026C   E4           CLR     A
   \   00026D   35..         ADDC    A,?V1
   \   00026F   F583         MOV     DPH,A
   \   000271   E0           MOVX    A,@DPTR
   \   000272   C3           CLR     C
   \   000273   9A           SUBB    A,R2
   \   000274   5026         JNC     ??ZDO_beaconNotifyIndCB_14
   2462                  {
   2463                    selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   000276   7801         MOV     R0,#0x1
   \   000278   8022         SJMP    ??ZDO_beaconNotifyIndCB_14
   2464                  }
   2465                }
   2466                else
   2467                {
   2468                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   00027A   8E82         MOV     DPL,R6
   \   00027C   8F83         MOV     DPH,R7
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   A3           INC     DPTR
   \   000281   A3           INC     DPTR
   \   000282   A3           INC     DPTR
   \   000283   A3           INC     DPTR
   \   000284   A3           INC     DPTR
   \   000285   A3           INC     DPTR
   \   000286   A3           INC     DPTR
   \   000287   A3           INC     DPTR
   \   000288   E0           MOVX    A,@DPTR
   \   000289   FA           MOV     R2,A
   \   00028A   E5..         MOV     A,?V0
   \   00028C   240B         ADD     A,#0xb
   \   00028E   F582         MOV     DPL,A
   \   000290   E4           CLR     A
   \   000291   35..         ADDC    A,?V1
   \   000293   F583         MOV     DPH,A
   \   000295   E0           MOVX    A,@DPTR
   \   000296   C3           CLR     C
   \   000297   9A           SUBB    A,R2
   \   000298   5002         JNC     ??ZDO_beaconNotifyIndCB_14
   2469                  {
   2470                    selected = TRUE;
   \   00029A   7801         MOV     R0,#0x1
   2471                  }
   2472                }
   2473          
   2474                if ( ZSTACK_ROUTER_BUILD )
   2475                {
   2476                  capacity = pBeacon->routerCapacity;
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   00029C   85..82       MOV     DPL,?V0
   \   00029F   85..83       MOV     DPH,?V1
   \   0002A2   A3           INC     DPTR
   \   0002A3   A3           INC     DPTR
   \   0002A4   A3           INC     DPTR
   \   0002A5   A3           INC     DPTR
   \   0002A6   A3           INC     DPTR
   \   0002A7   A3           INC     DPTR
   \   0002A8   E0           MOVX    A,@DPTR
   \   0002A9   F9           MOV     R1,A
   2477                }
   2478                else if ( ZSTACK_END_DEVICE_BUILD )
   2479                {
   2480                  capacity = pBeacon->deviceCapacity;
   2481                }
   2482          
   2483                if ( (capacity) && (selected) )
   \   0002AA   E9           MOV     A,R1
   \   0002AB   6060         JZ      ??ZDO_beaconNotifyIndCB_15
   \   0002AD   E8           MOV     A,R0
   \   0002AE   605D         JZ      ??ZDO_beaconNotifyIndCB_15
   2484                {
   2485                  // this is the new chosen router for joining...
   2486                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0002B0   85..82       MOV     DPL,?V0
   \   0002B3   85..83       MOV     DPH,?V1
   \   0002B6   E0           MOVX    A,@DPTR
   \   0002B7   FA           MOV     R2,A
   \   0002B8   A3           INC     DPTR
   \   0002B9   E0           MOVX    A,@DPTR
   \   0002BA   FB           MOV     R3,A
   \   0002BB   8E82         MOV     DPL,R6
   \   0002BD   8F83         MOV     DPH,R7
   \   0002BF   A3           INC     DPTR
   \   0002C0   A3           INC     DPTR
   \   0002C1   A3           INC     DPTR
   \   0002C2   A3           INC     DPTR
   \   0002C3   A3           INC     DPTR
   \   0002C4   A3           INC     DPTR
   \   0002C5   A3           INC     DPTR
   \   0002C6   EA           MOV     A,R2
   \   0002C7   F0           MOVX    @DPTR,A
   \   0002C8   A3           INC     DPTR
   \   0002C9   EB           MOV     A,R3
   \   0002CA   F0           MOVX    @DPTR,A
   2487                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \   0002CB   85..82       MOV     DPL,?V0
   \   0002CE   85..83       MOV     DPH,?V1
   \   0002D1   A3           INC     DPTR
   \   0002D2   A3           INC     DPTR
   \   0002D3   A3           INC     DPTR
   \   0002D4   A3           INC     DPTR
   \   0002D5   A3           INC     DPTR
   \   0002D6   A3           INC     DPTR
   \   0002D7   A3           INC     DPTR
   \   0002D8   A3           INC     DPTR
   \   0002D9   A3           INC     DPTR
   \   0002DA   A3           INC     DPTR
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   C0E0         PUSH    A
   \   0002DE   8E82         MOV     DPL,R6
   \   0002E0   8F83         MOV     DPH,R7
   \   0002E2   A3           INC     DPTR
   \   0002E3   A3           INC     DPTR
   \   0002E4   A3           INC     DPTR
   \   0002E5   A3           INC     DPTR
   \   0002E6   A3           INC     DPTR
   \   0002E7   A3           INC     DPTR
   \   0002E8   A3           INC     DPTR
   \   0002E9   A3           INC     DPTR
   \   0002EA   A3           INC     DPTR
   \   0002EB   D0E0         POP     A
   \   0002ED   F0           MOVX    @DPTR,A
   2488                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   0002EE   E5..         MOV     A,?V0
   \   0002F0   240B         ADD     A,#0xb
   \   0002F2   F582         MOV     DPL,A
   \   0002F4   E4           CLR     A
   \   0002F5   35..         ADDC    A,?V1
   \   0002F7   F583         MOV     DPH,A
   \   0002F9   E0           MOVX    A,@DPTR
   \   0002FA   C0E0         PUSH    A
   \   0002FC   8E82         MOV     DPL,R6
   \   0002FE   8F83         MOV     DPH,R7
   \   000300   A3           INC     DPTR
   \   000301   A3           INC     DPTR
   \   000302   A3           INC     DPTR
   \   000303   A3           INC     DPTR
   \   000304   A3           INC     DPTR
   \   000305   A3           INC     DPTR
   \   000306   A3           INC     DPTR
   \   000307   A3           INC     DPTR
   \   000308   A3           INC     DPTR
   \   000309   A3           INC     DPTR
   \   00030A   D0E0         POP     A
   \   00030C   F0           MOVX    @DPTR,A
   2489                }
   2490          
   2491                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   00030D   85..82       MOV     DPL,?V0
   \   000310   85..83       MOV     DPH,?V1
   \   000313   A3           INC     DPTR
   \   000314   A3           INC     DPTR
   \   000315   A3           INC     DPTR
   \   000316   A3           INC     DPTR
   \   000317   A3           INC     DPTR
   \   000318   A3           INC     DPTR
   \   000319   A3           INC     DPTR
   \   00031A   E0           MOVX    A,@DPTR
   \   00031B   600B         JZ      ??ZDO_beaconNotifyIndCB_16
   2492                  pNwkDesc->deviceCapacity = 1;
   \   00031D   8E82         MOV     DPL,R6
   \   00031F   8F83         MOV     DPH,R7
   \   000321   A3           INC     DPTR
   \   000322   A3           INC     DPTR
   \   000323   A3           INC     DPTR
   \   000324   A3           INC     DPTR
   \   000325   7401         MOV     A,#0x1
   \   000327   F0           MOVX    @DPTR,A
   2493          
   2494                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   000328   85..82       MOV     DPL,?V0
   \   00032B   85..83       MOV     DPH,?V1
   \   00032E   A3           INC     DPTR
   \   00032F   A3           INC     DPTR
   \   000330   A3           INC     DPTR
   \   000331   A3           INC     DPTR
   \   000332   A3           INC     DPTR
   \   000333   A3           INC     DPTR
   \   000334   E0           MOVX    A,@DPTR
   \   000335   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2495                  pNwkDesc->routerCapacity = 1;
   \   000337   8E82         MOV     DPL,R6
   \   000339   8F83         MOV     DPH,R7
   \   00033B   A3           INC     DPTR
   \   00033C   A3           INC     DPTR
   \   00033D   A3           INC     DPTR
   \   00033E   7401         MOV     A,#0x1
   \   000340   F0           MOVX    @DPTR,A
   2496              }
   2497            }
   2498          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000341   7F08         MOV     R7,#0x8
   \   000343   02....       LJMP    ?BANKED_LEAVE_XDATA
   2499          
   2500          /*********************************************************************
   2501           * @fn          ZDO_StartRouterConfirmCB
   2502           *
   2503           * @brief       This function reports the results of the request to
   2504           *              start functioning as a router in a network.
   2505           *
   2506           * @param       Status - Result of NLME_StartRouterRequest()
   2507           *
   2508           * @return      none
   2509           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2510          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2511          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2512            nwkStatus = (byte)Status;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#nwkStatus
   \   00000B   F0           MOVX    @DPTR,A
   2513          
   2514            if ( Status == ZSUCCESS )
   \   00000C   EE           MOV     A,R6
   \   00000D   701E         JNZ     ??ZDO_StartRouterConfirmCB_0
   2515            {
   2516              // LED on shows Router started
   2517              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000F                ; Setup parameters for call to function HalLedSet
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   7904         MOV     R1,#0x4
   \   000013   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000016   E9           MOV     A,R1
   2518              // LED off forgets HOLD_AUTO_START
   2519              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000017                ; Setup parameters for call to function HalLedSet
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7908         MOV     R1,#0x8
   \   00001B   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00001E   E9           MOV     A,R1
   2520              if ( devState == DEV_HOLD )
   \   00001F   90....       MOV     DPTR,#devState
   \   000022   E0           MOVX    A,@DPTR
   \   000023   7010         JNZ     ??ZDO_StartRouterConfirmCB_1
   2521              {
   2522                // Began with HOLD_AUTO_START
   2523                devState = DEV_END_DEVICE;
   \   000025   90....       MOV     DPTR,#devState
   \   000028   7406         MOV     A,#0x6
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   8008         SJMP    ??ZDO_StartRouterConfirmCB_1
   2524              }
   2525            }
   2526          #if defined(BLINK_LEDS)
   2527            else
   2528            {
   2529              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   00002D                ; Setup parameters for call to function HalLedSet
   \   00002D   7A04         MOV     R2,#0x4
   \   00002F   7904         MOV     R1,#0x4
   \   000031   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000034   E9           MOV     A,R1
   2530            }
   2531          #endif
   2532          
   2533            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   000035                ; Setup parameters for call to function osal_set_event
   \   000035   7A20         MOV     R2,#0x20
   \   000037   7B00         MOV     R3,#0x0
   \   000039   90....       MOV     DPTR,#ZDAppTaskID
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000041   E9           MOV     A,R1
   2534          }
   \   000042   7F01         MOV     R7,#0x1
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   2535          
   2536          /*********************************************************************
   2537           * @fn          ZDO_JoinConfirmCB
   2538           *
   2539           * @brief       This function allows the next higher layer to be notified
   2540           *              of the results of its request to join itself or another
   2541           *              device to a network.
   2542           *
   2543           * @param       Status - Result of NLME_JoinRequest()
   2544           *
   2545           * @return      none
   2546           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2547          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2548          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   89..         MOV     ?V2,R1
   2549            (void)PanId;  // remove if this parameter is used.
   2550          
   2551            nwkStatus = (byte)Status;
   \   000010   E5..         MOV     A,?V2
   \   000012   90....       MOV     DPTR,#nwkStatus
   \   000015   F0           MOVX    @DPTR,A
   2552          
   2553            if ( Status == ZSUCCESS )
   \   000016   E5..         MOV     A,?V2
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??ZDO_JoinConfirmCB_0 & 0xFFFF
   2554            {
   2555              if ( ZSTACK_END_DEVICE_BUILD
   2556                || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   00001D   90....       MOV     DPTR,#_NIB + 14
   \   000020   E0           MOVX    A,@DPTR
   \   000021   A2E1         MOV     C,0xE0 /* A   */.1
   \   000023   5003         JNC     $+5
   \   000025   02....       LJMP    ??ZDO_JoinConfirmCB_1 & 0xFFFF
   2557              {
   2558                neighborEntry_t *pItem;
   2559           
   2560                // We don't need the neighbor table entries.  
   2561                // Clear the neighbor Table to remove beacon information
   2562                nwkNeighborInitTable();
   \   000028                ; Setup parameters for call to function nwkNeighborInitTable
   \   000028   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2563           
   2564                // Force a neighbor table entry for the parent
   2565                pItem = nwkNeighborFindEmptySlot();
   \   00002B                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   00002B   12....       LCALL   `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   00002E   8A..         MOV     ?V4,R2
   \   000030   8B..         MOV     ?V5,R3
   \   000032   AE..         MOV     R6,?V4
   \   000034   AF..         MOV     R7,?V5
   2566                if ( pItem != NULL )
   \   000036   EE           MOV     A,R6
   \   000037   4F           ORL     A,R7
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??ZDO_JoinConfirmCB_1 & 0xFFFF
   2567                {
   2568                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   00003D                ; Setup parameters for call to function osal_memset
   \   00003D   7C17         MOV     R4,#0x17
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7900         MOV     R1,#0x0
   \   000043   EE           MOV     A,R6
   \   000044   FA           MOV     R2,A
   \   000045   EF           MOV     A,R7
   \   000046   FB           MOV     R3,A
   \   000047   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2569                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   00004A   90....       MOV     DPTR,#_NIB + 23
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   E8           MOV     A,R0
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   E9           MOV     A,R1
   \   00005A   F0           MOVX    @DPTR,A
   2570                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \   00005B                ; Setup parameters for call to function sAddrExtCpy
   \   00005B   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   00005D   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   00005F   EE           MOV     A,R6
   \   000060   2402         ADD     A,#0x2
   \   000062   FA           MOV     R2,A
   \   000063   E4           CLR     A
   \   000064   3F           ADDC    A,R7
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2571                  pItem->panId = _NIB. nwkPanId;
   \   000069   90....       MOV     DPTR,#_NIB + 33
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F8           MOV     R0,A
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F9           MOV     R1,A
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E8           MOV     A,R0
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   E9           MOV     A,R1
   \   000083   F0           MOVX    @DPTR,A
   2572                  pItem->linkInfo.rxLqi = DEF_LQI;
   \   000084   EE           MOV     A,R6
   \   000085   240F         ADD     A,#0xf
   \   000087   F582         MOV     DPL,A
   \   000089   E4           CLR     A
   \   00008A   3F           ADDC    A,R7
   \   00008B   F583         MOV     DPH,A
   \   00008D   74AA         MOV     A,#-0x56
   \   00008F   F0           MOVX    @DPTR,A
   2573                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   000090   90....       MOV     DPTR,#gLINK_DOWN_TRIGGER
   \   000093   E4           CLR     A
   \   000094   93           MOVC    A,@A+DPTR
   \   000095   F8           MOV     R0,A
   \   000096   7900         MOV     R1,#0x0
   \   000098   E8           MOV     A,R0
   \   000099   2401         ADD     A,#0x1
   \   00009B   F8           MOV     R0,A
   \   00009C   5001         JNC     ??ZDO_JoinConfirmCB_2
   \   00009E   09           INC     R1
   \                     ??ZDO_JoinConfirmCB_2:
   \   00009F   7A02         MOV     R2,#0x2
   \   0000A1   7B00         MOV     R3,#0x0
   \   0000A3   12....       LCALL   ?S_DIV_MOD
   \   0000A6   E8           MOV     A,R0
   \   0000A7   C0E0         PUSH    A
   \   0000A9   EE           MOV     A,R6
   \   0000AA   240D         ADD     A,#0xd
   \   0000AC   F582         MOV     DPL,A
   \   0000AE   E4           CLR     A
   \   0000AF   3F           ADDC    A,R7
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   D0E0         POP     A
   \   0000B4   F0           MOVX    @DPTR,A
   2574                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   0000B5   EE           MOV     A,R6
   \   0000B6   240E         ADD     A,#0xe
   \   0000B8   F582         MOV     DPL,A
   \   0000BA   E4           CLR     A
   \   0000BB   3F           ADDC    A,R7
   \   0000BC   F583         MOV     DPH,A
   \   0000BE   7401         MOV     A,#0x1
   \   0000C0   F0           MOVX    @DPTR,A
   2575                }
   2576              }
   2577              
   2578              // LED on shows device joined
   2579              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \                     ??ZDO_JoinConfirmCB_1:
   \   0000C1                ; Setup parameters for call to function HalLedSet
   \   0000C1   7A01         MOV     R2,#0x1
   \   0000C3   7904         MOV     R1,#0x4
   \   0000C5   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000C8   E9           MOV     A,R1
   2580              // LED off forgets HOLD_AUTO_START
   2581              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   0000C9                ; Setup parameters for call to function HalLedSet
   \   0000C9   7A00         MOV     R2,#0x0
   \   0000CB   7908         MOV     R1,#0x8
   \   0000CD   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000D0   E9           MOV     A,R1
   2582              if ( (devState == DEV_HOLD) )
   \   0000D1   90....       MOV     DPTR,#devState
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   7010         JNZ     ??ZDO_JoinConfirmCB_3
   2583              {
   2584                // Began with HOLD_AUTO_START
   2585                devState = DEV_NWK_JOINING;
   \   0000D7   90....       MOV     DPTR,#devState
   \   0000DA   7403         MOV     A,#0x3
   \   0000DC   F0           MOVX    @DPTR,A
   2586              }
   2587          
   2588              if ( !ZG_SECURE_ENABLED )
   \   0000DD   8008         SJMP    ??ZDO_JoinConfirmCB_3
   2589              {
   2590                // Notify to save info into NV
   2591                ZDApp_NVUpdate();
   2592              }
   2593            }
   2594            else
   2595            {
   2596          #if defined(BLINK_LEDS)
   2597              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   0000DF                ; Setup parameters for call to function HalLedSet
   \   0000DF   7A04         MOV     R2,#0x4
   \   0000E1   7904         MOV     R1,#0x4
   \   0000E3   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000E6   E9           MOV     A,R1
   2598          #endif
   2599            }
   2600          
   2601            // Pass the join confirm to higher layer if callback registered
   2602            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_3:
   \   0000E7   90....       MOV     DPTR,#zdoCBFunc + 8
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F8           MOV     R0,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   E8           MOV     A,R0
   \   0000F0   49           ORL     A,R1
   \   0000F1   6043         JZ      ??ZDO_JoinConfirmCB_4
   2603            {
   2604              zdoJoinCnf_t joinCnf;
   2605          
   2606              joinCnf.status = Status;
   \   0000F3   E5..         MOV     A,?V2
   \   0000F5   C0E0         PUSH    A
   \   0000F7   85..82       MOV     DPL,?XSP + 0
   \   0000FA   85..83       MOV     DPH,?XSP + 1
   \   0000FD   D0E0         POP     A
   \   0000FF   F0           MOVX    @DPTR,A
   2607              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   000100   90....       MOV     DPTR,#_NIB + 20
   \   000103   E0           MOVX    A,@DPTR
   \   000104   F8           MOV     R0,A
   \   000105   A3           INC     DPTR
   \   000106   E0           MOVX    A,@DPTR
   \   000107   F9           MOV     R1,A
   \   000108   7401         MOV     A,#0x1
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   E8           MOV     A,R0
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   A3           INC     DPTR
   \   000110   E9           MOV     A,R1
   \   000111   F0           MOVX    @DPTR,A
   2608              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \   000112   90....       MOV     DPTR,#_NIB + 23
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F8           MOV     R0,A
   \   000117   A3           INC     DPTR
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F9           MOV     R1,A
   \   00011A   7403         MOV     A,#0x3
   \   00011C   12....       LCALL   ?XSTACK_DISP0_8
   \   00011F   E8           MOV     A,R0
   \   000120   F0           MOVX    @DPTR,A
   \   000121   A3           INC     DPTR
   \   000122   E9           MOV     A,R1
   \   000123   F0           MOVX    @DPTR,A
   2609          
   2610              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \   000124                ; Setup parameters for indirect call
   \   000124   AA..         MOV     R2,?XSP + 0
   \   000126   AB..         MOV     R3,?XSP + 1
   \   000128   90....       MOV     DPTR,#zdoCBFunc + 8
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   F8           MOV     R0,A
   \   00012D   A3           INC     DPTR
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   F583         MOV     DPH,A
   \   000131   8882         MOV     DPL,R0
   \   000133   12....       LCALL   ?CALL_IND
   2611            }
   2612          
   2613            // Notify ZDApp
   2614            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_4:
   \   000136                ; Setup parameters for call to function ZDApp_SendMsg
   \   000136   7C00         MOV     R4,#0x0
   \   000138   7D00         MOV     R5,#0x0
   \   00013A   7B02         MOV     R3,#0x2
   \   00013C   7A02         MOV     R2,#0x2
   \   00013E   90....       MOV     DPTR,#ZDAppTaskID
   \   000141   E0           MOVX    A,@DPTR
   \   000142   F9           MOV     R1,A
   \   000143   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2615          
   2616          }
   \   000146   7405         MOV     A,#0x5
   \   000148   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014B   7F06         MOV     R7,#0x6
   \   00014D   02....       LJMP    ?BANKED_LEAVE_XDATA
   2617          
   2618          /*********************************************************************
   2619           * @fn          ZDO_PermitJoinCB
   2620           *
   2621           * @brief      This function is called when there is a change in the
   2622           *             device's permit join status.
   2623           *
   2624           * @param       duration - the new duration
   2625           *
   2626           * @return      none
   2627           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2628          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2629          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   C0E0         PUSH    A
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   2630            // Pass the Permit Join status to higher layer if callback registered
   2631            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000015   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   49           ORL     A,R1
   \   00001F   6012         JZ      ??ZDO_PermitJoinCB_0
   2632            {
   2633              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000021                ; Setup parameters for indirect call
   \   000021   AA..         MOV     R2,?XSP + 0
   \   000023   AB..         MOV     R3,?XSP + 1
   \   000025   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   8882         MOV     DPL,R0
   \   000030   12....       LCALL   ?CALL_IND
   2634            }
   2635          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000033   7401         MOV     A,#0x1
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   D083         POP     DPH
   \   00003A   D082         POP     DPL
   \   00003C   02....       LJMP    ?BRET
   2636          
   2637          /*********************************************************************
   2638           * @fn          ZDO_AddrChangeIndicationCB
   2639           *
   2640           * @brief       This function notifies the application that this
   2641           *              device's address has changed.  Could happen in
   2642           *              a network with stochastic addressing (PRO).
   2643           *
   2644           * @param       newAddr - the new address
   2645           *
   2646           * @return      none
   2647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2648          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2649          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   2650            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2651            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F5..         MOV     ?V0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V1,A
   2652          
   2653            // Notify to save info into NV
   2654            ZDApp_NVUpdate();
   \   000013                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000013   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2655          
   2656            // Notify the applications
   2657            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000016                ; Setup parameters for call to function osal_set_event
   \   000016   7A10         MOV     R2,#0x10
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   90....       MOV     DPTR,#ZDAppTaskID
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000022   E9           MOV     A,R1
   2658          
   2659            while (pItem != NULL)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000023   E5..         MOV     A,?V0
   \   000025   45..         ORL     A,?V1
   \   000027   606C         JZ      ??ZDO_AddrChangeIndicationCB_1
   2660            {
   2661              if (pItem->epDesc->endPoint != ZDO_EP)
   \   000029   85..82       MOV     DPL,?V0
   \   00002C   85..83       MOV     DPH,?V1
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F583         MOV     DPH,A
   \   000037   8882         MOV     DPL,R0
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   604A         JZ      ??ZDO_AddrChangeIndicationCB_2
   2662              {
   2663                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   00003C                ; Setup parameters for call to function osal_msg_allocate
   \   00003C   7A04         MOV     R2,#0x4
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000043   8A..         MOV     ?V4,R2
   \   000045   8B..         MOV     ?V5,R3
   \   000047   AE..         MOV     R6,?V4
   \   000049   AF..         MOV     R7,?V5
   2664                if (pZDOAddrChangeMsg != NULL)
   \   00004B   EE           MOV     A,R6
   \   00004C   4F           ORL     A,R7
   \   00004D   6037         JZ      ??ZDO_AddrChangeIndicationCB_2
   2665                {
   2666                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   74D6         MOV     A,#-0x2a
   \   000055   F0           MOVX    @DPTR,A
   2667                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V2
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E5..         MOV     A,?V3
   \   000062   F0           MOVX    @DPTR,A
   2668                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   \   000063                ; Setup parameters for call to function osal_msg_send
   \   000063   EE           MOV     A,R6
   \   000064   FA           MOV     R2,A
   \   000065   EF           MOV     A,R7
   \   000066   FB           MOV     R3,A
   \   000067   85..82       MOV     DPL,?V0
   \   00006A   85..83       MOV     DPH,?V1
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F8           MOV     R0,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F583         MOV     DPH,A
   \   000075   8882         MOV     DPL,R0
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F8           MOV     R0,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F583         MOV     DPH,A
   \   00007E   8882         MOV     DPL,R0
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000085   E9           MOV     A,R1
   2669                }
   2670              }
   2671              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_2:
   \   000086   85..82       MOV     DPL,?V0
   \   000089   85..83       MOV     DPH,?V1
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F5..         MOV     ?V0,A
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F5..         MOV     ?V1,A
   \   000093   808E         SJMP    ??ZDO_AddrChangeIndicationCB_0
   2672            }
   2673          
   2674            // Send out a device announce
   2675            ZDApp_AnnounceNewAddress();
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000095                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000095   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2676          }
   \   000098   7F06         MOV     R7,#0x6
   \   00009A   02....       LJMP    ?BANKED_LEAVE_XDATA
   2677          
   2678          /*********************************************************************
   2679           * @fn          ZDO_JoinIndicationCB
   2680           *
   2681           * @brief       This function allows the next higher layer of a
   2682           *              coordinator to be notified of a remote join request.
   2683           *
   2684           * @param       ShortAddress - 16-bit address
   2685           * @param       ExtendedAddress - IEEE (64-bit) address
   2686           * @param       CapabilityFlags - Association Capability Flags
   2687           * @param       type - of joining -
   2688           *                          NWK_ASSOC_JOIN
   2689           *                          NWK_ASSOC_REJOIN_UNSECURE
   2690           *                          NWK_ASSOC_REJOIN_SECURE
   2691           *
   2692           * @return      ZStatus_t
   2693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2694          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2695                                          uint8 CapabilityFlags, uint8 type)
   2696          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V8,R2
   \   000007   8B..         MOV     ?V9,R3
   \   000009   8C..         MOV     ?V14,R4
   \   00000B   8D..         MOV     ?V15,R5
   \   00000D   89..         MOV     ?V12,R1
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V2,A
   2697          
   2698          #if NODE_AUTH   //chaokw
   2699            ZStatus_t status = ZSuccess;  //chaokw
   \   000017   75..00       MOV     ?V3,#0x0
   2700          #endif  
   2701          
   2702          #ifndef ZDO_COORDINATOR
   2703          	bool permit = FALSE;
   2704          	ZDO_Permit_Join_Device_t *tmp_join_device = NULL;
   2705          #endif
   2706          
   2707            (void)ExtendedAddress;
   2708          #if ZDO_NV_SAVE_RFDs
   2709            (void)CapabilityFlags;
   2710          
   2711          #else  // if !ZDO_NV_SAVE_RFDs
   2712            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2713          #endif
   2714            {
   2715              ZDApp_NVUpdate();  // Notify to save info into NV.
   \   00001A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00001A   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2716            }
   2717          
   2718          #if NODE_AUTH   //chaokw
   2719            if ( status == ZSuccess )
   \   00001D   E5..         MOV     A,?V3
   \   00001F   7022         JNZ     ??ZDO_JoinIndicationCB_0
   2720            {
   2721              if (!Authlist_verify_device(ShortAddress, ExtendedAddress, 0, 0))
   \   000021                ; Setup parameters for call to function Authlist_verify_device
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7900         MOV     R1,#0x0
   \   00002B   AC..         MOV     R4,?V14
   \   00002D   AD..         MOV     R5,?V15
   \   00002F   AA..         MOV     R2,?V8
   \   000031   AB..         MOV     R3,?V9
   \   000033   12....       LCALL   `??Authlist_verify_device::?relay`; Banked call to: Authlist_verify_device
   \   000036   7401         MOV     A,#0x1
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003B   E9           MOV     A,R1
   \   00003C   7005         JNZ     ??ZDO_JoinIndicationCB_0
   2722                return ZFailure;
   \   00003E   7901         MOV     R1,#0x1
   \   000040   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2723            }
   2724          #endif
   2725          
   2726          
   2727          #if  1   //chaokw panid
   2728          	//Router need Coordinator for premit join
   2729          	#ifndef ZDO_COORDINATOR
   2730          		osal_memcpy(join_device_extaddr, ExtendedAddress, SADDR_EXT_LEN);
   2731          		tmp_join_device = zdo_join_device;
   2732          #if 0  //chaokw ping		
   2733                        // timeout to free the heap of join device
   2734          		osal_start_timerEx( GenericApp_TaskID,
   2735          							GENERICAPP_CLEAR_JOIN_DEVICES_EVT,
   2736          							GENERICAPP_CLEAR_JOIN_DEVICE_TIMEOUT);
   2737          #endif
   2738          		while (tmp_join_device)
   2739          		{
   2740          			if (sAddrExtCmp(tmp_join_device->permit_device.extaddr, join_device_extaddr))
   2741          			{
   2742          				permit = TRUE;
   2743          				break;
   2744          			}
   2745          			tmp_join_device = tmp_join_device->next;
   2746          		}
   2747          		if (permit == FALSE)
   2748          		{
   2749          			transfer_join_times = 0;
   2750          			osal_start_timerEx( GenericApp_TaskID, GENERICAPP_PERMIT_JOIN_MSG_EVT, 100);
   2751          			return ZFailure;
   2752          		}
   2753          
   2754          	#endif
   2755          #endif
   2756          
   2757          
   2758          
   2759            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2760            {
   2761              if ( type == NWK_ASSOC_JOIN ||
   2762                   type == NWK_ASSOC_REJOIN_UNSECURE ||
   2763                   type == NWK_ASSOC_REJOIN_SECURE )
   \                     ??ZDO_JoinIndicationCB_0:
   \   000043   E5..         MOV     A,?V2
   \   000045   600F         JZ      ??ZDO_JoinIndicationCB_2
   \   000047   7401         MOV     A,#0x1
   \   000049   65..         XRL     A,?V2
   \   00004B   6009         JZ      ??ZDO_JoinIndicationCB_2
   \   00004D   7402         MOV     A,#0x2
   \   00004F   65..         XRL     A,?V2
   \   000051   6003         JZ      $+5
   \   000053   02....       LJMP    ??ZDO_JoinIndicationCB_3 & 0xFFFF
   2764              {
   2765                uint16 timeToFire;
   2766                ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2767          
   2768                pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_2:
   \   000056                ; Setup parameters for call to function osal_mem_alloc
   \   000056   7A06         MOV     R2,#0x6
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005D   8A..         MOV     ?V4,R2
   \   00005F   8B..         MOV     ?V5,R3
   \   000061   AE..         MOV     R6,?V4
   \   000063   AF..         MOV     R7,?V5
   2769          
   2770                if ( pNewDevice == NULL )
   \   000065   EE           MOV     A,R6
   \   000066   4F           ORL     A,R7
   \   000067   7005         JNZ     ??ZDO_JoinIndicationCB_4
   2771                {
   2772                  // Memory alloc failed
   2773                  return ZMemError;
   \   000069   7910         MOV     R1,#0x10
   \   00006B   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2774                }
   2775          
   2776                // Add the new device to the New Device List
   2777                if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_4:
   \   00006E   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F8           MOV     R0,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   E8           MOV     A,R0
   \   000077   49           ORL     A,R1
   \   000078   700A         JNZ     ??ZDO_JoinIndicationCB_5
   2778                {
   2779                  // The list is empty, add the first element
   2780                  ZDApp_NewDeviceList = pNewDevice;
   \   00007A   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00007D   EE           MOV     A,R6
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   EF           MOV     A,R7
   \   000081   F0           MOVX    @DPTR,A
   \   000082   8035         SJMP    ??ZDO_JoinIndicationCB_6
   2781                }
   2782                else
   2783                {
   2784                  pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_5:
   \   000084   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F8           MOV     R0,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   88..         MOV     ?V0,R0
   \   00008E   89..         MOV     ?V1,R1
   2785          
   2786                  // Walk the list to last element
   2787                  while ( pDeviceList->next )
   \                     ??ZDO_JoinIndicationCB_7:
   \   000090   85..82       MOV     DPL,?V0
   \   000093   85..83       MOV     DPH,?V1
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F8           MOV     R0,A
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F9           MOV     R1,A
   \   00009B   E8           MOV     A,R0
   \   00009C   49           ORL     A,R1
   \   00009D   600F         JZ      ??ZDO_JoinIndicationCB_8
   2788                  {
   2789                    pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \   00009F   85..82       MOV     DPL,?V0
   \   0000A2   85..83       MOV     DPH,?V1
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F5..         MOV     ?V0,A
   \   0000A8   A3           INC     DPTR
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F5..         MOV     ?V1,A
   \   0000AC   80E2         SJMP    ??ZDO_JoinIndicationCB_7
   2790                  }
   2791          
   2792                  // Add new device at the end
   2793                  pDeviceList->next = pNewDevice;
   \                     ??ZDO_JoinIndicationCB_8:
   \   0000AE   85..82       MOV     DPL,?V0
   \   0000B1   85..83       MOV     DPH,?V1
   \   0000B4   EE           MOV     A,R6
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   EF           MOV     A,R7
   \   0000B8   F0           MOVX    @DPTR,A
   2794                }
   2795          
   2796                // get the remaining time of the timer
   2797                timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \                     ??ZDO_JoinIndicationCB_6:
   \   0000B9                ; Setup parameters for call to function osal_get_timeoutEx
   \   0000B9   7A40         MOV     R2,#0x40
   \   0000BB   7B00         MOV     R3,#0x0
   \   0000BD   90....       MOV     DPTR,#ZDAppTaskID
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   0000C5   8A..         MOV     ?V4,R2
   \   0000C7   8B..         MOV     ?V5,R3
   \   0000C9   8C..         MOV     ?V6,R4
   \   0000CB   8D..         MOV     ?V7,R5
   \   0000CD   85....       MOV     ?V10,?V4
   \   0000D0   85....       MOV     ?V11,?V5
   2798          
   2799                pNewDevice->next = NULL;
   \   0000D3   8E82         MOV     DPL,R6
   \   0000D5   8F83         MOV     DPH,R7
   \   0000D7   7400         MOV     A,#0x0
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   7400         MOV     A,#0x0
   \   0000DD   F0           MOVX    @DPTR,A
   2800                pNewDevice->shortAddr = ShortAddress;
   \   0000DE   8E82         MOV     DPL,R6
   \   0000E0   8F83         MOV     DPH,R7
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   E5..         MOV     A,?V8
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   E5..         MOV     A,?V9
   \   0000EA   F0           MOVX    @DPTR,A
   2801                pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   0000EB   7458         MOV     A,#0x58
   \   0000ED   C3           CLR     C
   \   0000EE   95..         SUBB    A,?V10
   \   0000F0   F8           MOV     R0,A
   \   0000F1   7402         MOV     A,#0x2
   \   0000F3   95..         SUBB    A,?V11
   \   0000F5   F9           MOV     R1,A
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   E8           MOV     A,R0
   \   0000FF   F0           MOVX    @DPTR,A
   \   000100   A3           INC     DPTR
   \   000101   E9           MOV     A,R1
   \   000102   F0           MOVX    @DPTR,A
   2802          
   2803                // Start the timer only if there is no pending timer
   2804                if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   6458         XRL     A,#0x58
   \   00010E   7004         JNZ     ??ZDO_JoinIndicationCB_9
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   6402         XRL     A,#0x2
   \                     ??ZDO_JoinIndicationCB_9:
   \   000114   7018         JNZ     ??ZDO_JoinIndicationCB_3
   2805                {
   2806                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   000116                ; Setup parameters for call to function osal_start_timerEx
   \   000116   90....       MOV     DPTR,#__Constant_258
   \   000119   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00011C   7A40         MOV     R2,#0x40
   \   00011E   7B00         MOV     R3,#0x0
   \   000120   90....       MOV     DPTR,#ZDAppTaskID
   \   000123   E0           MOVX    A,@DPTR
   \   000124   F9           MOV     R1,A
   \   000125   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000128   7404         MOV     A,#0x4
   \   00012A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012D   E9           MOV     A,R1
   2807                }
   2808              }
   2809            }
   2810          
   2811            return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_3:
   \   00012E   7900         MOV     R1,#0x0
   \                     ??ZDO_JoinIndicationCB_1:
   \   000130   7F10         MOV     R7,#0x10
   \   000132   02....       LJMP    ?BANKED_LEAVE_XDATA
   2812          }
   2813          
   2814          /*********************************************************************
   2815           * @fn          ZDO_ConcentratorIndicationCB
   2816           *
   2817           * @brief       This function allows the next higher layer of a
   2818           *              device to be notified of existence of the concentrator.
   2819           *
   2820           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2821           * @param       extAddr - pointer to extended Address
   2822           *                        NULL if not available
   2823           * @param       pktCost - PktCost from RREQ
   2824           *
   2825           * @return      void
   2826           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2827          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2828          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
   2829            zdoConcentratorInd_t conInd;
   2830          
   2831            conInd.nwkAddr = nwkAddr;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   E5..         MOV     A,?V0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   E5..         MOV     A,?V1
   \   000020   F0           MOVX    @DPTR,A
   2832            conInd.extAddr = extAddr;
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   EE           MOV     A,R6
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   EF           MOV     A,R7
   \   00002A   F0           MOVX    @DPTR,A
   2833            conInd.pktCost = pktCost;
   \   00002B   E5..         MOV     A,?V2
   \   00002D   C0E0         PUSH    A
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   F0           MOVX    @DPTR,A
   2834          
   2835            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   000037   90....       MOV     DPTR,#zdoCBFunc + 2
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F8           MOV     R0,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   6012         JZ      ??ZDO_ConcentratorIndicationCB_0
   2836            {
   2837              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000043                ; Setup parameters for indirect call
   \   000043   AA..         MOV     R2,?XSP + 0
   \   000045   AB..         MOV     R3,?XSP + 1
   \   000047   90....       MOV     DPTR,#zdoCBFunc + 2
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F583         MOV     DPH,A
   \   000050   8882         MOV     DPL,R0
   \   000052   12....       LCALL   ?CALL_IND
   2838            }
   2839          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   000055   7405         MOV     A,#0x5
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7F03         MOV     R7,#0x3
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2840          
   2841          /*********************************************************************
   2842           * @fn          ZDO_LeaveCnf
   2843           *
   2844           * @brief       This function allows the next higher layer to be
   2845           *              notified of the results of its request for this or
   2846           *              a child device to leave the network.
   2847           *
   2848           * @param       cnf - NLME_LeaveCnf_t
   2849           *
   2850           * @return      none
   2851           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2852          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2853          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2854            // Check for this device
   2855            if ( osal_ExtAddrEqual( cnf->extAddr,
   2856                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AC..         MOV     R4,?V0
   \   000012   AD..         MOV     R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   EE           MOV     A,R6
   \   000015   2402         ADD     A,#0x2
   \   000017   FA           MOV     R2,A
   \   000018   E4           CLR     A
   \   000019   3F           ADDC    A,R7
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001E   E9           MOV     A,R1
   \   00001F   6401         XRL     A,#0x1
   \   000021   7038         JNZ     ??ZDO_LeaveCnf_0
   2857            {
   2858              // Pass the leave confirm to higher layer if callback registered
   2859              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2860                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   000023   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   E8           MOV     A,R0
   \   00002C   49           ORL     A,R1
   \   00002D   601C         JZ      ??ZDO_LeaveCnf_1
   \   00002F                ; Setup parameters for indirect call
   \   00002F   EE           MOV     A,R6
   \   000030   FA           MOV     R2,A
   \   000031   EF           MOV     A,R7
   \   000032   FB           MOV     R3,A
   \   000033   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F583         MOV     DPH,A
   \   00003C   8882         MOV     DPL,R0
   \   00003E   12....       LCALL   ?CALL_IND
   \   000041   8A..         MOV     ?V0,R2
   \   000043   8B..         MOV     ?V1,R3
   \   000045   E5..         MOV     A,?V0
   \   000047   45..         ORL     A,?V1
   \   000049   7033         JNZ     ??ZDO_LeaveCnf_2
   2861              {
   2862                // Prepare to leave with reset
   2863                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   00004B                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00004B   EE           MOV     A,R6
   \   00004C   240B         ADD     A,#0xb
   \   00004E   F582         MOV     DPL,A
   \   000050   E4           CLR     A
   \   000051   3F           ADDC    A,R7
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000059   8023         SJMP    ??ZDO_LeaveCnf_2
   2864              }
   2865            }
   2866            else if ( ZSTACK_ROUTER_BUILD )
   2867            {
   2868              // Remove device address(optionally descendents) from data
   2869              ZDApp_LeaveUpdate( cnf->dstAddr,
   2870                                 cnf->extAddr,
   2871                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_0:
   \   00005B                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   EE           MOV     A,R6
   \   00006C   2402         ADD     A,#0x2
   \   00006E   FC           MOV     R4,A
   \   00006F   E4           CLR     A
   \   000070   3F           ADDC    A,R7
   \   000071   FD           MOV     R5,A
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   E0           MOVX    A,@DPTR
   \   000077   FA           MOV     R2,A
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FB           MOV     R3,A
   \   00007B   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2872            }
   2873          }
   \                     ??ZDO_LeaveCnf_2:
   \   00007E   7F02         MOV     R7,#0x2
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA
   2874          
   2875          /*********************************************************************
   2876           * @fn          ZDO_LeaveInd
   2877           *
   2878           * @brief       This function allows the next higher layer of a
   2879           *              device to be notified of a remote leave request or
   2880           *              indication.
   2881           *
   2882           * @param       ind - NLME_LeaveInd_t
   2883           *
   2884           * @return      none
   2885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2886          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2887          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2888            uint8 leave;
   2889          
   2890          
   2891            // Parent is requesting the leave - NWK layer filters out illegal
   2892            // requests
   2893            if ( ind->request == TRUE )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   704D         JNZ     ??ZDO_LeaveInd_0
   2894            {
   2895              // Only respond if we are not rejoining the network
   2896              if ( ind->rejoin == FALSE )
   \   000021   EE           MOV     A,R6
   \   000022   240C         ADD     A,#0xc
   \   000024   F582         MOV     DPL,A
   \   000026   E4           CLR     A
   \   000027   3F           ADDC    A,R7
   \   000028   F583         MOV     DPH,A
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7031         JNZ     ??ZDO_LeaveInd_1
   2897              {
   2898                // Notify network of leave
   2899                NLME_LeaveRsp_t rsp;
   2900                rsp.rejoin = ind->rejoin;
   \   00002D   EE           MOV     A,R6
   \   00002E   240C         ADD     A,#0xc
   \   000030   F582         MOV     DPL,A
   \   000032   E4           CLR     A
   \   000033   3F           ADDC    A,R7
   \   000034   F583         MOV     DPH,A
   \   000036   E0           MOVX    A,@DPTR
   \   000037   C0E0         PUSH    A
   \   000039   7401         MOV     A,#0x1
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   D0E0         POP     A
   \   000040   F0           MOVX    @DPTR,A
   2901          
   2902                if ( ZSTACK_ROUTER_BUILD )
   2903                {
   2904                  rsp.removeChildren = ind->removeChildren;
   \   000041   EE           MOV     A,R6
   \   000042   240B         ADD     A,#0xb
   \   000044   F582         MOV     DPL,A
   \   000046   E4           CLR     A
   \   000047   3F           ADDC    A,R7
   \   000048   F583         MOV     DPH,A
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C0E0         PUSH    A
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   D0E0         POP     A
   \   000055   F0           MOVX    @DPTR,A
   2905                }
   2906                else if ( ZSTACK_END_DEVICE_BUILD )
   2907                {
   2908                  rsp.removeChildren = 0;
   2909                }
   2910          
   2911                NLME_LeaveRsp( &rsp );
   \   000056                ; Setup parameters for call to function NLME_LeaveRsp
   \   000056   AA..         MOV     R2,?XSP + 0
   \   000058   AB..         MOV     R3,?XSP + 1
   \   00005A   12....       LCALL   `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   \   00005D   E9           MOV     A,R1
   2912              }
   2913          
   2914              if ( ZSTACK_END_DEVICE_BUILD )
   2915              {
   2916                // Stop polling and get ready to reset
   2917                NLME_SetPollRate( 0 );
   2918              }
   2919          
   2920              // Prepare to leave with reset
   2921              ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_1:
   \   00005E                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00005E   EE           MOV     A,R6
   \   00005F   240C         ADD     A,#0xc
   \   000061   F582         MOV     DPL,A
   \   000063   E4           CLR     A
   \   000064   3F           ADDC    A,R7
   \   000065   F583         MOV     DPH,A
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   00006C   806A         SJMP    ??ZDO_LeaveInd_2
   2922            }
   2923            else
   2924            {
   2925              leave = FALSE;
   \                     ??ZDO_LeaveInd_0:
   \   00006E   75..00       MOV     ?V0,#0x0
   2926          
   2927              // Check if this device needs to leave as a child or descendent
   2928              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \   000071                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000071   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000074   8A..         MOV     ?V2,R2
   \   000076   8B..         MOV     ?V3,R3
   \   000078   A8..         MOV     R0,?V2
   \   00007A   A9..         MOV     R1,?V3
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   E0           MOVX    A,@DPTR
   \   000081   68           XRL     A,R0
   \   000082   7003         JNZ     ??ZDO_LeaveInd_3
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   69           XRL     A,R1
   \                     ??ZDO_LeaveInd_3:
   \   000087   701B         JNZ     ??ZDO_LeaveInd_4
   2929              {
   2930                if ( ( ind->removeChildren == TRUE               ) ||
   2931                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2932                       NODETYPE_DEVICE                           )    )
   \   000089   EE           MOV     A,R6
   \   00008A   240B         ADD     A,#0xb
   \   00008C   F582         MOV     DPL,A
   \   00008E   E4           CLR     A
   \   00008F   3F           ADDC    A,R7
   \   000090   F583         MOV     DPH,A
   \   000092   E0           MOVX    A,@DPTR
   \   000093   6401         XRL     A,#0x1
   \   000095   600A         JZ      ??ZDO_LeaveInd_5
   \   000097   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   5407         ANL     A,#0x7
   \   00009D   6402         XRL     A,#0x2
   \   00009F   7003         JNZ     ??ZDO_LeaveInd_4
   2933                {
   2934                  leave = TRUE;
   \                     ??ZDO_LeaveInd_5:
   \   0000A1   75..01       MOV     ?V0,#0x1
   2935                }
   2936              }
   2937              else if ( ind->removeChildren == TRUE )
   2938              {
   2939                // Check NWK address allocation algorithm
   2940                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2941              }
   2942          
   2943              if ( leave == TRUE )
   \                     ??ZDO_LeaveInd_4:
   \   0000A4   7401         MOV     A,#0x1
   \   0000A6   65..         XRL     A,?V0
   \   0000A8   7010         JNZ     ??ZDO_LeaveInd_6
   2944              {
   2945                // Prepare to leave with reset
   2946                ZDApp_LeaveReset( ind->rejoin );
   \   0000AA                ; Setup parameters for call to function ZDApp_LeaveReset
   \   0000AA   EE           MOV     A,R6
   \   0000AB   240C         ADD     A,#0xc
   \   0000AD   F582         MOV     DPL,A
   \   0000AF   E4           CLR     A
   \   0000B0   3F           ADDC    A,R7
   \   0000B1   F583         MOV     DPH,A
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F9           MOV     R1,A
   \   0000B5   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   0000B8   801E         SJMP    ??ZDO_LeaveInd_2
   2947              }
   2948              else
   2949              {
   2950                // Remove device address(optionally descendents) from data
   2951                ZDApp_LeaveUpdate( ind->srcAddr,
   2952                                   ind->extAddr,
   2953                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_6:
   \   0000BA                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   0000BA   EE           MOV     A,R6
   \   0000BB   240B         ADD     A,#0xb
   \   0000BD   F582         MOV     DPL,A
   \   0000BF   E4           CLR     A
   \   0000C0   3F           ADDC    A,R7
   \   0000C1   F583         MOV     DPH,A
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F9           MOV     R1,A
   \   0000C5   EE           MOV     A,R6
   \   0000C6   2402         ADD     A,#0x2
   \   0000C8   FC           MOV     R4,A
   \   0000C9   E4           CLR     A
   \   0000CA   3F           ADDC    A,R7
   \   0000CB   FD           MOV     R5,A
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   FA           MOV     R2,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   FB           MOV     R3,A
   \   0000D5   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2954              }
   2955            }
   2956          
   2957            // Pass the leave indication to higher layer if callback registered.
   2958            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_2:
   \   0000D8   90....       MOV     DPTR,#zdoCBFunc + 12
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   E8           MOV     A,R0
   \   0000E1   49           ORL     A,R1
   \   0000E2   601C         JZ      ??ZDO_LeaveInd_7
   2959            {
   2960              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000E4                ; Setup parameters for indirect call
   \   0000E4   EE           MOV     A,R6
   \   0000E5   FA           MOV     R2,A
   \   0000E6   EF           MOV     A,R7
   \   0000E7   FB           MOV     R3,A
   \   0000E8   90....       MOV     DPTR,#zdoCBFunc + 12
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F8           MOV     R0,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F583         MOV     DPH,A
   \   0000F1   8882         MOV     DPL,R0
   \   0000F3   12....       LCALL   ?CALL_IND
   \   0000F6   8A..         MOV     ?V2,R2
   \   0000F8   8B..         MOV     ?V3,R3
   \   0000FA   85..82       MOV     DPL,?V2
   \   0000FD   85..83       MOV     DPH,?V3
   2961            }
   2962          }
   \                     ??ZDO_LeaveInd_7:
   \   000100   7402         MOV     A,#0x2
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   7F04         MOV     R7,#0x4
   \   000107   02....       LJMP    ?BANKED_LEAVE_XDATA
   2963          
   2964          /*********************************************************************
   2965           * @fn          ZDO_SyncIndicationCB
   2966           *
   2967           * @brief       This function allows the next higher layer of a
   2968           *              coordinator to be notified of a loss of synchronization
   2969           *                          with the parent/child device.
   2970           *
   2971           * @param       type: 0 - child; 1 - parent
   2972           *
   2973           *
   2974           * @return      none
   2975           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2976          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2977          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   2978            (void)shortAddr;  // Remove this line if this parameter is used.
   2979          
   2980            if ( ZSTACK_END_DEVICE_BUILD
   2981              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   00000B   90....       MOV     DPTR,#_NIB + 14
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000011   4019         JC      ??ZDO_SyncIndicationCB_0
   2982            {
   2983              if ( type == 1 )
   \   000013   7401         MOV     A,#0x1
   \   000015   65..         XRL     A,?V0
   \   000017   7013         JNZ     ??ZDO_SyncIndicationCB_0
   2984              {
   2985                // We lost contact with our parent.  Clear the neighbor Table.
   2986                nwkNeighborInitTable();
   \   000019                ; Setup parameters for call to function nwkNeighborInitTable
   \   000019   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2987          
   2988                // Start the rejoin process.
   2989                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   00001C                ; Setup parameters for call to function ZDApp_SendMsg
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7B02         MOV     R3,#0x2
   \   000022   7A03         MOV     R2,#0x3
   \   000024   90....       MOV     DPTR,#ZDAppTaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2990              }
   2991            }
   2992          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   00002C   7F01         MOV     R7,#0x1
   \   00002E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2993          
   2994          /*********************************************************************
   2995           * @fn          ZDO_ManytoOneFailureIndicationCB
   2996           *
   2997           * @brief       This function allows the next higher layer of a
   2998           *              concentrator to be notified of a many-to-one route
   2999           *              failure.
   3000           *
   3001           * @param       none
   3002           *
   3003           *
   3004           * @return      none
   3005           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3006          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3007          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3008            // By default, the concentrator automatically redo many-to-one route
   3009            // discovery to update all many-to-one routes in the network
   3010            // If you want anything processing other than the default,
   3011            // please replace the following code.
   3012          
   3013            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   3014          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
   3015          
   3016          /*********************************************************************
   3017           * @fn          ZDO_PollConfirmCB
   3018           *
   3019           * @brief       This function allows the next higher layer to be
   3020           *              notified of a Poll Confirm.
   3021           *
   3022           * @param       none
   3023           *
   3024           * @return      none
   3025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3026          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3027          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3028            (void)status;  // Remove this line if this parameter is used.
   3029            return;
   \   000000   02....       LJMP    ?BRET
   3030          }
   3031          
   3032          /*********************************************************************
   3033           * @fn          ZDO_NetworkStatusCB
   3034           *
   3035           * @brief       Network Status Callback function
   3036           *
   3037           * @param       nwkDstAddr - message's destination address- used to determine
   3038           *                           if the message was intended for this device or
   3039           *                           a sleeping end device.
   3040           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3041           * @param       dstAddr - the destination address related to the status code
   3042           *
   3043           * @return      none
   3044           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3045          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3046          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   89..         MOV     ?V2,R1
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   3047            (void)dstAddr;     // Remove this line if this parameter is used.
   3048          
   3049            if ( (nwkDstAddr == NLME_GetShortAddr())
   3050                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   00000F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000F   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000012   8A..         MOV     ?V4,R2
   \   000014   8B..         MOV     ?V5,R3
   \   000016   A8..         MOV     R0,?V4
   \   000018   A9..         MOV     R1,?V5
   3051            {
   3052              // Routing error for dstAddr, this is informational and a Route
   3053              // Request should happen automatically.
   3054            }
   3055          }
   \   00001A   7F06         MOV     R7,#0x6
   \   00001C   02....       LJMP    ?BANKED_LEAVE_XDATA
   3056          
   3057          /******************************************************************************
   3058           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3059           *
   3060           * @brief       Stub routine implemented by NHLE. NHLE should call
   3061           *              <AddrMgrWriteNV> when appropriate.
   3062           *
   3063           * @param       none
   3064           *
   3065           * @return      none
   3066           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3067          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3068          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3069          #if defined ( NV_RESTORE )
   3070            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??AddrMgrWriteNVRequest_0
   3071            {
   3072              // Trigger to save info into NV
   3073              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3074            }
   3075          #endif
   3076          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
   3077          
   3078          /*********************************************************************
   3079           * Call Back Functions from Security  - API
   3080           */
   3081          
   3082           /*********************************************************************
   3083           * @fn          ZDO_UpdateDeviceIndication
   3084           *
   3085           * @brief       This function notifies the "Trust Center" of a
   3086           *              network when a device joins or leaves the network.
   3087           *
   3088           * @param       extAddr - pointer to 64 bit address of new device
   3089           * @param       status  - 0 if a new device joined securely
   3090           *                      - 1 if a new device joined un-securely
   3091           *                      - 2 if a device left the network
   3092           *
   3093           * @return      true if newly joined device should be allowed to
   3094           *                                              remain on network
   3095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3096          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3097          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
   3098            // can implement a network access policy based on the
   3099            // IEEE address of newly joining devices...
   3100            (void)extAddr;
   3101            (void)status;
   3102          
   3103            return ZSuccess;
   \   000002   7900         MOV     R1,#0x0
   \   000004   02....       LJMP    ?BRET
   3104          }
   3105          
   3106          /*********************************************************************
   3107           * @fn          ZDApp_InMsgCB
   3108           *
   3109           * @brief       This function is called to pass up any message that is
   3110           *              not yet supported.  This allows for the developer to
   3111           *              support features themselves..
   3112           *
   3113           * @return      none
   3114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3115          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3116          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3117            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   5400         ANL     A,#0x0
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   5480         ANL     A,#0x80
   \   00001A   F9           MOV     R1,A
   \   00001B   E8           MOV     A,R0
   \   00001C   49           ORL     A,R1
   \   00001D   706B         JNZ     ??ZDApp_InMsgCB_0
   3118            {
   3119              // Handle the response message
   3120            }
   3121            else
   3122            {
   3123              // Handle the request message by sending a generic "not supported".
   3124              // Device Announce doesn't have a response.
   3125              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   00001F   EE           MOV     A,R6
   \   000020   240B         ADD     A,#0xb
   \   000022   F582         MOV     DPL,A
   \   000024   E4           CLR     A
   \   000025   3F           ADDC    A,R7
   \   000026   F583         MOV     DPH,A
   \   000028   E0           MOVX    A,@DPTR
   \   000029   705F         JNZ     ??ZDApp_InMsgCB_0
   \   00002B   EE           MOV     A,R6
   \   00002C   240C         ADD     A,#0xc
   \   00002E   F582         MOV     DPL,A
   \   000030   E4           CLR     A
   \   000031   3F           ADDC    A,R7
   \   000032   F583         MOV     DPH,A
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6413         XRL     A,#0x13
   \   000037   7004         JNZ     ??ZDApp_InMsgCB_1
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6400         XRL     A,#0x0
   \                     ??ZDApp_InMsgCB_1:
   \   00003D   604B         JZ      ??ZDApp_InMsgCB_0
   3126              {
   3127                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3128                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   00003F                ; Setup parameters for call to function ZDP_GenericRsp
   \   00003F   EE           MOV     A,R6
   \   000040   240C         ADD     A,#0xc
   \   000042   F582         MOV     DPL,A
   \   000044   E4           CLR     A
   \   000045   3F           ADDC    A,R7
   \   000046   F583         MOV     DPH,A
   \   000048   E0           MOVX    A,@DPTR
   \   000049   4400         ORL     A,#0x0
   \   00004B   F5..         MOV     ?V0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   4480         ORL     A,#0x80
   \   000051   F5..         MOV     ?V1,A
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   E4           CLR     A
   \   000059   F5..         MOV     ?V0,A
   \   00005B   F5..         MOV     ?V1,A
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   EE           MOV     A,R6
   \   000063   240E         ADD     A,#0xe
   \   000065   F582         MOV     DPL,A
   \   000067   E4           CLR     A
   \   000068   3F           ADDC    A,R7
   \   000069   F583         MOV     DPH,A
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FD           MOV     R5,A
   \   00006D   7C84         MOV     R4,#-0x7c
   \   00006F   EE           MOV     A,R6
   \   000070   2402         ADD     A,#0x2
   \   000072   FA           MOV     R2,A
   \   000073   E4           CLR     A
   \   000074   3F           ADDC    A,R7
   \   000075   FB           MOV     R3,A
   \   000076   EE           MOV     A,R6
   \   000077   240F         ADD     A,#0xf
   \   000079   F582         MOV     DPL,A
   \   00007B   E4           CLR     A
   \   00007C   3F           ADDC    A,R7
   \   00007D   F583         MOV     DPH,A
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F9           MOV     R1,A
   \   000081   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000084   7404         MOV     A,#0x4
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   E9           MOV     A,R1
   3129              }
   3130            }
   3131          }
   \                     ??ZDApp_InMsgCB_0:
   \   00008A   7F02         MOV     R7,#0x2
   \   00008C   02....       LJMP    ?BANKED_LEAVE_XDATA
   3132          
   3133          
   3134          /*********************************************************************
   3135           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3136           *
   3137           * @brief   Changes the Match Descriptor Response permission.
   3138           *
   3139           * @param   endpoint - endpoint to allow responses
   3140           * @param   action - true to allow responses, false to not
   3141           *
   3142           * @return  none
   3143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3144          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3145          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   3146            // Store the action
   3147            afSetMatch( endpoint, action );
   \   000009                ; Setup parameters for call to function afSetMatch
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   \   000010   E9           MOV     A,R1
   3148          }
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
   3149          
   3150          /*********************************************************************
   3151           * @fn      ZDApp_NetworkInit()
   3152           *
   3153           * @brief   Used to start the network joining process
   3154           *
   3155           * @param   delay - mSec delay to wait before starting
   3156           *
   3157           * @return  none
   3158           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3159          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3160          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3161            if ( delay )
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   6022         JZ      ??ZDApp_NetworkInit_0
   3162            {
   3163              // Wait awhile before starting the device
   3164              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   00000D                ; Setup parameters for call to function osal_start_timerEx
   \   00000D   8E..         MOV     ?V0,R6
   \   00000F   8F..         MOV     ?V1,R7
   \   000011   E4           CLR     A
   \   000012   F5..         MOV     ?V2,A
   \   000014   F5..         MOV     ?V3,A
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00001B   7A01         MOV     R2,#0x1
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   90....       MOV     DPTR,#ZDAppTaskID
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000027   7404         MOV     A,#0x4
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002C   E9           MOV     A,R1
   \   00002D   800D         SJMP    ??ZDApp_NetworkInit_1
   3165            }
   3166            else
   3167            {
   3168              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002F                ; Setup parameters for call to function osal_set_event
   \   00002F   7A01         MOV     R2,#0x1
   \   000031   7B00         MOV     R3,#0x0
   \   000033   90....       MOV     DPTR,#ZDAppTaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00003B   E9           MOV     A,R1
   3169            }
   3170          }
   \                     ??ZDApp_NetworkInit_1:
   \   00003C   7F04         MOV     R7,#0x4
   \   00003E   02....       LJMP    ?BANKED_LEAVE_XDATA
   3171          
   3172          /*********************************************************************
   3173           * @fn      ZDApp_NwkStateUpdateCB()
   3174           *
   3175           * @brief   This function notifies that this device's network
   3176           *          state info has been changed.
   3177           *
   3178           * @param   none
   3179           *
   3180           * @return  none
   3181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3182          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3183          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3184            // Notify to save info into NV
   3185            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??ZDApp_NwkStateUpdateCB_0
   3186            {
   3187              // Trigger to save info into NV
   3188              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3189            }
   3190          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
   3191          
   3192          /*********************************************************************
   3193           * @fn      ZDApp_NodeProfileSync()
   3194           *
   3195           * @brief   Sync node with stack profile.
   3196           *
   3197           * @param   stackProfile - stack profile of the network to join
   3198           *
   3199           * @return  none
   3200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3201          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3202          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3203            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5023         JNC     ??ZDApp_NodeProfileSync_0
   3204            {
   3205              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   601C         JZ      ??ZDApp_NodeProfileSync_0
   3206              {
   3207                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000020   E0           MOVX    A,@DPTR
   \   000021   4402         ORL     A,#0x2
   \   000023   F0           MOVX    @DPTR,A
   3208                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000024   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000027   740C         MOV     A,#0xc
   \   000029   F0           MOVX    @DPTR,A
   3209                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   00002A                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   00002A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3210              }
   3211            }
   3212          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000032   7F01         MOV     R7,#0x1
   \   000034   02....       LJMP    ?BANKED_LEAVE_XDATA
   3213          
   3214          /*********************************************************************
   3215           * @fn      ZDApp_StartJoiningCycle()
   3216           *
   3217           * @brief   Starts the joining cycle of a device.  This will only
   3218           *          continue an already started (or stopped) joining cycle.
   3219           *
   3220           * @param   none
   3221           *
   3222           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3224          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3225          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3226            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6008         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6402         XRL     A,#0x2
   \   000012   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   3227            {
   3228              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000014   90....       MOV     DPTR,#continueJoining
   \   000017   7401         MOV     A,#0x1
   \   000019   F0           MOVX    @DPTR,A
   3229              ZDApp_NetworkInit( 0 );
   \   00001A                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00001A   7A00         MOV     R2,#0x0
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3230          
   3231              return ( TRUE );
   \   000021   7901         MOV     R1,#0x1
   \   000023   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   3232            }
   3233            else
   3234              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000025   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000027   D083         POP     DPH
   \   000029   D082         POP     DPL
   \   00002B   02....       LJMP    ?BRET
   3235          }
   3236          
   3237          /*********************************************************************
   3238           * @fn      ZDApp_StopJoiningCycle()
   3239           *
   3240           * @brief   Stops the joining or rejoining process of a device.
   3241           *
   3242           * @param   none
   3243           *
   3244           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3246          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3247          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3248            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6008         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6402         XRL     A,#0x2
   \   000012   700A         JNZ     ??ZDApp_StopJoiningCycle_1
   3249            {
   3250              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000014   90....       MOV     DPTR,#continueJoining
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
   3251              return ( TRUE );
   \   00001A   7901         MOV     R1,#0x1
   \   00001C   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   3252            }
   3253            else
   3254              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001E   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000020   D083         POP     DPH
   \   000022   D082         POP     DPL
   \   000024   02....       LJMP    ?BRET
   3255          }
   3256          
   3257          /*********************************************************************
   3258           * @fn      ZDApp_AnnounceNewAddress()
   3259           *
   3260           * @brief   Send Device Announce and hold all transmissions for
   3261           *          new address timeout.
   3262           *
   3263           * @param   none
   3264           *
   3265           * @return  none
   3266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3267          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3268          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3269          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3270            // Turn off data request hold
   3271            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3272          #endif
   3273          
   3274            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3275                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000F   8A..         MOV     ?V0,R2
   \   000011   8B..         MOV     ?V1,R3
   \   000013   AE..         MOV     R6,?V0
   \   000015   AF..         MOV     R7,?V1
   \   000017                ; Setup parameters for call to function NLME_GetShortAddr
   \   000017   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001A   8A..         MOV     ?V0,R2
   \   00001C   8B..         MOV     ?V1,R3
   \   00001E   AA..         MOV     R2,?V0
   \   000020   AB..         MOV     R3,?V1
   \   000022                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000022   75..00       MOV     ?V0,#0x0
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   EE           MOV     A,R6
   \   000030   FC           MOV     R4,A
   \   000031   EF           MOV     A,R7
   \   000032   FD           MOV     R5,A
   \   000033   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000036   7401         MOV     A,#0x1
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003B   E9           MOV     A,R1
   3276          
   3277          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3278            // Setup the timeout
   3279            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   00003C                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3280          #endif
   3281          }
   \   000043   7F02         MOV     R7,#0x2
   \   000045   02....       LJMP    ?BANKED_LEAVE_XDATA
   3282          
   3283          /*********************************************************************
   3284           * @fn          ZDApp_NVUpdate
   3285           *
   3286           * @brief       Set the NV Update Timer.
   3287           *
   3288           * @param       none
   3289           *
   3290           * @return      none
   3291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3292          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3293          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3294          #if defined ( NV_RESTORE )
   3295            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   90....       MOV     DPTR,#__Constant_2bc
   \   000007   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   90....       MOV     DPTR,#ZDAppTaskID
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000016   7404         MOV     A,#0x4
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B   E9           MOV     A,R1
   3296          #endif
   3297          }
   \   00001C   D083         POP     DPH
   \   00001E   D082         POP     DPL
   \   000020   02....       LJMP    ?BRET
   3298          
   3299          /*********************************************************************
   3300           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3301           *
   3302           * @brief   Returns a PAN ID for the network layer to use during
   3303           *          a coordinator start and there is another network with
   3304           *          the intended PANID.
   3305           *
   3306           * @param   panid - the intended PAN ID
   3307           *
   3308           * @return  PANID to try
   3309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3310          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3311          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3312            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   FA           MOV     R2,A
   \   000004   5001         JNC     ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC     R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP    ?BRET
   3313          }
   3314          
   3315          /*********************************************************************
   3316           * @fn          ZDO_SrcRtgIndCB
   3317           *
   3318           * @brief       This function notifies the ZDO available src route record received.
   3319           *
   3320           * @param       srcAddr - source address of the source route
   3321           * @param       relayCnt - number of devices in the relay list
   3322           * @param       relayList - relay list of the source route
   3323           *
   3324           * @return      none
   3325           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3326          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3327          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   89..         MOV     ?V2,R1
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   3328            zdoSrcRtg_t srcRtg;
   3329          
   3330            srcRtg.srcAddr = srcAddr;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   E5..         MOV     A,?V0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   E5..         MOV     A,?V1
   \   000020   F0           MOVX    @DPTR,A
   3331            srcRtg.relayCnt = relayCnt;
   \   000021   E5..         MOV     A,?V2
   \   000023   C0E0         PUSH    A
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
   3332            srcRtg.pRelayList = pRelayList;
   \   00002D   7403         MOV     A,#0x3
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   EE           MOV     A,R6
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   EF           MOV     A,R7
   \   000036   F0           MOVX    @DPTR,A
   3333          
   3334            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   000037   90....       MOV     DPTR,#zdoCBFunc
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F8           MOV     R0,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   6012         JZ      ??ZDO_SrcRtgIndCB_0
   3335            {
   3336              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000043                ; Setup parameters for indirect call
   \   000043   AA..         MOV     R2,?XSP + 0
   \   000045   AB..         MOV     R3,?XSP + 1
   \   000047   90....       MOV     DPTR,#zdoCBFunc
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F583         MOV     DPH,A
   \   000050   8882         MOV     DPL,R0
   \   000052   12....       LCALL   ?CALL_IND
   3337            }
   3338          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000055   7405         MOV     A,#0x5
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7F03         MOV     R7,#0x3
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   3339          
   3340          /*********************************************************************
   3341           * @fn          ZDApp_InitZdoCBFunc
   3342           *
   3343           * @brief       Call this function to initialize zdoCBFunc[]
   3344           *
   3345           * @param       none
   3346           *
   3347           * @return      none
   3348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3349          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3350          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3351            uint8 i;
   3352          
   3353            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV     A,R2
   \   000007   C3           CLR     C
   \   000008   9409         SUBB    A,#0x9
   \   00000A   502D         JNC     ??ZDApp_InitZdoCBFunc_1
   3354            {
   3355              zdoCBFunc[i] = NULL;
   \   00000C   EA           MOV     A,R2
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E8           MOV     A,R0
   \   000011   75F002       MOV     B,#0x2
   \   000014   A4           MUL     AB
   \   000015   C8           XCH     A,R0
   \   000016   ABF0         MOV     R3,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   2B           ADD     A,R3
   \   00001D   FB           MOV     R3,A
   \   00001E   75F002       MOV     B,#0x2
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2B           ADD     A,R3
   \   000024   F9           MOV     R1,A
   \   000025   74..         MOV     A,#zdoCBFunc & 0xff
   \   000027   28           ADD     A,R0
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00002C   39           ADDC    A,R1
   \   00002D   F583         MOV     DPH,A
   \   00002F   7400         MOV     A,#0x0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
   3356            }
   \   000036   0A           INC     R2
   \   000037   80CD         SJMP    ??ZDApp_InitZdoCBFunc_0
   3357          }
   \                     ??ZDApp_InitZdoCBFunc_1:
   \   000039   D083         POP     DPH
   \   00003B   D082         POP     DPL
   \   00003D   02....       LJMP    ?BRET
   3358          
   3359          /*********************************************************************
   3360           * @fn          ZDO_RegisterForZdoCB
   3361           *
   3362           * @brief       Call this function to register the higher layer (for
   3363           *              example, the Application layer or MT layer) with ZDO
   3364           *              callbacks to get notified of some ZDO indication like
   3365           *              existence of a concentrator or receipt of a source
   3366           *              route record.
   3367           *
   3368           * @param       indID - ZDO Indication ID
   3369           * @param       pFn   - Callback function pointer
   3370           *
   3371           * @return      ZSuccess - successful, ZInvalidParameter if not
   3372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3373          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3374          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FD           MOV     R5,A
   3375            // Check the range of the indication ID
   3376            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   ED           MOV     A,R5
   \   000007   C3           CLR     C
   \   000008   9409         SUBB    A,#0x9
   \   00000A   502C         JNC     ??ZDO_RegisterForZdoCB_0
   3377            {
   3378              zdoCBFunc[indID] = pFn;
   \   00000C   ED           MOV     A,R5
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E8           MOV     A,R0
   \   000011   75F002       MOV     B,#0x2
   \   000014   A4           MUL     AB
   \   000015   C8           XCH     A,R0
   \   000016   ACF0         MOV     R4,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   2C           ADD     A,R4
   \   00001D   FC           MOV     R4,A
   \   00001E   75F002       MOV     B,#0x2
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2C           ADD     A,R4
   \   000024   F9           MOV     R1,A
   \   000025   74..         MOV     A,#zdoCBFunc & 0xff
   \   000027   28           ADD     A,R0
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00002C   39           ADDC    A,R1
   \   00002D   F583         MOV     DPH,A
   \   00002F   EA           MOV     A,R2
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   EB           MOV     A,R3
   \   000033   F0           MOVX    @DPTR,A
   3379              return ZSuccess;
   \   000034   7900         MOV     R1,#0x0
   \   000036   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3380            }
   3381          
   3382            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000038   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   00003A   D083         POP     DPH
   \   00003C   D082         POP     DPL
   \   00003E   02....       LJMP    ?BRET
   3383          }
   3384          
   3385          /*********************************************************************
   3386           * @fn          ZDO_DeregisterForZdoCB
   3387           *
   3388           * @brief       Call this function to de-register the higher layer (for
   3389           *              example, the Application layer or MT layer) with ZDO
   3390           *              callbacks to get notified of some ZDO indication like
   3391           *              existence of a concentrator or receipt of a source
   3392           *              route record.
   3393           *
   3394           * @param       indID - ZDO Indication ID
   3395           *
   3396           * @return      ZSuccess - successful, ZInvalidParameter if not
   3397           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3398          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3399          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FB           MOV     R3,A
   3400            // Check the range of the indication ID
   3401            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   EB           MOV     A,R3
   \   000007   C3           CLR     C
   \   000008   9409         SUBB    A,#0x9
   \   00000A   502E         JNC     ??ZDO_DeregisterForZdoCB_0
   3402            {
   3403              zdoCBFunc[indID] = NULL;
   \   00000C   EB           MOV     A,R3
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E8           MOV     A,R0
   \   000011   75F002       MOV     B,#0x2
   \   000014   A4           MUL     AB
   \   000015   C8           XCH     A,R0
   \   000016   AAF0         MOV     R2,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   2A           ADD     A,R2
   \   00001D   FA           MOV     R2,A
   \   00001E   75F002       MOV     B,#0x2
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2A           ADD     A,R2
   \   000024   F9           MOV     R1,A
   \   000025   74..         MOV     A,#zdoCBFunc & 0xff
   \   000027   28           ADD     A,R0
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00002C   39           ADDC    A,R1
   \   00002D   F583         MOV     DPH,A
   \   00002F   7400         MOV     A,#0x0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
   3404              return ZSuccess;
   \   000036   7900         MOV     R1,#0x0
   \   000038   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3405            }
   3406          
   3407            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   00003A   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   00003C   D083         POP     DPH
   \   00003E   D082         POP     DPL
   \   000040   02....       LJMP    ?BRET
   3408          }
   3409          
   3410          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3411          #if defined ( REFLECTOR )
   3412          /*********************************************************************
   3413           * @fn          ZDApp_SetPendingBindDefault
   3414           *
   3415           * @brief       This function initializes a specific entry of pending
   3416           *              Bind Request.
   3417           *
   3418           * @param       pendBindReq - pointer to the entry in the table
   3419           *
   3420           * @return      none
   3421           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3422          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3423          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3424            // Set it to an initial value
   3425            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV     R4,#0x21
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   EE           MOV     A,R6
   \   000010   FA           MOV     R2,A
   \   000011   EF           MOV     A,R7
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3426          
   3427            // We are checking for age 0 for aged-out records
   3428            pendBindReq->age = 0;
   \   000016   EE           MOV     A,R6
   \   000017   2420         ADD     A,#0x20
   \   000019   F582         MOV     DPL,A
   \   00001B   E4           CLR     A
   \   00001C   3F           ADDC    A,R7
   \   00001D   F583         MOV     DPH,A
   \   00001F   7400         MOV     A,#0x0
   \   000021   F0           MOVX    @DPTR,A
   3429          }
   \   000022   7F01         MOV     R7,#0x1
   \   000024   02....       LJMP    ?BANKED_LEAVE_XDATA
   3430          
   3431          /*********************************************************************
   3432           * @fn          ZDApp_InitPendingBind
   3433           *
   3434           * @brief       This function initializes the buffer that holds
   3435           *              pending Bind Request messages if no valid NWK address
   3436           *              exists in Address Manager and a Network Address Req
   3437           *              has been sent out.
   3438           *
   3439           * @param       none
   3440           *
   3441           * @return      none
   3442           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3443          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3444          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3445            if ( ZDAppPendingBindReq == NULL )
   \   000005   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   704C         JNZ     ??ZDApp_InitPendingBind_0
   3446            {
   3447              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   000011                ; Setup parameters for call to function osal_mem_alloc
   \   000011   7A63         MOV     R2,#0x63
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000018   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   E8           MOV     A,R0
   \   000029   49           ORL     A,R1
   \   00002A   6031         JZ      ??ZDApp_InitPendingBind_0
   3448              {
   3449                uint8 i;
   3450          
   3451                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00002C   7E00         MOV     R6,#0x0
   \                     ??ZDApp_InitPendingBind_1:
   \   00002E   EE           MOV     A,R6
   \   00002F   C3           CLR     C
   \   000030   9403         SUBB    A,#0x3
   \   000032   5029         JNC     ??ZDApp_InitPendingBind_0
   3452                {
   3453                  // Set to default values
   3454                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   000034                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   000034   EE           MOV     A,R6
   \   000035   F8           MOV     R0,A
   \   000036   7900         MOV     R1,#0x0
   \   000038   E8           MOV     A,R0
   \   000039   75F021       MOV     B,#0x21
   \   00003C   A4           MUL     AB
   \   00003D   C8           XCH     A,R0
   \   00003E   AAF0         MOV     R2,B
   \   000040   75F000       MOV     B,#0x0
   \   000043   A4           MUL     AB
   \   000044   2A           ADD     A,R2
   \   000045   FA           MOV     R2,A
   \   000046   75F021       MOV     B,#0x21
   \   000049   E9           MOV     A,R1
   \   00004A   A4           MUL     AB
   \   00004B   2A           ADD     A,R2
   \   00004C   F9           MOV     R1,A
   \   00004D   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000050   E0           MOVX    A,@DPTR
   \   000051   28           ADD     A,R0
   \   000052   FA           MOV     R2,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   39           ADDC    A,R1
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3455                }
   \   00005A   0E           INC     R6
   \   00005B   80D1         SJMP    ??ZDApp_InitPendingBind_1
   3456              }
   3457            }
   3458          }
   \                     ??ZDApp_InitPendingBind_0:
   \   00005D   7F01         MOV     R7,#0x1
   \   00005F   02....       LJMP    ?BANKED_LEAVE_XDATA
   3459          
   3460          /*********************************************************************
   3461           * @fn          ZDApp_GetEmptyPendingBindReq
   3462           *
   3463           * @brief       This function looks for an empty entry.
   3464           *
   3465           * @param       none
   3466           *
   3467           * @return      Pointer to entry
   3468           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3469          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3470          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3471            uint8 i;
   3472          
   3473            if ( ZDAppPendingBindReq != NULL )
   \   000004   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   605F         JZ      ??ZDApp_GetEmptyPendingBindReq_0
   3474            {
   3475              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000010   7C00         MOV     R4,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   000012   EC           MOV     A,R4
   \   000013   C3           CLR     C
   \   000014   9403         SUBB    A,#0x3
   \   000016   5057         JNC     ??ZDApp_GetEmptyPendingBindReq_0
   3476              {
   3477                if ( ZDAppPendingBindReq[i].age == 0 )
   \   000018   EC           MOV     A,R4
   \   000019   F8           MOV     R0,A
   \   00001A   7900         MOV     R1,#0x0
   \   00001C   E8           MOV     A,R0
   \   00001D   75F021       MOV     B,#0x21
   \   000020   A4           MUL     AB
   \   000021   C8           XCH     A,R0
   \   000022   AAF0         MOV     R2,B
   \   000024   75F000       MOV     B,#0x0
   \   000027   A4           MUL     AB
   \   000028   2A           ADD     A,R2
   \   000029   FA           MOV     R2,A
   \   00002A   75F021       MOV     B,#0x21
   \   00002D   E9           MOV     A,R1
   \   00002E   A4           MUL     AB
   \   00002F   2A           ADD     A,R2
   \   000030   F9           MOV     R1,A
   \   000031   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000034   E0           MOVX    A,@DPTR
   \   000035   28           ADD     A,R0
   \   000036   F8           MOV     R0,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   39           ADDC    A,R1
   \   00003A   F9           MOV     R1,A
   \   00003B   E8           MOV     A,R0
   \   00003C   2420         ADD     A,#0x20
   \   00003E   F582         MOV     DPL,A
   \   000040   E4           CLR     A
   \   000041   39           ADDC    A,R1
   \   000042   F583         MOV     DPH,A
   \   000044   E0           MOVX    A,@DPTR
   \   000045   7025         JNZ     ??ZDApp_GetEmptyPendingBindReq_2
   3478                {
   3479                  return ( &ZDAppPendingBindReq[i] );
   \   000047   EC           MOV     A,R4
   \   000048   F8           MOV     R0,A
   \   000049   7900         MOV     R1,#0x0
   \   00004B   E8           MOV     A,R0
   \   00004C   75F021       MOV     B,#0x21
   \   00004F   A4           MUL     AB
   \   000050   C8           XCH     A,R0
   \   000051   AAF0         MOV     R2,B
   \   000053   75F000       MOV     B,#0x0
   \   000056   A4           MUL     AB
   \   000057   2A           ADD     A,R2
   \   000058   FA           MOV     R2,A
   \   000059   75F021       MOV     B,#0x21
   \   00005C   E9           MOV     A,R1
   \   00005D   A4           MUL     AB
   \   00005E   2A           ADD     A,R2
   \   00005F   F9           MOV     R1,A
   \   000060   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000063   E0           MOVX    A,@DPTR
   \   000064   28           ADD     A,R0
   \   000065   FA           MOV     R2,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   39           ADDC    A,R1
   \   000069   FB           MOV     R3,A
   \   00006A   8007         SJMP    ??ZDApp_GetEmptyPendingBindReq_3
   3480                }
   3481              }
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   00006C   0C           INC     R4
   \   00006D   80A3         SJMP    ??ZDApp_GetEmptyPendingBindReq_1
   3482            }
   3483          
   3484            // No empty entry was found
   3485            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   00006F   7A00         MOV     R2,#0x0
   \   000071   7B00         MOV     R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_3:
   \   000073   D083         POP     DPH
   \   000075   D082         POP     DPL
   \   000077   02....       LJMP    ?BRET
   3486          }
   3487          
   3488          /*********************************************************************
   3489           * @fn          ZDApp_ProcessPendingBindReq
   3490           *
   3491           * @brief       Process pending entry based on EXT address.
   3492           *
   3493           * @param       extAddr - of device to look up
   3494           *
   3495           * @return      none
   3496           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3497          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3498          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   3499            uint8 i;
   3500          
   3501            // Loop through all the pending entries for that Ext Address
   3502            // to create Bind Entries and send Bind Rsp
   3503            if ( ZDAppPendingBindReq != NULL )
   \   00000E   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   E8           MOV     A,R0
   \   000017   49           ORL     A,R1
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3504            {
   3505              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001D   7E00         MOV     R6,#0x0
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   00001F   EE           MOV     A,R6
   \   000020   C3           CLR     C
   \   000021   9403         SUBB    A,#0x3
   \   000023   4003         JC      $+5
   \   000025   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3506              {
   3507                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3508                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \   000028                ; Setup parameters for call to function osal_memcmp
   \   000028   85....       MOV     ?V4,?V0
   \   00002B   85....       MOV     ?V5,?V1
   \   00002E   75..00       MOV     ?V6,#0x0
   \   000031   78..         MOV     R0,#?V4
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000036   7C08         MOV     R4,#0x8
   \   000038   7D00         MOV     R5,#0x0
   \   00003A   EE           MOV     A,R6
   \   00003B   F8           MOV     R0,A
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   E8           MOV     A,R0
   \   00003F   75F021       MOV     B,#0x21
   \   000042   A4           MUL     AB
   \   000043   C8           XCH     A,R0
   \   000044   AAF0         MOV     R2,B
   \   000046   75F000       MOV     B,#0x0
   \   000049   A4           MUL     AB
   \   00004A   2A           ADD     A,R2
   \   00004B   FA           MOV     R2,A
   \   00004C   75F021       MOV     B,#0x21
   \   00004F   E9           MOV     A,R1
   \   000050   A4           MUL     AB
   \   000051   2A           ADD     A,R2
   \   000052   F9           MOV     R1,A
   \   000053   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000056   E0           MOVX    A,@DPTR
   \   000057   28           ADD     A,R0
   \   000058   F8           MOV     R0,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   39           ADDC    A,R1
   \   00005C   F9           MOV     R1,A
   \   00005D   E8           MOV     A,R0
   \   00005E   240B         ADD     A,#0xb
   \   000060   F5..         MOV     ?V2,A
   \   000062   E4           CLR     A
   \   000063   39           ADDC    A,R1
   \   000064   F5..         MOV     ?V3,A
   \   000066   A9..         MOV     R1,?V2
   \   000068   AA..         MOV     R2,?V3
   \   00006A   7B00         MOV     R3,#0x0
   \   00006C   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   E9           MOV     A,R1
   \   000075   6401         XRL     A,#0x1
   \   000077   6003         JZ      $+5
   \   000079   02....       LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
   3509                {
   3510                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   00007C   85..82       MOV     DPL,?XSP + 0
   \   00007F   85..83       MOV     DPH,?XSP + 1
   \   000082   748C         MOV     A,#-0x74
   \   000084   F0           MOVX    @DPTR,A
   3511          
   3512                  // Add Bind entry
   3513                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3514                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3515                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3516                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   000085                ; Setup parameters for call to function APSME_BindRequest
   \   000085   EE           MOV     A,R6
   \   000086   F8           MOV     R0,A
   \   000087   7900         MOV     R1,#0x0
   \   000089   E8           MOV     A,R0
   \   00008A   75F021       MOV     B,#0x21
   \   00008D   A4           MUL     AB
   \   00008E   C8           XCH     A,R0
   \   00008F   AAF0         MOV     R2,B
   \   000091   75F000       MOV     B,#0x0
   \   000094   A4           MUL     AB
   \   000095   2A           ADD     A,R2
   \   000096   FA           MOV     R2,A
   \   000097   75F021       MOV     B,#0x21
   \   00009A   E9           MOV     A,R1
   \   00009B   A4           MUL     AB
   \   00009C   2A           ADD     A,R2
   \   00009D   F9           MOV     R1,A
   \   00009E   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   28           ADD     A,R0
   \   0000A3   F8           MOV     R0,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   39           ADDC    A,R1
   \   0000A7   F9           MOV     R1,A
   \   0000A8   E8           MOV     A,R0
   \   0000A9   2414         ADD     A,#0x14
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   E4           CLR     A
   \   0000AE   39           ADDC    A,R1
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F5..         MOV     ?V2,A
   \   0000B4   78..         MOV     R0,#?V2
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B9   EE           MOV     A,R6
   \   0000BA   F8           MOV     R0,A
   \   0000BB   7900         MOV     R1,#0x0
   \   0000BD   E8           MOV     A,R0
   \   0000BE   75F021       MOV     B,#0x21
   \   0000C1   A4           MUL     AB
   \   0000C2   C8           XCH     A,R0
   \   0000C3   AAF0         MOV     R2,B
   \   0000C5   75F000       MOV     B,#0x0
   \   0000C8   A4           MUL     AB
   \   0000C9   2A           ADD     A,R2
   \   0000CA   FA           MOV     R2,A
   \   0000CB   75F021       MOV     B,#0x21
   \   0000CE   E9           MOV     A,R1
   \   0000CF   A4           MUL     AB
   \   0000D0   2A           ADD     A,R2
   \   0000D1   F9           MOV     R1,A
   \   0000D2   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   28           ADD     A,R0
   \   0000D7   F8           MOV     R0,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   39           ADDC    A,R1
   \   0000DB   F9           MOV     R1,A
   \   0000DC   E8           MOV     A,R0
   \   0000DD   240B         ADD     A,#0xb
   \   0000DF   FC           MOV     R4,A
   \   0000E0   E4           CLR     A
   \   0000E1   39           ADDC    A,R1
   \   0000E2   FD           MOV     R5,A
   \   0000E3   EE           MOV     A,R6
   \   0000E4   F8           MOV     R0,A
   \   0000E5   7900         MOV     R1,#0x0
   \   0000E7   E8           MOV     A,R0
   \   0000E8   75F021       MOV     B,#0x21
   \   0000EB   A4           MUL     AB
   \   0000EC   C8           XCH     A,R0
   \   0000ED   AAF0         MOV     R2,B
   \   0000EF   75F000       MOV     B,#0x0
   \   0000F2   A4           MUL     AB
   \   0000F3   2A           ADD     A,R2
   \   0000F4   FA           MOV     R2,A
   \   0000F5   75F021       MOV     B,#0x21
   \   0000F8   E9           MOV     A,R1
   \   0000F9   A4           MUL     AB
   \   0000FA   2A           ADD     A,R2
   \   0000FB   F9           MOV     R1,A
   \   0000FC   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   28           ADD     A,R0
   \   000101   FA           MOV     R2,A
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   39           ADDC    A,R1
   \   000105   8A82         MOV     DPL,R2
   \   000107   F583         MOV     DPH,A
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   FA           MOV     R2,A
   \   000114   A3           INC     DPTR
   \   000115   E0           MOVX    A,@DPTR
   \   000116   FB           MOV     R3,A
   \   000117   EE           MOV     A,R6
   \   000118   F8           MOV     R0,A
   \   000119   7900         MOV     R1,#0x0
   \   00011B   E8           MOV     A,R0
   \   00011C   75F021       MOV     B,#0x21
   \   00011F   A4           MUL     AB
   \   000120   C8           XCH     A,R0
   \   000121   AFF0         MOV     R7,B
   \   000123   75F000       MOV     B,#0x0
   \   000126   A4           MUL     AB
   \   000127   2F           ADD     A,R7
   \   000128   FF           MOV     R7,A
   \   000129   75F021       MOV     B,#0x21
   \   00012C   E9           MOV     A,R1
   \   00012D   A4           MUL     AB
   \   00012E   2F           ADD     A,R7
   \   00012F   F9           MOV     R1,A
   \   000130   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000133   E0           MOVX    A,@DPTR
   \   000134   28           ADD     A,R0
   \   000135   FF           MOV     R7,A
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   39           ADDC    A,R1
   \   000139   8F82         MOV     DPL,R7
   \   00013B   F583         MOV     DPH,A
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F9           MOV     R1,A
   \   000147   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   00014A   7401         MOV     A,#0x1
   \   00014C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014F   E9           MOV     A,R1
   \   000150   700C         JNZ     ??ZDApp_ProcessPendingBindReq_3
   3517                  {
   3518                    // valid entry
   3519                    bindStat = ZDP_SUCCESS;
   \   000152   85..82       MOV     DPL,?XSP + 0
   \   000155   85..83       MOV     DPH,?XSP + 1
   \   000158   7400         MOV     A,#0x0
   \   00015A   F0           MOVX    @DPTR,A
   3520          
   3521                    // Notify to save info into NV
   3522                    ZDApp_NVUpdate();
   \   00015B                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00015B   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3523                  }
   3524          
   3525                  // Send back a response message
   3526                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3527                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   00015E                ; Setup parameters for call to function ZDP_SendData
   \   00015E   EE           MOV     A,R6
   \   00015F   F8           MOV     R0,A
   \   000160   7900         MOV     R1,#0x0
   \   000162   E8           MOV     A,R0
   \   000163   75F021       MOV     B,#0x21
   \   000166   A4           MUL     AB
   \   000167   C8           XCH     A,R0
   \   000168   AAF0         MOV     R2,B
   \   00016A   75F000       MOV     B,#0x0
   \   00016D   A4           MUL     AB
   \   00016E   2A           ADD     A,R2
   \   00016F   FA           MOV     R2,A
   \   000170   75F021       MOV     B,#0x21
   \   000173   E9           MOV     A,R1
   \   000174   A4           MUL     AB
   \   000175   2A           ADD     A,R2
   \   000176   F9           MOV     R1,A
   \   000177   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   28           ADD     A,R0
   \   00017C   F8           MOV     R0,A
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   39           ADDC    A,R1
   \   000180   F9           MOV     R1,A
   \   000181   E8           MOV     A,R0
   \   000182   241E         ADD     A,#0x1e
   \   000184   F582         MOV     DPL,A
   \   000186   E4           CLR     A
   \   000187   39           ADDC    A,R1
   \   000188   F583         MOV     DPH,A
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   F5..         MOV     ?V2,A
   \   00018D   78..         MOV     R0,#?V2
   \   00018F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000192   7401         MOV     A,#0x1
   \   000194   12....       LCALL   ?XSTACK_DISP100_8
   \   000197   88..         MOV     ?V2,R0
   \   000199   89..         MOV     ?V3,R1
   \   00019B   78..         MOV     R0,#?V2
   \   00019D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A0   75..21       MOV     ?V2,#0x21
   \   0001A3   75..80       MOV     ?V3,#-0x80
   \   0001A6   78..         MOV     R0,#?V2
   \   0001A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AB   7901         MOV     R1,#0x1
   \   0001AD   EE           MOV     A,R6
   \   0001AE   FA           MOV     R2,A
   \   0001AF   7B00         MOV     R3,#0x0
   \   0001B1   EA           MOV     A,R2
   \   0001B2   75F021       MOV     B,#0x21
   \   0001B5   A4           MUL     AB
   \   0001B6   CA           XCH     A,R2
   \   0001B7   A8F0         MOV     R0,B
   \   0001B9   75F000       MOV     B,#0x0
   \   0001BC   A4           MUL     AB
   \   0001BD   28           ADD     A,R0
   \   0001BE   F8           MOV     R0,A
   \   0001BF   75F021       MOV     B,#0x21
   \   0001C2   EB           MOV     A,R3
   \   0001C3   A4           MUL     AB
   \   0001C4   28           ADD     A,R0
   \   0001C5   FB           MOV     R3,A
   \   0001C6   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   2A           ADD     A,R2
   \   0001CB   FA           MOV     R2,A
   \   0001CC   A3           INC     DPTR
   \   0001CD   E0           MOVX    A,@DPTR
   \   0001CE   3B           ADDC    A,R3
   \   0001CF   FB           MOV     R3,A
   \   0001D0   EA           MOV     A,R2
   \   0001D1   2415         ADD     A,#0x15
   \   0001D3   FC           MOV     R4,A
   \   0001D4   E4           CLR     A
   \   0001D5   3B           ADDC    A,R3
   \   0001D6   FD           MOV     R5,A
   \   0001D7   EE           MOV     A,R6
   \   0001D8   FA           MOV     R2,A
   \   0001D9   7B00         MOV     R3,#0x0
   \   0001DB   EA           MOV     A,R2
   \   0001DC   75F021       MOV     B,#0x21
   \   0001DF   A4           MUL     AB
   \   0001E0   CA           XCH     A,R2
   \   0001E1   A8F0         MOV     R0,B
   \   0001E3   75F000       MOV     B,#0x0
   \   0001E6   A4           MUL     AB
   \   0001E7   28           ADD     A,R0
   \   0001E8   F8           MOV     R0,A
   \   0001E9   75F021       MOV     B,#0x21
   \   0001EC   EB           MOV     A,R3
   \   0001ED   A4           MUL     AB
   \   0001EE   28           ADD     A,R0
   \   0001EF   FB           MOV     R3,A
   \   0001F0   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   2A           ADD     A,R2
   \   0001F5   FA           MOV     R2,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   3B           ADDC    A,R3
   \   0001F9   FB           MOV     R3,A
   \   0001FA   EA           MOV     A,R2
   \   0001FB   241F         ADD     A,#0x1f
   \   0001FD   FA           MOV     R2,A
   \   0001FE   5001         JNC     ??ZDApp_ProcessPendingBindReq_4
   \   000200   0B           INC     R3
   \                     ??ZDApp_ProcessPendingBindReq_4:
   \   000201   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000204   7405         MOV     A,#0x5
   \   000206   12....       LCALL   ?DEALLOC_XSTACK8
   \   000209   E9           MOV     A,R1
   3528          
   3529                  // Set the pending request entry to default values
   3530                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   00020A                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   00020A   EE           MOV     A,R6
   \   00020B   F8           MOV     R0,A
   \   00020C   7900         MOV     R1,#0x0
   \   00020E   E8           MOV     A,R0
   \   00020F   75F021       MOV     B,#0x21
   \   000212   A4           MUL     AB
   \   000213   C8           XCH     A,R0
   \   000214   AAF0         MOV     R2,B
   \   000216   75F000       MOV     B,#0x0
   \   000219   A4           MUL     AB
   \   00021A   2A           ADD     A,R2
   \   00021B   FA           MOV     R2,A
   \   00021C   75F021       MOV     B,#0x21
   \   00021F   E9           MOV     A,R1
   \   000220   A4           MUL     AB
   \   000221   2A           ADD     A,R2
   \   000222   F9           MOV     R1,A
   \   000223   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000226   E0           MOVX    A,@DPTR
   \   000227   28           ADD     A,R0
   \   000228   FA           MOV     R2,A
   \   000229   A3           INC     DPTR
   \   00022A   E0           MOVX    A,@DPTR
   \   00022B   39           ADDC    A,R1
   \   00022C   FB           MOV     R3,A
   \   00022D   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3531                }
   3532              }
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   000230   0E           INC     R6
   \   000231   02....       LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3533            }
   3534          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   000234   7401         MOV     A,#0x1
   \   000236   12....       LCALL   ?DEALLOC_XSTACK8
   \   000239   7F07         MOV     R7,#0x7
   \   00023B   02....       LJMP    ?BANKED_LEAVE_XDATA
   3535          
   3536          /*********************************************************************
   3537           * @fn          ZDApp_AgeOutPendingBindEntry
   3538           *
   3539           * @brief       Age out pending Bind Req entries.
   3540           *
   3541           * @param       none
   3542           *
   3543           * @return      none
   3544           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3545          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3546          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3547            uint8 i;
   3548            bool entryFound = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   3549          
   3550            if ( ZDAppPendingBindReq != NULL )
   \   00000C   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   E8           MOV     A,R0
   \   000015   49           ORL     A,R1
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3551            {
   3552              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001B   7F00         MOV     R7,#0x0
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   00001D   EF           MOV     A,R7
   \   00001E   C3           CLR     C
   \   00001F   9403         SUBB    A,#0x3
   \   000021   4003         JC      $+5
   \   000023   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3553              {
   3554                if ( ZDAppPendingBindReq[i].age > 1 )
   \   000026   EF           MOV     A,R7
   \   000027   F8           MOV     R0,A
   \   000028   7900         MOV     R1,#0x0
   \   00002A   E8           MOV     A,R0
   \   00002B   75F021       MOV     B,#0x21
   \   00002E   A4           MUL     AB
   \   00002F   C8           XCH     A,R0
   \   000030   AAF0         MOV     R2,B
   \   000032   75F000       MOV     B,#0x0
   \   000035   A4           MUL     AB
   \   000036   2A           ADD     A,R2
   \   000037   FA           MOV     R2,A
   \   000038   75F021       MOV     B,#0x21
   \   00003B   E9           MOV     A,R1
   \   00003C   A4           MUL     AB
   \   00003D   2A           ADD     A,R2
   \   00003E   F9           MOV     R1,A
   \   00003F   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000042   E0           MOVX    A,@DPTR
   \   000043   28           ADD     A,R0
   \   000044   F8           MOV     R0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   39           ADDC    A,R1
   \   000048   F9           MOV     R1,A
   \   000049   E8           MOV     A,R0
   \   00004A   2420         ADD     A,#0x20
   \   00004C   F582         MOV     DPL,A
   \   00004E   E4           CLR     A
   \   00004F   39           ADDC    A,R1
   \   000050   F583         MOV     DPH,A
   \   000052   E0           MOVX    A,@DPTR
   \   000053   C3           CLR     C
   \   000054   9402         SUBB    A,#0x2
   \   000056   4035         JC      ??ZDApp_AgeOutPendingBindEntry_2
   3555                {
   3556                  ZDAppPendingBindReq[i].age--;
   \   000058   EF           MOV     A,R7
   \   000059   F8           MOV     R0,A
   \   00005A   7900         MOV     R1,#0x0
   \   00005C   E8           MOV     A,R0
   \   00005D   75F021       MOV     B,#0x21
   \   000060   A4           MUL     AB
   \   000061   C8           XCH     A,R0
   \   000062   AAF0         MOV     R2,B
   \   000064   75F000       MOV     B,#0x0
   \   000067   A4           MUL     AB
   \   000068   2A           ADD     A,R2
   \   000069   FA           MOV     R2,A
   \   00006A   75F021       MOV     B,#0x21
   \   00006D   E9           MOV     A,R1
   \   00006E   A4           MUL     AB
   \   00006F   2A           ADD     A,R2
   \   000070   F9           MOV     R1,A
   \   000071   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000074   E0           MOVX    A,@DPTR
   \   000075   28           ADD     A,R0
   \   000076   F8           MOV     R0,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   39           ADDC    A,R1
   \   00007A   F9           MOV     R1,A
   \   00007B   E8           MOV     A,R0
   \   00007C   2420         ADD     A,#0x20
   \   00007E   F582         MOV     DPL,A
   \   000080   E4           CLR     A
   \   000081   39           ADDC    A,R1
   \   000082   F583         MOV     DPH,A
   \   000084   E0           MOVX    A,@DPTR
   \   000085   24FF         ADD     A,#-0x1
   \   000087   F0           MOVX    @DPTR,A
   3557          
   3558                  entryFound = TRUE;
   \   000088   7E01         MOV     R6,#0x1
   \   00008A   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3559                }
   3560                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   00008D   EF           MOV     A,R7
   \   00008E   F8           MOV     R0,A
   \   00008F   7900         MOV     R1,#0x0
   \   000091   E8           MOV     A,R0
   \   000092   75F021       MOV     B,#0x21
   \   000095   A4           MUL     AB
   \   000096   C8           XCH     A,R0
   \   000097   AAF0         MOV     R2,B
   \   000099   75F000       MOV     B,#0x0
   \   00009C   A4           MUL     AB
   \   00009D   2A           ADD     A,R2
   \   00009E   FA           MOV     R2,A
   \   00009F   75F021       MOV     B,#0x21
   \   0000A2   E9           MOV     A,R1
   \   0000A3   A4           MUL     AB
   \   0000A4   2A           ADD     A,R2
   \   0000A5   F9           MOV     R1,A
   \   0000A6   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   28           ADD     A,R0
   \   0000AB   F8           MOV     R0,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   39           ADDC    A,R1
   \   0000AF   F9           MOV     R1,A
   \   0000B0   E8           MOV     A,R0
   \   0000B1   2420         ADD     A,#0x20
   \   0000B3   F582         MOV     DPL,A
   \   0000B5   E4           CLR     A
   \   0000B6   39           ADDC    A,R1
   \   0000B7   F583         MOV     DPH,A
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   6401         XRL     A,#0x1
   \   0000BC   6003         JZ      $+5
   \   0000BE   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3561                {
   3562                  // The record has aged out and has valid data
   3563                  AddrMgrEntry_t entry;
   3564                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   0000C1   85..82       MOV     DPL,?XSP + 0
   \   0000C4   85..83       MOV     DPH,?XSP + 1
   \   0000C7   748C         MOV     A,#-0x74
   \   0000C9   F0           MOVX    @DPTR,A
   3565          
   3566                  entry.user = ADDRMGR_USER_BINDING;
   \   0000CA   7401         MOV     A,#0x1
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   7404         MOV     A,#0x4
   \   0000D1   F0           MOVX    @DPTR,A
   3567          
   3568                  // Remove the entry in address manager so we do not keep entries
   3569                  // with invalid addresses
   3570                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   0000D2                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0000D2   EF           MOV     A,R7
   \   0000D3   F8           MOV     R0,A
   \   0000D4   7900         MOV     R1,#0x0
   \   0000D6   E8           MOV     A,R0
   \   0000D7   75F021       MOV     B,#0x21
   \   0000DA   A4           MUL     AB
   \   0000DB   C8           XCH     A,R0
   \   0000DC   AAF0         MOV     R2,B
   \   0000DE   75F000       MOV     B,#0x0
   \   0000E1   A4           MUL     AB
   \   0000E2   2A           ADD     A,R2
   \   0000E3   FA           MOV     R2,A
   \   0000E4   75F021       MOV     B,#0x21
   \   0000E7   E9           MOV     A,R1
   \   0000E8   A4           MUL     AB
   \   0000E9   2A           ADD     A,R2
   \   0000EA   F9           MOV     R1,A
   \   0000EB   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   28           ADD     A,R0
   \   0000F0   F8           MOV     R0,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   39           ADDC    A,R1
   \   0000F4   F9           MOV     R1,A
   \   0000F5   E8           MOV     A,R0
   \   0000F6   240B         ADD     A,#0xb
   \   0000F8   FC           MOV     R4,A
   \   0000F9   E4           CLR     A
   \   0000FA   39           ADDC    A,R1
   \   0000FB   FD           MOV     R5,A
   \   0000FC   7404         MOV     A,#0x4
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   AA82         MOV     R2,DPL
   \   000103   AB83         MOV     R3,DPH
   \   000105   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3571          
   3572                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000108                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000108   7401         MOV     A,#0x1
   \   00010A   12....       LCALL   ?XSTACK_DISP101_8
   \   00010D   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000110   E9           MOV     A,R1
   \   000111   6401         XRL     A,#0x1
   \   000113   7019         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3573                  {
   3574                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   000115   7402         MOV     A,#0x2
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   64FE         XRL     A,#0xfe
   \   00011D   7004         JNZ     ??ZDApp_AgeOutPendingBindEntry_5
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   64FF         XRL     A,#0xff
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   000123   7009         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3575                    {
   3576                      // Release the entry that contains an invalid NWK address
   3577                      AddrMgrEntryRelease( &entry );
   \   000125                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000125   7401         MOV     A,#0x1
   \   000127   12....       LCALL   ?XSTACK_DISP101_8
   \   00012A   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   00012D   E9           MOV     A,R1
   3578                    }
   3579                  }
   3580          
   3581                  // Send the Bind Response with failure status
   3582                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3583                               &(ZDAppPendingBindReq[i].srcAddr),
   3584                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   00012E                ; Setup parameters for call to function ZDP_SendData
   \   00012E   EF           MOV     A,R7
   \   00012F   F8           MOV     R0,A
   \   000130   7900         MOV     R1,#0x0
   \   000132   E8           MOV     A,R0
   \   000133   75F021       MOV     B,#0x21
   \   000136   A4           MUL     AB
   \   000137   C8           XCH     A,R0
   \   000138   AAF0         MOV     R2,B
   \   00013A   75F000       MOV     B,#0x0
   \   00013D   A4           MUL     AB
   \   00013E   2A           ADD     A,R2
   \   00013F   FA           MOV     R2,A
   \   000140   75F021       MOV     B,#0x21
   \   000143   E9           MOV     A,R1
   \   000144   A4           MUL     AB
   \   000145   2A           ADD     A,R2
   \   000146   F9           MOV     R1,A
   \   000147   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   28           ADD     A,R0
   \   00014C   F8           MOV     R0,A
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   39           ADDC    A,R1
   \   000150   F9           MOV     R1,A
   \   000151   E8           MOV     A,R0
   \   000152   241E         ADD     A,#0x1e
   \   000154   F582         MOV     DPL,A
   \   000156   E4           CLR     A
   \   000157   39           ADDC    A,R1
   \   000158   F583         MOV     DPH,A
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F5..         MOV     ?V0,A
   \   00015D   78..         MOV     R0,#?V0
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000162   7401         MOV     A,#0x1
   \   000164   12....       LCALL   ?XSTACK_DISP100_8
   \   000167   88..         MOV     ?V0,R0
   \   000169   89..         MOV     ?V1,R1
   \   00016B   78..         MOV     R0,#?V0
   \   00016D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000170   75..21       MOV     ?V0,#0x21
   \   000173   75..80       MOV     ?V1,#-0x80
   \   000176   78..         MOV     R0,#?V0
   \   000178   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017B   7901         MOV     R1,#0x1
   \   00017D   EF           MOV     A,R7
   \   00017E   FA           MOV     R2,A
   \   00017F   7B00         MOV     R3,#0x0
   \   000181   EA           MOV     A,R2
   \   000182   75F021       MOV     B,#0x21
   \   000185   A4           MUL     AB
   \   000186   CA           XCH     A,R2
   \   000187   A8F0         MOV     R0,B
   \   000189   75F000       MOV     B,#0x0
   \   00018C   A4           MUL     AB
   \   00018D   28           ADD     A,R0
   \   00018E   F8           MOV     R0,A
   \   00018F   75F021       MOV     B,#0x21
   \   000192   EB           MOV     A,R3
   \   000193   A4           MUL     AB
   \   000194   28           ADD     A,R0
   \   000195   FB           MOV     R3,A
   \   000196   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   2A           ADD     A,R2
   \   00019B   FA           MOV     R2,A
   \   00019C   A3           INC     DPTR
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   3B           ADDC    A,R3
   \   00019F   FB           MOV     R3,A
   \   0001A0   EA           MOV     A,R2
   \   0001A1   2415         ADD     A,#0x15
   \   0001A3   FC           MOV     R4,A
   \   0001A4   E4           CLR     A
   \   0001A5   3B           ADDC    A,R3
   \   0001A6   FD           MOV     R5,A
   \   0001A7   EF           MOV     A,R7
   \   0001A8   FA           MOV     R2,A
   \   0001A9   7B00         MOV     R3,#0x0
   \   0001AB   EA           MOV     A,R2
   \   0001AC   75F021       MOV     B,#0x21
   \   0001AF   A4           MUL     AB
   \   0001B0   CA           XCH     A,R2
   \   0001B1   A8F0         MOV     R0,B
   \   0001B3   75F000       MOV     B,#0x0
   \   0001B6   A4           MUL     AB
   \   0001B7   28           ADD     A,R0
   \   0001B8   F8           MOV     R0,A
   \   0001B9   75F021       MOV     B,#0x21
   \   0001BC   EB           MOV     A,R3
   \   0001BD   A4           MUL     AB
   \   0001BE   28           ADD     A,R0
   \   0001BF   FB           MOV     R3,A
   \   0001C0   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   2A           ADD     A,R2
   \   0001C5   FA           MOV     R2,A
   \   0001C6   A3           INC     DPTR
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   3B           ADDC    A,R3
   \   0001C9   FB           MOV     R3,A
   \   0001CA   EA           MOV     A,R2
   \   0001CB   241F         ADD     A,#0x1f
   \   0001CD   FA           MOV     R2,A
   \   0001CE   5001         JNC     ??ZDApp_AgeOutPendingBindEntry_6
   \   0001D0   0B           INC     R3
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0001D1   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0001D4   7405         MOV     A,#0x5
   \   0001D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D9   E9           MOV     A,R1
   3585          
   3586                  // Clear the record and set to default values
   3587                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0001DA                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0001DA   EF           MOV     A,R7
   \   0001DB   F8           MOV     R0,A
   \   0001DC   7900         MOV     R1,#0x0
   \   0001DE   E8           MOV     A,R0
   \   0001DF   75F021       MOV     B,#0x21
   \   0001E2   A4           MUL     AB
   \   0001E3   C8           XCH     A,R0
   \   0001E4   AAF0         MOV     R2,B
   \   0001E6   75F000       MOV     B,#0x0
   \   0001E9   A4           MUL     AB
   \   0001EA   2A           ADD     A,R2
   \   0001EB   FA           MOV     R2,A
   \   0001EC   75F021       MOV     B,#0x21
   \   0001EF   E9           MOV     A,R1
   \   0001F0   A4           MUL     AB
   \   0001F1   2A           ADD     A,R2
   \   0001F2   F9           MOV     R1,A
   \   0001F3   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   28           ADD     A,R0
   \   0001F8   FA           MOV     R2,A
   \   0001F9   A3           INC     DPTR
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   39           ADDC    A,R1
   \   0001FC   FB           MOV     R3,A
   \   0001FD   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3588                }
   3589              }
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   000200   0F           INC     R7
   \   000201   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3590            }
   3591          
   3592            if ( entryFound == FALSE )
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   000204   EE           MOV     A,R6
   \   000205   700F         JNZ     ??ZDApp_AgeOutPendingBindEntry_7
   3593            {
   3594              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \   000207                ; Setup parameters for call to function osal_stop_timerEx
   \   000207   7A00         MOV     R2,#0x0
   \   000209   7B10         MOV     R3,#0x10
   \   00020B   90....       MOV     DPTR,#ZDAppTaskID
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   F9           MOV     R1,A
   \   000210   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000213   E9           MOV     A,R1
   \   000214   8018         SJMP    ??ZDApp_AgeOutPendingBindEntry_8
   3595            }
   3596            else
   3597            {
   3598              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3599                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   000216                ; Setup parameters for call to function osal_start_timerEx
   \   000216   90....       MOV     DPTR,#__Constant_3e8
   \   000219   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00021C   7A00         MOV     R2,#0x0
   \   00021E   7B10         MOV     R3,#0x10
   \   000220   90....       MOV     DPTR,#ZDAppTaskID
   \   000223   E0           MOVX    A,@DPTR
   \   000224   F9           MOV     R1,A
   \   000225   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000228   7404         MOV     A,#0x4
   \   00022A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00022D   E9           MOV     A,R1
   3600            }
   3601          }
   \                     ??ZDApp_AgeOutPendingBindEntry_8:
   \   00022E   740E         MOV     A,#0xe
   \   000230   12....       LCALL   ?DEALLOC_XSTACK8
   \   000233   7F02         MOV     R7,#0x2
   \   000235   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devStartMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2bc:
   \   000000   BC020000     DD 700

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNetworkState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ForceConcentratorChange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_JoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceConfigured::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkDescListProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_beaconNotifyIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PermitJoinCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkStatusCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitZdoCBFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_DeregisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetPendingBindDefault::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetPendingBindDefault

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitPendingBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitPendingBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_GetEmptyPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_GetEmptyPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AgeOutPendingBindEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AgeOutPendingBindEntry
   3602          #endif
   3603          #endif
   3604          
   3605          /*********************************************************************
   3606          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     32   AddrMgrWriteNVRequest
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      2     12   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     14   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     43   ZDApp_AgeOutPendingBindEntry
        0     24   -> AddrMgrEntryLookupExt
        0     24   -> AddrMgrEntryRelease
        0     24   -> AddrMgrExtAddrSet
        0     24   -> ZDApp_SetPendingBindDefault
        0     29   -> ZDP_SendData
        0     28   -> osal_start_timerEx
        0     24   -> osal_stop_timerEx
      0     25   ZDApp_AnnounceNewAddress
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0      0   ZDApp_CoordStartPANIDConflictCB
      2     17   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> NLME_StartRouterRequest
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_set_event
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      2      0   ZDApp_GetEmptyPendingBindReq
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0     12   ZDApp_Init
        0     12   -> HalLedBlink
        0     12   -> NLME_GetExtAddr
        0     12   -> ZDAppCheckForHoldKey
        0     12   -> ZDApp_InitPendingBind
        0     12   -> ZDApp_InitUserDesc
        0     12   -> ZDApp_InitZdoCBFunc
        0     12   -> ZDApp_RegisterCBs
        0     12   -> ZDOInitDevice
        0     12   -> ZDO_Init
        0     12   -> afRegister
      0     21   ZDApp_InitPendingBind
        0      9   -> ZDApp_SetPendingBindDefault
        0      9   -> osal_mem_alloc
      0     43   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2     12   ZDApp_InitZdoCBFunc
      0     24   ZDApp_JoinReq
        0     20   -> NLME_JoinRequest
        0     16   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     28   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     24   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     23   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlStartup
        0     10   -> ZDApp_LeaveCtrlReset
      0     23   ZDApp_LeaveReset
        0      9   -> ZDApp_LeaveCtrlSet
        0      9   -> ZDApp_ResetTimerStart
      0     49   ZDApp_LeaveUpdate
        0     32   -> APSME_UpdateDeviceReq
        0     32   -> AddrMgrWriteNVRequest
        0     32   -> AssocIsChild
        0     32   -> NLME_RemoveChild
        0     32   -> RTG_RemoveRtgEntry
        0     32   -> ZDSecMgrAddrClear
        0     32   -> ZDSecMgrDeviceRemoveByExtAddr
        0     32   -> nwkNeighborRemove
        0     35   -> osal_memcpy
      2     28   ZDApp_NVUpdate
        2      4   -> osal_start_timerEx
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     30   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2     14   ZDApp_NetworkStartEvt
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     25   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     16   ZDApp_NwkDescListProcessing
        0     16   -> nwk_ExtPANIDValid
        0     16   -> nwk_getNwkDescList
        0     16   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     68   ZDApp_ProcessMsgCBs
        0     56   -> ZDApp_ProcessPendingBindReq
        0     56   -> ZDMatchSendState
        0     56   -> ZDO_MatchEndDeviceBind
        0     56   -> ZDO_ParseAddrRsp
        0     56   -> ZDO_ParseBindUnbindReq
        0     56   -> ZDO_ParseEndDeviceBindReq
        0     56   -> ZDO_ProcessBindUnbindReq
        0     56   -> ZDO_UpdateAddrManager
        0     56   -> osal_mem_free
      0     12   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_GetShortAddr
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> NLME_StartRouterRequest
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_ResetTimerStart
        0     12   -> ZDApp_RestoreNwkKey
        0     12   -> ZMacSetReq
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_rand
        0     12   -> osal_set_event
      0     26   ZDApp_ProcessOSALMsg
        0     12   -> ZDApp_ProcessMsgCBs
        0     12   -> ZDApp_ProcessSecMsg
        0     12   -> ZDP_IncomingData
      0     77   ZDApp_ProcessPendingBindReq
        0     17   -> APSME_BindRequest
        0     16   -> ZDApp_NVUpdate
        0     16   -> ZDApp_SetPendingBindDefault
        0     21   -> ZDP_SendData
        0     19   -> osal_memcmp
      0     35   ZDApp_ProcessSecEvent
        0     17   -> ZDApp_DeviceAuthEvt
        0     17   -> ZDApp_SaveNwkKey
        0     17   -> ZDSecMgrNewDeviceEvent
        0     17   -> ZDSecMgrSaveApsLinkKey
        0     17   -> ZDSecMgrSaveTCLinkKey
        0     17   -> osal_mem_free
        0     21   -> osal_start_timerEx
      0     21   ZDApp_ProcessSecMsg
        0      9   -> ZDSecMgrUpdateDeviceInd
      0     23   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2     12   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0      9   ZDApp_ResetTimerCancel
        0      9   -> osal_clear_event
        0      9   -> osal_stop_timerEx
      0     28   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     23   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> ZDApp_RestoreNwkKey
        0      9   -> sAddrExtCpy
      0     65   ZDApp_RestoreNwkKey
        0     52   -> osal_memcmp
        0     49   -> osal_memset
        0     53   -> osal_nv_read
        0     53   -> osal_nv_write
      2     14   ZDApp_SaveNetworkStateEvt
        2      0   -> NLME_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     52   ZDApp_SaveNwkKey
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0     39   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0     10   ZDApp_SendEventMsg
        0     10   -> ZDApp_SendMsg
      1     38   ZDApp_SendMsg
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     33   ZDApp_SetPendingBindDefault
        0      9   -> osal_memset
      2      0   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2      0   ZDApp_StopJoiningCycle
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_AgeOutPendingBindEntry
        0     14   -> ZDApp_NetworkStartEvt
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_set_event
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     26   ZDOInitDevice
        0     14   -> NLME_InitNV
        0     14   -> NLME_SetBroadcastFilter
        0     14   -> NLME_SetDefaultNV
        0     14   -> ZDAppDetermineDeviceType
        0     14   -> ZDApp_LeaveCtrlInit
        0     14   -> ZDApp_LeaveCtrlStartup
        0     14   -> ZDApp_NetworkInit
        0     14   -> ZDApp_ReadNetworkRestoreState
        0     14   -> ZDApp_RestoreNetworkState
        0     14   -> ZDApp_SecInit
        0     14   -> ZDConfig_InitDescriptors
        0     14   -> ZDSecMgrClearNVKeyValues
        0     14   -> osal_rand
        0     14   -> osal_set_event
        0     14   -> zgInitItems
        0     14   -> zgWriteStartupOptions
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_NVUpdate
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     16   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     19   ZDO_JoinConfirmCB
        0     19   -> HalLedSet
        0     19   -> ZDApp_SendMsg
        0     19   -> nwkNeighborFindEmptySlot
        0     19   -> nwkNeighborInitTable
        0     19   -> osal_memset
        0     19   -> sAddrExtCpy
      0     29   ZDO_JoinIndicationCB
        0     25   -> Authlist_verify_device
        0     24   -> ZDApp_NVUpdate
        0     24   -> osal_get_timeoutEx
        0     24   -> osal_mem_alloc
        0     28   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> ZDApp_LeaveUpdate
        0     10   -> sAddrExtCmp
      1     14   ZDO_LeaveInd
        0     14   -> NLME_GetCoordShortAddr
        0     14   -> NLME_LeaveRsp
        0     14   -> ZDApp_LeaveReset
        0     14   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0     14   ZDO_NetworkStatusCB
        0     14   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     16   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> ZDApp_SendMsg
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     16   ZDO_beaconNotifyIndCB
        0     16   -> osal_mem_alloc
        0     16   -> osal_memset
        0     16   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for devStartMode>
       1  ?<Initializer for devState>
       1  ?<Initializer for zdoDiscCounter>
      32  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
       1  MatchRsps
      33  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
     102  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     568  ZDApp_AgeOutPendingBindEntry
       6  ZDApp_AgeOutPendingBindEntry::?relay
      72  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      22  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
     110  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      97  ZDApp_DeviceConfigured
       6  ZDApp_DeviceConfigured::?relay
     135  ZDApp_ForceConcentratorChange
       6  ZDApp_ForceConcentratorChange::?relay
     122  ZDApp_GetEmptyPendingBindReq
       6  ZDApp_GetEmptyPendingBindReq::?relay
     143  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
     109  ZDApp_Init
       6  ZDApp_Init::?relay
      98  ZDApp_InitPendingBind
       6  ZDApp_InitPendingBind::?relay
     124  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
      64  ZDApp_InitZdoCBFunc
       6  ZDApp_InitZdoCBFunc::?relay
      96  ZDApp_JoinReq
       6  ZDApp_JoinReq::?relay
       1  ZDApp_LeaveCtrl
      25  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      87  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      55  ZDApp_LeaveCtrlReset
       6  ZDApp_LeaveCtrlReset::?relay
      69  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      72  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
      24  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
     222  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
      35  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      33  ZDApp_NetworkDiscoveryReq
       6  ZDApp_NetworkDiscoveryReq::?relay
      65  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
     125  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
       2  ZDApp_NewDeviceList
      55  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
     335  ZDApp_NwkDescListProcessing
       6  ZDApp_NwkDescListProcessing::?relay
      32  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     332  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     631  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
     134  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
     574  ZDApp_ProcessPendingBindReq
       6  ZDApp_ProcessPendingBindReq::?relay
     324  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
      44  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      26  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
     102  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      74  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      37  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      64  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
     100  ZDApp_RestoreNetworkState
       6  ZDApp_RestoreNetworkState::?relay
     225  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
      24  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
      91  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       2  ZDApp_SavedPollRate
     179  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
      34  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
     100  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
      39  ZDApp_SetPendingBindDefault
       6  ZDApp_SetPendingBindDefault::?relay
      46  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      39  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
       6  ZDApp_epDesc
     352  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     245  ZDOInitDevice
       6  ZDOInitDevice::?relay
     157  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      95  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      67  ZDO_DeregisterForZdoCB
       6  ZDO_DeregisterForZdoCB::?relay
     336  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
     309  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
     131  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
     266  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
      14  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
      92  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
      71  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
      31  ZDO_NetworkStatusCB
       6  ZDO_NetworkStatusCB::?relay
      63  ZDO_PermitJoinCB
       6  ZDO_PermitJoinCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      65  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      95  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      71  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
      49  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       7  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
     838  ZDO_beaconNotifyIndCB
       6  ZDO_beaconNotifyIndCB::?relay
       4  __Constant_258
       4  __Constant_2bc
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       8  join_device_extaddr
       1  nwkStatus
       1  retryCnt
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
       1  zdoDiscCounter
       2  zdo_join_device

 
 9 747 bytes in segment BANKED_CODE
   438 bytes in segment BANK_RELAYS
    12 bytes in segment XDATA_I
    12 bytes in segment XDATA_ID
    20 bytes in segment XDATA_ROM_C
    71 bytes in segment XDATA_Z
 
 10 197 bytes of CODE  memory
      0 bytes of CONST memory (+ 20 bytes shared)
     83 bytes of XDATA memory

Errors: none
Warnings: none
