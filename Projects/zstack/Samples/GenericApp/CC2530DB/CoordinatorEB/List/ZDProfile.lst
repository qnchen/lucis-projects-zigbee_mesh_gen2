###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  17:49:24
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDProfile.c" -D ZTOOL_P1 -D MT_TASK -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_RESTORE -D
#        NV_INIT -D NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D OPEN_FCS -lC
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\ZDProfile.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\ZDProfile.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2013-10-02 15:57:50 -0700 (Wed, 02 Oct 2013) $
      4            Revision:       $Revision: 35529 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          
    135          /*********************************************************************
    136           * EXTERNAL VARIABLES
    137           */
    138          
    139          extern endPointDesc_t ZDApp_epDesc;
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL FUNCTIONS
    147           */
    148          
    149          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    150          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    151          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    152          
    153          /*********************************************************************
    154           * LOCAL VARIABLES
    155           */
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          /*********************************************************************
    164           * ZDO Message Processing table
    165           */
    166          
    167          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    168          
    169          typedef struct
    170          {
    171            uint16                clusterID;
    172            pfnZDPMsgProcessor    pFn;
    173          } zdpMsgProcItem_t;
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW `??zdpProcessAddrReq::?relay`
   \   000004   1300         DW 19
   \   000006   ....         DW `??ZDO_ProcessDeviceAnnce::?relay`
   \   000008   0100         DW 1
   \   00000A   ....         DW `??zdpProcessAddrReq::?relay`
   \   00000C   0200         DW 2
   \   00000E   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   000010   0300         DW 3
   \   000012   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   000014   0400         DW 4
   \   000016   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000018   0500         DW 5
   \   00001A   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   00001C   0600         DW 6
   \   00001E   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000020   1100         DW 17
   \   000022   ....         DW `??ZDO_ProcessUserDescReq::?relay`
   \   000024   1400         DW 20
   \   000026   ....         DW `??ZDO_ProcessUserDescSet::?relay`
   \   000028   1500         DW 21
   \   00002A   ....         DW `??ZDO_ProcessServerDiscReq::?relay`
   \   00002C   1F00         DW 31
   \   00002E   ....         DW `??ZDO_ProcessEndDeviceTimeoutReq::?relay`
   \   000030   FFFF         DW 65535
   \   000032   0000         DW 0H
    176          {
    177          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    178            // These aren't processed by sleeping end devices.
    179            { NWK_addr_req,           zdpProcessAddrReq },
    180            { Device_annce,           ZDO_ProcessDeviceAnnce },  //chaokw
    181          #endif
    182            { IEEE_addr_req,          zdpProcessAddrReq },
    183            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    184            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    185            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    186            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    187            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    188          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    189            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    192            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    198            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    202          #endif
    203          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    204            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    205          #endif
    206          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    207            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    208          #endif
    209          #if defined ( ZDO_USERDESC_RESPONSE )
    210            { User_Desc_req,          ZDO_ProcessUserDescReq },
    211          #endif
    212          #if defined ( ZDO_USERDESCSET_RESPONSE )
    213            { User_Desc_set,          ZDO_ProcessUserDescSet },
    214          #endif
    215          #if defined ( ZDO_SERVERDISC_RESPONSE )
    216            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    217          #endif
    218          #if defined ( ZIGBEE_CHILD_AGING )
    219          #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
    220            { End_Device_Timeout_req, ZDO_ProcessEndDeviceTimeoutReq },
    221          #endif
    222          #endif // ZIGBEE_CHILD_AGING
    223            {0xFFFF, NULL} // Last
    224          };
    225          
    226          /*********************************************************************
    227           * @fn          fillAndSend
    228           *
    229           * @brief       Combined to reduce space
    230           *
    231           * @param
    232           * @param
    233           *
    234           * @return      afStatus_t
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0,R1
   \   000014   741C         MOV     A,#0x1c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V4,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V5,A
    238            afAddrType_t afAddr;
    239          
    240            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000020                ; Setup parameters for call to function osal_memset
   \   000020   7C0C         MOV     R4,#0xc
   \   000022   7D00         MOV     R5,#0x0
   \   000024   7900         MOV     R1,#0x0
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    241            ZADDR_TO_AFADDR( addr, afAddr );
   \   00002D   90....       MOV     DPTR,#ZDP_AF_ENDPOINT
   \   000030   E4           CLR     A
   \   000031   93           MOVC    A,@A+DPTR
   \   000032   C0E0         PUSH    A
   \   000034   7409         MOV     A,#0x9
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   D0E0         POP     A
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   C0E0         PUSH    A
   \   00004B   7408         MOV     A,#0x8
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F8           MOV     R0,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   E8           MOV     A,R0
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   E9           MOV     A,R1
   \   000066   F0           MOVX    @DPTR,A
    242          
    243            *(ZDP_TmpBuf-1) = *transSeq;
   \   000067   85..82       MOV     DPL,?V2
   \   00006A   85..83       MOV     DPH,?V3
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   C0E0         PUSH    A
   \   000070   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F8           MOV     R0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   C8           XCH     A,R0
   \   000078   24FF         ADD     A,#-0x1
   \   00007A   F582         MOV     DPL,A
   \   00007C   C8           XCH     A,R0
   \   00007D   34FF         ADDC    A,#-0x1
   \   00007F   F583         MOV     DPH,A
   \   000081   D0E0         POP     A
   \   000083   F0           MOVX    @DPTR,A
    244          
    245            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    246                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    247                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   000084                ; Setup parameters for call to function AF_DataRequest
   \   000084   75..1E       MOV     ?V1,#0x1e
   \   000087   78..         MOV     R0,#?V1
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008C   78..         MOV     R0,#?V2
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000094   E0           MOVX    A,@DPTR
   \   000095   24FF         ADD     A,#-0x1
   \   000097   F5..         MOV     ?V6,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   34FF         ADDC    A,#-0x1
   \   00009D   F5..         MOV     ?V7,A
   \   00009F   78..         MOV     R0,#?V6
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A4   A8..         MOV     R0,?V0
   \   0000A6   7900         MOV     R1,#0x0
   \   0000A8   E8           MOV     A,R0
   \   0000A9   2401         ADD     A,#0x1
   \   0000AB   F5..         MOV     ?V6,A
   \   0000AD   E4           CLR     A
   \   0000AE   39           ADDC    A,R1
   \   0000AF   F5..         MOV     ?V7,A
   \   0000B1   78..         MOV     R0,#?V6
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   78..         MOV     R0,#?V4
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F9           MOV     R1,A
   \   0000C0   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0000C2   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0000C4   7409         MOV     A,#0x9
   \   0000C6   12....       LCALL   ?XSTACK_DISP101_8
   \   0000C9   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000CC   7409         MOV     A,#0x9
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D1   740C         MOV     A,#0xc
   \   0000D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D6   7F08         MOV     R7,#0x8
   \   0000D8   02....       LJMP    ?BANKED_LEAVE_XDATA
    248          
    249          }
    250          
    251          /*********************************************************************
    252           * @fn          ZDP_SendData
    253           *
    254           * @brief       This builds and send a request message that has
    255           *              NWKAddrOfInterest as its only parameter.
    256           *
    257           * @param       dstAddr - destination address
    258           * @param       cmd - clusterID
    259           * @param       dataLen - number of bytes of data
    260           * @param       data - pointer to the data
    261           * @param       SecurityEnable - Security Options
    262           *
    263           * @return      afStatus_t
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    266                                  byte len, uint8 *buf, byte SecurityEnable )
    267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V12,R2
   \   000007   8B..         MOV     ?V13,R3
   \   000009   8C..         MOV     ?V10,R4
   \   00000B   8D..         MOV     ?V11,R5
   \   00000D   89..         MOV     ?V3,R1
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V8,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V9,A
   \   00001B   7418         MOV     A,#0x18
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V1,A
   \   000027   741A         MOV     A,#0x1a
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V6,A
    268            uint8 *pBuf = ZDP_TmpBuf;
   \   00002F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FE           MOV     R6,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FF           MOV     R7,A
    269            byte cnt = len;
   \   000037   85....       MOV     ?V2,?V3
    270          
    271            while ( cnt-- )
   \                     ??ZDP_SendData_0:
   \   00003A   85....       MOV     ?V4,?V2
   \   00003D   74FF         MOV     A,#-0x1
   \   00003F   25..         ADD     A,?V4
   \   000041   F5..         MOV     ?V2,A
   \   000043   E5..         MOV     A,?V4
   \   000045   6028         JZ      ??ZDP_SendData_1
    272            {
    273              *pBuf++ = *buf++;
   \   000047   85..82       MOV     DPL,?V0
   \   00004A   85..83       MOV     DPH,?V1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   C0E0         PUSH    A
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   D0E0         POP     A
   \   000056   F0           MOVX    @DPTR,A
   \   000057   85..82       MOV     DPL,?V0
   \   00005A   85..83       MOV     DPH,?V1
   \   00005D   A3           INC     DPTR
   \   00005E   8582..       MOV     ?V0,DPL
   \   000061   8583..       MOV     ?V1,DPH
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   A3           INC     DPTR
   \   000069   AE82         MOV     R6,DPL
   \   00006B   AF83         MOV     R7,DPH
   \   00006D   80CB         SJMP    ??ZDP_SendData_0
    274            }
    275          
    276            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \                     ??ZDP_SendData_1:
   \   00006F   E5..         MOV     A,?V6
   \   000071   6008         JZ      ??ZDP_SendData_2
   \   000073   90....       MOV     DPTR,#ZDP_TxOptions
   \   000076   7440         MOV     A,#0x40
   \   000078   F0           MOVX    @DPTR,A
   \   000079   8006         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00007B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00007E   7400         MOV     A,#0x0
   \   000080   F0           MOVX    @DPTR,A
   \                     ??ZDP_SendData_3:
   \   000081                ; Setup parameters for call to function fillAndSend
   \   000081   78..         MOV     R0,#?V8
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   A9..         MOV     R1,?V3
   \   000088   AC..         MOV     R4,?V10
   \   00008A   AD..         MOV     R5,?V11
   \   00008C   AA..         MOV     R2,?V12
   \   00008E   AB..         MOV     R3,?V13
   \   000090   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000093   7402         MOV     A,#0x2
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   E9           MOV     A,R1
   \   000099   F5..         MOV     ?V5,A
   \   00009B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009E   7400         MOV     A,#0x0
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A9..         MOV     R1,?V5
   \   0000A3   7F0E         MOV     R7,#0xe
   \   0000A5   02....       LJMP    ?BANKED_LEAVE_XDATA
    277          }
    278          
    279          /*********************************************************************
    280           * @fn          ZDP_NWKAddrOfInterestReq
    281           *
    282           * @brief       This builds and send a request message that has
    283           *              NWKAddrOfInterest as its only parameter.
    284           *
    285           * @param       dstAddr - destination address
    286           * @param       nwkAddr - 16 bit address
    287           * @param       SecurityEnable - Security Options
    288           *
    289           * @return      afStatus_t
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    292                                               byte cmd, byte SecurityEnable )
    293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V2,R1
    294            (void)SecurityEnable;  // Intentionally unreferenced parameter
    295          
    296            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   00000F   E5..         MOV     A,?V0
   \   000011   C0E0         PUSH    A
   \   000013   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F583         MOV     DPH,A
   \   00001C   8882         MOV     DPL,R0
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
    297            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000021   A8..         MOV     R0,?V0
   \   000023   A9..         MOV     R1,?V1
   \   000025   E4           CLR     A
   \   000026   C9           XCH     A,R1
   \   000027   F8           MOV     R0,A
   \   000028   E8           MOV     A,R0
   \   000029   C0E0         PUSH    A
   \   00002B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F583         MOV     DPH,A
   \   000034   8882         MOV     DPL,R0
   \   000036   A3           INC     DPTR
   \   000037   D0E0         POP     A
   \   000039   F0           MOVX    @DPTR,A
    298          
    299            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   85....       MOV     ?V4,?V2
   \   00003D   75..00       MOV     ?V5,#0x0
   \   000040   78..         MOV     R0,#?V4
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   7902         MOV     R1,#0x2
   \   000047   EE           MOV     A,R6
   \   000048   FC           MOV     R4,A
   \   000049   EF           MOV     A,R7
   \   00004A   FD           MOV     R5,A
   \   00004B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00004D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00004F   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000052   7402         MOV     A,#0x2
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   7F06         MOV     R7,#0x6
   \   000059   02....       LJMP    ?BANKED_LEAVE_XDATA
    300          }
    301          
    302          /*********************************************************************
    303           * Address Requests
    304           */
    305          
    306          /*********************************************************************
    307           * @fn          ZDP_NwkAddrReq
    308           *
    309           * @brief       This builds and send a NWK_addr_req message.  This
    310           *              function sends a broadcast message looking for a 16
    311           *              bit address with a 64 bit address as bait.
    312           *
    313           * @param       IEEEAddress - looking for this device
    314           * @param       SecurityEnable - Security Options
    315           *
    316           * @return      afStatus_t
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    319                                     byte StartIndex, byte SecurityEnable )
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   89..         MOV     ?V1,R1
   \   000010   8C..         MOV     ?V2,R4
   \   000012   8D..         MOV     ?V3,R5
    321            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
    322            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
   \   00001C   75..0A       MOV     ?V0,#0xa
    323            zAddrType_t dstAddr;
    324          
    325            (void)SecurityEnable;  // Intentionally unreferenced parameter
    326          
    327            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \   00001F                ; Setup parameters for call to function sAddrExtCmp
   \   00001F   AC..         MOV     R4,?V4
   \   000021   AD..         MOV     R5,?V5
   \   000023   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000025   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000027   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002A   E9           MOV     A,R1
   \   00002B   7017         JNZ     ??ZDP_NwkAddrReq_0
    328            {
    329              dstAddr.addrMode = AddrBroadcast;
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   740F         MOV     A,#0xf
   \   000034   F0           MOVX    @DPTR,A
    330              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   74FD         MOV     A,#-0x3
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   74FF         MOV     A,#-0x1
   \   000041   F0           MOVX    @DPTR,A
   \   000042   801B         SJMP    ??ZDP_NwkAddrReq_1
    331            }
    332            else
    333            {
    334              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   000044   7408         MOV     A,#0x8
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7402         MOV     A,#0x2
   \   00004B   F0           MOVX    @DPTR,A
    335              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   00004C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   E8           MOV     A,R0
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   E9           MOV     A,R1
   \   00005E   F0           MOVX    @DPTR,A
    336            }
    337          
    338            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \                     ??ZDP_NwkAddrReq_1:
   \   00005F                ; Setup parameters for call to function sAddrExtCpy
   \   00005F   AC..         MOV     R4,?V4
   \   000061   AD..         MOV     R5,?V5
   \   000063   EE           MOV     A,R6
   \   000064   FA           MOV     R2,A
   \   000065   EF           MOV     A,R7
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00006A   8A..         MOV     ?V6,R2
   \   00006C   8B..         MOV     ?V7,R3
   \   00006E   AE..         MOV     R6,?V6
   \   000070   AF..         MOV     R7,?V7
    339          
    340            *pBuf++ = ReqType;
   \   000072   E5..         MOV     A,?V1
   \   000074   C0E0         PUSH    A
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   D0E0         POP     A
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   A3           INC     DPTR
   \   000082   AE82         MOV     R6,DPL
   \   000084   AF83         MOV     R7,DPH
    341            *pBuf++ = StartIndex;
   \   000086   E5..         MOV     A,?V2
   \   000088   C0E0         PUSH    A
   \   00008A   8E82         MOV     DPL,R6
   \   00008C   8F83         MOV     DPH,R7
   \   00008E   D0E0         POP     A
   \   000090   F0           MOVX    @DPTR,A
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   A3           INC     DPTR
   \   000096   AE82         MOV     R6,DPL
   \   000098   AF83         MOV     R7,DPH
    342          
    343            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   00009A                ; Setup parameters for call to function fillAndSend
   \   00009A   E4           CLR     A
   \   00009B   F5..         MOV     ?V6,A
   \   00009D   F5..         MOV     ?V7,A
   \   00009F   78..         MOV     R0,#?V6
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A4   A9..         MOV     R1,?V0
   \   0000A6   7402         MOV     A,#0x2
   \   0000A8   12....       LCALL   ?XSTACK_DISP102_8
   \   0000AB   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000AD   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000AF   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B7   7409         MOV     A,#0x9
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BC   7F08         MOV     R7,#0x8
   \   0000BE   02....       LJMP    ?BANKED_LEAVE_XDATA
    344          }
    345          
    346          /*********************************************************************
    347           * @fn          ZDP_IEEEAddrReq
    348           *
    349           * @brief       This builds and send a IEEE_addr_req message.  This
    350           *              function sends a unicast message looking for a 64
    351           *              bit IEEE address with a 16 bit address as bait.
    352           *
    353           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    354           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    355           * @param       SecurityEnable - Security Options
    356           *
    357           * @return      afStatus_t
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    360                                      byte StartIndex, byte SecurityEnable )
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   89..         MOV     ?V2,R1
   \   000010   8C..         MOV     ?V3,R4
   \   000012   8D..         MOV     ?V4,R5
    362            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
    363            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
   \   00001C   75..04       MOV     ?V5,#0x4
    364            zAddrType_t dstAddr;
    365          
    366            (void)SecurityEnable;  // Intentionally unreferenced parameter
    367          
    368            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00001F   7408         MOV     A,#0x8
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   7402         MOV     A,#0x2
   \   000026   F0           MOVX    @DPTR,A
    369            dstAddr.addr.shortAddr = shortAddr;
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   E5..         MOV     A,?V0
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   E5..         MOV     A,?V1
   \   000033   F0           MOVX    @DPTR,A
    370          
    371            *pBuf++ = LO_UINT16( shortAddr );
   \   000034   E5..         MOV     A,?V0
   \   000036   C0E0         PUSH    A
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   AE82         MOV     R6,DPL
   \   000046   AF83         MOV     R7,DPH
    372            *pBuf++ = HI_UINT16( shortAddr );
   \   000048   A8..         MOV     R0,?V0
   \   00004A   A9..         MOV     R1,?V1
   \   00004C   E4           CLR     A
   \   00004D   C9           XCH     A,R1
   \   00004E   F8           MOV     R0,A
   \   00004F   E8           MOV     A,R0
   \   000050   C0E0         PUSH    A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   D0E0         POP     A
   \   000058   F0           MOVX    @DPTR,A
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   AE82         MOV     R6,DPL
   \   000060   AF83         MOV     R7,DPH
    373          
    374            *pBuf++ = ReqType;
   \   000062   E5..         MOV     A,?V2
   \   000064   C0E0         PUSH    A
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   AE82         MOV     R6,DPL
   \   000074   AF83         MOV     R7,DPH
    375            *pBuf++ = StartIndex;
   \   000076   E5..         MOV     A,?V3
   \   000078   C0E0         PUSH    A
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   D0E0         POP     A
   \   000080   F0           MOVX    @DPTR,A
   \   000081   8E82         MOV     DPL,R6
   \   000083   8F83         MOV     DPH,R7
   \   000085   A3           INC     DPTR
   \   000086   AE82         MOV     R6,DPL
   \   000088   AF83         MOV     R7,DPH
    376          
    377            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   00008A                ; Setup parameters for call to function fillAndSend
   \   00008A   75..01       MOV     ?V6,#0x1
   \   00008D   75..00       MOV     ?V7,#0x0
   \   000090   78..         MOV     R0,#?V6
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   A9..         MOV     R1,?V5
   \   000097   7402         MOV     A,#0x2
   \   000099   12....       LCALL   ?XSTACK_DISP102_8
   \   00009C   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00009E   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000A0   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A8   7409         MOV     A,#0x9
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AD   7F08         MOV     R7,#0x8
   \   0000AF   02....       LJMP    ?BANKED_LEAVE_XDATA
    378          }
    379          
    380          /*********************************************************************
    381           * @fn          ZDP_MatchDescReq
    382           *
    383           * @brief       This builds and send a Match_Desc_req message.  This
    384           *              function sends a broadcast or unicast message
    385           *              requesting the list of endpoint/interfaces that
    386           *              match profile ID and cluster IDs.
    387           *
    388           * @param       dstAddr - destination address
    389           * @param       nwkAddr - network address of interest
    390           * @param       ProfileID - Profile ID
    391           * @param       NumInClusters - number of input clusters
    392           * @param       InClusterList - input cluster ID list
    393           * @param       NumOutClusters - number of output clusters
    394           * @param       OutClusterList - output cluster ID list
    395           * @param       SecurityEnable - Security Options
    396           *
    397           * @return      afStatus_t
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    400                                          uint16 ProfileID,
    401                                          byte NumInClusters, cId_t *InClusterList,
    402                                          byte NumOutClusters, cId_t *OutClusterList,
    403                                          byte SecurityEnable )
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V8,R1
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V2,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V3,A
   \   00001B   741A         MOV     A,#0x1a
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V14,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V15,A
   \   000027   741C         MOV     A,#0x1c
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V5,A
   \   00002F   741D         MOV     A,#0x1d
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V12,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V13,A
    405            uint8 *pBuf = ZDP_TmpBuf;
   \   00003B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FE           MOV     R6,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FF           MOV     R7,A
    406            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    407            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
   \   000043   75..06       MOV     ?V9,#0x6
    408          
    409            (void)SecurityEnable;  // Intentionally unreferenced parameter
    410          
    411            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000046   75F002       MOV     B,#0x2
   \   000049   AA..         MOV     R2,?V8
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   A8..         MOV     R0,?V5
   \   00004F   7900         MOV     R1,#0x0
   \   000051   EA           MOV     A,R2
   \   000052   28           ADD     A,R0
   \   000053   F8           MOV     R0,A
   \   000054   EB           MOV     A,R3
   \   000055   39           ADDC    A,R1
   \   000056   F9           MOV     R1,A
   \   000057   E8           MOV     A,R0
   \   000058   A4           MUL     AB
   \   000059   25..         ADD     A,?V9
   \   00005B   F5..         MOV     ?V9,A
    412          
    413            if ( len >= ZDP_BUF_SZ-1 )
   \   00005D   E5..         MOV     A,?V9
   \   00005F   C3           CLR     C
   \   000060   944F         SUBB    A,#0x4f
   \   000062   4005         JC      ??ZDP_MatchDescReq_0
    414            {
    415              return afStatus_MEM_FAIL;
   \   000064   7910         MOV     R1,#0x10
   \   000066   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    416            }
    417          
    418            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    419            // this command to 0xFFFF.  So, here we will filter this and replace
    420            // with 0xFFFD to only send to devices with RX ON.  This includes the
    421            // network address of interest.
    422            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    423                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000069   85..82       MOV     DPL,?V6
   \   00006C   85..83       MOV     DPH,?V7
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   640F         XRL     A,#0xf
   \   00007A   6013         JZ      ??ZDP_MatchDescReq_2
   \   00007C   85..82       MOV     DPL,?V6
   \   00007F   85..83       MOV     DPH,?V7
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   6402         XRL     A,#0x2
   \   00008D   701E         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   00008F   85..82       MOV     DPL,?V6
   \   000092   85..83       MOV     DPH,?V7
   \   000095   E0           MOVX    A,@DPTR
   \   000096   64FF         XRL     A,#0xff
   \   000098   7004         JNZ     ??ZDP_MatchDescReq_4
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   64FF         XRL     A,#0xff
   \                     ??ZDP_MatchDescReq_4:
   \   00009E   700D         JNZ     ??ZDP_MatchDescReq_3
    424            {
    425              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   0000A0   85..82       MOV     DPL,?V6
   \   0000A3   85..83       MOV     DPH,?V7
   \   0000A6   74FD         MOV     A,#-0x3
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   74FF         MOV     A,#-0x1
   \   0000AC   F0           MOVX    @DPTR,A
    426            }
    427            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   0000AD   74FF         MOV     A,#-0x1
   \   0000AF   65..         XRL     A,?V0
   \   0000B1   7004         JNZ     ??ZDP_MatchDescReq_5
   \   0000B3   74FF         MOV     A,#-0x1
   \   0000B5   65..         XRL     A,?V1
   \                     ??ZDP_MatchDescReq_5:
   \   0000B7   7006         JNZ     ??ZDP_MatchDescReq_6
    428            {
    429              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   0000B9   75..FD       MOV     ?V0,#-0x3
   \   0000BC   75..FF       MOV     ?V1,#-0x1
    430            }
    431          
    432            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   0000BF   E5..         MOV     A,?V0
   \   0000C1   C0E0         PUSH    A
   \   0000C3   8E82         MOV     DPL,R6
   \   0000C5   8F83         MOV     DPH,R7
   \   0000C7   D0E0         POP     A
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   A3           INC     DPTR
   \   0000CF   AE82         MOV     R6,DPL
   \   0000D1   AF83         MOV     R7,DPH
    433            *pBuf++ = HI_UINT16( nwkAddr );
   \   0000D3   A8..         MOV     R0,?V0
   \   0000D5   A9..         MOV     R1,?V1
   \   0000D7   E4           CLR     A
   \   0000D8   C9           XCH     A,R1
   \   0000D9   F8           MOV     R0,A
   \   0000DA   E8           MOV     A,R0
   \   0000DB   C0E0         PUSH    A
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   D0E0         POP     A
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   8E82         MOV     DPL,R6
   \   0000E6   8F83         MOV     DPH,R7
   \   0000E8   A3           INC     DPTR
   \   0000E9   AE82         MOV     R6,DPL
   \   0000EB   AF83         MOV     R7,DPH
    434          
    435            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   0000ED   E5..         MOV     A,?V2
   \   0000EF   C0E0         PUSH    A
   \   0000F1   8E82         MOV     DPL,R6
   \   0000F3   8F83         MOV     DPH,R7
   \   0000F5   D0E0         POP     A
   \   0000F7   F0           MOVX    @DPTR,A
   \   0000F8   8E82         MOV     DPL,R6
   \   0000FA   8F83         MOV     DPH,R7
   \   0000FC   A3           INC     DPTR
   \   0000FD   AE82         MOV     R6,DPL
   \   0000FF   AF83         MOV     R7,DPH
    436            *pBuf++ = HI_UINT16( ProfileID );
   \   000101   A8..         MOV     R0,?V2
   \   000103   A9..         MOV     R1,?V3
   \   000105   E4           CLR     A
   \   000106   C9           XCH     A,R1
   \   000107   F8           MOV     R0,A
   \   000108   E8           MOV     A,R0
   \   000109   C0E0         PUSH    A
   \   00010B   8E82         MOV     DPL,R6
   \   00010D   8F83         MOV     DPH,R7
   \   00010F   D0E0         POP     A
   \   000111   F0           MOVX    @DPTR,A
   \   000112   8E82         MOV     DPL,R6
   \   000114   8F83         MOV     DPH,R7
   \   000116   A3           INC     DPTR
   \   000117   AE82         MOV     R6,DPL
   \   000119   AF83         MOV     R7,DPH
    437          
    438            *pBuf++ = NumInClusters; // Input cluster list
   \   00011B   E5..         MOV     A,?V8
   \   00011D   C0E0         PUSH    A
   \   00011F   8E82         MOV     DPL,R6
   \   000121   8F83         MOV     DPH,R7
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
   \   000126   8E82         MOV     DPL,R6
   \   000128   8F83         MOV     DPH,R7
   \   00012A   A3           INC     DPTR
   \   00012B   AE82         MOV     R6,DPL
   \   00012D   AF83         MOV     R7,DPH
    439            if ( NumInClusters )
   \   00012F   E5..         MOV     A,?V8
   \   000131   7003         JNZ     $+5
   \   000133   02....       LJMP    ??ZDP_MatchDescReq_7 & 0xFFFF
    440            {
    441              for (i=0; i<NumInClusters; ++i)  {
   \   000136   75..00       MOV     ?V4,#0x0
   \                     ??ZDP_MatchDescReq_8:
   \   000139   E5..         MOV     A,?V4
   \   00013B   C3           CLR     C
   \   00013C   95..         SUBB    A,?V8
   \   00013E   507E         JNC     ??ZDP_MatchDescReq_7
    442                *pBuf++ = LO_UINT16( InClusterList[i] );
   \   000140   A8..         MOV     R0,?V4
   \   000142   7900         MOV     R1,#0x0
   \   000144   E8           MOV     A,R0
   \   000145   75F002       MOV     B,#0x2
   \   000148   A4           MUL     AB
   \   000149   C8           XCH     A,R0
   \   00014A   AAF0         MOV     R2,B
   \   00014C   75F000       MOV     B,#0x0
   \   00014F   A4           MUL     AB
   \   000150   2A           ADD     A,R2
   \   000151   FA           MOV     R2,A
   \   000152   75F002       MOV     B,#0x2
   \   000155   E9           MOV     A,R1
   \   000156   A4           MUL     AB
   \   000157   2A           ADD     A,R2
   \   000158   F9           MOV     R1,A
   \   000159   E5..         MOV     A,?V14
   \   00015B   28           ADD     A,R0
   \   00015C   F582         MOV     DPL,A
   \   00015E   E5..         MOV     A,?V15
   \   000160   39           ADDC    A,R1
   \   000161   F583         MOV     DPH,A
   \   000163   E0           MOVX    A,@DPTR
   \   000164   F8           MOV     R0,A
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F9           MOV     R1,A
   \   000168   E8           MOV     A,R0
   \   000169   C0E0         PUSH    A
   \   00016B   8E82         MOV     DPL,R6
   \   00016D   8F83         MOV     DPH,R7
   \   00016F   D0E0         POP     A
   \   000171   F0           MOVX    @DPTR,A
   \   000172   8E82         MOV     DPL,R6
   \   000174   8F83         MOV     DPH,R7
   \   000176   A3           INC     DPTR
   \   000177   AE82         MOV     R6,DPL
   \   000179   AF83         MOV     R7,DPH
    443                *pBuf++ = HI_UINT16( InClusterList[i] );
   \   00017B   A8..         MOV     R0,?V4
   \   00017D   7900         MOV     R1,#0x0
   \   00017F   E8           MOV     A,R0
   \   000180   75F002       MOV     B,#0x2
   \   000183   A4           MUL     AB
   \   000184   C8           XCH     A,R0
   \   000185   AAF0         MOV     R2,B
   \   000187   75F000       MOV     B,#0x0
   \   00018A   A4           MUL     AB
   \   00018B   2A           ADD     A,R2
   \   00018C   FA           MOV     R2,A
   \   00018D   75F002       MOV     B,#0x2
   \   000190   E9           MOV     A,R1
   \   000191   A4           MUL     AB
   \   000192   2A           ADD     A,R2
   \   000193   F9           MOV     R1,A
   \   000194   E5..         MOV     A,?V14
   \   000196   28           ADD     A,R0
   \   000197   F582         MOV     DPL,A
   \   000199   E5..         MOV     A,?V15
   \   00019B   39           ADDC    A,R1
   \   00019C   F583         MOV     DPH,A
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   F8           MOV     R0,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   F9           MOV     R1,A
   \   0001A3   E4           CLR     A
   \   0001A4   C9           XCH     A,R1
   \   0001A5   F8           MOV     R0,A
   \   0001A6   E8           MOV     A,R0
   \   0001A7   C0E0         PUSH    A
   \   0001A9   8E82         MOV     DPL,R6
   \   0001AB   8F83         MOV     DPH,R7
   \   0001AD   D0E0         POP     A
   \   0001AF   F0           MOVX    @DPTR,A
   \   0001B0   8E82         MOV     DPL,R6
   \   0001B2   8F83         MOV     DPH,R7
   \   0001B4   A3           INC     DPTR
   \   0001B5   AE82         MOV     R6,DPL
   \   0001B7   AF83         MOV     R7,DPH
    444              }
   \   0001B9   05..         INC     ?V4
   \   0001BB   02....       LJMP    ??ZDP_MatchDescReq_8 & 0xFFFF
    445            }
    446          
    447            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_7:
   \   0001BE   E5..         MOV     A,?V5
   \   0001C0   C0E0         PUSH    A
   \   0001C2   8E82         MOV     DPL,R6
   \   0001C4   8F83         MOV     DPH,R7
   \   0001C6   D0E0         POP     A
   \   0001C8   F0           MOVX    @DPTR,A
   \   0001C9   8E82         MOV     DPL,R6
   \   0001CB   8F83         MOV     DPH,R7
   \   0001CD   A3           INC     DPTR
   \   0001CE   AE82         MOV     R6,DPL
   \   0001D0   AF83         MOV     R7,DPH
    448            if ( NumOutClusters )
   \   0001D2   E5..         MOV     A,?V5
   \   0001D4   7003         JNZ     $+5
   \   0001D6   02....       LJMP    ??ZDP_MatchDescReq_9 & 0xFFFF
    449            {
    450              for (i=0; i<NumOutClusters; ++i)  {
   \   0001D9   75..00       MOV     ?V4,#0x0
   \                     ??ZDP_MatchDescReq_10:
   \   0001DC   E5..         MOV     A,?V4
   \   0001DE   C3           CLR     C
   \   0001DF   95..         SUBB    A,?V5
   \   0001E1   507E         JNC     ??ZDP_MatchDescReq_9
    451                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \   0001E3   A8..         MOV     R0,?V4
   \   0001E5   7900         MOV     R1,#0x0
   \   0001E7   E8           MOV     A,R0
   \   0001E8   75F002       MOV     B,#0x2
   \   0001EB   A4           MUL     AB
   \   0001EC   C8           XCH     A,R0
   \   0001ED   AAF0         MOV     R2,B
   \   0001EF   75F000       MOV     B,#0x0
   \   0001F2   A4           MUL     AB
   \   0001F3   2A           ADD     A,R2
   \   0001F4   FA           MOV     R2,A
   \   0001F5   75F002       MOV     B,#0x2
   \   0001F8   E9           MOV     A,R1
   \   0001F9   A4           MUL     AB
   \   0001FA   2A           ADD     A,R2
   \   0001FB   F9           MOV     R1,A
   \   0001FC   E5..         MOV     A,?V12
   \   0001FE   28           ADD     A,R0
   \   0001FF   F582         MOV     DPL,A
   \   000201   E5..         MOV     A,?V13
   \   000203   39           ADDC    A,R1
   \   000204   F583         MOV     DPH,A
   \   000206   E0           MOVX    A,@DPTR
   \   000207   F8           MOV     R0,A
   \   000208   A3           INC     DPTR
   \   000209   E0           MOVX    A,@DPTR
   \   00020A   F9           MOV     R1,A
   \   00020B   E8           MOV     A,R0
   \   00020C   C0E0         PUSH    A
   \   00020E   8E82         MOV     DPL,R6
   \   000210   8F83         MOV     DPH,R7
   \   000212   D0E0         POP     A
   \   000214   F0           MOVX    @DPTR,A
   \   000215   8E82         MOV     DPL,R6
   \   000217   8F83         MOV     DPH,R7
   \   000219   A3           INC     DPTR
   \   00021A   AE82         MOV     R6,DPL
   \   00021C   AF83         MOV     R7,DPH
    452                *pBuf++ = HI_UINT16( OutClusterList[i] );
   \   00021E   A8..         MOV     R0,?V4
   \   000220   7900         MOV     R1,#0x0
   \   000222   E8           MOV     A,R0
   \   000223   75F002       MOV     B,#0x2
   \   000226   A4           MUL     AB
   \   000227   C8           XCH     A,R0
   \   000228   AAF0         MOV     R2,B
   \   00022A   75F000       MOV     B,#0x0
   \   00022D   A4           MUL     AB
   \   00022E   2A           ADD     A,R2
   \   00022F   FA           MOV     R2,A
   \   000230   75F002       MOV     B,#0x2
   \   000233   E9           MOV     A,R1
   \   000234   A4           MUL     AB
   \   000235   2A           ADD     A,R2
   \   000236   F9           MOV     R1,A
   \   000237   E5..         MOV     A,?V12
   \   000239   28           ADD     A,R0
   \   00023A   F582         MOV     DPL,A
   \   00023C   E5..         MOV     A,?V13
   \   00023E   39           ADDC    A,R1
   \   00023F   F583         MOV     DPH,A
   \   000241   E0           MOVX    A,@DPTR
   \   000242   F8           MOV     R0,A
   \   000243   A3           INC     DPTR
   \   000244   E0           MOVX    A,@DPTR
   \   000245   F9           MOV     R1,A
   \   000246   E4           CLR     A
   \   000247   C9           XCH     A,R1
   \   000248   F8           MOV     R0,A
   \   000249   E8           MOV     A,R0
   \   00024A   C0E0         PUSH    A
   \   00024C   8E82         MOV     DPL,R6
   \   00024E   8F83         MOV     DPH,R7
   \   000250   D0E0         POP     A
   \   000252   F0           MOVX    @DPTR,A
   \   000253   8E82         MOV     DPL,R6
   \   000255   8F83         MOV     DPH,R7
   \   000257   A3           INC     DPTR
   \   000258   AE82         MOV     R6,DPL
   \   00025A   AF83         MOV     R7,DPH
    453              }
   \   00025C   05..         INC     ?V4
   \   00025E   02....       LJMP    ??ZDP_MatchDescReq_10 & 0xFFFF
    454            }
    455          
    456            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_9:
   \   000261                ; Setup parameters for call to function fillAndSend
   \   000261   75..06       MOV     ?V10,#0x6
   \   000264   75..00       MOV     ?V11,#0x0
   \   000267   78..         MOV     R0,#?V10
   \   000269   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026C   A9..         MOV     R1,?V9
   \   00026E   AC..         MOV     R4,?V6
   \   000270   AD..         MOV     R5,?V7
   \   000272   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000274   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000276   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000279   7402         MOV     A,#0x2
   \   00027B   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   00027E   7F10         MOV     R7,#0x10
   \   000280   02....       LJMP    ?BANKED_LEAVE_XDATA
    457          }
    458          
    459          /*********************************************************************
    460           * @fn          ZDP_SimpleDescReq
    461           *
    462           * @brief       This builds and send a NWK_Simple_Desc_req
    463           *              message.  This function sends unicast message to the
    464           *              destination device.
    465           *
    466           * @param       dstAddr - destination address
    467           * @param       nwkAddr - 16 bit address
    468           * @param       epIntf - endpoint/interface
    469           * @param       SecurityEnable - Security Options
    470           *
    471           * @return      afStatus_t
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    474                                              byte endPoint, byte SecurityEnable )
    475          
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V2,R1
    477            (void)SecurityEnable;  // Intentionally unreferenced parameter
    478          
    479            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   00000F   E5..         MOV     A,?V0
   \   000011   C0E0         PUSH    A
   \   000013   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F583         MOV     DPH,A
   \   00001C   8882         MOV     DPL,R0
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
    480            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000021   A8..         MOV     R0,?V0
   \   000023   A9..         MOV     R1,?V1
   \   000025   E4           CLR     A
   \   000026   C9           XCH     A,R1
   \   000027   F8           MOV     R0,A
   \   000028   E8           MOV     A,R0
   \   000029   C0E0         PUSH    A
   \   00002B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F583         MOV     DPH,A
   \   000034   8882         MOV     DPL,R0
   \   000036   A3           INC     DPTR
   \   000037   D0E0         POP     A
   \   000039   F0           MOVX    @DPTR,A
    481            ZDP_TmpBuf[2] = endPoint;
   \   00003A   E5..         MOV     A,?V2
   \   00003C   C0E0         PUSH    A
   \   00003E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F583         MOV     DPH,A
   \   000047   8882         MOV     DPL,R0
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   D0E0         POP     A
   \   00004D   F0           MOVX    @DPTR,A
    482          
    483            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \   00004E                ; Setup parameters for call to function fillAndSend
   \   00004E   75..04       MOV     ?V4,#0x4
   \   000051   75..00       MOV     ?V5,#0x0
   \   000054   78..         MOV     R0,#?V4
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   7903         MOV     R1,#0x3
   \   00005B   EE           MOV     A,R6
   \   00005C   FC           MOV     R4,A
   \   00005D   EF           MOV     A,R7
   \   00005E   FD           MOV     R5,A
   \   00005F   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000061   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000063   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000066   7402         MOV     A,#0x2
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006B   7F06         MOV     R7,#0x6
   \   00006D   02....       LJMP    ?BANKED_LEAVE_XDATA
    484          }
    485          
    486          /*********************************************************************
    487           * @fn          ZDP_UserDescSet
    488           *
    489           * @brief       This builds and send a User_Desc_set message to set
    490           *              the user descriptor.  This function sends unicast
    491           *              message to the destination device.
    492           *
    493           * @param       dstAddr - destination address
    494           * @param       nwkAddr - 16 bit address
    495           * @param       UserDescriptor - user descriptor
    496           * @param       SecurityEnable - Security Options
    497           *
    498           * @return      afStatus_t
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    501                                    UserDescriptorFormat_t *UserDescriptor,
    502                                    byte SecurityEnable )
    503          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V10,R2
   \   000007   8B..         MOV     ?V11,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V7,R1
   \   00000F   7414         MOV     A,#0x14
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V8,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V9,A
    504            uint8 *pBuf = ZDP_TmpBuf;
   \   00001B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FE           MOV     R6,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FF           MOV     R7,A
    505            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    506                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000023   85..82       MOV     DPL,?V8
   \   000026   85..83       MOV     DPH,?V9
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C3           CLR     C
   \   00002B   9410         SUBB    A,#0x10
   \   00002D   500B         JNC     ??ZDP_UserDescSet_0
   \   00002F   85..82       MOV     DPL,?V8
   \   000032   85..83       MOV     DPH,?V9
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V2,A
   \   000038   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00003A   75..10       MOV     ?V2,#0x10
    507            byte addrLen = 2;
   \                     ??ZDP_UserDescSet_1:
   \   00003D   75..02       MOV     ?V3,#0x2
    508          
    509            (void)SecurityEnable;  // Intentionally unreferenced parameter
    510          
    511            *pBuf++ = LO_UINT16( nwkAddr );
   \   000040   E5..         MOV     A,?V0
   \   000042   C0E0         PUSH    A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   D0E0         POP     A
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   AE82         MOV     R6,DPL
   \   000052   AF83         MOV     R7,DPH
    512            *pBuf++ = HI_UINT16( nwkAddr );
   \   000054   A8..         MOV     R0,?V0
   \   000056   A9..         MOV     R1,?V1
   \   000058   E4           CLR     A
   \   000059   C9           XCH     A,R1
   \   00005A   F8           MOV     R0,A
   \   00005B   E8           MOV     A,R0
   \   00005C   C0E0         PUSH    A
   \   00005E   8E82         MOV     DPL,R6
   \   000060   8F83         MOV     DPH,R7
   \   000062   D0E0         POP     A
   \   000064   F0           MOVX    @DPTR,A
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   A3           INC     DPTR
   \   00006A   AE82         MOV     R6,DPL
   \   00006C   AF83         MOV     R7,DPH
    513          
    514            *pBuf++ = len;
   \   00006E   E5..         MOV     A,?V2
   \   000070   C0E0         PUSH    A
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   D0E0         POP     A
   \   000078   F0           MOVX    @DPTR,A
   \   000079   8E82         MOV     DPL,R6
   \   00007B   8F83         MOV     DPH,R7
   \   00007D   A3           INC     DPTR
   \   00007E   AE82         MOV     R6,DPL
   \   000080   AF83         MOV     R7,DPH
    515            addrLen = 3;
   \   000082   75..03       MOV     ?V3,#0x3
    516          
    517            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \   000085                ; Setup parameters for call to function osal_memcpy
   \   000085   85..82       MOV     DPL,?V8
   \   000088   85..83       MOV     DPH,?V9
   \   00008B   A3           INC     DPTR
   \   00008C   A982         MOV     R1,DPL
   \   00008E   AA83         MOV     R2,DPH
   \   000090   7B00         MOV     R3,#0x0
   \   000092   89..         MOV     ?V4,R1
   \   000094   8A..         MOV     ?V5,R2
   \   000096   8B..         MOV     ?V6,R3
   \   000098   78..         MOV     R0,#?V4
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009D   AC..         MOV     R4,?V2
   \   00009F   7D00         MOV     R5,#0x0
   \   0000A1   EE           MOV     A,R6
   \   0000A2   FA           MOV     R2,A
   \   0000A3   EF           MOV     A,R7
   \   0000A4   FB           MOV     R3,A
   \   0000A5   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A8   7403         MOV     A,#0x3
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AD   8A..         MOV     ?V4,R2
   \   0000AF   8B..         MOV     ?V5,R3
   \   0000B1   AE..         MOV     R6,?V4
   \   0000B3   AF..         MOV     R7,?V5
    518            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   0000B5                ; Setup parameters for call to function osal_memset
   \   0000B5   A8..         MOV     R0,?V2
   \   0000B7   7900         MOV     R1,#0x0
   \   0000B9   7410         MOV     A,#0x10
   \   0000BB   C3           CLR     C
   \   0000BC   98           SUBB    A,R0
   \   0000BD   FC           MOV     R4,A
   \   0000BE   7400         MOV     A,#0x0
   \   0000C0   99           SUBB    A,R1
   \   0000C1   FD           MOV     R5,A
   \   0000C2   7920         MOV     R1,#0x20
   \   0000C4   EE           MOV     A,R6
   \   0000C5   FA           MOV     R2,A
   \   0000C6   EF           MOV     A,R7
   \   0000C7   FB           MOV     R3,A
   \   0000C8   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    519          
    520            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   0000CB                ; Setup parameters for call to function fillAndSend
   \   0000CB   75..14       MOV     ?V4,#0x14
   \   0000CE   75..00       MOV     ?V5,#0x0
   \   0000D1   78..         MOV     R0,#?V4
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6   7410         MOV     A,#0x10
   \   0000D8   25..         ADD     A,?V3
   \   0000DA   F9           MOV     R1,A
   \   0000DB   AC..         MOV     R4,?V10
   \   0000DD   AD..         MOV     R5,?V11
   \   0000DF   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000E1   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000E3   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000E6   7402         MOV     A,#0x2
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   7F0C         MOV     R7,#0xc
   \   0000ED   02....       LJMP    ?BANKED_LEAVE_XDATA
    521          }
    522          
    523          /*********************************************************************
    524           * @fn          ZDP_ServerDiscReq
    525           *
    526           * @brief       Build and send a Server_Discovery_req request message.
    527           *
    528           * @param       serverMask - 16-bit bit-mask of server services being sought.
    529           * @param       SecurityEnable - Security Options
    530           *
    531           * @return      afStatus_t
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   89..         MOV     ?V2,R1
    535            uint8 *pBuf = ZDP_TmpBuf;
   \   000010   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FE           MOV     R6,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FF           MOV     R7,A
    536            zAddrType_t dstAddr;
    537          
    538            dstAddr.addrMode = AddrBroadcast;
   \   000018   7408         MOV     A,#0x8
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   740F         MOV     A,#0xf
   \   00001F   F0           MOVX    @DPTR,A
    539            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   74FD         MOV     A,#-0x3
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   74FF         MOV     A,#-0x1
   \   00002C   F0           MOVX    @DPTR,A
    540          
    541            *pBuf++ = LO_UINT16( serverMask );
   \   00002D   E5..         MOV     A,?V0
   \   00002F   C0E0         PUSH    A
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   D0E0         POP     A
   \   000037   F0           MOVX    @DPTR,A
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   AE82         MOV     R6,DPL
   \   00003F   AF83         MOV     R7,DPH
    542            *pBuf = HI_UINT16( serverMask );
   \   000041   A8..         MOV     R0,?V0
   \   000043   A9..         MOV     R1,?V1
   \   000045   E4           CLR     A
   \   000046   C9           XCH     A,R1
   \   000047   F8           MOV     R0,A
   \   000048   E8           MOV     A,R0
   \   000049   C0E0         PUSH    A
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
    543          
    544            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    545                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   000052   E5..         MOV     A,?V2
   \   000054   6008         JZ      ??ZDP_ServerDiscReq_0
   \   000056   90....       MOV     DPTR,#ZDP_TxOptions
   \   000059   7440         MOV     A,#0x40
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   8006         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   00005E   90....       MOV     DPTR,#ZDP_TxOptions
   \   000061   7400         MOV     A,#0x0
   \   000063   F0           MOVX    @DPTR,A
   \                     ??ZDP_ServerDiscReq_1:
   \   000064                ; Setup parameters for call to function fillAndSend
   \   000064   75..15       MOV     ?V4,#0x15
   \   000067   75..00       MOV     ?V5,#0x0
   \   00006A   78..         MOV     R0,#?V4
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   7902         MOV     R1,#0x2
   \   000071   7402         MOV     A,#0x2
   \   000073   12....       LCALL   ?XSTACK_DISP102_8
   \   000076   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000078   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00007A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00007D   7402         MOV     A,#0x2
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   E9           MOV     A,R1
   \   000083   F5..         MOV     ?V3,A
   \   000085   90....       MOV     DPTR,#ZDP_TxOptions
   \   000088   7400         MOV     A,#0x0
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A9..         MOV     R1,?V3
   \   00008D   7409         MOV     A,#0x9
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000092   7F06         MOV     R7,#0x6
   \   000094   02....       LJMP    ?BANKED_LEAVE_XDATA
    546          }
    547          
    548          /*********************************************************************
    549           * @fn          ZDP_DeviceAnnce
    550           *
    551           * @brief       This builds and send a Device_Annce message.  This
    552           *              function sends a broadcast message.
    553           *
    554           * @param       nwkAddr - 16 bit address of the device
    555           * @param       IEEEAddr - 64 bit address of the device
    556           * @param       capabilities - device capabilities.  This field is only
    557           *                 sent for v1.1 networks.
    558           * @param       SecurityEnable - Security Options
    559           *
    560           * @return      afStatus_t
    561           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    563                                        byte capabilities, byte SecurityEnable )
    564          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   \   000012   89..         MOV     ?V1,R1
    565            zAddrType_t dstAddr;
    566            uint8 len;
    567          
    568            (void)SecurityEnable;  // Intentionally unreferenced parameter
    569          
    570            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000014   7408         MOV     A,#0x8
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   740F         MOV     A,#0xf
   \   00001B   F0           MOVX    @DPTR,A
    571            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   74FD         MOV     A,#-0x3
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   74FF         MOV     A,#-0x1
   \   000028   F0           MOVX    @DPTR,A
    572          
    573            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000029   EE           MOV     A,R6
   \   00002A   C0E0         PUSH    A
   \   00002C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F583         MOV     DPH,A
   \   000035   8882         MOV     DPL,R0
   \   000037   D0E0         POP     A
   \   000039   F0           MOVX    @DPTR,A
    574            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   00003A   EE           MOV     A,R6
   \   00003B   F8           MOV     R0,A
   \   00003C   EF           MOV     A,R7
   \   00003D   F9           MOV     R1,A
   \   00003E   E4           CLR     A
   \   00003F   C9           XCH     A,R1
   \   000040   F8           MOV     R0,A
   \   000041   E8           MOV     A,R0
   \   000042   C0E0         PUSH    A
   \   000044   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F583         MOV     DPH,A
   \   00004D   8882         MOV     DPL,R0
   \   00004F   A3           INC     DPTR
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
    575            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   000053                ; Setup parameters for call to function sAddrExtCpy
   \   000053   AC..         MOV     R4,?V2
   \   000055   AD..         MOV     R5,?V3
   \   000057   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   2402         ADD     A,#0x2
   \   00005D   FA           MOV     R2,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   3400         ADDC    A,#0x0
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    576            len = 2 + Z_EXTADDR_LEN;
   \   000066   75..0A       MOV     ?V0,#0xa
    577          
    578            ZDP_TmpBuf[10] = capabilities;
   \   000069   E5..         MOV     A,?V1
   \   00006B   C0E0         PUSH    A
   \   00006D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F8           MOV     R0,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   C8           XCH     A,R0
   \   000075   240A         ADD     A,#0xa
   \   000077   F582         MOV     DPL,A
   \   000079   C8           XCH     A,R0
   \   00007A   3400         ADDC    A,#0x0
   \   00007C   F583         MOV     DPH,A
   \   00007E   D0E0         POP     A
   \   000080   F0           MOVX    @DPTR,A
    579            len++;
   \   000081   05..         INC     ?V0
    580          
    581            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   000083                ; Setup parameters for call to function fillAndSend
   \   000083   75..13       MOV     ?V4,#0x13
   \   000086   75..00       MOV     ?V5,#0x0
   \   000089   78..         MOV     R0,#?V4
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   A9..         MOV     R1,?V0
   \   000090   7402         MOV     A,#0x2
   \   000092   12....       LCALL   ?XSTACK_DISP102_8
   \   000095   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000097   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000099   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00009C   7402         MOV     A,#0x2
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A1   7409         MOV     A,#0x9
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   7F06         MOV     R7,#0x6
   \   0000A8   02....       LJMP    ?BANKED_LEAVE_XDATA
    582          }
    583          
    584          #if defined ( ZIGBEE_CHILD_AGING )
    585          /*********************************************************************
    586           * @fn          ZDP_EndDeviceTimeoutReq
    587           *
    588           * @brief       This builds and send an End_Device_Timeout_req message.
    589           *
    590           * @param       parentAddr - destination address
    591           * @param       reqTimeout - Timeout value the device is requesting
    592           * @param       SecurityEnable - Security Options
    593           *
    594           * @return      afStatus_t
    595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          afStatus_t ZDP_EndDeviceTimeoutReq( uint16 parentAddr, uint16 reqTimeout,
   \                     ZDP_EndDeviceTimeoutReq:
    597                                              uint8 SecurityEnable )
    598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V3,R1
    599            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V1,A
    600            uint8 len = Z_EXTADDR_LEN + 2;  // Device_IEEEAddress + reqTimeout.
   \   00001E   75..0A       MOV     ?V2,#0xa
    601            zAddrType_t dstAddr;
    602          
    603            (void)SecurityEnable;  // Intentionally unreferenced parameter
    604          
    605            dstAddr.addrMode = Addr16Bit;
   \   000021   7408         MOV     A,#0x8
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   7402         MOV     A,#0x2
   \   000028   F0           MOVX    @DPTR,A
    606            dstAddr.addr.shortAddr = parentAddr;
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   E5..         MOV     A,?V4
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   E5..         MOV     A,?V5
   \   000035   F0           MOVX    @DPTR,A
    607          
    608            pBuf = osal_cpyExtAddr( pBuf, saveExtAddr );
   \   000036                ; Setup parameters for call to function sAddrExtCpy
   \   000036   7C..         MOV     R4,#saveExtAddr & 0xff
   \   000038   7D..         MOV     R5,#(saveExtAddr >> 8) & 0xff
   \   00003A   AA..         MOV     R2,?V0
   \   00003C   AB..         MOV     R3,?V1
   \   00003E   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000041   8A..         MOV     ?V6,R2
   \   000043   8B..         MOV     ?V7,R3
   \   000045   85....       MOV     ?V0,?V6
   \   000048   85....       MOV     ?V1,?V7
    609          
    610            *pBuf++ = LO_UINT16( reqTimeout );
   \   00004B   EE           MOV     A,R6
   \   00004C   C0E0         PUSH    A
   \   00004E   85..82       MOV     DPL,?V0
   \   000051   85..83       MOV     DPH,?V1
   \   000054   D0E0         POP     A
   \   000056   F0           MOVX    @DPTR,A
   \   000057   85..82       MOV     DPL,?V0
   \   00005A   85..83       MOV     DPH,?V1
   \   00005D   A3           INC     DPTR
   \   00005E   8582..       MOV     ?V0,DPL
   \   000061   8583..       MOV     ?V1,DPH
    611            *pBuf++ = HI_UINT16( reqTimeout );
   \   000064   EE           MOV     A,R6
   \   000065   F8           MOV     R0,A
   \   000066   EF           MOV     A,R7
   \   000067   F9           MOV     R1,A
   \   000068   E4           CLR     A
   \   000069   C9           XCH     A,R1
   \   00006A   F8           MOV     R0,A
   \   00006B   E8           MOV     A,R0
   \   00006C   C0E0         PUSH    A
   \   00006E   85..82       MOV     DPL,?V0
   \   000071   85..83       MOV     DPH,?V1
   \   000074   D0E0         POP     A
   \   000076   F0           MOVX    @DPTR,A
   \   000077   85..82       MOV     DPL,?V0
   \   00007A   85..83       MOV     DPH,?V1
   \   00007D   A3           INC     DPTR
   \   00007E   8582..       MOV     ?V0,DPL
   \   000081   8583..       MOV     ?V1,DPH
    612          
    613            return fillAndSend( &ZDP_TransID, &dstAddr, End_Device_Timeout_req, len );
   \   000084                ; Setup parameters for call to function fillAndSend
   \   000084   75..1F       MOV     ?V6,#0x1f
   \   000087   75..00       MOV     ?V7,#0x0
   \   00008A   78..         MOV     R0,#?V6
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008F   A9..         MOV     R1,?V2
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?XSTACK_DISP102_8
   \   000096   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000098   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00009A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00009D   7402         MOV     A,#0x2
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A2   7409         MOV     A,#0x9
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A7   7F08         MOV     R7,#0x8
   \   0000A9   02....       LJMP    ?BANKED_LEAVE_XDATA
    614          }
    615          #endif // ZIGBEE_CHILD_AGING
    616          
    617          /*********************************************************************
    618           * Address Responses
    619           */
    620          
    621          /*********************************************************************
    622           * @fn      zdpProcessAddrReq
    623           *
    624           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    625           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    626           *
    627           * @param   inMsg - incoming message
    628           *
    629           * @return  none
    630           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    631          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    632          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
    633            associated_devices_t *pAssoc;
    634            uint8 reqType;
    635            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   75..FE       MOV     ?V0,#-0x2
   \   000011   75..FF       MOV     ?V1,#-0x1
    636            uint8 *ieee = NULL;
   \   000014   75..00       MOV     ?V2,#0x0
   \   000017   75..00       MOV     ?V3,#0x0
    637          
    638            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   00001A   E5..         MOV     A,?V4
   \   00001C   240C         ADD     A,#0xc
   \   00001E   F582         MOV     DPL,A
   \   000020   E4           CLR     A
   \   000021   35..         ADDC    A,?V5
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   E8           MOV     A,R0
   \   00002B   49           ORL     A,R1
   \   00002C   7006         JNZ     ??zdpProcessAddrReq_0
   \   00002E   7808         MOV     R0,#0x8
   \   000030   7900         MOV     R1,#0x0
   \   000032   8004         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000034   7802         MOV     R0,#0x2
   \   000036   7900         MOV     R1,#0x0
   \                     ??zdpProcessAddrReq_1:
   \   000038   E5..         MOV     A,?V4
   \   00003A   2413         ADD     A,#0x13
   \   00003C   F582         MOV     DPL,A
   \   00003E   E4           CLR     A
   \   00003F   35..         ADDC    A,?V5
   \   000041   F583         MOV     DPH,A
   \   000043   E0           MOVX    A,@DPTR
   \   000044   28           ADD     A,R0
   \   000045   FA           MOV     R2,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   39           ADDC    A,R1
   \   000049   8A82         MOV     DPL,R2
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V6,A
    639          
    640            if ( inMsg->clusterID == NWK_addr_req )
   \   000050   E5..         MOV     A,?V4
   \   000052   240C         ADD     A,#0xc
   \   000054   F582         MOV     DPL,A
   \   000056   E4           CLR     A
   \   000057   35..         ADDC    A,?V5
   \   000059   F583         MOV     DPH,A
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   E8           MOV     A,R0
   \   000061   49           ORL     A,R1
   \   000062   7075         JNZ     ??zdpProcessAddrReq_2
    641          
    642            {
    643              ieee = inMsg->asdu;
   \   000064   E5..         MOV     A,?V4
   \   000066   2413         ADD     A,#0x13
   \   000068   F582         MOV     DPL,A
   \   00006A   E4           CLR     A
   \   00006B   35..         ADDC    A,?V5
   \   00006D   F583         MOV     DPH,A
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F8           MOV     R0,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   88..         MOV     ?V2,R0
   \   000076   89..         MOV     ?V3,R1
    644          
    645              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   000078                ; Setup parameters for call to function sAddrExtCmp
   \   000078   AC..         MOV     R4,?V2
   \   00007A   AD..         MOV     R5,?V3
   \   00007C   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00007E   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000080   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000083   E9           MOV     A,R1
   \   000084   600D         JZ      ??zdpProcessAddrReq_3
    646              {
    647                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000086   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F5..         MOV     ?V0,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F5..         MOV     ?V1,A
   \   000090   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    648              }
    649              // Handle response for sleeping end devices
    650              else if ( (ZSTACK_ROUTER_BUILD)
    651                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    652                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_3:
   \   000093                ; Setup parameters for call to function AssocGetWithExt
   \   000093   AA..         MOV     R2,?V2
   \   000095   AB..         MOV     R3,?V3
   \   000097   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   00009A   8A..         MOV     ?V8,R2
   \   00009C   8B..         MOV     ?V9,R3
   \   00009E   A8..         MOV     R0,?V8
   \   0000A0   A9..         MOV     R1,?V9
   \   0000A2   88..         MOV     ?V12,R0
   \   0000A4   89..         MOV     ?V13,R1
   \   0000A6   E8           MOV     A,R0
   \   0000A7   49           ORL     A,R1
   \   0000A8   7003         JNZ     $+5
   \   0000AA   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
   \   0000AD   85..82       MOV     DPL,?V12
   \   0000B0   85..83       MOV     DPH,?V13
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   6401         XRL     A,#0x1
   \   0000BA   6003         JZ      $+5
   \   0000BC   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    653              {
    654                aoi = pAssoc->shortAddr;
   \   0000BF   85..82       MOV     DPL,?V12
   \   0000C2   85..83       MOV     DPH,?V13
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F5..         MOV     ?V0,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F5..         MOV     ?V1,A
    655                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \   0000CC   E5..         MOV     A,?V6
   \   0000CE   7003         JNZ     $+5
   \   0000D0   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    656                  reqType = 0xFF; // Force Invalid
   \   0000D3   75..FF       MOV     ?V6,#-0x1
   \   0000D6   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    657              }
    658            }
    659            else  // if ( inMsg->clusterID == IEEE_addr_req )
    660            {
    661              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   0000D9   E5..         MOV     A,?V4
   \   0000DB   2413         ADD     A,#0x13
   \   0000DD   F582         MOV     DPL,A
   \   0000DF   E4           CLR     A
   \   0000E0   35..         ADDC    A,?V5
   \   0000E2   F583         MOV     DPH,A
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F8           MOV     R0,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   F583         MOV     DPH,A
   \   0000EA   8882         MOV     DPL,R0
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   FA           MOV     R2,A
   \   0000EE   7B00         MOV     R3,#0x0
   \   0000F0   E5..         MOV     A,?V4
   \   0000F2   2413         ADD     A,#0x13
   \   0000F4   F582         MOV     DPL,A
   \   0000F6   E4           CLR     A
   \   0000F7   35..         ADDC    A,?V5
   \   0000F9   F583         MOV     DPH,A
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F8           MOV     R0,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F583         MOV     DPH,A
   \   000101   8882         MOV     DPL,R0
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   F8           MOV     R0,A
   \   000106   7900         MOV     R1,#0x0
   \   000108   E4           CLR     A
   \   000109   C8           XCH     A,R0
   \   00010A   F9           MOV     R1,A
   \   00010B   EA           MOV     A,R2
   \   00010C   28           ADD     A,R0
   \   00010D   F8           MOV     R0,A
   \   00010E   EB           MOV     A,R3
   \   00010F   39           ADDC    A,R1
   \   000110   F9           MOV     R1,A
   \   000111   88..         MOV     ?V0,R0
   \   000113   89..         MOV     ?V1,R1
    662          
    663              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000115   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000118   E0           MOVX    A,@DPTR
   \   000119   65..         XRL     A,?V0
   \   00011B   7004         JNZ     ??zdpProcessAddrReq_5
   \   00011D   A3           INC     DPTR
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_5:
   \   000121   7008         JNZ     ??zdpProcessAddrReq_6
    664              {
    665                ieee = saveExtAddr;
   \   000123   75....       MOV     ?V2,#saveExtAddr & 0xff
   \   000126   75....       MOV     ?V3,#(saveExtAddr >> 8) & 0xff
   \   000129   8062         SJMP    ??zdpProcessAddrReq_4
    666              }
    667              else if ( (ZSTACK_ROUTER_BUILD)
    668                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    669                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_6:
   \   00012B                ; Setup parameters for call to function AssocGetWithShort
   \   00012B   AA..         MOV     R2,?V0
   \   00012D   AB..         MOV     R3,?V1
   \   00012F   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000132   8A..         MOV     ?V8,R2
   \   000134   8B..         MOV     ?V9,R3
   \   000136   A8..         MOV     R0,?V8
   \   000138   A9..         MOV     R1,?V9
   \   00013A   88..         MOV     ?V12,R0
   \   00013C   89..         MOV     ?V13,R1
   \   00013E   E8           MOV     A,R0
   \   00013F   49           ORL     A,R1
   \   000140   604B         JZ      ??zdpProcessAddrReq_4
   \   000142   85..82       MOV     DPL,?V12
   \   000145   85..83       MOV     DPH,?V13
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   6401         XRL     A,#0x1
   \   00014F   703C         JNZ     ??zdpProcessAddrReq_4
    670              {
    671                AddrMgrEntry_t addrEntry;
    672                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000151   7401         MOV     A,#0x1
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   7400         MOV     A,#0x0
   \   000158   F0           MOVX    @DPTR,A
    673                addrEntry.index = pAssoc->addrIdx;
   \   000159   85..82       MOV     DPL,?V12
   \   00015C   85..83       MOV     DPH,?V13
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \   000162   F8           MOV     R0,A
   \   000163   A3           INC     DPTR
   \   000164   E0           MOVX    A,@DPTR
   \   000165   F9           MOV     R1,A
   \   000166   740C         MOV     A,#0xc
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   E8           MOV     A,R0
   \   00016C   F0           MOVX    @DPTR,A
   \   00016D   A3           INC     DPTR
   \   00016E   E9           MOV     A,R1
   \   00016F   F0           MOVX    @DPTR,A
    674                if ( AddrMgrEntryGet( &addrEntry ) )
   \   000170                ; Setup parameters for call to function AddrMgrEntryGet
   \   000170   7401         MOV     A,#0x1
   \   000172   12....       LCALL   ?XSTACK_DISP101_8
   \   000175   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000178   E9           MOV     A,R1
   \   000179   600B         JZ      ??zdpProcessAddrReq_7
    675                {
    676                  ieee = addrEntry.extAddr;
   \   00017B   7404         MOV     A,#0x4
   \   00017D   12....       LCALL   ?XSTACK_DISP0_8
   \   000180   8582..       MOV     ?V2,DPL
   \   000183   8583..       MOV     ?V3,DPH
    677                }
    678          
    679                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_7:
   \   000186   E5..         MOV     A,?V6
   \   000188   6003         JZ      ??zdpProcessAddrReq_4
    680                  reqType = 0xFF; // Force Invalid
   \   00018A   75..FF       MOV     ?V6,#-0x1
    681              }
    682            }
    683          
    684            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   00018D   74FE         MOV     A,#-0x2
   \   00018F   65..         XRL     A,?V0
   \   000191   7004         JNZ     ??zdpProcessAddrReq_8
   \   000193   74FF         MOV     A,#-0x1
   \   000195   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_8:
   \   000197   6006         JZ      ??zdpProcessAddrReq_9
   \   000199   E5..         MOV     A,?V2
   \   00019B   45..         ORL     A,?V3
   \   00019D   7011         JNZ     ??zdpProcessAddrReq_10
   \                     ??zdpProcessAddrReq_9:
   \   00019F   E5..         MOV     A,?V4
   \   0001A1   240B         ADD     A,#0xb
   \   0001A3   F582         MOV     DPL,A
   \   0001A5   E4           CLR     A
   \   0001A6   35..         ADDC    A,?V5
   \   0001A8   F583         MOV     DPH,A
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   6003         JZ      $+5
   \   0001AD   02....       LJMP    ??zdpProcessAddrReq_11 & 0xFFFF
    685            {
    686              uint8 stat;
    687              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_10:
   \   0001B0   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   FE           MOV     R6,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   FF           MOV     R7,A
    688              // Status + IEEE-Addr + Nwk-Addr.
    689              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \   0001B8   75..0B       MOV     ?V7,#0xb
    690          
    691              // If aoi and iee are both setup, we found results
    692              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   0001BB   74FE         MOV     A,#-0x2
   \   0001BD   65..         XRL     A,?V0
   \   0001BF   7004         JNZ     ??zdpProcessAddrReq_12
   \   0001C1   74FF         MOV     A,#-0x1
   \   0001C3   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_12:
   \   0001C5   601A         JZ      ??zdpProcessAddrReq_13
   \   0001C7   E5..         MOV     A,?V2
   \   0001C9   45..         ORL     A,?V3
   \   0001CB   6014         JZ      ??zdpProcessAddrReq_13
    693              {
    694                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    695                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   0001CD   E5..         MOV     A,?V6
   \   0001CF   6006         JZ      ??zdpProcessAddrReq_14
   \   0001D1   7401         MOV     A,#0x1
   \   0001D3   65..         XRL     A,?V6
   \   0001D5   7005         JNZ     ??zdpProcessAddrReq_15
   \                     ??zdpProcessAddrReq_14:
   \   0001D7   75..00       MOV     ?V8,#0x0
   \   0001DA   802E         SJMP    ??zdpProcessAddrReq_16
   \                     ??zdpProcessAddrReq_15:
   \   0001DC   75..80       MOV     ?V8,#-0x80
   \   0001DF   8029         SJMP    ??zdpProcessAddrReq_16
    696              }
    697              else
    698              {
    699                // not found and the req was unicast to this device
    700                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_13:
   \   0001E1   75..81       MOV     ?V8,#-0x7f
    701          
    702                // Fill in the missing field with this device's address
    703                if ( inMsg->clusterID == NWK_addr_req )
   \   0001E4   E5..         MOV     A,?V4
   \   0001E6   240C         ADD     A,#0xc
   \   0001E8   F582         MOV     DPL,A
   \   0001EA   E4           CLR     A
   \   0001EB   35..         ADDC    A,?V5
   \   0001ED   F583         MOV     DPH,A
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   F8           MOV     R0,A
   \   0001F1   A3           INC     DPTR
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   F9           MOV     R1,A
   \   0001F4   E8           MOV     A,R0
   \   0001F5   49           ORL     A,R1
   \   0001F6   700C         JNZ     ??zdpProcessAddrReq_17
    704                {
    705                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   0001F8   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0001FB   E0           MOVX    A,@DPTR
   \   0001FC   F5..         MOV     ?V0,A
   \   0001FE   A3           INC     DPTR
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   F5..         MOV     ?V1,A
   \   000202   8006         SJMP    ??zdpProcessAddrReq_16
    706                }
    707                else
    708                {
    709                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_17:
   \   000204   75....       MOV     ?V2,#saveExtAddr & 0xff
   \   000207   75....       MOV     ?V3,#(saveExtAddr >> 8) & 0xff
    710                }
    711              }
    712          
    713              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_16:
   \   00020A   E5..         MOV     A,?V8
   \   00020C   C0E0         PUSH    A
   \   00020E   8E82         MOV     DPL,R6
   \   000210   8F83         MOV     DPH,R7
   \   000212   D0E0         POP     A
   \   000214   F0           MOVX    @DPTR,A
   \   000215   8E82         MOV     DPL,R6
   \   000217   8F83         MOV     DPH,R7
   \   000219   A3           INC     DPTR
   \   00021A   AE82         MOV     R6,DPL
   \   00021C   AF83         MOV     R7,DPH
    714          
    715              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   00021E                ; Setup parameters for call to function sAddrExtCpy
   \   00021E   AC..         MOV     R4,?V2
   \   000220   AD..         MOV     R5,?V3
   \   000222   EE           MOV     A,R6
   \   000223   FA           MOV     R2,A
   \   000224   EF           MOV     A,R7
   \   000225   FB           MOV     R3,A
   \   000226   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000229   8A..         MOV     ?V10,R2
   \   00022B   8B..         MOV     ?V11,R3
   \   00022D   AE..         MOV     R6,?V10
   \   00022F   AF..         MOV     R7,?V11
    716          
    717              *pBuf++ = LO_UINT16( aoi );
   \   000231   E5..         MOV     A,?V0
   \   000233   C0E0         PUSH    A
   \   000235   8E82         MOV     DPL,R6
   \   000237   8F83         MOV     DPH,R7
   \   000239   D0E0         POP     A
   \   00023B   F0           MOVX    @DPTR,A
   \   00023C   8E82         MOV     DPL,R6
   \   00023E   8F83         MOV     DPH,R7
   \   000240   A3           INC     DPTR
   \   000241   AE82         MOV     R6,DPL
   \   000243   AF83         MOV     R7,DPH
    718              *pBuf++ = HI_UINT16( aoi );
   \   000245   A8..         MOV     R0,?V0
   \   000247   A9..         MOV     R1,?V1
   \   000249   E4           CLR     A
   \   00024A   C9           XCH     A,R1
   \   00024B   F8           MOV     R0,A
   \   00024C   E8           MOV     A,R0
   \   00024D   C0E0         PUSH    A
   \   00024F   8E82         MOV     DPL,R6
   \   000251   8F83         MOV     DPH,R7
   \   000253   D0E0         POP     A
   \   000255   F0           MOVX    @DPTR,A
   \   000256   8E82         MOV     DPL,R6
   \   000258   8F83         MOV     DPH,R7
   \   00025A   A3           INC     DPTR
   \   00025B   AE82         MOV     R6,DPL
   \   00025D   AF83         MOV     R7,DPH
    719          
    720              if ( ZSTACK_ROUTER_BUILD )
    721              {
    722                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    723                     && (stat == ZDP_SUCCESS) )
   \   00025F   7401         MOV     A,#0x1
   \   000261   65..         XRL     A,?V6
   \   000263   6003         JZ      $+5
   \   000265   02....       LJMP    ??zdpProcessAddrReq_18 & 0xFFFF
   \   000268   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00026B   E0           MOVX    A,@DPTR
   \   00026C   65..         XRL     A,?V0
   \   00026E   7004         JNZ     ??zdpProcessAddrReq_19
   \   000270   A3           INC     DPTR
   \   000271   E0           MOVX    A,@DPTR
   \   000272   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_19:
   \   000274   6003         JZ      $+5
   \   000276   02....       LJMP    ??zdpProcessAddrReq_18 & 0xFFFF
   \   000279   E5..         MOV     A,?V8
   \   00027B   6003         JZ      $+5
   \   00027D   02....       LJMP    ??zdpProcessAddrReq_18 & 0xFFFF
    724                {
    725                  uint8  cnt = 0;
   \   000280   85..82       MOV     DPL,?XSP + 0
   \   000283   85..83       MOV     DPH,?XSP + 1
   \   000286   7400         MOV     A,#0x0
   \   000288   F0           MOVX    @DPTR,A
    726                  uint16 *list = AssocMakeList( &cnt );
   \   000289                ; Setup parameters for call to function AssocMakeList
   \   000289   AA..         MOV     R2,?XSP + 0
   \   00028B   AB..         MOV     R3,?XSP + 1
   \   00028D   12....       LCALL   `??AssocMakeList::?relay`; Banked call to: AssocMakeList
   \   000290   8A..         MOV     ?V10,R2
   \   000292   8B..         MOV     ?V11,R3
   \   000294   85....       MOV     ?V14,?V10
   \   000297   85....       MOV     ?V15,?V11
    727          
    728                  if ( list != NULL )
   \   00029A   E5..         MOV     A,?V14
   \   00029C   45..         ORL     A,?V15
   \   00029E   7003         JNZ     $+5
   \   0002A0   02....       LJMP    ??zdpProcessAddrReq_20 & 0xFFFF
    729                  {
    730                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   0002A3   E5..         MOV     A,?V4
   \   0002A5   240C         ADD     A,#0xc
   \   0002A7   F582         MOV     DPL,A
   \   0002A9   E4           CLR     A
   \   0002AA   35..         ADDC    A,?V5
   \   0002AC   F583         MOV     DPH,A
   \   0002AE   E0           MOVX    A,@DPTR
   \   0002AF   F8           MOV     R0,A
   \   0002B0   A3           INC     DPTR
   \   0002B1   E0           MOVX    A,@DPTR
   \   0002B2   F9           MOV     R1,A
   \   0002B3   E8           MOV     A,R0
   \   0002B4   49           ORL     A,R1
   \   0002B5   7006         JNZ     ??zdpProcessAddrReq_21
   \   0002B7   7808         MOV     R0,#0x8
   \   0002B9   7900         MOV     R1,#0x0
   \   0002BB   8004         SJMP    ??zdpProcessAddrReq_22
   \                     ??zdpProcessAddrReq_21:
   \   0002BD   7802         MOV     R0,#0x2
   \   0002BF   7900         MOV     R1,#0x0
   \                     ??zdpProcessAddrReq_22:
   \   0002C1   E5..         MOV     A,?V4
   \   0002C3   2413         ADD     A,#0x13
   \   0002C5   F582         MOV     DPL,A
   \   0002C7   E4           CLR     A
   \   0002C8   35..         ADDC    A,?V5
   \   0002CA   F583         MOV     DPH,A
   \   0002CC   E0           MOVX    A,@DPTR
   \   0002CD   28           ADD     A,R0
   \   0002CE   FA           MOV     R2,A
   \   0002CF   A3           INC     DPTR
   \   0002D0   E0           MOVX    A,@DPTR
   \   0002D1   39           ADDC    A,R1
   \   0002D2   8A82         MOV     DPL,R2
   \   0002D4   F583         MOV     DPH,A
   \   0002D6   A3           INC     DPTR
   \   0002D7   E0           MOVX    A,@DPTR
   \   0002D8   F5..         MOV     ?V9,A
    731                    uint16 *pList = list + idx;
   \   0002DA   A8..         MOV     R0,?V9
   \   0002DC   7900         MOV     R1,#0x0
   \   0002DE   E8           MOV     A,R0
   \   0002DF   75F002       MOV     B,#0x2
   \   0002E2   A4           MUL     AB
   \   0002E3   C8           XCH     A,R0
   \   0002E4   AAF0         MOV     R2,B
   \   0002E6   75F000       MOV     B,#0x0
   \   0002E9   A4           MUL     AB
   \   0002EA   2A           ADD     A,R2
   \   0002EB   FA           MOV     R2,A
   \   0002EC   75F002       MOV     B,#0x2
   \   0002EF   E9           MOV     A,R1
   \   0002F0   A4           MUL     AB
   \   0002F1   2A           ADD     A,R2
   \   0002F2   F9           MOV     R1,A
   \   0002F3   E5..         MOV     A,?V14
   \   0002F5   28           ADD     A,R0
   \   0002F6   F5..         MOV     ?V10,A
   \   0002F8   E5..         MOV     A,?V15
   \   0002FA   39           ADDC    A,R1
   \   0002FB   F5..         MOV     ?V11,A
    732          
    733                    // NumAssocDev field is only present on success.
    734                    if ( cnt > idx )
   \   0002FD   85..82       MOV     DPL,?XSP + 0
   \   000300   85..83       MOV     DPH,?XSP + 1
   \   000303   E0           MOVX    A,@DPTR
   \   000304   F8           MOV     R0,A
   \   000305   E5..         MOV     A,?V9
   \   000307   C3           CLR     C
   \   000308   98           SUBB    A,R0
   \   000309   501D         JNC     ??zdpProcessAddrReq_23
    735                    {
    736                      cnt -= idx;
   \   00030B   A8..         MOV     R0,?V9
   \   00030D   85..82       MOV     DPL,?XSP + 0
   \   000310   85..83       MOV     DPH,?XSP + 1
   \   000313   E0           MOVX    A,@DPTR
   \   000314   C3           CLR     C
   \   000315   98           SUBB    A,R0
   \   000316   F0           MOVX    @DPTR,A
    737                      len += (cnt * sizeof( uint16 ));
   \   000317   75F002       MOV     B,#0x2
   \   00031A   85..82       MOV     DPL,?XSP + 0
   \   00031D   85..83       MOV     DPH,?XSP + 1
   \   000320   E0           MOVX    A,@DPTR
   \   000321   A4           MUL     AB
   \   000322   25..         ADD     A,?V7
   \   000324   F5..         MOV     ?V7,A
   \   000326   8009         SJMP    ??zdpProcessAddrReq_24
    738                    }
    739                    else
    740                    {
    741                      cnt = 0;
   \                     ??zdpProcessAddrReq_23:
   \   000328   85..82       MOV     DPL,?XSP + 0
   \   00032B   85..83       MOV     DPH,?XSP + 1
   \   00032E   7400         MOV     A,#0x0
   \   000330   F0           MOVX    @DPTR,A
    742                    }
    743                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_24:
   \   000331   85..82       MOV     DPL,?XSP + 0
   \   000334   85..83       MOV     DPH,?XSP + 1
   \   000337   E0           MOVX    A,@DPTR
   \   000338   C0E0         PUSH    A
   \   00033A   8E82         MOV     DPL,R6
   \   00033C   8F83         MOV     DPH,R7
   \   00033E   D0E0         POP     A
   \   000340   F0           MOVX    @DPTR,A
   \   000341   8E82         MOV     DPL,R6
   \   000343   8F83         MOV     DPH,R7
   \   000345   A3           INC     DPTR
   \   000346   AE82         MOV     R6,DPL
   \   000348   AF83         MOV     R7,DPH
    744                    len++;
   \   00034A   05..         INC     ?V7
    745          
    746                    // StartIndex field is only present if NumAssocDev field is non-zero.
    747                    *pBuf++ = idx;
   \   00034C   E5..         MOV     A,?V9
   \   00034E   C0E0         PUSH    A
   \   000350   8E82         MOV     DPL,R6
   \   000352   8F83         MOV     DPH,R7
   \   000354   D0E0         POP     A
   \   000356   F0           MOVX    @DPTR,A
   \   000357   8E82         MOV     DPL,R6
   \   000359   8F83         MOV     DPH,R7
   \   00035B   A3           INC     DPTR
   \   00035C   AE82         MOV     R6,DPL
   \   00035E   AF83         MOV     R7,DPH
    748                    len++;
   \   000360   05..         INC     ?V7
    749          
    750                    while ( cnt != 0 )
   \                     ??zdpProcessAddrReq_25:
   \   000362   85..82       MOV     DPL,?XSP + 0
   \   000365   85..83       MOV     DPH,?XSP + 1
   \   000368   E0           MOVX    A,@DPTR
   \   000369   6055         JZ      ??zdpProcessAddrReq_26
    751                    {
    752                      *pBuf++ = LO_UINT16( *pList );
   \   00036B   85..82       MOV     DPL,?V10
   \   00036E   85..83       MOV     DPH,?V11
   \   000371   E0           MOVX    A,@DPTR
   \   000372   F8           MOV     R0,A
   \   000373   A3           INC     DPTR
   \   000374   E0           MOVX    A,@DPTR
   \   000375   F9           MOV     R1,A
   \   000376   E8           MOV     A,R0
   \   000377   C0E0         PUSH    A
   \   000379   8E82         MOV     DPL,R6
   \   00037B   8F83         MOV     DPH,R7
   \   00037D   D0E0         POP     A
   \   00037F   F0           MOVX    @DPTR,A
   \   000380   8E82         MOV     DPL,R6
   \   000382   8F83         MOV     DPH,R7
   \   000384   A3           INC     DPTR
   \   000385   AE82         MOV     R6,DPL
   \   000387   AF83         MOV     R7,DPH
    753                      *pBuf++ = HI_UINT16( *pList );
   \   000389   85..82       MOV     DPL,?V10
   \   00038C   85..83       MOV     DPH,?V11
   \   00038F   E0           MOVX    A,@DPTR
   \   000390   F8           MOV     R0,A
   \   000391   A3           INC     DPTR
   \   000392   E0           MOVX    A,@DPTR
   \   000393   F9           MOV     R1,A
   \   000394   E4           CLR     A
   \   000395   C9           XCH     A,R1
   \   000396   F8           MOV     R0,A
   \   000397   E8           MOV     A,R0
   \   000398   C0E0         PUSH    A
   \   00039A   8E82         MOV     DPL,R6
   \   00039C   8F83         MOV     DPH,R7
   \   00039E   D0E0         POP     A
   \   0003A0   F0           MOVX    @DPTR,A
   \   0003A1   8E82         MOV     DPL,R6
   \   0003A3   8F83         MOV     DPH,R7
   \   0003A5   A3           INC     DPTR
   \   0003A6   AE82         MOV     R6,DPL
   \   0003A8   AF83         MOV     R7,DPH
    754                      pList++;
   \   0003AA   E5..         MOV     A,?V10
   \   0003AC   2402         ADD     A,#0x2
   \   0003AE   F5..         MOV     ?V10,A
   \   0003B0   5002         JNC     ??zdpProcessAddrReq_27
   \   0003B2   05..         INC     ?V11
    755                      cnt--;
   \                     ??zdpProcessAddrReq_27:
   \   0003B4   85..82       MOV     DPL,?XSP + 0
   \   0003B7   85..83       MOV     DPH,?XSP + 1
   \   0003BA   E0           MOVX    A,@DPTR
   \   0003BB   24FF         ADD     A,#-0x1
   \   0003BD   F0           MOVX    @DPTR,A
   \   0003BE   80A2         SJMP    ??zdpProcessAddrReq_25
    756                    }
    757          
    758                    osal_mem_free( (uint8 *)list );
   \                     ??zdpProcessAddrReq_26:
   \   0003C0                ; Setup parameters for call to function osal_mem_free
   \   0003C0   AA..         MOV     R2,?V14
   \   0003C2   AB..         MOV     R3,?V15
   \   0003C4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0003C7   8012         SJMP    ??zdpProcessAddrReq_18
    759                  }
    760                  else
    761                  {
    762                    // NumAssocDev field is only present on success.
    763                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_20:
   \   0003C9   8E82         MOV     DPL,R6
   \   0003CB   8F83         MOV     DPH,R7
   \   0003CD   7400         MOV     A,#0x0
   \   0003CF   F0           MOVX    @DPTR,A
   \   0003D0   8E82         MOV     DPL,R6
   \   0003D2   8F83         MOV     DPH,R7
   \   0003D4   A3           INC     DPTR
   \   0003D5   AE82         MOV     R6,DPL
   \   0003D7   AF83         MOV     R7,DPH
    764                    len++;
   \   0003D9   05..         INC     ?V7
    765                  }
    766                }
    767              }
    768          
    769              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_18:
   \   0003DB   90....       MOV     DPTR,#ZDP_TxOptions
   \   0003DE   7410         MOV     A,#0x10
   \   0003E0   F0           MOVX    @DPTR,A
    770              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0003E1                ; Setup parameters for call to function fillAndSend
   \   0003E1   E5..         MOV     A,?V4
   \   0003E3   240C         ADD     A,#0xc
   \   0003E5   F582         MOV     DPL,A
   \   0003E7   E4           CLR     A
   \   0003E8   35..         ADDC    A,?V5
   \   0003EA   F583         MOV     DPH,A
   \   0003EC   E0           MOVX    A,@DPTR
   \   0003ED   4400         ORL     A,#0x0
   \   0003EF   F5..         MOV     ?V10,A
   \   0003F1   A3           INC     DPTR
   \   0003F2   E0           MOVX    A,@DPTR
   \   0003F3   4480         ORL     A,#0x80
   \   0003F5   F5..         MOV     ?V11,A
   \   0003F7   78..         MOV     R0,#?V10
   \   0003F9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003FC   A9..         MOV     R1,?V7
   \   0003FE   E5..         MOV     A,?V4
   \   000400   2402         ADD     A,#0x2
   \   000402   FC           MOV     R4,A
   \   000403   E4           CLR     A
   \   000404   35..         ADDC    A,?V5
   \   000406   FD           MOV     R5,A
   \   000407   E5..         MOV     A,?V4
   \   000409   240F         ADD     A,#0xf
   \   00040B   FA           MOV     R2,A
   \   00040C   E4           CLR     A
   \   00040D   35..         ADDC    A,?V5
   \   00040F   FB           MOV     R3,A
   \   000410   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000413   7402         MOV     A,#0x2
   \   000415   12....       LCALL   ?DEALLOC_XSTACK8
   \   000418   E9           MOV     A,R1
    771              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000419   90....       MOV     DPTR,#ZDP_TxOptions
   \   00041C   7400         MOV     A,#0x0
   \   00041E   F0           MOVX    @DPTR,A
    772            }
    773          }
   \                     ??zdpProcessAddrReq_11:
   \   00041F   740E         MOV     A,#0xe
   \   000421   12....       LCALL   ?DEALLOC_XSTACK8
   \   000424   7F10         MOV     R7,#0x10
   \   000426   02....       LJMP    ?BANKED_LEAVE_XDATA
    774          
    775          /*********************************************************************
    776           * @fn          ZDP_NodeDescMsg
    777           *
    778           * @brief       Builds and sends a Node Descriptor message, unicast to the
    779           *              specified device.
    780           *
    781           * @param       inMsg - incoming message
    782           * @param       nwkAddr - 16 bit network address for device
    783           * @param       pNodeDesc - pointer to the node descriptor
    784           *
    785           * @return      afStatus_t
    786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    787          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    788                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V1,A
    790            uint8 *pBuf = ZDP_TmpBuf;
   \   000019   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FE           MOV     R6,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FF           MOV     R7,A
    791            byte len;
    792          
    793            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
   \   000021   75..10       MOV     ?V6,#0x10
    794          
    795            *pBuf++ = ZDP_SUCCESS;
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   7400         MOV     A,#0x0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   A3           INC     DPTR
   \   000030   AE82         MOV     R6,DPL
   \   000032   AF83         MOV     R7,DPH
    796          
    797            *pBuf++ = LO_UINT16( nwkAddr );
   \   000034   E5..         MOV     A,?V2
   \   000036   C0E0         PUSH    A
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   AE82         MOV     R6,DPL
   \   000046   AF83         MOV     R7,DPH
    798            *pBuf++ = HI_UINT16( nwkAddr );
   \   000048   A8..         MOV     R0,?V2
   \   00004A   A9..         MOV     R1,?V3
   \   00004C   E4           CLR     A
   \   00004D   C9           XCH     A,R1
   \   00004E   F8           MOV     R0,A
   \   00004F   E8           MOV     A,R0
   \   000050   C0E0         PUSH    A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   D0E0         POP     A
   \   000058   F0           MOVX    @DPTR,A
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   AE82         MOV     R6,DPL
   \   000060   AF83         MOV     R7,DPH
    799          
    800            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    801                               (pNodeDesc->UserDescAvail << 4) |
    802                               (pNodeDesc->LogicalType & 0x07));
   \   000062   85..82       MOV     DPL,?V0
   \   000065   85..83       MOV     DPH,?V1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   5407         ANL     A,#0x7
   \   00006B   F9           MOV     R1,A
   \   00006C   85..82       MOV     DPL,?V0
   \   00006F   85..83       MOV     DPH,?V1
   \   000072   E0           MOVX    A,@DPTR
   \   000073   A2E4         MOV     C,0xE0 /* A   */.4
   \   000075   E4           CLR     A
   \   000076   33           RLC     A
   \   000077   C4           SWAP    A
   \   000078   54F0         ANL     A,#0xf0
   \   00007A   F8           MOV     R0,A
   \   00007B   85..82       MOV     DPL,?V0
   \   00007E   85..83       MOV     DPH,?V1
   \   000081   E0           MOVX    A,@DPTR
   \   000082   A2E3         MOV     C,0xE0 /* A   */.3
   \   000084   E4           CLR     A
   \   000085   33           RLC     A
   \   000086   33           RLC     A
   \   000087   33           RLC     A
   \   000088   33           RLC     A
   \   000089   54F8         ANL     A,#0xf8
   \   00008B   48           ORL     A,R0
   \   00008C   49           ORL     A,R1
   \   00008D   C0E0         PUSH    A
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   D0E0         POP     A
   \   000095   F0           MOVX    @DPTR,A
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   A3           INC     DPTR
   \   00009B   AE82         MOV     R6,DPL
   \   00009D   AF83         MOV     R7,DPH
    803          
    804            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \   00009F   85..82       MOV     DPL,?V0
   \   0000A2   85..83       MOV     DPH,?V1
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   5407         ANL     A,#0x7
   \   0000A9   F8           MOV     R0,A
   \   0000AA   85..82       MOV     DPL,?V0
   \   0000AD   85..83       MOV     DPH,?V1
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   13           RRC     A
   \   0000B3   13           RRC     A
   \   0000B4   13           RRC     A
   \   0000B5   541F         ANL     A,#0x1f
   \   0000B7   33           RLC     A
   \   0000B8   33           RLC     A
   \   0000B9   33           RLC     A
   \   0000BA   54F8         ANL     A,#0xf8
   \   0000BC   48           ORL     A,R0
   \   0000BD   C0E0         PUSH    A
   \   0000BF   8E82         MOV     DPL,R6
   \   0000C1   8F83         MOV     DPH,R7
   \   0000C3   D0E0         POP     A
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   8E82         MOV     DPL,R6
   \   0000C8   8F83         MOV     DPH,R7
   \   0000CA   A3           INC     DPTR
   \   0000CB   AE82         MOV     R6,DPL
   \   0000CD   AF83         MOV     R7,DPH
    805            *pBuf++ = pNodeDesc->CapabilityFlags;
   \   0000CF   85..82       MOV     DPL,?V0
   \   0000D2   85..83       MOV     DPH,?V1
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   C0E0         PUSH    A
   \   0000DA   8E82         MOV     DPL,R6
   \   0000DC   8F83         MOV     DPH,R7
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   8E82         MOV     DPL,R6
   \   0000E3   8F83         MOV     DPH,R7
   \   0000E5   A3           INC     DPTR
   \   0000E6   AE82         MOV     R6,DPL
   \   0000E8   AF83         MOV     R7,DPH
    806            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \   0000EA   85..82       MOV     DPL,?V0
   \   0000ED   85..83       MOV     DPH,?V1
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   C0E0         PUSH    A
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   D0E0         POP     A
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   8E82         MOV     DPL,R6
   \   0000FF   8F83         MOV     DPH,R7
   \   000101   A3           INC     DPTR
   \   000102   AE82         MOV     R6,DPL
   \   000104   AF83         MOV     R7,DPH
    807            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \   000106   85..82       MOV     DPL,?V0
   \   000109   85..83       MOV     DPH,?V1
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   C0E0         PUSH    A
   \   000113   8E82         MOV     DPL,R6
   \   000115   8F83         MOV     DPH,R7
   \   000117   D0E0         POP     A
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   8E82         MOV     DPL,R6
   \   00011C   8F83         MOV     DPH,R7
   \   00011E   A3           INC     DPTR
   \   00011F   AE82         MOV     R6,DPL
   \   000121   AF83         MOV     R7,DPH
    808            *pBuf++ = pNodeDesc->MaxBufferSize;
   \   000123   85..82       MOV     DPL,?V0
   \   000126   85..83       MOV     DPH,?V1
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   C0E0         PUSH    A
   \   000131   8E82         MOV     DPL,R6
   \   000133   8F83         MOV     DPH,R7
   \   000135   D0E0         POP     A
   \   000137   F0           MOVX    @DPTR,A
   \   000138   8E82         MOV     DPL,R6
   \   00013A   8F83         MOV     DPH,R7
   \   00013C   A3           INC     DPTR
   \   00013D   AE82         MOV     R6,DPL
   \   00013F   AF83         MOV     R7,DPH
    809            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \   000141   85..82       MOV     DPL,?V0
   \   000144   85..83       MOV     DPH,?V1
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   C0E0         PUSH    A
   \   000150   8E82         MOV     DPL,R6
   \   000152   8F83         MOV     DPH,R7
   \   000154   D0E0         POP     A
   \   000156   F0           MOVX    @DPTR,A
   \   000157   8E82         MOV     DPL,R6
   \   000159   8F83         MOV     DPH,R7
   \   00015B   A3           INC     DPTR
   \   00015C   AE82         MOV     R6,DPL
   \   00015E   AF83         MOV     R7,DPH
    810            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \   000160   85..82       MOV     DPL,?V0
   \   000163   85..83       MOV     DPH,?V1
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   C0E0         PUSH    A
   \   000170   8E82         MOV     DPL,R6
   \   000172   8F83         MOV     DPH,R7
   \   000174   D0E0         POP     A
   \   000176   F0           MOVX    @DPTR,A
   \   000177   8E82         MOV     DPL,R6
   \   000179   8F83         MOV     DPH,R7
   \   00017B   A3           INC     DPTR
   \   00017C   AE82         MOV     R6,DPL
   \   00017E   AF83         MOV     R7,DPH
    811          
    812            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   000180   85..82       MOV     DPL,?V0
   \   000183   85..83       MOV     DPH,?V1
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F8           MOV     R0,A
   \   000190   A3           INC     DPTR
   \   000191   E0           MOVX    A,@DPTR
   \   000192   F9           MOV     R1,A
   \   000193   E8           MOV     A,R0
   \   000194   C0E0         PUSH    A
   \   000196   8E82         MOV     DPL,R6
   \   000198   8F83         MOV     DPH,R7
   \   00019A   D0E0         POP     A
   \   00019C   F0           MOVX    @DPTR,A
   \   00019D   8E82         MOV     DPL,R6
   \   00019F   8F83         MOV     DPH,R7
   \   0001A1   A3           INC     DPTR
   \   0001A2   AE82         MOV     R6,DPL
   \   0001A4   AF83         MOV     R7,DPH
    813            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \   0001A6   85..82       MOV     DPL,?V0
   \   0001A9   85..83       MOV     DPH,?V1
   \   0001AC   A3           INC     DPTR
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   F8           MOV     R0,A
   \   0001B6   A3           INC     DPTR
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   F9           MOV     R1,A
   \   0001B9   E4           CLR     A
   \   0001BA   C9           XCH     A,R1
   \   0001BB   F8           MOV     R0,A
   \   0001BC   E8           MOV     A,R0
   \   0001BD   C0E0         PUSH    A
   \   0001BF   8E82         MOV     DPL,R6
   \   0001C1   8F83         MOV     DPH,R7
   \   0001C3   D0E0         POP     A
   \   0001C5   F0           MOVX    @DPTR,A
   \   0001C6   8E82         MOV     DPL,R6
   \   0001C8   8F83         MOV     DPH,R7
   \   0001CA   A3           INC     DPTR
   \   0001CB   AE82         MOV     R6,DPL
   \   0001CD   AF83         MOV     R7,DPH
    814            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \   0001CF   85..82       MOV     DPL,?V0
   \   0001D2   85..83       MOV     DPH,?V1
   \   0001D5   A3           INC     DPTR
   \   0001D6   A3           INC     DPTR
   \   0001D7   A3           INC     DPTR
   \   0001D8   A3           INC     DPTR
   \   0001D9   A3           INC     DPTR
   \   0001DA   A3           INC     DPTR
   \   0001DB   A3           INC     DPTR
   \   0001DC   A3           INC     DPTR
   \   0001DD   A3           INC     DPTR
   \   0001DE   A3           INC     DPTR
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   C0E0         PUSH    A
   \   0001E2   8E82         MOV     DPL,R6
   \   0001E4   8F83         MOV     DPH,R7
   \   0001E6   D0E0         POP     A
   \   0001E8   F0           MOVX    @DPTR,A
   \   0001E9   8E82         MOV     DPL,R6
   \   0001EB   8F83         MOV     DPH,R7
   \   0001ED   A3           INC     DPTR
   \   0001EE   AE82         MOV     R6,DPL
   \   0001F0   AF83         MOV     R7,DPH
    815            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   0001F2   E5..         MOV     A,?V0
   \   0001F4   240B         ADD     A,#0xb
   \   0001F6   F582         MOV     DPL,A
   \   0001F8   E4           CLR     A
   \   0001F9   35..         ADDC    A,?V1
   \   0001FB   F583         MOV     DPH,A
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   C0E0         PUSH    A
   \   000200   8E82         MOV     DPL,R6
   \   000202   8F83         MOV     DPH,R7
   \   000204   D0E0         POP     A
   \   000206   F0           MOVX    @DPTR,A
   \   000207   8E82         MOV     DPL,R6
   \   000209   8F83         MOV     DPH,R7
   \   00020B   A3           INC     DPTR
   \   00020C   AE82         MOV     R6,DPL
   \   00020E   AF83         MOV     R7,DPH
    816            *pBuf = pNodeDesc->DescriptorCapability;
   \   000210   E5..         MOV     A,?V0
   \   000212   240C         ADD     A,#0xc
   \   000214   F582         MOV     DPL,A
   \   000216   E4           CLR     A
   \   000217   35..         ADDC    A,?V1
   \   000219   F583         MOV     DPH,A
   \   00021B   E0           MOVX    A,@DPTR
   \   00021C   C0E0         PUSH    A
   \   00021E   8E82         MOV     DPL,R6
   \   000220   8F83         MOV     DPH,R7
   \   000222   D0E0         POP     A
   \   000224   F0           MOVX    @DPTR,A
    817          
    818            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   000225                ; Setup parameters for call to function fillAndSend
   \   000225   75..02       MOV     ?V8,#0x2
   \   000228   75..80       MOV     ?V9,#-0x80
   \   00022B   78..         MOV     R0,#?V8
   \   00022D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000230   A9..         MOV     R1,?V6
   \   000232   E5..         MOV     A,?V4
   \   000234   2402         ADD     A,#0x2
   \   000236   FC           MOV     R4,A
   \   000237   E4           CLR     A
   \   000238   35..         ADDC    A,?V5
   \   00023A   FD           MOV     R5,A
   \   00023B   E5..         MOV     A,?V4
   \   00023D   240F         ADD     A,#0xf
   \   00023F   FA           MOV     R2,A
   \   000240   E4           CLR     A
   \   000241   35..         ADDC    A,?V5
   \   000243   FB           MOV     R3,A
   \   000244   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000247   7402         MOV     A,#0x2
   \   000249   12....       LCALL   ?DEALLOC_XSTACK8
   \   00024C   7F0A         MOV     R7,#0xa
   \   00024E   02....       LJMP    ?BANKED_LEAVE_XDATA
    819          }
    820          
    821          /*********************************************************************
    822           * @fn          ZDP_PowerDescMsg
    823           *
    824           * @brief       Builds and sends a Power Descriptor message, unicast to the
    825           *              specified device.
    826           *
    827           * @param       inMsg - incoming message (request)
    828           * @param       nwkAddr - 16 bit network address for device
    829           * @param       pPowerDesc - pointer to the node descriptor
    830           *
    831           * @return      afStatus_t
    832           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    833          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    834                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    835          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V2,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V3,A
    836            uint8 *pBuf = ZDP_TmpBuf;
   \   000019   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FE           MOV     R6,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FF           MOV     R7,A
    837            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
   \   000021   75..05       MOV     ?V6,#0x5
    838          
    839            *pBuf++ = ZDP_SUCCESS;
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   7400         MOV     A,#0x0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   A3           INC     DPTR
   \   000030   AE82         MOV     R6,DPL
   \   000032   AF83         MOV     R7,DPH
    840          
    841            *pBuf++ = LO_UINT16( nwkAddr );
   \   000034   E5..         MOV     A,?V0
   \   000036   C0E0         PUSH    A
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   AE82         MOV     R6,DPL
   \   000046   AF83         MOV     R7,DPH
    842            *pBuf++ = HI_UINT16( nwkAddr );
   \   000048   A8..         MOV     R0,?V0
   \   00004A   A9..         MOV     R1,?V1
   \   00004C   E4           CLR     A
   \   00004D   C9           XCH     A,R1
   \   00004E   F8           MOV     R0,A
   \   00004F   E8           MOV     A,R0
   \   000050   C0E0         PUSH    A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   D0E0         POP     A
   \   000058   F0           MOVX    @DPTR,A
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   AE82         MOV     R6,DPL
   \   000060   AF83         MOV     R7,DPH
    843          
    844            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    845                              | (pPowerDesc->PowerMode & 0x0F));
   \   000062   85..82       MOV     DPL,?V2
   \   000065   85..83       MOV     DPH,?V3
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F8           MOV     R0,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   E8           MOV     A,R0
   \   00006E   540F         ANL     A,#0xf
   \   000070   FA           MOV     R2,A
   \   000071   85..82       MOV     DPL,?V2
   \   000074   85..83       MOV     DPH,?V3
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F8           MOV     R0,A
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   E8           MOV     A,R0
   \   00007D   C4           SWAP    A
   \   00007E   540F         ANL     A,#0xf
   \   000080   C4           SWAP    A
   \   000081   54F0         ANL     A,#0xf0
   \   000083   4A           ORL     A,R2
   \   000084   C0E0         PUSH    A
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   D0E0         POP     A
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   A3           INC     DPTR
   \   000092   AE82         MOV     R6,DPL
   \   000094   AF83         MOV     R7,DPH
    846            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    847                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \   000096   85..82       MOV     DPL,?V2
   \   000099   85..83       MOV     DPH,?V3
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F8           MOV     R0,A
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F9           MOV     R1,A
   \   0000A1   E4           CLR     A
   \   0000A2   C9           XCH     A,R1
   \   0000A3   F8           MOV     R0,A
   \   0000A4   E8           MOV     A,R0
   \   0000A5   540F         ANL     A,#0xf
   \   0000A7   F8           MOV     R0,A
   \   0000A8   E9           MOV     A,R1
   \   0000A9   5400         ANL     A,#0x0
   \   0000AB   F9           MOV     R1,A
   \   0000AC   E8           MOV     A,R0
   \   0000AD   F9           MOV     R1,A
   \   0000AE   85..82       MOV     DPL,?V2
   \   0000B1   85..83       MOV     DPH,?V3
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F5..         MOV     ?V8,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F5..         MOV     ?V9,A
   \   0000BB   740C         MOV     A,#0xc
   \   0000BD   78..         MOV     R0,#?V8
   \   0000BF   12....       LCALL   ?US_SHR
   \   0000C2   E5..         MOV     A,?V8
   \   0000C4   C4           SWAP    A
   \   0000C5   54F0         ANL     A,#0xf0
   \   0000C7   49           ORL     A,R1
   \   0000C8   C0E0         PUSH    A
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   D0E0         POP     A
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   A3           INC     DPTR
   \   0000D6   AE82         MOV     R6,DPL
   \   0000D8   AF83         MOV     R7,DPH
    848          
    849            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   0000DA                ; Setup parameters for call to function fillAndSend
   \   0000DA   75..03       MOV     ?V8,#0x3
   \   0000DD   75..80       MOV     ?V9,#-0x80
   \   0000E0   78..         MOV     R0,#?V8
   \   0000E2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E5   A9..         MOV     R1,?V6
   \   0000E7   E5..         MOV     A,?V4
   \   0000E9   2402         ADD     A,#0x2
   \   0000EB   FC           MOV     R4,A
   \   0000EC   E4           CLR     A
   \   0000ED   35..         ADDC    A,?V5
   \   0000EF   FD           MOV     R5,A
   \   0000F0   E5..         MOV     A,?V4
   \   0000F2   240F         ADD     A,#0xf
   \   0000F4   FA           MOV     R2,A
   \   0000F5   E4           CLR     A
   \   0000F6   35..         ADDC    A,?V5
   \   0000F8   FB           MOV     R3,A
   \   0000F9   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000FC   7402         MOV     A,#0x2
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000101   7F0A         MOV     R7,#0xa
   \   000103   02....       LJMP    ?BANKED_LEAVE_XDATA
    850          }
    851          
    852          /*********************************************************************
    853           * @fn          ZDP_SimpleDescMsg
    854           *
    855           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    856           *              specified device.
    857           *
    858           * @param       inMsg - incoming message (request)
    859           * @param       Status - message status (ZDP_SUCCESS or other)
    860           * @param       pSimpleDesc - pointer to the node descriptor
    861           *
    862           * @return      afStatus_t
    863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    865                                        SimpleDescriptionFormat_t *pSimpleDesc )
    866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   89..         MOV     ?V3,R1
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V1,R5
    867            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FF           MOV     R7,A
    868            uint8 i, len;
    869          
    870            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \   000017   E5..         MOV     A,?V3
   \   000019   703D         JNZ     ??ZDP_SimpleDescMsg_0
   \   00001B   E5..         MOV     A,?V0
   \   00001D   45..         ORL     A,?V1
   \   00001F   6037         JZ      ??ZDP_SimpleDescMsg_0
    871            {
    872              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    873              len = 1 + 2 + 1 + 8;
   \   000021   75..0C       MOV     ?V2,#0xc
    874              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000024   75F002       MOV     B,#0x2
   \   000027   85..82       MOV     DPL,?V0
   \   00002A   85..83       MOV     DPH,?V1
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FA           MOV     R2,A
   \   000035   7B00         MOV     R3,#0x0
   \   000037   85..82       MOV     DPL,?V0
   \   00003A   85..83       MOV     DPH,?V1
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   7900         MOV     R1,#0x0
   \   00004A   EA           MOV     A,R2
   \   00004B   28           ADD     A,R0
   \   00004C   F8           MOV     R0,A
   \   00004D   EB           MOV     A,R3
   \   00004E   39           ADDC    A,R1
   \   00004F   F9           MOV     R1,A
   \   000050   E8           MOV     A,R0
   \   000051   A4           MUL     AB
   \   000052   25..         ADD     A,?V2
   \   000054   F5..         MOV     ?V2,A
   \   000056   8003         SJMP    ??ZDP_SimpleDescMsg_1
    875            }
    876            else
    877            {
    878              len = 1 + 2 + 1; // Status + desc length
   \                     ??ZDP_SimpleDescMsg_0:
   \   000058   75..04       MOV     ?V2,#0x4
    879            }
    880            if ( len >= ZDP_BUF_SZ-1 )
   \                     ??ZDP_SimpleDescMsg_1:
   \   00005B   E5..         MOV     A,?V2
   \   00005D   C3           CLR     C
   \   00005E   944F         SUBB    A,#0x4f
   \   000060   4005         JC      ??ZDP_SimpleDescMsg_2
    881            {
    882              return afStatus_MEM_FAIL;
   \   000062   7910         MOV     R1,#0x10
   \   000064   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    883            }
    884          
    885            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_2:
   \   000067   E5..         MOV     A,?V3
   \   000069   C0E0         PUSH    A
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   D0E0         POP     A
   \   000071   F0           MOVX    @DPTR,A
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   AE82         MOV     R6,DPL
   \   000079   AF83         MOV     R7,DPH
    886          
    887            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   00007B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F8           MOV     R0,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   E8           MOV     A,R0
   \   000084   C0E0         PUSH    A
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   D0E0         POP     A
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   A3           INC     DPTR
   \   000092   AE82         MOV     R6,DPL
   \   000094   AF83         MOV     R7,DPH
    888            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000096   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F8           MOV     R0,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F9           MOV     R1,A
   \   00009E   E4           CLR     A
   \   00009F   C9           XCH     A,R1
   \   0000A0   F8           MOV     R0,A
   \   0000A1   E8           MOV     A,R0
   \   0000A2   C0E0         PUSH    A
   \   0000A4   8E82         MOV     DPL,R6
   \   0000A6   8F83         MOV     DPH,R7
   \   0000A8   D0E0         POP     A
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   A3           INC     DPTR
   \   0000B0   AE82         MOV     R6,DPL
   \   0000B2   AF83         MOV     R7,DPH
    889          
    890            if ( len > 4 )
   \   0000B4   E5..         MOV     A,?V2
   \   0000B6   C3           CLR     C
   \   0000B7   9405         SUBB    A,#0x5
   \   0000B9   5003         JNC     $+5
   \   0000BB   02....       LJMP    ??ZDP_SimpleDescMsg_4 & 0xFFFF
    891            {
    892              *pBuf++ = len - 4;   // Simple descriptor length
   \   0000BE   74FC         MOV     A,#-0x4
   \   0000C0   25..         ADD     A,?V2
   \   0000C2   C0E0         PUSH    A
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   D0E0         POP     A
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   8E82         MOV     DPL,R6
   \   0000CD   8F83         MOV     DPH,R7
   \   0000CF   A3           INC     DPTR
   \   0000D0   AE82         MOV     R6,DPL
   \   0000D2   AF83         MOV     R7,DPH
    893          
    894              *pBuf++ = pSimpleDesc->EndPoint;
   \   0000D4   85..82       MOV     DPL,?V0
   \   0000D7   85..83       MOV     DPH,?V1
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   C0E0         PUSH    A
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   D0E0         POP     A
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   8E82         MOV     DPL,R6
   \   0000E6   8F83         MOV     DPH,R7
   \   0000E8   A3           INC     DPTR
   \   0000E9   AE82         MOV     R6,DPL
   \   0000EB   AF83         MOV     R7,DPH
    895              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \   0000ED   85..82       MOV     DPL,?V0
   \   0000F0   85..83       MOV     DPH,?V1
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F8           MOV     R0,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F9           MOV     R1,A
   \   0000F9   E8           MOV     A,R0
   \   0000FA   C0E0         PUSH    A
   \   0000FC   8E82         MOV     DPL,R6
   \   0000FE   8F83         MOV     DPH,R7
   \   000100   D0E0         POP     A
   \   000102   F0           MOVX    @DPTR,A
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   A3           INC     DPTR
   \   000108   AE82         MOV     R6,DPL
   \   00010A   AF83         MOV     R7,DPH
    896              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \   00010C   85..82       MOV     DPL,?V0
   \   00010F   85..83       MOV     DPH,?V1
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   F8           MOV     R0,A
   \   000115   A3           INC     DPTR
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F9           MOV     R1,A
   \   000118   E4           CLR     A
   \   000119   C9           XCH     A,R1
   \   00011A   F8           MOV     R0,A
   \   00011B   E8           MOV     A,R0
   \   00011C   C0E0         PUSH    A
   \   00011E   8E82         MOV     DPL,R6
   \   000120   8F83         MOV     DPH,R7
   \   000122   D0E0         POP     A
   \   000124   F0           MOVX    @DPTR,A
   \   000125   8E82         MOV     DPL,R6
   \   000127   8F83         MOV     DPH,R7
   \   000129   A3           INC     DPTR
   \   00012A   AE82         MOV     R6,DPL
   \   00012C   AF83         MOV     R7,DPH
    897              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   00012E   85..82       MOV     DPL,?V0
   \   000131   85..83       MOV     DPH,?V1
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   F8           MOV     R0,A
   \   000139   A3           INC     DPTR
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F9           MOV     R1,A
   \   00013C   E8           MOV     A,R0
   \   00013D   C0E0         PUSH    A
   \   00013F   8E82         MOV     DPL,R6
   \   000141   8F83         MOV     DPH,R7
   \   000143   D0E0         POP     A
   \   000145   F0           MOVX    @DPTR,A
   \   000146   8E82         MOV     DPL,R6
   \   000148   8F83         MOV     DPH,R7
   \   00014A   A3           INC     DPTR
   \   00014B   AE82         MOV     R6,DPL
   \   00014D   AF83         MOV     R7,DPH
    898              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \   00014F   85..82       MOV     DPL,?V0
   \   000152   85..83       MOV     DPH,?V1
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   F8           MOV     R0,A
   \   00015A   A3           INC     DPTR
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   F9           MOV     R1,A
   \   00015D   E4           CLR     A
   \   00015E   C9           XCH     A,R1
   \   00015F   F8           MOV     R0,A
   \   000160   E8           MOV     A,R0
   \   000161   C0E0         PUSH    A
   \   000163   8E82         MOV     DPL,R6
   \   000165   8F83         MOV     DPH,R7
   \   000167   D0E0         POP     A
   \   000169   F0           MOVX    @DPTR,A
   \   00016A   8E82         MOV     DPL,R6
   \   00016C   8F83         MOV     DPH,R7
   \   00016E   A3           INC     DPTR
   \   00016F   AE82         MOV     R6,DPL
   \   000171   AF83         MOV     R7,DPH
    899          
    900              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \   000173   85..82       MOV     DPL,?V0
   \   000176   85..83       MOV     DPH,?V1
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   540F         ANL     A,#0xf
   \   000181   C0E0         PUSH    A
   \   000183   8E82         MOV     DPL,R6
   \   000185   8F83         MOV     DPH,R7
   \   000187   D0E0         POP     A
   \   000189   F0           MOVX    @DPTR,A
   \   00018A   8E82         MOV     DPL,R6
   \   00018C   8F83         MOV     DPH,R7
   \   00018E   A3           INC     DPTR
   \   00018F   AE82         MOV     R6,DPL
   \   000191   AF83         MOV     R7,DPH
    901          
    902              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   000193   85..82       MOV     DPL,?V0
   \   000196   85..83       MOV     DPH,?V1
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   C0E0         PUSH    A
   \   0001A2   8E82         MOV     DPL,R6
   \   0001A4   8F83         MOV     DPH,R7
   \   0001A6   D0E0         POP     A
   \   0001A8   F0           MOVX    @DPTR,A
   \   0001A9   8E82         MOV     DPL,R6
   \   0001AB   8F83         MOV     DPH,R7
   \   0001AD   A3           INC     DPTR
   \   0001AE   AE82         MOV     R6,DPL
   \   0001B0   AF83         MOV     R7,DPH
    903              if ( pSimpleDesc->AppNumInClusters )
   \   0001B2   85..82       MOV     DPL,?V0
   \   0001B5   85..83       MOV     DPH,?V1
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   7003         JNZ     $+5
   \   0001C1   02....       LJMP    ??ZDP_SimpleDescMsg_5 & 0xFFFF
    904              {
    905                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0001C4   75..00       MOV     ?V6,#0x0
   \                     ??ZDP_SimpleDescMsg_6:
   \   0001C7   85..82       MOV     DPL,?V0
   \   0001CA   85..83       MOV     DPH,?V1
   \   0001CD   A3           INC     DPTR
   \   0001CE   A3           INC     DPTR
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   F8           MOV     R0,A
   \   0001D5   E5..         MOV     A,?V6
   \   0001D7   C3           CLR     C
   \   0001D8   98           SUBB    A,R0
   \   0001D9   4003         JC      $+5
   \   0001DB   02....       LJMP    ??ZDP_SimpleDescMsg_5 & 0xFFFF
    906                {
    907                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \   0001DE   A8..         MOV     R0,?V6
   \   0001E0   7900         MOV     R1,#0x0
   \   0001E2   E8           MOV     A,R0
   \   0001E3   75F002       MOV     B,#0x2
   \   0001E6   A4           MUL     AB
   \   0001E7   C8           XCH     A,R0
   \   0001E8   AAF0         MOV     R2,B
   \   0001EA   75F000       MOV     B,#0x0
   \   0001ED   A4           MUL     AB
   \   0001EE   2A           ADD     A,R2
   \   0001EF   FA           MOV     R2,A
   \   0001F0   75F002       MOV     B,#0x2
   \   0001F3   E9           MOV     A,R1
   \   0001F4   A4           MUL     AB
   \   0001F5   2A           ADD     A,R2
   \   0001F6   F9           MOV     R1,A
   \   0001F7   85..82       MOV     DPL,?V0
   \   0001FA   85..83       MOV     DPH,?V1
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   A3           INC     DPTR
   \   000204   E0           MOVX    A,@DPTR
   \   000205   28           ADD     A,R0
   \   000206   FA           MOV     R2,A
   \   000207   A3           INC     DPTR
   \   000208   E0           MOVX    A,@DPTR
   \   000209   39           ADDC    A,R1
   \   00020A   8A82         MOV     DPL,R2
   \   00020C   F583         MOV     DPH,A
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   F8           MOV     R0,A
   \   000210   A3           INC     DPTR
   \   000211   E0           MOVX    A,@DPTR
   \   000212   F9           MOV     R1,A
   \   000213   E8           MOV     A,R0
   \   000214   C0E0         PUSH    A
   \   000216   8E82         MOV     DPL,R6
   \   000218   8F83         MOV     DPH,R7
   \   00021A   D0E0         POP     A
   \   00021C   F0           MOVX    @DPTR,A
   \   00021D   8E82         MOV     DPL,R6
   \   00021F   8F83         MOV     DPH,R7
   \   000221   A3           INC     DPTR
   \   000222   AE82         MOV     R6,DPL
   \   000224   AF83         MOV     R7,DPH
    908                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \   000226   A8..         MOV     R0,?V6
   \   000228   7900         MOV     R1,#0x0
   \   00022A   E8           MOV     A,R0
   \   00022B   75F002       MOV     B,#0x2
   \   00022E   A4           MUL     AB
   \   00022F   C8           XCH     A,R0
   \   000230   AAF0         MOV     R2,B
   \   000232   75F000       MOV     B,#0x0
   \   000235   A4           MUL     AB
   \   000236   2A           ADD     A,R2
   \   000237   FA           MOV     R2,A
   \   000238   75F002       MOV     B,#0x2
   \   00023B   E9           MOV     A,R1
   \   00023C   A4           MUL     AB
   \   00023D   2A           ADD     A,R2
   \   00023E   F9           MOV     R1,A
   \   00023F   85..82       MOV     DPL,?V0
   \   000242   85..83       MOV     DPH,?V1
   \   000245   A3           INC     DPTR
   \   000246   A3           INC     DPTR
   \   000247   A3           INC     DPTR
   \   000248   A3           INC     DPTR
   \   000249   A3           INC     DPTR
   \   00024A   A3           INC     DPTR
   \   00024B   A3           INC     DPTR
   \   00024C   E0           MOVX    A,@DPTR
   \   00024D   28           ADD     A,R0
   \   00024E   FA           MOV     R2,A
   \   00024F   A3           INC     DPTR
   \   000250   E0           MOVX    A,@DPTR
   \   000251   39           ADDC    A,R1
   \   000252   8A82         MOV     DPL,R2
   \   000254   F583         MOV     DPH,A
   \   000256   E0           MOVX    A,@DPTR
   \   000257   F8           MOV     R0,A
   \   000258   A3           INC     DPTR
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   F9           MOV     R1,A
   \   00025B   E4           CLR     A
   \   00025C   C9           XCH     A,R1
   \   00025D   F8           MOV     R0,A
   \   00025E   E8           MOV     A,R0
   \   00025F   C0E0         PUSH    A
   \   000261   8E82         MOV     DPL,R6
   \   000263   8F83         MOV     DPH,R7
   \   000265   D0E0         POP     A
   \   000267   F0           MOVX    @DPTR,A
   \   000268   8E82         MOV     DPL,R6
   \   00026A   8F83         MOV     DPH,R7
   \   00026C   A3           INC     DPTR
   \   00026D   AE82         MOV     R6,DPL
   \   00026F   AF83         MOV     R7,DPH
    909                }
   \   000271   05..         INC     ?V6
   \   000273   02....       LJMP    ??ZDP_SimpleDescMsg_6 & 0xFFFF
    910              }
    911          
    912              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   000276   85..82       MOV     DPL,?V0
   \   000279   85..83       MOV     DPH,?V1
   \   00027C   A3           INC     DPTR
   \   00027D   A3           INC     DPTR
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   A3           INC     DPTR
   \   000281   A3           INC     DPTR
   \   000282   A3           INC     DPTR
   \   000283   A3           INC     DPTR
   \   000284   A3           INC     DPTR
   \   000285   E0           MOVX    A,@DPTR
   \   000286   C0E0         PUSH    A
   \   000288   8E82         MOV     DPL,R6
   \   00028A   8F83         MOV     DPH,R7
   \   00028C   D0E0         POP     A
   \   00028E   F0           MOVX    @DPTR,A
   \   00028F   8E82         MOV     DPL,R6
   \   000291   8F83         MOV     DPH,R7
   \   000293   A3           INC     DPTR
   \   000294   AE82         MOV     R6,DPL
   \   000296   AF83         MOV     R7,DPH
    913              if ( pSimpleDesc->AppNumOutClusters )
   \   000298   85..82       MOV     DPL,?V0
   \   00029B   85..83       MOV     DPH,?V1
   \   00029E   A3           INC     DPTR
   \   00029F   A3           INC     DPTR
   \   0002A0   A3           INC     DPTR
   \   0002A1   A3           INC     DPTR
   \   0002A2   A3           INC     DPTR
   \   0002A3   A3           INC     DPTR
   \   0002A4   A3           INC     DPTR
   \   0002A5   A3           INC     DPTR
   \   0002A6   A3           INC     DPTR
   \   0002A7   E0           MOVX    A,@DPTR
   \   0002A8   7003         JNZ     $+5
   \   0002AA   02....       LJMP    ??ZDP_SimpleDescMsg_7 & 0xFFFF
    914              {
    915                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0002AD   75..00       MOV     ?V6,#0x0
   \                     ??ZDP_SimpleDescMsg_8:
   \   0002B0   85..82       MOV     DPL,?V0
   \   0002B3   85..83       MOV     DPH,?V1
   \   0002B6   A3           INC     DPTR
   \   0002B7   A3           INC     DPTR
   \   0002B8   A3           INC     DPTR
   \   0002B9   A3           INC     DPTR
   \   0002BA   A3           INC     DPTR
   \   0002BB   A3           INC     DPTR
   \   0002BC   A3           INC     DPTR
   \   0002BD   A3           INC     DPTR
   \   0002BE   A3           INC     DPTR
   \   0002BF   E0           MOVX    A,@DPTR
   \   0002C0   F8           MOV     R0,A
   \   0002C1   E5..         MOV     A,?V6
   \   0002C3   C3           CLR     C
   \   0002C4   98           SUBB    A,R0
   \   0002C5   4003         JC      $+5
   \   0002C7   02....       LJMP    ??ZDP_SimpleDescMsg_7 & 0xFFFF
    916                {
    917                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   0002CA   A8..         MOV     R0,?V6
   \   0002CC   7900         MOV     R1,#0x0
   \   0002CE   E8           MOV     A,R0
   \   0002CF   75F002       MOV     B,#0x2
   \   0002D2   A4           MUL     AB
   \   0002D3   C8           XCH     A,R0
   \   0002D4   AAF0         MOV     R2,B
   \   0002D6   75F000       MOV     B,#0x0
   \   0002D9   A4           MUL     AB
   \   0002DA   2A           ADD     A,R2
   \   0002DB   FA           MOV     R2,A
   \   0002DC   75F002       MOV     B,#0x2
   \   0002DF   E9           MOV     A,R1
   \   0002E0   A4           MUL     AB
   \   0002E1   2A           ADD     A,R2
   \   0002E2   F9           MOV     R1,A
   \   0002E3   85..82       MOV     DPL,?V0
   \   0002E6   85..83       MOV     DPH,?V1
   \   0002E9   A3           INC     DPTR
   \   0002EA   A3           INC     DPTR
   \   0002EB   A3           INC     DPTR
   \   0002EC   A3           INC     DPTR
   \   0002ED   A3           INC     DPTR
   \   0002EE   A3           INC     DPTR
   \   0002EF   A3           INC     DPTR
   \   0002F0   A3           INC     DPTR
   \   0002F1   A3           INC     DPTR
   \   0002F2   A3           INC     DPTR
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   28           ADD     A,R0
   \   0002F5   FA           MOV     R2,A
   \   0002F6   A3           INC     DPTR
   \   0002F7   E0           MOVX    A,@DPTR
   \   0002F8   39           ADDC    A,R1
   \   0002F9   8A82         MOV     DPL,R2
   \   0002FB   F583         MOV     DPH,A
   \   0002FD   E0           MOVX    A,@DPTR
   \   0002FE   F8           MOV     R0,A
   \   0002FF   A3           INC     DPTR
   \   000300   E0           MOVX    A,@DPTR
   \   000301   F9           MOV     R1,A
   \   000302   E8           MOV     A,R0
   \   000303   C0E0         PUSH    A
   \   000305   8E82         MOV     DPL,R6
   \   000307   8F83         MOV     DPH,R7
   \   000309   D0E0         POP     A
   \   00030B   F0           MOVX    @DPTR,A
   \   00030C   8E82         MOV     DPL,R6
   \   00030E   8F83         MOV     DPH,R7
   \   000310   A3           INC     DPTR
   \   000311   AE82         MOV     R6,DPL
   \   000313   AF83         MOV     R7,DPH
    918                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000315   A8..         MOV     R0,?V6
   \   000317   7900         MOV     R1,#0x0
   \   000319   E8           MOV     A,R0
   \   00031A   75F002       MOV     B,#0x2
   \   00031D   A4           MUL     AB
   \   00031E   C8           XCH     A,R0
   \   00031F   AAF0         MOV     R2,B
   \   000321   75F000       MOV     B,#0x0
   \   000324   A4           MUL     AB
   \   000325   2A           ADD     A,R2
   \   000326   FA           MOV     R2,A
   \   000327   75F002       MOV     B,#0x2
   \   00032A   E9           MOV     A,R1
   \   00032B   A4           MUL     AB
   \   00032C   2A           ADD     A,R2
   \   00032D   F9           MOV     R1,A
   \   00032E   85..82       MOV     DPL,?V0
   \   000331   85..83       MOV     DPH,?V1
   \   000334   A3           INC     DPTR
   \   000335   A3           INC     DPTR
   \   000336   A3           INC     DPTR
   \   000337   A3           INC     DPTR
   \   000338   A3           INC     DPTR
   \   000339   A3           INC     DPTR
   \   00033A   A3           INC     DPTR
   \   00033B   A3           INC     DPTR
   \   00033C   A3           INC     DPTR
   \   00033D   A3           INC     DPTR
   \   00033E   E0           MOVX    A,@DPTR
   \   00033F   28           ADD     A,R0
   \   000340   FA           MOV     R2,A
   \   000341   A3           INC     DPTR
   \   000342   E0           MOVX    A,@DPTR
   \   000343   39           ADDC    A,R1
   \   000344   8A82         MOV     DPL,R2
   \   000346   F583         MOV     DPH,A
   \   000348   E0           MOVX    A,@DPTR
   \   000349   F8           MOV     R0,A
   \   00034A   A3           INC     DPTR
   \   00034B   E0           MOVX    A,@DPTR
   \   00034C   F9           MOV     R1,A
   \   00034D   E4           CLR     A
   \   00034E   C9           XCH     A,R1
   \   00034F   F8           MOV     R0,A
   \   000350   E8           MOV     A,R0
   \   000351   C0E0         PUSH    A
   \   000353   8E82         MOV     DPL,R6
   \   000355   8F83         MOV     DPH,R7
   \   000357   D0E0         POP     A
   \   000359   F0           MOVX    @DPTR,A
   \   00035A   8E82         MOV     DPL,R6
   \   00035C   8F83         MOV     DPH,R7
   \   00035E   A3           INC     DPTR
   \   00035F   AE82         MOV     R6,DPL
   \   000361   AF83         MOV     R7,DPH
    919                }
   \   000363   05..         INC     ?V6
   \   000365   02....       LJMP    ??ZDP_SimpleDescMsg_8 & 0xFFFF
    920              }
    921            }
    922          
    923            else
    924            {
    925              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_4:
   \   000368   8E82         MOV     DPL,R6
   \   00036A   8F83         MOV     DPH,R7
   \   00036C   7400         MOV     A,#0x0
   \   00036E   F0           MOVX    @DPTR,A
    926            }
    927          
    928            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_7:
   \   00036F                ; Setup parameters for call to function fillAndSend
   \   00036F   75..04       MOV     ?V8,#0x4
   \   000372   75..80       MOV     ?V9,#-0x80
   \   000375   78..         MOV     R0,#?V8
   \   000377   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00037A   A9..         MOV     R1,?V2
   \   00037C   E5..         MOV     A,?V4
   \   00037E   2402         ADD     A,#0x2
   \   000380   FC           MOV     R4,A
   \   000381   E4           CLR     A
   \   000382   35..         ADDC    A,?V5
   \   000384   FD           MOV     R5,A
   \   000385   E5..         MOV     A,?V4
   \   000387   240F         ADD     A,#0xf
   \   000389   FA           MOV     R2,A
   \   00038A   E4           CLR     A
   \   00038B   35..         ADDC    A,?V5
   \   00038D   FB           MOV     R3,A
   \   00038E   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000391   7402         MOV     A,#0x2
   \   000393   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_3:
   \   000396   7F0A         MOV     R7,#0xa
   \   000398   02....       LJMP    ?BANKED_LEAVE_XDATA
    929          }
    930          
    931          /*********************************************************************
    932           * @fn          ZDP_EPRsp
    933           *
    934           * @brief       This builds and send an endpoint list. Used in
    935           *              Active_EP_rsp and Match_Desc_Rsp
    936           *              message.  This function sends unicast message to the
    937           *              requesting device.
    938           *
    939           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    940           * @param       dstAddr - destination address
    941           * @param       Status - message status (ZDP_SUCCESS or other)
    942           * @param       nwkAddr - Device's short address that this response describes
    943           * @param       Count - number of endpoint/interfaces in list
    944           * @param       pEPIntfList - Array of Endpoint/Interfaces
    945           * @param       SecurityEnable - Security Options
    946           *
    947           * @return      afStatus_t
    948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    949          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    950                                  byte Status, uint16 nwkAddr, byte Count,
    951                                  uint8 *pEPList,
    952                                  byte SecurityEnable )
    953          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V2,R2
   \   000018   8B..         MOV     ?V3,R3
   \   00001A   8C..         MOV     ?V14,R4
   \   00001C   8D..         MOV     ?V15,R5
   \   00001E   7419         MOV     A,#0x19
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V10,A
   \   000026   741A         MOV     A,#0x1a
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V1,A
   \   000032   741C         MOV     A,#0x1c
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V7,A
   \   00003A   741D         MOV     A,#0x1d
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V12,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V13,A
    954            uint8 *pBuf = ZDP_TmpBuf;
   \   000046   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FE           MOV     R6,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FF           MOV     R7,A
    955            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \   00004E   75..04       MOV     ?V9,#0x4
    956            byte txOptions;
    957          
    958            (void)SecurityEnable;  // Intentionally unreferenced parameter
    959          
    960            if ( MsgType == Match_Desc_rsp )
   \   000051   7406         MOV     A,#0x6
   \   000053   65..         XRL     A,?V2
   \   000055   7004         JNZ     ??ZDP_EPRsp_0
   \   000057   7480         MOV     A,#-0x80
   \   000059   65..         XRL     A,?V3
   \                     ??ZDP_EPRsp_0:
   \   00005B   7005         JNZ     ??ZDP_EPRsp_1
    961              txOptions = AF_MSG_ACK_REQUEST;
   \   00005D   75..10       MOV     ?V8,#0x10
   \   000060   8003         SJMP    ??ZDP_EPRsp_2
    962            else
    963              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000062   75..00       MOV     ?V8,#0x0
    964          
    965              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000065   E5..         MOV     A,?V10
   \   000067   C0E0         PUSH    A
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   D0E0         POP     A
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   8E82         MOV     DPL,R6
   \   000072   8F83         MOV     DPH,R7
   \   000074   A3           INC     DPTR
   \   000075   AE82         MOV     R6,DPL
   \   000077   AF83         MOV     R7,DPH
    966            *pBuf++ = LO_UINT16( nwkAddr );
   \   000079   E5..         MOV     A,?V0
   \   00007B   C0E0         PUSH    A
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   D0E0         POP     A
   \   000083   F0           MOVX    @DPTR,A
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   A3           INC     DPTR
   \   000089   AE82         MOV     R6,DPL
   \   00008B   AF83         MOV     R7,DPH
    967            *pBuf++ = HI_UINT16( nwkAddr );
   \   00008D   A8..         MOV     R0,?V0
   \   00008F   A9..         MOV     R1,?V1
   \   000091   E4           CLR     A
   \   000092   C9           XCH     A,R1
   \   000093   F8           MOV     R0,A
   \   000094   E8           MOV     A,R0
   \   000095   C0E0         PUSH    A
   \   000097   8E82         MOV     DPL,R6
   \   000099   8F83         MOV     DPH,R7
   \   00009B   D0E0         POP     A
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   A3           INC     DPTR
   \   0000A3   AE82         MOV     R6,DPL
   \   0000A5   AF83         MOV     R7,DPH
    968          
    969            *pBuf++ = Count;   // Endpoint/Interface count
   \   0000A7   E5..         MOV     A,?V7
   \   0000A9   C0E0         PUSH    A
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   D0E0         POP     A
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   A3           INC     DPTR
   \   0000B7   AE82         MOV     R6,DPL
   \   0000B9   AF83         MOV     R7,DPH
    970          
    971            if ( Count )
   \   0000BB   E5..         MOV     A,?V7
   \   0000BD   6024         JZ      ??ZDP_EPRsp_3
    972            {
    973              len += Count;
   \   0000BF   E5..         MOV     A,?V7
   \   0000C1   25..         ADD     A,?V9
   \   0000C3   F5..         MOV     ?V9,A
    974              osal_memcpy( pBuf, pEPList, Count );
   \   0000C5                ; Setup parameters for call to function osal_memcpy
   \   0000C5   85....       MOV     ?V4,?V12
   \   0000C8   85....       MOV     ?V5,?V13
   \   0000CB   75..00       MOV     ?V6,#0x0
   \   0000CE   78..         MOV     R0,#?V4
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D3   AC..         MOV     R4,?V7
   \   0000D5   7D00         MOV     R5,#0x0
   \   0000D7   EE           MOV     A,R6
   \   0000D8   FA           MOV     R2,A
   \   0000D9   EF           MOV     A,R7
   \   0000DA   FB           MOV     R3,A
   \   0000DB   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000DE   7403         MOV     A,#0x3
   \   0000E0   12....       LCALL   ?DEALLOC_XSTACK8
    975            }
    976          
    977            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   0000E3   E5..         MOV     A,?V8
   \   0000E5   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9                ; Setup parameters for call to function fillAndSend
   \   0000E9   78..         MOV     R0,#?V2
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EE   A9..         MOV     R1,?V9
   \   0000F0   AC..         MOV     R4,?V14
   \   0000F2   AD..         MOV     R5,?V15
   \   0000F4   7402         MOV     A,#0x2
   \   0000F6   12....       LCALL   ?XSTACK_DISP101_8
   \   0000F9   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000FC   7402         MOV     A,#0x2
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000101   E9           MOV     A,R1
   \   000102   F5..         MOV     ?V4,A
   \   000104   90....       MOV     DPTR,#ZDP_TxOptions
   \   000107   7400         MOV     A,#0x0
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   A9..         MOV     R1,?V4
   \   00010C   7401         MOV     A,#0x1
   \   00010E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000111   7F10         MOV     R7,#0x10
   \   000113   02....       LJMP    ?BANKED_LEAVE_XDATA
    978          }
    979          
    980          /*********************************************************************
    981           * @fn          ZDP_UserDescRsp
    982           *
    983           * @brief       Build and send the User Decriptor Response.
    984           *
    985           *
    986           * @param       dstAddr - destination address
    987           * @param       nwkAddrOfInterest -
    988           * @param       userDesc -
    989           * @param       SecurityEnable - Security Options
    990           *
    991           * @return      ZStatus_t
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    994                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    995                          byte SecurityEnable )
    996          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V10,R2
   \   000018   8B..         MOV     ?V11,R3
   \   00001A   8C..         MOV     ?V0,R4
   \   00001C   8D..         MOV     ?V1,R5
   \   00001E   7415         MOV     A,#0x15
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V8,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V9,A
    997            uint8 *pBuf = ZDP_TmpBuf;
   \   00002A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FE           MOV     R6,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FF           MOV     R7,A
    998            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
   \   000032   75..04       MOV     ?V2,#0x4
    999          
   1000            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1001          
   1002            len += userDesc->len;
   \   000035   85..82       MOV     DPL,?V8
   \   000038   85..83       MOV     DPH,?V9
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   25..         ADD     A,?V2
   \   00003E   F5..         MOV     ?V2,A
   1003          
   1004            *pBuf++ = ZSUCCESS;
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   7400         MOV     A,#0x0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   AE82         MOV     R6,DPL
   \   00004E   AF83         MOV     R7,DPH
   1005          
   1006            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000050   E5..         MOV     A,?V0
   \   000052   C0E0         PUSH    A
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   D0E0         POP     A
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   A3           INC     DPTR
   \   000060   AE82         MOV     R6,DPL
   \   000062   AF83         MOV     R7,DPH
   1007            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000064   A8..         MOV     R0,?V0
   \   000066   A9..         MOV     R1,?V1
   \   000068   E4           CLR     A
   \   000069   C9           XCH     A,R1
   \   00006A   F8           MOV     R0,A
   \   00006B   E8           MOV     A,R0
   \   00006C   C0E0         PUSH    A
   \   00006E   8E82         MOV     DPL,R6
   \   000070   8F83         MOV     DPH,R7
   \   000072   D0E0         POP     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   A3           INC     DPTR
   \   00007A   AE82         MOV     R6,DPL
   \   00007C   AF83         MOV     R7,DPH
   1008          
   1009            *pBuf++ = userDesc->len;
   \   00007E   85..82       MOV     DPL,?V8
   \   000081   85..83       MOV     DPH,?V9
   \   000084   E0           MOVX    A,@DPTR
   \   000085   C0E0         PUSH    A
   \   000087   8E82         MOV     DPL,R6
   \   000089   8F83         MOV     DPH,R7
   \   00008B   D0E0         POP     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   A3           INC     DPTR
   \   000093   AE82         MOV     R6,DPL
   \   000095   AF83         MOV     R7,DPH
   1010            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \   000097                ; Setup parameters for call to function osal_memcpy
   \   000097   85..82       MOV     DPL,?V8
   \   00009A   85..83       MOV     DPH,?V9
   \   00009D   A3           INC     DPTR
   \   00009E   A982         MOV     R1,DPL
   \   0000A0   AA83         MOV     R2,DPH
   \   0000A2   7B00         MOV     R3,#0x0
   \   0000A4   89..         MOV     ?V4,R1
   \   0000A6   8A..         MOV     ?V5,R2
   \   0000A8   8B..         MOV     ?V6,R3
   \   0000AA   78..         MOV     R0,#?V4
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AF   85..82       MOV     DPL,?V8
   \   0000B2   85..83       MOV     DPH,?V9
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   FC           MOV     R4,A
   \   0000B7   7D00         MOV     R5,#0x0
   \   0000B9   EE           MOV     A,R6
   \   0000BA   FA           MOV     R2,A
   \   0000BB   EF           MOV     A,R7
   \   0000BC   FB           MOV     R3,A
   \   0000BD   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C0   7403         MOV     A,#0x3
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   1011          
   1012            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   0000C5                ; Setup parameters for call to function fillAndSend
   \   0000C5   75..11       MOV     ?V4,#0x11
   \   0000C8   75..80       MOV     ?V5,#-0x80
   \   0000CB   78..         MOV     R0,#?V4
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D0   A9..         MOV     R1,?V2
   \   0000D2   AC..         MOV     R4,?V10
   \   0000D4   AD..         MOV     R5,?V11
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   12....       LCALL   ?XSTACK_DISP101_8
   \   0000DB   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000DE   7402         MOV     A,#0x2
   \   0000E0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E3   7401         MOV     A,#0x1
   \   0000E5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E8   7F0C         MOV     R7,#0xc
   \   0000EA   02....       LJMP    ?BANKED_LEAVE_XDATA
   1013          }
   1014          
   1015          /*********************************************************************
   1016           * @fn          ZDP_ServerDiscRsp
   1017           *
   1018           * @brief       Build and send the Server_Discovery_rsp response.
   1019           *
   1020           * @param       transID - Transaction sequence number of request.
   1021           * @param       dstAddr - Network Destination Address.
   1022           * @param       status - Status of response to request.
   1023           * @param       aoi - Network Address of Interest of request.
   1024           * @param       serverMask - Bit map of service(s) being sought.
   1025           * @param       SecurityEnable - Security Options
   1026           *
   1027           * @return      ZStatus_t
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1030                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1031          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V6,R2
   \   000018   8B..         MOV     ?V7,R3
   \   00001A   8C..         MOV     ?V3,R4
   \   00001C   8D..         MOV     ?V5,R5
   \   00001E   7415         MOV     A,#0x15
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V1,A
   1032            const byte len = 1  + 2;  // status + aoi + mask.
   \   00002A   75..03       MOV     ?V4,#0x3
   1033            uint8 *pBuf = ZDP_TmpBuf;
   \   00002D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FE           MOV     R6,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FF           MOV     R7,A
   1034            ZStatus_t stat;
   1035          
   1036            // Intentionally unreferenced parameters
   1037            (void)aoi;
   1038            (void)SecurityEnable;
   1039          
   1040            *pBuf++ = status;
   \   000035   E5..         MOV     A,?V3
   \   000037   C0E0         PUSH    A
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   D0E0         POP     A
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   A3           INC     DPTR
   \   000045   AE82         MOV     R6,DPL
   \   000047   AF83         MOV     R7,DPH
   1041          
   1042            *pBuf++ = LO_UINT16( serverMask );
   \   000049   E5..         MOV     A,?V0
   \   00004B   C0E0         PUSH    A
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   D0E0         POP     A
   \   000053   F0           MOVX    @DPTR,A
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   A3           INC     DPTR
   \   000059   AE82         MOV     R6,DPL
   \   00005B   AF83         MOV     R7,DPH
   1043            *pBuf++ = HI_UINT16( serverMask );
   \   00005D   A8..         MOV     R0,?V0
   \   00005F   A9..         MOV     R1,?V1
   \   000061   E4           CLR     A
   \   000062   C9           XCH     A,R1
   \   000063   F8           MOV     R0,A
   \   000064   E8           MOV     A,R0
   \   000065   C0E0         PUSH    A
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   D0E0         POP     A
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   8E82         MOV     DPL,R6
   \   000070   8F83         MOV     DPH,R7
   \   000072   A3           INC     DPTR
   \   000073   AE82         MOV     R6,DPL
   \   000075   AF83         MOV     R7,DPH
   1044          
   1045            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000077   90....       MOV     DPTR,#ZDP_TxOptions
   \   00007A   7410         MOV     A,#0x10
   \   00007C   F0           MOVX    @DPTR,A
   1046            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   00007D                ; Setup parameters for call to function fillAndSend
   \   00007D   75..15       MOV     ?V8,#0x15
   \   000080   75..80       MOV     ?V9,#-0x80
   \   000083   78..         MOV     R0,#?V8
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000088   A9..         MOV     R1,?V4
   \   00008A   AC..         MOV     R4,?V6
   \   00008C   AD..         MOV     R5,?V7
   \   00008E   7402         MOV     A,#0x2
   \   000090   12....       LCALL   ?XSTACK_DISP101_8
   \   000093   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000096   7402         MOV     A,#0x2
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009B   E9           MOV     A,R1
   \   00009C   F5..         MOV     ?V2,A
   1047            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00009E   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A1   7400         MOV     A,#0x0
   \   0000A3   F0           MOVX    @DPTR,A
   1048          
   1049            return ( stat );
   \   0000A4   A9..         MOV     R1,?V2
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   7F0A         MOV     R7,#0xa
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
   1050          }
   1051          
   1052          /*********************************************************************
   1053           * @fn          ZDP_GenericRsp
   1054           *
   1055           * @brief       Sends a response message with only the parameter status
   1056           *              byte and the addr of interest for data.
   1057           *              This function sends unicast message to the
   1058           *              requesting device.
   1059           *
   1060           * @param       dstAddr - destination address
   1061           * @param       status  - generic status for response
   1062           * @param       aoi     - address of interest
   1063           * @param       dstAddr - destination address
   1064           * @param       rspId   - response cluster ID
   1065           * @param       SecurityEnable - Security Options
   1066           *
   1067           * @return      afStatus_t
   1068           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1069          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1070                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1071          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V0,R2
   \   000018   8B..         MOV     ?V1,R3
   \   00001A   8C..         MOV     ?V3,R4
   \   00001C   8D..         MOV     ?V2,R5
   \   00001E   7411         MOV     A,#0x11
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FE           MOV     R6,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FF           MOV     R7,A
   \   000028   7413         MOV     A,#0x13
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V6,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V7,A
   1072            uint8 len;
   1073          
   1074            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1075          
   1076            ZDP_TmpBuf[0] = status;
   \   000034   E5..         MOV     A,?V3
   \   000036   C0E0         PUSH    A
   \   000038   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F8           MOV     R0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F583         MOV     DPH,A
   \   000041   8882         MOV     DPL,R0
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
   1077            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \   000046   EE           MOV     A,R6
   \   000047   C0E0         PUSH    A
   \   000049   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F8           MOV     R0,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F583         MOV     DPH,A
   \   000052   8882         MOV     DPL,R0
   \   000054   A3           INC     DPTR
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
   1078            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   000058   EE           MOV     A,R6
   \   000059   F8           MOV     R0,A
   \   00005A   EF           MOV     A,R7
   \   00005B   F9           MOV     R1,A
   \   00005C   E4           CLR     A
   \   00005D   C9           XCH     A,R1
   \   00005E   F8           MOV     R0,A
   \   00005F   E8           MOV     A,R0
   \   000060   C0E0         PUSH    A
   \   000062   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F8           MOV     R0,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F583         MOV     DPH,A
   \   00006B   8882         MOV     DPL,R0
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   D0E0         POP     A
   \   000071   F0           MOVX    @DPTR,A
   1079          
   1080            // Length byte
   1081            ZDP_TmpBuf[3] = 0;
   \   000072   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F8           MOV     R0,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F583         MOV     DPH,A
   \   00007B   8882         MOV     DPL,R0
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   7400         MOV     A,#0x0
   \   000082   F0           MOVX    @DPTR,A
   1082            len = 4;
   \   000083   75..04       MOV     ?V4,#0x4
   1083          
   1084            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000086                ; Setup parameters for call to function fillAndSend
   \   000086   78..         MOV     R0,#?V6
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   A9..         MOV     R1,?V4
   \   00008D   AC..         MOV     R4,?V0
   \   00008F   AD..         MOV     R5,?V1
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?XSTACK_DISP101_8
   \   000096   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000099   7402         MOV     A,#0x2
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   7401         MOV     A,#0x1
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   7F08         MOV     R7,#0x8
   \   0000A5   02....       LJMP    ?BANKED_LEAVE_XDATA
   1085          }
   1086          
   1087          /*********************************************************************
   1088           * Binding
   1089           */
   1090          /*********************************************************************
   1091           * @fn          ZDP_EndDeviceBindReq
   1092           *
   1093           * @brief       This builds and sends a End_Device_Bind_req message.
   1094           *              This function sends a unicast message.
   1095           *
   1096           * @param       dstAddr - destination address
   1097           * @param       LocalCoordinator - short address of local coordinator
   1098           * @param       epIntf - Endpoint/Interface of Simple Desc
   1099           * @param       ProfileID - Profile ID
   1100           *
   1101           *   The Input cluster list is the opposite of what you would think.
   1102           *   This is the output cluster list of this device
   1103           * @param       NumInClusters - number of input clusters
   1104           * @param       InClusterList - input cluster ID list
   1105           *
   1106           *   The Output cluster list is the opposite of what you would think.
   1107           *   This is the input cluster list of this device
   1108           * @param       NumOutClusters - number of output clusters
   1109           * @param       OutClusterList - output cluster ID list
   1110           *
   1111           * @param       SecurityEnable - Security Options
   1112           *
   1113           * @return      afStatus_t
   1114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1115          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1116                                           uint16 LocalCoordinator,
   1117                                           byte endPoint,
   1118                                           uint16 ProfileID,
   1119                                           byte NumInClusters, cId_t *InClusterList,
   1120                                           byte NumOutClusters, cId_t *OutClusterList,
   1121                                           byte SecurityEnable )
   1122          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8C..         MOV     ?V0,R4
   \   000016   8D..         MOV     ?V1,R5
   \   000018   89..         MOV     ?V14,R1
   \   00001A   741B         MOV     A,#0x1b
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V2,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V3,A
   \   000026   741D         MOV     A,#0x1d
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V7,A
   \   00002E   741E         MOV     A,#0x1e
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V12,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V13,A
   \   00003A   7420         MOV     A,#0x20
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V6,A
   \   000042   7421         MOV     A,#0x21
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V10,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F5..         MOV     ?V11,A
   1123            uint8 *pBuf = ZDP_TmpBuf;
   \   00004E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000051   E0           MOVX    A,@DPTR
   \   000052   FE           MOV     R6,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FF           MOV     R7,A
   1124            uint8 i, len;
   1125            uint8 *ieeeAddr;
   1126          
   1127            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1128          
   1129            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1130            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   \   000056   75..0F       MOV     ?V5,#0xf
   1131            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000059   75F002       MOV     B,#0x2
   \   00005C   AA..         MOV     R2,?V7
   \   00005E   7B00         MOV     R3,#0x0
   \   000060   A8..         MOV     R0,?V6
   \   000062   7900         MOV     R1,#0x0
   \   000064   EA           MOV     A,R2
   \   000065   28           ADD     A,R0
   \   000066   F8           MOV     R0,A
   \   000067   EB           MOV     A,R3
   \   000068   39           ADDC    A,R1
   \   000069   F9           MOV     R1,A
   \   00006A   E8           MOV     A,R0
   \   00006B   A4           MUL     AB
   \   00006C   25..         ADD     A,?V5
   \   00006E   F5..         MOV     ?V5,A
   1132          
   1133            if ( len >= ZDP_BUF_SZ-1 )
   \   000070   E5..         MOV     A,?V5
   \   000072   C3           CLR     C
   \   000073   944F         SUBB    A,#0x4f
   \   000075   4005         JC      ??ZDP_EndDeviceBindReq_0
   1134            {
   1135              return afStatus_MEM_FAIL;
   \   000077   7910         MOV     R1,#0x10
   \   000079   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1136            }
   1137          
   1138            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   00007C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00007C   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00007F   8A..         MOV     ?V8,R2
   \   000081   8B..         MOV     ?V9,R3
   \   000083   E5..         MOV     A,?V8
   \   000085   65..         XRL     A,?V0
   \   000087   7004         JNZ     ??ZDP_EndDeviceBindReq_2
   \   000089   E5..         MOV     A,?V9
   \   00008B   65..         XRL     A,?V1
   \                     ??ZDP_EndDeviceBindReq_2:
   \   00008D   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1139            {
   1140              return afStatus_INVALID_PARAMETER;
   \   00008F   7902         MOV     R1,#0x2
   \   000091   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1141            }
   1142          
   1143            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000094   E5..         MOV     A,?V0
   \   000096   C0E0         PUSH    A
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   D0E0         POP     A
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   A3           INC     DPTR
   \   0000A4   AE82         MOV     R6,DPL
   \   0000A6   AF83         MOV     R7,DPH
   1144            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   0000A8   A8..         MOV     R0,?V0
   \   0000AA   A9..         MOV     R1,?V1
   \   0000AC   E4           CLR     A
   \   0000AD   C9           XCH     A,R1
   \   0000AE   F8           MOV     R0,A
   \   0000AF   E8           MOV     A,R0
   \   0000B0   C0E0         PUSH    A
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   D0E0         POP     A
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   A3           INC     DPTR
   \   0000BE   AE82         MOV     R6,DPL
   \   0000C0   AF83         MOV     R7,DPH
   1145          
   1146            ieeeAddr = NLME_GetExtAddr();
   \   0000C2                ; Setup parameters for call to function NLME_GetExtAddr
   \   0000C2   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   0000C5   85..82       MOV     DPL,?XSP + 0
   \   0000C8   85..83       MOV     DPH,?XSP + 1
   \   0000CB   EA           MOV     A,R2
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   EB           MOV     A,R3
   \   0000CF   F0           MOVX    @DPTR,A
   1147            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   0000D0                ; Setup parameters for call to function sAddrExtCpy
   \   0000D0   85..82       MOV     DPL,?XSP + 0
   \   0000D3   85..83       MOV     DPH,?XSP + 1
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   FC           MOV     R4,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   FD           MOV     R5,A
   \   0000DB   EE           MOV     A,R6
   \   0000DC   FA           MOV     R2,A
   \   0000DD   EF           MOV     A,R7
   \   0000DE   FB           MOV     R3,A
   \   0000DF   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000E2   8A..         MOV     ?V8,R2
   \   0000E4   8B..         MOV     ?V9,R3
   \   0000E6   AE..         MOV     R6,?V8
   \   0000E8   AF..         MOV     R7,?V9
   1148          
   1149            *pBuf++ = endPoint;
   \   0000EA   E5..         MOV     A,?V14
   \   0000EC   C0E0         PUSH    A
   \   0000EE   8E82         MOV     DPL,R6
   \   0000F0   8F83         MOV     DPH,R7
   \   0000F2   D0E0         POP     A
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   8E82         MOV     DPL,R6
   \   0000F7   8F83         MOV     DPH,R7
   \   0000F9   A3           INC     DPTR
   \   0000FA   AE82         MOV     R6,DPL
   \   0000FC   AF83         MOV     R7,DPH
   1150          
   1151            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   0000FE   E5..         MOV     A,?V2
   \   000100   C0E0         PUSH    A
   \   000102   8E82         MOV     DPL,R6
   \   000104   8F83         MOV     DPH,R7
   \   000106   D0E0         POP     A
   \   000108   F0           MOVX    @DPTR,A
   \   000109   8E82         MOV     DPL,R6
   \   00010B   8F83         MOV     DPH,R7
   \   00010D   A3           INC     DPTR
   \   00010E   AE82         MOV     R6,DPL
   \   000110   AF83         MOV     R7,DPH
   1152            *pBuf++ = HI_UINT16( ProfileID );
   \   000112   A8..         MOV     R0,?V2
   \   000114   A9..         MOV     R1,?V3
   \   000116   E4           CLR     A
   \   000117   C9           XCH     A,R1
   \   000118   F8           MOV     R0,A
   \   000119   E8           MOV     A,R0
   \   00011A   C0E0         PUSH    A
   \   00011C   8E82         MOV     DPL,R6
   \   00011E   8F83         MOV     DPH,R7
   \   000120   D0E0         POP     A
   \   000122   F0           MOVX    @DPTR,A
   \   000123   8E82         MOV     DPL,R6
   \   000125   8F83         MOV     DPH,R7
   \   000127   A3           INC     DPTR
   \   000128   AE82         MOV     R6,DPL
   \   00012A   AF83         MOV     R7,DPH
   1153          
   1154            *pBuf++ = NumInClusters; // Input cluster list
   \   00012C   E5..         MOV     A,?V7
   \   00012E   C0E0         PUSH    A
   \   000130   8E82         MOV     DPL,R6
   \   000132   8F83         MOV     DPH,R7
   \   000134   D0E0         POP     A
   \   000136   F0           MOVX    @DPTR,A
   \   000137   8E82         MOV     DPL,R6
   \   000139   8F83         MOV     DPH,R7
   \   00013B   A3           INC     DPTR
   \   00013C   AE82         MOV     R6,DPL
   \   00013E   AF83         MOV     R7,DPH
   1155            for ( i = 0; i < NumInClusters; ++i )
   \   000140   75..00       MOV     ?V4,#0x0
   \                     ??ZDP_EndDeviceBindReq_4:
   \   000143   E5..         MOV     A,?V4
   \   000145   C3           CLR     C
   \   000146   95..         SUBB    A,?V7
   \   000148   507E         JNC     ??ZDP_EndDeviceBindReq_5
   1156            {
   1157              *pBuf++ = LO_UINT16(InClusterList[i]);
   \   00014A   A8..         MOV     R0,?V4
   \   00014C   7900         MOV     R1,#0x0
   \   00014E   E8           MOV     A,R0
   \   00014F   75F002       MOV     B,#0x2
   \   000152   A4           MUL     AB
   \   000153   C8           XCH     A,R0
   \   000154   AAF0         MOV     R2,B
   \   000156   75F000       MOV     B,#0x0
   \   000159   A4           MUL     AB
   \   00015A   2A           ADD     A,R2
   \   00015B   FA           MOV     R2,A
   \   00015C   75F002       MOV     B,#0x2
   \   00015F   E9           MOV     A,R1
   \   000160   A4           MUL     AB
   \   000161   2A           ADD     A,R2
   \   000162   F9           MOV     R1,A
   \   000163   E5..         MOV     A,?V12
   \   000165   28           ADD     A,R0
   \   000166   F582         MOV     DPL,A
   \   000168   E5..         MOV     A,?V13
   \   00016A   39           ADDC    A,R1
   \   00016B   F583         MOV     DPH,A
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   F8           MOV     R0,A
   \   00016F   A3           INC     DPTR
   \   000170   E0           MOVX    A,@DPTR
   \   000171   F9           MOV     R1,A
   \   000172   E8           MOV     A,R0
   \   000173   C0E0         PUSH    A
   \   000175   8E82         MOV     DPL,R6
   \   000177   8F83         MOV     DPH,R7
   \   000179   D0E0         POP     A
   \   00017B   F0           MOVX    @DPTR,A
   \   00017C   8E82         MOV     DPL,R6
   \   00017E   8F83         MOV     DPH,R7
   \   000180   A3           INC     DPTR
   \   000181   AE82         MOV     R6,DPL
   \   000183   AF83         MOV     R7,DPH
   1158              *pBuf++ = HI_UINT16(InClusterList[i]);
   \   000185   A8..         MOV     R0,?V4
   \   000187   7900         MOV     R1,#0x0
   \   000189   E8           MOV     A,R0
   \   00018A   75F002       MOV     B,#0x2
   \   00018D   A4           MUL     AB
   \   00018E   C8           XCH     A,R0
   \   00018F   AAF0         MOV     R2,B
   \   000191   75F000       MOV     B,#0x0
   \   000194   A4           MUL     AB
   \   000195   2A           ADD     A,R2
   \   000196   FA           MOV     R2,A
   \   000197   75F002       MOV     B,#0x2
   \   00019A   E9           MOV     A,R1
   \   00019B   A4           MUL     AB
   \   00019C   2A           ADD     A,R2
   \   00019D   F9           MOV     R1,A
   \   00019E   E5..         MOV     A,?V12
   \   0001A0   28           ADD     A,R0
   \   0001A1   F582         MOV     DPL,A
   \   0001A3   E5..         MOV     A,?V13
   \   0001A5   39           ADDC    A,R1
   \   0001A6   F583         MOV     DPH,A
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   F8           MOV     R0,A
   \   0001AA   A3           INC     DPTR
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   F9           MOV     R1,A
   \   0001AD   E4           CLR     A
   \   0001AE   C9           XCH     A,R1
   \   0001AF   F8           MOV     R0,A
   \   0001B0   E8           MOV     A,R0
   \   0001B1   C0E0         PUSH    A
   \   0001B3   8E82         MOV     DPL,R6
   \   0001B5   8F83         MOV     DPH,R7
   \   0001B7   D0E0         POP     A
   \   0001B9   F0           MOVX    @DPTR,A
   \   0001BA   8E82         MOV     DPL,R6
   \   0001BC   8F83         MOV     DPH,R7
   \   0001BE   A3           INC     DPTR
   \   0001BF   AE82         MOV     R6,DPL
   \   0001C1   AF83         MOV     R7,DPH
   1159            }
   \   0001C3   05..         INC     ?V4
   \   0001C5   02....       LJMP    ??ZDP_EndDeviceBindReq_4 & 0xFFFF
   1160          
   1161            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0001C8   E5..         MOV     A,?V6
   \   0001CA   C0E0         PUSH    A
   \   0001CC   8E82         MOV     DPL,R6
   \   0001CE   8F83         MOV     DPH,R7
   \   0001D0   D0E0         POP     A
   \   0001D2   F0           MOVX    @DPTR,A
   \   0001D3   8E82         MOV     DPL,R6
   \   0001D5   8F83         MOV     DPH,R7
   \   0001D7   A3           INC     DPTR
   \   0001D8   AE82         MOV     R6,DPL
   \   0001DA   AF83         MOV     R7,DPH
   1162            for ( i = 0; i < NumOutClusters; ++i )
   \   0001DC   75..00       MOV     ?V4,#0x0
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0001DF   E5..         MOV     A,?V4
   \   0001E1   C3           CLR     C
   \   0001E2   95..         SUBB    A,?V6
   \   0001E4   507E         JNC     ??ZDP_EndDeviceBindReq_7
   1163            {
   1164              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \   0001E6   A8..         MOV     R0,?V4
   \   0001E8   7900         MOV     R1,#0x0
   \   0001EA   E8           MOV     A,R0
   \   0001EB   75F002       MOV     B,#0x2
   \   0001EE   A4           MUL     AB
   \   0001EF   C8           XCH     A,R0
   \   0001F0   AAF0         MOV     R2,B
   \   0001F2   75F000       MOV     B,#0x0
   \   0001F5   A4           MUL     AB
   \   0001F6   2A           ADD     A,R2
   \   0001F7   FA           MOV     R2,A
   \   0001F8   75F002       MOV     B,#0x2
   \   0001FB   E9           MOV     A,R1
   \   0001FC   A4           MUL     AB
   \   0001FD   2A           ADD     A,R2
   \   0001FE   F9           MOV     R1,A
   \   0001FF   E5..         MOV     A,?V10
   \   000201   28           ADD     A,R0
   \   000202   F582         MOV     DPL,A
   \   000204   E5..         MOV     A,?V11
   \   000206   39           ADDC    A,R1
   \   000207   F583         MOV     DPH,A
   \   000209   E0           MOVX    A,@DPTR
   \   00020A   F8           MOV     R0,A
   \   00020B   A3           INC     DPTR
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F9           MOV     R1,A
   \   00020E   E8           MOV     A,R0
   \   00020F   C0E0         PUSH    A
   \   000211   8E82         MOV     DPL,R6
   \   000213   8F83         MOV     DPH,R7
   \   000215   D0E0         POP     A
   \   000217   F0           MOVX    @DPTR,A
   \   000218   8E82         MOV     DPL,R6
   \   00021A   8F83         MOV     DPH,R7
   \   00021C   A3           INC     DPTR
   \   00021D   AE82         MOV     R6,DPL
   \   00021F   AF83         MOV     R7,DPH
   1165              *pBuf++ = HI_UINT16(OutClusterList[i]);
   \   000221   A8..         MOV     R0,?V4
   \   000223   7900         MOV     R1,#0x0
   \   000225   E8           MOV     A,R0
   \   000226   75F002       MOV     B,#0x2
   \   000229   A4           MUL     AB
   \   00022A   C8           XCH     A,R0
   \   00022B   AAF0         MOV     R2,B
   \   00022D   75F000       MOV     B,#0x0
   \   000230   A4           MUL     AB
   \   000231   2A           ADD     A,R2
   \   000232   FA           MOV     R2,A
   \   000233   75F002       MOV     B,#0x2
   \   000236   E9           MOV     A,R1
   \   000237   A4           MUL     AB
   \   000238   2A           ADD     A,R2
   \   000239   F9           MOV     R1,A
   \   00023A   E5..         MOV     A,?V10
   \   00023C   28           ADD     A,R0
   \   00023D   F582         MOV     DPL,A
   \   00023F   E5..         MOV     A,?V11
   \   000241   39           ADDC    A,R1
   \   000242   F583         MOV     DPH,A
   \   000244   E0           MOVX    A,@DPTR
   \   000245   F8           MOV     R0,A
   \   000246   A3           INC     DPTR
   \   000247   E0           MOVX    A,@DPTR
   \   000248   F9           MOV     R1,A
   \   000249   E4           CLR     A
   \   00024A   C9           XCH     A,R1
   \   00024B   F8           MOV     R0,A
   \   00024C   E8           MOV     A,R0
   \   00024D   C0E0         PUSH    A
   \   00024F   8E82         MOV     DPL,R6
   \   000251   8F83         MOV     DPH,R7
   \   000253   D0E0         POP     A
   \   000255   F0           MOVX    @DPTR,A
   \   000256   8E82         MOV     DPL,R6
   \   000258   8F83         MOV     DPH,R7
   \   00025A   A3           INC     DPTR
   \   00025B   AE82         MOV     R6,DPL
   \   00025D   AF83         MOV     R7,DPH
   1166            }
   \   00025F   05..         INC     ?V4
   \   000261   02....       LJMP    ??ZDP_EndDeviceBindReq_6 & 0xFFFF
   1167          
   1168            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \                     ??ZDP_EndDeviceBindReq_7:
   \   000264                ; Setup parameters for call to function fillAndSend
   \   000264   75..20       MOV     ?V8,#0x20
   \   000267   75..00       MOV     ?V9,#0x0
   \   00026A   78..         MOV     R0,#?V8
   \   00026C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026F   A9..         MOV     R1,?V5
   \   000271   7404         MOV     A,#0x4
   \   000273   12....       LCALL   ?XSTACK_DISP0_8
   \   000276   E0           MOVX    A,@DPTR
   \   000277   FC           MOV     R4,A
   \   000278   A3           INC     DPTR
   \   000279   E0           MOVX    A,@DPTR
   \   00027A   FD           MOV     R5,A
   \   00027B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00027D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00027F   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000282   7402         MOV     A,#0x2
   \   000284   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   000287   7404         MOV     A,#0x4
   \   000289   12....       LCALL   ?DEALLOC_XSTACK8
   \   00028C   7F0F         MOV     R7,#0xf
   \   00028E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1169          }
   1170          
   1171          /*********************************************************************
   1172           * @fn          ZDP_BindUnbindReq
   1173           *
   1174           * @brief       This builds and send a Bind_req or Unbind_req message
   1175           *              Depending on the ClusterID. This function
   1176           *              sends a unicast message to the local coordinator.
   1177           *
   1178           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1179           * @param       dstAddr - destination address of the message
   1180           * @param       SourceAddr - source 64 bit address of the binding
   1181           * @param       SrcEPIntf - Source endpoint/interface
   1182           * @param       ClusterID - Binding cluster ID
   1183           * @param       DestinationAddr - destination 64 bit addr of binding
   1184           * @param       DstEPIntf - destination endpoint/interface
   1185           * @param       SecurityEnable - Security Options
   1186           *
   1187           * @return      afStatus_t
   1188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1189          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1190                                        uint8 *SourceAddr, byte SrcEndPoint,
   1191                                        cId_t ClusterID,
   1192                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1193                                        byte SecurityEnable )
   1194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V12,R4
   \   00000B   8D..         MOV     ?V13,R5
   \   00000D   89..         MOV     ?V9,R1
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V14,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V15,A
   \   00001B   741A         MOV     A,#0x1a
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V1,A
   \   000027   741C         MOV     A,#0x1c
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V4,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V5,A
   \   000033   741E         MOV     A,#0x1e
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V8,A
   1195            uint8 *pBuf = ZDP_TmpBuf;
   \   00003B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FE           MOV     R6,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FF           MOV     R7,A
   1196            byte len;
   1197          
   1198            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1199          
   1200            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1201            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \   000043   75..0C       MOV     ?V6,#0xc
   1202            if ( destinationAddr->addrMode == Addr64Bit )
   \   000046   85..82       MOV     DPL,?V4
   \   000049   85..83       MOV     DPH,?V5
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6403         XRL     A,#0x3
   \   000057   7008         JNZ     ??ZDP_BindUnbindReq_0
   1203              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000059   7409         MOV     A,#0x9
   \   00005B   25..         ADD     A,?V6
   \   00005D   F5..         MOV     ?V6,A
   \   00005F   8019         SJMP    ??ZDP_BindUnbindReq_1
   1204            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000061   85..82       MOV     DPL,?V4
   \   000064   85..83       MOV     DPH,?V5
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   6401         XRL     A,#0x1
   \   000072   7006         JNZ     ??ZDP_BindUnbindReq_1
   1205              len += sizeof ( uint16 );
   \   000074   7402         MOV     A,#0x2
   \   000076   25..         ADD     A,?V6
   \   000078   F5..         MOV     ?V6,A
   1206          
   1207            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00007A                ; Setup parameters for call to function sAddrExtCpy
   \   00007A   AC..         MOV     R4,?V14
   \   00007C   AD..         MOV     R5,?V15
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000085   8A..         MOV     ?V10,R2
   \   000087   8B..         MOV     ?V11,R3
   \   000089   AE..         MOV     R6,?V10
   \   00008B   AF..         MOV     R7,?V11
   1208            *pBuf++ = SrcEndPoint;
   \   00008D   E5..         MOV     A,?V9
   \   00008F   C0E0         PUSH    A
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   D0E0         POP     A
   \   000097   F0           MOVX    @DPTR,A
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   A3           INC     DPTR
   \   00009D   AE82         MOV     R6,DPL
   \   00009F   AF83         MOV     R7,DPH
   1209          
   1210            *pBuf++ = LO_UINT16( ClusterID );
   \   0000A1   E5..         MOV     A,?V0
   \   0000A3   C0E0         PUSH    A
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   D0E0         POP     A
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   AE82         MOV     R6,DPL
   \   0000B3   AF83         MOV     R7,DPH
   1211          
   1212            *pBuf++ = HI_UINT16( ClusterID );
   \   0000B5   A8..         MOV     R0,?V0
   \   0000B7   A9..         MOV     R1,?V1
   \   0000B9   E4           CLR     A
   \   0000BA   C9           XCH     A,R1
   \   0000BB   F8           MOV     R0,A
   \   0000BC   E8           MOV     A,R0
   \   0000BD   C0E0         PUSH    A
   \   0000BF   8E82         MOV     DPL,R6
   \   0000C1   8F83         MOV     DPH,R7
   \   0000C3   D0E0         POP     A
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   8E82         MOV     DPL,R6
   \   0000C8   8F83         MOV     DPH,R7
   \   0000CA   A3           INC     DPTR
   \   0000CB   AE82         MOV     R6,DPL
   \   0000CD   AF83         MOV     R7,DPH
   1213            *pBuf++ = destinationAddr->addrMode;
   \   0000CF   85..82       MOV     DPL,?V4
   \   0000D2   85..83       MOV     DPH,?V5
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   C0E0         PUSH    A
   \   0000E0   8E82         MOV     DPL,R6
   \   0000E2   8F83         MOV     DPH,R7
   \   0000E4   D0E0         POP     A
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   8E82         MOV     DPL,R6
   \   0000E9   8F83         MOV     DPH,R7
   \   0000EB   A3           INC     DPTR
   \   0000EC   AE82         MOV     R6,DPL
   \   0000EE   AF83         MOV     R7,DPH
   1214            if ( destinationAddr->addrMode == Addr64Bit )
   \   0000F0   85..82       MOV     DPL,?V4
   \   0000F3   85..83       MOV     DPH,?V5
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   6403         XRL     A,#0x3
   \   000101   7020         JNZ     ??ZDP_BindUnbindReq_2
   1215            {
   1216              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   \   000103                ; Setup parameters for call to function sAddrExtCpy
   \   000103   AC..         MOV     R4,?V4
   \   000105   AD..         MOV     R5,?V5
   \   000107   EE           MOV     A,R6
   \   000108   FA           MOV     R2,A
   \   000109   EF           MOV     A,R7
   \   00010A   FB           MOV     R3,A
   \   00010B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00010E   8A..         MOV     ?V10,R2
   \   000110   8B..         MOV     ?V11,R3
   \   000112   AE..         MOV     R6,?V10
   \   000114   AF..         MOV     R7,?V11
   1217              *pBuf = DstEndPoint;
   \   000116   E5..         MOV     A,?V8
   \   000118   C0E0         PUSH    A
   \   00011A   8E82         MOV     DPL,R6
   \   00011C   8F83         MOV     DPH,R7
   \   00011E   D0E0         POP     A
   \   000120   F0           MOVX    @DPTR,A
   \   000121   8052         SJMP    ??ZDP_BindUnbindReq_3
   1218            }
   1219            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   000123   85..82       MOV     DPL,?V4
   \   000126   85..83       MOV     DPH,?V5
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   E0           MOVX    A,@DPTR
   \   000132   6401         XRL     A,#0x1
   \   000134   703F         JNZ     ??ZDP_BindUnbindReq_3
   1220            {
   1221              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000136   85..82       MOV     DPL,?V4
   \   000139   85..83       MOV     DPH,?V5
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   F8           MOV     R0,A
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F9           MOV     R1,A
   \   000141   E8           MOV     A,R0
   \   000142   C0E0         PUSH    A
   \   000144   8E82         MOV     DPL,R6
   \   000146   8F83         MOV     DPH,R7
   \   000148   D0E0         POP     A
   \   00014A   F0           MOVX    @DPTR,A
   \   00014B   8E82         MOV     DPL,R6
   \   00014D   8F83         MOV     DPH,R7
   \   00014F   A3           INC     DPTR
   \   000150   AE82         MOV     R6,DPL
   \   000152   AF83         MOV     R7,DPH
   1222              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \   000154   85..82       MOV     DPL,?V4
   \   000157   85..83       MOV     DPH,?V5
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F8           MOV     R0,A
   \   00015C   A3           INC     DPTR
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   F9           MOV     R1,A
   \   00015F   E4           CLR     A
   \   000160   C9           XCH     A,R1
   \   000161   F8           MOV     R0,A
   \   000162   E8           MOV     A,R0
   \   000163   C0E0         PUSH    A
   \   000165   8E82         MOV     DPL,R6
   \   000167   8F83         MOV     DPH,R7
   \   000169   D0E0         POP     A
   \   00016B   F0           MOVX    @DPTR,A
   \   00016C   8E82         MOV     DPL,R6
   \   00016E   8F83         MOV     DPH,R7
   \   000170   A3           INC     DPTR
   \   000171   AE82         MOV     R6,DPL
   \   000173   AF83         MOV     R7,DPH
   1223            }
   1224          
   1225            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_3:
   \   000175   90....       MOV     DPTR,#ZDP_TxOptions
   \   000178   7410         MOV     A,#0x10
   \   00017A   F0           MOVX    @DPTR,A
   \   00017B                ; Setup parameters for call to function fillAndSend
   \   00017B   78..         MOV     R0,#?V2
   \   00017D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000180   A9..         MOV     R1,?V6
   \   000182   AC..         MOV     R4,?V12
   \   000184   AD..         MOV     R5,?V13
   \   000186   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000188   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00018A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00018D   7402         MOV     A,#0x2
   \   00018F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000192   E9           MOV     A,R1
   \   000193   F5..         MOV     ?V7,A
   \   000195   90....       MOV     DPTR,#ZDP_TxOptions
   \   000198   7400         MOV     A,#0x0
   \   00019A   F0           MOVX    @DPTR,A
   \   00019B   A9..         MOV     R1,?V7
   \   00019D   7F10         MOV     R7,#0x10
   \   00019F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1226          }
   1227          
   1228          /*********************************************************************
   1229           * Network Management
   1230           */
   1231          
   1232          /*********************************************************************
   1233           * @fn          ZDP_MgmtNwkDiscReq
   1234           *
   1235           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1236           *              function sends a unicast message.
   1237           *
   1238           * @param       dstAddr - destination address of the message
   1239           * @param       ScanChannels - 32 bit address bit map
   1240           * @param       StartIndex - Starting index within the reporting network
   1241           *                           list
   1242           * @param       SecurityEnable - Security Options
   1243           *
   1244           * @return      afStatus_t
   1245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1246          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1247                                         uint32 ScanChannels,
   1248                                         byte ScanDuration,
   1249                                         byte StartIndex,
   1250                                         byte SecurityEnable )
   1251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V12,R2
   \   000007   8B..         MOV     ?V13,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FE           MOV     R6,A
   \   00000B   EC           MOV     A,R4
   \   00000C   FF           MOV     R7,A
   \   00000D   8D..         MOV     ?V8,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?L_MOV_X
   \   000019   85....       MOV     ?V4,?V0
   \   00001C   85....       MOV     ?V5,?V1
   \   00001F   85....       MOV     ?V6,?V2
   \   000022   85....       MOV     ?V7,?V3
   1252            uint8 *pBuf = ZDP_TmpBuf;
   \   000025   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V1,A
   1253            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   \   00002F   75..06       MOV     ?V2,#0x6
   1254          
   1255            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1256          
   1257            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   000032                ; Setup parameters for call to function osal_buffer_uint32
   \   000032   78..         MOV     R0,#?V4
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000037   AA..         MOV     R2,?V0
   \   000039   AB..         MOV     R3,?V1
   \   00003B   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   \   000043   8A..         MOV     ?V10,R2
   \   000045   8B..         MOV     ?V11,R3
   \   000047   85....       MOV     ?V0,?V10
   \   00004A   85....       MOV     ?V1,?V11
   1258          
   1259            *pBuf++ = ScanDuration;
   \   00004D   EE           MOV     A,R6
   \   00004E   C0E0         PUSH    A
   \   000050   85..82       MOV     DPL,?V0
   \   000053   85..83       MOV     DPH,?V1
   \   000056   D0E0         POP     A
   \   000058   F0           MOVX    @DPTR,A
   \   000059   85..82       MOV     DPL,?V0
   \   00005C   85..83       MOV     DPH,?V1
   \   00005F   A3           INC     DPTR
   \   000060   8582..       MOV     ?V0,DPL
   \   000063   8583..       MOV     ?V1,DPH
   1260            *pBuf = StartIndex;
   \   000066   EF           MOV     A,R7
   \   000067   C0E0         PUSH    A
   \   000069   85..82       MOV     DPL,?V0
   \   00006C   85..83       MOV     DPH,?V1
   \   00006F   D0E0         POP     A
   \   000071   F0           MOVX    @DPTR,A
   1261          
   1262            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   000072                ; Setup parameters for call to function fillAndSend
   \   000072   75..30       MOV     ?V10,#0x30
   \   000075   75..00       MOV     ?V11,#0x0
   \   000078   78..         MOV     R0,#?V10
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   A9..         MOV     R1,?V2
   \   00007F   AC..         MOV     R4,?V12
   \   000081   AD..         MOV     R5,?V13
   \   000083   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000085   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000087   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008F   7F0E         MOV     R7,#0xe
   \   000091   02....       LJMP    ?BANKED_LEAVE_XDATA
   1263          }
   1264          
   1265          /*********************************************************************
   1266           * @fn          ZDP_MgmtDirectJoinReq
   1267           *
   1268           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1269           *              function sends a unicast message.
   1270           *
   1271           * @param       dstAddr - destination address of the message
   1272           * @param       deviceAddr - 64 bit IEEE Address
   1273           * @param       SecurityEnable - Security Options
   1274           *
   1275           * @return      afStatus_t
   1276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1277          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1278                                         uint8 *deviceAddr,
   1279                                         byte capInfo,
   1280                                         byte SecurityEnable )
   1281          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V2,R1
   1282            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1283          
   1284            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \   00000F                ; Setup parameters for call to function sAddrExtCpy
   \   00000F   EE           MOV     A,R6
   \   000010   FC           MOV     R4,A
   \   000011   EF           MOV     A,R7
   \   000012   FD           MOV     R5,A
   \   000013   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FA           MOV     R2,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1285            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00001E   E5..         MOV     A,?V2
   \   000020   C0E0         PUSH    A
   \   000022   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   C8           XCH     A,R0
   \   00002A   2408         ADD     A,#0x8
   \   00002C   F582         MOV     DPL,A
   \   00002E   C8           XCH     A,R0
   \   00002F   3400         ADDC    A,#0x0
   \   000031   F583         MOV     DPH,A
   \   000033   D0E0         POP     A
   \   000035   F0           MOVX    @DPTR,A
   1286          
   1287            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000036                ; Setup parameters for call to function fillAndSend
   \   000036   75..35       MOV     ?V4,#0x35
   \   000039   75..00       MOV     ?V5,#0x0
   \   00003C   78..         MOV     R0,#?V4
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7909         MOV     R1,#0x9
   \   000043   AC..         MOV     R4,?V0
   \   000045   AD..         MOV     R5,?V1
   \   000047   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000049   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00004B   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   \   000053   7F06         MOV     R7,#0x6
   \   000055   02....       LJMP    ?BANKED_LEAVE_XDATA
   1288          }
   1289          
   1290          /*********************************************************************
   1291           * @fn          ZDP_MgmtPermitJoinReq
   1292           *
   1293           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1294           *
   1295           * @param       dstAddr - destination address of the message
   1296           * @param       duration - Permit duration
   1297           * @param       TcSignificance - Trust Center Significance
   1298           *
   1299           * @return      afStatus_t
   1300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1301          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1302                                            byte TcSignificance, byte SecurityEnable )
   1303          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
   \   00000B   8C..         MOV     ?V1,R4
   \   00000D   8D..         MOV     ?V2,R5
   1304            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1305          
   1306            // Build buffer
   1307            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   00000F   E5..         MOV     A,?V0
   \   000011   C0E0         PUSH    A
   \   000013   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F583         MOV     DPH,A
   \   00001C   8882         MOV     DPL,R0
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   1308            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \   000021   E5..         MOV     A,?V1
   \   000023   C0E0         PUSH    A
   \   000025   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   8882         MOV     DPL,R0
   \   000030   A3           INC     DPTR
   \   000031   D0E0         POP     A
   \   000033   F0           MOVX    @DPTR,A
   1309          
   1310            // Send the message
   1311            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1312                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   000034                ; Setup parameters for call to function fillAndSend
   \   000034   75..36       MOV     ?V4,#0x36
   \   000037   75..00       MOV     ?V5,#0x0
   \   00003A   78..         MOV     R0,#?V4
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   7902         MOV     R1,#0x2
   \   000041   EE           MOV     A,R6
   \   000042   FC           MOV     R4,A
   \   000043   EF           MOV     A,R7
   \   000044   FD           MOV     R5,A
   \   000045   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000047   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000049   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   7F06         MOV     R7,#0x6
   \   000053   02....       LJMP    ?BANKED_LEAVE_XDATA
   1313          }
   1314          
   1315          /*********************************************************************
   1316           * @fn          ZDP_MgmtLeaveReq
   1317           *
   1318           * @brief       This builds and send a Mgmt_Leave_req message.
   1319           *
   1320           * @param       dstAddr - destination address of the message
   1321           *              IEEEAddr - IEEE adddress of device that is removed
   1322           *              RemoveChildren - set to 1 to remove the children of the
   1323           *                                device as well. 0 otherwise.
   1324           *              Rejoin - set to 1 if the removed device should rejoin
   1325                                   afterwards. 0 otherwise.
   1326           *
   1327           * @return      afStatus_t
   1328           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1329          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1330                           uint8 Rejoin, uint8 SecurityEnable )
   1331          
   1332          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V3,R1
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V2,A
   1333            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1334          
   1335            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \   000017                ; Setup parameters for call to function sAddrExtCpy
   \   000017   AC..         MOV     R4,?V0
   \   000019   AD..         MOV     R5,?V1
   \   00001B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1336            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   000026   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C8           XCH     A,R0
   \   00002E   2408         ADD     A,#0x8
   \   000030   F582         MOV     DPL,A
   \   000032   C8           XCH     A,R0
   \   000033   3400         ADDC    A,#0x0
   \   000035   F583         MOV     DPH,A
   \   000037   7400         MOV     A,#0x0
   \   000039   F0           MOVX    @DPTR,A
   1337          
   1338            if ( RemoveChildren == TRUE )
   \   00003A   7401         MOV     A,#0x1
   \   00003C   65..         XRL     A,?V3
   \   00003E   7015         JNZ     ??ZDP_MgmtLeaveReq_0
   1339            {
   1340              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000040   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F8           MOV     R0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   C8           XCH     A,R0
   \   000048   2408         ADD     A,#0x8
   \   00004A   F582         MOV     DPL,A
   \   00004C   C8           XCH     A,R0
   \   00004D   3400         ADDC    A,#0x0
   \   00004F   F583         MOV     DPH,A
   \   000051   E0           MOVX    A,@DPTR
   \   000052   D2E6         SETB    0xE0 /* A   */.6
   \   000054   F0           MOVX    @DPTR,A
   1341            }
   1342            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000055   7401         MOV     A,#0x1
   \   000057   65..         XRL     A,?V2
   \   000059   7015         JNZ     ??ZDP_MgmtLeaveReq_1
   1343            {
   1344              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   00005B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   C8           XCH     A,R0
   \   000063   2408         ADD     A,#0x8
   \   000065   F582         MOV     DPL,A
   \   000067   C8           XCH     A,R0
   \   000068   3400         ADDC    A,#0x0
   \   00006A   F583         MOV     DPH,A
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   D2E7         SETB    0xE0 /* A   */.7
   \   00006F   F0           MOVX    @DPTR,A
   1345            }
   1346          
   1347            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000070                ; Setup parameters for call to function fillAndSend
   \   000070   75..34       MOV     ?V4,#0x34
   \   000073   75..00       MOV     ?V5,#0x0
   \   000076   78..         MOV     R0,#?V4
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   7909         MOV     R1,#0x9
   \   00007D   EE           MOV     A,R6
   \   00007E   FC           MOV     R4,A
   \   00007F   EF           MOV     A,R7
   \   000080   FD           MOV     R5,A
   \   000081   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000083   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000085   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000088   7402         MOV     A,#0x2
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008D   7F06         MOV     R7,#0x6
   \   00008F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1348          }
   1349          
   1350          /*********************************************************************
   1351           * @fn          ZDP_MgmtNwkUpdateReq
   1352           *
   1353           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1354           *              function sends a unicast or broadcast message.
   1355           *
   1356           * @param       dstAddr - destination address of the message
   1357           * @param       ChannelMask - 32 bit address bit map
   1358           * @param       ScanDuration - length of time to spend scanning each channel
   1359           * @param       ScanCount - number of energy scans to be conducted
   1360           * @param       NwkUpdateId - NWk Update Id value
   1361           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1362           *                               bit set in its Node Descriptor
   1363           *
   1364           * @return      afStatus_t
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1367                                           uint32 ChannelMask,
   1368                                           uint8 ScanDuration,
   1369                                           uint8 ScanCount,
   1370                                           uint8 NwkUpdateId,
   1371                                           uint16 NwkManagerAddr )
   1372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V12,R2
   \   000007   8B..         MOV     ?V13,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V9,R4
   \   00000D   8D..         MOV     ?V8,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   78..         MOV     R0,#?V4
   \   000016   12....       LCALL   ?L_MOV_X
   \   000019   741A         MOV     A,#0x1a
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V2,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V3,A
   1373            uint8 *pBuf = ZDP_TmpBuf;
   \   000025   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V1,A
   1374            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00002F   7E05         MOV     R6,#0x5
   1375          
   1376            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000031                ; Setup parameters for call to function osal_buffer_uint32
   \   000031   78..         MOV     R0,#?V4
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000036   AA..         MOV     R2,?V0
   \   000038   AB..         MOV     R3,?V1
   \   00003A   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   8A..         MOV     ?V10,R2
   \   000044   8B..         MOV     ?V11,R3
   \   000046   85....       MOV     ?V0,?V10
   \   000049   85....       MOV     ?V1,?V11
   1377          
   1378            *pBuf++ = ScanDuration;
   \   00004C   EF           MOV     A,R7
   \   00004D   C0E0         PUSH    A
   \   00004F   85..82       MOV     DPL,?V0
   \   000052   85..83       MOV     DPH,?V1
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   85..82       MOV     DPL,?V0
   \   00005B   85..83       MOV     DPH,?V1
   \   00005E   A3           INC     DPTR
   \   00005F   8582..       MOV     ?V0,DPL
   \   000062   8583..       MOV     ?V1,DPH
   1379          
   1380            if ( ScanDuration <= 0x05 )
   \   000065   EF           MOV     A,R7
   \   000066   C3           CLR     C
   \   000067   9406         SUBB    A,#0x6
   \   000069   501D         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1381            {
   1382              // Request is to scan over channelMask
   1383              len += sizeof( uint8 );
   \   00006B   0E           INC     R6
   1384          
   1385              *pBuf++ = ScanCount;
   \   00006C   E5..         MOV     A,?V9
   \   00006E   C0E0         PUSH    A
   \   000070   85..82       MOV     DPL,?V0
   \   000073   85..83       MOV     DPH,?V1
   \   000076   D0E0         POP     A
   \   000078   F0           MOVX    @DPTR,A
   \   000079   85..82       MOV     DPL,?V0
   \   00007C   85..83       MOV     DPH,?V1
   \   00007F   A3           INC     DPTR
   \   000080   8582..       MOV     ?V0,DPL
   \   000083   8583..       MOV     ?V1,DPH
   \   000086   8068         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1386            }
   1387            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   000088   74FE         MOV     A,#-0x2
   \   00008A   6F           XRL     A,R7
   \   00008B   6005         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   00008D   74FF         MOV     A,#-0x1
   \   00008F   6F           XRL     A,R7
   \   000090   705E         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1388            {
   1389              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1390              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000092   0E           INC     R6
   1391          
   1392              *pBuf++ = NwkUpdateId;
   \   000093   E5..         MOV     A,?V8
   \   000095   C0E0         PUSH    A
   \   000097   85..82       MOV     DPL,?V0
   \   00009A   85..83       MOV     DPH,?V1
   \   00009D   D0E0         POP     A
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   85..82       MOV     DPL,?V0
   \   0000A3   85..83       MOV     DPH,?V1
   \   0000A6   A3           INC     DPTR
   \   0000A7   8582..       MOV     ?V0,DPL
   \   0000AA   8583..       MOV     ?V1,DPH
   1393          
   1394              if ( ScanDuration == 0xFF )
   \   0000AD   74FF         MOV     A,#-0x1
   \   0000AF   6F           XRL     A,R7
   \   0000B0   703E         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1395              {
   1396                len += sizeof( uint16 );
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   2E           ADD     A,R6
   \   0000B5   FE           MOV     R6,A
   1397          
   1398                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \   0000B6   E5..         MOV     A,?V2
   \   0000B8   C0E0         PUSH    A
   \   0000BA   85..82       MOV     DPL,?V0
   \   0000BD   85..83       MOV     DPH,?V1
   \   0000C0   D0E0         POP     A
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   85..82       MOV     DPL,?V0
   \   0000C6   85..83       MOV     DPH,?V1
   \   0000C9   A3           INC     DPTR
   \   0000CA   8582..       MOV     ?V0,DPL
   \   0000CD   8583..       MOV     ?V1,DPH
   1399                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   0000D0   A8..         MOV     R0,?V2
   \   0000D2   A9..         MOV     R1,?V3
   \   0000D4   E4           CLR     A
   \   0000D5   C9           XCH     A,R1
   \   0000D6   F8           MOV     R0,A
   \   0000D7   E8           MOV     A,R0
   \   0000D8   C0E0         PUSH    A
   \   0000DA   85..82       MOV     DPL,?V0
   \   0000DD   85..83       MOV     DPH,?V1
   \   0000E0   D0E0         POP     A
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   85..82       MOV     DPL,?V0
   \   0000E6   85..83       MOV     DPH,?V1
   \   0000E9   A3           INC     DPTR
   \   0000EA   8582..       MOV     ?V0,DPL
   \   0000ED   8583..       MOV     ?V1,DPH
   1400              }
   1401            }
   1402          
   1403            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   0000F0                ; Setup parameters for call to function fillAndSend
   \   0000F0   75..38       MOV     ?V10,#0x38
   \   0000F3   75..00       MOV     ?V11,#0x0
   \   0000F6   78..         MOV     R0,#?V10
   \   0000F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FB   EE           MOV     A,R6
   \   0000FC   F9           MOV     R1,A
   \   0000FD   AC..         MOV     R4,?V12
   \   0000FF   AD..         MOV     R5,?V13
   \   000101   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000103   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000105   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000108   7402         MOV     A,#0x2
   \   00010A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010D   7F0E         MOV     R7,#0xe
   \   00010F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1404          }
   1405          
   1406          
   1407          /*********************************************************************
   1408           * Network Management Responses
   1409           */
   1410          
   1411          /*********************************************************************
   1412           * @fn          ZDP_MgmtNwkDiscRsp
   1413           *
   1414           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1415           *              function sends a unicast message.
   1416           *
   1417           * @param       dstAddr - destination address of the message
   1418           * @param       Status - message status (ZDP_SUCCESS or other)
   1419           * @param       NetworkCount - Total number of networks found
   1420           * @param       StartIndex - Starting index within the reporting network
   1421           *                           list
   1422           * @param       NetworkListCount - number of network lists included
   1423           *                                 in this message
   1424           * @param       NetworkList - List of network descriptors
   1425           * @param       SecurityEnable - Security Options
   1426           *
   1427           * @return      afStatus_t
   1428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1429          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1430                                      byte Status,
   1431                                      byte NetworkCount,
   1432                                      byte StartIndex,
   1433                                      byte NetworkListCount,
   1434                                      networkDesc_t *NetworkList,
   1435                                      byte SecurityEnable )
   1436          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V14,R2
   \   000018   8B..         MOV     ?V15,R3
   \   00001A   8C..         MOV     ?V12,R4
   \   00001C   8D..         MOV     ?V11,R5
   \   00001E   7419         MOV     A,#0x19
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V10,A
   \   000026   741A         MOV     A,#0x1a
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V3,A
   \   00002E   741B         MOV     A,#0x1b
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V1,A
   1437            uint8 *buf;
   1438            uint8 *pBuf;
   1439            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   \   00003A   75..04       MOV     ?V2,#0x4
   1440            byte idx;
   1441          
   1442            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1443          
   1444            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   00003D   75F00C       MOV     B,#0xc
   \   000040   E5..         MOV     A,?V3
   \   000042   A4           MUL     AB
   \   000043   25..         ADD     A,?V2
   \   000045   F5..         MOV     ?V2,A
   1445          
   1446            buf = osal_mem_alloc( len+1 );
   \   000047                ; Setup parameters for call to function osal_mem_alloc
   \   000047   A8..         MOV     R0,?V2
   \   000049   7900         MOV     R1,#0x0
   \   00004B   E8           MOV     A,R0
   \   00004C   2401         ADD     A,#0x1
   \   00004E   FA           MOV     R2,A
   \   00004F   E4           CLR     A
   \   000050   39           ADDC    A,R1
   \   000051   FB           MOV     R3,A
   \   000052   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000055   8A..         MOV     ?V8,R2
   \   000057   8B..         MOV     ?V9,R3
   \   000059   85....       MOV     ?V6,?V8
   \   00005C   85....       MOV     ?V7,?V9
   1447            if ( buf == NULL )
   \   00005F   E5..         MOV     A,?V6
   \   000061   45..         ORL     A,?V7
   \   000063   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1448            {
   1449              return afStatus_MEM_FAIL;
   \   000065   7910         MOV     R1,#0x10
   \   000067   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_1 & 0xFFFF
   1450            }
   1451          
   1452            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00006A   85..82       MOV     DPL,?V6
   \   00006D   85..83       MOV     DPH,?V7
   \   000070   A3           INC     DPTR
   \   000071   AE82         MOV     R6,DPL
   \   000073   AF83         MOV     R7,DPH
   1453          
   1454            *pBuf++ = Status;
   \   000075   E5..         MOV     A,?V12
   \   000077   C0E0         PUSH    A
   \   000079   8E82         MOV     DPL,R6
   \   00007B   8F83         MOV     DPH,R7
   \   00007D   D0E0         POP     A
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   A3           INC     DPTR
   \   000085   AE82         MOV     R6,DPL
   \   000087   AF83         MOV     R7,DPH
   1455            *pBuf++ = NetworkCount;
   \   000089   E5..         MOV     A,?V11
   \   00008B   C0E0         PUSH    A
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   D0E0         POP     A
   \   000093   F0           MOVX    @DPTR,A
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   A3           INC     DPTR
   \   000099   AE82         MOV     R6,DPL
   \   00009B   AF83         MOV     R7,DPH
   1456            *pBuf++ = StartIndex;
   \   00009D   E5..         MOV     A,?V10
   \   00009F   C0E0         PUSH    A
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   D0E0         POP     A
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   A3           INC     DPTR
   \   0000AD   AE82         MOV     R6,DPL
   \   0000AF   AF83         MOV     R7,DPH
   1457            *pBuf++ = NetworkListCount;
   \   0000B1   E5..         MOV     A,?V3
   \   0000B3   C0E0         PUSH    A
   \   0000B5   8E82         MOV     DPL,R6
   \   0000B7   8F83         MOV     DPH,R7
   \   0000B9   D0E0         POP     A
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   A3           INC     DPTR
   \   0000C1   AE82         MOV     R6,DPL
   \   0000C3   AF83         MOV     R7,DPH
   1458          
   1459            for ( idx = 0; idx < NetworkListCount; idx++ )
   \   0000C5   75..00       MOV     ?V4,#0x0
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   0000C8   E5..         MOV     A,?V4
   \   0000CA   C3           CLR     C
   \   0000CB   95..         SUBB    A,?V3
   \   0000CD   4003         JC      $+5
   \   0000CF   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   1460            {
   1461              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   \   0000D2                ; Setup parameters for call to function sAddrExtCpy
   \   0000D2   E5..         MOV     A,?V0
   \   0000D4   240B         ADD     A,#0xb
   \   0000D6   FC           MOV     R4,A
   \   0000D7   E4           CLR     A
   \   0000D8   35..         ADDC    A,?V1
   \   0000DA   FD           MOV     R5,A
   \   0000DB   EE           MOV     A,R6
   \   0000DC   FA           MOV     R2,A
   \   0000DD   EF           MOV     A,R7
   \   0000DE   FB           MOV     R3,A
   \   0000DF   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1462              pBuf += Z_EXTADDR_LEN;
   \   0000E2   EE           MOV     A,R6
   \   0000E3   2408         ADD     A,#0x8
   \   0000E5   FE           MOV     R6,A
   \   0000E6   5001         JNC     ??ZDP_MgmtNwkDiscRsp_4
   \   0000E8   0F           INC     R7
   1463          
   1464              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   0000E9   85..82       MOV     DPL,?V0
   \   0000EC   85..83       MOV     DPH,?V1
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   C0E0         PUSH    A
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   8E82         MOV     DPL,R6
   \   0000FD   8F83         MOV     DPH,R7
   \   0000FF   A3           INC     DPTR
   \   000100   AE82         MOV     R6,DPL
   \   000102   AF83         MOV     R7,DPH
   1465              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   \   000104   85..82       MOV     DPL,?V0
   \   000107   85..83       MOV     DPH,?V1
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   C0E0         PUSH    A
   \   000113   8E82         MOV     DPL,R6
   \   000115   8F83         MOV     DPH,R7
   \   000117   D0E0         POP     A
   \   000119   F0           MOVX    @DPTR,A
   1466              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   \   00011A   85..82       MOV     DPL,?V0
   \   00011D   85..83       MOV     DPH,?V1
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \   000126   C4           SWAP    A
   \   000127   54F0         ANL     A,#0xf0
   \   000129   F8           MOV     R0,A
   \   00012A   8E82         MOV     DPL,R6
   \   00012C   8F83         MOV     DPH,R7
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   48           ORL     A,R0
   \   000130   F0           MOVX    @DPTR,A
   \   000131   8E82         MOV     DPL,R6
   \   000133   8F83         MOV     DPH,R7
   \   000135   A3           INC     DPTR
   \   000136   AE82         MOV     R6,DPL
   \   000138   AF83         MOV     R7,DPH
   1467              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   \   00013A   8E82         MOV     DPL,R6
   \   00013C   8F83         MOV     DPH,R7
   \   00013E   740F         MOV     A,#0xf
   \   000140   F0           MOVX    @DPTR,A
   1468              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   \   000141   8E82         MOV     DPL,R6
   \   000143   8F83         MOV     DPH,R7
   \   000145   E0           MOVX    A,@DPTR
   \   000146   44F0         ORL     A,#0xf0
   \   000148   F0           MOVX    @DPTR,A
   \   000149   8E82         MOV     DPL,R6
   \   00014B   8F83         MOV     DPH,R7
   \   00014D   A3           INC     DPTR
   \   00014E   AE82         MOV     R6,DPL
   \   000150   AF83         MOV     R7,DPH
   1469          
   1470              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   \   000152   85..82       MOV     DPL,?V0
   \   000155   85..83       MOV     DPH,?V1
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   64FE         XRL     A,#0xfe
   \   000162   7004         JNZ     ??ZDP_MgmtNwkDiscRsp_5
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   64FF         XRL     A,#0xff
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   000168   6012         JZ      ??ZDP_MgmtNwkDiscRsp_6
   1471              {
   1472                *pBuf++ = TRUE;                         // Permit Joining
   \   00016A   8E82         MOV     DPL,R6
   \   00016C   8F83         MOV     DPH,R7
   \   00016E   7401         MOV     A,#0x1
   \   000170   F0           MOVX    @DPTR,A
   \   000171   8E82         MOV     DPL,R6
   \   000173   8F83         MOV     DPH,R7
   \   000175   A3           INC     DPTR
   \   000176   AE82         MOV     R6,DPL
   \   000178   AF83         MOV     R7,DPH
   \   00017A   8010         SJMP    ??ZDP_MgmtNwkDiscRsp_7
   1473              }
   1474              else
   1475              {
   1476                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   00017C   8E82         MOV     DPL,R6
   \   00017E   8F83         MOV     DPH,R7
   \   000180   7400         MOV     A,#0x0
   \   000182   F0           MOVX    @DPTR,A
   \   000183   8E82         MOV     DPL,R6
   \   000185   8F83         MOV     DPH,R7
   \   000187   A3           INC     DPTR
   \   000188   AE82         MOV     R6,DPL
   \   00018A   AF83         MOV     R7,DPH
   1477              }
   1478          
   1479              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \                     ??ZDP_MgmtNwkDiscRsp_7:
   \   00018C   E5..         MOV     A,?V0
   \   00018E   2414         ADD     A,#0x14
   \   000190   F582         MOV     DPL,A
   \   000192   E4           CLR     A
   \   000193   35..         ADDC    A,?V1
   \   000195   F583         MOV     DPH,A
   \   000197   E0           MOVX    A,@DPTR
   \   000198   F5..         MOV     ?V0,A
   \   00019A   A3           INC     DPTR
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   F5..         MOV     ?V1,A
   1480            }
   \   00019E   05..         INC     ?V4
   \   0001A0   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
   1481          
   1482            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   0001A3   85..82       MOV     DPL,?V6
   \   0001A6   85..83       MOV     DPH,?V7
   \   0001A9   A3           INC     DPTR
   \   0001AA   A882         MOV     R0,DPL
   \   0001AC   A983         MOV     R1,DPH
   \   0001AE   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001B1   E8           MOV     A,R0
   \   0001B2   F0           MOVX    @DPTR,A
   \   0001B3   A3           INC     DPTR
   \   0001B4   E9           MOV     A,R1
   \   0001B5   F0           MOVX    @DPTR,A
   \   0001B6                ; Setup parameters for call to function fillAndSend
   \   0001B6   75..30       MOV     ?V8,#0x30
   \   0001B9   75..80       MOV     ?V9,#-0x80
   \   0001BC   78..         MOV     R0,#?V8
   \   0001BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C1   A9..         MOV     R1,?V2
   \   0001C3   AC..         MOV     R4,?V14
   \   0001C5   AD..         MOV     R5,?V15
   \   0001C7   7402         MOV     A,#0x2
   \   0001C9   12....       LCALL   ?XSTACK_DISP101_8
   \   0001CC   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0001CF   7402         MOV     A,#0x2
   \   0001D1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D4   E9           MOV     A,R1
   \   0001D5   F5..         MOV     ?V5,A
   \   0001D7                ; Setup parameters for call to function osal_mem_free
   \   0001D7   AA..         MOV     R2,?V6
   \   0001D9   AB..         MOV     R3,?V7
   \   0001DB   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001DE   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001E1   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0001E3   F0           MOVX    @DPTR,A
   \   0001E4   A3           INC     DPTR
   \   0001E5   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0001E7   F0           MOVX    @DPTR,A
   \   0001E8   A9..         MOV     R1,?V5
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   0001EA   7401         MOV     A,#0x1
   \   0001EC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001EF   7F10         MOV     R7,#0x10
   \   0001F1   02....       LJMP    ?BANKED_LEAVE_XDATA
   1483          }
   1484          
   1485          /*********************************************************************
   1486           * @fn          ZDP_MgmtLqiRsp
   1487           *
   1488           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1489           *              function sends a unicast message.
   1490           *
   1491           * @param       dstAddr - destination address of the message
   1492           * @param       Status - message status (ZDP_SUCCESS or other)
   1493           * @param       NeighborLqiEntries - Total number of entries found
   1494           * @param       StartIndex - Starting index within the reporting list
   1495           * @param       NeighborLqiCount - number of lists included
   1496           *                                 in this message
   1497           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1498           *                is the list to be sent, not the entire list
   1499           * @param       SecurityEnable - true if secure
   1500           *
   1501           * @return      ZStatus_t
   1502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1503          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1504                                    byte Status,
   1505                                    byte NeighborLqiEntries,
   1506                                    byte StartIndex,
   1507                                    byte NeighborLqiCount,
   1508                                    ZDP_MgmtLqiItem_t* NeighborList,
   1509                                    byte SecurityEnable )
   1510          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V14,R2
   \   000018   8B..         MOV     ?V15,R3
   \   00001A   8C..         MOV     ?V4,R4
   \   00001C   8D..         MOV     ?V12,R5
   \   00001E   7419         MOV     A,#0x19
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V11,A
   \   000026   741A         MOV     A,#0x1a
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V6,A
   1511            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   00002E   741B         MOV     A,#0x1b
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V1,A
   1512            uint8 *buf, *pBuf;
   1513            byte len, x;
   1514          
   1515            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1516          
   1517            if ( ZSuccess != Status )
   \   00003A   E5..         MOV     A,?V4
   \   00003C   6033         JZ      ??ZDP_MgmtLqiRsp_0
   1518            {
   1519              ZDP_TmpBuf[0] = Status;
   \   00003E   E5..         MOV     A,?V4
   \   000040   C0E0         PUSH    A
   \   000042   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F8           MOV     R0,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F583         MOV     DPH,A
   \   00004B   8882         MOV     DPL,R0
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
   1520              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000050                ; Setup parameters for call to function fillAndSend
   \   000050   75..31       MOV     ?V8,#0x31
   \   000053   75..80       MOV     ?V9,#-0x80
   \   000056   78..         MOV     R0,#?V8
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   7901         MOV     R1,#0x1
   \   00005D   AC..         MOV     R4,?V14
   \   00005F   AD..         MOV     R5,?V15
   \   000061   7402         MOV     A,#0x2
   \   000063   12....       LCALL   ?XSTACK_DISP101_8
   \   000066   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   02....       LJMP    ??ZDP_MgmtLqiRsp_1 & 0xFFFF
   1521            }
   1522          
   1523            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1524            //  neighbor LQI data.
   1525            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000071   75F016       MOV     B,#0x16
   \   000074   E5..         MOV     A,?V6
   \   000076   A4           MUL     AB
   \   000077   2404         ADD     A,#0x4
   \   000079   F5..         MOV     ?V10,A
   1526          
   1527            buf = osal_mem_alloc( len+1 );
   \   00007B                ; Setup parameters for call to function osal_mem_alloc
   \   00007B   A8..         MOV     R0,?V10
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   E8           MOV     A,R0
   \   000080   2401         ADD     A,#0x1
   \   000082   FA           MOV     R2,A
   \   000083   E4           CLR     A
   \   000084   39           ADDC    A,R1
   \   000085   FB           MOV     R3,A
   \   000086   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000089   8A..         MOV     ?V8,R2
   \   00008B   8B..         MOV     ?V9,R3
   \   00008D   85....       MOV     ?V2,?V8
   \   000090   85....       MOV     ?V3,?V9
   1528            if ( buf == NULL )
   \   000093   E5..         MOV     A,?V2
   \   000095   45..         ORL     A,?V3
   \   000097   7005         JNZ     ??ZDP_MgmtLqiRsp_2
   1529            {
   1530              return afStatus_MEM_FAIL;
   \   000099   7910         MOV     R1,#0x10
   \   00009B   02....       LJMP    ??ZDP_MgmtLqiRsp_1 & 0xFFFF
   1531            }
   1532          
   1533            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_2:
   \   00009E   85..82       MOV     DPL,?V2
   \   0000A1   85..83       MOV     DPH,?V3
   \   0000A4   A3           INC     DPTR
   \   0000A5   AE82         MOV     R6,DPL
   \   0000A7   AF83         MOV     R7,DPH
   1534          
   1535            *pBuf++ = Status;
   \   0000A9   E5..         MOV     A,?V4
   \   0000AB   C0E0         PUSH    A
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   D0E0         POP     A
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   8E82         MOV     DPL,R6
   \   0000B6   8F83         MOV     DPH,R7
   \   0000B8   A3           INC     DPTR
   \   0000B9   AE82         MOV     R6,DPL
   \   0000BB   AF83         MOV     R7,DPH
   1536            *pBuf++ = NeighborLqiEntries;
   \   0000BD   E5..         MOV     A,?V12
   \   0000BF   C0E0         PUSH    A
   \   0000C1   8E82         MOV     DPL,R6
   \   0000C3   8F83         MOV     DPH,R7
   \   0000C5   D0E0         POP     A
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   8E82         MOV     DPL,R6
   \   0000CA   8F83         MOV     DPH,R7
   \   0000CC   A3           INC     DPTR
   \   0000CD   AE82         MOV     R6,DPL
   \   0000CF   AF83         MOV     R7,DPH
   1537            *pBuf++ = StartIndex;
   \   0000D1   E5..         MOV     A,?V11
   \   0000D3   C0E0         PUSH    A
   \   0000D5   8E82         MOV     DPL,R6
   \   0000D7   8F83         MOV     DPH,R7
   \   0000D9   D0E0         POP     A
   \   0000DB   F0           MOVX    @DPTR,A
   \   0000DC   8E82         MOV     DPL,R6
   \   0000DE   8F83         MOV     DPH,R7
   \   0000E0   A3           INC     DPTR
   \   0000E1   AE82         MOV     R6,DPL
   \   0000E3   AF83         MOV     R7,DPH
   1538            *pBuf++ = NeighborLqiCount;
   \   0000E5   E5..         MOV     A,?V6
   \   0000E7   C0E0         PUSH    A
   \   0000E9   8E82         MOV     DPL,R6
   \   0000EB   8F83         MOV     DPH,R7
   \   0000ED   D0E0         POP     A
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   8E82         MOV     DPL,R6
   \   0000F2   8F83         MOV     DPH,R7
   \   0000F4   A3           INC     DPTR
   \   0000F5   AE82         MOV     R6,DPL
   \   0000F7   AF83         MOV     R7,DPH
   1539          
   1540            for ( x = 0; x < NeighborLqiCount; x++ )
   \   0000F9   75..00       MOV     ?V7,#0x0
   \                     ??ZDP_MgmtLqiRsp_3:
   \   0000FC   E5..         MOV     A,?V7
   \   0000FE   C3           CLR     C
   \   0000FF   95..         SUBB    A,?V6
   \   000101   4003         JC      $+5
   \   000103   02....       LJMP    ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1541            {
   1542              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \   000106                ; Setup parameters for call to function sAddrExtCpy
   \   000106   E5..         MOV     A,?V0
   \   000108   2402         ADD     A,#0x2
   \   00010A   FC           MOV     R4,A
   \   00010B   E4           CLR     A
   \   00010C   35..         ADDC    A,?V1
   \   00010E   FD           MOV     R5,A
   \   00010F   EE           MOV     A,R6
   \   000110   FA           MOV     R2,A
   \   000111   EF           MOV     A,R7
   \   000112   FB           MOV     R3,A
   \   000113   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1543              pBuf += Z_EXTADDR_LEN;
   \   000116   EE           MOV     A,R6
   \   000117   2408         ADD     A,#0x8
   \   000119   FE           MOV     R6,A
   \   00011A   5001         JNC     ??ZDP_MgmtLqiRsp_5
   \   00011C   0F           INC     R7
   1544          
   1545              // EXTADDR
   1546              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \                     ??ZDP_MgmtLqiRsp_5:
   \   00011D                ; Setup parameters for call to function sAddrExtCpy
   \   00011D   E5..         MOV     A,?V0
   \   00011F   240A         ADD     A,#0xa
   \   000121   FC           MOV     R4,A
   \   000122   E4           CLR     A
   \   000123   35..         ADDC    A,?V1
   \   000125   FD           MOV     R5,A
   \   000126   EE           MOV     A,R6
   \   000127   FA           MOV     R2,A
   \   000128   EF           MOV     A,R7
   \   000129   FB           MOV     R3,A
   \   00012A   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00012D   8A..         MOV     ?V8,R2
   \   00012F   8B..         MOV     ?V9,R3
   \   000131   AE..         MOV     R6,?V8
   \   000133   AF..         MOV     R7,?V9
   1547          
   1548              // NWKADDR
   1549              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   000135   E5..         MOV     A,?V0
   \   000137   2412         ADD     A,#0x12
   \   000139   F582         MOV     DPL,A
   \   00013B   E4           CLR     A
   \   00013C   35..         ADDC    A,?V1
   \   00013E   F583         MOV     DPH,A
   \   000140   E0           MOVX    A,@DPTR
   \   000141   F8           MOV     R0,A
   \   000142   A3           INC     DPTR
   \   000143   E0           MOVX    A,@DPTR
   \   000144   F9           MOV     R1,A
   \   000145   E8           MOV     A,R0
   \   000146   C0E0         PUSH    A
   \   000148   8E82         MOV     DPL,R6
   \   00014A   8F83         MOV     DPH,R7
   \   00014C   D0E0         POP     A
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   8E82         MOV     DPL,R6
   \   000151   8F83         MOV     DPH,R7
   \   000153   A3           INC     DPTR
   \   000154   AE82         MOV     R6,DPL
   \   000156   AF83         MOV     R7,DPH
   1550              *pBuf++ = HI_UINT16( list->nwkAddr );
   \   000158   E5..         MOV     A,?V0
   \   00015A   2412         ADD     A,#0x12
   \   00015C   F582         MOV     DPL,A
   \   00015E   E4           CLR     A
   \   00015F   35..         ADDC    A,?V1
   \   000161   F583         MOV     DPH,A
   \   000163   E0           MOVX    A,@DPTR
   \   000164   F8           MOV     R0,A
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F9           MOV     R1,A
   \   000168   E4           CLR     A
   \   000169   C9           XCH     A,R1
   \   00016A   F8           MOV     R0,A
   \   00016B   E8           MOV     A,R0
   \   00016C   C0E0         PUSH    A
   \   00016E   8E82         MOV     DPL,R6
   \   000170   8F83         MOV     DPH,R7
   \   000172   D0E0         POP     A
   \   000174   F0           MOVX    @DPTR,A
   \   000175   8E82         MOV     DPL,R6
   \   000177   8F83         MOV     DPH,R7
   \   000179   A3           INC     DPTR
   \   00017A   AE82         MOV     R6,DPL
   \   00017C   AF83         MOV     R7,DPH
   1551          
   1552              // DEVICETYPE
   1553              *pBuf = list->devType;
   \   00017E   E5..         MOV     A,?V0
   \   000180   2414         ADD     A,#0x14
   \   000182   F582         MOV     DPL,A
   \   000184   E4           CLR     A
   \   000185   35..         ADDC    A,?V1
   \   000187   F583         MOV     DPH,A
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   C0E0         PUSH    A
   \   00018C   8E82         MOV     DPL,R6
   \   00018E   8F83         MOV     DPH,R7
   \   000190   D0E0         POP     A
   \   000192   F0           MOVX    @DPTR,A
   1554          
   1555              // RXONIDLE
   1556              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \   000193   E5..         MOV     A,?V0
   \   000195   2415         ADD     A,#0x15
   \   000197   F582         MOV     DPL,A
   \   000199   E4           CLR     A
   \   00019A   35..         ADDC    A,?V1
   \   00019C   F583         MOV     DPH,A
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   33           RLC     A
   \   0001A0   33           RLC     A
   \   0001A1   54FC         ANL     A,#0xfc
   \   0001A3   F8           MOV     R0,A
   \   0001A4   8E82         MOV     DPL,R6
   \   0001A6   8F83         MOV     DPH,R7
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   48           ORL     A,R0
   \   0001AA   F0           MOVX    @DPTR,A
   1557          
   1558              // RELATIONSHIP
   1559              *pBuf++ |= (uint8)(list->relation << 4);
   \   0001AB   E5..         MOV     A,?V0
   \   0001AD   2416         ADD     A,#0x16
   \   0001AF   F582         MOV     DPL,A
   \   0001B1   E4           CLR     A
   \   0001B2   35..         ADDC    A,?V1
   \   0001B4   F583         MOV     DPH,A
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   C4           SWAP    A
   \   0001B8   54F0         ANL     A,#0xf0
   \   0001BA   F8           MOV     R0,A
   \   0001BB   8E82         MOV     DPL,R6
   \   0001BD   8F83         MOV     DPH,R7
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   48           ORL     A,R0
   \   0001C1   F0           MOVX    @DPTR,A
   \   0001C2   8E82         MOV     DPL,R6
   \   0001C4   8F83         MOV     DPH,R7
   \   0001C6   A3           INC     DPTR
   \   0001C7   AE82         MOV     R6,DPL
   \   0001C9   AF83         MOV     R7,DPH
   1560          
   1561              // PERMITJOINING
   1562              *pBuf++ = (uint8)(list->permit);
   \   0001CB   E5..         MOV     A,?V0
   \   0001CD   2417         ADD     A,#0x17
   \   0001CF   F582         MOV     DPL,A
   \   0001D1   E4           CLR     A
   \   0001D2   35..         ADDC    A,?V1
   \   0001D4   F583         MOV     DPH,A
   \   0001D6   E0           MOVX    A,@DPTR
   \   0001D7   C0E0         PUSH    A
   \   0001D9   8E82         MOV     DPL,R6
   \   0001DB   8F83         MOV     DPH,R7
   \   0001DD   D0E0         POP     A
   \   0001DF   F0           MOVX    @DPTR,A
   \   0001E0   8E82         MOV     DPL,R6
   \   0001E2   8F83         MOV     DPH,R7
   \   0001E4   A3           INC     DPTR
   \   0001E5   AE82         MOV     R6,DPL
   \   0001E7   AF83         MOV     R7,DPH
   1563          
   1564              // DEPTH
   1565              *pBuf++ = list->depth;
   \   0001E9   E5..         MOV     A,?V0
   \   0001EB   2418         ADD     A,#0x18
   \   0001ED   F582         MOV     DPL,A
   \   0001EF   E4           CLR     A
   \   0001F0   35..         ADDC    A,?V1
   \   0001F2   F583         MOV     DPH,A
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   C0E0         PUSH    A
   \   0001F7   8E82         MOV     DPL,R6
   \   0001F9   8F83         MOV     DPH,R7
   \   0001FB   D0E0         POP     A
   \   0001FD   F0           MOVX    @DPTR,A
   \   0001FE   8E82         MOV     DPL,R6
   \   000200   8F83         MOV     DPH,R7
   \   000202   A3           INC     DPTR
   \   000203   AE82         MOV     R6,DPL
   \   000205   AF83         MOV     R7,DPH
   1566          
   1567              // LQI
   1568              *pBuf++ = list->lqi;
   \   000207   E5..         MOV     A,?V0
   \   000209   2419         ADD     A,#0x19
   \   00020B   F582         MOV     DPL,A
   \   00020D   E4           CLR     A
   \   00020E   35..         ADDC    A,?V1
   \   000210   F583         MOV     DPH,A
   \   000212   E0           MOVX    A,@DPTR
   \   000213   C0E0         PUSH    A
   \   000215   8E82         MOV     DPL,R6
   \   000217   8F83         MOV     DPH,R7
   \   000219   D0E0         POP     A
   \   00021B   F0           MOVX    @DPTR,A
   \   00021C   8E82         MOV     DPL,R6
   \   00021E   8F83         MOV     DPH,R7
   \   000220   A3           INC     DPTR
   \   000221   AE82         MOV     R6,DPL
   \   000223   AF83         MOV     R7,DPH
   1569          
   1570              list++; // next list entry
   \   000225   E5..         MOV     A,?V0
   \   000227   241A         ADD     A,#0x1a
   \   000229   F5..         MOV     ?V0,A
   \   00022B   5002         JNC     ??ZDP_MgmtLqiRsp_6
   \   00022D   05..         INC     ?V1
   1571            }
   \                     ??ZDP_MgmtLqiRsp_6:
   \   00022F   05..         INC     ?V7
   \   000231   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1572          
   1573            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \                     ??ZDP_MgmtLqiRsp_4:
   \   000234   85..82       MOV     DPL,?V2
   \   000237   85..83       MOV     DPH,?V3
   \   00023A   A3           INC     DPTR
   \   00023B   A882         MOV     R0,DPL
   \   00023D   A983         MOV     R1,DPH
   \   00023F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000242   E8           MOV     A,R0
   \   000243   F0           MOVX    @DPTR,A
   \   000244   A3           INC     DPTR
   \   000245   E9           MOV     A,R1
   \   000246   F0           MOVX    @DPTR,A
   \   000247                ; Setup parameters for call to function fillAndSend
   \   000247   75..31       MOV     ?V8,#0x31
   \   00024A   75..80       MOV     ?V9,#-0x80
   \   00024D   78..         MOV     R0,#?V8
   \   00024F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000252   A9..         MOV     R1,?V10
   \   000254   AC..         MOV     R4,?V14
   \   000256   AD..         MOV     R5,?V15
   \   000258   7402         MOV     A,#0x2
   \   00025A   12....       LCALL   ?XSTACK_DISP101_8
   \   00025D   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000260   7402         MOV     A,#0x2
   \   000262   12....       LCALL   ?DEALLOC_XSTACK8
   \   000265   E9           MOV     A,R1
   \   000266   F5..         MOV     ?V5,A
   \   000268                ; Setup parameters for call to function osal_mem_free
   \   000268   AA..         MOV     R2,?V2
   \   00026A   AB..         MOV     R3,?V3
   \   00026C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00026F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000272   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000274   F0           MOVX    @DPTR,A
   \   000275   A3           INC     DPTR
   \   000276   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000278   F0           MOVX    @DPTR,A
   \   000279   A9..         MOV     R1,?V5
   \                     ??ZDP_MgmtLqiRsp_1:
   \   00027B   7401         MOV     A,#0x1
   \   00027D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000280   7F10         MOV     R7,#0x10
   \   000282   02....       LJMP    ?BANKED_LEAVE_XDATA
   1574          }
   1575          
   1576          /*********************************************************************
   1577           * @fn          ZDP_MgmtRtgRsp
   1578           *
   1579           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1580           *              function sends a unicast message.
   1581           *
   1582           * @param       dstAddr - destination address of the message
   1583           * @param       Status - message status (ZDP_SUCCESS or other)
   1584           * @param       RoutingTableEntries - Total number of entries
   1585           * @param       StartIndex - Starting index within the reporting list
   1586           * @param       RoutingTableListCount - number of entries included
   1587           *                                      in this message
   1588           * @param       RoutingTableList - List of Routing Table entries
   1589           * @param       SecurityEnable - true to enable security for this message
   1590           *
   1591           * @return      ZStatus_t
   1592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1593          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1594                                      byte Status,
   1595                                      byte RoutingTableEntries,
   1596                                      byte StartIndex,
   1597                                      byte RoutingListCount,
   1598                                      rtgItem_t *RoutingTableList,
   1599                                      byte SecurityEnable )
   1600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V14,R2
   \   000018   8B..         MOV     ?V15,R3
   \   00001A   8C..         MOV     ?V12,R4
   \   00001C   8D..         MOV     ?V11,R5
   \   00001E   7419         MOV     A,#0x19
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V10,A
   \   000026   741A         MOV     A,#0x1a
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V3,A
   \   00002E   741B         MOV     A,#0x1b
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V1,A
   1601            uint8 *buf;
   1602            uint8 *pBuf;
   1603            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1604            byte len = 1 + 1 + 1 + 1;
   \   00003A   75..04       MOV     ?V2,#0x4
   1605            byte x;
   1606          
   1607            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1608          
   1609            // Add an array for Routing List data
   1610            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   00003D   75F005       MOV     B,#0x5
   \   000040   E5..         MOV     A,?V3
   \   000042   A4           MUL     AB
   \   000043   25..         ADD     A,?V2
   \   000045   F5..         MOV     ?V2,A
   1611          
   1612            buf = osal_mem_alloc( (short)(len+1) );
   \   000047                ; Setup parameters for call to function osal_mem_alloc
   \   000047   A8..         MOV     R0,?V2
   \   000049   7900         MOV     R1,#0x0
   \   00004B   E8           MOV     A,R0
   \   00004C   2401         ADD     A,#0x1
   \   00004E   FA           MOV     R2,A
   \   00004F   E4           CLR     A
   \   000050   39           ADDC    A,R1
   \   000051   FB           MOV     R3,A
   \   000052   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000055   8A..         MOV     ?V8,R2
   \   000057   8B..         MOV     ?V9,R3
   \   000059   85....       MOV     ?V4,?V8
   \   00005C   85....       MOV     ?V5,?V9
   1613            if ( buf == NULL )
   \   00005F   E5..         MOV     A,?V4
   \   000061   45..         ORL     A,?V5
   \   000063   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1614            {
   1615              return afStatus_MEM_FAIL;
   \   000065   7910         MOV     R1,#0x10
   \   000067   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1616            }
   1617          
   1618            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   00006A   85..82       MOV     DPL,?V4
   \   00006D   85..83       MOV     DPH,?V5
   \   000070   A3           INC     DPTR
   \   000071   AE82         MOV     R6,DPL
   \   000073   AF83         MOV     R7,DPH
   1619          
   1620            *pBuf++ = Status;
   \   000075   E5..         MOV     A,?V12
   \   000077   C0E0         PUSH    A
   \   000079   8E82         MOV     DPL,R6
   \   00007B   8F83         MOV     DPH,R7
   \   00007D   D0E0         POP     A
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   A3           INC     DPTR
   \   000085   AE82         MOV     R6,DPL
   \   000087   AF83         MOV     R7,DPH
   1621            *pBuf++ = RoutingTableEntries;
   \   000089   E5..         MOV     A,?V11
   \   00008B   C0E0         PUSH    A
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   D0E0         POP     A
   \   000093   F0           MOVX    @DPTR,A
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   A3           INC     DPTR
   \   000099   AE82         MOV     R6,DPL
   \   00009B   AF83         MOV     R7,DPH
   1622            *pBuf++ = StartIndex;
   \   00009D   E5..         MOV     A,?V10
   \   00009F   C0E0         PUSH    A
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   D0E0         POP     A
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   A3           INC     DPTR
   \   0000AD   AE82         MOV     R6,DPL
   \   0000AF   AF83         MOV     R7,DPH
   1623            *pBuf++ = RoutingListCount;
   \   0000B1   E5..         MOV     A,?V3
   \   0000B3   C0E0         PUSH    A
   \   0000B5   8E82         MOV     DPL,R6
   \   0000B7   8F83         MOV     DPH,R7
   \   0000B9   D0E0         POP     A
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   A3           INC     DPTR
   \   0000C1   AE82         MOV     R6,DPL
   \   0000C3   AF83         MOV     R7,DPH
   1624          
   1625            for ( x = 0; x < RoutingListCount; x++ )
   \   0000C5   75..00       MOV     ?V6,#0x0
   \                     ??ZDP_MgmtRtgRsp_2:
   \   0000C8   E5..         MOV     A,?V6
   \   0000CA   C3           CLR     C
   \   0000CB   95..         SUBB    A,?V3
   \   0000CD   4003         JC      $+5
   \   0000CF   02....       LJMP    ??ZDP_MgmtRtgRsp_3 & 0xFFFF
   1626            {
   1627              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \   0000D2   85..82       MOV     DPL,?V0
   \   0000D5   85..83       MOV     DPH,?V1
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   F8           MOV     R0,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F9           MOV     R1,A
   \   0000DD   E8           MOV     A,R0
   \   0000DE   C0E0         PUSH    A
   \   0000E0   8E82         MOV     DPL,R6
   \   0000E2   8F83         MOV     DPH,R7
   \   0000E4   D0E0         POP     A
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   8E82         MOV     DPL,R6
   \   0000E9   8F83         MOV     DPH,R7
   \   0000EB   A3           INC     DPTR
   \   0000EC   AE82         MOV     R6,DPL
   \   0000EE   AF83         MOV     R7,DPH
   1628              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \   0000F0   85..82       MOV     DPL,?V0
   \   0000F3   85..83       MOV     DPH,?V1
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F8           MOV     R0,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F9           MOV     R1,A
   \   0000FB   E4           CLR     A
   \   0000FC   C9           XCH     A,R1
   \   0000FD   F8           MOV     R0,A
   \   0000FE   E8           MOV     A,R0
   \   0000FF   C0E0         PUSH    A
   \   000101   8E82         MOV     DPL,R6
   \   000103   8F83         MOV     DPH,R7
   \   000105   D0E0         POP     A
   \   000107   F0           MOVX    @DPTR,A
   \   000108   8E82         MOV     DPL,R6
   \   00010A   8F83         MOV     DPH,R7
   \   00010C   A3           INC     DPTR
   \   00010D   AE82         MOV     R6,DPL
   \   00010F   AF83         MOV     R7,DPH
   1629          
   1630              *pBuf = (RoutingTableList->status & 0x07);
   \   000111   85..82       MOV     DPL,?V0
   \   000114   85..83       MOV     DPH,?V1
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   5407         ANL     A,#0x7
   \   00011F   C0E0         PUSH    A
   \   000121   8E82         MOV     DPL,R6
   \   000123   8F83         MOV     DPH,R7
   \   000125   D0E0         POP     A
   \   000127   F0           MOVX    @DPTR,A
   1631              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \   000128   85..82       MOV     DPL,?V0
   \   00012B   85..83       MOV     DPH,?V1
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   5418         ANL     A,#0x18
   \   000137   6041         JZ      ??ZDP_MgmtRtgRsp_4
   1632              {
   1633                uint8 options = 0;
   \   000139   7800         MOV     R0,#0x0
   1634                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   00013B   D3           SETB    C
   \   00013C   E8           MOV     A,R0
   \   00013D   92E1         MOV     0xE0 /* A   */.1,C
   \   00013F   F8           MOV     R0,A
   1635          
   1636                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   000140   85..82       MOV     DPL,?V0
   \   000143   85..83       MOV     DPH,?V1
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   A2E2         MOV     C,0xE0 /* A   */.2
   \   00014F   5005         JNC     ??ZDP_MgmtRtgRsp_5
   1637                {
   1638                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   000151   D3           SETB    C
   \   000152   E8           MOV     A,R0
   \   000153   92E2         MOV     0xE0 /* A   */.2,C
   \   000155   F8           MOV     R0,A
   1639                }
   1640          
   1641                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_5:
   \   000156   85..82       MOV     DPL,?V0
   \   000159   85..83       MOV     DPH,?V1
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   E0           MOVX    A,@DPTR
   \   000163   A2E4         MOV     C,0xE0 /* A   */.4
   \   000165   5005         JNC     ??ZDP_MgmtRtgRsp_6
   1642                {
   1643                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   000167   D3           SETB    C
   \   000168   E8           MOV     A,R0
   \   000169   92E0         MOV     0xE0 /* A   */.0,C
   \   00016B   F8           MOV     R0,A
   1644                }
   1645          
   1646                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_6:
   \   00016C   E8           MOV     A,R0
   \   00016D   33           RLC     A
   \   00016E   33           RLC     A
   \   00016F   33           RLC     A
   \   000170   54F8         ANL     A,#0xf8
   \   000172   F8           MOV     R0,A
   \   000173   8E82         MOV     DPL,R6
   \   000175   8F83         MOV     DPH,R7
   \   000177   E0           MOVX    A,@DPTR
   \   000178   48           ORL     A,R0
   \   000179   F0           MOVX    @DPTR,A
   1647              }
   1648              pBuf++;
   \                     ??ZDP_MgmtRtgRsp_4:
   \   00017A   8E82         MOV     DPL,R6
   \   00017C   8F83         MOV     DPH,R7
   \   00017E   A3           INC     DPTR
   \   00017F   AE82         MOV     R6,DPL
   \   000181   AF83         MOV     R7,DPH
   1649          
   1650              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \   000183   85..82       MOV     DPL,?V0
   \   000186   85..83       MOV     DPH,?V1
   \   000189   A3           INC     DPTR
   \   00018A   A3           INC     DPTR
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   F8           MOV     R0,A
   \   00018D   A3           INC     DPTR
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F9           MOV     R1,A
   \   000190   E8           MOV     A,R0
   \   000191   C0E0         PUSH    A
   \   000193   8E82         MOV     DPL,R6
   \   000195   8F83         MOV     DPH,R7
   \   000197   D0E0         POP     A
   \   000199   F0           MOVX    @DPTR,A
   \   00019A   8E82         MOV     DPL,R6
   \   00019C   8F83         MOV     DPH,R7
   \   00019E   A3           INC     DPTR
   \   00019F   AE82         MOV     R6,DPL
   \   0001A1   AF83         MOV     R7,DPH
   1651              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   0001A3   85..82       MOV     DPL,?V0
   \   0001A6   85..83       MOV     DPH,?V1
   \   0001A9   A3           INC     DPTR
   \   0001AA   A3           INC     DPTR
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   F8           MOV     R0,A
   \   0001AD   A3           INC     DPTR
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   F9           MOV     R1,A
   \   0001B0   E4           CLR     A
   \   0001B1   C9           XCH     A,R1
   \   0001B2   F8           MOV     R0,A
   \   0001B3   E8           MOV     A,R0
   \   0001B4   C0E0         PUSH    A
   \   0001B6   8E82         MOV     DPL,R6
   \   0001B8   8F83         MOV     DPH,R7
   \   0001BA   D0E0         POP     A
   \   0001BC   F0           MOVX    @DPTR,A
   \   0001BD   8E82         MOV     DPL,R6
   \   0001BF   8F83         MOV     DPH,R7
   \   0001C1   A3           INC     DPTR
   \   0001C2   AE82         MOV     R6,DPL
   \   0001C4   AF83         MOV     R7,DPH
   1652              RoutingTableList++;    // Move to next list entry
   \   0001C6   E5..         MOV     A,?V0
   \   0001C8   2407         ADD     A,#0x7
   \   0001CA   F5..         MOV     ?V0,A
   \   0001CC   5002         JNC     ??ZDP_MgmtRtgRsp_7
   \   0001CE   05..         INC     ?V1
   1653            }
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0001D0   05..         INC     ?V6
   \   0001D2   02....       LJMP    ??ZDP_MgmtRtgRsp_2 & 0xFFFF
   1654          
   1655            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0001D5   85..82       MOV     DPL,?V4
   \   0001D8   85..83       MOV     DPH,?V5
   \   0001DB   A3           INC     DPTR
   \   0001DC   A882         MOV     R0,DPL
   \   0001DE   A983         MOV     R1,DPH
   \   0001E0   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001E3   E8           MOV     A,R0
   \   0001E4   F0           MOVX    @DPTR,A
   \   0001E5   A3           INC     DPTR
   \   0001E6   E9           MOV     A,R1
   \   0001E7   F0           MOVX    @DPTR,A
   \   0001E8                ; Setup parameters for call to function fillAndSend
   \   0001E8   75..32       MOV     ?V8,#0x32
   \   0001EB   75..80       MOV     ?V9,#-0x80
   \   0001EE   78..         MOV     R0,#?V8
   \   0001F0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F3   A9..         MOV     R1,?V2
   \   0001F5   AC..         MOV     R4,?V14
   \   0001F7   AD..         MOV     R5,?V15
   \   0001F9   7402         MOV     A,#0x2
   \   0001FB   12....       LCALL   ?XSTACK_DISP101_8
   \   0001FE   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000201   7402         MOV     A,#0x2
   \   000203   12....       LCALL   ?DEALLOC_XSTACK8
   \   000206   E9           MOV     A,R1
   \   000207   F5..         MOV     ?V7,A
   \   000209                ; Setup parameters for call to function osal_mem_free
   \   000209   AA..         MOV     R2,?V4
   \   00020B   AB..         MOV     R3,?V5
   \   00020D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000210   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000213   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000215   F0           MOVX    @DPTR,A
   \   000216   A3           INC     DPTR
   \   000217   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000219   F0           MOVX    @DPTR,A
   \   00021A   A9..         MOV     R1,?V7
   \                     ??ZDP_MgmtRtgRsp_1:
   \   00021C   7401         MOV     A,#0x1
   \   00021E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000221   7F10         MOV     R7,#0x10
   \   000223   02....       LJMP    ?BANKED_LEAVE_XDATA
   1656          }
   1657          
   1658          /*********************************************************************
   1659           * @fn          ZDP_MgmtBindRsp
   1660           *
   1661           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1662           *              function sends a unicast message.
   1663           *
   1664           * @param       dstAddr - destination address of the message
   1665           * @param       Status - message status (ZDP_SUCCESS or other)
   1666           * @param       BindingTableEntries - Total number of entries
   1667           * @param       StartIndex - Starting index within the reporting list
   1668           * @param       BindingTableListCount - number of entries included
   1669           *                                 in this message
   1670           * @param       BindingTableList - List of Binding Table entries
   1671           * @param       SecurityEnable - Security Options
   1672           *
   1673           * @return      ZStatus_t
   1674           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1675          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1676                                      byte Status,
   1677                                      byte BindingTableEntries,
   1678                                      byte StartIndex,
   1679                                      byte BindingTableListCount,
   1680                                      apsBindingItem_t *BindingTableList,
   1681                                      byte SecurityEnable )
   1682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C..         MOV     ?V14,R4
   \   000022   8D..         MOV     ?V13,R5
   \   000024   741B         MOV     A,#0x1b
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V12,A
   \   00002C   741C         MOV     A,#0x1c
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V6,A
   \   000034   741D         MOV     A,#0x1d
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V0,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V1,A
   1683            uint8 *buf;
   1684            uint8 *pBuf;
   1685            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1686            uint8 len;    // Actual length varies due to different addrMode
   1687            uint8 x;
   1688            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   \   000040   75..15       MOV     ?V11,#0x15
   1689            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   \   000043   75..0E       MOV     ?V15,#0xe
   1690          
   1691            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1692          
   1693            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1694            maxLen = 1 + 1 + 1 + 1;
   \   000046   75..04       MOV     ?V10,#0x4
   1695            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   \   000049   E5..         MOV     A,?V11
   \   00004B   F5F0         MOV     B,A
   \   00004D   E5..         MOV     A,?V6
   \   00004F   A4           MUL     AB
   \   000050   25..         ADD     A,?V10
   \   000052   F5..         MOV     ?V10,A
   1696            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000054                ; Setup parameters for call to function osal_mem_alloc
   \   000054   A8..         MOV     R0,?V10
   \   000056   7900         MOV     R1,#0x0
   \   000058   E8           MOV     A,R0
   \   000059   2401         ADD     A,#0x1
   \   00005B   FA           MOV     R2,A
   \   00005C   E4           CLR     A
   \   00005D   39           ADDC    A,R1
   \   00005E   FB           MOV     R3,A
   \   00005F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000062   8A..         MOV     ?V8,R2
   \   000064   8B..         MOV     ?V9,R3
   \   000066   85....       MOV     ?V4,?V8
   \   000069   85....       MOV     ?V5,?V9
   1697          
   1698            if ( buf == NULL )
   \   00006C   E5..         MOV     A,?V4
   \   00006E   45..         ORL     A,?V5
   \   000070   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1699            {
   1700              return afStatus_MEM_FAIL;
   \   000072   7910         MOV     R1,#0x10
   \   000074   02....       LJMP    ??ZDP_MgmtBindRsp_1 & 0xFFFF
   1701            }
   1702          
   1703            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   000077   85..82       MOV     DPL,?V4
   \   00007A   85..83       MOV     DPH,?V5
   \   00007D   A3           INC     DPTR
   \   00007E   AE82         MOV     R6,DPL
   \   000080   AF83         MOV     R7,DPH
   1704          
   1705            *pBuf++ = Status;
   \   000082   E5..         MOV     A,?V14
   \   000084   C0E0         PUSH    A
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   D0E0         POP     A
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   A3           INC     DPTR
   \   000092   AE82         MOV     R6,DPL
   \   000094   AF83         MOV     R7,DPH
   1706            *pBuf++ = BindingTableEntries;
   \   000096   E5..         MOV     A,?V13
   \   000098   C0E0         PUSH    A
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   D0E0         POP     A
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   A3           INC     DPTR
   \   0000A6   AE82         MOV     R6,DPL
   \   0000A8   AF83         MOV     R7,DPH
   1707            *pBuf++ = StartIndex;
   \   0000AA   E5..         MOV     A,?V12
   \   0000AC   C0E0         PUSH    A
   \   0000AE   8E82         MOV     DPL,R6
   \   0000B0   8F83         MOV     DPH,R7
   \   0000B2   D0E0         POP     A
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   8E82         MOV     DPL,R6
   \   0000B7   8F83         MOV     DPH,R7
   \   0000B9   A3           INC     DPTR
   \   0000BA   AE82         MOV     R6,DPL
   \   0000BC   AF83         MOV     R7,DPH
   1708            *pBuf++ = BindingTableListCount;
   \   0000BE   E5..         MOV     A,?V6
   \   0000C0   C0E0         PUSH    A
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   D0E0         POP     A
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   8E82         MOV     DPL,R6
   \   0000CB   8F83         MOV     DPH,R7
   \   0000CD   A3           INC     DPTR
   \   0000CE   AE82         MOV     R6,DPL
   \   0000D0   AF83         MOV     R7,DPH
   1709          
   1710            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1711            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1712            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1713            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1714          
   1715            len = 1 + 1 + 1 + 1;
   \   0000D2   75..04       MOV     ?V2,#0x4
   1716            for ( x = 0; x < BindingTableListCount; x++ )
   \   0000D5   75..00       MOV     ?V7,#0x0
   \                     ??ZDP_MgmtBindRsp_2:
   \   0000D8   E5..         MOV     A,?V7
   \   0000DA   C3           CLR     C
   \   0000DB   95..         SUBB    A,?V6
   \   0000DD   4003         JC      $+5
   \   0000DF   02....       LJMP    ??ZDP_MgmtBindRsp_3 & 0xFFFF
   1717            {
   1718              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   \   0000E2                ; Setup parameters for call to function sAddrExtCpy
   \   0000E2   AC..         MOV     R4,?V0
   \   0000E4   AD..         MOV     R5,?V1
   \   0000E6   EE           MOV     A,R6
   \   0000E7   FA           MOV     R2,A
   \   0000E8   EF           MOV     A,R7
   \   0000E9   FB           MOV     R3,A
   \   0000EA   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000ED   8A..         MOV     ?V8,R2
   \   0000EF   8B..         MOV     ?V9,R3
   \   0000F1   AE..         MOV     R6,?V8
   \   0000F3   AF..         MOV     R7,?V9
   1719              *pBuf++ = BindingTableList->srcEP;
   \   0000F5   85..82       MOV     DPL,?V0
   \   0000F8   85..83       MOV     DPH,?V1
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   C0E0         PUSH    A
   \   000106   8E82         MOV     DPL,R6
   \   000108   8F83         MOV     DPH,R7
   \   00010A   D0E0         POP     A
   \   00010C   F0           MOVX    @DPTR,A
   \   00010D   8E82         MOV     DPL,R6
   \   00010F   8F83         MOV     DPH,R7
   \   000111   A3           INC     DPTR
   \   000112   AE82         MOV     R6,DPL
   \   000114   AF83         MOV     R7,DPH
   1720          
   1721              // Cluster ID
   1722              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   \   000116   85..82       MOV     DPL,?V0
   \   000119   85..83       MOV     DPH,?V1
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \   000126   F8           MOV     R0,A
   \   000127   A3           INC     DPTR
   \   000128   E0           MOVX    A,@DPTR
   \   000129   F9           MOV     R1,A
   \   00012A   E8           MOV     A,R0
   \   00012B   C0E0         PUSH    A
   \   00012D   8E82         MOV     DPL,R6
   \   00012F   8F83         MOV     DPH,R7
   \   000131   D0E0         POP     A
   \   000133   F0           MOVX    @DPTR,A
   \   000134   8E82         MOV     DPL,R6
   \   000136   8F83         MOV     DPH,R7
   \   000138   A3           INC     DPTR
   \   000139   AE82         MOV     R6,DPL
   \   00013B   AF83         MOV     R7,DPH
   1723              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   \   00013D   85..82       MOV     DPL,?V0
   \   000140   85..83       MOV     DPH,?V1
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   F8           MOV     R0,A
   \   00014E   A3           INC     DPTR
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   F9           MOV     R1,A
   \   000151   E4           CLR     A
   \   000152   C9           XCH     A,R1
   \   000153   F8           MOV     R0,A
   \   000154   E8           MOV     A,R0
   \   000155   C0E0         PUSH    A
   \   000157   8E82         MOV     DPL,R6
   \   000159   8F83         MOV     DPH,R7
   \   00015B   D0E0         POP     A
   \   00015D   F0           MOVX    @DPTR,A
   \   00015E   8E82         MOV     DPL,R6
   \   000160   8F83         MOV     DPH,R7
   \   000162   A3           INC     DPTR
   \   000163   AE82         MOV     R6,DPL
   \   000165   AF83         MOV     R7,DPH
   1724          
   1725              *pBuf++ = BindingTableList->dstAddr.addrMode;
   \   000167   E5..         MOV     A,?V0
   \   000169   2413         ADD     A,#0x13
   \   00016B   F582         MOV     DPL,A
   \   00016D   E4           CLR     A
   \   00016E   35..         ADDC    A,?V1
   \   000170   F583         MOV     DPH,A
   \   000172   E0           MOVX    A,@DPTR
   \   000173   C0E0         PUSH    A
   \   000175   8E82         MOV     DPL,R6
   \   000177   8F83         MOV     DPH,R7
   \   000179   D0E0         POP     A
   \   00017B   F0           MOVX    @DPTR,A
   \   00017C   8E82         MOV     DPL,R6
   \   00017E   8F83         MOV     DPH,R7
   \   000180   A3           INC     DPTR
   \   000181   AE82         MOV     R6,DPL
   \   000183   AF83         MOV     R7,DPH
   1726              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   \   000185   E5..         MOV     A,?V0
   \   000187   2413         ADD     A,#0x13
   \   000189   F582         MOV     DPL,A
   \   00018B   E4           CLR     A
   \   00018C   35..         ADDC    A,?V1
   \   00018E   F583         MOV     DPH,A
   \   000190   E0           MOVX    A,@DPTR
   \   000191   6403         XRL     A,#0x3
   \   000193   703E         JNZ     ??ZDP_MgmtBindRsp_4
   1727              {
   1728                len += extZdpBindEntrySize;
   \   000195   E5..         MOV     A,?V11
   \   000197   25..         ADD     A,?V2
   \   000199   F5..         MOV     ?V2,A
   1729                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   \   00019B                ; Setup parameters for call to function sAddrExtCpy
   \   00019B   E5..         MOV     A,?V0
   \   00019D   240B         ADD     A,#0xb
   \   00019F   FC           MOV     R4,A
   \   0001A0   E4           CLR     A
   \   0001A1   35..         ADDC    A,?V1
   \   0001A3   FD           MOV     R5,A
   \   0001A4   EE           MOV     A,R6
   \   0001A5   FA           MOV     R2,A
   \   0001A6   EF           MOV     A,R7
   \   0001A7   FB           MOV     R3,A
   \   0001A8   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001AB   8A..         MOV     ?V8,R2
   \   0001AD   8B..         MOV     ?V9,R3
   \   0001AF   AE..         MOV     R6,?V8
   \   0001B1   AF..         MOV     R7,?V9
   1730                *pBuf++ = BindingTableList->dstEP;
   \   0001B3   E5..         MOV     A,?V0
   \   0001B5   2414         ADD     A,#0x14
   \   0001B7   F582         MOV     DPL,A
   \   0001B9   E4           CLR     A
   \   0001BA   35..         ADDC    A,?V1
   \   0001BC   F583         MOV     DPH,A
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   C0E0         PUSH    A
   \   0001C1   8E82         MOV     DPL,R6
   \   0001C3   8F83         MOV     DPH,R7
   \   0001C5   D0E0         POP     A
   \   0001C7   F0           MOVX    @DPTR,A
   \   0001C8   8E82         MOV     DPL,R6
   \   0001CA   8F83         MOV     DPH,R7
   \   0001CC   A3           INC     DPTR
   \   0001CD   AE82         MOV     R6,DPL
   \   0001CF   AF83         MOV     R7,DPH
   \   0001D1   804F         SJMP    ??ZDP_MgmtBindRsp_5
   1731              }
   1732              else
   1733              {
   1734                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_4:
   \   0001D3   E5..         MOV     A,?V15
   \   0001D5   25..         ADD     A,?V2
   \   0001D7   F5..         MOV     ?V2,A
   1735                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   0001D9   E5..         MOV     A,?V0
   \   0001DB   240B         ADD     A,#0xb
   \   0001DD   F582         MOV     DPL,A
   \   0001DF   E4           CLR     A
   \   0001E0   35..         ADDC    A,?V1
   \   0001E2   F583         MOV     DPH,A
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   F8           MOV     R0,A
   \   0001E6   A3           INC     DPTR
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   F9           MOV     R1,A
   \   0001E9   E8           MOV     A,R0
   \   0001EA   C0E0         PUSH    A
   \   0001EC   8E82         MOV     DPL,R6
   \   0001EE   8F83         MOV     DPH,R7
   \   0001F0   D0E0         POP     A
   \   0001F2   F0           MOVX    @DPTR,A
   \   0001F3   8E82         MOV     DPL,R6
   \   0001F5   8F83         MOV     DPH,R7
   \   0001F7   A3           INC     DPTR
   \   0001F8   AE82         MOV     R6,DPL
   \   0001FA   AF83         MOV     R7,DPH
   1736                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   0001FC   E5..         MOV     A,?V0
   \   0001FE   240B         ADD     A,#0xb
   \   000200   F582         MOV     DPL,A
   \   000202   E4           CLR     A
   \   000203   35..         ADDC    A,?V1
   \   000205   F583         MOV     DPH,A
   \   000207   E0           MOVX    A,@DPTR
   \   000208   F8           MOV     R0,A
   \   000209   A3           INC     DPTR
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   F9           MOV     R1,A
   \   00020C   E4           CLR     A
   \   00020D   C9           XCH     A,R1
   \   00020E   F8           MOV     R0,A
   \   00020F   E8           MOV     A,R0
   \   000210   C0E0         PUSH    A
   \   000212   8E82         MOV     DPL,R6
   \   000214   8F83         MOV     DPH,R7
   \   000216   D0E0         POP     A
   \   000218   F0           MOVX    @DPTR,A
   \   000219   8E82         MOV     DPL,R6
   \   00021B   8F83         MOV     DPH,R7
   \   00021D   A3           INC     DPTR
   \   00021E   AE82         MOV     R6,DPL
   \   000220   AF83         MOV     R7,DPH
   1737              }
   1738              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_5:
   \   000222   E5..         MOV     A,?V0
   \   000224   2415         ADD     A,#0x15
   \   000226   F5..         MOV     ?V0,A
   \   000228   5002         JNC     ??ZDP_MgmtBindRsp_6
   \   00022A   05..         INC     ?V1
   1739            }
   \                     ??ZDP_MgmtBindRsp_6:
   \   00022C   05..         INC     ?V7
   \   00022E   02....       LJMP    ??ZDP_MgmtBindRsp_2 & 0xFFFF
   1740          
   1741            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_3:
   \   000231   85..82       MOV     DPL,?V4
   \   000234   85..83       MOV     DPH,?V5
   \   000237   A3           INC     DPTR
   \   000238   A882         MOV     R0,DPL
   \   00023A   A983         MOV     R1,DPH
   \   00023C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00023F   E8           MOV     A,R0
   \   000240   F0           MOVX    @DPTR,A
   \   000241   A3           INC     DPTR
   \   000242   E9           MOV     A,R1
   \   000243   F0           MOVX    @DPTR,A
   \   000244                ; Setup parameters for call to function fillAndSend
   \   000244   75..33       MOV     ?V8,#0x33
   \   000247   75..80       MOV     ?V9,#-0x80
   \   00024A   78..         MOV     R0,#?V8
   \   00024C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024F   A9..         MOV     R1,?V2
   \   000251   7403         MOV     A,#0x3
   \   000253   12....       LCALL   ?XSTACK_DISP0_8
   \   000256   E0           MOVX    A,@DPTR
   \   000257   FC           MOV     R4,A
   \   000258   A3           INC     DPTR
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   FD           MOV     R5,A
   \   00025B   7402         MOV     A,#0x2
   \   00025D   12....       LCALL   ?XSTACK_DISP101_8
   \   000260   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000263   7402         MOV     A,#0x2
   \   000265   12....       LCALL   ?DEALLOC_XSTACK8
   \   000268   E9           MOV     A,R1
   \   000269   F5..         MOV     ?V3,A
   \   00026B                ; Setup parameters for call to function osal_mem_free
   \   00026B   AA..         MOV     R2,?V4
   \   00026D   AB..         MOV     R3,?V5
   \   00026F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000272   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000275   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000277   F0           MOVX    @DPTR,A
   \   000278   A3           INC     DPTR
   \   000279   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00027B   F0           MOVX    @DPTR,A
   \   00027C   A9..         MOV     R1,?V3
   \                     ??ZDP_MgmtBindRsp_1:
   \   00027E   7403         MOV     A,#0x3
   \   000280   12....       LCALL   ?DEALLOC_XSTACK8
   \   000283   7F10         MOV     R7,#0x10
   \   000285   02....       LJMP    ?BANKED_LEAVE_XDATA
   1742          }
   1743          
   1744          /*********************************************************************
   1745           * @fn          ZDP_MgmtNwkUpdateNotify
   1746           *
   1747           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1748           *              function sends a unicast message.
   1749           *
   1750           * @param       dstAddr - destination address of the message
   1751           * @param       status - message status (ZDP_SUCCESS or other)
   1752           * @param       scannedChannels - List of channels scanned by the request
   1753           * @param       totalTransmissions - Total transmissions
   1754           * @param       transmissionFailures - Sum of transmission failures
   1755           * @param       listCount - Number of records contained in the energyValues list
   1756           * @param       energyValues - List of descriptors, one for each of ListCount,
   1757           *                             of the enegry detect descriptors
   1758           * @param       txOptions - Transmit options
   1759           * @param       securityEnable - Security options
   1760           *
   1761           * @return      afStatus_t
   1762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1763          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1764                                              uint8 status, uint32 scannedChannels,
   1765                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1766                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1767                                              uint8 securityEnable )
   1768          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C..         MOV     ?V15,R4
   \   000022   8D..         MOV     ?V11,R5
   \   000024   741B         MOV     A,#0x1b
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   78..         MOV     R0,#?V4
   \   00002B   12....       LCALL   ?L_MOV_X
   \   00002E   741F         MOV     A,#0x1f
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V2,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V3,A
   \   00003A   7421         MOV     A,#0x21
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V1,A
   1769            uint8 *buf;
   1770            uint8 *pBuf;
   1771            uint8 len;
   1772          
   1773            (void)securityEnable;  // Intentionally unreferenced parameter
   1774          
   1775            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1776            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   000046   740A         MOV     A,#0xa
   \   000048   25..         ADD     A,?V11
   \   00004A   F5..         MOV     ?V14,A
   1777          
   1778            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00004C                ; Setup parameters for call to function osal_mem_alloc
   \   00004C   A8..         MOV     R0,?V14
   \   00004E   7900         MOV     R1,#0x0
   \   000050   E8           MOV     A,R0
   \   000051   2401         ADD     A,#0x1
   \   000053   FA           MOV     R2,A
   \   000054   E4           CLR     A
   \   000055   39           ADDC    A,R1
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005A   8A..         MOV     ?V8,R2
   \   00005C   8B..         MOV     ?V9,R3
   \   00005E   85....       MOV     ?V12,?V8
   \   000061   85....       MOV     ?V13,?V9
   1779            if ( buf == NULL )
   \   000064   E5..         MOV     A,?V12
   \   000066   45..         ORL     A,?V13
   \   000068   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1780            {
   1781              return afStatus_MEM_FAIL;
   \   00006A   7910         MOV     R1,#0x10
   \   00006C   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1782            }
   1783          
   1784            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   00006F   85..82       MOV     DPL,?V12
   \   000072   85..83       MOV     DPH,?V13
   \   000075   A3           INC     DPTR
   \   000076   AE82         MOV     R6,DPL
   \   000078   AF83         MOV     R7,DPH
   1785          
   1786            *pBuf++ = status;
   \   00007A   E5..         MOV     A,?V15
   \   00007C   C0E0         PUSH    A
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   D0E0         POP     A
   \   000084   F0           MOVX    @DPTR,A
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   A3           INC     DPTR
   \   00008A   AE82         MOV     R6,DPL
   \   00008C   AF83         MOV     R7,DPH
   1787          
   1788            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \   00008E                ; Setup parameters for call to function osal_buffer_uint32
   \   00008E   78..         MOV     R0,#?V4
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000093   EE           MOV     A,R6
   \   000094   FA           MOV     R2,A
   \   000095   EF           MOV     A,R7
   \   000096   FB           MOV     R3,A
   \   000097   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00009A   7404         MOV     A,#0x4
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009F   8A..         MOV     ?V8,R2
   \   0000A1   8B..         MOV     ?V9,R3
   \   0000A3   AE..         MOV     R6,?V8
   \   0000A5   AF..         MOV     R7,?V9
   1789          
   1790            *pBuf++ = LO_UINT16( totalTransmissions );
   \   0000A7   E5..         MOV     A,?V2
   \   0000A9   C0E0         PUSH    A
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   D0E0         POP     A
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   A3           INC     DPTR
   \   0000B7   AE82         MOV     R6,DPL
   \   0000B9   AF83         MOV     R7,DPH
   1791            *pBuf++ = HI_UINT16( totalTransmissions );
   \   0000BB   A8..         MOV     R0,?V2
   \   0000BD   A9..         MOV     R1,?V3
   \   0000BF   E4           CLR     A
   \   0000C0   C9           XCH     A,R1
   \   0000C1   F8           MOV     R0,A
   \   0000C2   E8           MOV     A,R0
   \   0000C3   C0E0         PUSH    A
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   D0E0         POP     A
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   A3           INC     DPTR
   \   0000D1   AE82         MOV     R6,DPL
   \   0000D3   AF83         MOV     R7,DPH
   1792          
   1793            *pBuf++ = LO_UINT16( transmissionFailures );
   \   0000D5   E5..         MOV     A,?V0
   \   0000D7   C0E0         PUSH    A
   \   0000D9   8E82         MOV     DPL,R6
   \   0000DB   8F83         MOV     DPH,R7
   \   0000DD   D0E0         POP     A
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   8E82         MOV     DPL,R6
   \   0000E2   8F83         MOV     DPH,R7
   \   0000E4   A3           INC     DPTR
   \   0000E5   AE82         MOV     R6,DPL
   \   0000E7   AF83         MOV     R7,DPH
   1794            *pBuf++ = HI_UINT16( transmissionFailures );
   \   0000E9   A8..         MOV     R0,?V0
   \   0000EB   A9..         MOV     R1,?V1
   \   0000ED   E4           CLR     A
   \   0000EE   C9           XCH     A,R1
   \   0000EF   F8           MOV     R0,A
   \   0000F0   E8           MOV     A,R0
   \   0000F1   C0E0         PUSH    A
   \   0000F3   8E82         MOV     DPL,R6
   \   0000F5   8F83         MOV     DPH,R7
   \   0000F7   D0E0         POP     A
   \   0000F9   F0           MOVX    @DPTR,A
   \   0000FA   8E82         MOV     DPL,R6
   \   0000FC   8F83         MOV     DPH,R7
   \   0000FE   A3           INC     DPTR
   \   0000FF   AE82         MOV     R6,DPL
   \   000101   AF83         MOV     R7,DPH
   1795          
   1796            *pBuf++ = listCount;
   \   000103   E5..         MOV     A,?V11
   \   000105   C0E0         PUSH    A
   \   000107   8E82         MOV     DPL,R6
   \   000109   8F83         MOV     DPH,R7
   \   00010B   D0E0         POP     A
   \   00010D   F0           MOVX    @DPTR,A
   \   00010E   8E82         MOV     DPL,R6
   \   000110   8F83         MOV     DPH,R7
   \   000112   A3           INC     DPTR
   \   000113   AE82         MOV     R6,DPL
   \   000115   AF83         MOV     R7,DPH
   1797          
   1798            if ( listCount > 0 )
   \   000117   E5..         MOV     A,?V11
   \   000119   6024         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1799              osal_memcpy( pBuf, energyValues, listCount );
   \   00011B                ; Setup parameters for call to function osal_memcpy
   \   00011B   7423         MOV     A,#0x23
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F5..         MOV     ?V8,A
   \   000123   A3           INC     DPTR
   \   000124   E0           MOVX    A,@DPTR
   \   000125   F5..         MOV     ?V9,A
   \   000127   75..00       MOV     ?V10,#0x0
   \   00012A   78..         MOV     R0,#?V8
   \   00012C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00012F   AC..         MOV     R4,?V11
   \   000131   7D00         MOV     R5,#0x0
   \   000133   EE           MOV     A,R6
   \   000134   FA           MOV     R2,A
   \   000135   EF           MOV     A,R7
   \   000136   FB           MOV     R3,A
   \   000137   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00013A   7403         MOV     A,#0x3
   \   00013C   12....       LCALL   ?DEALLOC_XSTACK8
   1800          
   1801            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   00013F   85..82       MOV     DPL,?V12
   \   000142   85..83       MOV     DPH,?V13
   \   000145   A3           INC     DPTR
   \   000146   A882         MOV     R0,DPL
   \   000148   A983         MOV     R1,DPH
   \   00014A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00014D   E8           MOV     A,R0
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   A3           INC     DPTR
   \   000150   E9           MOV     A,R1
   \   000151   F0           MOVX    @DPTR,A
   \   000152   7425         MOV     A,#0x25
   \   000154   12....       LCALL   ?XSTACK_DISP0_8
   \   000157   E0           MOVX    A,@DPTR
   \   000158   90....       MOV     DPTR,#ZDP_TxOptions
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C                ; Setup parameters for call to function fillAndSend
   \   00015C   75..38       MOV     ?V8,#0x38
   \   00015F   75..80       MOV     ?V9,#-0x80
   \   000162   78..         MOV     R0,#?V8
   \   000164   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000167   A9..         MOV     R1,?V14
   \   000169   7403         MOV     A,#0x3
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   FC           MOV     R4,A
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   FD           MOV     R5,A
   \   000173   7402         MOV     A,#0x2
   \   000175   12....       LCALL   ?XSTACK_DISP101_8
   \   000178   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00017B   7402         MOV     A,#0x2
   \   00017D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000180   E9           MOV     A,R1
   \   000181   F5..         MOV     ?V10,A
   \   000183                ; Setup parameters for call to function osal_mem_free
   \   000183   AA..         MOV     R2,?V12
   \   000185   AB..         MOV     R3,?V13
   \   000187   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00018A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00018D   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   00018F   F0           MOVX    @DPTR,A
   \   000190   A3           INC     DPTR
   \   000191   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000193   F0           MOVX    @DPTR,A
   \   000194   90....       MOV     DPTR,#ZDP_TxOptions
   \   000197   7400         MOV     A,#0x0
   \   000199   F0           MOVX    @DPTR,A
   \   00019A   A9..         MOV     R1,?V10
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   00019C   7403         MOV     A,#0x3
   \   00019E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A1   7F10         MOV     R7,#0x10
   \   0001A3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1802          }
   1803          
   1804          /*********************************************************************
   1805           * Functions to register for ZDO Over-the-air messages
   1806           */
   1807          
   1808          /*********************************************************************
   1809           * @fn          ZDO_RegisterForZDOMsg
   1810           *
   1811           * @brief       Call this function to register of an incoming over
   1812           *              the air ZDO message - probably a response message
   1813           *              but requests can also be received.
   1814           *              Messages are delivered to the task with ZDO_CB_MSG
   1815           *              as the message ID.
   1816           *
   1817           * @param       taskID - Where you would like the message delivered
   1818           * @param       clusterID - What message?
   1819           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1820           *                          and device announce
   1821           *
   1822           * @return      ZSuccess - successful, ZMemError if not
   1823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1824          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1825          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V6,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V5,R3
   1826            ZDO_MsgCB_t *pList;
   1827            ZDO_MsgCB_t *pLast;
   1828            ZDO_MsgCB_t *pNew;
   1829          
   1830            // Look for duplicate
   1831            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   88..         MOV     ?V2,R0
   \   000015   89..         MOV     ?V3,R1
   \   000017   AE..         MOV     R6,?V2
   \   000019   AF..         MOV     R7,?V3
   1832            while ( pList )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   00001B   EE           MOV     A,R6
   \   00001C   4F           ORL     A,R7
   \   00001D   6035         JZ      ??ZDO_RegisterForZDOMsg_1
   1833            {
   1834              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   65..         XRL     A,?V6
   \   000028   7017         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   65..         XRL     A,?V4
   \   000034   7004         JNZ     ??ZDO_RegisterForZDOMsg_3
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   65..         XRL     A,?V5
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   00003A   7005         JNZ     ??ZDO_RegisterForZDOMsg_2
   1835                return ( ZSuccess );
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   02....       LJMP    ??ZDO_RegisterForZDOMsg_4 & 0xFFFF
   1836              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000041   EE           MOV     A,R6
   \   000042   F8           MOV     R0,A
   \   000043   EF           MOV     A,R7
   \   000044   F9           MOV     R1,A
   \   000045   88..         MOV     ?V2,R0
   \   000047   89..         MOV     ?V3,R1
   1837              pList = (ZDO_MsgCB_t *)pList->next;
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FE           MOV     R6,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FF           MOV     R7,A
   \   000052   80C7         SJMP    ??ZDO_RegisterForZDOMsg_0
   1838            }
   1839          
   1840            // Add to the list
   1841            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000054                ; Setup parameters for call to function osal_mem_alloc
   \   000054   7A05         MOV     R2,#0x5
   \   000056   7B00         MOV     R3,#0x0
   \   000058   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005B   8A..         MOV     ?V8,R2
   \   00005D   8B..         MOV     ?V9,R3
   \   00005F   85....       MOV     ?V0,?V8
   \   000062   85....       MOV     ?V1,?V9
   1842            if ( pNew )
   \   000065   E5..         MOV     A,?V0
   \   000067   45..         ORL     A,?V1
   \   000069   6055         JZ      ??ZDO_RegisterForZDOMsg_5
   1843            {
   1844              pNew->taskID = taskID;
   \   00006B   E5..         MOV     A,?V6
   \   00006D   C0E0         PUSH    A
   \   00006F   85..82       MOV     DPL,?V0
   \   000072   85..83       MOV     DPH,?V1
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
   1845              pNew->clusterID = clusterID;
   \   00007A   85..82       MOV     DPL,?V0
   \   00007D   85..83       MOV     DPH,?V1
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   E5..         MOV     A,?V4
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   E5..         MOV     A,?V5
   \   000089   F0           MOVX    @DPTR,A
   1846              pNew->next = NULL;
   \   00008A   85..82       MOV     DPL,?V0
   \   00008D   85..83       MOV     DPH,?V1
   \   000090   7400         MOV     A,#0x0
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   7400         MOV     A,#0x0
   \   000096   F0           MOVX    @DPTR,A
   1847              if ( zdoMsgCBs )
   \   000097   90....       MOV     DPTR,#zdoMsgCBs
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F8           MOV     R0,A
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F9           MOV     R1,A
   \   00009F   E8           MOV     A,R0
   \   0000A0   49           ORL     A,R1
   \   0000A1   600F         JZ      ??ZDO_RegisterForZDOMsg_6
   1848              {
   1849                pLast->next = pNew;
   \   0000A3   85..82       MOV     DPL,?V2
   \   0000A6   85..83       MOV     DPH,?V3
   \   0000A9   E5..         MOV     A,?V0
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E5..         MOV     A,?V1
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   800A         SJMP    ??ZDO_RegisterForZDOMsg_7
   1850              }
   1851              else
   1852                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   0000B2   90....       MOV     DPTR,#zdoMsgCBs
   \   0000B5   E5..         MOV     A,?V0
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E5..         MOV     A,?V1
   \   0000BB   F0           MOVX    @DPTR,A
   1853              return ( ZSuccess );
   \                     ??ZDO_RegisterForZDOMsg_7:
   \   0000BC   7900         MOV     R1,#0x0
   \   0000BE   8002         SJMP    ??ZDO_RegisterForZDOMsg_4
   1854            }
   1855            else
   1856              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   0000C0   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   0000C2   7F0A         MOV     R7,#0xa
   \   0000C4   02....       LJMP    ?BANKED_LEAVE_XDATA
   1857          }
   1858          
   1859          /*********************************************************************
   1860           * @fn          ZDO_RemoveRegisteredCB
   1861           *
   1862           * @brief       Call this function if you don't want to receive the
   1863           *              incoming message.
   1864           *
   1865           * @param       taskID - Where the messages are being delivered.
   1866           * @param       clusterID - What message?
   1867           *
   1868           * @return      ZSuccess - successful, ZFailure if not found
   1869           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1870          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1871          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V2,R2
   \   000009   8B..         MOV     ?V3,R3
   1872            ZDO_MsgCB_t *pList;
   1873            ZDO_MsgCB_t *pLast = NULL;
   \   00000B   75..00       MOV     ?V0,#0x0
   \   00000E   75..00       MOV     ?V1,#0x0
   1874          
   1875            pList = zdoMsgCBs;
   \   000011   90....       MOV     DPTR,#zdoMsgCBs
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   FE           MOV     R6,A
   \   00001B   E9           MOV     A,R1
   \   00001C   FF           MOV     R7,A
   1876            while ( pList )
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   00001D   EE           MOV     A,R6
   \   00001E   4F           ORL     A,R7
   \   00001F   7003         JNZ     $+5
   \   000021   02....       LJMP    ??ZDO_RemoveRegisteredCB_1 & 0xFFFF
   1877            {
   1878              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   65..         XRL     A,?V4
   \   00002D   7063         JNZ     ??ZDO_RemoveRegisteredCB_2
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   65..         XRL     A,?V2
   \   000039   7004         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   65..         XRL     A,?V3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   00003F   7051         JNZ     ??ZDO_RemoveRegisteredCB_2
   1879              {
   1880                if ( pLast )
   \   000041   E5..         MOV     A,?V0
   \   000043   45..         ORL     A,?V1
   \   000045   6016         JZ      ??ZDO_RemoveRegisteredCB_4
   1881                {
   1882                  // remove this one from the linked list
   1883                  pLast->next = pList->next;
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F8           MOV     R0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   85..82       MOV     DPL,?V0
   \   000053   85..83       MOV     DPH,?V1
   \   000056   E8           MOV     A,R0
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   E9           MOV     A,R1
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   802A         SJMP    ??ZDO_RemoveRegisteredCB_5
   1884                }
   1885                else if ( pList->next )
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F9           MOV     R1,A
   \   000066   E8           MOV     A,R0
   \   000067   49           ORL     A,R1
   \   000068   6013         JZ      ??ZDO_RemoveRegisteredCB_6
   1886                {
   1887                  // remove the first one from the linked list
   1888                  zdoMsgCBs = pList->next;
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F9           MOV     R1,A
   \   000073   90....       MOV     DPTR,#zdoMsgCBs
   \   000076   E8           MOV     A,R0
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   E9           MOV     A,R1
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   800A         SJMP    ??ZDO_RemoveRegisteredCB_5
   1889                }
   1890                else
   1891                {
   1892                  // remove the only item from the list
   1893                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   00007D   90....       MOV     DPTR,#zdoMsgCBs
   \   000080   7400         MOV     A,#0x0
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   7400         MOV     A,#0x0
   \   000086   F0           MOVX    @DPTR,A
   1894                }
   1895                osal_mem_free( pList );
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000087                ; Setup parameters for call to function osal_mem_free
   \   000087   EE           MOV     A,R6
   \   000088   FA           MOV     R2,A
   \   000089   EF           MOV     A,R7
   \   00008A   FB           MOV     R3,A
   \   00008B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1896                return ( ZSuccess );
   \   00008E   7900         MOV     R1,#0x0
   \   000090   8016         SJMP    ??ZDO_RemoveRegisteredCB_7
   1897              }
   1898              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000092   EE           MOV     A,R6
   \   000093   F8           MOV     R0,A
   \   000094   EF           MOV     A,R7
   \   000095   F9           MOV     R1,A
   \   000096   88..         MOV     ?V0,R0
   \   000098   89..         MOV     ?V1,R1
   1899              pList = pList->next;
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FE           MOV     R6,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FF           MOV     R7,A
   \   0000A3   02....       LJMP    ??ZDO_RemoveRegisteredCB_0 & 0xFFFF
   1900            }
   1901          
   1902            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   0000A6   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   0000A8   7F05         MOV     R7,#0x5
   \   0000AA   02....       LJMP    ?BANKED_LEAVE_XDATA
   1903          }
   1904          
   1905          /*********************************************************************
   1906           * @fn          ZDO_SendMsgCBs
   1907           *
   1908           * @brief       This function sends messages to registered tasks.
   1909           *              Local to ZDO and shouldn't be called outside of ZDO.
   1910           *
   1911           * @param       inMsg - incoming message
   1912           *
   1913           * @return      TRUE if sent to at least 1 task, FALSE if not
   1914           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1915          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1916          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1917            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V7,#0x0
   1918            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V2,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V3,A
   1919            while ( pList )
   \                     ??ZDO_SendMsgCBs_0:
   \   000016   E5..         MOV     A,?V2
   \   000018   45..         ORL     A,?V3
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??ZDO_SendMsgCBs_1 & 0xFFFF
   1920            {
   1921              if ( (pList->clusterID == inMsg->clusterID)
   1922                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   1923                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \   00001F   85..82       MOV     DPL,?V2
   \   000022   85..83       MOV     DPH,?V3
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   E5..         MOV     A,?V0
   \   00002F   240C         ADD     A,#0xc
   \   000031   F582         MOV     DPL,A
   \   000033   E4           CLR     A
   \   000034   35..         ADDC    A,?V1
   \   000036   F583         MOV     DPH,A
   \   000038   E0           MOVX    A,@DPTR
   \   000039   68           XRL     A,R0
   \   00003A   7003         JNZ     ??ZDO_SendMsgCBs_2
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   69           XRL     A,R1
   \                     ??ZDO_SendMsgCBs_2:
   \   00003F   6048         JZ      ??ZDO_SendMsgCBs_3
   \   000041   85..82       MOV     DPL,?V2
   \   000044   85..83       MOV     DPH,?V3
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   64FF         XRL     A,#0xff
   \   00004D   7004         JNZ     ??ZDO_SendMsgCBs_4
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   64FF         XRL     A,#0xff
   \                     ??ZDO_SendMsgCBs_4:
   \   000053   6003         JZ      $+5
   \   000055   02....       LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
   \   000058   E5..         MOV     A,?V0
   \   00005A   240C         ADD     A,#0xc
   \   00005C   F582         MOV     DPL,A
   \   00005E   E4           CLR     A
   \   00005F   35..         ADDC    A,?V1
   \   000061   F583         MOV     DPH,A
   \   000063   E0           MOVX    A,@DPTR
   \   000064   5400         ANL     A,#0x0
   \   000066   F8           MOV     R0,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   5480         ANL     A,#0x80
   \   00006B   F9           MOV     R1,A
   \   00006C   E8           MOV     A,R0
   \   00006D   49           ORL     A,R1
   \   00006E   7019         JNZ     ??ZDO_SendMsgCBs_3
   \   000070   E5..         MOV     A,?V0
   \   000072   240C         ADD     A,#0xc
   \   000074   F582         MOV     DPL,A
   \   000076   E4           CLR     A
   \   000077   35..         ADDC    A,?V1
   \   000079   F583         MOV     DPH,A
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   6413         XRL     A,#0x13
   \   00007E   7004         JNZ     ??ZDO_SendMsgCBs_6
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   6400         XRL     A,#0x0
   \                     ??ZDO_SendMsgCBs_6:
   \   000084   6003         JZ      $+5
   \   000086   02....       LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
   1924              {
   1925                zdoIncomingMsg_t *msgPtr;
   1926          
   1927                // Send the address to the task
   1928                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_3:
   \   000089                ; Setup parameters for call to function osal_msg_allocate
   \   000089   E5..         MOV     A,?V0
   \   00008B   2410         ADD     A,#0x10
   \   00008D   F582         MOV     DPL,A
   \   00008F   E4           CLR     A
   \   000090   35..         ADDC    A,?V1
   \   000092   F583         MOV     DPH,A
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F8           MOV     R0,A
   \   000096   7900         MOV     R1,#0x0
   \   000098   E8           MOV     A,R0
   \   000099   2417         ADD     A,#0x17
   \   00009B   FA           MOV     R2,A
   \   00009C   E4           CLR     A
   \   00009D   39           ADDC    A,R1
   \   00009E   FB           MOV     R3,A
   \   00009F   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0000A2   8A..         MOV     ?V4,R2
   \   0000A4   8B..         MOV     ?V5,R3
   \   0000A6   AE..         MOV     R6,?V4
   \   0000A8   AF..         MOV     R7,?V5
   1929                if ( msgPtr )
   \   0000AA   EE           MOV     A,R6
   \   0000AB   4F           ORL     A,R7
   \   0000AC   7003         JNZ     $+5
   \   0000AE   02....       LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
   1930                {
   1931                  // copy struct
   1932                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   0000B1                ; Setup parameters for call to function osal_memcpy
   \   0000B1   85....       MOV     ?V4,?V0
   \   0000B4   85....       MOV     ?V5,?V1
   \   0000B7   75..00       MOV     ?V6,#0x0
   \   0000BA   78..         MOV     R0,#?V4
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BF   7C17         MOV     R4,#0x17
   \   0000C1   7D00         MOV     R5,#0x0
   \   0000C3   EE           MOV     A,R6
   \   0000C4   FA           MOV     R2,A
   \   0000C5   EF           MOV     A,R7
   \   0000C6   FB           MOV     R3,A
   \   0000C7   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CA   7403         MOV     A,#0x3
   \   0000CC   12....       LCALL   ?DEALLOC_XSTACK8
   1933          
   1934                  if ( inMsg->asduLen )
   \   0000CF   E5..         MOV     A,?V0
   \   0000D1   2410         ADD     A,#0x10
   \   0000D3   F582         MOV     DPL,A
   \   0000D5   E4           CLR     A
   \   0000D6   35..         ADDC    A,?V1
   \   0000D8   F583         MOV     DPH,A
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   6054         JZ      ??ZDO_SendMsgCBs_7
   1935                  {
   1936                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   0000DD   EE           MOV     A,R6
   \   0000DE   2417         ADD     A,#0x17
   \   0000E0   F8           MOV     R0,A
   \   0000E1   E4           CLR     A
   \   0000E2   3F           ADDC    A,R7
   \   0000E3   F9           MOV     R1,A
   \   0000E4   EE           MOV     A,R6
   \   0000E5   2413         ADD     A,#0x13
   \   0000E7   F582         MOV     DPL,A
   \   0000E9   E4           CLR     A
   \   0000EA   3F           ADDC    A,R7
   \   0000EB   F583         MOV     DPH,A
   \   0000ED   E8           MOV     A,R0
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E9           MOV     A,R1
   \   0000F1   F0           MOVX    @DPTR,A
   1937                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000F2                ; Setup parameters for call to function osal_memcpy
   \   0000F2   E5..         MOV     A,?V0
   \   0000F4   2413         ADD     A,#0x13
   \   0000F6   F582         MOV     DPL,A
   \   0000F8   E4           CLR     A
   \   0000F9   35..         ADDC    A,?V1
   \   0000FB   F583         MOV     DPH,A
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F5..         MOV     ?V4,A
   \   000100   A3           INC     DPTR
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F5..         MOV     ?V5,A
   \   000104   75..00       MOV     ?V6,#0x0
   \   000107   78..         MOV     R0,#?V4
   \   000109   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00010C   E5..         MOV     A,?V0
   \   00010E   2410         ADD     A,#0x10
   \   000110   F582         MOV     DPL,A
   \   000112   E4           CLR     A
   \   000113   35..         ADDC    A,?V1
   \   000115   F583         MOV     DPH,A
   \   000117   E0           MOVX    A,@DPTR
   \   000118   FC           MOV     R4,A
   \   000119   7D00         MOV     R5,#0x0
   \   00011B   EE           MOV     A,R6
   \   00011C   2413         ADD     A,#0x13
   \   00011E   F582         MOV     DPL,A
   \   000120   E4           CLR     A
   \   000121   3F           ADDC    A,R7
   \   000122   F583         MOV     DPH,A
   \   000124   E0           MOVX    A,@DPTR
   \   000125   FA           MOV     R2,A
   \   000126   A3           INC     DPTR
   \   000127   E0           MOVX    A,@DPTR
   \   000128   FB           MOV     R3,A
   \   000129   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012C   7403         MOV     A,#0x3
   \   00012E   12....       LCALL   ?DEALLOC_XSTACK8
   1938                  }
   1939          
   1940                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_7:
   \   000131   8E82         MOV     DPL,R6
   \   000133   8F83         MOV     DPH,R7
   \   000135   74D3         MOV     A,#-0x2d
   \   000137   F0           MOVX    @DPTR,A
   1941                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   000138                ; Setup parameters for call to function osal_msg_send
   \   000138   EE           MOV     A,R6
   \   000139   FA           MOV     R2,A
   \   00013A   EF           MOV     A,R7
   \   00013B   FB           MOV     R3,A
   \   00013C   85..82       MOV     DPL,?V2
   \   00013F   85..83       MOV     DPH,?V3
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F9           MOV     R1,A
   \   000146   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000149   E9           MOV     A,R1
   1942                  ret = TRUE;
   \   00014A   75..01       MOV     ?V7,#0x1
   1943                }
   1944              }
   1945              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_5:
   \   00014D   85..82       MOV     DPL,?V2
   \   000150   85..83       MOV     DPH,?V3
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F5..         MOV     ?V2,A
   \   000156   A3           INC     DPTR
   \   000157   E0           MOVX    A,@DPTR
   \   000158   F5..         MOV     ?V3,A
   \   00015A   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1946            }
   1947            return ( ret );
   \                     ??ZDO_SendMsgCBs_1:
   \   00015D   A9..         MOV     R1,?V7
   \   00015F   7F08         MOV     R7,#0x8
   \   000161   02....       LJMP    ?BANKED_LEAVE_XDATA
   1948          }
   1949          
   1950          /*********************************************************************
   1951           * Incoming message processor
   1952           */
   1953          
   1954          /*********************************************************************
   1955           * @fn          ZDP_IncomingData
   1956           *
   1957           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1958           *              from the APS sub-layer to the ZDO.
   1959           *
   1960           * @param       pData - Incoming Message
   1961           *
   1962           * @return      none
   1963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1964          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1965          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1966            uint8 x = 0;
   \   00000E   75..00       MOV     ?V0,#0x0
   1967            uint8 handled;
   1968            zdoIncomingMsg_t inMsg;
   1969          
   1970            inMsg.srcAddr.addrMode = Addr16Bit;
   \   000011   740A         MOV     A,#0xa
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   7402         MOV     A,#0x2
   \   000018   F0           MOVX    @DPTR,A
   1971            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E8           MOV     A,R0
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   E9           MOV     A,R1
   \   000031   F0           MOVX    @DPTR,A
   1972            inMsg.wasBroadcast = pData->wasBroadcast;
   \   000032   EE           MOV     A,R6
   \   000033   2415         ADD     A,#0x15
   \   000035   F582         MOV     DPL,A
   \   000037   E4           CLR     A
   \   000038   3F           ADDC    A,R7
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   C0E0         PUSH    A
   \   00003E   740B         MOV     A,#0xb
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
   1973            inMsg.clusterID = pData->clusterId;
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   740C         MOV     A,#0xc
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   E8           MOV     A,R0
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E9           MOV     A,R1
   \   00005C   F0           MOVX    @DPTR,A
   1974            inMsg.SecurityUse = pData->SecurityUse;
   \   00005D   EE           MOV     A,R6
   \   00005E   2419         ADD     A,#0x19
   \   000060   F582         MOV     DPL,A
   \   000062   E4           CLR     A
   \   000063   3F           ADDC    A,R7
   \   000064   F583         MOV     DPH,A
   \   000066   E0           MOVX    A,@DPTR
   \   000067   C0E0         PUSH    A
   \   000069   740E         MOV     A,#0xe
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   D0E0         POP     A
   \   000070   F0           MOVX    @DPTR,A
   1975          
   1976            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000071   EE           MOV     A,R6
   \   000072   2420         ADD     A,#0x20
   \   000074   F582         MOV     DPL,A
   \   000076   E4           CLR     A
   \   000077   3F           ADDC    A,R7
   \   000078   F583         MOV     DPH,A
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F8           MOV     R0,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   E8           MOV     A,R0
   \   000080   24FF         ADD     A,#-0x1
   \   000082   C0E0         PUSH    A
   \   000084   7410         MOV     A,#0x10
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   D0E0         POP     A
   \   00008B   F0           MOVX    @DPTR,A
   1977            inMsg.asdu = pData->cmd.Data+1;
   \   00008C   EE           MOV     A,R6
   \   00008D   2422         ADD     A,#0x22
   \   00008F   F582         MOV     DPL,A
   \   000091   E4           CLR     A
   \   000092   3F           ADDC    A,R7
   \   000093   F583         MOV     DPH,A
   \   000095   E0           MOVX    A,@DPTR
   \   000096   2401         ADD     A,#0x1
   \   000098   F8           MOV     R0,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   3400         ADDC    A,#0x0
   \   00009D   F9           MOV     R1,A
   \   00009E   7413         MOV     A,#0x13
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   E8           MOV     A,R0
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E9           MOV     A,R1
   \   0000A7   F0           MOVX    @DPTR,A
   1978            inMsg.TransSeq = pData->cmd.Data[0];
   \   0000A8   EE           MOV     A,R6
   \   0000A9   2422         ADD     A,#0x22
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   E4           CLR     A
   \   0000AE   3F           ADDC    A,R7
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F8           MOV     R0,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F583         MOV     DPH,A
   \   0000B7   8882         MOV     DPL,R0
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C0E0         PUSH    A
   \   0000BC   740F         MOV     A,#0xf
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   D0E0         POP     A
   \   0000C3   F0           MOVX    @DPTR,A
   1979            inMsg.macDestAddr = pData->macDestAddr;
   \   0000C4   EE           MOV     A,R6
   \   0000C5   2412         ADD     A,#0x12
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   E4           CLR     A
   \   0000CA   3F           ADDC    A,R7
   \   0000CB   F583         MOV     DPH,A
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F8           MOV     R0,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F9           MOV     R1,A
   \   0000D2   7411         MOV     A,#0x11
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   E8           MOV     A,R0
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   E9           MOV     A,R1
   \   0000DB   F0           MOVX    @DPTR,A
   1980            inMsg.macSrcAddr = pData->macSrcAddr;
   \   0000DC   EE           MOV     A,R6
   \   0000DD   2424         ADD     A,#0x24
   \   0000DF   F582         MOV     DPL,A
   \   0000E1   E4           CLR     A
   \   0000E2   3F           ADDC    A,R7
   \   0000E3   F583         MOV     DPH,A
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F8           MOV     R0,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   F9           MOV     R1,A
   \   0000EA   7415         MOV     A,#0x15
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   E8           MOV     A,R0
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E9           MOV     A,R1
   \   0000F3   F0           MOVX    @DPTR,A
   1981          
   1982            handled = ZDO_SendMsgCBs( &inMsg );
   \   0000F4                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000F4   AA..         MOV     R2,?XSP + 0
   \   0000F6   AB..         MOV     R3,?XSP + 1
   \   0000F8   12....       LCALL   `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000FB   E9           MOV     A,R1
   \   0000FC   F5..         MOV     ?V1,A
   1983          
   1984          #if (defined MT_ZDO_CB_FUNC)
   1985          #if !defined MT_TASK
   1986            if (zgZdoDirectCB)
   1987          #endif
   1988            {
   1989              MT_ZdoDirectCB( pData, &inMsg );
   1990            }
   1991          #endif
   1992          
   1993            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   \                     ??ZDP_IncomingData_0:
   \   0000FE   A8..         MOV     R0,?V0
   \   000100   7900         MOV     R1,#0x0
   \   000102   E8           MOV     A,R0
   \   000103   75F004       MOV     B,#0x4
   \   000106   A4           MUL     AB
   \   000107   C8           XCH     A,R0
   \   000108   AAF0         MOV     R2,B
   \   00010A   75F000       MOV     B,#0x0
   \   00010D   A4           MUL     AB
   \   00010E   2A           ADD     A,R2
   \   00010F   FA           MOV     R2,A
   \   000110   75F004       MOV     B,#0x4
   \   000113   E9           MOV     A,R1
   \   000114   A4           MUL     AB
   \   000115   2A           ADD     A,R2
   \   000116   F9           MOV     R1,A
   \   000117   74..         MOV     A,#zdpMsgProcs & 0xff
   \   000119   28           ADD     A,R0
   \   00011A   F582         MOV     DPL,A
   \   00011C   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   00011E   39           ADDC    A,R1
   \   00011F   F583         MOV     DPH,A
   \   000121   E4           CLR     A
   \   000122   93           MOVC    A,@A+DPTR
   \   000123   F8           MOV     R0,A
   \   000124   7401         MOV     A,#0x1
   \   000126   93           MOVC    A,@A+DPTR
   \   000127   F9           MOV     R1,A
   \   000128   74FF         MOV     A,#-0x1
   \   00012A   68           XRL     A,R0
   \   00012B   7003         JNZ     ??ZDP_IncomingData_1
   \   00012D   74FF         MOV     A,#-0x1
   \   00012F   69           XRL     A,R1
   \                     ??ZDP_IncomingData_1:
   \   000130   6074         JZ      ??ZDP_IncomingData_2
   1994            {
   1995              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   \   000132   A8..         MOV     R0,?V0
   \   000134   7900         MOV     R1,#0x0
   \   000136   E8           MOV     A,R0
   \   000137   75F004       MOV     B,#0x4
   \   00013A   A4           MUL     AB
   \   00013B   C8           XCH     A,R0
   \   00013C   AAF0         MOV     R2,B
   \   00013E   75F000       MOV     B,#0x0
   \   000141   A4           MUL     AB
   \   000142   2A           ADD     A,R2
   \   000143   FA           MOV     R2,A
   \   000144   75F004       MOV     B,#0x4
   \   000147   E9           MOV     A,R1
   \   000148   A4           MUL     AB
   \   000149   2A           ADD     A,R2
   \   00014A   F9           MOV     R1,A
   \   00014B   74..         MOV     A,#zdpMsgProcs & 0xff
   \   00014D   28           ADD     A,R0
   \   00014E   F582         MOV     DPL,A
   \   000150   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   000152   39           ADDC    A,R1
   \   000153   F583         MOV     DPH,A
   \   000155   E4           CLR     A
   \   000156   93           MOVC    A,@A+DPTR
   \   000157   F8           MOV     R0,A
   \   000158   7401         MOV     A,#0x1
   \   00015A   93           MOVC    A,@A+DPTR
   \   00015B   F9           MOV     R1,A
   \   00015C   740C         MOV     A,#0xc
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   E0           MOVX    A,@DPTR
   \   000162   68           XRL     A,R0
   \   000163   7003         JNZ     ??ZDP_IncomingData_3
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   69           XRL     A,R1
   \                     ??ZDP_IncomingData_3:
   \   000168   7037         JNZ     ??ZDP_IncomingData_4
   1996              {
   1997                zdpMsgProcs[x].pFn( &inMsg );
   \   00016A                ; Setup parameters for indirect call
   \   00016A   AA..         MOV     R2,?XSP + 0
   \   00016C   AB..         MOV     R3,?XSP + 1
   \   00016E   A8..         MOV     R0,?V0
   \   000170   7900         MOV     R1,#0x0
   \   000172   E8           MOV     A,R0
   \   000173   75F004       MOV     B,#0x4
   \   000176   A4           MUL     AB
   \   000177   C8           XCH     A,R0
   \   000178   ACF0         MOV     R4,B
   \   00017A   75F000       MOV     B,#0x0
   \   00017D   A4           MUL     AB
   \   00017E   2C           ADD     A,R4
   \   00017F   FC           MOV     R4,A
   \   000180   75F004       MOV     B,#0x4
   \   000183   E9           MOV     A,R1
   \   000184   A4           MUL     AB
   \   000185   2C           ADD     A,R4
   \   000186   F9           MOV     R1,A
   \   000187   74..         MOV     A,#(zdpMsgProcs + 2) & 0xff
   \   000189   28           ADD     A,R0
   \   00018A   F582         MOV     DPL,A
   \   00018C   74..         MOV     A,#((zdpMsgProcs + 2) >> 8) & 0xff
   \   00018E   39           ADDC    A,R1
   \   00018F   F583         MOV     DPH,A
   \   000191   E4           CLR     A
   \   000192   93           MOVC    A,@A+DPTR
   \   000193   C0E0         PUSH    A
   \   000195   7401         MOV     A,#0x1
   \   000197   93           MOVC    A,@A+DPTR
   \   000198   F583         MOV     DPH,A
   \   00019A   D082         POP     DPL
   \   00019C   12....       LCALL   ?CALL_IND
   1998                return;
   \   00019F   8010         SJMP    ??ZDP_IncomingData_5
   1999              }
   2000              x++;
   \                     ??ZDP_IncomingData_4:
   \   0001A1   05..         INC     ?V0
   \   0001A3   02....       LJMP    ??ZDP_IncomingData_0 & 0xFFFF
   2001            }
   2002          
   2003            // Handle unhandled messages
   2004            if ( !handled )
   \                     ??ZDP_IncomingData_2:
   \   0001A6   E5..         MOV     A,?V1
   \   0001A8   7007         JNZ     ??ZDP_IncomingData_5
   2005              ZDApp_InMsgCB( &inMsg );
   \   0001AA                ; Setup parameters for call to function ZDApp_InMsgCB
   \   0001AA   AA..         MOV     R2,?XSP + 0
   \   0001AC   AB..         MOV     R3,?XSP + 1
   \   0001AE   12....       LCALL   `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   2006          }
   \                     ??ZDP_IncomingData_5:
   \   0001B1   7417         MOV     A,#0x17
   \   0001B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B6   7F02         MOV     R7,#0x2
   \   0001B8   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??fillAndSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NWKAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NwkAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IEEEAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_DeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceTimeoutReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdpProcessAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NodeDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_PowerDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EPRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_GenericRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_BindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   2007          
   2008          /*********************************************************************
   2009          *********************************************************************/
   2010          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     18   ZDO_RegisterForZDOMsg
        0     18   -> osal_mem_alloc
      0     13   ZDO_RemoveRegisteredCB
        0     13   -> osal_mem_free
      0     52   ZDO_SendMsgCBs
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      1     34   ZDP_BindUnbindReq
        0     26   -> fillAndSend
        0     24   -> sAddrExtCpy
      1     26   ZDP_DeviceAnnce
        0     25   -> fillAndSend
        0     23   -> sAddrExtCpy
      1     35   ZDP_EPRsp
        0     27   -> fillAndSend
        0     28   -> osal_memcpy
      1     38   ZDP_EndDeviceBindReq
        0     27   -> NLME_GetExtAddr
        0     27   -> NLME_GetShortAddr
        0     29   -> fillAndSend
        0     27   -> sAddrExtCpy
      1     27   ZDP_EndDeviceTimeoutReq
        0     27   -> fillAndSend
        0     25   -> sAddrExtCpy
      1     23   ZDP_GenericRsp
        0     19   -> fillAndSend
      1     27   ZDP_IEEEAddrReq
        0     27   -> fillAndSend
      1     33   ZDP_IncomingData
        0     33   -> ZDApp_InMsgCB
        0     33   -> ZDO_SendMsgCBs
      1     34   ZDP_MatchDescReq
        0     26   -> fillAndSend
      1     34   ZDP_MgmtBindRsp
        0     29   -> fillAndSend
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     27   -> sAddrExtCpy
      1     17   ZDP_MgmtDirectJoinReq
        0     16   -> fillAndSend
        0     14   -> sAddrExtCpy
      0     18   ZDP_MgmtLeaveReq
        0     16   -> fillAndSend
        0     14   -> sAddrExtCpy
      1     32   ZDP_MgmtLqiRsp
        0     27   -> fillAndSend
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
        0     25   -> sAddrExtCpy
      1     30   ZDP_MgmtNwkDiscReq
        0     24   -> fillAndSend
        0     26   -> osal_buffer_uint32
      1     32   ZDP_MgmtNwkDiscRsp
        0     27   -> fillAndSend
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
        0     25   -> sAddrExtCpy
      1     43   ZDP_MgmtNwkUpdateNotify
        0     29   -> fillAndSend
        0     31   -> osal_buffer_uint32
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     30   -> osal_memcpy
      1     32   ZDP_MgmtNwkUpdateReq
        0     24   -> fillAndSend
        0     26   -> osal_buffer_uint32
      1     16   ZDP_MgmtPermitJoinReq
        0     16   -> fillAndSend
      1     32   ZDP_MgmtRtgRsp
        0     27   -> fillAndSend
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
      1     17   ZDP_NWKAddrOfInterestReq
        0     16   -> fillAndSend
      1     22   ZDP_NodeDescMsg
        0     20   -> fillAndSend
      1     27   ZDP_NwkAddrReq
        0     27   -> fillAndSend
        0     25   -> sAddrExtCmp
        0     25   -> sAddrExtCpy
      1     22   ZDP_PowerDescMsg
        0     20   -> fillAndSend
      1     29   ZDP_SendData
        0     24   -> fillAndSend
      1     25   ZDP_ServerDiscReq
        0     25   -> fillAndSend
      1     25   ZDP_ServerDiscRsp
        0     21   -> fillAndSend
      1     20   ZDP_SimpleDescMsg
        0     20   -> fillAndSend
      1     17   ZDP_SimpleDescReq
        0     16   -> fillAndSend
      1     27   ZDP_UserDescRsp
        0     23   -> fillAndSend
        0     24   -> osal_memcpy
      1     25   ZDP_UserDescSet
        0     22   -> fillAndSend
        0     23   -> osal_memcpy
        0     20   -> osal_memset
      1     77   fillAndSend
        0     37   -> AF_DataRequest
        0     28   -> osal_memset
      1     40   zdpProcessAddrReq
        0     38   -> AddrMgrEntryGet
        0     38   -> AssocGetWithExt
        0     38   -> AssocGetWithShort
        0     38   -> AssocMakeList
        0     40   -> fillAndSend
        0     38   -> osal_mem_free
        0     38   -> sAddrExtCmp
        0     38   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
     199  ZDO_RegisterForZDOMsg
       6  ZDO_RegisterForZDOMsg::?relay
     173  ZDO_RemoveRegisteredCB
       6  ZDO_RemoveRegisteredCB::?relay
     356  ZDO_SendMsgCBs
       6  ZDO_SendMsgCBs::?relay
       1  ZDP_AF_ENDPOINT
     418  ZDP_BindUnbindReq
       6  ZDP_BindUnbindReq::?relay
      80  ZDP_Buf
     171  ZDP_DeviceAnnce
       6  ZDP_DeviceAnnce::?relay
     278  ZDP_EPRsp
       6  ZDP_EPRsp::?relay
     657  ZDP_EndDeviceBindReq
       6  ZDP_EndDeviceBindReq::?relay
     172  ZDP_EndDeviceTimeoutReq
       6  ZDP_EndDeviceTimeoutReq::?relay
     168  ZDP_GenericRsp
       6  ZDP_GenericRsp::?relay
     178  ZDP_IEEEAddrReq
       6  ZDP_IEEEAddrReq::?relay
     443  ZDP_IncomingData
       6  ZDP_IncomingData::?relay
     643  ZDP_MatchDescReq
       6  ZDP_MatchDescReq::?relay
     648  ZDP_MgmtBindRsp
       6  ZDP_MgmtBindRsp::?relay
      88  ZDP_MgmtDirectJoinReq
       6  ZDP_MgmtDirectJoinReq::?relay
     146  ZDP_MgmtLeaveReq
       6  ZDP_MgmtLeaveReq::?relay
     645  ZDP_MgmtLqiRsp
       6  ZDP_MgmtLqiRsp::?relay
     148  ZDP_MgmtNwkDiscReq
       6  ZDP_MgmtNwkDiscReq::?relay
     500  ZDP_MgmtNwkDiscRsp
       6  ZDP_MgmtNwkDiscRsp::?relay
     422  ZDP_MgmtNwkUpdateNotify
       6  ZDP_MgmtNwkUpdateNotify::?relay
     274  ZDP_MgmtNwkUpdateReq
       6  ZDP_MgmtNwkUpdateReq::?relay
      86  ZDP_MgmtPermitJoinReq
       6  ZDP_MgmtPermitJoinReq::?relay
     550  ZDP_MgmtRtgRsp
       6  ZDP_MgmtRtgRsp::?relay
      92  ZDP_NWKAddrOfInterestReq
       6  ZDP_NWKAddrOfInterestReq::?relay
     593  ZDP_NodeDescMsg
       6  ZDP_NodeDescMsg::?relay
     193  ZDP_NwkAddrReq
       6  ZDP_NwkAddrReq::?relay
     262  ZDP_PowerDescMsg
       6  ZDP_PowerDescMsg::?relay
     168  ZDP_SendData
       6  ZDP_SendData::?relay
     151  ZDP_ServerDiscReq
       6  ZDP_ServerDiscReq::?relay
     176  ZDP_ServerDiscRsp
       6  ZDP_ServerDiscRsp::?relay
     923  ZDP_SimpleDescMsg
       6  ZDP_SimpleDescMsg::?relay
     112  ZDP_SimpleDescReq
       6  ZDP_SimpleDescReq::?relay
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     237  ZDP_UserDescRsp
       6  ZDP_UserDescRsp::?relay
     240  ZDP_UserDescSet
       6  ZDP_UserDescSet::?relay
     219  fillAndSend
       6  fillAndSend::?relay
       2  zdoMsgCBs
      52  zdpMsgProcs
    1065  zdpProcessAddrReq
       6  zdpProcessAddrReq::?relay

 
 11 794 bytes in segment BANKED_CODE
    210 bytes in segment BANK_RELAYS
     53 bytes in segment CODE_C
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
     84 bytes in segment XDATA_Z
 
 12 059 bytes of CODE  memory
     86 bytes of XDATA memory

Errors: none
Warnings: none
