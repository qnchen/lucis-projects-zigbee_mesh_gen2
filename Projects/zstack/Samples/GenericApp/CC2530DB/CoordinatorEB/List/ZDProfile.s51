///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               21/Apr/2017  17:49:24
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\stack\zdo\ZDProfile.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\stack\zdo\ZDProfile.c" -D ZTOOL_P1 -D MT_TASK -D
//        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_RESTORE -D
//        NV_INIT -D NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D OPEN_FCS -lC
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
//        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -On --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\ZDProfile.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDProfile

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,0203H
        PUBLIC `??ZDO_RemoveRegisteredCB::?relay`
        FUNCTION `??ZDO_RemoveRegisteredCB::?relay`,0203H
        PUBLIC `??ZDO_SendMsgCBs::?relay`
        FUNCTION `??ZDO_SendMsgCBs::?relay`,0203H
        PUBLIC `??ZDP_BindUnbindReq::?relay`
        FUNCTION `??ZDP_BindUnbindReq::?relay`,0203H
        PUBLIC `??ZDP_DeviceAnnce::?relay`
        FUNCTION `??ZDP_DeviceAnnce::?relay`,0203H
        PUBLIC `??ZDP_EPRsp::?relay`
        FUNCTION `??ZDP_EPRsp::?relay`,0203H
        PUBLIC `??ZDP_EndDeviceBindReq::?relay`
        FUNCTION `??ZDP_EndDeviceBindReq::?relay`,0203H
        PUBLIC `??ZDP_EndDeviceTimeoutReq::?relay`
        FUNCTION `??ZDP_EndDeviceTimeoutReq::?relay`,0203H
        PUBLIC `??ZDP_GenericRsp::?relay`
        FUNCTION `??ZDP_GenericRsp::?relay`,0203H
        PUBLIC `??ZDP_IEEEAddrReq::?relay`
        FUNCTION `??ZDP_IEEEAddrReq::?relay`,0203H
        PUBLIC `??ZDP_IncomingData::?relay`
        FUNCTION `??ZDP_IncomingData::?relay`,0203H
        PUBLIC `??ZDP_MatchDescReq::?relay`
        FUNCTION `??ZDP_MatchDescReq::?relay`,0203H
        PUBLIC `??ZDP_MgmtBindRsp::?relay`
        FUNCTION `??ZDP_MgmtBindRsp::?relay`,0203H
        PUBLIC `??ZDP_MgmtDirectJoinReq::?relay`
        FUNCTION `??ZDP_MgmtDirectJoinReq::?relay`,0203H
        PUBLIC `??ZDP_MgmtLeaveReq::?relay`
        FUNCTION `??ZDP_MgmtLeaveReq::?relay`,0203H
        PUBLIC `??ZDP_MgmtLqiRsp::?relay`
        FUNCTION `??ZDP_MgmtLqiRsp::?relay`,0203H
        PUBLIC `??ZDP_MgmtNwkDiscReq::?relay`
        FUNCTION `??ZDP_MgmtNwkDiscReq::?relay`,0203H
        PUBLIC `??ZDP_MgmtNwkDiscRsp::?relay`
        FUNCTION `??ZDP_MgmtNwkDiscRsp::?relay`,0203H
        PUBLIC `??ZDP_MgmtNwkUpdateNotify::?relay`
        FUNCTION `??ZDP_MgmtNwkUpdateNotify::?relay`,0203H
        PUBLIC `??ZDP_MgmtNwkUpdateReq::?relay`
        FUNCTION `??ZDP_MgmtNwkUpdateReq::?relay`,0203H
        PUBLIC `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,0203H
        PUBLIC `??ZDP_MgmtRtgRsp::?relay`
        FUNCTION `??ZDP_MgmtRtgRsp::?relay`,0203H
        PUBLIC `??ZDP_NWKAddrOfInterestReq::?relay`
        FUNCTION `??ZDP_NWKAddrOfInterestReq::?relay`,0203H
        PUBLIC `??ZDP_NodeDescMsg::?relay`
        FUNCTION `??ZDP_NodeDescMsg::?relay`,0203H
        PUBLIC `??ZDP_NwkAddrReq::?relay`
        FUNCTION `??ZDP_NwkAddrReq::?relay`,0203H
        PUBLIC `??ZDP_PowerDescMsg::?relay`
        FUNCTION `??ZDP_PowerDescMsg::?relay`,0203H
        PUBLIC `??ZDP_SendData::?relay`
        FUNCTION `??ZDP_SendData::?relay`,0203H
        PUBLIC `??ZDP_ServerDiscReq::?relay`
        FUNCTION `??ZDP_ServerDiscReq::?relay`,0203H
        PUBLIC `??ZDP_ServerDiscRsp::?relay`
        FUNCTION `??ZDP_ServerDiscRsp::?relay`,0203H
        PUBLIC `??ZDP_SimpleDescMsg::?relay`
        FUNCTION `??ZDP_SimpleDescMsg::?relay`,0203H
        PUBLIC `??ZDP_SimpleDescReq::?relay`
        FUNCTION `??ZDP_SimpleDescReq::?relay`,0203H
        PUBLIC `??ZDP_UserDescRsp::?relay`
        FUNCTION `??ZDP_UserDescRsp::?relay`,0203H
        PUBLIC `??ZDP_UserDescSet::?relay`
        FUNCTION `??ZDP_UserDescSet::?relay`,0203H
        FUNCTION `??fillAndSend::?relay`,0203H
        PUBLIC `??zdpProcessAddrReq::?relay`
        FUNCTION `??zdpProcessAddrReq::?relay`,0203H
        PUBLIC ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDO_RemoveRegisteredCB
        FUNCTION ZDO_RemoveRegisteredCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDO_SendMsgCBs
        FUNCTION ZDO_SendMsgCBs,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDP_AF_ENDPOINT
        PUBLIC ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,0a1203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDP_EPRsp
        FUNCTION ZDP_EPRsp,0a1203H
        ARGFRAME XSTACK, 7, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0a1203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDP_EndDeviceTimeoutReq
        FUNCTION ZDP_EndDeviceTimeoutReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0a1203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDP_MgmtBindRsp
        FUNCTION ZDP_MgmtBindRsp,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDP_MgmtDirectJoinReq
        FUNCTION ZDP_MgmtDirectJoinReq,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDP_MgmtLeaveReq
        FUNCTION ZDP_MgmtLeaveReq,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDP_MgmtLqiRsp
        FUNCTION ZDP_MgmtLqiRsp,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_MgmtNwkDiscReq
        FUNCTION ZDP_MgmtNwkDiscReq,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDP_MgmtNwkDiscRsp
        FUNCTION ZDP_MgmtNwkDiscRsp,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_MgmtNwkUpdateNotify
        FUNCTION ZDP_MgmtNwkUpdateNotify,0a1203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDP_MgmtNwkUpdateReq
        FUNCTION ZDP_MgmtNwkUpdateReq,0a1203H
        ARGFRAME XSTACK, 6, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDP_MgmtRtgRsp
        FUNCTION ZDP_MgmtRtgRsp,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDP_NodeDescMsg
        FUNCTION ZDP_NodeDescMsg,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_PowerDescMsg
        FUNCTION ZDP_PowerDescMsg,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_SendData
        FUNCTION ZDP_SendData,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDP_ServerDiscReq
        FUNCTION ZDP_ServerDiscReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDP_ServerDiscRsp
        FUNCTION ZDP_ServerDiscRsp,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDP_SimpleDescMsg
        FUNCTION ZDP_SimpleDescMsg,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDP_TransID
        PUBLIC ZDP_TxOptions
        PUBLIC ZDP_UserDescRsp
        FUNCTION ZDP_UserDescRsp,0a1203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDP_UserDescSet
        FUNCTION ZDP_UserDescSet,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        FUNCTION fillAndSend,0a1203H
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC zdoMsgCBs
        PUBLIC zdpMsgProcs
        PUBLIC zdpProcessAddrReq
        FUNCTION zdpProcessAddrReq,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 40, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
`??AddrMgrEntryGet::?relay` SYMBOL "?relay", AddrMgrEntryGet
AssocGetWithExt     SYMBOL "AssocGetWithExt"
`??AssocGetWithExt::?relay` SYMBOL "?relay", AssocGetWithExt
AssocGetWithShort   SYMBOL "AssocGetWithShort"
`??AssocGetWithShort::?relay` SYMBOL "?relay", AssocGetWithShort
AssocMakeList       SYMBOL "AssocMakeList"
`??AssocMakeList::?relay` SYMBOL "?relay", AssocMakeList
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
`??ZDApp_InMsgCB::?relay` SYMBOL "?relay", ZDApp_InMsgCB
`?<Name ZDO_ProcessActiveEPR 16>` SYMBOL "ZDO_ProcessActiveEPReq"
`??ZDO_ProcessActiveEPReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessActiveEPR 16>`
`?<Name ZDO_ProcessDeviceAnn 18>` SYMBOL "ZDO_ProcessDeviceAnnce"
`??ZDO_ProcessDeviceAnnce::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessDeviceAnn 18>`
`?<Name ZDO_ProcessEndDevice 20>` SYMBOL "ZDO_ProcessEndDeviceTimeoutReq"
`??ZDO_ProcessEndDeviceTimeoutReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessEndDevice 20>`
`?<Name ZDO_ProcessMatchDesc 22>` SYMBOL "ZDO_ProcessMatchDescReq"
`??ZDO_ProcessMatchDescReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessMatchDesc 22>`
`?<Name ZDO_ProcessNodeDescR 24>` SYMBOL "ZDO_ProcessNodeDescReq"
`??ZDO_ProcessNodeDescReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessNodeDescR 24>`
`?<Name ZDO_ProcessPowerDesc 26>` SYMBOL "ZDO_ProcessPowerDescReq"
`??ZDO_ProcessPowerDescReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessPowerDesc 26>`
`?<Name ZDO_ProcessServerDis 28>` SYMBOL "ZDO_ProcessServerDiscReq"
`??ZDO_ProcessServerDiscReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessServerDis 28>`
`?<Name ZDO_ProcessSimpleDes 30>` SYMBOL "ZDO_ProcessSimpleDescReq"
`??ZDO_ProcessSimpleDescReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessSimpleDes 30>`
`?<Name ZDO_ProcessUserDescR 32>` SYMBOL "ZDO_ProcessUserDescReq"
`??ZDO_ProcessUserDescReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessUserDescR 32>`
`?<Name ZDO_ProcessUserDescS 34>` SYMBOL "ZDO_ProcessUserDescSet"
`??ZDO_ProcessUserDescSet::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessUserDescS 34>`
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_RemoveRegisteredCB SYMBOL "ZDO_RemoveRegisteredCB"
`??ZDO_RemoveRegisteredCB::?relay` SYMBOL "?relay", ZDO_RemoveRegisteredCB
ZDO_SendMsgCBs      SYMBOL "ZDO_SendMsgCBs"
`??ZDO_SendMsgCBs::?relay` SYMBOL "?relay", ZDO_SendMsgCBs
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
`??ZDP_BindUnbindReq::?relay` SYMBOL "?relay", ZDP_BindUnbindReq
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
`??ZDP_DeviceAnnce::?relay` SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_EPRsp           SYMBOL "ZDP_EPRsp"
`??ZDP_EPRsp::?relay` SYMBOL "?relay", ZDP_EPRsp
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
`??ZDP_EndDeviceBindReq::?relay` SYMBOL "?relay", ZDP_EndDeviceBindReq
ZDP_EndDeviceTimeoutReq SYMBOL "ZDP_EndDeviceTimeoutReq"
`??ZDP_EndDeviceTimeoutReq::?relay` SYMBOL "?relay", ZDP_EndDeviceTimeoutReq
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
`??ZDP_GenericRsp::?relay` SYMBOL "?relay", ZDP_GenericRsp
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
`??ZDP_IEEEAddrReq::?relay` SYMBOL "?relay", ZDP_IEEEAddrReq
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
`??ZDP_IncomingData::?relay` SYMBOL "?relay", ZDP_IncomingData
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
`??ZDP_MatchDescReq::?relay` SYMBOL "?relay", ZDP_MatchDescReq
ZDP_MgmtBindRsp     SYMBOL "ZDP_MgmtBindRsp"
`??ZDP_MgmtBindRsp::?relay` SYMBOL "?relay", ZDP_MgmtBindRsp
ZDP_MgmtDirectJoinReq SYMBOL "ZDP_MgmtDirectJoinReq"
`??ZDP_MgmtDirectJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtDirectJoinReq
ZDP_MgmtLeaveReq    SYMBOL "ZDP_MgmtLeaveReq"
`??ZDP_MgmtLeaveReq::?relay` SYMBOL "?relay", ZDP_MgmtLeaveReq
ZDP_MgmtLqiRsp      SYMBOL "ZDP_MgmtLqiRsp"
`??ZDP_MgmtLqiRsp::?relay` SYMBOL "?relay", ZDP_MgmtLqiRsp
ZDP_MgmtNwkDiscReq  SYMBOL "ZDP_MgmtNwkDiscReq"
`??ZDP_MgmtNwkDiscReq::?relay` SYMBOL "?relay", ZDP_MgmtNwkDiscReq
ZDP_MgmtNwkDiscRsp  SYMBOL "ZDP_MgmtNwkDiscRsp"
`??ZDP_MgmtNwkDiscRsp::?relay` SYMBOL "?relay", ZDP_MgmtNwkDiscRsp
ZDP_MgmtNwkUpdateNotify SYMBOL "ZDP_MgmtNwkUpdateNotify"
`??ZDP_MgmtNwkUpdateNotify::?relay` SYMBOL "?relay", ZDP_MgmtNwkUpdateNotify
ZDP_MgmtNwkUpdateReq SYMBOL "ZDP_MgmtNwkUpdateReq"
`??ZDP_MgmtNwkUpdateReq::?relay` SYMBOL "?relay", ZDP_MgmtNwkUpdateReq
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDP_MgmtRtgRsp      SYMBOL "ZDP_MgmtRtgRsp"
`??ZDP_MgmtRtgRsp::?relay` SYMBOL "?relay", ZDP_MgmtRtgRsp
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
`??ZDP_NWKAddrOfInterestReq::?relay` SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_NodeDescMsg     SYMBOL "ZDP_NodeDescMsg"
`??ZDP_NodeDescMsg::?relay` SYMBOL "?relay", ZDP_NodeDescMsg
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
`??ZDP_NwkAddrReq::?relay` SYMBOL "?relay", ZDP_NwkAddrReq
ZDP_PowerDescMsg    SYMBOL "ZDP_PowerDescMsg"
`??ZDP_PowerDescMsg::?relay` SYMBOL "?relay", ZDP_PowerDescMsg
ZDP_SendData        SYMBOL "ZDP_SendData"
`??ZDP_SendData::?relay` SYMBOL "?relay", ZDP_SendData
ZDP_ServerDiscReq   SYMBOL "ZDP_ServerDiscReq"
`??ZDP_ServerDiscReq::?relay` SYMBOL "?relay", ZDP_ServerDiscReq
ZDP_ServerDiscRsp   SYMBOL "ZDP_ServerDiscRsp"
`??ZDP_ServerDiscRsp::?relay` SYMBOL "?relay", ZDP_ServerDiscRsp
ZDP_SimpleDescMsg   SYMBOL "ZDP_SimpleDescMsg"
`??ZDP_SimpleDescMsg::?relay` SYMBOL "?relay", ZDP_SimpleDescMsg
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
`??ZDP_SimpleDescReq::?relay` SYMBOL "?relay", ZDP_SimpleDescReq
ZDP_UserDescRsp     SYMBOL "ZDP_UserDescRsp"
`??ZDP_UserDescRsp::?relay` SYMBOL "?relay", ZDP_UserDescRsp
ZDP_UserDescSet     SYMBOL "ZDP_UserDescSet"
`??ZDP_UserDescSet::?relay` SYMBOL "?relay", ZDP_UserDescSet
zdpProcessAddrReq   SYMBOL "zdpProcessAddrReq"
`??zdpProcessAddrReq::?relay` SYMBOL "?relay", zdpProcessAddrReq

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??AddrMgrEntryGet::?relay`
        FUNCTION `??AddrMgrEntryGet::?relay`,00H
        EXTERN `??AssocGetWithExt::?relay`
        FUNCTION `??AssocGetWithExt::?relay`,00H
        EXTERN `??AssocGetWithShort::?relay`
        FUNCTION `??AssocGetWithShort::?relay`,00H
        EXTERN `??AssocMakeList::?relay`
        FUNCTION `??AssocMakeList::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??ZDApp_InMsgCB::?relay`
        FUNCTION `??ZDApp_InMsgCB::?relay`,00H
        EXTERN `??ZDO_ProcessActiveEPReq::?relay`
        FUNCTION `??ZDO_ProcessActiveEPReq::?relay`,00H
        EXTERN `??ZDO_ProcessDeviceAnnce::?relay`
        FUNCTION `??ZDO_ProcessDeviceAnnce::?relay`,00H
        EXTERN `??ZDO_ProcessEndDeviceTimeoutReq::?relay`
        FUNCTION `??ZDO_ProcessEndDeviceTimeoutReq::?relay`,00H
        EXTERN `??ZDO_ProcessMatchDescReq::?relay`
        FUNCTION `??ZDO_ProcessMatchDescReq::?relay`,00H
        EXTERN `??ZDO_ProcessNodeDescReq::?relay`
        FUNCTION `??ZDO_ProcessNodeDescReq::?relay`,00H
        EXTERN `??ZDO_ProcessPowerDescReq::?relay`
        FUNCTION `??ZDO_ProcessPowerDescReq::?relay`,00H
        EXTERN `??ZDO_ProcessServerDiscReq::?relay`
        FUNCTION `??ZDO_ProcessServerDiscReq::?relay`,00H
        EXTERN `??ZDO_ProcessSimpleDescReq::?relay`
        FUNCTION `??ZDO_ProcessSimpleDescReq::?relay`,00H
        EXTERN `??ZDO_ProcessUserDescReq::?relay`
        FUNCTION `??ZDO_ProcessUserDescReq::?relay`,00H
        EXTERN `??ZDO_ProcessUserDescSet::?relay`
        FUNCTION `??ZDO_ProcessUserDescSet::?relay`,00H
        EXTERN `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithExt
        FUNCTION AssocGetWithExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithShort
        FUNCTION AssocGetWithShort,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMakeList
        FUNCTION AssocMakeList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDAppNwkAddr
        EXTERN ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_epDesc
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN saveExtAddr

// C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDProfile.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDProfile.c
//    3   Revised:        $Date: 2013-10-02 15:57:50 -0700 (Wed, 02 Oct 2013) $
//    4   Revision:       $Revision: 35529 $
//    5 
//    6   Description:    This is the Zigbee Device Profile.
//    7 
//    8 
//    9   Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "AF.h"
//   46 #include "NLMEDE.h"
//   47 #include "nwk_util.h"
//   48 #include "APS.h"
//   49 
//   50 #include "AddrMgr.h"
//   51 #include "ZDConfig.h"
//   52 #include "ZDProfile.h"
//   53 #include "ZDObject.h"
//   54 #include "ZDNwkMgr.h"
//   55 
//   56 #if defined( LCD_SUPPORTED )
//   57   #include "OnBoard.h"
//   58 #endif
//   59 
//   60 #include "nwk_util.h"
//   61 
//   62 #if defined( MT_ZDO_FUNC )
//   63   #include "MT_ZDO.h"
//   64 #endif
//   65 
//   66 /*********************************************************************
//   67  * MACROS
//   68  */
//   69 
//   70 #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \ 
//   71   (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \ 
//   72   (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \ 
//   73   (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \ 
//   74 }
//   75 
//   76 #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \ 
//   77   afStatus_t stat;                                    \ 
//   78   ZDP_TmpBuf = (BUF)+1;                               \ 
//   79   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   80   osal_mem_free( (BUF) );                             \ 
//   81   ZDP_TmpBuf = ZDP_Buf+1;                             \ 
//   82   return stat;                                        \ 
//   83 }
//   84 
//   85 #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \ 
//   86   afStatus_t stat;                                    \ 
//   87   ZDP_TxOptions = (TxO);                              \ 
//   88   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   89   ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \ 
//   90   return stat;                                        \ 
//   91 }
//   92 
//   93 #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \ 
//   94   afStatus_t stat;                                    \ 
//   95   ZDP_TmpBuf = (BUF)+1;                               \ 
//   96   ZDP_TxOptions = (TxO);                              \ 
//   97   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   98   osal_mem_free( (BUF) );                             \ 
//   99   ZDP_TmpBuf = ZDP_Buf+1;                             \ 
//  100   ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \ 
//  101   return stat;                                        \ 
//  102 }
//  103 
//  104 /*********************************************************************
//  105  * CONSTANTS
//  106  */
//  107 
//  108 #define ZDP_BUF_SZ          80
//  109 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  110 CONST byte ZDP_AF_ENDPOINT = 0;
ZDP_AF_ENDPOINT:
        DB 0
//  111 
//  112 // Routing table options
//  113 #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
//  114 #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
//  115 #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
//  116 
//  117 
//  118 /*********************************************************************
//  119  * TYPEDEFS
//  120  */
//  121 typedef struct
//  122 {
//  123   void *next;
//  124   uint8 taskID;
//  125   uint16 clusterID;
//  126 } ZDO_MsgCB_t;
//  127 
//  128 
//  129 /*********************************************************************
//  130  * GLOBAL VARIABLES
//  131  */
//  132 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 byte ZDP_TransID = 0;
ZDP_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  134 
//  135 /*********************************************************************
//  136  * EXTERNAL VARIABLES
//  137  */
//  138 
//  139 extern endPointDesc_t ZDApp_epDesc;
//  140 
//  141 /*********************************************************************
//  142  * EXTERNAL FUNCTIONS
//  143  */
//  144 
//  145 /*********************************************************************
//  146  * LOCAL FUNCTIONS
//  147  */
//  148 
//  149 static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
//  150 uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
//  151 void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
//  152 
//  153 /*********************************************************************
//  154  * LOCAL VARIABLES
//  155  */
//  156 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  157 static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
ZDP_Buf:
        DS 80
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  158 static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
ZDP_TmpBuf:
        DATA16
        DS 2
        REQUIRE `?<Initializer for ZDP_TmpBuf>`
        REQUIRE __INIT_XDATA_I
//  159 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  160 byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
ZDP_TxOptions:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  161 ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
zdoMsgCBs:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  162 
//  163 /*********************************************************************
//  164  * ZDO Message Processing table
//  165  */
//  166 
//  167 typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
//  168 
//  169 typedef struct
//  170 {
//  171   uint16                clusterID;
//  172   pfnZDPMsgProcessor    pFn;
//  173 } zdpMsgProcItem_t;
//  174 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  175 CONST zdpMsgProcItem_t zdpMsgProcs[] =
zdpMsgProcs:
        DATA16
        DW 0
        DW `??zdpProcessAddrReq::?relay`
        DW 19
        DW `??ZDO_ProcessDeviceAnnce::?relay`
        DW 1
        DW `??zdpProcessAddrReq::?relay`
        DW 2
        DW `??ZDO_ProcessNodeDescReq::?relay`
        DW 3
        DW `??ZDO_ProcessPowerDescReq::?relay`
        DW 4
        DW `??ZDO_ProcessSimpleDescReq::?relay`
        DW 5
        DW `??ZDO_ProcessActiveEPReq::?relay`
        DW 6
        DW `??ZDO_ProcessMatchDescReq::?relay`
        DW 17
        DW `??ZDO_ProcessUserDescReq::?relay`
        DW 20
        DW `??ZDO_ProcessUserDescSet::?relay`
        DW 21
        DW `??ZDO_ProcessServerDiscReq::?relay`
        DW 31
        DW `??ZDO_ProcessEndDeviceTimeoutReq::?relay`
        DW 65535
        DW 0H
//  176 {
//  177 #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
//  178   // These aren't processed by sleeping end devices.
//  179   { NWK_addr_req,           zdpProcessAddrReq },
//  180   { Device_annce,           ZDO_ProcessDeviceAnnce },  //chaokw
//  181 #endif
//  182   { IEEE_addr_req,          zdpProcessAddrReq },
//  183   { Node_Desc_req,          ZDO_ProcessNodeDescReq },
//  184   { Power_Desc_req,         ZDO_ProcessPowerDescReq },
//  185   { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
//  186   { Active_EP_req,          ZDO_ProcessActiveEPReq },
//  187   { Match_Desc_req,         ZDO_ProcessMatchDescReq },
//  188 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
//  189   { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
//  190 #endif
//  191 #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
//  192   { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
//  193 #endif
//  194 #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
//  195   { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
//  196 #endif
//  197 #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
//  198   { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
//  199 #endif
//  200 #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
//  201   { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
//  202 #endif
//  203 #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
//  204   { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
//  205 #endif
//  206 #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
//  207   { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
//  208 #endif
//  209 #if defined ( ZDO_USERDESC_RESPONSE )
//  210   { User_Desc_req,          ZDO_ProcessUserDescReq },
//  211 #endif
//  212 #if defined ( ZDO_USERDESCSET_RESPONSE )
//  213   { User_Desc_set,          ZDO_ProcessUserDescSet },
//  214 #endif
//  215 #if defined ( ZDO_SERVERDISC_RESPONSE )
//  216   { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
//  217 #endif
//  218 #if defined ( ZIGBEE_CHILD_AGING )
//  219 #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
//  220   { End_Device_Timeout_req, ZDO_ProcessEndDeviceTimeoutReq },
//  221 #endif
//  222 #endif // ZIGBEE_CHILD_AGING
//  223   {0xFFFF, NULL} // Last
//  224 };
//  225 
//  226 /*********************************************************************
//  227  * @fn          fillAndSend
//  228  *
//  229  * @brief       Combined to reduce space
//  230  *
//  231  * @param
//  232  * @param
//  233  *
//  234  * @return      afStatus_t
//  235  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  236 static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
fillAndSend:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function fillAndSend
        CODE
//  237 {
        FUNCALL fillAndSend, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL fillAndSend, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V0,R1
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
//  238   afAddrType_t afAddr;
//  239 
//  240   osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  241   ZADDR_TO_AFADDR( addr, afAddr );
        MOV     DPTR,#ZDP_AF_ENDPOINT
        CLR     A
        MOVC    A,@A+DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  242 
//  243   *(ZDP_TmpBuf-1) = *transSeq;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#-0x1
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#-0x1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  244 
//  245   return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
//  246                            (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
//  247                            transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V1,#0x1e
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOV     ?V6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOV     ?V7,A
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        ADD     A,#0x1
        MOV     ?V6,A
        CLR     A
        ADDC    A,R1
        MOV     ?V7,A
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     DPTR,#ZDP_TxOptions
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,#ZDApp_epDesc & 0xff
        MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
//  248 
//  249 }
          CFI EndBlock cfiBlock0
//  250 
//  251 /*********************************************************************
//  252  * @fn          ZDP_SendData
//  253  *
//  254  * @brief       This builds and send a request message that has
//  255  *              NWKAddrOfInterest as its only parameter.
//  256  *
//  257  * @param       dstAddr - destination address
//  258  * @param       cmd - clusterID
//  259  * @param       dataLen - number of bytes of data
//  260  * @param       data - pointer to the data
//  261  * @param       SecurityEnable - Security Options
//  262  *
//  263  * @return      afStatus_t
//  264  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  265 afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
ZDP_SendData:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDP_SendData
        CODE
//  266                         byte len, uint8 *buf, byte SecurityEnable )
//  267 {
        FUNCALL ZDP_SendData, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V12,R2
        MOV     ?V13,R3
        MOV     ?V10,R4
        MOV     ?V11,R5
        MOV     ?V3,R1
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V6,A
//  268   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  269   byte cnt = len;
        MOV     ?V2,?V3
//  270 
//  271   while ( cnt-- )
??ZDP_SendData_0:
        MOV     ?V4,?V2
        MOV     A,#-0x1
        ADD     A,?V4
        MOV     ?V2,A
        MOV     A,?V4
        JZ      ??ZDP_SendData_1
//  272   {
//  273     *pBuf++ = *buf++;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     ?V0,DPL
        MOV     ?V1,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        SJMP    ??ZDP_SendData_0
//  274   }
//  275 
//  276   FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
??ZDP_SendData_1:
        MOV     A,?V6
        JZ      ??ZDP_SendData_2
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x40
        MOVX    @DPTR,A
        SJMP    ??ZDP_SendData_3
??ZDP_SendData_2:
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x0
        MOVX    @DPTR,A
??ZDP_SendData_3:
        ; Setup parameters for call to function fillAndSend
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R1,?V3
        MOV     R4,?V10
        MOV     R5,?V11
        MOV     R2,?V12
        MOV     R3,?V13
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     ?V5,A
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     R1,?V5
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
//  277 }
          CFI EndBlock cfiBlock1
//  278 
//  279 /*********************************************************************
//  280  * @fn          ZDP_NWKAddrOfInterestReq
//  281  *
//  282  * @brief       This builds and send a request message that has
//  283  *              NWKAddrOfInterest as its only parameter.
//  284  *
//  285  * @param       dstAddr - destination address
//  286  * @param       nwkAddr - 16 bit address
//  287  * @param       SecurityEnable - Security Options
//  288  *
//  289  * @return      afStatus_t
//  290  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  291 afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_NWKAddrOfInterestReq:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ZDP_NWKAddrOfInterestReq
        CODE
//  292                                      byte cmd, byte SecurityEnable )
//  293 {
        FUNCALL ZDP_NWKAddrOfInterestReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V2,R1
//  294   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  295 
//  296   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  297   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  298 
//  299   return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V4,?V2
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0x2
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  300 }
          CFI EndBlock cfiBlock2
//  301 
//  302 /*********************************************************************
//  303  * Address Requests
//  304  */
//  305 
//  306 /*********************************************************************
//  307  * @fn          ZDP_NwkAddrReq
//  308  *
//  309  * @brief       This builds and send a NWK_addr_req message.  This
//  310  *              function sends a broadcast message looking for a 16
//  311  *              bit address with a 64 bit address as bait.
//  312  *
//  313  * @param       IEEEAddress - looking for this device
//  314  * @param       SecurityEnable - Security Options
//  315  *
//  316  * @return      afStatus_t
//  317  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  318 afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
ZDP_NwkAddrReq:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ZDP_NwkAddrReq
        CODE
//  319                            byte StartIndex, byte SecurityEnable )
//  320 {
        FUNCALL ZDP_NwkAddrReq, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_NwkAddrReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_NwkAddrReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V1,R1
        MOV     ?V2,R4
        MOV     ?V3,R5
//  321   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  322   byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
        MOV     ?V0,#0xa
//  323   zAddrType_t dstAddr;
//  324 
//  325   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  326 
//  327   if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R4,?V4
        MOV     R5,?V5
        MOV     R2,#saveExtAddr & 0xff
        MOV     R3,#(saveExtAddr >> 8) & 0xff
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JNZ     ??ZDP_NwkAddrReq_0
//  328   {
//  329     dstAddr.addrMode = AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  330     dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
        SJMP    ??ZDP_NwkAddrReq_1
//  331   }
//  332   else
//  333   {
//  334     dstAddr.addrMode = Addr16Bit;
??ZDP_NwkAddrReq_0:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  335     dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  336   }
//  337 
//  338   pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
??ZDP_NwkAddrReq_1:
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V4
        MOV     R5,?V5
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R6,?V6
        MOV     R7,?V7
//  339 
//  340   *pBuf++ = ReqType;
        MOV     A,?V1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  341   *pBuf++ = StartIndex;
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  342 
//  343   return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
        ; Setup parameters for call to function fillAndSend
        CLR     A
        MOV     ?V6,A
        MOV     ?V7,A
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R1,?V0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
//  344 }
          CFI EndBlock cfiBlock3
//  345 
//  346 /*********************************************************************
//  347  * @fn          ZDP_IEEEAddrReq
//  348  *
//  349  * @brief       This builds and send a IEEE_addr_req message.  This
//  350  *              function sends a unicast message looking for a 64
//  351  *              bit IEEE address with a 16 bit address as bait.
//  352  *
//  353  * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
//  354  *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
//  355  * @param       SecurityEnable - Security Options
//  356  *
//  357  * @return      afStatus_t
//  358  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  359 afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
ZDP_IEEEAddrReq:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ZDP_IEEEAddrReq
        CODE
//  360                             byte StartIndex, byte SecurityEnable )
//  361 {
        FUNCALL ZDP_IEEEAddrReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R1
        MOV     ?V3,R4
        MOV     ?V4,R5
//  362   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  363   byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
        MOV     ?V5,#0x4
//  364   zAddrType_t dstAddr;
//  365 
//  366   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  367 
//  368   dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  369   dstAddr.addr.shortAddr = shortAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//  370 
//  371   *pBuf++ = LO_UINT16( shortAddr );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  372   *pBuf++ = HI_UINT16( shortAddr );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  373 
//  374   *pBuf++ = ReqType;
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  375   *pBuf++ = StartIndex;
        MOV     A,?V3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  376 
//  377   return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V6,#0x1
        MOV     ?V7,#0x0
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R1,?V5
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
//  378 }
          CFI EndBlock cfiBlock4
//  379 
//  380 /*********************************************************************
//  381  * @fn          ZDP_MatchDescReq
//  382  *
//  383  * @brief       This builds and send a Match_Desc_req message.  This
//  384  *              function sends a broadcast or unicast message
//  385  *              requesting the list of endpoint/interfaces that
//  386  *              match profile ID and cluster IDs.
//  387  *
//  388  * @param       dstAddr - destination address
//  389  * @param       nwkAddr - network address of interest
//  390  * @param       ProfileID - Profile ID
//  391  * @param       NumInClusters - number of input clusters
//  392  * @param       InClusterList - input cluster ID list
//  393  * @param       NumOutClusters - number of output clusters
//  394  * @param       OutClusterList - output cluster ID list
//  395  * @param       SecurityEnable - Security Options
//  396  *
//  397  * @return      afStatus_t
//  398  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  399 afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_MatchDescReq:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ZDP_MatchDescReq
        CODE
//  400                                 uint16 ProfileID,
//  401                                 byte NumInClusters, cId_t *InClusterList,
//  402                                 byte NumOutClusters, cId_t *OutClusterList,
//  403                                 byte SecurityEnable )
//  404 {
        FUNCALL ZDP_MatchDescReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V8,R1
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V14,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V15,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V13,A
//  405   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  406   // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
//  407   byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
        MOV     ?V9,#0x6
//  408 
//  409   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  410 
//  411   len += (NumInClusters + NumOutClusters) * sizeof(uint16);
        MOV     B,#0x2
        MOV     R2,?V8
        MOV     R3,#0x0
        MOV     R0,?V5
        MOV     R1,#0x0
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MUL     AB
        ADD     A,?V9
        MOV     ?V9,A
//  412 
//  413   if ( len >= ZDP_BUF_SZ-1 )
        MOV     A,?V9
        CLR     C
        SUBB    A,#0x4f
        JC      ??ZDP_MatchDescReq_0
//  414   {
//  415     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
//  416   }
//  417 
//  418   // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
//  419   // this command to 0xFFFF.  So, here we will filter this and replace
//  420   // with 0xFFFD to only send to devices with RX ON.  This includes the
//  421   // network address of interest.
//  422   if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
//  423       && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
??ZDP_MatchDescReq_0:
        MOV     DPL,?V6
        MOV     DPH,?V7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xf
        JZ      ??ZDP_MatchDescReq_2
        MOV     DPL,?V6
        MOV     DPH,?V7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDP_MatchDescReq_3
??ZDP_MatchDescReq_2:
        MOV     DPL,?V6
        MOV     DPH,?V7
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??ZDP_MatchDescReq_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDP_MatchDescReq_4:
        JNZ     ??ZDP_MatchDescReq_3
//  424   {
//  425     dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
        MOV     DPL,?V6
        MOV     DPH,?V7
        MOV     A,#-0x3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  426   }
//  427   if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
??ZDP_MatchDescReq_3:
        MOV     A,#-0x1
        XRL     A,?V0
        JNZ     ??ZDP_MatchDescReq_5
        MOV     A,#-0x1
        XRL     A,?V1
??ZDP_MatchDescReq_5:
        JNZ     ??ZDP_MatchDescReq_6
//  428   {
//  429     nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
        MOV     ?V0,#-0x3
        MOV     ?V1,#-0x1
//  430   }
//  431 
//  432   *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
??ZDP_MatchDescReq_6:
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  433   *pBuf++ = HI_UINT16( nwkAddr );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  434 
//  435   *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  436   *pBuf++ = HI_UINT16( ProfileID );
        MOV     R0,?V2
        MOV     R1,?V3
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  437 
//  438   *pBuf++ = NumInClusters; // Input cluster list
        MOV     A,?V8
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  439   if ( NumInClusters )
        MOV     A,?V8
        JNZ     $+5
        LJMP    ??ZDP_MatchDescReq_7 & 0xFFFF
//  440   {
//  441     for (i=0; i<NumInClusters; ++i)  {
        MOV     ?V4,#0x0
??ZDP_MatchDescReq_8:
        MOV     A,?V4
        CLR     C
        SUBB    A,?V8
        JNC     ??ZDP_MatchDescReq_7
//  442       *pBuf++ = LO_UINT16( InClusterList[i] );
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V14
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V15
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  443       *pBuf++ = HI_UINT16( InClusterList[i] );
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V14
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V15
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  444     }
        INC     ?V4
        LJMP    ??ZDP_MatchDescReq_8 & 0xFFFF
//  445   }
//  446 
//  447   *pBuf++ = NumOutClusters; // Output cluster list
??ZDP_MatchDescReq_7:
        MOV     A,?V5
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  448   if ( NumOutClusters )
        MOV     A,?V5
        JNZ     $+5
        LJMP    ??ZDP_MatchDescReq_9 & 0xFFFF
//  449   {
//  450     for (i=0; i<NumOutClusters; ++i)  {
        MOV     ?V4,#0x0
??ZDP_MatchDescReq_10:
        MOV     A,?V4
        CLR     C
        SUBB    A,?V5
        JNC     ??ZDP_MatchDescReq_9
//  451       *pBuf++ = LO_UINT16( OutClusterList[i] );
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V12
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V13
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  452       *pBuf++ = HI_UINT16( OutClusterList[i] );
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V12
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V13
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  453     }
        INC     ?V4
        LJMP    ??ZDP_MatchDescReq_10 & 0xFFFF
//  454   }
//  455 
//  456   return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
??ZDP_MatchDescReq_9:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V10,#0x6
        MOV     ?V11,#0x0
        MOV     R0,#?V10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R1,?V9
        MOV     R4,?V6
        MOV     R5,?V7
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
??ZDP_MatchDescReq_1:
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
//  457 }
          CFI EndBlock cfiBlock5
//  458 
//  459 /*********************************************************************
//  460  * @fn          ZDP_SimpleDescReq
//  461  *
//  462  * @brief       This builds and send a NWK_Simple_Desc_req
//  463  *              message.  This function sends unicast message to the
//  464  *              destination device.
//  465  *
//  466  * @param       dstAddr - destination address
//  467  * @param       nwkAddr - 16 bit address
//  468  * @param       epIntf - endpoint/interface
//  469  * @param       SecurityEnable - Security Options
//  470  *
//  471  * @return      afStatus_t
//  472  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  473 afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_SimpleDescReq:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ZDP_SimpleDescReq
        CODE
//  474                                     byte endPoint, byte SecurityEnable )
//  475 
//  476 {
        FUNCALL ZDP_SimpleDescReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V2,R1
//  477   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  478 
//  479   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  480   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  481   ZDP_TmpBuf[2] = endPoint;
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  482 
//  483   return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V4,#0x4
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0x3
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  484 }
          CFI EndBlock cfiBlock6
//  485 
//  486 /*********************************************************************
//  487  * @fn          ZDP_UserDescSet
//  488  *
//  489  * @brief       This builds and send a User_Desc_set message to set
//  490  *              the user descriptor.  This function sends unicast
//  491  *              message to the destination device.
//  492  *
//  493  * @param       dstAddr - destination address
//  494  * @param       nwkAddr - 16 bit address
//  495  * @param       UserDescriptor - user descriptor
//  496  * @param       SecurityEnable - Security Options
//  497  *
//  498  * @return      afStatus_t
//  499  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  500 afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_UserDescSet:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function ZDP_UserDescSet
        CODE
//  501                           UserDescriptorFormat_t *UserDescriptor,
//  502                           byte SecurityEnable )
//  503 {
        FUNCALL ZDP_UserDescSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_UserDescSet, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_UserDescSet, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V7,R1
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
//  504   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  505   byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
//  506               UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x10
        JNC     ??ZDP_UserDescSet_0
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    A,@DPTR
        MOV     ?V2,A
        SJMP    ??ZDP_UserDescSet_1
??ZDP_UserDescSet_0:
        MOV     ?V2,#0x10
//  507   byte addrLen = 2;
??ZDP_UserDescSet_1:
        MOV     ?V3,#0x2
//  508 
//  509   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  510 
//  511   *pBuf++ = LO_UINT16( nwkAddr );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  512   *pBuf++ = HI_UINT16( nwkAddr );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  513 
//  514   *pBuf++ = len;
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  515   addrLen = 3;
        MOV     ?V3,#0x3
//  516 
//  517   pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V8
        MOV     DPH,?V9
        INC     DPTR
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,R3
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
//  518   osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
        ; Setup parameters for call to function osal_memset
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,#0x10
        CLR     C
        SUBB    A,R0
        MOV     R4,A
        MOV     A,#0x0
        SUBB    A,R1
        MOV     R5,A
        MOV     R1,#0x20
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  519 
//  520   return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V4,#0x14
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x10
        ADD     A,?V3
        MOV     R1,A
        MOV     R4,?V10
        MOV     R5,?V11
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
//  521 }
          CFI EndBlock cfiBlock7
//  522 
//  523 /*********************************************************************
//  524  * @fn          ZDP_ServerDiscReq
//  525  *
//  526  * @brief       Build and send a Server_Discovery_req request message.
//  527  *
//  528  * @param       serverMask - 16-bit bit-mask of server services being sought.
//  529  * @param       SecurityEnable - Security Options
//  530  *
//  531  * @return      afStatus_t
//  532  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  533 afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
ZDP_ServerDiscReq:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function ZDP_ServerDiscReq
        CODE
//  534 {
        FUNCALL ZDP_ServerDiscReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R1
//  535   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  536   zAddrType_t dstAddr;
//  537 
//  538   dstAddr.addrMode = AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  539   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  540 
//  541   *pBuf++ = LO_UINT16( serverMask );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  542   *pBuf = HI_UINT16( serverMask );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  543 
//  544   FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
//  545              ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
        MOV     A,?V2
        JZ      ??ZDP_ServerDiscReq_0
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x40
        MOVX    @DPTR,A
        SJMP    ??ZDP_ServerDiscReq_1
??ZDP_ServerDiscReq_0:
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x0
        MOVX    @DPTR,A
??ZDP_ServerDiscReq_1:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V4,#0x15
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R1,#0x2
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R1
        MOV     ?V3,A
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     R1,?V3
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  546 }
          CFI EndBlock cfiBlock8
//  547 
//  548 /*********************************************************************
//  549  * @fn          ZDP_DeviceAnnce
//  550  *
//  551  * @brief       This builds and send a Device_Annce message.  This
//  552  *              function sends a broadcast message.
//  553  *
//  554  * @param       nwkAddr - 16 bit address of the device
//  555  * @param       IEEEAddr - 64 bit address of the device
//  556  * @param       capabilities - device capabilities.  This field is only
//  557  *                 sent for v1.1 networks.
//  558  * @param       SecurityEnable - Security Options
//  559  *
//  560  * @return      afStatus_t
//  561  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  562 afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
ZDP_DeviceAnnce:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function ZDP_DeviceAnnce
        CODE
//  563                               byte capabilities, byte SecurityEnable )
//  564 {
        FUNCALL ZDP_DeviceAnnce, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_DeviceAnnce, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     ?V1,R1
//  565   zAddrType_t dstAddr;
//  566   uint8 len;
//  567 
//  568   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  569 
//  570   dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  571   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  572 
//  573   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
        MOV     A,R6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  574   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  575   osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V2
        MOV     R5,?V3
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
//  576   len = 2 + Z_EXTADDR_LEN;
        MOV     ?V0,#0xa
//  577 
//  578   ZDP_TmpBuf[10] = capabilities;
        MOV     A,?V1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0xa
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  579   len++;
        INC     ?V0
//  580 
//  581   return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V4,#0x13
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R1,?V0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  582 }
          CFI EndBlock cfiBlock9
//  583 
//  584 #if defined ( ZIGBEE_CHILD_AGING )
//  585 /*********************************************************************
//  586  * @fn          ZDP_EndDeviceTimeoutReq
//  587  *
//  588  * @brief       This builds and send an End_Device_Timeout_req message.
//  589  *
//  590  * @param       parentAddr - destination address
//  591  * @param       reqTimeout - Timeout value the device is requesting
//  592  * @param       SecurityEnable - Security Options
//  593  *
//  594  * @return      afStatus_t
//  595  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  596 afStatus_t ZDP_EndDeviceTimeoutReq( uint16 parentAddr, uint16 reqTimeout,
ZDP_EndDeviceTimeoutReq:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ZDP_EndDeviceTimeoutReq
        CODE
//  597                                     uint8 SecurityEnable )
//  598 {
        FUNCALL ZDP_EndDeviceTimeoutReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EndDeviceTimeoutReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V3,R1
//  599   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  600   uint8 len = Z_EXTADDR_LEN + 2;  // Device_IEEEAddress + reqTimeout.
        MOV     ?V2,#0xa
//  601   zAddrType_t dstAddr;
//  602 
//  603   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  604 
//  605   dstAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  606   dstAddr.addr.shortAddr = parentAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V5
        MOVX    @DPTR,A
//  607 
//  608   pBuf = osal_cpyExtAddr( pBuf, saveExtAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#saveExtAddr & 0xff
        MOV     R5,#(saveExtAddr >> 8) & 0xff
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V0,?V6
        MOV     ?V1,?V7
//  609 
//  610   *pBuf++ = LO_UINT16( reqTimeout );
        MOV     A,R6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     ?V0,DPL
        MOV     ?V1,DPH
//  611   *pBuf++ = HI_UINT16( reqTimeout );
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     ?V0,DPL
        MOV     ?V1,DPH
//  612 
//  613   return fillAndSend( &ZDP_TransID, &dstAddr, End_Device_Timeout_req, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V6,#0x1f
        MOV     ?V7,#0x0
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R1,?V2
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
//  614 }
          CFI EndBlock cfiBlock10
//  615 #endif // ZIGBEE_CHILD_AGING
//  616 
//  617 /*********************************************************************
//  618  * Address Responses
//  619  */
//  620 
//  621 /*********************************************************************
//  622  * @fn      zdpProcessAddrReq
//  623  *
//  624  * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
//  625  *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
//  626  *
//  627  * @param   inMsg - incoming message
//  628  *
//  629  * @return  none
//  630  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  631 void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
zdpProcessAddrReq:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zdpProcessAddrReq
        CODE
//  632 {
        FUNCALL zdpProcessAddrReq, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdpProcessAddrReq, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdpProcessAddrReq, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdpProcessAddrReq, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdpProcessAddrReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdpProcessAddrReq, AssocMakeList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdpProcessAddrReq, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdpProcessAddrReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V4,R2
        MOV     ?V5,R3
//  633   associated_devices_t *pAssoc;
//  634   uint8 reqType;
//  635   uint16 aoi = INVALID_NODE_ADDR;
        MOV     ?V0,#-0x2
        MOV     ?V1,#-0x1
//  636   uint8 *ieee = NULL;
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
//  637 
//  638   reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
        MOV     A,?V4
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??zdpProcessAddrReq_0
        MOV     R0,#0x8
        MOV     R1,#0x0
        SJMP    ??zdpProcessAddrReq_1
??zdpProcessAddrReq_0:
        MOV     R0,#0x2
        MOV     R1,#0x0
??zdpProcessAddrReq_1:
        MOV     A,?V4
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V6,A
//  639 
//  640   if ( inMsg->clusterID == NWK_addr_req )
        MOV     A,?V4
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??zdpProcessAddrReq_2
//  641 
//  642   {
//  643     ieee = inMsg->asdu;
        MOV     A,?V4
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     ?V2,R0
        MOV     ?V3,R1
//  644 
//  645     if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R4,?V2
        MOV     R5,?V3
        MOV     R2,#saveExtAddr & 0xff
        MOV     R3,#(saveExtAddr >> 8) & 0xff
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JZ      ??zdpProcessAddrReq_3
//  646     {
//  647       aoi = ZDAppNwkAddr.addr.shortAddr;
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
//  648     }
//  649     // Handle response for sleeping end devices
//  650     else if ( (ZSTACK_ROUTER_BUILD)
//  651       && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
//  652              && (pAssoc->nodeRelation == CHILD_RFD)) )
??zdpProcessAddrReq_3:
        ; Setup parameters for call to function AssocGetWithExt
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R0,?V8
        MOV     R1,?V9
        MOV     ?V12,R0
        MOV     ?V13,R1
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
        MOV     DPL,?V12
        MOV     DPH,?V13
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
//  653     {
//  654       aoi = pAssoc->shortAddr;
        MOV     DPL,?V12
        MOV     DPH,?V13
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  655       if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
        MOV     A,?V6
        JNZ     $+5
        LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
//  656         reqType = 0xFF; // Force Invalid
        MOV     ?V6,#-0x1
        LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
//  657     }
//  658   }
//  659   else  // if ( inMsg->clusterID == IEEE_addr_req )
//  660   {
//  661     aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
??zdpProcessAddrReq_2:
        MOV     A,?V4
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,?V4
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
//  662 
//  663     if ( aoi == ZDAppNwkAddr.addr.shortAddr )
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??zdpProcessAddrReq_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??zdpProcessAddrReq_5:
        JNZ     ??zdpProcessAddrReq_6
//  664     {
//  665       ieee = saveExtAddr;
        MOV     ?V2,#saveExtAddr & 0xff
        MOV     ?V3,#(saveExtAddr >> 8) & 0xff
        SJMP    ??zdpProcessAddrReq_4
//  666     }
//  667     else if ( (ZSTACK_ROUTER_BUILD)
//  668       && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
//  669              && (pAssoc->nodeRelation == CHILD_RFD)) )
??zdpProcessAddrReq_6:
        ; Setup parameters for call to function AssocGetWithShort
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R0,?V8
        MOV     R1,?V9
        MOV     ?V12,R0
        MOV     ?V13,R1
        MOV     A,R0
        ORL     A,R1
        JZ      ??zdpProcessAddrReq_4
        MOV     DPL,?V12
        MOV     DPH,?V13
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zdpProcessAddrReq_4
//  670     {
//  671       AddrMgrEntry_t addrEntry;
//  672       addrEntry.user = ADDRMGR_USER_DEFAULT;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  673       addrEntry.index = pAssoc->addrIdx;
        MOV     DPL,?V12
        MOV     DPH,?V13
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  674       if ( AddrMgrEntryGet( &addrEntry ) )
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
        MOV     A,R1
        JZ      ??zdpProcessAddrReq_7
//  675       {
//  676         ieee = addrEntry.extAddr;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V2,DPL
        MOV     ?V3,DPH
//  677       }
//  678 
//  679       if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
??zdpProcessAddrReq_7:
        MOV     A,?V6
        JZ      ??zdpProcessAddrReq_4
//  680         reqType = 0xFF; // Force Invalid
        MOV     ?V6,#-0x1
//  681     }
//  682   }
//  683 
//  684   if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
??zdpProcessAddrReq_4:
        MOV     A,#-0x2
        XRL     A,?V0
        JNZ     ??zdpProcessAddrReq_8
        MOV     A,#-0x1
        XRL     A,?V1
??zdpProcessAddrReq_8:
        JZ      ??zdpProcessAddrReq_9
        MOV     A,?V2
        ORL     A,?V3
        JNZ     ??zdpProcessAddrReq_10
??zdpProcessAddrReq_9:
        MOV     A,?V4
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??zdpProcessAddrReq_11 & 0xFFFF
//  685   {
//  686     uint8 stat;
//  687     uint8 *pBuf = ZDP_TmpBuf;
??zdpProcessAddrReq_10:
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  688     // Status + IEEE-Addr + Nwk-Addr.
//  689     uint8 len = 1 + Z_EXTADDR_LEN + 2;
        MOV     ?V7,#0xb
//  690 
//  691     // If aoi and iee are both setup, we found results
//  692     if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
        MOV     A,#-0x2
        XRL     A,?V0
        JNZ     ??zdpProcessAddrReq_12
        MOV     A,#-0x1
        XRL     A,?V1
??zdpProcessAddrReq_12:
        JZ      ??zdpProcessAddrReq_13
        MOV     A,?V2
        ORL     A,?V3
        JZ      ??zdpProcessAddrReq_13
//  693     {
//  694       stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
//  695                     ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
        MOV     A,?V6
        JZ      ??zdpProcessAddrReq_14
        MOV     A,#0x1
        XRL     A,?V6
        JNZ     ??zdpProcessAddrReq_15
??zdpProcessAddrReq_14:
        MOV     ?V8,#0x0
        SJMP    ??zdpProcessAddrReq_16
??zdpProcessAddrReq_15:
        MOV     ?V8,#-0x80
        SJMP    ??zdpProcessAddrReq_16
//  696     }
//  697     else
//  698     {
//  699       // not found and the req was unicast to this device
//  700       stat = ZDP_DEVICE_NOT_FOUND;
??zdpProcessAddrReq_13:
        MOV     ?V8,#-0x7f
//  701 
//  702       // Fill in the missing field with this device's address
//  703       if ( inMsg->clusterID == NWK_addr_req )
        MOV     A,?V4
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??zdpProcessAddrReq_17
//  704       {
//  705         aoi = ZDAppNwkAddr.addr.shortAddr;
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        SJMP    ??zdpProcessAddrReq_16
//  706       }
//  707       else
//  708       {
//  709         ieee = saveExtAddr;
??zdpProcessAddrReq_17:
        MOV     ?V2,#saveExtAddr & 0xff
        MOV     ?V3,#(saveExtAddr >> 8) & 0xff
//  710       }
//  711     }
//  712 
//  713     *pBuf++ = stat;
??zdpProcessAddrReq_16:
        MOV     A,?V8
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  714 
//  715     pBuf = osal_cpyExtAddr( pBuf, ieee );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V2
        MOV     R5,?V3
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     R6,?V10
        MOV     R7,?V11
//  716 
//  717     *pBuf++ = LO_UINT16( aoi );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  718     *pBuf++ = HI_UINT16( aoi );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  719 
//  720     if ( ZSTACK_ROUTER_BUILD )
//  721     {
//  722       if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
//  723            && (stat == ZDP_SUCCESS) )
        MOV     A,#0x1
        XRL     A,?V6
        JZ      $+5
        LJMP    ??zdpProcessAddrReq_18 & 0xFFFF
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??zdpProcessAddrReq_19
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??zdpProcessAddrReq_19:
        JZ      $+5
        LJMP    ??zdpProcessAddrReq_18 & 0xFFFF
        MOV     A,?V8
        JZ      $+5
        LJMP    ??zdpProcessAddrReq_18 & 0xFFFF
//  724       {
//  725         uint8  cnt = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
//  726         uint16 *list = AssocMakeList( &cnt );
        ; Setup parameters for call to function AssocMakeList
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AssocMakeList::?relay`; Banked call to: AssocMakeList
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     ?V14,?V10
        MOV     ?V15,?V11
//  727 
//  728         if ( list != NULL )
        MOV     A,?V14
        ORL     A,?V15
        JNZ     $+5
        LJMP    ??zdpProcessAddrReq_20 & 0xFFFF
//  729         {
//  730           byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
        MOV     A,?V4
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??zdpProcessAddrReq_21
        MOV     R0,#0x8
        MOV     R1,#0x0
        SJMP    ??zdpProcessAddrReq_22
??zdpProcessAddrReq_21:
        MOV     R0,#0x2
        MOV     R1,#0x0
??zdpProcessAddrReq_22:
        MOV     A,?V4
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
//  731           uint16 *pList = list + idx;
        MOV     R0,?V9
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V14
        ADD     A,R0
        MOV     ?V10,A
        MOV     A,?V15
        ADDC    A,R1
        MOV     ?V11,A
//  732 
//  733           // NumAssocDev field is only present on success.
//  734           if ( cnt > idx )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V9
        CLR     C
        SUBB    A,R0
        JNC     ??zdpProcessAddrReq_23
//  735           {
//  736             cnt -= idx;
        MOV     R0,?V9
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOVX    @DPTR,A
//  737             len += (cnt * sizeof( uint16 ));
        MOV     B,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MUL     AB
        ADD     A,?V7
        MOV     ?V7,A
        SJMP    ??zdpProcessAddrReq_24
//  738           }
//  739           else
//  740           {
//  741             cnt = 0;
??zdpProcessAddrReq_23:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
//  742           }
//  743           *pBuf++ = cnt;
??zdpProcessAddrReq_24:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  744           len++;
        INC     ?V7
//  745 
//  746           // StartIndex field is only present if NumAssocDev field is non-zero.
//  747           *pBuf++ = idx;
        MOV     A,?V9
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  748           len++;
        INC     ?V7
//  749 
//  750           while ( cnt != 0 )
??zdpProcessAddrReq_25:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??zdpProcessAddrReq_26
//  751           {
//  752             *pBuf++ = LO_UINT16( *pList );
        MOV     DPL,?V10
        MOV     DPH,?V11
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  753             *pBuf++ = HI_UINT16( *pList );
        MOV     DPL,?V10
        MOV     DPH,?V11
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  754             pList++;
        MOV     A,?V10
        ADD     A,#0x2
        MOV     ?V10,A
        JNC     ??zdpProcessAddrReq_27
        INC     ?V11
//  755             cnt--;
??zdpProcessAddrReq_27:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        SJMP    ??zdpProcessAddrReq_25
//  756           }
//  757 
//  758           osal_mem_free( (uint8 *)list );
??zdpProcessAddrReq_26:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V14
        MOV     R3,?V15
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zdpProcessAddrReq_18
//  759         }
//  760         else
//  761         {
//  762           // NumAssocDev field is only present on success.
//  763           *pBuf++ = 0;
??zdpProcessAddrReq_20:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  764           len++;
        INC     ?V7
//  765         }
//  766       }
//  767     }
//  768 
//  769     ZDP_TxOptions = AF_MSG_ACK_REQUEST;
??zdpProcessAddrReq_18:
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x10
        MOVX    @DPTR,A
//  770     fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
        ; Setup parameters for call to function fillAndSend
        MOV     A,?V4
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        ORL     A,#0x0
        MOV     ?V10,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x80
        MOV     ?V11,A
        MOV     R0,#?V10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     R1,?V7
        MOV     A,?V4
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,?V5
        MOV     R5,A
        MOV     A,?V4
        ADD     A,#0xf
        MOV     R2,A
        CLR     A
        ADDC    A,?V5
        MOV     R3,A
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
//  771     ZDP_TxOptions = AF_TX_OPTIONS_NONE;
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x0
        MOVX    @DPTR,A
//  772   }
//  773 }
??zdpProcessAddrReq_11:
        MOV     A,#0xe
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
//  774 
//  775 /*********************************************************************
//  776  * @fn          ZDP_NodeDescMsg
//  777  *
//  778  * @brief       Builds and sends a Node Descriptor message, unicast to the
//  779  *              specified device.
//  780  *
//  781  * @param       inMsg - incoming message
//  782  * @param       nwkAddr - 16 bit network address for device
//  783  * @param       pNodeDesc - pointer to the node descriptor
//  784  *
//  785  * @return      afStatus_t
//  786  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  787 afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
ZDP_NodeDescMsg:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function ZDP_NodeDescMsg
        CODE
//  788                            uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
//  789 {
        FUNCALL ZDP_NodeDescMsg, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  790   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  791   byte len;
//  792 
//  793   len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
        MOV     ?V6,#0x10
//  794 
//  795   *pBuf++ = ZDP_SUCCESS;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  796 
//  797   *pBuf++ = LO_UINT16( nwkAddr );
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  798   *pBuf++ = HI_UINT16( nwkAddr );
        MOV     R0,?V2
        MOV     R1,?V3
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  799 
//  800   *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
//  801                      (pNodeDesc->UserDescAvail << 4) |
//  802                      (pNodeDesc->LogicalType & 0x07));
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.4
        CLR     A
        RLC     A
        SWAP    A
        ANL     A,#0xf0
        MOV     R0,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        CLR     A
        RLC     A
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        ORL     A,R0
        ORL     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  803 
//  804   *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R0,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        ORL     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  805   *pBuf++ = pNodeDesc->CapabilityFlags;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  806   *pBuf++ = pNodeDesc->ManufacturerCode[0];
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  807   *pBuf++ = pNodeDesc->ManufacturerCode[1];
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  808   *pBuf++ = pNodeDesc->MaxBufferSize;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  809   *pBuf++ = pNodeDesc->MaxInTransferSize[0];
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  810   *pBuf++ = pNodeDesc->MaxInTransferSize[1];
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  811 
//  812   *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  813   *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  814   *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  815   *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
        MOV     A,?V0
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  816   *pBuf = pNodeDesc->DescriptorCapability;
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  817 
//  818   return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V8,#0x2
        MOV     ?V9,#-0x80
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,?V6
        MOV     A,?V4
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,?V5
        MOV     R5,A
        MOV     A,?V4
        ADD     A,#0xf
        MOV     R2,A
        CLR     A
        ADDC    A,?V5
        MOV     R3,A
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
//  819 }
          CFI EndBlock cfiBlock12
//  820 
//  821 /*********************************************************************
//  822  * @fn          ZDP_PowerDescMsg
//  823  *
//  824  * @brief       Builds and sends a Power Descriptor message, unicast to the
//  825  *              specified device.
//  826  *
//  827  * @param       inMsg - incoming message (request)
//  828  * @param       nwkAddr - 16 bit network address for device
//  829  * @param       pPowerDesc - pointer to the node descriptor
//  830  *
//  831  * @return      afStatus_t
//  832  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  833 afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
ZDP_PowerDescMsg:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function ZDP_PowerDescMsg
        CODE
//  834                      uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
//  835 {
        FUNCALL ZDP_PowerDescMsg, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
//  836   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  837   byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
        MOV     ?V6,#0x5
//  838 
//  839   *pBuf++ = ZDP_SUCCESS;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  840 
//  841   *pBuf++ = LO_UINT16( nwkAddr );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  842   *pBuf++ = HI_UINT16( nwkAddr );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  843 
//  844   *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
//  845                     | (pPowerDesc->PowerMode & 0x0F));
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ANL     A,#0xf
        MOV     R2,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        SWAP    A
        ANL     A,#0xf
        SWAP    A
        ANL     A,#0xf0
        ORL     A,R2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  846   *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
//  847                     | (pPowerDesc->CurrentPowerSource & 0x0F));
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        ANL     A,#0xf
        MOV     R0,A
        MOV     A,R1
        ANL     A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R1,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
        MOV     A,#0xc
        MOV     R0,#?V8
        LCALL   ?US_SHR
        MOV     A,?V8
        SWAP    A
        ANL     A,#0xf0
        ORL     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  848 
//  849   return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V8,#0x3
        MOV     ?V9,#-0x80
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,?V6
        MOV     A,?V4
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,?V5
        MOV     R5,A
        MOV     A,?V4
        ADD     A,#0xf
        MOV     R2,A
        CLR     A
        ADDC    A,?V5
        MOV     R3,A
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
//  850 }
          CFI EndBlock cfiBlock13
//  851 
//  852 /*********************************************************************
//  853  * @fn          ZDP_SimpleDescMsg
//  854  *
//  855  * @brief       Builds and sends a Simple Descriptor message, unicast to the
//  856  *              specified device.
//  857  *
//  858  * @param       inMsg - incoming message (request)
//  859  * @param       Status - message status (ZDP_SUCCESS or other)
//  860  * @param       pSimpleDesc - pointer to the node descriptor
//  861  *
//  862  * @return      afStatus_t
//  863  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  864 afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
ZDP_SimpleDescMsg:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function ZDP_SimpleDescMsg
        CODE
//  865                               SimpleDescriptionFormat_t *pSimpleDesc )
//  866 {
        FUNCALL ZDP_SimpleDescMsg, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V3,R1
        MOV     ?V0,R4
        MOV     ?V1,R5
//  867   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  868   uint8 i, len;
//  869 
//  870   if ( Status == ZDP_SUCCESS && pSimpleDesc )
        MOV     A,?V3
        JNZ     ??ZDP_SimpleDescMsg_0
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDP_SimpleDescMsg_0
//  871   {
//  872     // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
//  873     len = 1 + 2 + 1 + 8;
        MOV     ?V2,#0xc
//  874     len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
        MOV     B,#0x2
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MUL     AB
        ADD     A,?V2
        MOV     ?V2,A
        SJMP    ??ZDP_SimpleDescMsg_1
//  875   }
//  876   else
//  877   {
//  878     len = 1 + 2 + 1; // Status + desc length
??ZDP_SimpleDescMsg_0:
        MOV     ?V2,#0x4
//  879   }
//  880   if ( len >= ZDP_BUF_SZ-1 )
??ZDP_SimpleDescMsg_1:
        MOV     A,?V2
        CLR     C
        SUBB    A,#0x4f
        JC      ??ZDP_SimpleDescMsg_2
//  881   {
//  882     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
//  883   }
//  884 
//  885   *pBuf++ = Status;
??ZDP_SimpleDescMsg_2:
        MOV     A,?V3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  886 
//  887   *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  888   *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  889 
//  890   if ( len > 4 )
        MOV     A,?V2
        CLR     C
        SUBB    A,#0x5
        JNC     $+5
        LJMP    ??ZDP_SimpleDescMsg_4 & 0xFFFF
//  891   {
//  892     *pBuf++ = len - 4;   // Simple descriptor length
        MOV     A,#-0x4
        ADD     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  893 
//  894     *pBuf++ = pSimpleDesc->EndPoint;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  895     *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  896     *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  897     *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  898     *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  899 
//  900     *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xf
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  901 
//  902     *pBuf++ = pSimpleDesc->AppNumInClusters;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  903     if ( pSimpleDesc->AppNumInClusters )
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDP_SimpleDescMsg_5 & 0xFFFF
//  904     {
//  905       for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
        MOV     ?V6,#0x0
??ZDP_SimpleDescMsg_6:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V6
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??ZDP_SimpleDescMsg_5 & 0xFFFF
//  906       {
//  907         *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
        MOV     R0,?V6
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  908         *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
        MOV     R0,?V6
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  909       }
        INC     ?V6
        LJMP    ??ZDP_SimpleDescMsg_6 & 0xFFFF
//  910     }
//  911 
//  912     *pBuf++ = pSimpleDesc->AppNumOutClusters;
??ZDP_SimpleDescMsg_5:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  913     if ( pSimpleDesc->AppNumOutClusters )
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDP_SimpleDescMsg_7 & 0xFFFF
//  914     {
//  915       for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
        MOV     ?V6,#0x0
??ZDP_SimpleDescMsg_8:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V6
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??ZDP_SimpleDescMsg_7 & 0xFFFF
//  916       {
//  917         *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
        MOV     R0,?V6
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  918         *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
        MOV     R0,?V6
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  919       }
        INC     ?V6
        LJMP    ??ZDP_SimpleDescMsg_8 & 0xFFFF
//  920     }
//  921   }
//  922 
//  923   else
//  924   {
//  925     *pBuf = 0; // Description Length = 0;
??ZDP_SimpleDescMsg_4:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x0
        MOVX    @DPTR,A
//  926   }
//  927 
//  928   return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
??ZDP_SimpleDescMsg_7:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V8,#0x4
        MOV     ?V9,#-0x80
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,?V2
        MOV     A,?V4
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,?V5
        MOV     R5,A
        MOV     A,?V4
        ADD     A,#0xf
        MOV     R2,A
        CLR     A
        ADDC    A,?V5
        MOV     R3,A
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
??ZDP_SimpleDescMsg_3:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
//  929 }
          CFI EndBlock cfiBlock14
//  930 
//  931 /*********************************************************************
//  932  * @fn          ZDP_EPRsp
//  933  *
//  934  * @brief       This builds and send an endpoint list. Used in
//  935  *              Active_EP_rsp and Match_Desc_Rsp
//  936  *              message.  This function sends unicast message to the
//  937  *              requesting device.
//  938  *
//  939  * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
//  940  * @param       dstAddr - destination address
//  941  * @param       Status - message status (ZDP_SUCCESS or other)
//  942  * @param       nwkAddr - Device's short address that this response describes
//  943  * @param       Count - number of endpoint/interfaces in list
//  944  * @param       pEPIntfList - Array of Endpoint/Interfaces
//  945  * @param       SecurityEnable - Security Options
//  946  *
//  947  * @return      afStatus_t
//  948  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  949 afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
ZDP_EPRsp:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function ZDP_EPRsp
        CODE
//  950                         byte Status, uint16 nwkAddr, byte Count,
//  951                         uint8 *pEPList,
//  952                         byte SecurityEnable )
//  953 {
        FUNCALL ZDP_EPRsp, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EPRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     ?V14,R4
        MOV     ?V15,R5
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V10,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V7,A
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V13,A
//  954   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  955   byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
        MOV     ?V9,#0x4
//  956   byte txOptions;
//  957 
//  958   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  959 
//  960   if ( MsgType == Match_Desc_rsp )
        MOV     A,#0x6
        XRL     A,?V2
        JNZ     ??ZDP_EPRsp_0
        MOV     A,#-0x80
        XRL     A,?V3
??ZDP_EPRsp_0:
        JNZ     ??ZDP_EPRsp_1
//  961     txOptions = AF_MSG_ACK_REQUEST;
        MOV     ?V8,#0x10
        SJMP    ??ZDP_EPRsp_2
//  962   else
//  963     txOptions = 0;
??ZDP_EPRsp_1:
        MOV     ?V8,#0x0
//  964 
//  965     *pBuf++ = Status;
??ZDP_EPRsp_2:
        MOV     A,?V10
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  966   *pBuf++ = LO_UINT16( nwkAddr );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  967   *pBuf++ = HI_UINT16( nwkAddr );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  968 
//  969   *pBuf++ = Count;   // Endpoint/Interface count
        MOV     A,?V7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  970 
//  971   if ( Count )
        MOV     A,?V7
        JZ      ??ZDP_EPRsp_3
//  972   {
//  973     len += Count;
        MOV     A,?V7
        ADD     A,?V9
        MOV     ?V9,A
//  974     osal_memcpy( pBuf, pEPList, Count );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V12
        MOV     ?V5,?V13
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R4,?V7
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
//  975   }
//  976 
//  977   FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
??ZDP_EPRsp_3:
        MOV     A,?V8
        MOV     DPTR,#ZDP_TxOptions
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R1,?V9
        MOV     R4,?V14
        MOV     R5,?V15
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        MOV     ?V4,A
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     R1,?V4
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
//  978 }
          CFI EndBlock cfiBlock15
//  979 
//  980 /*********************************************************************
//  981  * @fn          ZDP_UserDescRsp
//  982  *
//  983  * @brief       Build and send the User Decriptor Response.
//  984  *
//  985  *
//  986  * @param       dstAddr - destination address
//  987  * @param       nwkAddrOfInterest -
//  988  * @param       userDesc -
//  989  * @param       SecurityEnable - Security Options
//  990  *
//  991  * @return      ZStatus_t
//  992  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  993 ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_UserDescRsp:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function ZDP_UserDescRsp
        CODE
//  994                 uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
//  995                 byte SecurityEnable )
//  996 {
        FUNCALL ZDP_UserDescRsp, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_UserDescRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
//  997   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  998   byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
        MOV     ?V2,#0x4
//  999 
// 1000   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1001 
// 1002   len += userDesc->len;
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    A,@DPTR
        ADD     A,?V2
        MOV     ?V2,A
// 1003 
// 1004   *pBuf++ = ZSUCCESS;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1005 
// 1006   *pBuf++ = LO_UINT16( nwkAddrOfInterest );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1007   *pBuf++ = HI_UINT16( nwkAddrOfInterest );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1008 
// 1009   *pBuf++ = userDesc->len;
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1010   osal_memcpy( pBuf, userDesc->desc, userDesc->len );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V8
        MOV     DPH,?V9
        INC     DPTR
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,R3
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 1011 
// 1012   return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V4,#0x11
        MOV     ?V5,#-0x80
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R1,?V2
        MOV     R4,?V10
        MOV     R5,?V11
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
// 1013 }
          CFI EndBlock cfiBlock16
// 1014 
// 1015 /*********************************************************************
// 1016  * @fn          ZDP_ServerDiscRsp
// 1017  *
// 1018  * @brief       Build and send the Server_Discovery_rsp response.
// 1019  *
// 1020  * @param       transID - Transaction sequence number of request.
// 1021  * @param       dstAddr - Network Destination Address.
// 1022  * @param       status - Status of response to request.
// 1023  * @param       aoi - Network Address of Interest of request.
// 1024  * @param       serverMask - Bit map of service(s) being sought.
// 1025  * @param       SecurityEnable - Security Options
// 1026  *
// 1027  * @return      ZStatus_t
// 1028  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1029 ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
ZDP_ServerDiscRsp:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function ZDP_ServerDiscRsp
        CODE
// 1030                            uint16 aoi, uint16 serverMask, byte SecurityEnable )
// 1031 {
        FUNCALL ZDP_ServerDiscRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V3,R4
        MOV     ?V5,R5
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 1032   const byte len = 1  + 2;  // status + aoi + mask.
        MOV     ?V4,#0x3
// 1033   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1034   ZStatus_t stat;
// 1035 
// 1036   // Intentionally unreferenced parameters
// 1037   (void)aoi;
// 1038   (void)SecurityEnable;
// 1039 
// 1040   *pBuf++ = status;
        MOV     A,?V3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1041 
// 1042   *pBuf++ = LO_UINT16( serverMask );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1043   *pBuf++ = HI_UINT16( serverMask );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1044 
// 1045   ZDP_TxOptions = AF_MSG_ACK_REQUEST;
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x10
        MOVX    @DPTR,A
// 1046   stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V8,#0x15
        MOV     ?V9,#-0x80
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,?V4
        MOV     R4,?V6
        MOV     R5,?V7
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     ?V2,A
// 1047   ZDP_TxOptions = AF_TX_OPTIONS_NONE;
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1048 
// 1049   return ( stat );
        MOV     R1,?V2
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
// 1050 }
          CFI EndBlock cfiBlock17
// 1051 
// 1052 /*********************************************************************
// 1053  * @fn          ZDP_GenericRsp
// 1054  *
// 1055  * @brief       Sends a response message with only the parameter status
// 1056  *              byte and the addr of interest for data.
// 1057  *              This function sends unicast message to the
// 1058  *              requesting device.
// 1059  *
// 1060  * @param       dstAddr - destination address
// 1061  * @param       status  - generic status for response
// 1062  * @param       aoi     - address of interest
// 1063  * @param       dstAddr - destination address
// 1064  * @param       rspId   - response cluster ID
// 1065  * @param       SecurityEnable - Security Options
// 1066  *
// 1067  * @return      afStatus_t
// 1068  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1069 afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_GenericRsp:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function ZDP_GenericRsp
        CODE
// 1070                      byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
// 1071 {
        FUNCALL ZDP_GenericRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V3,R4
        MOV     ?V2,R5
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V7,A
// 1072   uint8 len;
// 1073 
// 1074   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1075 
// 1076   ZDP_TmpBuf[0] = status;
        MOV     A,?V3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1077   ZDP_TmpBuf[1] = LO_UINT16( aoi );
        MOV     A,R6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1078   ZDP_TmpBuf[2] = HI_UINT16( aoi );
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1079 
// 1080   // Length byte
// 1081   ZDP_TmpBuf[3] = 0;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1082   len = 4;
        MOV     ?V4,#0x4
// 1083 
// 1084   return fillAndSend( &TransSeq, dstAddr, rspID, len );
        ; Setup parameters for call to function fillAndSend
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,?V4
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
// 1085 }
          CFI EndBlock cfiBlock18
// 1086 
// 1087 /*********************************************************************
// 1088  * Binding
// 1089  */
// 1090 /*********************************************************************
// 1091  * @fn          ZDP_EndDeviceBindReq
// 1092  *
// 1093  * @brief       This builds and sends a End_Device_Bind_req message.
// 1094  *              This function sends a unicast message.
// 1095  *
// 1096  * @param       dstAddr - destination address
// 1097  * @param       LocalCoordinator - short address of local coordinator
// 1098  * @param       epIntf - Endpoint/Interface of Simple Desc
// 1099  * @param       ProfileID - Profile ID
// 1100  *
// 1101  *   The Input cluster list is the opposite of what you would think.
// 1102  *   This is the output cluster list of this device
// 1103  * @param       NumInClusters - number of input clusters
// 1104  * @param       InClusterList - input cluster ID list
// 1105  *
// 1106  *   The Output cluster list is the opposite of what you would think.
// 1107  *   This is the input cluster list of this device
// 1108  * @param       NumOutClusters - number of output clusters
// 1109  * @param       OutClusterList - output cluster ID list
// 1110  *
// 1111  * @param       SecurityEnable - Security Options
// 1112  *
// 1113  * @return      afStatus_t
// 1114  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1115 afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
ZDP_EndDeviceBindReq:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function ZDP_EndDeviceBindReq
        CODE
// 1116                                  uint16 LocalCoordinator,
// 1117                                  byte endPoint,
// 1118                                  uint16 ProfileID,
// 1119                                  byte NumInClusters, cId_t *InClusterList,
// 1120                                  byte NumOutClusters, cId_t *OutClusterList,
// 1121                                  byte SecurityEnable )
// 1122 {
        FUNCALL ZDP_EndDeviceBindReq, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EndDeviceBindReq, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EndDeviceBindReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EndDeviceBindReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        MOV     A,#-0x17
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 23)
        ; Saved register size: 23
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V14,R1
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V7,A
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V13,A
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V6,A
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V11,A
// 1123   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1124   uint8 i, len;
// 1125   uint8 *ieeeAddr;
// 1126 
// 1127   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1128 
// 1129   // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
// 1130   len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
        MOV     ?V5,#0xf
// 1131   len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
        MOV     B,#0x2
        MOV     R2,?V7
        MOV     R3,#0x0
        MOV     R0,?V6
        MOV     R1,#0x0
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MUL     AB
        ADD     A,?V5
        MOV     ?V5,A
// 1132 
// 1133   if ( len >= ZDP_BUF_SZ-1 )
        MOV     A,?V5
        CLR     C
        SUBB    A,#0x4f
        JC      ??ZDP_EndDeviceBindReq_0
// 1134   {
// 1135     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
// 1136   }
// 1137 
// 1138   if ( LocalCoordinator != NLME_GetShortAddr() )
??ZDP_EndDeviceBindReq_0:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     A,?V8
        XRL     A,?V0
        JNZ     ??ZDP_EndDeviceBindReq_2
        MOV     A,?V9
        XRL     A,?V1
??ZDP_EndDeviceBindReq_2:
        JZ      ??ZDP_EndDeviceBindReq_3
// 1139   {
// 1140     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
// 1141   }
// 1142 
// 1143   *pBuf++ = LO_UINT16( LocalCoordinator );
??ZDP_EndDeviceBindReq_3:
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1144   *pBuf++ = HI_UINT16( LocalCoordinator );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1145 
// 1146   ieeeAddr = NLME_GetExtAddr();
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1147   pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R6,?V8
        MOV     R7,?V9
// 1148 
// 1149   *pBuf++ = endPoint;
        MOV     A,?V14
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1150 
// 1151   *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1152   *pBuf++ = HI_UINT16( ProfileID );
        MOV     R0,?V2
        MOV     R1,?V3
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1153 
// 1154   *pBuf++ = NumInClusters; // Input cluster list
        MOV     A,?V7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1155   for ( i = 0; i < NumInClusters; ++i )
        MOV     ?V4,#0x0
??ZDP_EndDeviceBindReq_4:
        MOV     A,?V4
        CLR     C
        SUBB    A,?V7
        JNC     ??ZDP_EndDeviceBindReq_5
// 1156   {
// 1157     *pBuf++ = LO_UINT16(InClusterList[i]);
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V12
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V13
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1158     *pBuf++ = HI_UINT16(InClusterList[i]);
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V12
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V13
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1159   }
        INC     ?V4
        LJMP    ??ZDP_EndDeviceBindReq_4 & 0xFFFF
// 1160 
// 1161   *pBuf++ = NumOutClusters; // Output cluster list
??ZDP_EndDeviceBindReq_5:
        MOV     A,?V6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1162   for ( i = 0; i < NumOutClusters; ++i )
        MOV     ?V4,#0x0
??ZDP_EndDeviceBindReq_6:
        MOV     A,?V4
        CLR     C
        SUBB    A,?V6
        JNC     ??ZDP_EndDeviceBindReq_7
// 1163   {
// 1164     *pBuf++ = LO_UINT16(OutClusterList[i]);
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V10
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V11
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1165     *pBuf++ = HI_UINT16(OutClusterList[i]);
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V10
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V11
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1166   }
        INC     ?V4
        LJMP    ??ZDP_EndDeviceBindReq_6 & 0xFFFF
// 1167 
// 1168   return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
??ZDP_EndDeviceBindReq_7:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V8,#0x20
        MOV     ?V9,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R1,?V5
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
??ZDP_EndDeviceBindReq_1:
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R7,#0xf
        LJMP    ?BANKED_LEAVE_XDATA
// 1169 }
          CFI EndBlock cfiBlock19
// 1170 
// 1171 /*********************************************************************
// 1172  * @fn          ZDP_BindUnbindReq
// 1173  *
// 1174  * @brief       This builds and send a Bind_req or Unbind_req message
// 1175  *              Depending on the ClusterID. This function
// 1176  *              sends a unicast message to the local coordinator.
// 1177  *
// 1178  * @param       BindOrUnbind - either Bind_req or Unbind_req
// 1179  * @param       dstAddr - destination address of the message
// 1180  * @param       SourceAddr - source 64 bit address of the binding
// 1181  * @param       SrcEPIntf - Source endpoint/interface
// 1182  * @param       ClusterID - Binding cluster ID
// 1183  * @param       DestinationAddr - destination 64 bit addr of binding
// 1184  * @param       DstEPIntf - destination endpoint/interface
// 1185  * @param       SecurityEnable - Security Options
// 1186  *
// 1187  * @return      afStatus_t
// 1188  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1189 afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
ZDP_BindUnbindReq:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function ZDP_BindUnbindReq
        CODE
// 1190                               uint8 *SourceAddr, byte SrcEndPoint,
// 1191                               cId_t ClusterID,
// 1192                               zAddrType_t *destinationAddr, byte DstEndPoint,
// 1193                               byte SecurityEnable )
// 1194 {
        FUNCALL ZDP_BindUnbindReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_BindUnbindReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_BindUnbindReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     ?V12,R4
        MOV     ?V13,R5
        MOV     ?V9,R1
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V14,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V15,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V8,A
// 1195   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1196   byte len;
// 1197 
// 1198   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1199 
// 1200   // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
// 1201   len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
        MOV     ?V6,#0xc
// 1202   if ( destinationAddr->addrMode == Addr64Bit )
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDP_BindUnbindReq_0
// 1203     len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
        MOV     A,#0x9
        ADD     A,?V6
        MOV     ?V6,A
        SJMP    ??ZDP_BindUnbindReq_1
// 1204   else if ( destinationAddr->addrMode == AddrGroup )
??ZDP_BindUnbindReq_0:
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDP_BindUnbindReq_1
// 1205     len += sizeof ( uint16 );
        MOV     A,#0x2
        ADD     A,?V6
        MOV     ?V6,A
// 1206 
// 1207   pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
??ZDP_BindUnbindReq_1:
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V14
        MOV     R5,?V15
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     R6,?V10
        MOV     R7,?V11
// 1208   *pBuf++ = SrcEndPoint;
        MOV     A,?V9
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1209 
// 1210   *pBuf++ = LO_UINT16( ClusterID );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1211 
// 1212   *pBuf++ = HI_UINT16( ClusterID );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1213   *pBuf++ = destinationAddr->addrMode;
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1214   if ( destinationAddr->addrMode == Addr64Bit )
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDP_BindUnbindReq_2
// 1215   {
// 1216     pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V4
        MOV     R5,?V5
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     R6,?V10
        MOV     R7,?V11
// 1217     *pBuf = DstEndPoint;
        MOV     A,?V8
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        SJMP    ??ZDP_BindUnbindReq_3
// 1218   }
// 1219   else if ( destinationAddr->addrMode == AddrGroup )
??ZDP_BindUnbindReq_2:
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDP_BindUnbindReq_3
// 1220   {
// 1221     *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1222     *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1223   }
// 1224 
// 1225   FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
??ZDP_BindUnbindReq_3:
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x10
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R1,?V6
        MOV     R4,?V12
        MOV     R5,?V13
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        MOV     ?V7,A
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     R1,?V7
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
// 1226 }
          CFI EndBlock cfiBlock20
// 1227 
// 1228 /*********************************************************************
// 1229  * Network Management
// 1230  */
// 1231 
// 1232 /*********************************************************************
// 1233  * @fn          ZDP_MgmtNwkDiscReq
// 1234  *
// 1235  * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
// 1236  *              function sends a unicast message.
// 1237  *
// 1238  * @param       dstAddr - destination address of the message
// 1239  * @param       ScanChannels - 32 bit address bit map
// 1240  * @param       StartIndex - Starting index within the reporting network
// 1241  *                           list
// 1242  * @param       SecurityEnable - Security Options
// 1243  *
// 1244  * @return      afStatus_t
// 1245  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1246 afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
ZDP_MgmtNwkDiscReq:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function ZDP_MgmtNwkDiscReq
        CODE
// 1247                                uint32 ScanChannels,
// 1248                                byte ScanDuration,
// 1249                                byte StartIndex,
// 1250                                byte SecurityEnable )
// 1251 {
        FUNCALL ZDP_MgmtNwkDiscReq, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkDiscReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V12,R2
        MOV     ?V13,R3
        MOV     A,R1
        MOV     R6,A
        MOV     A,R4
        MOV     R7,A
        MOV     ?V8,R5
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     ?V4,?V0
        MOV     ?V5,?V1
        MOV     ?V6,?V2
        MOV     ?V7,?V3
// 1252   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 1253   byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
        MOV     ?V2,#0x6
// 1254 
// 1255   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1256 
// 1257   pBuf = osal_buffer_uint32( pBuf, ScanChannels );
        ; Setup parameters for call to function osal_buffer_uint32
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     ?V0,?V10
        MOV     ?V1,?V11
// 1258 
// 1259   *pBuf++ = ScanDuration;
        MOV     A,R6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     ?V0,DPL
        MOV     ?V1,DPH
// 1260   *pBuf = StartIndex;
        MOV     A,R7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1261 
// 1262   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V10,#0x30
        MOV     ?V11,#0x0
        MOV     R0,#?V10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R1,?V2
        MOV     R4,?V12
        MOV     R5,?V13
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
// 1263 }
          CFI EndBlock cfiBlock21
// 1264 
// 1265 /*********************************************************************
// 1266  * @fn          ZDP_MgmtDirectJoinReq
// 1267  *
// 1268  * @brief       This builds and send a Mgmt_Direct_Join_req message. This
// 1269  *              function sends a unicast message.
// 1270  *
// 1271  * @param       dstAddr - destination address of the message
// 1272  * @param       deviceAddr - 64 bit IEEE Address
// 1273  * @param       SecurityEnable - Security Options
// 1274  *
// 1275  * @return      afStatus_t
// 1276  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1277 afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
ZDP_MgmtDirectJoinReq:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function ZDP_MgmtDirectJoinReq
        CODE
// 1278                                uint8 *deviceAddr,
// 1279                                byte capInfo,
// 1280                                byte SecurityEnable )
// 1281 {
        FUNCALL ZDP_MgmtDirectJoinReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtDirectJoinReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V2,R1
// 1282   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1283 
// 1284   osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1285   ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1286 
// 1287   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V4,#0x35
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0x9
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
// 1288 }
          CFI EndBlock cfiBlock22
// 1289 
// 1290 /*********************************************************************
// 1291  * @fn          ZDP_MgmtPermitJoinReq
// 1292  *
// 1293  * @brief       This builds and send a Mgmt_Permit_Join_req message.
// 1294  *
// 1295  * @param       dstAddr - destination address of the message
// 1296  * @param       duration - Permit duration
// 1297  * @param       TcSignificance - Trust Center Significance
// 1298  *
// 1299  * @return      afStatus_t
// 1300  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1301 afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
ZDP_MgmtPermitJoinReq:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function ZDP_MgmtPermitJoinReq
        CODE
// 1302                                   byte TcSignificance, byte SecurityEnable )
// 1303 {
        FUNCALL ZDP_MgmtPermitJoinReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R1
        MOV     ?V1,R4
        MOV     ?V2,R5
// 1304   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1305 
// 1306   // Build buffer
// 1307   ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1308   ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
        MOV     A,?V1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1309 
// 1310   // Send the message
// 1311   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
// 1312                       ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V4,#0x36
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0x2
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
// 1313 }
          CFI EndBlock cfiBlock23
// 1314 
// 1315 /*********************************************************************
// 1316  * @fn          ZDP_MgmtLeaveReq
// 1317  *
// 1318  * @brief       This builds and send a Mgmt_Leave_req message.
// 1319  *
// 1320  * @param       dstAddr - destination address of the message
// 1321  *              IEEEAddr - IEEE adddress of device that is removed
// 1322  *              RemoveChildren - set to 1 to remove the children of the
// 1323  *                                device as well. 0 otherwise.
// 1324  *              Rejoin - set to 1 if the removed device should rejoin
// 1325                          afterwards. 0 otherwise.
// 1326  *
// 1327  * @return      afStatus_t
// 1328  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1329 afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
ZDP_MgmtLeaveReq:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function ZDP_MgmtLeaveReq
        CODE
// 1330                  uint8 Rejoin, uint8 SecurityEnable )
// 1331 
// 1332 {
        FUNCALL ZDP_MgmtLeaveReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLeaveReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V3,R1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V2,A
// 1333   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1334 
// 1335   osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1336   ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1337 
// 1338   if ( RemoveChildren == TRUE )
        MOV     A,#0x1
        XRL     A,?V3
        JNZ     ??ZDP_MgmtLeaveReq_0
// 1339   {
// 1340     ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.6
        MOVX    @DPTR,A
// 1341   }
// 1342   if ( Rejoin == TRUE )
??ZDP_MgmtLeaveReq_0:
        MOV     A,#0x1
        XRL     A,?V2
        JNZ     ??ZDP_MgmtLeaveReq_1
// 1343   {
// 1344     ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.7
        MOVX    @DPTR,A
// 1345   }
// 1346 
// 1347   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
??ZDP_MgmtLeaveReq_1:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V4,#0x34
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0x9
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
// 1348 }
          CFI EndBlock cfiBlock24
// 1349 
// 1350 /*********************************************************************
// 1351  * @fn          ZDP_MgmtNwkUpdateReq
// 1352  *
// 1353  * @brief       This builds and send a Mgmt_NWK_Update_req message. This
// 1354  *              function sends a unicast or broadcast message.
// 1355  *
// 1356  * @param       dstAddr - destination address of the message
// 1357  * @param       ChannelMask - 32 bit address bit map
// 1358  * @param       ScanDuration - length of time to spend scanning each channel
// 1359  * @param       ScanCount - number of energy scans to be conducted
// 1360  * @param       NwkUpdateId - NWk Update Id value
// 1361  * @param       NwkManagerAddr - NWK address for device with Network Manager
// 1362  *                               bit set in its Node Descriptor
// 1363  *
// 1364  * @return      afStatus_t
// 1365  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1366 afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
ZDP_MgmtNwkUpdateReq:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function ZDP_MgmtNwkUpdateReq
        CODE
// 1367                                  uint32 ChannelMask,
// 1368                                  uint8 ScanDuration,
// 1369                                  uint8 ScanCount,
// 1370                                  uint8 NwkUpdateId,
// 1371                                  uint16 NwkManagerAddr )
// 1372 {
        FUNCALL ZDP_MgmtNwkUpdateReq, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V12,R2
        MOV     ?V13,R3
        MOV     A,R1
        MOV     R7,A
        MOV     ?V9,R4
        MOV     ?V8,R5
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
// 1373   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 1374   byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
        MOV     R6,#0x5
// 1375 
// 1376   pBuf = osal_buffer_uint32( pBuf, ChannelMask );
        ; Setup parameters for call to function osal_buffer_uint32
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     ?V0,?V10
        MOV     ?V1,?V11
// 1377 
// 1378   *pBuf++ = ScanDuration;
        MOV     A,R7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     ?V0,DPL
        MOV     ?V1,DPH
// 1379 
// 1380   if ( ScanDuration <= 0x05 )
        MOV     A,R7
        CLR     C
        SUBB    A,#0x6
        JNC     ??ZDP_MgmtNwkUpdateReq_0
// 1381   {
// 1382     // Request is to scan over channelMask
// 1383     len += sizeof( uint8 );
        INC     R6
// 1384 
// 1385     *pBuf++ = ScanCount;
        MOV     A,?V9
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     ?V0,DPL
        MOV     ?V1,DPH
        SJMP    ??ZDP_MgmtNwkUpdateReq_1
// 1386   }
// 1387   else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
??ZDP_MgmtNwkUpdateReq_0:
        MOV     A,#-0x2
        XRL     A,R7
        JZ      ??ZDP_MgmtNwkUpdateReq_2
        MOV     A,#-0x1
        XRL     A,R7
        JNZ     ??ZDP_MgmtNwkUpdateReq_1
// 1388   {
// 1389     // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
// 1390     len += sizeof( uint8 );
??ZDP_MgmtNwkUpdateReq_2:
        INC     R6
// 1391 
// 1392     *pBuf++ = NwkUpdateId;
        MOV     A,?V8
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     ?V0,DPL
        MOV     ?V1,DPH
// 1393 
// 1394     if ( ScanDuration == 0xFF )
        MOV     A,#-0x1
        XRL     A,R7
        JNZ     ??ZDP_MgmtNwkUpdateReq_1
// 1395     {
// 1396       len += sizeof( uint16 );
        MOV     A,#0x2
        ADD     A,R6
        MOV     R6,A
// 1397 
// 1398       *pBuf++  = LO_UINT16( NwkManagerAddr );
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     ?V0,DPL
        MOV     ?V1,DPH
// 1399       *pBuf++  = HI_UINT16( NwkManagerAddr );
        MOV     R0,?V2
        MOV     R1,?V3
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     ?V0,DPL
        MOV     ?V1,DPH
// 1400     }
// 1401   }
// 1402 
// 1403   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
??ZDP_MgmtNwkUpdateReq_1:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V10,#0x38
        MOV     ?V11,#0x0
        MOV     R0,#?V10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R6
        MOV     R1,A
        MOV     R4,?V12
        MOV     R5,?V13
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
// 1404 }
          CFI EndBlock cfiBlock25
// 1405 
// 1406 
// 1407 /*********************************************************************
// 1408  * Network Management Responses
// 1409  */
// 1410 
// 1411 /*********************************************************************
// 1412  * @fn          ZDP_MgmtNwkDiscRsp
// 1413  *
// 1414  * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
// 1415  *              function sends a unicast message.
// 1416  *
// 1417  * @param       dstAddr - destination address of the message
// 1418  * @param       Status - message status (ZDP_SUCCESS or other)
// 1419  * @param       NetworkCount - Total number of networks found
// 1420  * @param       StartIndex - Starting index within the reporting network
// 1421  *                           list
// 1422  * @param       NetworkListCount - number of network lists included
// 1423  *                                 in this message
// 1424  * @param       NetworkList - List of network descriptors
// 1425  * @param       SecurityEnable - Security Options
// 1426  *
// 1427  * @return      afStatus_t
// 1428  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1429 afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtNwkDiscRsp:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function ZDP_MgmtNwkDiscRsp
        CODE
// 1430                             byte Status,
// 1431                             byte NetworkCount,
// 1432                             byte StartIndex,
// 1433                             byte NetworkListCount,
// 1434                             networkDesc_t *NetworkList,
// 1435                             byte SecurityEnable )
// 1436 {
        FUNCALL ZDP_MgmtNwkDiscRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkDiscRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkDiscRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkDiscRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     ?V14,R2
        MOV     ?V15,R3
        MOV     ?V12,R4
        MOV     ?V11,R5
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V10,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 1437   uint8 *buf;
// 1438   uint8 *pBuf;
// 1439   byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
        MOV     ?V2,#0x4
// 1440   byte idx;
// 1441 
// 1442   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1443 
// 1444   len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
        MOV     B,#0xc
        MOV     A,?V3
        MUL     AB
        ADD     A,?V2
        MOV     ?V2,A
// 1445 
// 1446   buf = osal_mem_alloc( len+1 );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     ?V6,?V8
        MOV     ?V7,?V9
// 1447   if ( buf == NULL )
        MOV     A,?V6
        ORL     A,?V7
        JNZ     ??ZDP_MgmtNwkDiscRsp_0
// 1448   {
// 1449     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??ZDP_MgmtNwkDiscRsp_1 & 0xFFFF
// 1450   }
// 1451 
// 1452   pBuf = buf+1;
??ZDP_MgmtNwkDiscRsp_0:
        MOV     DPL,?V6
        MOV     DPH,?V7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1453 
// 1454   *pBuf++ = Status;
        MOV     A,?V12
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1455   *pBuf++ = NetworkCount;
        MOV     A,?V11
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1456   *pBuf++ = StartIndex;
        MOV     A,?V10
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1457   *pBuf++ = NetworkListCount;
        MOV     A,?V3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1458 
// 1459   for ( idx = 0; idx < NetworkListCount; idx++ )
        MOV     ?V4,#0x0
??ZDP_MgmtNwkDiscRsp_2:
        MOV     A,?V4
        CLR     C
        SUBB    A,?V3
        JC      $+5
        LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
// 1460   {
// 1461     osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,?V0
        ADD     A,#0xb
        MOV     R4,A
        CLR     A
        ADDC    A,?V1
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1462     pBuf += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        JNC     ??ZDP_MgmtNwkDiscRsp_4
        INC     R7
// 1463 
// 1464     *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
??ZDP_MgmtNwkDiscRsp_4:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1465     *pBuf    = NetworkList->stackProfile;                  // Stack profile
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1466     *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf0
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1467     *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0xf
        MOVX    @DPTR,A
// 1468     *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ORL     A,#0xf0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1469 
// 1470     if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDP_MgmtNwkDiscRsp_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDP_MgmtNwkDiscRsp_5:
        JZ      ??ZDP_MgmtNwkDiscRsp_6
// 1471     {
// 1472       *pBuf++ = TRUE;                         // Permit Joining
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        SJMP    ??ZDP_MgmtNwkDiscRsp_7
// 1473     }
// 1474     else
// 1475     {
// 1476       *pBuf++ = FALSE;
??ZDP_MgmtNwkDiscRsp_6:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1477     }
// 1478 
// 1479     NetworkList = NetworkList->nextDesc;    // Move to next list entry
??ZDP_MgmtNwkDiscRsp_7:
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 1480   }
        INC     ?V4
        LJMP    ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
// 1481 
// 1482   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
??ZDP_MgmtNwkDiscRsp_3:
        MOV     DPL,?V6
        MOV     DPH,?V7
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPTR,#ZDP_TmpBuf
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     ?V8,#0x30
        MOV     ?V9,#-0x80
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R1,?V2
        MOV     R4,?V14
        MOV     R5,?V15
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        MOV     ?V5,A
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V6
        MOV     R3,?V7
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV     DPTR,#ZDP_TmpBuf
        MOV     A,#(ZDP_Buf + 1) & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
        MOVX    @DPTR,A
        MOV     R1,?V5
??ZDP_MgmtNwkDiscRsp_1:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
// 1483 }
          CFI EndBlock cfiBlock26
// 1484 
// 1485 /*********************************************************************
// 1486  * @fn          ZDP_MgmtLqiRsp
// 1487  *
// 1488  * @brief       This builds and send a Mgmt_Lqi_rsp message. This
// 1489  *              function sends a unicast message.
// 1490  *
// 1491  * @param       dstAddr - destination address of the message
// 1492  * @param       Status - message status (ZDP_SUCCESS or other)
// 1493  * @param       NeighborLqiEntries - Total number of entries found
// 1494  * @param       StartIndex - Starting index within the reporting list
// 1495  * @param       NeighborLqiCount - number of lists included
// 1496  *                                 in this message
// 1497  * @param       NeighborLqiList - List of NeighborLqiItems.  This list
// 1498  *                is the list to be sent, not the entire list
// 1499  * @param       SecurityEnable - true if secure
// 1500  *
// 1501  * @return      ZStatus_t
// 1502  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1503 ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtLqiRsp:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function ZDP_MgmtLqiRsp
        CODE
// 1504                           byte Status,
// 1505                           byte NeighborLqiEntries,
// 1506                           byte StartIndex,
// 1507                           byte NeighborLqiCount,
// 1508                           ZDP_MgmtLqiItem_t* NeighborList,
// 1509                           byte SecurityEnable )
// 1510 {
        FUNCALL ZDP_MgmtLqiRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     ?V14,R2
        MOV     ?V15,R3
        MOV     ?V4,R4
        MOV     ?V12,R5
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V11,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V6,A
// 1511   ZDP_MgmtLqiItem_t* list = NeighborList;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 1512   uint8 *buf, *pBuf;
// 1513   byte len, x;
// 1514 
// 1515   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1516 
// 1517   if ( ZSuccess != Status )
        MOV     A,?V4
        JZ      ??ZDP_MgmtLqiRsp_0
// 1518   {
// 1519     ZDP_TmpBuf[0] = Status;
        MOV     A,?V4
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1520     return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V8,#0x31
        MOV     ?V9,#-0x80
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R1,#0x1
        MOV     R4,?V14
        MOV     R5,?V15
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        LJMP    ??ZDP_MgmtLqiRsp_1 & 0xFFFF
// 1521   }
// 1522 
// 1523   // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
// 1524   //  neighbor LQI data.
// 1525   len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
??ZDP_MgmtLqiRsp_0:
        MOV     B,#0x16
        MOV     A,?V6
        MUL     AB
        ADD     A,#0x4
        MOV     ?V10,A
// 1526 
// 1527   buf = osal_mem_alloc( len+1 );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V10
        MOV     R1,#0x0
        MOV     A,R0
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     ?V2,?V8
        MOV     ?V3,?V9
// 1528   if ( buf == NULL )
        MOV     A,?V2
        ORL     A,?V3
        JNZ     ??ZDP_MgmtLqiRsp_2
// 1529   {
// 1530     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??ZDP_MgmtLqiRsp_1 & 0xFFFF
// 1531   }
// 1532 
// 1533   pBuf = buf+1;
??ZDP_MgmtLqiRsp_2:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1534 
// 1535   *pBuf++ = Status;
        MOV     A,?V4
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1536   *pBuf++ = NeighborLqiEntries;
        MOV     A,?V12
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1537   *pBuf++ = StartIndex;
        MOV     A,?V11
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1538   *pBuf++ = NeighborLqiCount;
        MOV     A,?V6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1539 
// 1540   for ( x = 0; x < NeighborLqiCount; x++ )
        MOV     ?V7,#0x0
??ZDP_MgmtLqiRsp_3:
        MOV     A,?V7
        CLR     C
        SUBB    A,?V6
        JC      $+5
        LJMP    ??ZDP_MgmtLqiRsp_4 & 0xFFFF
// 1541   {
// 1542     osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,?V0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,?V1
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1543     pBuf += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        JNC     ??ZDP_MgmtLqiRsp_5
        INC     R7
// 1544 
// 1545     // EXTADDR
// 1546     pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
??ZDP_MgmtLqiRsp_5:
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,?V0
        ADD     A,#0xa
        MOV     R4,A
        CLR     A
        ADDC    A,?V1
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R6,?V8
        MOV     R7,?V9
// 1547 
// 1548     // NWKADDR
// 1549     *pBuf++ = LO_UINT16( list->nwkAddr );
        MOV     A,?V0
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1550     *pBuf++ = HI_UINT16( list->nwkAddr );
        MOV     A,?V0
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1551 
// 1552     // DEVICETYPE
// 1553     *pBuf = list->devType;
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1554 
// 1555     // RXONIDLE
// 1556     *pBuf |= (uint8)(list->rxOnIdle << 2);
        MOV     A,?V0
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        RLC     A
        RLC     A
        ANL     A,#0xfc
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
// 1557 
// 1558     // RELATIONSHIP
// 1559     *pBuf++ |= (uint8)(list->relation << 4);
        MOV     A,?V0
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf0
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1560 
// 1561     // PERMITJOINING
// 1562     *pBuf++ = (uint8)(list->permit);
        MOV     A,?V0
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1563 
// 1564     // DEPTH
// 1565     *pBuf++ = list->depth;
        MOV     A,?V0
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1566 
// 1567     // LQI
// 1568     *pBuf++ = list->lqi;
        MOV     A,?V0
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1569 
// 1570     list++; // next list entry
        MOV     A,?V0
        ADD     A,#0x1a
        MOV     ?V0,A
        JNC     ??ZDP_MgmtLqiRsp_6
        INC     ?V1
// 1571   }
??ZDP_MgmtLqiRsp_6:
        INC     ?V7
        LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
// 1572 
// 1573   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
??ZDP_MgmtLqiRsp_4:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPTR,#ZDP_TmpBuf
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     ?V8,#0x31
        MOV     ?V9,#-0x80
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R1,?V10
        MOV     R4,?V14
        MOV     R5,?V15
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        MOV     ?V5,A
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV     DPTR,#ZDP_TmpBuf
        MOV     A,#(ZDP_Buf + 1) & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
        MOVX    @DPTR,A
        MOV     R1,?V5
??ZDP_MgmtLqiRsp_1:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
// 1574 }
          CFI EndBlock cfiBlock27
// 1575 
// 1576 /*********************************************************************
// 1577  * @fn          ZDP_MgmtRtgRsp
// 1578  *
// 1579  * @brief       This builds and send a Mgmt_Rtg_rsp message. This
// 1580  *              function sends a unicast message.
// 1581  *
// 1582  * @param       dstAddr - destination address of the message
// 1583  * @param       Status - message status (ZDP_SUCCESS or other)
// 1584  * @param       RoutingTableEntries - Total number of entries
// 1585  * @param       StartIndex - Starting index within the reporting list
// 1586  * @param       RoutingTableListCount - number of entries included
// 1587  *                                      in this message
// 1588  * @param       RoutingTableList - List of Routing Table entries
// 1589  * @param       SecurityEnable - true to enable security for this message
// 1590  *
// 1591  * @return      ZStatus_t
// 1592  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1593 ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtRtgRsp:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function ZDP_MgmtRtgRsp
        CODE
// 1594                             byte Status,
// 1595                             byte RoutingTableEntries,
// 1596                             byte StartIndex,
// 1597                             byte RoutingListCount,
// 1598                             rtgItem_t *RoutingTableList,
// 1599                             byte SecurityEnable )
// 1600 {
        FUNCALL ZDP_MgmtRtgRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtRtgRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtRtgRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     ?V14,R2
        MOV     ?V15,R3
        MOV     ?V12,R4
        MOV     ?V11,R5
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V10,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 1601   uint8 *buf;
// 1602   uint8 *pBuf;
// 1603   // Status + RoutingTableEntries + StartIndex + RoutingListCount.
// 1604   byte len = 1 + 1 + 1 + 1;
        MOV     ?V2,#0x4
// 1605   byte x;
// 1606 
// 1607   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1608 
// 1609   // Add an array for Routing List data
// 1610   len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
        MOV     B,#0x5
        MOV     A,?V3
        MUL     AB
        ADD     A,?V2
        MOV     ?V2,A
// 1611 
// 1612   buf = osal_mem_alloc( (short)(len+1) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     ?V4,?V8
        MOV     ?V5,?V9
// 1613   if ( buf == NULL )
        MOV     A,?V4
        ORL     A,?V5
        JNZ     ??ZDP_MgmtRtgRsp_0
// 1614   {
// 1615     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
// 1616   }
// 1617 
// 1618   pBuf = buf+1;
??ZDP_MgmtRtgRsp_0:
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1619 
// 1620   *pBuf++ = Status;
        MOV     A,?V12
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1621   *pBuf++ = RoutingTableEntries;
        MOV     A,?V11
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1622   *pBuf++ = StartIndex;
        MOV     A,?V10
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1623   *pBuf++ = RoutingListCount;
        MOV     A,?V3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1624 
// 1625   for ( x = 0; x < RoutingListCount; x++ )
        MOV     ?V6,#0x0
??ZDP_MgmtRtgRsp_2:
        MOV     A,?V6
        CLR     C
        SUBB    A,?V3
        JC      $+5
        LJMP    ??ZDP_MgmtRtgRsp_3 & 0xFFFF
// 1626   {
// 1627     *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1628     *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1629 
// 1630     *pBuf = (RoutingTableList->status & 0x07);
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1631     if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x18
        JZ      ??ZDP_MgmtRtgRsp_4
// 1632     {
// 1633       uint8 options = 0;
        MOV     R0,#0x0
// 1634       options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
        SETB    C
        MOV     A,R0
        MOV     0xE0 /* A   */.1,C
        MOV     R0,A
// 1635 
// 1636       if ( RoutingTableList->options & ZP_RTG_RECORD )
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JNC     ??ZDP_MgmtRtgRsp_5
// 1637       {
// 1638         options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
        SETB    C
        MOV     A,R0
        MOV     0xE0 /* A   */.2,C
        MOV     R0,A
// 1639       }
// 1640 
// 1641       if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
??ZDP_MgmtRtgRsp_5:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.4
        JNC     ??ZDP_MgmtRtgRsp_6
// 1642       {
// 1643         options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
        SETB    C
        MOV     A,R0
        MOV     0xE0 /* A   */.0,C
        MOV     R0,A
// 1644       }
// 1645 
// 1646       *pBuf |= (options << 3);
??ZDP_MgmtRtgRsp_6:
        MOV     A,R0
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
// 1647     }
// 1648     pBuf++;
??ZDP_MgmtRtgRsp_4:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1649 
// 1650     *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1651     *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1652     RoutingTableList++;    // Move to next list entry
        MOV     A,?V0
        ADD     A,#0x7
        MOV     ?V0,A
        JNC     ??ZDP_MgmtRtgRsp_7
        INC     ?V1
// 1653   }
??ZDP_MgmtRtgRsp_7:
        INC     ?V6
        LJMP    ??ZDP_MgmtRtgRsp_2 & 0xFFFF
// 1654 
// 1655   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
??ZDP_MgmtRtgRsp_3:
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPTR,#ZDP_TmpBuf
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     ?V8,#0x32
        MOV     ?V9,#-0x80
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R1,?V2
        MOV     R4,?V14
        MOV     R5,?V15
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        MOV     ?V7,A
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V4
        MOV     R3,?V5
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV     DPTR,#ZDP_TmpBuf
        MOV     A,#(ZDP_Buf + 1) & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
        MOVX    @DPTR,A
        MOV     R1,?V7
??ZDP_MgmtRtgRsp_1:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
// 1656 }
          CFI EndBlock cfiBlock28
// 1657 
// 1658 /*********************************************************************
// 1659  * @fn          ZDP_MgmtBindRsp
// 1660  *
// 1661  * @brief       This builds and send a Mgmt_Bind_rsp message. This
// 1662  *              function sends a unicast message.
// 1663  *
// 1664  * @param       dstAddr - destination address of the message
// 1665  * @param       Status - message status (ZDP_SUCCESS or other)
// 1666  * @param       BindingTableEntries - Total number of entries
// 1667  * @param       StartIndex - Starting index within the reporting list
// 1668  * @param       BindingTableListCount - number of entries included
// 1669  *                                 in this message
// 1670  * @param       BindingTableList - List of Binding Table entries
// 1671  * @param       SecurityEnable - Security Options
// 1672  *
// 1673  * @return      ZStatus_t
// 1674  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1675 ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtBindRsp:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function ZDP_MgmtBindRsp
        CODE
// 1676                             byte Status,
// 1677                             byte BindingTableEntries,
// 1678                             byte StartIndex,
// 1679                             byte BindingTableListCount,
// 1680                             apsBindingItem_t *BindingTableList,
// 1681                             byte SecurityEnable )
// 1682 {
        FUNCALL ZDP_MgmtBindRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtBindRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtBindRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtBindRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtBindRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     ?V14,R4
        MOV     ?V13,R5
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V12,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V6,A
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 1683   uint8 *buf;
// 1684   uint8 *pBuf;
// 1685   uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
// 1686   uint8 len;    // Actual length varies due to different addrMode
// 1687   uint8 x;
// 1688   byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
        MOV     ?V11,#0x15
// 1689   byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
        MOV     ?V15,#0xe
// 1690 
// 1691   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1692 
// 1693   // Status + BindingTableEntries + StartIndex + BindingTableListCount.
// 1694   maxLen = 1 + 1 + 1 + 1;
        MOV     ?V10,#0x4
// 1695   maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
        MOV     A,?V11
        MOV     B,A
        MOV     A,?V6
        MUL     AB
        ADD     A,?V10
        MOV     ?V10,A
// 1696   buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V10
        MOV     R1,#0x0
        MOV     A,R0
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     ?V4,?V8
        MOV     ?V5,?V9
// 1697 
// 1698   if ( buf == NULL )
        MOV     A,?V4
        ORL     A,?V5
        JNZ     ??ZDP_MgmtBindRsp_0
// 1699   {
// 1700     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??ZDP_MgmtBindRsp_1 & 0xFFFF
// 1701   }
// 1702 
// 1703   pBuf = buf+1;
??ZDP_MgmtBindRsp_0:
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1704 
// 1705   *pBuf++ = Status;
        MOV     A,?V14
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1706   *pBuf++ = BindingTableEntries;
        MOV     A,?V13
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1707   *pBuf++ = StartIndex;
        MOV     A,?V12
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1708   *pBuf++ = BindingTableListCount;
        MOV     A,?V6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1709 
// 1710   // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
// 1711   // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
// 1712   //           extZdpBindEntrySize     -- Version 1.1 extended address mode
// 1713   //           shortZdpBindEntrySize   -- Version 1.1 group address mode
// 1714 
// 1715   len = 1 + 1 + 1 + 1;
        MOV     ?V2,#0x4
// 1716   for ( x = 0; x < BindingTableListCount; x++ )
        MOV     ?V7,#0x0
??ZDP_MgmtBindRsp_2:
        MOV     A,?V7
        CLR     C
        SUBB    A,?V6
        JC      $+5
        LJMP    ??ZDP_MgmtBindRsp_3 & 0xFFFF
// 1717   {
// 1718     pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R6,?V8
        MOV     R7,?V9
// 1719     *pBuf++ = BindingTableList->srcEP;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1720 
// 1721     // Cluster ID
// 1722     *pBuf++ = LO_UINT16( BindingTableList->clusterID );
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1723     *pBuf++ = HI_UINT16( BindingTableList->clusterID );
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1724 
// 1725     *pBuf++ = BindingTableList->dstAddr.addrMode;
        MOV     A,?V0
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1726     if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
        MOV     A,?V0
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDP_MgmtBindRsp_4
// 1727     {
// 1728       len += extZdpBindEntrySize;
        MOV     A,?V11
        ADD     A,?V2
        MOV     ?V2,A
// 1729       pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,?V0
        ADD     A,#0xb
        MOV     R4,A
        CLR     A
        ADDC    A,?V1
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R6,?V8
        MOV     R7,?V9
// 1730       *pBuf++ = BindingTableList->dstEP;
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        SJMP    ??ZDP_MgmtBindRsp_5
// 1731     }
// 1732     else
// 1733     {
// 1734       len += shortZdpBindEntrySize;
??ZDP_MgmtBindRsp_4:
        MOV     A,?V15
        ADD     A,?V2
        MOV     ?V2,A
// 1735       *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
        MOV     A,?V0
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1736       *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
        MOV     A,?V0
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1737     }
// 1738     BindingTableList++;    // Move to next list entry
??ZDP_MgmtBindRsp_5:
        MOV     A,?V0
        ADD     A,#0x15
        MOV     ?V0,A
        JNC     ??ZDP_MgmtBindRsp_6
        INC     ?V1
// 1739   }
??ZDP_MgmtBindRsp_6:
        INC     ?V7
        LJMP    ??ZDP_MgmtBindRsp_2 & 0xFFFF
// 1740 
// 1741   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
??ZDP_MgmtBindRsp_3:
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPTR,#ZDP_TmpBuf
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     ?V8,#0x33
        MOV     ?V9,#-0x80
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R1,?V2
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        MOV     ?V3,A
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V4
        MOV     R3,?V5
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV     DPTR,#ZDP_TmpBuf
        MOV     A,#(ZDP_Buf + 1) & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
        MOVX    @DPTR,A
        MOV     R1,?V3
??ZDP_MgmtBindRsp_1:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
// 1742 }
          CFI EndBlock cfiBlock29
// 1743 
// 1744 /*********************************************************************
// 1745  * @fn          ZDP_MgmtNwkUpdateNotify
// 1746  *
// 1747  * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
// 1748  *              function sends a unicast message.
// 1749  *
// 1750  * @param       dstAddr - destination address of the message
// 1751  * @param       status - message status (ZDP_SUCCESS or other)
// 1752  * @param       scannedChannels - List of channels scanned by the request
// 1753  * @param       totalTransmissions - Total transmissions
// 1754  * @param       transmissionFailures - Sum of transmission failures
// 1755  * @param       listCount - Number of records contained in the energyValues list
// 1756  * @param       energyValues - List of descriptors, one for each of ListCount,
// 1757  *                             of the enegry detect descriptors
// 1758  * @param       txOptions - Transmit options
// 1759  * @param       securityEnable - Security options
// 1760  *
// 1761  * @return      afStatus_t
// 1762  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1763 afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtNwkUpdateNotify:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function ZDP_MgmtNwkUpdateNotify
        CODE
// 1764                                     uint8 status, uint32 scannedChannels,
// 1765                                     uint16 totalTransmissions, uint16 transmissionFailures,
// 1766                                     uint8 listCount, uint8 *energyValues, uint8 txOptions,
// 1767                                     uint8 securityEnable )
// 1768 {
        FUNCALL ZDP_MgmtNwkUpdateNotify, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateNotify, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateNotify, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateNotify, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateNotify, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     ?V15,R4
        MOV     ?V11,R5
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 1769   uint8 *buf;
// 1770   uint8 *pBuf;
// 1771   uint8 len;
// 1772 
// 1773   (void)securityEnable;  // Intentionally unreferenced parameter
// 1774 
// 1775   // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
// 1776   len = 1 + 4 + 2 + 2 + 1 + listCount;
        MOV     A,#0xa
        ADD     A,?V11
        MOV     ?V14,A
// 1777 
// 1778   buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V14
        MOV     R1,#0x0
        MOV     A,R0
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     ?V12,?V8
        MOV     ?V13,?V9
// 1779   if ( buf == NULL )
        MOV     A,?V12
        ORL     A,?V13
        JNZ     ??ZDP_MgmtNwkUpdateNotify_0
// 1780   {
// 1781     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
// 1782   }
// 1783 
// 1784   pBuf = buf+1;
??ZDP_MgmtNwkUpdateNotify_0:
        MOV     DPL,?V12
        MOV     DPH,?V13
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1785 
// 1786   *pBuf++ = status;
        MOV     A,?V15
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1787 
// 1788   pBuf = osal_buffer_uint32( pBuf, scannedChannels );
        ; Setup parameters for call to function osal_buffer_uint32
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R6,?V8
        MOV     R7,?V9
// 1789 
// 1790   *pBuf++ = LO_UINT16( totalTransmissions );
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1791   *pBuf++ = HI_UINT16( totalTransmissions );
        MOV     R0,?V2
        MOV     R1,?V3
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1792 
// 1793   *pBuf++ = LO_UINT16( transmissionFailures );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1794   *pBuf++ = HI_UINT16( transmissionFailures );
        MOV     R0,?V0
        MOV     R1,?V1
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1795 
// 1796   *pBuf++ = listCount;
        MOV     A,?V11
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1797 
// 1798   if ( listCount > 0 )
        MOV     A,?V11
        JZ      ??ZDP_MgmtNwkUpdateNotify_2
// 1799     osal_memcpy( pBuf, energyValues, listCount );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x23
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,?V11
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1800 
// 1801   FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
??ZDP_MgmtNwkUpdateNotify_2:
        MOV     DPL,?V12
        MOV     DPH,?V13
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPTR,#ZDP_TmpBuf
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#ZDP_TxOptions
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     ?V8,#0x38
        MOV     ?V9,#-0x80
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R1,?V14
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        MOV     ?V10,A
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V12
        MOV     R3,?V13
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV     DPTR,#ZDP_TmpBuf
        MOV     A,#(ZDP_Buf + 1) & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
        MOVX    @DPTR,A
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     R1,?V10
??ZDP_MgmtNwkUpdateNotify_1:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
// 1802 }
          CFI EndBlock cfiBlock30
// 1803 
// 1804 /*********************************************************************
// 1805  * Functions to register for ZDO Over-the-air messages
// 1806  */
// 1807 
// 1808 /*********************************************************************
// 1809  * @fn          ZDO_RegisterForZDOMsg
// 1810  *
// 1811  * @brief       Call this function to register of an incoming over
// 1812  *              the air ZDO message - probably a response message
// 1813  *              but requests can also be received.
// 1814  *              Messages are delivered to the task with ZDO_CB_MSG
// 1815  *              as the message ID.
// 1816  *
// 1817  * @param       taskID - Where you would like the message delivered
// 1818  * @param       clusterID - What message?
// 1819  *                          ZDO_ALL_MSGS_CLUSTERID - all responses
// 1820  *                          and device announce
// 1821  *
// 1822  * @return      ZSuccess - successful, ZMemError if not
// 1823  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1824 ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
ZDO_RegisterForZDOMsg:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function ZDO_RegisterForZDOMsg
        CODE
// 1825 {
        FUNCALL ZDO_RegisterForZDOMsg, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V6,R1
        MOV     ?V4,R2
        MOV     ?V5,R3
// 1826   ZDO_MsgCB_t *pList;
// 1827   ZDO_MsgCB_t *pLast;
// 1828   ZDO_MsgCB_t *pNew;
// 1829 
// 1830   // Look for duplicate
// 1831   pList = pLast = zdoMsgCBs;
        MOV     DPTR,#zdoMsgCBs
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R6,?V2
        MOV     R7,?V3
// 1832   while ( pList )
??ZDO_RegisterForZDOMsg_0:
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDO_RegisterForZDOMsg_1
// 1833   {
// 1834     if ( pList->taskID == taskID && pList->clusterID == clusterID )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V6
        JNZ     ??ZDO_RegisterForZDOMsg_2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V4
        JNZ     ??ZDO_RegisterForZDOMsg_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V5
??ZDO_RegisterForZDOMsg_3:
        JNZ     ??ZDO_RegisterForZDOMsg_2
// 1835       return ( ZSuccess );
        MOV     R1,#0x0
        LJMP    ??ZDO_RegisterForZDOMsg_4 & 0xFFFF
// 1836     pLast = pList;
??ZDO_RegisterForZDOMsg_2:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     ?V2,R0
        MOV     ?V3,R1
// 1837     pList = (ZDO_MsgCB_t *)pList->next;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        SJMP    ??ZDO_RegisterForZDOMsg_0
// 1838   }
// 1839 
// 1840   // Add to the list
// 1841   pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
??ZDO_RegisterForZDOMsg_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     ?V0,?V8
        MOV     ?V1,?V9
// 1842   if ( pNew )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDO_RegisterForZDOMsg_5
// 1843   {
// 1844     pNew->taskID = taskID;
        MOV     A,?V6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1845     pNew->clusterID = clusterID;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V5
        MOVX    @DPTR,A
// 1846     pNew->next = NULL;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1847     if ( zdoMsgCBs )
        MOV     DPTR,#zdoMsgCBs
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_RegisterForZDOMsg_6
// 1848     {
// 1849       pLast->next = pNew;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
        SJMP    ??ZDO_RegisterForZDOMsg_7
// 1850     }
// 1851     else
// 1852       zdoMsgCBs = pNew;
??ZDO_RegisterForZDOMsg_6:
        MOV     DPTR,#zdoMsgCBs
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
// 1853     return ( ZSuccess );
??ZDO_RegisterForZDOMsg_7:
        MOV     R1,#0x0
        SJMP    ??ZDO_RegisterForZDOMsg_4
// 1854   }
// 1855   else
// 1856     return ( ZMemError );
??ZDO_RegisterForZDOMsg_5:
        MOV     R1,#0x10
??ZDO_RegisterForZDOMsg_4:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
// 1857 }
          CFI EndBlock cfiBlock31
// 1858 
// 1859 /*********************************************************************
// 1860  * @fn          ZDO_RemoveRegisteredCB
// 1861  *
// 1862  * @brief       Call this function if you don't want to receive the
// 1863  *              incoming message.
// 1864  *
// 1865  * @param       taskID - Where the messages are being delivered.
// 1866  * @param       clusterID - What message?
// 1867  *
// 1868  * @return      ZSuccess - successful, ZFailure if not found
// 1869  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1870 ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
ZDO_RemoveRegisteredCB:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function ZDO_RemoveRegisteredCB
        CODE
// 1871 {
        FUNCALL ZDO_RemoveRegisteredCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V4,R1
        MOV     ?V2,R2
        MOV     ?V3,R3
// 1872   ZDO_MsgCB_t *pList;
// 1873   ZDO_MsgCB_t *pLast = NULL;
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
// 1874 
// 1875   pList = zdoMsgCBs;
        MOV     DPTR,#zdoMsgCBs
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
// 1876   while ( pList )
??ZDO_RemoveRegisteredCB_0:
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZDO_RemoveRegisteredCB_1 & 0xFFFF
// 1877   {
// 1878     if ( pList->taskID == taskID && pList->clusterID == clusterID )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V4
        JNZ     ??ZDO_RemoveRegisteredCB_2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V2
        JNZ     ??ZDO_RemoveRegisteredCB_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V3
??ZDO_RemoveRegisteredCB_3:
        JNZ     ??ZDO_RemoveRegisteredCB_2
// 1879     {
// 1880       if ( pLast )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDO_RemoveRegisteredCB_4
// 1881       {
// 1882         // remove this one from the linked list
// 1883         pLast->next = pList->next;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        SJMP    ??ZDO_RemoveRegisteredCB_5
// 1884       }
// 1885       else if ( pList->next )
??ZDO_RemoveRegisteredCB_4:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_RemoveRegisteredCB_6
// 1886       {
// 1887         // remove the first one from the linked list
// 1888         zdoMsgCBs = pList->next;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#zdoMsgCBs
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        SJMP    ??ZDO_RemoveRegisteredCB_5
// 1889       }
// 1890       else
// 1891       {
// 1892         // remove the only item from the list
// 1893         zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
??ZDO_RemoveRegisteredCB_6:
        MOV     DPTR,#zdoMsgCBs
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1894       }
// 1895       osal_mem_free( pList );
??ZDO_RemoveRegisteredCB_5:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1896       return ( ZSuccess );
        MOV     R1,#0x0
        SJMP    ??ZDO_RemoveRegisteredCB_7
// 1897     }
// 1898     pLast = pList;
??ZDO_RemoveRegisteredCB_2:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
// 1899     pList = pList->next;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        LJMP    ??ZDO_RemoveRegisteredCB_0 & 0xFFFF
// 1900   }
// 1901 
// 1902   return ( ZFailure );
??ZDO_RemoveRegisteredCB_1:
        MOV     R1,#0x1
??ZDO_RemoveRegisteredCB_7:
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
// 1903 }
          CFI EndBlock cfiBlock32
// 1904 
// 1905 /*********************************************************************
// 1906  * @fn          ZDO_SendMsgCBs
// 1907  *
// 1908  * @brief       This function sends messages to registered tasks.
// 1909  *              Local to ZDO and shouldn't be called outside of ZDO.
// 1910  *
// 1911  * @param       inMsg - incoming message
// 1912  *
// 1913  * @return      TRUE if sent to at least 1 task, FALSE if not
// 1914  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1915 uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
ZDO_SendMsgCBs:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function ZDO_SendMsgCBs
        CODE
// 1916 {
        FUNCALL ZDO_SendMsgCBs, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SendMsgCBs, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SendMsgCBs, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SendMsgCBs, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1917   uint8 ret = FALSE;
        MOV     ?V7,#0x0
// 1918   ZDO_MsgCB_t *pList = zdoMsgCBs;
        MOV     DPTR,#zdoMsgCBs
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
// 1919   while ( pList )
??ZDO_SendMsgCBs_0:
        MOV     A,?V2
        ORL     A,?V3
        JNZ     $+5
        LJMP    ??ZDO_SendMsgCBs_1 & 0xFFFF
// 1920   {
// 1921     if ( (pList->clusterID == inMsg->clusterID)
// 1922        || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
// 1923            && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_SendMsgCBs_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_SendMsgCBs_2:
        JZ      ??ZDO_SendMsgCBs_3
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??ZDO_SendMsgCBs_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDO_SendMsgCBs_4:
        JZ      $+5
        LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        ANL     A,#0x0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x80
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZDO_SendMsgCBs_3
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x13
        JNZ     ??ZDO_SendMsgCBs_6
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x0
??ZDO_SendMsgCBs_6:
        JZ      $+5
        LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
// 1924     {
// 1925       zdoIncomingMsg_t *msgPtr;
// 1926 
// 1927       // Send the address to the task
// 1928       msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
??ZDO_SendMsgCBs_3:
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,?V0
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        ADD     A,#0x17
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 1929       if ( msgPtr )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
// 1930       {
// 1931         // copy struct
// 1932         osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V0
        MOV     ?V5,?V1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x17
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1933 
// 1934         if ( inMsg->asduLen )
        MOV     A,?V0
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??ZDO_SendMsgCBs_7
// 1935         {
// 1936           msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
        MOV     A,R6
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1937           osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,?V0
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1938         }
// 1939 
// 1940         msgPtr->hdr.event = ZDO_CB_MSG;
??ZDO_SendMsgCBs_7:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x2d
        MOVX    @DPTR,A
// 1941         osal_msg_send( pList->taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        MOV     A,R1
// 1942         ret = TRUE;
        MOV     ?V7,#0x1
// 1943       }
// 1944     }
// 1945     pList = (ZDO_MsgCB_t *)pList->next;
??ZDO_SendMsgCBs_5:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
// 1946   }
// 1947   return ( ret );
??ZDO_SendMsgCBs_1:
        MOV     R1,?V7
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
// 1948 }
          CFI EndBlock cfiBlock33
// 1949 
// 1950 /*********************************************************************
// 1951  * Incoming message processor
// 1952  */
// 1953 
// 1954 /*********************************************************************
// 1955  * @fn          ZDP_IncomingData
// 1956  *
// 1957  * @brief       This function indicates the transfer of a data PDU (ASDU)
// 1958  *              from the APS sub-layer to the ZDO.
// 1959  *
// 1960  * @param       pData - Incoming Message
// 1961  *
// 1962  * @return      none
// 1963  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1964 void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
ZDP_IncomingData:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function ZDP_IncomingData
        CODE
// 1965 {
        FUNCALL ZDP_IncomingData, ZDO_SendMsgCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_IncomingData, ZDApp_InMsgCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1966   uint8 x = 0;
        MOV     ?V0,#0x0
// 1967   uint8 handled;
// 1968   zdoIncomingMsg_t inMsg;
// 1969 
// 1970   inMsg.srcAddr.addrMode = Addr16Bit;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1971   inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1972   inMsg.wasBroadcast = pData->wasBroadcast;
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1973   inMsg.clusterID = pData->clusterId;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1974   inMsg.SecurityUse = pData->SecurityUse;
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1975 
// 1976   inMsg.asduLen = pData->cmd.DataLength-1;
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1977   inMsg.asdu = pData->cmd.Data+1;
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1978   inMsg.TransSeq = pData->cmd.Data[0];
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1979   inMsg.macDestAddr = pData->macDestAddr;
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1980   inMsg.macSrcAddr = pData->macSrcAddr;
        MOV     A,R6
        ADD     A,#0x24
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1981 
// 1982   handled = ZDO_SendMsgCBs( &inMsg );
        ; Setup parameters for call to function ZDO_SendMsgCBs
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
        MOV     A,R1
        MOV     ?V1,A
// 1983 
// 1984 #if (defined MT_ZDO_CB_FUNC)
// 1985 #if !defined MT_TASK
// 1986   if (zgZdoDirectCB)
// 1987 #endif
// 1988   {
// 1989     MT_ZdoDirectCB( pData, &inMsg );
// 1990   }
// 1991 #endif
// 1992 
// 1993   while ( zdpMsgProcs[x].clusterID != 0xFFFF )
??ZDP_IncomingData_0:
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x4
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x4
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#zdpMsgProcs & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(zdpMsgProcs >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??ZDP_IncomingData_1
        MOV     A,#-0x1
        XRL     A,R1
??ZDP_IncomingData_1:
        JZ      ??ZDP_IncomingData_2
// 1994   {
// 1995     if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x4
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x4
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#zdpMsgProcs & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(zdpMsgProcs >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDP_IncomingData_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDP_IncomingData_3:
        JNZ     ??ZDP_IncomingData_4
// 1996     {
// 1997       zdpMsgProcs[x].pFn( &inMsg );
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x4
        MUL     AB
        XCH     A,R0
        MOV     R4,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,#0x4
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     A,#(zdpMsgProcs + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((zdpMsgProcs + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     DPH,A
        POP     DPL
          CFI CFA_SP SP+0
        LCALL   ?CALL_IND
// 1998       return;
        SJMP    ??ZDP_IncomingData_5
// 1999     }
// 2000     x++;
??ZDP_IncomingData_4:
        INC     ?V0
        LJMP    ??ZDP_IncomingData_0 & 0xFFFF
// 2001   }
// 2002 
// 2003   // Handle unhandled messages
// 2004   if ( !handled )
??ZDP_IncomingData_2:
        MOV     A,?V1
        JNZ     ??ZDP_IncomingData_5
// 2005     ZDApp_InMsgCB( &inMsg );
        ; Setup parameters for call to function ZDApp_InMsgCB
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
// 2006 }
??ZDP_IncomingData_5:
        MOV     A,#0x17
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock34

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDP_TmpBuf>`:
        DATA16
        DW ZDP_Buf + 1H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??fillAndSend::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    fillAndSend

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_SendData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_SendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_NWKAddrOfInterestReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_NWKAddrOfInterestReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_NwkAddrReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_NwkAddrReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_IEEEAddrReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_IEEEAddrReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MatchDescReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MatchDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_SimpleDescReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_SimpleDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_UserDescSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_UserDescSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_ServerDiscReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_ServerDiscReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_DeviceAnnce::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_DeviceAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_EndDeviceTimeoutReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_EndDeviceTimeoutReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zdpProcessAddrReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zdpProcessAddrReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_NodeDescMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_NodeDescMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_PowerDescMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_PowerDescMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_SimpleDescMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_SimpleDescMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_EPRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_EPRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_UserDescRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_UserDescRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_ServerDiscRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_ServerDiscRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_GenericRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_GenericRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_EndDeviceBindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_EndDeviceBindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_BindUnbindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_BindUnbindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtNwkDiscReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtNwkDiscReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtDirectJoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtDirectJoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtPermitJoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtPermitJoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtLeaveReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtLeaveReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtNwkUpdateReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtNwkUpdateReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtNwkDiscRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtNwkDiscRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtLqiRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtLqiRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtRtgRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtRtgRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtBindRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtBindRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtNwkUpdateNotify::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtNwkUpdateNotify

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_RegisterForZDOMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_RegisterForZDOMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_RemoveRegisteredCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_RemoveRegisteredCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SendMsgCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SendMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_IncomingData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_IncomingData

        END
// 2007 
// 2008 /*********************************************************************
// 2009 *********************************************************************/
// 2010 
// 
// 11 794 bytes in segment BANKED_CODE
//    210 bytes in segment BANK_RELAYS
//     53 bytes in segment CODE_C
//      2 bytes in segment XDATA_I
//      2 bytes in segment XDATA_ID
//     84 bytes in segment XDATA_Z
// 
// 12 059 bytes of CODE  memory
//     86 bytes of XDATA memory
//
//Errors: none
//Warnings: none
