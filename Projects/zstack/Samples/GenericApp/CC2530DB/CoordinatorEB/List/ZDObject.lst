###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  17:49:25
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDObject.c" -D ZTOOL_P1 -D MT_TASK -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_RESTORE -D
#        NV_INIT -D NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D OPEN_FCS -lC
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\ZDObject.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\ZDObject.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2014-08-04 18:42:36 -0700 (Mon, 04 Aug 2014) $
      4            Revision:       $Revision: 39656 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          /*********************************************************************
     84           * TYPEDEFS
     85           */
     86          #if defined ( REFLECTOR )
     87          typedef struct
     88          {
     89            byte SrcTransSeq;
     90            zAddrType_t SrcAddr;
     91            uint16 LocalCoordinator;
     92            byte epIntf;
     93            uint16 ProfileID;
     94            byte numInClusters;
     95            uint16 *inClusters;
     96            byte numOutClusters;
     97            uint16 *outClusters;
     98            byte SecurityUse;
     99            byte status;
    100          } ZDO_EDBind_t;
    101          #endif // defined ( REFLECTOR )
    102          
    103          enum
    104          {
    105            ZDMATCH_INIT,           // Initialized
    106            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    107            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    108          };
    109          
    110          enum
    111          {
    112            ZDMATCH_SENDING_NOT,
    113            ZDMATCH_SENDING_UNBIND,
    114            ZDMATCH_SENDING_BIND
    115          };
    116          
    117          /*********************************************************************
    118           * GLOBAL VARIABLES
    119           */
    120          
    121          /*********************************************************************
    122           * EXTERNAL VARIABLES
    123           */
    124          
    125          /*********************************************************************
    126           * EXTERNAL FUNCTIONS
    127           */
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    133          
    134          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    136          #endif
    137          
    138          #if defined ( MANAGED_SCAN )
    139            uint32 managedScanNextChannel = 0;
    140            uint32 managedScanChannelMask = 0;
    141            uint8  managedScanTimesPerChannel = 0;
    142          #endif
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          int16 zdpExternalStateTaskID = -1;
   \                     zdpExternalStateTaskID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zdpExternalStateTaskID>`
   \   000002                REQUIRE __INIT_XDATA_I
    149          
    150          /*********************************************************************
    151           * LOCAL FUNCTIONS
    152           */
    153          static void ZDODeviceSetup( void );
    154          #ifdef PANID_INCREASE
    155          static void ZDOChannelScan( void );  //chaokw
    156          #endif
    157          #if defined ( MANAGED_SCAN )
    158            static void ZDOManagedScan_Next( void );
    159          #endif
    160          #if defined ( REFLECTOR )
    161            static void ZDO_RemoveEndDeviceBind( void );
    162            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    163          #endif
    164          #if ( ZG_BUILD_COORDINATOR_TYPE )
    165            static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    166                                                 byte numList2, uint16 *list2, uint16 *pMatches );
    167            static void ZDO_RemoveMatchMemory( void );
    168            static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    169            static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    170          #endif
    171          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    172          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    173          
    174          /*********************************************************************
    175           * @fn          ZDO_Init
    176           *
    177           * @brief       ZDObject and ZDProfile initialization.
    178           *
    179           * @param       none
    180           *
    181           * @return      none
    182           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    183          void ZDO_Init( void )
   \                     ZDO_Init:
    184          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    185            // Initialize ZD items
    186            #if defined ( REFLECTOR )
    187            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   7400         MOV     A,#0x0
   \   00000D   F0           MOVX    @DPTR,A
    188            #endif
    189          
    190            // Initialize default ZDO_UseExtendedPANID to the APS one.
    191            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000E                ; Setup parameters for call to function sAddrExtCpy
   \   00000E   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   000010   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   000012   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000014   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000016   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    192          
    193            // Setup the device - type of device to create.
    194            ZDODeviceSetup();
   \   000019                ; Setup parameters for call to function ZDODeviceSetup
   \   000019   12....       LCALL   `??ZDODeviceSetup::?relay`; Banked call to: ZDODeviceSetup
    195          }
   \   00001C   D083         POP     DPH
   \   00001E   D082         POP     DPL
   \   000020   02....       LJMP    ?BRET
    196          
    197          #if defined ( MANAGED_SCAN )
    198          /*********************************************************************
    199           * @fn      ZDOManagedScan_Next()
    200           *
    201           * @brief   Setup a managed scan.
    202           *
    203           * @param   none
    204           *
    205           * @return  none
    206           */
    207          static void ZDOManagedScan_Next( void )
    208          {
    209            // Is it the first time
    210            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    211            {
    212              // Setup the defaults
    213              managedScanNextChannel  = 1;
    214          
    215              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    216                managedScanNextChannel <<= 1;
    217          
    218              managedScanChannelMask = managedScanNextChannel;
    219              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    220            }
    221            else
    222            {
    223              // Do we need to go to the next channel
    224              if ( managedScanTimesPerChannel == 0 )
    225              {
    226                // Find next active channel
    227                managedScanChannelMask  = managedScanNextChannel;
    228                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    229              }
    230              else
    231              {
    232                managedScanTimesPerChannel--;
    233          
    234                if ( managedScanTimesPerChannel == 0 )
    235                {
    236                  managedScanNextChannel  <<= 1;
    237                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    238                    managedScanNextChannel <<= 1;
    239          
    240                  if ( managedScanNextChannel == 0 )
    241                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    242                }
    243              }
    244            }
    245          }
    246          #endif // MANAGED_SCAN
    247          
    248          /*********************************************************************
    249           * @fn      ZDODeviceSetup()
    250           *
    251           * @brief   Call set functions depending on the type of device compiled.
    252           *
    253           * @param   none
    254           *
    255           * @return  none
    256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          static void ZDODeviceSetup( void )
   \                     ZDODeviceSetup:
    258          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    259            if ( ZG_BUILD_COORDINATOR_TYPE )
    260            {
    261              NLME_CoordinatorInit();
   \   000004                ; Setup parameters for call to function NLME_CoordinatorInit
   \   000004   12....       LCALL   `??NLME_CoordinatorInit::?relay`; Banked call to: NLME_CoordinatorInit
    262            }
    263          
    264          #if defined ( REFLECTOR )
    265            APS_ReflectorInit();
   \   000007                ; Setup parameters for call to function APS_ReflectorInit
   \   000007   12....       LCALL   `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
    266          #endif
    267          
    268            if ( ZG_BUILD_JOINING_TYPE )
    269            {
    270              NLME_DeviceJoiningInit();
    271            }
    272          }
   \   00000A   D083         POP     DPH
   \   00000C   D082         POP     DPL
   \   00000E   02....       LJMP    ?BRET
    273          
    274          #ifdef PANID_INCREASE
    275          /*********************************************************************
    276           * @fn      ZDOChannelScan()
    277           *
    278           * @brief   ZDOChannelScan.
    279           *
    280           * @param   none
    281           *
    282           * @return  none
    283           */
    284          static void ZDOChannelScan( void )
    285          {
    286          	static uint8 scanTimesPerChannel = 0;
    287          	static uint32 scanChannel = 0;
    288          
    289          	if (0 == scanTimesPerChannel++)
    290          	{
    291          		while (0 == (DEFAULT_CHANLIST & scanChannel))
    292          		{
    293          			scanChannel <<= 1;
    294          			if (0 == scanChannel)
    295          			{
    296          			 	// Default channel 0x0B
    297          				scanChannel = 0x00000800;
    298          			}
    299          		}
    300          
    301          		zgDefaultChannelList = DEFAULT_CHANLIST & scanChannel;
    302          		// Error channel
    303          		if (0 == zgDefaultChannelList)
    304          		{
    305          			zgDefaultChannelList = DEFAULT_CHANLIST;
    306          		}
    307          
    308          		if (0 == scanChannel)
    309          		{
    310          			// Default channel 0x0B
    311          			scanChannel = 0x00000800;
    312          		}
    313          		else
    314          		{
    315          		 	// Next scan channel
    316          			scanChannel <<= 1;
    317          		}
    318          	}
    319          	else if (SCAN_TIMES_PER_CHANNEL == scanTimesPerChannel)
    320          	{
    321          		scanTimesPerChannel = 0;
    322          	}
    323          }
    324          #endif
    325          
    326          /*********************************************************************
    327           * @fn          ZDO_StartDevice
    328           *
    329           * @brief       This function starts a device in a network.
    330           *
    331           * @param       logicalType     - Device type to start
    332           *              startMode       - indicates mode of device startup
    333           *              beaconOrder     - indicates time betwen beacons
    334           *              superframeOrder - indicates length of active superframe
    335           *
    336           * @return      none
    337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    338          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V2,R4
    340            ZStatus_t ret;
    341          #if defined ( ZIGBEE_FREQ_AGILITY )
    342            static uint8 discRetries = 0;
    343          #endif
    344          #if defined ( ZIGBEE_COMMISSIONING )
    345            static uint8 scanCnt = 0;
    346          #endif
    347          
    348            ret = ZUnsupportedMode;
   \   00000D   7E12         MOV     R6,#0x12
    349          
    350            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
   \   00000F   E5..         MOV     A,?V0
   \   000011   6003         JZ      $+5
   \   000013   02....       LJMP    ??ZDO_StartDevice_0 & 0xFFFF
    351            {
    352              //chaokw panid
    353              if ((_NIB.nwkPanId >= (ZDAPP_CONFIG_PAN_ID + PANID_INCREASE_CNT))
    354                || (zgConfigPANID >= (ZDAPP_CONFIG_PAN_ID + PANID_INCREASE_CNT)))
   \   000016   90....       MOV     DPTR,#_NIB + 33
   \   000019   C3           CLR     C
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   948B         SUBB    A,#-0x75
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   9400         SUBB    A,#0x0
   \   000021   500D         JNC     ??ZDO_StartDevice_1
   \   000023   90....       MOV     DPTR,#zgConfigPANID
   \   000026   C3           CLR     C
   \   000027   E0           MOVX    A,@DPTR
   \   000028   948B         SUBB    A,#-0x75
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   9400         SUBB    A,#0x0
   \   00002E   401A         JC      ??ZDO_StartDevice_2
    355              {
    356                _NIB.nwkPanId = ZDAPP_CONFIG_PAN_ID;
   \                     ??ZDO_StartDevice_1:
   \   000030   90....       MOV     DPTR,#_NIB + 33
   \   000033   7485         MOV     A,#-0x7b
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   7400         MOV     A,#0x0
   \   000039   F0           MOVX    @DPTR,A
    357                zgConfigPANID = _NIB.nwkPanId;
   \   00003A   90....       MOV     DPTR,#_NIB + 33
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   90....       MOV     DPTR,#zgConfigPANID
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    358              }
    359              if ( startMode == MODE_HARD )
   \                     ??ZDO_StartDevice_2:
   \   00004A   7402         MOV     A,#0x2
   \   00004C   65..         XRL     A,?V1
   \   00004E   7042         JNZ     ??ZDO_StartDevice_3
    360              {
    361                devState = DEV_COORD_STARTING;
   \   000050   90....       MOV     DPTR,#devState
   \   000053   7408         MOV     A,#0x8
   \   000055   F0           MOVX    @DPTR,A
    362                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    363                                                    zgDefaultStartingScanDuration, beaconOrder,
    364                                                    superframeOrder, false );
   \   000056                ; Setup parameters for call to function NLME_NetworkFormationRequest
   \   000056   75..00       MOV     ?V3,#0x0
   \   000059   78..         MOV     R0,#?V3
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005E   E5..         MOV     A,?V2
   \   000060   F5..         MOV     ?V3,A
   \   000062   78..         MOV     R0,#?V3
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000067   EF           MOV     A,R7
   \   000068   F5..         MOV     ?V3,A
   \   00006A   78..         MOV     R0,#?V3
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006F   90....       MOV     DPTR,#zgDefaultChannelList
   \   000072   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000075   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F9           MOV     R1,A
   \   00007A   7C..         MOV     R4,#zgApsUseExtendedPANID & 0xff
   \   00007C   7D..         MOV     R5,#(zgApsUseExtendedPANID >> 8) & 0xff
   \   00007E   90....       MOV     DPTR,#zgConfigPANID
   \   000081   E0           MOVX    A,@DPTR
   \   000082   FA           MOV     R2,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FB           MOV     R3,A
   \   000086   12....       LCALL   `??NLME_NetworkFormationRequest::?relay`; Banked call to: NLME_NetworkFormationRequest
   \   000089   7407         MOV     A,#0x7
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   E9           MOV     A,R1
   \   00008F   FE           MOV     R6,A
   \   000090   8024         SJMP    ??ZDO_StartDevice_0
    365              }
    366              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_3:
   \   000092   7401         MOV     A,#0x1
   \   000094   65..         XRL     A,?V1
   \   000096   7013         JNZ     ??ZDO_StartDevice_4
    367              {
    368                // Just start the coordinator
    369                devState = DEV_COORD_STARTING;
   \   000098   90....       MOV     DPTR,#devState
   \   00009B   7408         MOV     A,#0x8
   \   00009D   F0           MOVX    @DPTR,A
    370                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
   \   00009E                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00009E   7B00         MOV     R3,#0x0
   \   0000A0   EF           MOV     A,R7
   \   0000A1   FA           MOV     R2,A
   \   0000A2   EF           MOV     A,R7
   \   0000A3   F9           MOV     R1,A
   \   0000A4   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   0000A7   E9           MOV     A,R1
   \   0000A8   FE           MOV     R6,A
   \   0000A9   800B         SJMP    ??ZDO_StartDevice_0
    371              }
    372              else
    373              {
    374          #if defined( LCD_SUPPORTED )
    375                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
   \                     ??ZDO_StartDevice_4:
   \   0000AB                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000AB   7C..         MOV     R4,#`?<Constant "MODE unknown">` & 0xff
   \   0000AD   7D..         MOV     R5,#(`?<Constant "MODE unknown">` >> 8) & 0xff
   \   0000AF   7A..         MOV     R2,#`?<Constant "StartDevice ERR">` & 0xff
   \   0000B1   7B..         MOV     R3,#(`?<Constant "StartDevice ERR">` >> 8) & 0xff
   \   0000B3   12....       LCALL   `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    376          #endif
    377              }
    378            }
    379          
    380            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
    381            {
    382              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
    383              {
    384                devState = DEV_NWK_DISC;
    385          
    386            #if defined( MANAGED_SCAN )
    387                ZDOManagedScan_Next();
    388                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    389            #else
    390                //ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
    391                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, BEACON_ORDER_15_MSEC );  //chaokw
    392              #if defined ( ZIGBEE_FREQ_AGILITY )
    393                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    394                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    395                {
    396                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    397                  // change will not be recieved. On these devices or routers that have
    398                  // lost the network, an active scan shall be conducted on the Default
    399                  // Channel list using the extended PANID to find the network. If the
    400                  // extended PANID isn't found using the Default Channel list, an scan
    401                  // should be completed using all channels.
    402                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    403                }
    404              #endif // ZIGBEE_FREQ_AGILITY
    405              #if defined ( ZIGBEE_COMMISSIONING )
    406                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
    407                {
    408                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    409                  // application specific means, the device shall conduct an active scan
    410                  // on the Default Channel list and join the PAN with the same
    411                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    412                  // on all channels.
    413                  // When devices rejoin the network and the PAN is not found from
    414                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    415                }
    416              #endif // ZIGBEE_COMMISSIONING
    417            #endif
    418              }
    419              else if ( startMode == MODE_RESUME )
    420              {
    421                if ( logicalType == NODETYPE_ROUTER )
    422                {
    423                  ZMacScanCnf_t scanCnf;
    424                  devState = DEV_NWK_ORPHAN;
    425          
    426                  /* if router and nvram is available, fake successful orphan scan */
    427                  scanCnf.hdr.Status = ZSUCCESS;
    428                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
    429                  scanCnf.UnscannedChannels = 0;
    430                  scanCnf.ResultListSize = 0;
    431                  nwk_ScanJoiningOrphan(&scanCnf);
    432          
    433                  ret = ZSuccess;
    434                }
    435                else
    436                {
    437                  devState = DEV_NWK_ORPHAN;
    438                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    439                                                zgDefaultStartingScanDuration );
    440                }
    441              }
    442              else
    443              {
    444          #if defined( LCD_SUPPORTED )
    445                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    446          #endif
    447              }
    448          
    449          #ifdef PANID_INCREASE  //chaokw panid
    450          	if ( ret == ZSuccess )
    451          	{
    452          		ZDOChannelScan();
    453          		if ( zgScanNwkCount )
    454          		{
    455          			zgConfigPANID = _NIB.nwkPanId = zgConfigPANID_Table[(zgScanNwkCount - 1) / ZG_NWK_DISCOVERY_COUNT];
    456          		}
    457          		else
    458          		{
    459          			zgConfigPANID = _NIB.nwkPanId = zgConfigPANID_Table[zgScanNwkCount / ZG_NWK_DISCOVERY_COUNT];
    460          		}
    461          		if ( zgScanNwkCount++ >= PANID_INCREASE_CNT * ZG_NWK_DISCOVERY_COUNT )
    462          		{
    463          			zgScanNwkCount = 0;
    464          		}
    465          	}
    466          #endif
    467          
    468            }
    469          
    470            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_0:
   \   0000B6   EE           MOV     A,R6
   \   0000B7   6018         JZ      ??ZDO_StartDevice_5
    471            {
    472              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \   0000B9                ; Setup parameters for call to function osal_start_timerEx
   \   0000B9   90....       MOV     DPTR,#__Constant_3e8
   \   0000BC   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000BF   7A01         MOV     R2,#0x1
   \   0000C1   7B00         MOV     R3,#0x0
   \   0000C3   90....       MOV     DPTR,#ZDAppTaskID
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F9           MOV     R1,A
   \   0000C8   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000CB   7404         MOV     A,#0x4
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D0   E9           MOV     A,R1
    473            }
    474          }
   \                     ??ZDO_StartDevice_5:
   \   0000D1   7F04         MOV     R7,#0x4
   \   0000D3   02....       LJMP    ?BANKED_LEAVE_XDATA
    475          
    476          /**************************************************************************************************
    477           * @fn          zdoSendStateChangeMsg
    478           *
    479           * @brief       Helper function for ZDO_UpdateNwkStatus.
    480           *
    481           * input parameters
    482           *
    483           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    484           * @param       state - The current device state.
    485           *
    486           * output parameters
    487           *
    488           * None.
    489           *
    490           * @return      None.
    491           **************************************************************************************************
    492           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    493          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
   \                     zdoSendStateChangeMsg:
    494          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   8A..         MOV     ?V0,R2
    495            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
   \   00000E                ; Setup parameters for call to function osal_msg_find
   \   00000E   7AD1         MOV     R2,#-0x2f
   \   000010   A9..         MOV     R1,?V0
   \   000012   12....       LCALL   `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   000015   8A..         MOV     ?V2,R2
   \   000017   8B..         MOV     ?V3,R3
   \   000019   AE..         MOV     R6,?V2
   \   00001B   AF..         MOV     R7,?V3
    496          
    497            if (NULL == pMsg)
   \   00001D   EE           MOV     A,R6
   \   00001E   4F           ORL     A,R7
   \   00001F   704C         JNZ     ??zdoSendStateChangeMsg_0
    498            {
    499              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
   \   000021                ; Setup parameters for call to function osal_msg_allocate
   \   000021   7A02         MOV     R2,#0x2
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000028   8A..         MOV     ?V2,R2
   \   00002A   8B..         MOV     ?V3,R3
   \   00002C   AE..         MOV     R6,?V2
   \   00002E   AF..         MOV     R7,?V3
   \   000030   EE           MOV     A,R6
   \   000031   4F           ORL     A,R7
   \   000032   700F         JNZ     ??zdoSendStateChangeMsg_1
    500              {
    501                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    502                // try again later when more Heap may be available.
    503                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
   \   000034                ; Setup parameters for call to function osal_set_event
   \   000034   7A10         MOV     R2,#0x10
   \   000036   7B00         MOV     R3,#0x0
   \   000038   90....       MOV     DPTR,#ZDAppTaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000040   E9           MOV     A,R1
   \   000041   8036         SJMP    ??zdoSendStateChangeMsg_2
    504              }
    505              else
    506              {
    507                pMsg->event = ZDO_STATE_CHANGE;
   \                     ??zdoSendStateChangeMsg_1:
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   74D1         MOV     A,#-0x2f
   \   000049   F0           MOVX    @DPTR,A
    508                pMsg->status = state;
   \   00004A   E5..         MOV     A,?V1
   \   00004C   C0E0         PUSH    A
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   A3           INC     DPTR
   \   000053   D0E0         POP     A
   \   000055   F0           MOVX    @DPTR,A
    509          
    510                (void)osal_msg_send(taskId, (uint8 *)pMsg);
   \   000056                ; Setup parameters for call to function osal_msg_send
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   A9..         MOV     R1,?V0
   \   00005C   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00005F   E9           MOV     A,R1
   \   000060   C0E0         PUSH    A
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   D0E0         POP     A
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   800C         SJMP    ??zdoSendStateChangeMsg_2
    511              }
    512            }
    513            else
    514            {
    515              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    516              pMsg->status = state;
   \                     ??zdoSendStateChangeMsg_0:
   \   00006D   E5..         MOV     A,?V1
   \   00006F   C0E0         PUSH    A
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   A3           INC     DPTR
   \   000076   D0E0         POP     A
   \   000078   F0           MOVX    @DPTR,A
    517            }
    518          }
   \                     ??zdoSendStateChangeMsg_2:
   \   000079   7401         MOV     A,#0x1
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007E   7F04         MOV     R7,#0x4
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA
    519          
    520          /**************************************************************************************************
    521           * @fn          ZDO_UpdateNwkStatus
    522           *
    523           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    524           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    525           *              than one registered EndPoint, it will only receive one notification per state
    526           *              change. Although the device may go through a sequence of state changes, the
    527           *              Application task may only receive notification of the final, steady-state state
    528           *              because it has the lowest priority and never even runs to receive the intermediate
    529           *              state change notifications.
    530           *
    531           * input parameters
    532           *
    533           * @param       state - The current device state.
    534           *
    535           * output parameters
    536           *
    537           * None.
    538           *
    539           * @return      None.
    540           **************************************************************************************************
    541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    542          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    543          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    544            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FF           MOV     R7,A
    545          
    546          #if defined MT_ZDO_CB_FUNC
    547            if ( zdpExternalStateTaskID == -1 )
    548            {
    549              zdpExternalStateTaskID = MT_TaskID;
    550            }
    551          #endif
    552          
    553            while (pItem != NULL)
   \                     ??ZDO_UpdateNwkStatus_0:
   \   00000F   EE           MOV     A,R6
   \   000010   4F           ORL     A,R7
   \   000011   603E         JZ      ??ZDO_UpdateNwkStatus_1
    554            {
    555              if (pItem->epDesc->endPoint != ZDO_EP)
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F583         MOV     DPH,A
   \   00001F   8882         MOV     DPL,R0
   \   000021   E0           MOVX    A,@DPTR
   \   000022   601E         JZ      ??ZDO_UpdateNwkStatus_2
    556              {
    557                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \   000024                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F8           MOV     R0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F583         MOV     DPH,A
   \   000030   8882         MOV     DPL,R0
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F583         MOV     DPH,A
   \   000039   8882         MOV     DPL,R0
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   A9..         MOV     R1,?V0
   \   00003F   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    558              }
    559          
    560              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   E8           MOV     A,R0
   \   00004C   FE           MOV     R6,A
   \   00004D   E9           MOV     A,R1
   \   00004E   FF           MOV     R7,A
   \   00004F   80BE         SJMP    ??ZDO_UpdateNwkStatus_0
    561            }
    562            
    563            if ( zdpExternalStateTaskID != -1 )
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000051   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   000054   E0           MOVX    A,@DPTR
   \   000055   64FF         XRL     A,#0xff
   \   000057   7004         JNZ     ??ZDO_UpdateNwkStatus_3
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   64FF         XRL     A,#0xff
   \                     ??ZDO_UpdateNwkStatus_3:
   \   00005D   600D         JZ      ??ZDO_UpdateNwkStatus_4
    564            {  
    565              zdoSendStateChangeMsg( state, zdpExternalStateTaskID );
   \   00005F                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   00005F   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FB           MOV     R3,A
   \   000067   A9..         MOV     R1,?V0
   \   000069   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    566            }
    567            
    568            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_4:
   \   00006C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006C   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00006F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000072   EA           MOV     A,R2
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   EB           MOV     A,R3
   \   000076   F0           MOVX    @DPTR,A
    569            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000077                ; Setup parameters for call to function NLME_GetExtAddr
   \   000077   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00007A   8A..         MOV     ?V2,R2
   \   00007C   8B..         MOV     ?V3,R3
   \   00007E   85..82       MOV     DPL,?V2
   \   000081   85..83       MOV     DPH,?V3
    570          }
   \   000084   7F04         MOV     R7,#0x4
   \   000086   02....       LJMP    ?BANKED_LEAVE_XDATA
    571          
    572          #if defined ( REFLECTOR )
    573          /*********************************************************************
    574           * @fn          ZDO_RemoveEndDeviceBind
    575           *
    576           * @brief       Remove the end device bind
    577           *
    578           * @param  none
    579           *
    580           * @return      none
    581           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    582          static void ZDO_RemoveEndDeviceBind( void )
   \                     ZDO_RemoveEndDeviceBind:
    583          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    584            if ( ZDO_EDBind != NULL )
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   607B         JZ      ??ZDO_RemoveEndDeviceBind_0
    585            {
    586              // Free the RAM
    587              if ( ZDO_EDBind->inClusters != NULL )
   \   000010   90....       MOV     DPTR,#ZDO_EDBind
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C8           XCH     A,R0
   \   000018   2410         ADD     A,#0x10
   \   00001A   F582         MOV     DPL,A
   \   00001C   C8           XCH     A,R0
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   E8           MOV     A,R0
   \   000027   49           ORL     A,R1
   \   000028   6019         JZ      ??ZDO_RemoveEndDeviceBind_1
    588              {
    589                osal_mem_free( ZDO_EDBind->inClusters );
   \   00002A                ; Setup parameters for call to function osal_mem_free
   \   00002A   90....       MOV     DPTR,#ZDO_EDBind
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   C8           XCH     A,R0
   \   000032   2410         ADD     A,#0x10
   \   000034   F582         MOV     DPL,A
   \   000036   C8           XCH     A,R0
   \   000037   3400         ADDC    A,#0x0
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    590              }
    591              if ( ZDO_EDBind->outClusters != NULL )
   \                     ??ZDO_RemoveEndDeviceBind_1:
   \   000043   90....       MOV     DPTR,#ZDO_EDBind
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C8           XCH     A,R0
   \   00004B   2413         ADD     A,#0x13
   \   00004D   F582         MOV     DPL,A
   \   00004F   C8           XCH     A,R0
   \   000050   3400         ADDC    A,#0x0
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   6019         JZ      ??ZDO_RemoveEndDeviceBind_2
    592              {
    593                osal_mem_free( ZDO_EDBind->outClusters );
   \   00005D                ; Setup parameters for call to function osal_mem_free
   \   00005D   90....       MOV     DPTR,#ZDO_EDBind
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C8           XCH     A,R0
   \   000065   2413         ADD     A,#0x13
   \   000067   F582         MOV     DPL,A
   \   000069   C8           XCH     A,R0
   \   00006A   3400         ADDC    A,#0x0
   \   00006C   F583         MOV     DPH,A
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FA           MOV     R2,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    594              }
    595              osal_mem_free( ZDO_EDBind );
   \                     ??ZDO_RemoveEndDeviceBind_2:
   \   000076                ; Setup parameters for call to function osal_mem_free
   \   000076   90....       MOV     DPTR,#ZDO_EDBind
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FA           MOV     R2,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    596              ZDO_EDBind = NULL;
   \   000081   90....       MOV     DPTR,#ZDO_EDBind
   \   000084   7400         MOV     A,#0x0
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   7400         MOV     A,#0x0
   \   00008A   F0           MOVX    @DPTR,A
    597            }
    598          }
   \                     ??ZDO_RemoveEndDeviceBind_0:
   \   00008B   D083         POP     DPH
   \   00008D   D082         POP     DPL
   \   00008F   02....       LJMP    ?BRET
    599          #endif // REFLECTOR
    600          
    601          #if defined ( REFLECTOR )
    602          /*********************************************************************
    603           * @fn          ZDO_RemoveEndDeviceBind
    604           *
    605           * @brief       Remove the end device bind
    606           *
    607           * @param  none
    608           *
    609           * @return      none
    610           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    611          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
   \                     ZDO_SendEDBindRsp:
    612          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   7401         MOV     A,#0x1
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EC           MOV     A,R4
   \   000016   C0E0         PUSH    A
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   EA           MOV     A,R2
   \   000022   FE           MOV     R6,A
   \   000023   EB           MOV     A,R3
   \   000024   FF           MOV     R7,A
   \   000025   8D..         MOV     ?V0,R5
    613            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
   \   000027                ; Setup parameters for call to function ZDP_SendData
   \   000027   E5..         MOV     A,?V0
   \   000029   F5..         MOV     ?V1,A
   \   00002B   78..         MOV     R0,#?V1
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP100_8
   \   000035   88..         MOV     ?V2,R0
   \   000037   89..         MOV     ?V3,R1
   \   000039   78..         MOV     R0,#?V2
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   75..20       MOV     ?V2,#0x20
   \   000041   75..80       MOV     ?V3,#-0x80
   \   000044   78..         MOV     R0,#?V2
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   7901         MOV     R1,#0x1
   \   00004B   EE           MOV     A,R6
   \   00004C   FC           MOV     R4,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FD           MOV     R5,A
   \   00004F   7406         MOV     A,#0x6
   \   000051   12....       LCALL   ?XSTACK_DISP101_8
   \   000054   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000057   7405         MOV     A,#0x5
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   E9           MOV     A,R1
    614          
    615          #if defined( LCD_SUPPORTED )
    616            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
   \   00005D                ; Setup parameters for call to function HalLcdWriteString
   \   00005D   7901         MOV     R1,#0x1
   \   00005F   7A..         MOV     R2,#`?<Constant "End Device Bind">` & 0xff
   \   000061   7B..         MOV     R3,#(`?<Constant "End Device Bind">` >> 8) & 0xff
   \   000063   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    617            if ( Status == ZDP_SUCCESS )
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   700B         JNZ     ??ZDO_SendEDBindRsp_0
    618            {
    619              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
   \   00006F                ; Setup parameters for call to function HalLcdWriteString
   \   00006F   7903         MOV     R1,#0x3
   \   000071   7A..         MOV     R2,#`?<Constant "Success Sent">` & 0xff
   \   000073   7B..         MOV     R3,#(`?<Constant "Success Sent">` >> 8) & 0xff
   \   000075   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000078   8009         SJMP    ??ZDO_SendEDBindRsp_1
    620            }
    621            else
    622            {
    623              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
   \                     ??ZDO_SendEDBindRsp_0:
   \   00007A                ; Setup parameters for call to function HalLcdWriteString
   \   00007A   7903         MOV     R1,#0x3
   \   00007C   7A..         MOV     R2,#`?<Constant "Timeout">` & 0xff
   \   00007E   7B..         MOV     R3,#(`?<Constant "Timeout">` >> 8) & 0xff
   \   000080   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    624            }
    625          #endif
    626          
    627          }
   \                     ??ZDO_SendEDBindRsp_1:
   \   000083   7402         MOV     A,#0x2
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   7F04         MOV     R7,#0x4
   \   00008A   02....       LJMP    ?BANKED_LEAVE_XDATA
    628          #endif // REFLECTOR
    629          
    630          #if ( ZG_BUILD_COORDINATOR_TYPE )
    631          /*********************************************************************
    632           * @fn          ZDO_CompareClusterLists
    633           *
    634           * @brief       Compare one list to another list
    635           *
    636           * @param       numList1 - number of items in list 1
    637           * @param       list1 - first list of cluster IDs
    638           * @param       numList2 - number of items in list 2
    639           * @param       list2 - second list of cluster IDs
    640           * @param       pMatches - buffer to put matches
    641           *
    642           * @return      number of matches
    643           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    644          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    645                                    byte numList2, uint16 *list2, uint16 *pMatches )
    646          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V3,R4
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   E8           MOV     A,R0
   \   000018   FC           MOV     R4,A
   \   000019   E9           MOV     A,R1
   \   00001A   FD           MOV     R5,A
   \   00001B   7412         MOV     A,#0x12
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F8           MOV     R0,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   88..         MOV     ?V0,R0
   \   000027   89..         MOV     ?V1,R1
    647            byte x, y;
    648            uint16 z;
    649            byte numMatches = 0;
   \   000029   7900         MOV     R1,#0x0
    650          
    651            // Check the first in against the seconds out
    652            for ( x = 0; x < numList1; x++ )
   \   00002B   7800         MOV     R0,#0x0
   \                     ??ZDO_CompareClusterLists_0:
   \   00002D   E8           MOV     A,R0
   \   00002E   C3           CLR     C
   \   00002F   95..         SUBB    A,?V4
   \   000031   4003         JC      $+5
   \   000033   02....       LJMP    ??ZDO_CompareClusterLists_1 & 0xFFFF
    653            {
    654              for ( y = 0; y < numList2; y++ )
   \   000036   75..00       MOV     ?V2,#0x0
   \                     ??ZDO_CompareClusterLists_2:
   \   000039   E5..         MOV     A,?V2
   \   00003B   C3           CLR     C
   \   00003C   95..         SUBB    A,?V3
   \   00003E   4003         JC      $+5
   \   000040   02....       LJMP    ??ZDO_CompareClusterLists_3 & 0xFFFF
    655              {
    656                z = list2[y];
   \   000043   AA..         MOV     R2,?V2
   \   000045   7B00         MOV     R3,#0x0
   \   000047   EA           MOV     A,R2
   \   000048   75F002       MOV     B,#0x2
   \   00004B   A4           MUL     AB
   \   00004C   CA           XCH     A,R2
   \   00004D   85F0..       MOV     ?V5,B
   \   000050   75F000       MOV     B,#0x0
   \   000053   A4           MUL     AB
   \   000054   25..         ADD     A,?V5
   \   000056   F5..         MOV     ?V5,A
   \   000058   75F002       MOV     B,#0x2
   \   00005B   EB           MOV     A,R3
   \   00005C   A4           MUL     AB
   \   00005D   25..         ADD     A,?V5
   \   00005F   FB           MOV     R3,A
   \   000060   EC           MOV     A,R4
   \   000061   2A           ADD     A,R2
   \   000062   F582         MOV     DPL,A
   \   000064   ED           MOV     A,R5
   \   000065   3B           ADDC    A,R3
   \   000066   F583         MOV     DPH,A
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F5..         MOV     ?V6,A
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F5..         MOV     ?V7,A
    657                if ( list1[x] == z )
   \   00006F   E8           MOV     A,R0
   \   000070   FA           MOV     R2,A
   \   000071   7B00         MOV     R3,#0x0
   \   000073   EA           MOV     A,R2
   \   000074   75F002       MOV     B,#0x2
   \   000077   A4           MUL     AB
   \   000078   CA           XCH     A,R2
   \   000079   85F0..       MOV     ?V5,B
   \   00007C   75F000       MOV     B,#0x0
   \   00007F   A4           MUL     AB
   \   000080   25..         ADD     A,?V5
   \   000082   F5..         MOV     ?V5,A
   \   000084   75F002       MOV     B,#0x2
   \   000087   EB           MOV     A,R3
   \   000088   A4           MUL     AB
   \   000089   25..         ADD     A,?V5
   \   00008B   FB           MOV     R3,A
   \   00008C   EE           MOV     A,R6
   \   00008D   2A           ADD     A,R2
   \   00008E   F582         MOV     DPL,A
   \   000090   EF           MOV     A,R7
   \   000091   3B           ADDC    A,R3
   \   000092   F583         MOV     DPH,A
   \   000094   E0           MOVX    A,@DPTR
   \   000095   65..         XRL     A,?V6
   \   000097   7004         JNZ     ??ZDO_CompareClusterLists_4
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   65..         XRL     A,?V7
   \                     ??ZDO_CompareClusterLists_4:
   \   00009D   702F         JNZ     ??ZDO_CompareClusterLists_5
    658                {
    659                  pMatches[numMatches++] = z;
   \   00009F   E9           MOV     A,R1
   \   0000A0   FA           MOV     R2,A
   \   0000A1   7B00         MOV     R3,#0x0
   \   0000A3   EA           MOV     A,R2
   \   0000A4   75F002       MOV     B,#0x2
   \   0000A7   A4           MUL     AB
   \   0000A8   CA           XCH     A,R2
   \   0000A9   85F0..       MOV     ?V5,B
   \   0000AC   75F000       MOV     B,#0x0
   \   0000AF   A4           MUL     AB
   \   0000B0   25..         ADD     A,?V5
   \   0000B2   F5..         MOV     ?V5,A
   \   0000B4   75F002       MOV     B,#0x2
   \   0000B7   EB           MOV     A,R3
   \   0000B8   A4           MUL     AB
   \   0000B9   25..         ADD     A,?V5
   \   0000BB   FB           MOV     R3,A
   \   0000BC   E5..         MOV     A,?V0
   \   0000BE   2A           ADD     A,R2
   \   0000BF   F582         MOV     DPL,A
   \   0000C1   E5..         MOV     A,?V1
   \   0000C3   3B           ADDC    A,R3
   \   0000C4   F583         MOV     DPH,A
   \   0000C6   E5..         MOV     A,?V6
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E5..         MOV     A,?V7
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   09           INC     R1
    660                }
    661              }
   \                     ??ZDO_CompareClusterLists_5:
   \   0000CE   05..         INC     ?V2
   \   0000D0   02....       LJMP    ??ZDO_CompareClusterLists_2 & 0xFFFF
    662            }
   \                     ??ZDO_CompareClusterLists_3:
   \   0000D3   08           INC     R0
   \   0000D4   02....       LJMP    ??ZDO_CompareClusterLists_0 & 0xFFFF
    663          
    664            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_1:
   \   0000D7   7F08         MOV     R7,#0x8
   \   0000D9   02....       LJMP    ?BANKED_LEAVE_XDATA
    665          }
    666          #endif // ZG_BUILD_COORDINATOR_TYPE
    667          
    668          /*********************************************************************
    669           * Utility functions
    670           */
    671          
    672          /*********************************************************************
    673           * @fn          ZDO_CompareByteLists
    674           *
    675           * @brief       Compares two lists for matches.
    676           *
    677           * @param       ACnt  - number of entries in list A
    678           * @param       AList  - List A
    679           * @param       BCnt  - number of entries in list B
    680           * @param       BList  - List B
    681           *
    682           * @return      true if a match is found
    683           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    684          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    685          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8C..         MOV     ?V2,R4
   \   000009   740D         MOV     A,#0xd
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   FC           MOV     R4,A
   \   000015   E9           MOV     A,R1
   \   000016   FD           MOV     R5,A
    686            byte x, y;
    687          
    688            for ( x = 0; x < ACnt; x++ )
   \   000017   75..00       MOV     ?V1,#0x0
   \                     ??ZDO_AnyClusterMatches_0:
   \   00001A   E5..         MOV     A,?V1
   \   00001C   C3           CLR     C
   \   00001D   95..         SUBB    A,?V4
   \   00001F   506A         JNC     ??ZDO_AnyClusterMatches_1
    689            {
    690              for ( y = 0; y < BCnt; y++ )
   \   000021   75..00       MOV     ?V0,#0x0
   \                     ??ZDO_AnyClusterMatches_2:
   \   000024   E5..         MOV     A,?V0
   \   000026   C3           CLR     C
   \   000027   95..         SUBB    A,?V2
   \   000029   505C         JNC     ??ZDO_AnyClusterMatches_3
    691              {
    692                if ( AList[x] == BList[y] )
   \   00002B   A8..         MOV     R0,?V1
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   E8           MOV     A,R0
   \   000030   75F002       MOV     B,#0x2
   \   000033   A4           MUL     AB
   \   000034   C8           XCH     A,R0
   \   000035   AEF0         MOV     R6,B
   \   000037   75F000       MOV     B,#0x0
   \   00003A   A4           MUL     AB
   \   00003B   2E           ADD     A,R6
   \   00003C   FE           MOV     R6,A
   \   00003D   75F002       MOV     B,#0x2
   \   000040   E9           MOV     A,R1
   \   000041   A4           MUL     AB
   \   000042   2E           ADD     A,R6
   \   000043   F9           MOV     R1,A
   \   000044   EA           MOV     A,R2
   \   000045   28           ADD     A,R0
   \   000046   F582         MOV     DPL,A
   \   000048   EB           MOV     A,R3
   \   000049   39           ADDC    A,R1
   \   00004A   F583         MOV     DPH,A
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FE           MOV     R6,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FF           MOV     R7,A
   \   000051   A8..         MOV     R0,?V0
   \   000053   7900         MOV     R1,#0x0
   \   000055   E8           MOV     A,R0
   \   000056   75F002       MOV     B,#0x2
   \   000059   A4           MUL     AB
   \   00005A   C8           XCH     A,R0
   \   00005B   85F0..       MOV     ?V3,B
   \   00005E   75F000       MOV     B,#0x0
   \   000061   A4           MUL     AB
   \   000062   25..         ADD     A,?V3
   \   000064   F5..         MOV     ?V3,A
   \   000066   75F002       MOV     B,#0x2
   \   000069   E9           MOV     A,R1
   \   00006A   A4           MUL     AB
   \   00006B   25..         ADD     A,?V3
   \   00006D   F9           MOV     R1,A
   \   00006E   EC           MOV     A,R4
   \   00006F   28           ADD     A,R0
   \   000070   F582         MOV     DPL,A
   \   000072   ED           MOV     A,R5
   \   000073   39           ADDC    A,R1
   \   000074   F583         MOV     DPH,A
   \   000076   E0           MOVX    A,@DPTR
   \   000077   6E           XRL     A,R6
   \   000078   7003         JNZ     ??ZDO_AnyClusterMatches_4
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   6F           XRL     A,R7
   \                     ??ZDO_AnyClusterMatches_4:
   \   00007D   7004         JNZ     ??ZDO_AnyClusterMatches_5
    693                {
    694                  return true;
   \   00007F   7901         MOV     R1,#0x1
   \   000081   800A         SJMP    ??ZDO_AnyClusterMatches_6
    695                }
    696              }
   \                     ??ZDO_AnyClusterMatches_5:
   \   000083   05..         INC     ?V0
   \   000085   809D         SJMP    ??ZDO_AnyClusterMatches_2
    697            }
   \                     ??ZDO_AnyClusterMatches_3:
   \   000087   05..         INC     ?V1
   \   000089   808F         SJMP    ??ZDO_AnyClusterMatches_0
    698          
    699            return false;
   \                     ??ZDO_AnyClusterMatches_1:
   \   00008B   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   00008D   7F05         MOV     R7,#0x5
   \   00008F   02....       LJMP    ?BANKED_LEAVE_XDATA
    700          }
    701          
    702          /*********************************************************************
    703           * Callback functions from ZDProfile
    704           */
    705          
    706          /*********************************************************************
    707           * @fn          ZDO_ProcessNodeDescReq
    708           *
    709           * @brief       This function processes and responds to the
    710           *              Node_Desc_req message.
    711           *
    712           * @param       inMsg - incoming message
    713           *
    714           * @return      none
    715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    716          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    717          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    718            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F583         MOV     DPH,A
   \   000018   8882         MOV     DPL,R0
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   EE           MOV     A,R6
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   3F           ADDC    A,R7
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   E4           CLR     A
   \   000035   C8           XCH     A,R0
   \   000036   F9           MOV     R1,A
   \   000037   EA           MOV     A,R2
   \   000038   28           ADD     A,R0
   \   000039   F5..         MOV     ?V0,A
   \   00003B   EB           MOV     A,R3
   \   00003C   39           ADDC    A,R1
   \   00003D   F5..         MOV     ?V1,A
    719            NodeDescriptorFormat_t *desc = NULL;
   \   00003F   75..00       MOV     ?V2,#0x0
   \   000042   75..00       MOV     ?V3,#0x0
    720          
    721            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000045   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65..         XRL     A,?V0
   \   00004B   7004         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   65..         XRL     A,?V1
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   000051   7006         JNZ     ??ZDO_ProcessNodeDescReq_1
    722            {
    723              desc = &ZDO_Config_Node_Descriptor;
   \   000053   75....       MOV     ?V2,#ZDO_Config_Node_Descriptor & 0xff
   \   000056   75....       MOV     ?V3,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
    724            }
    725          
    726            if ( desc != NULL )
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000059   E5..         MOV     A,?V2
   \   00005B   45..         ORL     A,?V3
   \   00005D   6018         JZ      ??ZDO_ProcessNodeDescReq_2
    727            {
    728              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00005F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00005F   78..         MOV     R0,#?V2
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   AC..         MOV     R4,?V0
   \   000066   AD..         MOV     R5,?V1
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00006F   7402         MOV     A,#0x2
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   E9           MOV     A,R1
   \   000075   8038         SJMP    ??ZDO_ProcessNodeDescReq_3
    729            }
    730            else
    731            {
    732              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    733                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000077                ; Setup parameters for call to function ZDP_GenericRsp
   \   000077   75..02       MOV     ?V4,#0x2
   \   00007A   75..80       MOV     ?V5,#-0x80
   \   00007D   78..         MOV     R0,#?V4
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   EE           MOV     A,R6
   \   000088   240E         ADD     A,#0xe
   \   00008A   F582         MOV     DPL,A
   \   00008C   E4           CLR     A
   \   00008D   3F           ADDC    A,R7
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FD           MOV     R5,A
   \   000092   7C80         MOV     R4,#-0x80
   \   000094   EE           MOV     A,R6
   \   000095   2402         ADD     A,#0x2
   \   000097   FA           MOV     R2,A
   \   000098   E4           CLR     A
   \   000099   3F           ADDC    A,R7
   \   00009A   FB           MOV     R3,A
   \   00009B   EE           MOV     A,R6
   \   00009C   240F         ADD     A,#0xf
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000A9   7404         MOV     A,#0x4
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
    734            }
    735          }
   \                     ??ZDO_ProcessNodeDescReq_3:
   \   0000AF   7F06         MOV     R7,#0x6
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    736          
    737          /*********************************************************************
    738           * @fn          ZDO_ProcessPowerDescReq
    739           *
    740           * @brief       This function processes and responds to the
    741           *              Node_Power_req message.
    742           *
    743           * @param       inMsg  - incoming request
    744           *
    745           * @return      none
    746           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    747          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    748          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    749            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F583         MOV     DPH,A
   \   000018   8882         MOV     DPL,R0
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   EE           MOV     A,R6
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   3F           ADDC    A,R7
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   E4           CLR     A
   \   000035   C8           XCH     A,R0
   \   000036   F9           MOV     R1,A
   \   000037   EA           MOV     A,R2
   \   000038   28           ADD     A,R0
   \   000039   F5..         MOV     ?V0,A
   \   00003B   EB           MOV     A,R3
   \   00003C   39           ADDC    A,R1
   \   00003D   F5..         MOV     ?V1,A
    750            NodePowerDescriptorFormat_t *desc = NULL;
   \   00003F   75..00       MOV     ?V2,#0x0
   \   000042   75..00       MOV     ?V3,#0x0
    751          
    752            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000045   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65..         XRL     A,?V0
   \   00004B   7004         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   65..         XRL     A,?V1
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   000051   7006         JNZ     ??ZDO_ProcessPowerDescReq_1
    753            {
    754              desc = &ZDO_Config_Power_Descriptor;
   \   000053   75....       MOV     ?V2,#ZDO_Config_Power_Descriptor & 0xff
   \   000056   75....       MOV     ?V3,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
    755            }
    756          
    757            if ( desc != NULL )
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000059   E5..         MOV     A,?V2
   \   00005B   45..         ORL     A,?V3
   \   00005D   6018         JZ      ??ZDO_ProcessPowerDescReq_2
    758            {
    759              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00005F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00005F   78..         MOV     R0,#?V2
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   AC..         MOV     R4,?V0
   \   000066   AD..         MOV     R5,?V1
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00006F   7402         MOV     A,#0x2
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   E9           MOV     A,R1
   \   000075   8038         SJMP    ??ZDO_ProcessPowerDescReq_3
    760            }
    761            else
    762            {
    763              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    764                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000077                ; Setup parameters for call to function ZDP_GenericRsp
   \   000077   75..03       MOV     ?V4,#0x3
   \   00007A   75..80       MOV     ?V5,#-0x80
   \   00007D   78..         MOV     R0,#?V4
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   EE           MOV     A,R6
   \   000088   240E         ADD     A,#0xe
   \   00008A   F582         MOV     DPL,A
   \   00008C   E4           CLR     A
   \   00008D   3F           ADDC    A,R7
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FD           MOV     R5,A
   \   000092   7C80         MOV     R4,#-0x80
   \   000094   EE           MOV     A,R6
   \   000095   2402         ADD     A,#0x2
   \   000097   FA           MOV     R2,A
   \   000098   E4           CLR     A
   \   000099   3F           ADDC    A,R7
   \   00009A   FB           MOV     R3,A
   \   00009B   EE           MOV     A,R6
   \   00009C   240F         ADD     A,#0xf
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000A9   7404         MOV     A,#0x4
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
    765            }
    766          }
   \                     ??ZDO_ProcessPowerDescReq_3:
   \   0000AF   7F06         MOV     R7,#0x6
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    767          
    768          /*********************************************************************
    769           * @fn          ZDO_ProcessSimpleDescReq
    770           *
    771           * @brief       This function processes and responds to the
    772           *              Simple_Desc_req message.
    773           *
    774           * @param       inMsg - incoming message (request)
    775           *
    776           * @return      none
    777           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    778          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    779          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    780            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   7400         MOV     A,#0x0
   \   00001A   F0           MOVX    @DPTR,A
    781            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00001B   E5..         MOV     A,?V0
   \   00001D   2413         ADD     A,#0x13
   \   00001F   F582         MOV     DPL,A
   \   000021   E4           CLR     A
   \   000022   35..         ADDC    A,?V1
   \   000024   F583         MOV     DPH,A
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F583         MOV     DPH,A
   \   00002C   8882         MOV     DPL,R0
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FA           MOV     R2,A
   \   000030   7B00         MOV     R3,#0x0
   \   000032   E5..         MOV     A,?V0
   \   000034   2413         ADD     A,#0x13
   \   000036   F582         MOV     DPL,A
   \   000038   E4           CLR     A
   \   000039   35..         ADDC    A,?V1
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F583         MOV     DPH,A
   \   000043   8882         MOV     DPL,R0
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   7900         MOV     R1,#0x0
   \   00004A   E4           CLR     A
   \   00004B   C8           XCH     A,R0
   \   00004C   F9           MOV     R1,A
   \   00004D   EA           MOV     A,R2
   \   00004E   28           ADD     A,R0
   \   00004F   FE           MOV     R6,A
   \   000050   EB           MOV     A,R3
   \   000051   39           ADDC    A,R1
   \   000052   FF           MOV     R7,A
    782            byte endPoint = inMsg->asdu[2];
   \   000053   E5..         MOV     A,?V0
   \   000055   2413         ADD     A,#0x13
   \   000057   F582         MOV     DPL,A
   \   000059   E4           CLR     A
   \   00005A   35..         ADDC    A,?V1
   \   00005C   F583         MOV     DPH,A
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F583         MOV     DPH,A
   \   000064   8882         MOV     DPL,R0
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F5..         MOV     ?V4,A
    783            byte free = false;
   \   00006B   75..00       MOV     ?V3,#0x0
    784            byte stat = ZDP_SUCCESS;
   \   00006E   75..00       MOV     ?V2,#0x0
    785          
    786            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   000071   E5..         MOV     A,?V4
   \   000073   6006         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000075   74FF         MOV     A,#-0x1
   \   000077   65..         XRL     A,?V4
   \   000079   7005         JNZ     ??ZDO_ProcessSimpleDescReq_1
    787            {
    788              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   00007B   75..82       MOV     ?V2,#-0x7e
   \   00007E   802F         SJMP    ??ZDO_ProcessSimpleDescReq_2
    789            }
    790            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   000080   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000083   E0           MOVX    A,@DPTR
   \   000084   6E           XRL     A,R6
   \   000085   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   6F           XRL     A,R7
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   00008A   7020         JNZ     ??ZDO_ProcessSimpleDescReq_4
    791            {
    792              free = afFindSimpleDesc( &sDesc, endPoint );
   \   00008C                ; Setup parameters for call to function afFindSimpleDesc
   \   00008C   A9..         MOV     R1,?V4
   \   00008E   AA..         MOV     R2,?XSP + 0
   \   000090   AB..         MOV     R3,?XSP + 1
   \   000092   12....       LCALL   `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   000095   E9           MOV     A,R1
   \   000096   F5..         MOV     ?V3,A
    793              if ( sDesc == NULL )
   \   000098   85..82       MOV     DPL,?XSP + 0
   \   00009B   85..83       MOV     DPH,?XSP + 1
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F8           MOV     R0,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F9           MOV     R1,A
   \   0000A3   E8           MOV     A,R0
   \   0000A4   49           ORL     A,R1
   \   0000A5   7008         JNZ     ??ZDO_ProcessSimpleDescReq_2
    794              {
    795                stat = ZDP_NOT_ACTIVE;
   \   0000A7   75..83       MOV     ?V2,#-0x7d
   \   0000AA   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    796              }
    797            }
    798            else
    799            {
    800              if ( ZSTACK_ROUTER_BUILD )
    801              {
    802                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   0000AC   75..81       MOV     ?V2,#-0x7f
    803              }
    804              else if ( ZSTACK_END_DEVICE_BUILD )
    805              {
    806                stat = ZDP_INVALID_REQTYPE;
    807              }
    808            }
    809          
    810            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   0000AF                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   FC           MOV     R4,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FD           MOV     R5,A
   \   0000BA   A9..         MOV     R1,?V2
   \   0000BC   AA..         MOV     R2,?V0
   \   0000BE   AB..         MOV     R3,?V1
   \   0000C0   12....       LCALL   `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
   \   0000C3   E9           MOV     A,R1
    811          
    812            if ( free && sDesc )
   \   0000C4   E5..         MOV     A,?V3
   \   0000C6   601D         JZ      ??ZDO_ProcessSimpleDescReq_5
   \   0000C8   85..82       MOV     DPL,?XSP + 0
   \   0000CB   85..83       MOV     DPH,?XSP + 1
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F8           MOV     R0,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F9           MOV     R1,A
   \   0000D3   E8           MOV     A,R0
   \   0000D4   49           ORL     A,R1
   \   0000D5   600E         JZ      ??ZDO_ProcessSimpleDescReq_5
    813            {
    814              osal_mem_free( sDesc );
   \   0000D7                ; Setup parameters for call to function osal_mem_free
   \   0000D7   85..82       MOV     DPL,?XSP + 0
   \   0000DA   85..83       MOV     DPH,?XSP + 1
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   FA           MOV     R2,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   FB           MOV     R3,A
   \   0000E2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    815            }
    816          }
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   0000E5   7402         MOV     A,#0x2
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   7F05         MOV     R7,#0x5
   \   0000EC   02....       LJMP    ?BANKED_LEAVE_XDATA
    817          
    818          /*********************************************************************
    819           * @fn          ZDO_ProcessActiveEPReq
    820           *
    821           * @brief       This function processes and responds to the
    822           *              Active_EP_req message.
    823           *
    824           * @param       inMsg  - incoming message (request)
    825           *
    826           * @return      none
    827           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    828          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    829          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    830            byte cnt = 0;
   \   000009   75..00       MOV     ?V0,#0x0
    831            uint16 aoi;
    832            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V1,#0x0
    833          
    834            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   EE           MOV     A,R6
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   3F           ADDC    A,R7
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F583         MOV     DPH,A
   \   00001E   8882         MOV     DPL,R0
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FA           MOV     R2,A
   \   000022   7B00         MOV     R3,#0x0
   \   000024   EE           MOV     A,R6
   \   000025   2413         ADD     A,#0x13
   \   000027   F582         MOV     DPL,A
   \   000029   E4           CLR     A
   \   00002A   3F           ADDC    A,R7
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F583         MOV     DPH,A
   \   000033   8882         MOV     DPL,R0
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   7900         MOV     R1,#0x0
   \   00003A   E4           CLR     A
   \   00003B   C8           XCH     A,R0
   \   00003C   F9           MOV     R1,A
   \   00003D   EA           MOV     A,R2
   \   00003E   28           ADD     A,R0
   \   00003F   F8           MOV     R0,A
   \   000040   EB           MOV     A,R3
   \   000041   39           ADDC    A,R1
   \   000042   F9           MOV     R1,A
   \   000043   88..         MOV     ?V2,R0
   \   000045   89..         MOV     ?V3,R1
    835          
    836            if ( aoi == NLME_GetShortAddr() )
   \   000047                ; Setup parameters for call to function NLME_GetShortAddr
   \   000047   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00004A   8A..         MOV     ?V4,R2
   \   00004C   8B..         MOV     ?V5,R3
   \   00004E   E5..         MOV     A,?V4
   \   000050   65..         XRL     A,?V2
   \   000052   7004         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000054   E5..         MOV     A,?V5
   \   000056   65..         XRL     A,?V3
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000058   7013         JNZ     ??ZDO_ProcessActiveEPReq_1
    837            {
    838              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   00005A                ; Setup parameters for call to function afNumEndPoints
   \   00005A   12....       LCALL   `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   00005D   E9           MOV     A,R1
   \   00005E   24FF         ADD     A,#-0x1
   \   000060   F5..         MOV     ?V0,A
    839              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   000062                ; Setup parameters for call to function afEndPoints
   \   000062   7901         MOV     R1,#0x1
   \   000064   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000066   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000068   12....       LCALL   `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   00006B   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    840            }
    841            else
    842            {
    843              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   00006D   75..80       MOV     ?V1,#-0x80
    844            }
    845          
    846            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    847                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   000070                ; Setup parameters for call to function ZDP_EPRsp
   \   000070   EE           MOV     A,R6
   \   000071   240E         ADD     A,#0xe
   \   000073   F582         MOV     DPL,A
   \   000075   E4           CLR     A
   \   000076   3F           ADDC    A,R7
   \   000077   F583         MOV     DPH,A
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F5..         MOV     ?V4,A
   \   00007C   78..         MOV     R0,#?V4
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000081   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   000084   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   000087   78..         MOV     R0,#?V4
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008C   E5..         MOV     A,?V0
   \   00008E   F5..         MOV     ?V4,A
   \   000090   78..         MOV     R0,#?V4
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000095   78..         MOV     R0,#?V2
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   E5..         MOV     A,?V1
   \   00009C   F5..         MOV     ?V4,A
   \   00009E   78..         MOV     R0,#?V4
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A3   EE           MOV     A,R6
   \   0000A4   2402         ADD     A,#0x2
   \   0000A6   FC           MOV     R4,A
   \   0000A7   E4           CLR     A
   \   0000A8   3F           ADDC    A,R7
   \   0000A9   FD           MOV     R5,A
   \   0000AA   EE           MOV     A,R6
   \   0000AB   240F         ADD     A,#0xf
   \   0000AD   F582         MOV     DPL,A
   \   0000AF   E4           CLR     A
   \   0000B0   3F           ADDC    A,R7
   \   0000B1   F583         MOV     DPH,A
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F9           MOV     R1,A
   \   0000B5   7A05         MOV     R2,#0x5
   \   0000B7   7B80         MOV     R3,#-0x80
   \   0000B9   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000BC   7407         MOV     A,#0x7
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1   E9           MOV     A,R1
    848          }
   \   0000C2   7F06         MOV     R7,#0x6
   \   0000C4   02....       LJMP    ?BANKED_LEAVE_XDATA
    849          
    850          /*********************************************************************
    851           * @fn          ZDO_ConvertOTAClusters
    852           *
    853           * @brief       This function will convert the over-the-air cluster list
    854           *              format to an internal format.
    855           *
    856           * @param       inMsg  - incoming message (request)
    857           *
    858           * @return      pointer to incremented inBuf
    859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    861          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
    862            uint8 x;
    863          
    864            for ( x = 0; x < cnt; x++ )
   \   000007   75..00       MOV     ?V0,#0x0
   \                     ??ZDO_ConvertOTAClusters_0:
   \   00000A   E5..         MOV     A,?V0
   \   00000C   C3           CLR     C
   \   00000D   95..         SUBB    A,?V1
   \   00000F   504F         JNC     ??ZDO_ConvertOTAClusters_1
    865            {
    866              // convert ota format to internal
    867              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
   \   000017   7F00         MOV     R7,#0x0
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   7900         MOV     R1,#0x0
   \   000022   E4           CLR     A
   \   000023   C8           XCH     A,R0
   \   000024   F9           MOV     R1,A
   \   000025   EE           MOV     A,R6
   \   000026   28           ADD     A,R0
   \   000027   FE           MOV     R6,A
   \   000028   EF           MOV     A,R7
   \   000029   39           ADDC    A,R1
   \   00002A   FF           MOV     R7,A
   \   00002B   A8..         MOV     R0,?V0
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   E8           MOV     A,R0
   \   000030   75F002       MOV     B,#0x2
   \   000033   A4           MUL     AB
   \   000034   C8           XCH     A,R0
   \   000035   85F0..       MOV     ?V2,B
   \   000038   75F000       MOV     B,#0x0
   \   00003B   A4           MUL     AB
   \   00003C   25..         ADD     A,?V2
   \   00003E   F5..         MOV     ?V2,A
   \   000040   75F002       MOV     B,#0x2
   \   000043   E9           MOV     A,R1
   \   000044   A4           MUL     AB
   \   000045   25..         ADD     A,?V2
   \   000047   F9           MOV     R1,A
   \   000048   EC           MOV     A,R4
   \   000049   28           ADD     A,R0
   \   00004A   F582         MOV     DPL,A
   \   00004C   ED           MOV     A,R5
   \   00004D   39           ADDC    A,R1
   \   00004E   F583         MOV     DPH,A
   \   000050   EE           MOV     A,R6
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   EF           MOV     A,R7
   \   000054   F0           MOVX    @DPTR,A
    868              inBuf += sizeof( uint16 );
   \   000055   EA           MOV     A,R2
   \   000056   2402         ADD     A,#0x2
   \   000058   FA           MOV     R2,A
   \   000059   5001         JNC     ??ZDO_ConvertOTAClusters_2
   \   00005B   0B           INC     R3
    869            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   00005C   05..         INC     ?V0
   \   00005E   80AA         SJMP    ??ZDO_ConvertOTAClusters_0
    870            return ( inBuf );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   000060   7F03         MOV     R7,#0x3
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
    871          }
    872          
    873          /*********************************************************************
    874           * @fn          ZDO_ProcessMatchDescReq
    875           *
    876           * @brief       This function processes and responds to the
    877           *              Match_Desc_req message.
    878           *
    879           * @param       inMsg  - incoming message (request)
    880           *
    881           * @return      none
    882           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    883          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    884          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V8,R2
   \   00000C   8B..         MOV     ?V9,R3
    885            uint8 epCnt = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    886            uint8 numInClusters;
    887            uint16 *inClusters = NULL;
   \   000017   7401         MOV     A,#0x1
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   7400         MOV     A,#0x0
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7400         MOV     A,#0x0
   \   000022   F0           MOVX    @DPTR,A
    888            uint8 numOutClusters;
    889            uint16 *outClusters = NULL;
   \   000023   75..00       MOV     ?V14,#0x0
   \   000026   75..00       MOV     ?V15,#0x0
    890            epList_t *epDesc;
    891            SimpleDescriptionFormat_t *sDesc = NULL;
   \   000029   75..00       MOV     ?V10,#0x0
   \   00002C   75..00       MOV     ?V11,#0x0
    892            uint8 allocated;
    893            uint8 *msg;
    894            uint16 aoi;
    895            uint16 profileID;
    896          
    897            // Parse the incoming message
    898            msg = inMsg->asdu;
   \   00002F   E5..         MOV     A,?V8
   \   000031   2413         ADD     A,#0x13
   \   000033   F582         MOV     DPL,A
   \   000035   E4           CLR     A
   \   000036   35..         ADDC    A,?V9
   \   000038   F583         MOV     DPH,A
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F8           MOV     R0,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   FE           MOV     R6,A
   \   000041   E9           MOV     A,R1
   \   000042   FF           MOV     R7,A
    899            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FA           MOV     R2,A
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F8           MOV     R0,A
   \   000052   7900         MOV     R1,#0x0
   \   000054   E4           CLR     A
   \   000055   C8           XCH     A,R0
   \   000056   F9           MOV     R1,A
   \   000057   EA           MOV     A,R2
   \   000058   28           ADD     A,R0
   \   000059   F8           MOV     R0,A
   \   00005A   EB           MOV     A,R3
   \   00005B   39           ADDC    A,R1
   \   00005C   F9           MOV     R1,A
   \   00005D   7404         MOV     A,#0x4
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   E8           MOV     A,R0
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   E9           MOV     A,R1
   \   000066   F0           MOVX    @DPTR,A
    900            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FA           MOV     R2,A
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F8           MOV     R0,A
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   E4           CLR     A
   \   00007D   C8           XCH     A,R0
   \   00007E   F9           MOV     R1,A
   \   00007F   EA           MOV     A,R2
   \   000080   28           ADD     A,R0
   \   000081   F8           MOV     R0,A
   \   000082   EB           MOV     A,R3
   \   000083   39           ADDC    A,R1
   \   000084   F9           MOV     R1,A
   \   000085   7406         MOV     A,#0x6
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   E8           MOV     A,R0
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   E9           MOV     A,R1
   \   00008E   F0           MOVX    @DPTR,A
    901            msg += 4;
   \   00008F   EE           MOV     A,R6
   \   000090   2404         ADD     A,#0x4
   \   000092   FE           MOV     R6,A
   \   000093   5001         JNC     ??ZDO_ProcessMatchDescReq_0
   \   000095   0F           INC     R7
    902          
    903            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   000096                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000096   7404         MOV     A,#0x4
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   FA           MOV     R2,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FB           MOV     R3,A
   \   0000A0   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   0000A3   E9           MOV     A,R1
   \   0000A4   6401         XRL     A,#0x1
   \   0000A6   7059         JNZ     ??ZDO_ProcessMatchDescReq_1
    904            {
    905              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    906                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \   0000A8                ; Setup parameters for call to function ZDP_EPRsp
   \   0000A8   E5..         MOV     A,?V8
   \   0000AA   240E         ADD     A,#0xe
   \   0000AC   F582         MOV     DPL,A
   \   0000AE   E4           CLR     A
   \   0000AF   35..         ADDC    A,?V9
   \   0000B1   F583         MOV     DPH,A
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F5..         MOV     ?V0,A
   \   0000B6   78..         MOV     R0,#?V0
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BB   E4           CLR     A
   \   0000BC   F5..         MOV     ?V0,A
   \   0000BE   F5..         MOV     ?V1,A
   \   0000C0   78..         MOV     R0,#?V0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C5   75..00       MOV     ?V0,#0x0
   \   0000C8   78..         MOV     R0,#?V0
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CD   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000D0   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000D3   75..80       MOV     ?V0,#-0x80
   \   0000D6   78..         MOV     R0,#?V0
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DB   E5..         MOV     A,?V8
   \   0000DD   2402         ADD     A,#0x2
   \   0000DF   FC           MOV     R4,A
   \   0000E0   E4           CLR     A
   \   0000E1   35..         ADDC    A,?V9
   \   0000E3   FD           MOV     R5,A
   \   0000E4   E5..         MOV     A,?V8
   \   0000E6   240F         ADD     A,#0xf
   \   0000E8   F582         MOV     DPL,A
   \   0000EA   E4           CLR     A
   \   0000EB   35..         ADDC    A,?V9
   \   0000ED   F583         MOV     DPH,A
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F9           MOV     R1,A
   \   0000F1   7A06         MOV     R2,#0x6
   \   0000F3   7B80         MOV     R3,#-0x80
   \   0000F5   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000F8   7407         MOV     A,#0x7
   \   0000FA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FD   E9           MOV     A,R1
    907              return;
   \   0000FE   02....       LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
    908            }
    909            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   000101                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000101   7404         MOV     A,#0x4
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   E0           MOVX    A,@DPTR
   \   000107   FA           MOV     R2,A
   \   000108   A3           INC     DPTR
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   FB           MOV     R3,A
   \   00010B   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00010E   E9           MOV     A,R1
   \   00010F   706F         JNZ     ??ZDO_ProcessMatchDescReq_3
   \   000111   7404         MOV     A,#0x4
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F8           MOV     R0,A
   \   000118   A3           INC     DPTR
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   F9           MOV     R1,A
   \   00011B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   68           XRL     A,R0
   \   000120   7003         JNZ     ??ZDO_ProcessMatchDescReq_4
   \   000122   A3           INC     DPTR
   \   000123   E0           MOVX    A,@DPTR
   \   000124   69           XRL     A,R1
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   000125   6059         JZ      ??ZDO_ProcessMatchDescReq_3
    910            {
    911              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    912                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \   000127                ; Setup parameters for call to function ZDP_EPRsp
   \   000127   E5..         MOV     A,?V8
   \   000129   240E         ADD     A,#0xe
   \   00012B   F582         MOV     DPL,A
   \   00012D   E4           CLR     A
   \   00012E   35..         ADDC    A,?V9
   \   000130   F583         MOV     DPH,A
   \   000132   E0           MOVX    A,@DPTR
   \   000133   F5..         MOV     ?V0,A
   \   000135   78..         MOV     R0,#?V0
   \   000137   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013A   E4           CLR     A
   \   00013B   F5..         MOV     ?V0,A
   \   00013D   F5..         MOV     ?V1,A
   \   00013F   78..         MOV     R0,#?V0
   \   000141   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000144   75..00       MOV     ?V0,#0x0
   \   000147   78..         MOV     R0,#?V0
   \   000149   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00014F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000152   75..80       MOV     ?V0,#-0x80
   \   000155   78..         MOV     R0,#?V0
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015A   E5..         MOV     A,?V8
   \   00015C   2402         ADD     A,#0x2
   \   00015E   FC           MOV     R4,A
   \   00015F   E4           CLR     A
   \   000160   35..         ADDC    A,?V9
   \   000162   FD           MOV     R5,A
   \   000163   E5..         MOV     A,?V8
   \   000165   240F         ADD     A,#0xf
   \   000167   F582         MOV     DPL,A
   \   000169   E4           CLR     A
   \   00016A   35..         ADDC    A,?V9
   \   00016C   F583         MOV     DPH,A
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   F9           MOV     R1,A
   \   000170   7A06         MOV     R2,#0x6
   \   000172   7B80         MOV     R3,#-0x80
   \   000174   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000177   7407         MOV     A,#0x7
   \   000179   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017C   E9           MOV     A,R1
    913              return;
   \   00017D   02....       LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
    914            }
    915          
    916            if ((numInClusters = *msg++) &&
    917                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   000180   8E82         MOV     DPL,R6
   \   000182   8F83         MOV     DPH,R7
   \   000184   E0           MOVX    A,@DPTR
   \   000185   F5..         MOV     ?V2,A
   \   000187   8E82         MOV     DPL,R6
   \   000189   8F83         MOV     DPH,R7
   \   00018B   A3           INC     DPTR
   \   00018C   AE82         MOV     R6,DPL
   \   00018E   AF83         MOV     R7,DPH
   \   000190   E5..         MOV     A,?V2
   \   000192   6051         JZ      ??ZDO_ProcessMatchDescReq_5
   \   000194                ; Setup parameters for call to function osal_mem_alloc
   \   000194   AA..         MOV     R2,?V2
   \   000196   7B00         MOV     R3,#0x0
   \   000198   EA           MOV     A,R2
   \   000199   75F002       MOV     B,#0x2
   \   00019C   A4           MUL     AB
   \   00019D   CA           XCH     A,R2
   \   00019E   A8F0         MOV     R0,B
   \   0001A0   75F000       MOV     B,#0x0
   \   0001A3   A4           MUL     AB
   \   0001A4   28           ADD     A,R0
   \   0001A5   F8           MOV     R0,A
   \   0001A6   75F002       MOV     B,#0x2
   \   0001A9   EB           MOV     A,R3
   \   0001AA   A4           MUL     AB
   \   0001AB   28           ADD     A,R0
   \   0001AC   FB           MOV     R3,A
   \   0001AD   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001B0   7401         MOV     A,#0x1
   \   0001B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B5   EA           MOV     A,R2
   \   0001B6   F0           MOVX    @DPTR,A
   \   0001B7   A3           INC     DPTR
   \   0001B8   EB           MOV     A,R3
   \   0001B9   F0           MOVX    @DPTR,A
   \   0001BA   7401         MOV     A,#0x1
   \   0001BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   F8           MOV     R0,A
   \   0001C1   A3           INC     DPTR
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   F9           MOV     R1,A
   \   0001C4   E8           MOV     A,R0
   \   0001C5   49           ORL     A,R1
   \   0001C6   601D         JZ      ??ZDO_ProcessMatchDescReq_5
    918            {
    919              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0001C8                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0001C8   7401         MOV     A,#0x1
   \   0001CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CD   E0           MOVX    A,@DPTR
   \   0001CE   FC           MOV     R4,A
   \   0001CF   A3           INC     DPTR
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   FD           MOV     R5,A
   \   0001D2   EE           MOV     A,R6
   \   0001D3   FA           MOV     R2,A
   \   0001D4   EF           MOV     A,R7
   \   0001D5   FB           MOV     R3,A
   \   0001D6   A9..         MOV     R1,?V2
   \   0001D8   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0001DB   8A..         MOV     ?V0,R2
   \   0001DD   8B..         MOV     ?V1,R3
   \   0001DF   AE..         MOV     R6,?V0
   \   0001E1   AF..         MOV     R7,?V1
   \   0001E3   8003         SJMP    ??ZDO_ProcessMatchDescReq_6
    920            }
    921            else
    922            {
    923              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0001E5   75..00       MOV     ?V2,#0x0
    924            }
    925          
    926            if ((numOutClusters = *msg++) &&
    927                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   0001E8   8E82         MOV     DPL,R6
   \   0001EA   8F83         MOV     DPH,R7
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   F5..         MOV     ?V3,A
   \   0001EF   8E82         MOV     DPL,R6
   \   0001F1   8F83         MOV     DPH,R7
   \   0001F3   A3           INC     DPTR
   \   0001F4   AE82         MOV     R6,DPL
   \   0001F6   AF83         MOV     R7,DPH
   \   0001F8   E5..         MOV     A,?V3
   \   0001FA   6043         JZ      ??ZDO_ProcessMatchDescReq_7
   \   0001FC                ; Setup parameters for call to function osal_mem_alloc
   \   0001FC   AA..         MOV     R2,?V3
   \   0001FE   7B00         MOV     R3,#0x0
   \   000200   EA           MOV     A,R2
   \   000201   75F002       MOV     B,#0x2
   \   000204   A4           MUL     AB
   \   000205   CA           XCH     A,R2
   \   000206   A8F0         MOV     R0,B
   \   000208   75F000       MOV     B,#0x0
   \   00020B   A4           MUL     AB
   \   00020C   28           ADD     A,R0
   \   00020D   F8           MOV     R0,A
   \   00020E   75F002       MOV     B,#0x2
   \   000211   EB           MOV     A,R3
   \   000212   A4           MUL     AB
   \   000213   28           ADD     A,R0
   \   000214   FB           MOV     R3,A
   \   000215   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000218   8A..         MOV     ?V0,R2
   \   00021A   8B..         MOV     ?V1,R3
   \   00021C   85....       MOV     ?V14,?V0
   \   00021F   85....       MOV     ?V15,?V1
   \   000222   E5..         MOV     A,?V14
   \   000224   45..         ORL     A,?V15
   \   000226   6017         JZ      ??ZDO_ProcessMatchDescReq_7
    928            {
    929              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   000228                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000228   AC..         MOV     R4,?V14
   \   00022A   AD..         MOV     R5,?V15
   \   00022C   EE           MOV     A,R6
   \   00022D   FA           MOV     R2,A
   \   00022E   EF           MOV     A,R7
   \   00022F   FB           MOV     R3,A
   \   000230   A9..         MOV     R1,?V3
   \   000232   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000235   8A..         MOV     ?V0,R2
   \   000237   8B..         MOV     ?V1,R3
   \   000239   AE..         MOV     R6,?V0
   \   00023B   AF..         MOV     R7,?V1
   \   00023D   8003         SJMP    ??ZDO_ProcessMatchDescReq_8
    930            }
    931            else
    932            {
    933              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   00023F   75..00       MOV     ?V3,#0x0
    934            }
    935          
    936            // First count the number of endpoints that match.
    937            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000242   90....       MOV     DPTR,#epList
   \   000245   E0           MOVX    A,@DPTR
   \   000246   F8           MOV     R0,A
   \   000247   A3           INC     DPTR
   \   000248   E0           MOVX    A,@DPTR
   \   000249   F9           MOV     R1,A
   \   00024A   88..         MOV     ?V12,R0
   \   00024C   89..         MOV     ?V13,R1
    938            while ( epDesc )
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   00024E   E5..         MOV     A,?V12
   \   000250   45..         ORL     A,?V13
   \   000252   7003         JNZ     $+5
   \   000254   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
    939            {
    940              // Don't search endpoint 0 and check if response is allowed
    941              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
   \   000257   85..82       MOV     DPL,?V12
   \   00025A   85..83       MOV     DPH,?V13
   \   00025D   A3           INC     DPTR
   \   00025E   A3           INC     DPTR
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   F8           MOV     R0,A
   \   000261   A3           INC     DPTR
   \   000262   E0           MOVX    A,@DPTR
   \   000263   F583         MOV     DPH,A
   \   000265   8882         MOV     DPL,R0
   \   000267   E0           MOVX    A,@DPTR
   \   000268   7003         JNZ     $+5
   \   00026A   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   \   00026D   85..82       MOV     DPL,?V12
   \   000270   85..83       MOV     DPH,?V13
   \   000273   A3           INC     DPTR
   \   000274   A3           INC     DPTR
   \   000275   A3           INC     DPTR
   \   000276   A3           INC     DPTR
   \   000277   A3           INC     DPTR
   \   000278   A3           INC     DPTR
   \   000279   A3           INC     DPTR
   \   00027A   A3           INC     DPTR
   \   00027B   E0           MOVX    A,@DPTR
   \   00027C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00027E   4003         JC      $+5
   \   000280   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
    942              {
    943                if ( epDesc->pfnDescCB )
   \   000283   85..82       MOV     DPL,?V12
   \   000286   85..83       MOV     DPH,?V13
   \   000289   A3           INC     DPTR
   \   00028A   A3           INC     DPTR
   \   00028B   A3           INC     DPTR
   \   00028C   A3           INC     DPTR
   \   00028D   E0           MOVX    A,@DPTR
   \   00028E   F8           MOV     R0,A
   \   00028F   A3           INC     DPTR
   \   000290   E0           MOVX    A,@DPTR
   \   000291   F9           MOV     R1,A
   \   000292   E8           MOV     A,R0
   \   000293   49           ORL     A,R1
   \   000294   603D         JZ      ??ZDO_ProcessMatchDescReq_12
    944                {
    945                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
   \   000296                ; Setup parameters for indirect call
   \   000296   85..82       MOV     DPL,?V12
   \   000299   85..83       MOV     DPH,?V13
   \   00029C   A3           INC     DPTR
   \   00029D   A3           INC     DPTR
   \   00029E   E0           MOVX    A,@DPTR
   \   00029F   F8           MOV     R0,A
   \   0002A0   A3           INC     DPTR
   \   0002A1   E0           MOVX    A,@DPTR
   \   0002A2   F583         MOV     DPH,A
   \   0002A4   8882         MOV     DPL,R0
   \   0002A6   E0           MOVX    A,@DPTR
   \   0002A7   FA           MOV     R2,A
   \   0002A8   7901         MOV     R1,#0x1
   \   0002AA   85..82       MOV     DPL,?V12
   \   0002AD   85..83       MOV     DPH,?V13
   \   0002B0   A3           INC     DPTR
   \   0002B1   A3           INC     DPTR
   \   0002B2   A3           INC     DPTR
   \   0002B3   A3           INC     DPTR
   \   0002B4   E0           MOVX    A,@DPTR
   \   0002B5   F8           MOV     R0,A
   \   0002B6   A3           INC     DPTR
   \   0002B7   E0           MOVX    A,@DPTR
   \   0002B8   F583         MOV     DPH,A
   \   0002BA   8882         MOV     DPL,R0
   \   0002BC   12....       LCALL   ?CALL_IND
   \   0002BF   8A..         MOV     ?V0,R2
   \   0002C1   8B..         MOV     ?V1,R3
   \   0002C3   85....       MOV     ?V10,?V0
   \   0002C6   85....       MOV     ?V11,?V1
    946                  allocated = TRUE;
   \   0002C9   7403         MOV     A,#0x3
   \   0002CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CE   7401         MOV     A,#0x1
   \   0002D0   F0           MOVX    @DPTR,A
   \   0002D1   8024         SJMP    ??ZDO_ProcessMatchDescReq_13
    947                }
    948                else
    949                {
    950                  sDesc = epDesc->epDesc->simpleDesc;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   0002D3   85..82       MOV     DPL,?V12
   \   0002D6   85..83       MOV     DPH,?V13
   \   0002D9   A3           INC     DPTR
   \   0002DA   A3           INC     DPTR
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   F8           MOV     R0,A
   \   0002DD   A3           INC     DPTR
   \   0002DE   E0           MOVX    A,@DPTR
   \   0002DF   F583         MOV     DPH,A
   \   0002E1   8882         MOV     DPL,R0
   \   0002E3   A3           INC     DPTR
   \   0002E4   A3           INC     DPTR
   \   0002E5   A3           INC     DPTR
   \   0002E6   E0           MOVX    A,@DPTR
   \   0002E7   F8           MOV     R0,A
   \   0002E8   A3           INC     DPTR
   \   0002E9   E0           MOVX    A,@DPTR
   \   0002EA   F9           MOV     R1,A
   \   0002EB   88..         MOV     ?V10,R0
   \   0002ED   89..         MOV     ?V11,R1
    951                  allocated = FALSE;
   \   0002EF   7403         MOV     A,#0x3
   \   0002F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F4   7400         MOV     A,#0x0
   \   0002F6   F0           MOVX    @DPTR,A
    952                }
    953          
    954                // Allow specific ProfileId or Wildcard ProfileID
    955                if ( sDesc && ( ( sDesc->AppProfId == profileID ) || ( profileID == ZDO_WILDCARD_PROFILE_ID ) ) )
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   0002F7   E5..         MOV     A,?V10
   \   0002F9   45..         ORL     A,?V11
   \   0002FB   7003         JNZ     $+5
   \   0002FD   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   000300   85..82       MOV     DPL,?V10
   \   000303   85..83       MOV     DPH,?V11
   \   000306   A3           INC     DPTR
   \   000307   E0           MOVX    A,@DPTR
   \   000308   F8           MOV     R0,A
   \   000309   A3           INC     DPTR
   \   00030A   E0           MOVX    A,@DPTR
   \   00030B   F9           MOV     R1,A
   \   00030C   7406         MOV     A,#0x6
   \   00030E   12....       LCALL   ?XSTACK_DISP0_8
   \   000311   E0           MOVX    A,@DPTR
   \   000312   68           XRL     A,R0
   \   000313   7003         JNZ     ??ZDO_ProcessMatchDescReq_15
   \   000315   A3           INC     DPTR
   \   000316   E0           MOVX    A,@DPTR
   \   000317   69           XRL     A,R1
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   000318   6013         JZ      ??ZDO_ProcessMatchDescReq_16
   \   00031A   7406         MOV     A,#0x6
   \   00031C   12....       LCALL   ?XSTACK_DISP0_8
   \   00031F   E0           MOVX    A,@DPTR
   \   000320   64FF         XRL     A,#0xff
   \   000322   7004         JNZ     ??ZDO_ProcessMatchDescReq_17
   \   000324   A3           INC     DPTR
   \   000325   E0           MOVX    A,@DPTR
   \   000326   64FF         XRL     A,#0xff
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   000328   6003         JZ      $+5
   \   00032A   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
    956                {
    957                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   00032D   7408         MOV     A,#0x8
   \   00032F   12....       LCALL   ?XSTACK_DISP0_8
   \   000332   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   000334   F0           MOVX    @DPTR,A
   \   000335   A3           INC     DPTR
   \   000336   74..         MOV     A,#(ZDOBuildBuf >> 8) & 0xff
   \   000338   F0           MOVX    @DPTR,A
    958          
    959                  // Are there matching input clusters?
    960                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    961                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    962                      // Are there matching output clusters?
    963                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    964                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
   \   000339                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000339   85..82       MOV     DPL,?V10
   \   00033C   85..83       MOV     DPH,?V11
   \   00033F   A3           INC     DPTR
   \   000340   A3           INC     DPTR
   \   000341   A3           INC     DPTR
   \   000342   A3           INC     DPTR
   \   000343   A3           INC     DPTR
   \   000344   A3           INC     DPTR
   \   000345   A3           INC     DPTR
   \   000346   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000349   85..82       MOV     DPL,?V10
   \   00034C   85..83       MOV     DPH,?V11
   \   00034F   A3           INC     DPTR
   \   000350   A3           INC     DPTR
   \   000351   A3           INC     DPTR
   \   000352   A3           INC     DPTR
   \   000353   A3           INC     DPTR
   \   000354   A3           INC     DPTR
   \   000355   E0           MOVX    A,@DPTR
   \   000356   FC           MOV     R4,A
   \   000357   7403         MOV     A,#0x3
   \   000359   12....       LCALL   ?XSTACK_DISP0_8
   \   00035C   E0           MOVX    A,@DPTR
   \   00035D   FA           MOV     R2,A
   \   00035E   A3           INC     DPTR
   \   00035F   E0           MOVX    A,@DPTR
   \   000360   FB           MOV     R3,A
   \   000361   A9..         MOV     R1,?V2
   \   000363   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000366   7402         MOV     A,#0x2
   \   000368   12....       LCALL   ?DEALLOC_XSTACK8
   \   00036B   E9           MOV     A,R1
   \   00036C   7038         JNZ     ??ZDO_ProcessMatchDescReq_18
   \   00036E                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   00036E   85..82       MOV     DPL,?V10
   \   000371   85..83       MOV     DPH,?V11
   \   000374   A3           INC     DPTR
   \   000375   A3           INC     DPTR
   \   000376   A3           INC     DPTR
   \   000377   A3           INC     DPTR
   \   000378   A3           INC     DPTR
   \   000379   A3           INC     DPTR
   \   00037A   A3           INC     DPTR
   \   00037B   A3           INC     DPTR
   \   00037C   A3           INC     DPTR
   \   00037D   A3           INC     DPTR
   \   00037E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000381   85..82       MOV     DPL,?V10
   \   000384   85..83       MOV     DPH,?V11
   \   000387   A3           INC     DPTR
   \   000388   A3           INC     DPTR
   \   000389   A3           INC     DPTR
   \   00038A   A3           INC     DPTR
   \   00038B   A3           INC     DPTR
   \   00038C   A3           INC     DPTR
   \   00038D   A3           INC     DPTR
   \   00038E   A3           INC     DPTR
   \   00038F   A3           INC     DPTR
   \   000390   E0           MOVX    A,@DPTR
   \   000391   FC           MOV     R4,A
   \   000392   AA..         MOV     R2,?V14
   \   000394   AB..         MOV     R3,?V15
   \   000396   A9..         MOV     R1,?V3
   \   000398   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00039B   7402         MOV     A,#0x2
   \   00039D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003A0   E9           MOV     A,R1
   \   0003A1   7003         JNZ     $+5
   \   0003A3   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
    965                  {
    966                    // Notify the endpoint of the match.
    967                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   0003A6   75F002       MOV     B,#0x2
   \   0003A9   AA..         MOV     R2,?V3
   \   0003AB   7B00         MOV     R3,#0x0
   \   0003AD   A8..         MOV     R0,?V2
   \   0003AF   7900         MOV     R1,#0x0
   \   0003B1   EA           MOV     A,R2
   \   0003B2   28           ADD     A,R0
   \   0003B3   F8           MOV     R0,A
   \   0003B4   EB           MOV     A,R3
   \   0003B5   39           ADDC    A,R1
   \   0003B6   F9           MOV     R1,A
   \   0003B7   E8           MOV     A,R0
   \   0003B8   A4           MUL     AB
   \   0003B9   240A         ADD     A,#0xa
   \   0003BB   F5..         MOV     ?V7,A
    968                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
   \   0003BD                ; Setup parameters for call to function osal_msg_allocate
   \   0003BD   AA..         MOV     R2,?V7
   \   0003BF   7B00         MOV     R3,#0x0
   \   0003C1   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0003C4   8A..         MOV     ?V4,R2
   \   0003C6   8B..         MOV     ?V5,R3
   \   0003C8   85....       MOV     ?V0,?V4
   \   0003CB   85....       MOV     ?V1,?V5
    969          
    970                    if (pRspSent)
   \   0003CE   E5..         MOV     A,?V0
   \   0003D0   45..         ORL     A,?V1
   \   0003D2   7003         JNZ     $+5
   \   0003D4   02....       LJMP    ??ZDO_ProcessMatchDescReq_19 & 0xFFFF
    971                    {
    972                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
   \   0003D7   85..82       MOV     DPL,?V0
   \   0003DA   85..83       MOV     DPH,?V1
   \   0003DD   74D2         MOV     A,#-0x2e
   \   0003DF   F0           MOVX    @DPTR,A
    973                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
   \   0003E0   85..82       MOV     DPL,?V8
   \   0003E3   85..83       MOV     DPH,?V9
   \   0003E6   A3           INC     DPTR
   \   0003E7   A3           INC     DPTR
   \   0003E8   E0           MOVX    A,@DPTR
   \   0003E9   F8           MOV     R0,A
   \   0003EA   A3           INC     DPTR
   \   0003EB   E0           MOVX    A,@DPTR
   \   0003EC   F9           MOV     R1,A
   \   0003ED   85..82       MOV     DPL,?V0
   \   0003F0   85..83       MOV     DPH,?V1
   \   0003F3   A3           INC     DPTR
   \   0003F4   A3           INC     DPTR
   \   0003F5   E8           MOV     A,R0
   \   0003F6   F0           MOVX    @DPTR,A
   \   0003F7   A3           INC     DPTR
   \   0003F8   E9           MOV     A,R1
   \   0003F9   F0           MOVX    @DPTR,A
    974                      pRspSent->numInClusters = numInClusters;
   \   0003FA   E5..         MOV     A,?V2
   \   0003FC   C0E0         PUSH    A
   \   0003FE   85..82       MOV     DPL,?V0
   \   000401   85..83       MOV     DPH,?V1
   \   000404   A3           INC     DPTR
   \   000405   A3           INC     DPTR
   \   000406   A3           INC     DPTR
   \   000407   A3           INC     DPTR
   \   000408   D0E0         POP     A
   \   00040A   F0           MOVX    @DPTR,A
    975                      pRspSent->numOutClusters = numOutClusters;
   \   00040B   E5..         MOV     A,?V3
   \   00040D   C0E0         PUSH    A
   \   00040F   85..82       MOV     DPL,?V0
   \   000412   85..83       MOV     DPH,?V1
   \   000415   A3           INC     DPTR
   \   000416   A3           INC     DPTR
   \   000417   A3           INC     DPTR
   \   000418   A3           INC     DPTR
   \   000419   A3           INC     DPTR
   \   00041A   A3           INC     DPTR
   \   00041B   A3           INC     DPTR
   \   00041C   D0E0         POP     A
   \   00041E   F0           MOVX    @DPTR,A
    976          
    977                      if (numInClusters)
   \   00041F   E5..         MOV     A,?V2
   \   000421   6060         JZ      ??ZDO_ProcessMatchDescReq_20
    978                      {
    979                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
   \   000423   E5..         MOV     A,?V0
   \   000425   240A         ADD     A,#0xa
   \   000427   F8           MOV     R0,A
   \   000428   E4           CLR     A
   \   000429   35..         ADDC    A,?V1
   \   00042B   F9           MOV     R1,A
   \   00042C   85..82       MOV     DPL,?V0
   \   00042F   85..83       MOV     DPH,?V1
   \   000432   A3           INC     DPTR
   \   000433   A3           INC     DPTR
   \   000434   A3           INC     DPTR
   \   000435   A3           INC     DPTR
   \   000436   A3           INC     DPTR
   \   000437   E8           MOV     A,R0
   \   000438   F0           MOVX    @DPTR,A
   \   000439   A3           INC     DPTR
   \   00043A   E9           MOV     A,R1
   \   00043B   F0           MOVX    @DPTR,A
    980                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
   \   00043C                ; Setup parameters for call to function osal_memcpy
   \   00043C   7401         MOV     A,#0x1
   \   00043E   12....       LCALL   ?XSTACK_DISP0_8
   \   000441   E0           MOVX    A,@DPTR
   \   000442   F5..         MOV     ?V4,A
   \   000444   A3           INC     DPTR
   \   000445   E0           MOVX    A,@DPTR
   \   000446   F5..         MOV     ?V5,A
   \   000448   75..00       MOV     ?V6,#0x0
   \   00044B   78..         MOV     R0,#?V4
   \   00044D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000450   AC..         MOV     R4,?V2
   \   000452   7D00         MOV     R5,#0x0
   \   000454   EC           MOV     A,R4
   \   000455   75F002       MOV     B,#0x2
   \   000458   A4           MUL     AB
   \   000459   CC           XCH     A,R4
   \   00045A   A8F0         MOV     R0,B
   \   00045C   75F000       MOV     B,#0x0
   \   00045F   A4           MUL     AB
   \   000460   28           ADD     A,R0
   \   000461   F8           MOV     R0,A
   \   000462   75F002       MOV     B,#0x2
   \   000465   ED           MOV     A,R5
   \   000466   A4           MUL     AB
   \   000467   28           ADD     A,R0
   \   000468   FD           MOV     R5,A
   \   000469   85..82       MOV     DPL,?V0
   \   00046C   85..83       MOV     DPH,?V1
   \   00046F   A3           INC     DPTR
   \   000470   A3           INC     DPTR
   \   000471   A3           INC     DPTR
   \   000472   A3           INC     DPTR
   \   000473   A3           INC     DPTR
   \   000474   E0           MOVX    A,@DPTR
   \   000475   FA           MOV     R2,A
   \   000476   A3           INC     DPTR
   \   000477   E0           MOVX    A,@DPTR
   \   000478   FB           MOV     R3,A
   \   000479   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00047C   7403         MOV     A,#0x3
   \   00047E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000481   8012         SJMP    ??ZDO_ProcessMatchDescReq_21
    981                      }
    982                      else
    983                      {
    984                        pRspSent->pInClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   000483   85..82       MOV     DPL,?V0
   \   000486   85..83       MOV     DPH,?V1
   \   000489   A3           INC     DPTR
   \   00048A   A3           INC     DPTR
   \   00048B   A3           INC     DPTR
   \   00048C   A3           INC     DPTR
   \   00048D   A3           INC     DPTR
   \   00048E   7400         MOV     A,#0x0
   \   000490   F0           MOVX    @DPTR,A
   \   000491   A3           INC     DPTR
   \   000492   7400         MOV     A,#0x0
   \   000494   F0           MOVX    @DPTR,A
    985                      }
    986          
    987                      if (numOutClusters)
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   000495   E5..         MOV     A,?V3
   \   000497   607F         JZ      ??ZDO_ProcessMatchDescReq_22
    988                      {
    989                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
   \   000499   A8..         MOV     R0,?V2
   \   00049B   7900         MOV     R1,#0x0
   \   00049D   E8           MOV     A,R0
   \   00049E   75F002       MOV     B,#0x2
   \   0004A1   A4           MUL     AB
   \   0004A2   C8           XCH     A,R0
   \   0004A3   AAF0         MOV     R2,B
   \   0004A5   75F000       MOV     B,#0x0
   \   0004A8   A4           MUL     AB
   \   0004A9   2A           ADD     A,R2
   \   0004AA   FA           MOV     R2,A
   \   0004AB   75F002       MOV     B,#0x2
   \   0004AE   E9           MOV     A,R1
   \   0004AF   A4           MUL     AB
   \   0004B0   2A           ADD     A,R2
   \   0004B1   F9           MOV     R1,A
   \   0004B2   E5..         MOV     A,?V0
   \   0004B4   28           ADD     A,R0
   \   0004B5   F8           MOV     R0,A
   \   0004B6   E5..         MOV     A,?V1
   \   0004B8   39           ADDC    A,R1
   \   0004B9   F9           MOV     R1,A
   \   0004BA   E8           MOV     A,R0
   \   0004BB   240A         ADD     A,#0xa
   \   0004BD   F8           MOV     R0,A
   \   0004BE   5001         JNC     ??ZDO_ProcessMatchDescReq_23
   \   0004C0   09           INC     R1
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0004C1   85..82       MOV     DPL,?V0
   \   0004C4   85..83       MOV     DPH,?V1
   \   0004C7   A3           INC     DPTR
   \   0004C8   A3           INC     DPTR
   \   0004C9   A3           INC     DPTR
   \   0004CA   A3           INC     DPTR
   \   0004CB   A3           INC     DPTR
   \   0004CC   A3           INC     DPTR
   \   0004CD   A3           INC     DPTR
   \   0004CE   A3           INC     DPTR
   \   0004CF   E8           MOV     A,R0
   \   0004D0   F0           MOVX    @DPTR,A
   \   0004D1   A3           INC     DPTR
   \   0004D2   E9           MOV     A,R1
   \   0004D3   F0           MOVX    @DPTR,A
    990                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
   \   0004D4                ; Setup parameters for call to function osal_memcpy
   \   0004D4   85....       MOV     ?V4,?V14
   \   0004D7   85....       MOV     ?V5,?V15
   \   0004DA   75..00       MOV     ?V6,#0x0
   \   0004DD   78..         MOV     R0,#?V4
   \   0004DF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0004E2   AC..         MOV     R4,?V3
   \   0004E4   7D00         MOV     R5,#0x0
   \   0004E6   EC           MOV     A,R4
   \   0004E7   75F002       MOV     B,#0x2
   \   0004EA   A4           MUL     AB
   \   0004EB   CC           XCH     A,R4
   \   0004EC   A8F0         MOV     R0,B
   \   0004EE   75F000       MOV     B,#0x0
   \   0004F1   A4           MUL     AB
   \   0004F2   28           ADD     A,R0
   \   0004F3   F8           MOV     R0,A
   \   0004F4   75F002       MOV     B,#0x2
   \   0004F7   ED           MOV     A,R5
   \   0004F8   A4           MUL     AB
   \   0004F9   28           ADD     A,R0
   \   0004FA   FD           MOV     R5,A
   \   0004FB   85..82       MOV     DPL,?V0
   \   0004FE   85..83       MOV     DPH,?V1
   \   000501   A3           INC     DPTR
   \   000502   A3           INC     DPTR
   \   000503   A3           INC     DPTR
   \   000504   A3           INC     DPTR
   \   000505   A3           INC     DPTR
   \   000506   A3           INC     DPTR
   \   000507   A3           INC     DPTR
   \   000508   A3           INC     DPTR
   \   000509   E0           MOVX    A,@DPTR
   \   00050A   FA           MOV     R2,A
   \   00050B   A3           INC     DPTR
   \   00050C   E0           MOVX    A,@DPTR
   \   00050D   FB           MOV     R3,A
   \   00050E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000511   7403         MOV     A,#0x3
   \   000513   12....       LCALL   ?DEALLOC_XSTACK8
   \   000516   8015         SJMP    ??ZDO_ProcessMatchDescReq_24
    991                      }
    992                      else
    993                      {
    994                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   000518   85..82       MOV     DPL,?V0
   \   00051B   85..83       MOV     DPH,?V1
   \   00051E   A3           INC     DPTR
   \   00051F   A3           INC     DPTR
   \   000520   A3           INC     DPTR
   \   000521   A3           INC     DPTR
   \   000522   A3           INC     DPTR
   \   000523   A3           INC     DPTR
   \   000524   A3           INC     DPTR
   \   000525   A3           INC     DPTR
   \   000526   7400         MOV     A,#0x0
   \   000528   F0           MOVX    @DPTR,A
   \   000529   A3           INC     DPTR
   \   00052A   7400         MOV     A,#0x0
   \   00052C   F0           MOVX    @DPTR,A
    995                      }
    996          
    997                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   00052D                ; Setup parameters for call to function osal_msg_send
   \   00052D   AA..         MOV     R2,?V0
   \   00052F   AB..         MOV     R3,?V1
   \   000531   85..82       MOV     DPL,?V12
   \   000534   85..83       MOV     DPH,?V13
   \   000537   A3           INC     DPTR
   \   000538   A3           INC     DPTR
   \   000539   E0           MOVX    A,@DPTR
   \   00053A   F8           MOV     R0,A
   \   00053B   A3           INC     DPTR
   \   00053C   E0           MOVX    A,@DPTR
   \   00053D   F583         MOV     DPH,A
   \   00053F   8882         MOV     DPL,R0
   \   000541   A3           INC     DPTR
   \   000542   E0           MOVX    A,@DPTR
   \   000543   F8           MOV     R0,A
   \   000544   A3           INC     DPTR
   \   000545   E0           MOVX    A,@DPTR
   \   000546   F583         MOV     DPH,A
   \   000548   8882         MOV     DPL,R0
   \   00054A   E0           MOVX    A,@DPTR
   \   00054B   F9           MOV     R1,A
   \   00054C   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00054F   E9           MOV     A,R1
    998                    }
    999          
   1000                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   000550   85..82       MOV     DPL,?V10
   \   000553   85..83       MOV     DPH,?V11
   \   000556   E0           MOVX    A,@DPTR
   \   000557   C0E0         PUSH    A
   \   000559   85..82       MOV     DPL,?XSP + 0
   \   00055C   85..83       MOV     DPH,?XSP + 1
   \   00055F   E0           MOVX    A,@DPTR
   \   000560   F8           MOV     R0,A
   \   000561   7900         MOV     R1,#0x0
   \   000563   7408         MOV     A,#0x8
   \   000565   12....       LCALL   ?XSTACK_DISP0_8
   \   000568   E0           MOVX    A,@DPTR
   \   000569   28           ADD     A,R0
   \   00056A   FA           MOV     R2,A
   \   00056B   A3           INC     DPTR
   \   00056C   E0           MOVX    A,@DPTR
   \   00056D   39           ADDC    A,R1
   \   00056E   8A82         MOV     DPL,R2
   \   000570   F583         MOV     DPH,A
   \   000572   D0E0         POP     A
   \   000574   F0           MOVX    @DPTR,A
   \   000575   85..82       MOV     DPL,?XSP + 0
   \   000578   85..83       MOV     DPH,?XSP + 1
   \   00057B   E0           MOVX    A,@DPTR
   \   00057C   2401         ADD     A,#0x1
   \   00057E   F0           MOVX    @DPTR,A
   1001                  }
   1002                }
   1003          
   1004                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   00057F   7403         MOV     A,#0x3
   \   000581   12....       LCALL   ?XSTACK_DISP0_8
   \   000584   E0           MOVX    A,@DPTR
   \   000585   6007         JZ      ??ZDO_ProcessMatchDescReq_11
   1005                {
   1006                  osal_mem_free( sDesc );
   \   000587                ; Setup parameters for call to function osal_mem_free
   \   000587   AA..         MOV     R2,?V10
   \   000589   AB..         MOV     R3,?V11
   \   00058B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1007                }
   1008              }
   1009              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00058E   85..82       MOV     DPL,?V12
   \   000591   85..83       MOV     DPH,?V13
   \   000594   E0           MOVX    A,@DPTR
   \   000595   F5..         MOV     ?V12,A
   \   000597   A3           INC     DPTR
   \   000598   E0           MOVX    A,@DPTR
   \   000599   F5..         MOV     ?V13,A
   \   00059B   02....       LJMP    ??ZDO_ProcessMatchDescReq_9 & 0xFFFF
   1010            }
   1011          
   1012            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   00059E   85..82       MOV     DPL,?XSP + 0
   \   0005A1   85..83       MOV     DPH,?XSP + 1
   \   0005A4   E0           MOVX    A,@DPTR
   \   0005A5   606E         JZ      ??ZDO_ProcessMatchDescReq_25
   1013            {
   1014              // Send the message if at least one match found.
   1015              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
   1016                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   0005A7                ; Setup parameters for call to function ZDP_EPRsp
   \   0005A7   E5..         MOV     A,?V8
   \   0005A9   240E         ADD     A,#0xe
   \   0005AB   F582         MOV     DPL,A
   \   0005AD   E4           CLR     A
   \   0005AE   35..         ADDC    A,?V9
   \   0005B0   F583         MOV     DPH,A
   \   0005B2   E0           MOVX    A,@DPTR
   \   0005B3   F5..         MOV     ?V0,A
   \   0005B5   78..         MOV     R0,#?V0
   \   0005B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0005BA   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   0005BD   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   0005C0   78..         MOV     R0,#?V0
   \   0005C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0005C5   7403         MOV     A,#0x3
   \   0005C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0005CA   E0           MOVX    A,@DPTR
   \   0005CB   F5..         MOV     ?V0,A
   \   0005CD   78..         MOV     R0,#?V0
   \   0005CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0005D2   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0005D5   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0005D8   75..00       MOV     ?V0,#0x0
   \   0005DB   78..         MOV     R0,#?V0
   \   0005DD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0005E0   E5..         MOV     A,?V8
   \   0005E2   2402         ADD     A,#0x2
   \   0005E4   FC           MOV     R4,A
   \   0005E5   E4           CLR     A
   \   0005E6   35..         ADDC    A,?V9
   \   0005E8   FD           MOV     R5,A
   \   0005E9   E5..         MOV     A,?V8
   \   0005EB   240F         ADD     A,#0xf
   \   0005ED   F582         MOV     DPL,A
   \   0005EF   E4           CLR     A
   \   0005F0   35..         ADDC    A,?V9
   \   0005F2   F583         MOV     DPH,A
   \   0005F4   E0           MOVX    A,@DPTR
   \   0005F5   F9           MOV     R1,A
   \   0005F6   7A06         MOV     R2,#0x6
   \   0005F8   7B80         MOV     R3,#-0x80
   \   0005FA   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0005FD   7407         MOV     A,#0x7
   \   0005FF   12....       LCALL   ?DEALLOC_XSTACK8
   \   000602   E9           MOV     A,R1
   \   000603   6003         JZ      $+5
   \   000605   02....       LJMP    ??ZDO_ProcessMatchDescReq_26 & 0xFFFF
   1017              {
   1018          #if defined( LCD_SUPPORTED )
   1019                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   \   000608                ; Setup parameters for call to function HalLcdWriteScreen
   \   000608   7C..         MOV     R4,#`?<Constant "Rsp Sent">` & 0xff
   \   00060A   7D..         MOV     R5,#(`?<Constant "Rsp Sent">` >> 8) & 0xff
   \   00060C   7A..         MOV     R2,#`?<Constant "Match Desc Req">` & 0xff
   \   00060E   7B..         MOV     R3,#(`?<Constant "Match Desc Req">` >> 8) & 0xff
   \   000610   12....       LCALL   `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
   \   000613   807F         SJMP    ??ZDO_ProcessMatchDescReq_26
   1020          #endif
   1021              }
   1022            }
   1023            else
   1024            {
   1025              // No match found
   1026              if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   000615                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000615   7404         MOV     A,#0x4
   \   000617   12....       LCALL   ?XSTACK_DISP0_8
   \   00061A   E0           MOVX    A,@DPTR
   \   00061B   FA           MOV     R2,A
   \   00061C   A3           INC     DPTR
   \   00061D   E0           MOVX    A,@DPTR
   \   00061E   FB           MOV     R3,A
   \   00061F   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000622   E9           MOV     A,R1
   \   000623   7064         JNZ     ??ZDO_ProcessMatchDescReq_27
   1027              {
   1028                // send response message with match length = 0
   1029                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
   1030                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   000625                ; Setup parameters for call to function ZDP_EPRsp
   \   000625   E5..         MOV     A,?V8
   \   000627   240E         ADD     A,#0xe
   \   000629   F582         MOV     DPL,A
   \   00062B   E4           CLR     A
   \   00062C   35..         ADDC    A,?V9
   \   00062E   F583         MOV     DPH,A
   \   000630   E0           MOVX    A,@DPTR
   \   000631   F5..         MOV     ?V0,A
   \   000633   78..         MOV     R0,#?V0
   \   000635   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000638   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   00063B   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00063E   78..         MOV     R0,#?V0
   \   000640   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000643   75..00       MOV     ?V0,#0x0
   \   000646   78..         MOV     R0,#?V0
   \   000648   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00064B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00064E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000651   75..00       MOV     ?V0,#0x0
   \   000654   78..         MOV     R0,#?V0
   \   000656   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000659   E5..         MOV     A,?V8
   \   00065B   2402         ADD     A,#0x2
   \   00065D   FC           MOV     R4,A
   \   00065E   E4           CLR     A
   \   00065F   35..         ADDC    A,?V9
   \   000661   FD           MOV     R5,A
   \   000662   E5..         MOV     A,?V8
   \   000664   240F         ADD     A,#0xf
   \   000666   F582         MOV     DPL,A
   \   000668   E4           CLR     A
   \   000669   35..         ADDC    A,?V9
   \   00066B   F583         MOV     DPH,A
   \   00066D   E0           MOVX    A,@DPTR
   \   00066E   F9           MOV     R1,A
   \   00066F   7A06         MOV     R2,#0x6
   \   000671   7B80         MOV     R3,#-0x80
   \   000673   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000676   7407         MOV     A,#0x7
   \   000678   12....       LCALL   ?DEALLOC_XSTACK8
   \   00067B   E9           MOV     A,R1
   1031          #if defined( LCD_SUPPORTED )
   1032                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
   \   00067C                ; Setup parameters for call to function HalLcdWriteScreen
   \   00067C   7C..         MOV     R4,#`?<Constant "Rsp Non Matched">` & 0xff
   \   00067E   7D..         MOV     R5,#(`?<Constant "Rsp Non Matched">` >> 8) & 0xff
   \   000680   7A..         MOV     R2,#`?<Constant "Match Desc Req">` & 0xff
   \   000682   7B..         MOV     R3,#(`?<Constant "Match Desc Req">` >> 8) & 0xff
   \   000684   12....       LCALL   `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
   \   000687   800B         SJMP    ??ZDO_ProcessMatchDescReq_26
   1033          #endif
   1034              }
   1035              else
   1036              {
   1037                // no response mesage for broadcast message
   1038          #if defined( LCD_SUPPORTED )
   1039                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   000689                ; Setup parameters for call to function HalLcdWriteScreen
   \   000689   7C..         MOV     R4,#`?<Constant "Non Matched">` & 0xff
   \   00068B   7D..         MOV     R5,#(`?<Constant "Non Matched">` >> 8) & 0xff
   \   00068D   7A..         MOV     R2,#`?<Constant "Match Desc Req">` & 0xff
   \   00068F   7B..         MOV     R3,#(`?<Constant "Match Desc Req">` >> 8) & 0xff
   \   000691   12....       LCALL   `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
   1040          #endif
   1041              }
   1042            }
   1043          
   1044            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   000694   7401         MOV     A,#0x1
   \   000696   12....       LCALL   ?XSTACK_DISP0_8
   \   000699   E0           MOVX    A,@DPTR
   \   00069A   F8           MOV     R0,A
   \   00069B   A3           INC     DPTR
   \   00069C   E0           MOVX    A,@DPTR
   \   00069D   F9           MOV     R1,A
   \   00069E   E8           MOV     A,R0
   \   00069F   49           ORL     A,R1
   \   0006A0   600D         JZ      ??ZDO_ProcessMatchDescReq_28
   1045            {
   1046              osal_mem_free( inClusters );
   \   0006A2                ; Setup parameters for call to function osal_mem_free
   \   0006A2   7401         MOV     A,#0x1
   \   0006A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0006A7   E0           MOVX    A,@DPTR
   \   0006A8   FA           MOV     R2,A
   \   0006A9   A3           INC     DPTR
   \   0006AA   E0           MOVX    A,@DPTR
   \   0006AB   FB           MOV     R3,A
   \   0006AC   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1047            }
   1048          
   1049            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_28:
   \   0006AF   E5..         MOV     A,?V14
   \   0006B1   45..         ORL     A,?V15
   \   0006B3   6007         JZ      ??ZDO_ProcessMatchDescReq_2
   1050            {
   1051              osal_mem_free( outClusters );
   \   0006B5                ; Setup parameters for call to function osal_mem_free
   \   0006B5   AA..         MOV     R2,?V14
   \   0006B7   AB..         MOV     R3,?V15
   \   0006B9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1052            }
   1053          }
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   0006BC   740A         MOV     A,#0xa
   \   0006BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0006C1   7F10         MOV     R7,#0x10
   \   0006C3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1054          
   1055          #if defined ( REFLECTOR )
   1056          /*********************************************************************
   1057           * @fn      ZDO_ProcessBindUnbindReq()
   1058           *
   1059           * @brief   Called to process a Bind or Unbind Request message.
   1060           *
   1061           * @param   inMsg  - incoming message (request)
   1062           * @param   pReq - place to put parsed information
   1063           *
   1064           * @return  none
   1065           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1066          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
   1067          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1068            zAddrType_t SourceAddr;       // Binding Source addres
   1069            byte bindStat;
   1070          
   1071            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
   1072            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   EE           MOV     A,R6
   \   00001B   FC           MOV     R4,A
   \   00001C   EF           MOV     A,R7
   \   00001D   FD           MOV     R5,A
   \   00001E   7403         MOV     A,#0x3
   \   000020   12....       LCALL   ?XSTACK_DISP101_8
   \   000023   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1073          
   1074            // If the local device is not the primary binding cache
   1075            // check the src address of the bind request.
   1076            // If it is not the local device's extended address
   1077            // discard the request.
   1078            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
   1079                  (pReq->dstAddress.addrMode != Addr64Bit &&
   1080                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000026                ; Setup parameters for call to function NLME_GetExtAddr
   \   000026   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000029   8A..         MOV     ?V0,R2
   \   00002B   8B..         MOV     ?V1,R3
   \   00002D   AC..         MOV     R4,?V0
   \   00002F   AD..         MOV     R5,?V1
   \   000031                ; Setup parameters for call to function sAddrExtCmp
   \   000031   7403         MOV     A,#0x3
   \   000033   12....       LCALL   ?XSTACK_DISP101_8
   \   000036   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000039   E9           MOV     A,R1
   \   00003A   601C         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   00003C   EE           MOV     A,R6
   \   00003D   2413         ADD     A,#0x13
   \   00003F   F582         MOV     DPL,A
   \   000041   E4           CLR     A
   \   000042   3F           ADDC    A,R7
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6403         XRL     A,#0x3
   \   000048   601A         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   00004A   EE           MOV     A,R6
   \   00004B   2413         ADD     A,#0x13
   \   00004D   F582         MOV     DPL,A
   \   00004F   E4           CLR     A
   \   000050   3F           ADDC    A,R7
   \   000051   F583         MOV     DPH,A
   \   000053   E0           MOVX    A,@DPTR
   \   000054   6401         XRL     A,#0x1
   \   000056   600C         JZ      ??ZDO_ProcessBindUnbindReq_1
   1081            {
   1082              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   7484         MOV     A,#-0x7c
   \   000060   F0           MOVX    @DPTR,A
   \   000061   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1083            }
   1084            else
   1085            {
   1086              // Check source & destination endpoints
   1087              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
   1088                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1089                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   6039         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   64FF         XRL     A,#0xff
   \   000082   6028         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000084   EE           MOV     A,R6
   \   000085   2413         ADD     A,#0x13
   \   000087   F582         MOV     DPL,A
   \   000089   E4           CLR     A
   \   00008A   3F           ADDC    A,R7
   \   00008B   F583         MOV     DPH,A
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   6403         XRL     A,#0x3
   \   000090   7026         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000092   EE           MOV     A,R6
   \   000093   2414         ADD     A,#0x14
   \   000095   F582         MOV     DPL,A
   \   000097   E4           CLR     A
   \   000098   3F           ADDC    A,R7
   \   000099   F583         MOV     DPH,A
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   600E         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00009E   EE           MOV     A,R6
   \   00009F   2414         ADD     A,#0x14
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   E4           CLR     A
   \   0000A4   3F           ADDC    A,R7
   \   0000A5   F583         MOV     DPH,A
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   64FF         XRL     A,#0xff
   \   0000AA   700C         JNZ     ??ZDO_ProcessBindUnbindReq_4
   1090              {
   1091                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   0000AC   85..82       MOV     DPL,?XSP + 0
   \   0000AF   85..83       MOV     DPH,?XSP + 1
   \   0000B2   7482         MOV     A,#-0x7e
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1092              }
   1093              else
   1094              {
   1095                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   240C         ADD     A,#0xc
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   E4           CLR     A
   \   0000BF   35..         ADDC    A,?V3
   \   0000C1   F583         MOV     DPH,A
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   6421         XRL     A,#0x21
   \   0000C6   7004         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   6400         XRL     A,#0x0
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000CC   6003         JZ      $+5
   \   0000CE   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
   1096                {
   1097                  // Assume the table is full
   1098                  bindStat = ZDP_TABLE_FULL;
   \   0000D1   85..82       MOV     DPL,?XSP + 0
   \   0000D4   85..83       MOV     DPH,?XSP + 1
   \   0000D7   748C         MOV     A,#-0x74
   \   0000D9   F0           MOVX    @DPTR,A
   1099          
   1100          #if defined( APP_TP ) || defined( APP_TP2 )
   1101                  // For ZigBee Conformance Testing
   1102                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1103          #endif
   1104                  {
   1105          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1106                    uint16 nwkAddr;
   1107          
   1108                    // Verifies that a valid NWK address exists for the device
   1109                    // before creating a Binding entry. If NWK address does not
   1110                    // exist the request is sent out and the BindReq is saved, to
   1111                    // create the Bind Entry once the NwkAddrRsp is received
   1112                    if ( ( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1113                         ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE ) )
   \   0000DA   EE           MOV     A,R6
   \   0000DB   2413         ADD     A,#0x13
   \   0000DD   F582         MOV     DPL,A
   \   0000DF   E4           CLR     A
   \   0000E0   3F           ADDC    A,R7
   \   0000E1   F583         MOV     DPH,A
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   6403         XRL     A,#0x3
   \   0000E6   6003         JZ      $+5
   \   0000E8   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   \   0000EB                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   0000EB   7401         MOV     A,#0x1
   \   0000ED   12....       LCALL   ?XSTACK_DISP102_8
   \   0000F0   EE           MOV     A,R6
   \   0000F1   240B         ADD     A,#0xb
   \   0000F3   FA           MOV     R2,A
   \   0000F4   E4           CLR     A
   \   0000F5   3F           ADDC    A,R7
   \   0000F6   FB           MOV     R3,A
   \   0000F7   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   0000FA   E9           MOV     A,R1
   \   0000FB   6003         JZ      $+5
   \   0000FD   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   1114                    {
   1115                      // find an empty bind slot in the pending Bind Req list
   1116                      ZDO_PendingBindReq_t *pPendingBind;
   1117          
   1118                      if ( ( pPendingBind = ZDApp_GetEmptyPendingBindReq() ) != NULL )
   \   000100                ; Setup parameters for call to function ZDApp_GetEmptyPendingBindReq
   \   000100   12....       LCALL   `??ZDApp_GetEmptyPendingBindReq::?relay`; Banked call to: ZDApp_GetEmptyPendingBindReq
   \   000103   8A..         MOV     ?V4,R2
   \   000105   8B..         MOV     ?V5,R3
   \   000107   A8..         MOV     R0,?V4
   \   000109   A9..         MOV     R1,?V5
   \   00010B   88..         MOV     ?V0,R0
   \   00010D   89..         MOV     ?V1,R1
   \   00010F   E8           MOV     A,R0
   \   000110   49           ORL     A,R1
   \   000111   7003         JNZ     $+5
   \   000113   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1119                      {
   1120                        // copy the received request into the empty slot and all required info
   1121                        osal_memcpy( &(pPendingBind->bindReq), pReq, sizeof( ZDO_BindUnbindReq_t ) );
   \   000116                ; Setup parameters for call to function osal_memcpy
   \   000116   8E..         MOV     ?V4,R6
   \   000118   8F..         MOV     ?V5,R7
   \   00011A   75..00       MOV     ?V6,#0x0
   \   00011D   78..         MOV     R0,#?V4
   \   00011F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000122   7C15         MOV     R4,#0x15
   \   000124   7D00         MOV     R5,#0x0
   \   000126   AA..         MOV     R2,?V0
   \   000128   AB..         MOV     R3,?V1
   \   00012A   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012D   7403         MOV     A,#0x3
   \   00012F   12....       LCALL   ?DEALLOC_XSTACK8
   1122          
   1123                        pPendingBind->srcAddr = inMsg->srcAddr;
   \   000132   85..82       MOV     DPL,?V2
   \   000135   85..83       MOV     DPH,?V3
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   E5..         MOV     A,?V0
   \   00013C   2415         ADD     A,#0x15
   \   00013E   FC           MOV     R4,A
   \   00013F   E4           CLR     A
   \   000140   35..         ADDC    A,?V1
   \   000142   FD           MOV     R5,A
   \   000143   7409         MOV     A,#0x9
   \   000145   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1124                        pPendingBind->securityUse = inMsg->SecurityUse;
   \   000148   E5..         MOV     A,?V2
   \   00014A   240E         ADD     A,#0xe
   \   00014C   F582         MOV     DPL,A
   \   00014E   E4           CLR     A
   \   00014F   35..         ADDC    A,?V3
   \   000151   F583         MOV     DPH,A
   \   000153   E0           MOVX    A,@DPTR
   \   000154   C0E0         PUSH    A
   \   000156   E5..         MOV     A,?V0
   \   000158   241E         ADD     A,#0x1e
   \   00015A   F582         MOV     DPL,A
   \   00015C   E4           CLR     A
   \   00015D   35..         ADDC    A,?V1
   \   00015F   F583         MOV     DPH,A
   \   000161   D0E0         POP     A
   \   000163   F0           MOVX    @DPTR,A
   1125                        pPendingBind->transSeq = inMsg->TransSeq;
   \   000164   E5..         MOV     A,?V2
   \   000166   240F         ADD     A,#0xf
   \   000168   F582         MOV     DPL,A
   \   00016A   E4           CLR     A
   \   00016B   35..         ADDC    A,?V3
   \   00016D   F583         MOV     DPH,A
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   C0E0         PUSH    A
   \   000172   E5..         MOV     A,?V0
   \   000174   241F         ADD     A,#0x1f
   \   000176   F582         MOV     DPL,A
   \   000178   E4           CLR     A
   \   000179   35..         ADDC    A,?V1
   \   00017B   F583         MOV     DPH,A
   \   00017D   D0E0         POP     A
   \   00017F   F0           MOVX    @DPTR,A
   1126                        pPendingBind->age = MAX_TIME_ADDR_REQ;
   \   000180   E5..         MOV     A,?V0
   \   000182   2420         ADD     A,#0x20
   \   000184   F582         MOV     DPL,A
   \   000186   E4           CLR     A
   \   000187   35..         ADDC    A,?V1
   \   000189   F583         MOV     DPH,A
   \   00018B   7405         MOV     A,#0x5
   \   00018D   F0           MOVX    @DPTR,A
   1127          
   1128                        // create an entry in Address Manager
   1129                        ( void )bindAddrIndexGet( &(pReq->dstAddress) );
   \   00018E                ; Setup parameters for call to function bindAddrIndexGet
   \   00018E   EE           MOV     A,R6
   \   00018F   240B         ADD     A,#0xb
   \   000191   FA           MOV     R2,A
   \   000192   E4           CLR     A
   \   000193   3F           ADDC    A,R7
   \   000194   FB           MOV     R3,A
   \   000195   12....       LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   \   000198   8A..         MOV     ?V6,R2
   \   00019A   8B..         MOV     ?V7,R3
   \   00019C   85....       MOV     ?V4,?V6
   \   00019F   85....       MOV     ?V5,?V7
   1130          
   1131                        ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   0001A2                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   0001A2   7D00         MOV     R5,#0x0
   \   0001A4   7C00         MOV     R4,#0x0
   \   0001A6   7900         MOV     R1,#0x0
   \   0001A8   EE           MOV     A,R6
   \   0001A9   240B         ADD     A,#0xb
   \   0001AB   FA           MOV     R2,A
   \   0001AC   E4           CLR     A
   \   0001AD   3F           ADDC    A,R7
   \   0001AE   FB           MOV     R3,A
   \   0001AF   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   0001B2   E9           MOV     A,R1
   1132          
   1133                        osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   1134                                            AGE_OUT_PEND_BIND_REQ_DELAY );
   \   0001B3                ; Setup parameters for call to function osal_start_timerEx
   \   0001B3   90....       MOV     DPTR,#__Constant_3e8
   \   0001B6   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001B9   7A00         MOV     R2,#0x0
   \   0001BB   7B10         MOV     R3,#0x10
   \   0001BD   90....       MOV     DPTR,#ZDAppTaskID
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   F9           MOV     R1,A
   \   0001C2   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001C5   7404         MOV     A,#0x4
   \   0001C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CA   E9           MOV     A,R1
   1135                        return;
   \   0001CB   02....       LJMP    ??ZDO_ProcessBindUnbindReq_8 & 0xFFFF
   1136                      }
   1137                    }
   1138                    // Add Bind entry
   1139                    else if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1140                                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   0001CE                ; Setup parameters for call to function APSME_BindRequest
   \   0001CE   EE           MOV     A,R6
   \   0001CF   2414         ADD     A,#0x14
   \   0001D1   F582         MOV     DPL,A
   \   0001D3   E4           CLR     A
   \   0001D4   3F           ADDC    A,R7
   \   0001D5   F583         MOV     DPH,A
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F5..         MOV     ?V0,A
   \   0001DA   78..         MOV     R0,#?V0
   \   0001DC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001DF   EE           MOV     A,R6
   \   0001E0   240B         ADD     A,#0xb
   \   0001E2   FC           MOV     R4,A
   \   0001E3   E4           CLR     A
   \   0001E4   3F           ADDC    A,R7
   \   0001E5   FD           MOV     R5,A
   \   0001E6   8E82         MOV     DPL,R6
   \   0001E8   8F83         MOV     DPH,R7
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   FA           MOV     R2,A
   \   0001F5   A3           INC     DPTR
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   FB           MOV     R3,A
   \   0001F8   8E82         MOV     DPL,R6
   \   0001FA   8F83         MOV     DPH,R7
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   A3           INC     DPTR
   \   000204   E0           MOVX    A,@DPTR
   \   000205   F9           MOV     R1,A
   \   000206   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   000209   7401         MOV     A,#0x1
   \   00020B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00020E   E9           MOV     A,R1
   \   00020F   7068         JNZ     ??ZDO_ProcessBindUnbindReq_2
   1141                    {
   1142                      // valid entry
   1143                      bindStat = ZDP_SUCCESS;
   \   000211   85..82       MOV     DPL,?XSP + 0
   \   000214   85..83       MOV     DPH,?XSP + 1
   \   000217   7400         MOV     A,#0x0
   \   000219   F0           MOVX    @DPTR,A
   1144          
   1145                      // Notify to save info into NV
   1146                      ZDApp_NVUpdate();
   \   00021A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00021A   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   00021D   805A         SJMP    ??ZDO_ProcessBindUnbindReq_2
   1147                    }
   1148          #else // ZDP_BIND_SKIP_VALIDATION  is defined
   1149                    // Create binding entry first independently of existance of  valid NWK addres
   1150                    // if NWK address does not exist a request is sent out
   1151                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1152                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   1153                    {
   1154                      uint16 nwkAddr;
   1155          
   1156                      // valid entry
   1157                      bindStat = ZDP_SUCCESS;
   1158          
   1159                      // Notify to save info into NV
   1160                      ZDApp_NVUpdate();
   1161          
   1162                      // Check for the destination address
   1163                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   1164                      {
   1165                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   1166                        {
   1167                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1168                        }
   1169                      }
   1170                    }
   1171          #endif
   1172                  }
   1173                }
   1174                else // Unbind_req
   1175                {
   1176                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1177                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   00021F                ; Setup parameters for call to function APSME_UnBindRequest
   \   00021F   EE           MOV     A,R6
   \   000220   2414         ADD     A,#0x14
   \   000222   F582         MOV     DPL,A
   \   000224   E4           CLR     A
   \   000225   3F           ADDC    A,R7
   \   000226   F583         MOV     DPH,A
   \   000228   E0           MOVX    A,@DPTR
   \   000229   F5..         MOV     ?V0,A
   \   00022B   78..         MOV     R0,#?V0
   \   00022D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000230   EE           MOV     A,R6
   \   000231   240B         ADD     A,#0xb
   \   000233   FC           MOV     R4,A
   \   000234   E4           CLR     A
   \   000235   3F           ADDC    A,R7
   \   000236   FD           MOV     R5,A
   \   000237   8E82         MOV     DPL,R6
   \   000239   8F83         MOV     DPH,R7
   \   00023B   A3           INC     DPTR
   \   00023C   A3           INC     DPTR
   \   00023D   A3           INC     DPTR
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   E0           MOVX    A,@DPTR
   \   000245   FA           MOV     R2,A
   \   000246   A3           INC     DPTR
   \   000247   E0           MOVX    A,@DPTR
   \   000248   FB           MOV     R3,A
   \   000249   8E82         MOV     DPL,R6
   \   00024B   8F83         MOV     DPH,R7
   \   00024D   A3           INC     DPTR
   \   00024E   A3           INC     DPTR
   \   00024F   A3           INC     DPTR
   \   000250   A3           INC     DPTR
   \   000251   A3           INC     DPTR
   \   000252   A3           INC     DPTR
   \   000253   A3           INC     DPTR
   \   000254   A3           INC     DPTR
   \   000255   E0           MOVX    A,@DPTR
   \   000256   F9           MOV     R1,A
   \   000257   12....       LCALL   `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   00025A   7401         MOV     A,#0x1
   \   00025C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025F   E9           MOV     A,R1
   \   000260   700E         JNZ     ??ZDO_ProcessBindUnbindReq_9
   1178                  {
   1179                    bindStat = ZDP_SUCCESS;
   \   000262   85..82       MOV     DPL,?XSP + 0
   \   000265   85..83       MOV     DPH,?XSP + 1
   \   000268   7400         MOV     A,#0x0
   \   00026A   F0           MOVX    @DPTR,A
   1180          
   1181                    // Notify to save info into NV
   1182                    ZDApp_NVUpdate();
   \   00026B                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00026B   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   00026E   8009         SJMP    ??ZDO_ProcessBindUnbindReq_2
   1183                  }
   1184                  else
   1185                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_9:
   \   000270   85..82       MOV     DPL,?XSP + 0
   \   000273   85..83       MOV     DPH,?XSP + 1
   \   000276   7488         MOV     A,#-0x78
   \   000278   F0           MOVX    @DPTR,A
   1186                }
   1187              }
   1188            }
   1189          
   1190            // Send back a response message
   1191            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1192                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1193                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   000279                ; Setup parameters for call to function ZDP_SendData
   \   000279   E5..         MOV     A,?V2
   \   00027B   240E         ADD     A,#0xe
   \   00027D   F582         MOV     DPL,A
   \   00027F   E4           CLR     A
   \   000280   35..         ADDC    A,?V3
   \   000282   F583         MOV     DPH,A
   \   000284   E0           MOVX    A,@DPTR
   \   000285   F5..         MOV     ?V0,A
   \   000287   78..         MOV     R0,#?V0
   \   000289   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00028C   7401         MOV     A,#0x1
   \   00028E   12....       LCALL   ?XSTACK_DISP100_8
   \   000291   88..         MOV     ?V0,R0
   \   000293   89..         MOV     ?V1,R1
   \   000295   78..         MOV     R0,#?V0
   \   000297   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00029A   E5..         MOV     A,?V2
   \   00029C   240C         ADD     A,#0xc
   \   00029E   F582         MOV     DPL,A
   \   0002A0   E4           CLR     A
   \   0002A1   35..         ADDC    A,?V3
   \   0002A3   F583         MOV     DPH,A
   \   0002A5   E0           MOVX    A,@DPTR
   \   0002A6   4400         ORL     A,#0x0
   \   0002A8   F5..         MOV     ?V0,A
   \   0002AA   A3           INC     DPTR
   \   0002AB   E0           MOVX    A,@DPTR
   \   0002AC   4480         ORL     A,#0x80
   \   0002AE   F5..         MOV     ?V1,A
   \   0002B0   78..         MOV     R0,#?V0
   \   0002B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B5   7901         MOV     R1,#0x1
   \   0002B7   E5..         MOV     A,?V2
   \   0002B9   2402         ADD     A,#0x2
   \   0002BB   FC           MOV     R4,A
   \   0002BC   E4           CLR     A
   \   0002BD   35..         ADDC    A,?V3
   \   0002BF   FD           MOV     R5,A
   \   0002C0   E5..         MOV     A,?V2
   \   0002C2   240F         ADD     A,#0xf
   \   0002C4   FA           MOV     R2,A
   \   0002C5   E4           CLR     A
   \   0002C6   35..         ADDC    A,?V3
   \   0002C8   FB           MOV     R3,A
   \   0002C9   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0002CC   7405         MOV     A,#0x5
   \   0002CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002D1   E9           MOV     A,R1
   1194          }
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   0002D2   740C         MOV     A,#0xc
   \   0002D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002D7   7F08         MOV     R7,#0x8
   \   0002D9   02....       LJMP    ?BANKED_LEAVE_XDATA
   1195          #endif // REFLECTOR
   1196          
   1197          /*********************************************************************
   1198           * @fn      ZDO_UpdateAddrManager
   1199           *
   1200           * @brief   Update the Address Manager.
   1201           *
   1202           * @param   nwkAddr - network address
   1203           * @param   extAddr - extended address
   1204           *
   1205           * @return  none
   1206           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1207          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1208          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1209            AddrMgrEntry_t addrEntry;
   1210          
   1211            // Update the address manager
   1212            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   7400         MOV     A,#0x0
   \   00001A   F0           MOVX    @DPTR,A
   1213            addrEntry.nwkAddr = nwkAddr;
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E5..         MOV     A,?V0
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E5..         MOV     A,?V1
   \   000026   F0           MOVX    @DPTR,A
   1214            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \   000027                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000027   EE           MOV     A,R6
   \   000028   FC           MOV     R4,A
   \   000029   EF           MOV     A,R7
   \   00002A   FD           MOV     R5,A
   \   00002B   7403         MOV     A,#0x3
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   AA82         MOV     R2,DPL
   \   000032   AB83         MOV     R3,DPH
   \   000034   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1215            AddrMgrEntryUpdate( &addrEntry );
   \   000037                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000037   AA..         MOV     R2,?XSP + 0
   \   000039   AB..         MOV     R3,?XSP + 1
   \   00003B   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00003E   E9           MOV     A,R1
   1216          }
   \   00003F   740D         MOV     A,#0xd
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044   7F02         MOV     R7,#0x2
   \   000046   02....       LJMP    ?BANKED_LEAVE_XDATA
   1217          
   1218          /*********************************************************************
   1219           * @fn      ZDO_ProcessServerDiscReq
   1220           *
   1221           * @brief   Process the Server_Discovery_req message.
   1222           *
   1223           * @param   inMsg  - incoming message (request)
   1224           *
   1225           * @return  none
   1226           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1227          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1228          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1229            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F583         MOV     DPH,A
   \   000018   8882         MOV     DPL,R0
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   EE           MOV     A,R6
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   3F           ADDC    A,R7
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   E4           CLR     A
   \   000035   C8           XCH     A,R0
   \   000036   F9           MOV     R1,A
   \   000037   EA           MOV     A,R2
   \   000038   28           ADD     A,R0
   \   000039   F5..         MOV     ?V0,A
   \   00003B   EB           MOV     A,R3
   \   00003C   39           ADDC    A,R1
   \   00003D   F5..         MOV     ?V1,A
   1230            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \   00003F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   55..         ANL     A,?V0
   \   000045   F5..         MOV     ?V2,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   55..         ANL     A,?V1
   \   00004B   F5..         MOV     ?V3,A
   1231          
   1232            if ( matchMask )
   \   00004D   E5..         MOV     A,?V2
   \   00004F   45..         ORL     A,?V3
   \   000051   6033         JZ      ??ZDO_ProcessServerDiscReq_0
   1233            {
   1234              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1235                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000053                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000053   78..         MOV     R0,#?V2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00005B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005E   EE           MOV     A,R6
   \   00005F   240E         ADD     A,#0xe
   \   000061   F582         MOV     DPL,A
   \   000063   E4           CLR     A
   \   000064   3F           ADDC    A,R7
   \   000065   F583         MOV     DPH,A
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FD           MOV     R5,A
   \   000069   7C00         MOV     R4,#0x0
   \   00006B   EE           MOV     A,R6
   \   00006C   2402         ADD     A,#0x2
   \   00006E   FA           MOV     R2,A
   \   00006F   E4           CLR     A
   \   000070   3F           ADDC    A,R7
   \   000071   FB           MOV     R3,A
   \   000072   EE           MOV     A,R6
   \   000073   240F         ADD     A,#0xf
   \   000075   F582         MOV     DPL,A
   \   000077   E4           CLR     A
   \   000078   3F           ADDC    A,R7
   \   000079   F583         MOV     DPH,A
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   12....       LCALL   `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   000080   7404         MOV     A,#0x4
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
   \   000085   E9           MOV     A,R1
   1236            }
   1237          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   000086   7F04         MOV     R7,#0x4
   \   000088   02....       LJMP    ?BANKED_LEAVE_XDATA
   1238          
   1239          #if defined ( ZIGBEE_CHILD_AGING )
   1240          /*********************************************************************
   1241           * @fn          ZDO_ProcessEndDeviceTimeoutReq
   1242           *
   1243           * @brief       This function processes and responds to the
   1244           *              End_Device_Timeout_Req message.
   1245           *
   1246           * @param       inMsg  - incoming message (request)
   1247           *
   1248           * @return      none
   1249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1250          void ZDO_ProcessEndDeviceTimeoutReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessEndDeviceTimeoutReq:
   1251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1252            uint8 stat = ZDP_SUCCESS;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   1253            uint8 *ieee = NULL;
   \   000017   75..00       MOV     ?V2,#0x0
   \   00001A   75..00       MOV     ?V3,#0x0
   1254            uint16 reqTimeout;
   1255          
   1256            // Only process this message if Child Table Management is enabled OR
   1257            // If message was broadcast OR multicast OR
   1258            // if the NWK src and the MAC src are not the same) drop message
   1259            if ( ( zgChildAgingEnable == FALSE ) ||
   1260                 ( inMsg->wasBroadcast == TRUE ) ||
   1261                 ( inMsg->srcAddr.addr.shortAddr != inMsg->macSrcAddr ) )
   \   00001D   90....       MOV     DPTR,#zgChildAgingEnable
   \   000020   E0           MOVX    A,@DPTR
   \   000021   602B         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   000023   EE           MOV     A,R6
   \   000024   240B         ADD     A,#0xb
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3F           ADDC    A,R7
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6401         XRL     A,#0x1
   \   00002F   601D         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   EE           MOV     A,R6
   \   00003D   2415         ADD     A,#0x15
   \   00003F   F582         MOV     DPL,A
   \   000041   E4           CLR     A
   \   000042   3F           ADDC    A,R7
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   68           XRL     A,R0
   \   000047   7003         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_1
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   69           XRL     A,R1
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_1:
   \   00004C   6003         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_2
   1262            {
   1263              // the message does not come from a child, drop it
   1264              return;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_0:
   \   00004E   02....       LJMP    ??ZDO_ProcessEndDeviceTimeoutReq_3 & 0xFFFF
   1265            }
   1266          
   1267            ieee = inMsg->asdu;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_2:
   \   000051   EE           MOV     A,R6
   \   000052   2413         ADD     A,#0x13
   \   000054   F582         MOV     DPL,A
   \   000056   E4           CLR     A
   \   000057   3F           ADDC    A,R7
   \   000058   F583         MOV     DPH,A
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   88..         MOV     ?V2,R0
   \   000061   89..         MOV     ?V3,R1
   1268          
   1269            reqTimeout = BUILD_UINT16( inMsg->asdu[Z_EXTADDR_LEN], inMsg->asdu[Z_EXTADDR_LEN+1] );
   \   000063   EE           MOV     A,R6
   \   000064   2413         ADD     A,#0x13
   \   000066   F582         MOV     DPL,A
   \   000068   E4           CLR     A
   \   000069   3F           ADDC    A,R7
   \   00006A   F583         MOV     DPH,A
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F8           MOV     R0,A
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   C8           XCH     A,R0
   \   000071   2408         ADD     A,#0x8
   \   000073   F582         MOV     DPL,A
   \   000075   C8           XCH     A,R0
   \   000076   3400         ADDC    A,#0x0
   \   000078   F583         MOV     DPH,A
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FA           MOV     R2,A
   \   00007C   7B00         MOV     R3,#0x0
   \   00007E   EE           MOV     A,R6
   \   00007F   2413         ADD     A,#0x13
   \   000081   F582         MOV     DPL,A
   \   000083   E4           CLR     A
   \   000084   3F           ADDC    A,R7
   \   000085   F583         MOV     DPH,A
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F8           MOV     R0,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   C8           XCH     A,R0
   \   00008C   2409         ADD     A,#0x9
   \   00008E   F582         MOV     DPL,A
   \   000090   C8           XCH     A,R0
   \   000091   3400         ADDC    A,#0x0
   \   000093   F583         MOV     DPH,A
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F8           MOV     R0,A
   \   000097   7900         MOV     R1,#0x0
   \   000099   E4           CLR     A
   \   00009A   C8           XCH     A,R0
   \   00009B   F9           MOV     R1,A
   \   00009C   EA           MOV     A,R2
   \   00009D   28           ADD     A,R0
   \   00009E   F8           MOV     R0,A
   \   00009F   EB           MOV     A,R3
   \   0000A0   39           ADDC    A,R1
   \   0000A1   F9           MOV     R1,A
   \   0000A2   88..         MOV     ?V0,R0
   \   0000A4   89..         MOV     ?V1,R1
   1270          
   1271            if ( ( ( reqTimeout < ZDO_MIN_REQ_TIMEOUT ) || ( reqTimeout > ZDO_MAX_REQ_TIMEOUT ) ) ||
   1272                 ( ZSTACK_END_DEVICE_BUILD ) )
   \   0000A6   E5..         MOV     A,?V0
   \   0000A8   45..         ORL     A,?V1
   \   0000AA   600B         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_4
   \   0000AC   C3           CLR     C
   \   0000AD   E5..         MOV     A,?V0
   \   0000AF   9471         SUBB    A,#0x71
   \   0000B1   E5..         MOV     A,?V1
   \   0000B3   9408         SUBB    A,#0x8
   \   0000B5   400B         JC      ??ZDO_ProcessEndDeviceTimeoutReq_5
   1273            {
   1274              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_4:
   \   0000B7   85..82       MOV     DPL,?XSP + 0
   \   0000BA   85..83       MOV     DPH,?XSP + 1
   \   0000BD   7480         MOV     A,#-0x80
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   8066         SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_6
   1275            }
   1276            else
   1277            {
   1278              associated_devices_t *pAssoc;
   1279          
   1280              if ( ( ( pAssoc = AssocGetWithExt( ieee ) ) != NULL ) &&
   1281                   ( ( pAssoc->nodeRelation >= CHILD_RFD ) &&
   1282                     ( pAssoc->nodeRelation <= CHILD_RFD_RX_IDLE ) ) )
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_5:
   \   0000C2                ; Setup parameters for call to function AssocGetWithExt
   \   0000C2   AA..         MOV     R2,?V2
   \   0000C4   AB..         MOV     R3,?V3
   \   0000C6   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   0000C9   8A..         MOV     ?V6,R2
   \   0000CB   8B..         MOV     ?V7,R3
   \   0000CD   A8..         MOV     R0,?V6
   \   0000CF   A9..         MOV     R1,?V7
   \   0000D1   88..         MOV     ?V4,R0
   \   0000D3   89..         MOV     ?V5,R1
   \   0000D5   E8           MOV     A,R0
   \   0000D6   49           ORL     A,R1
   \   0000D7   6046         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_7
   \   0000D9   85..82       MOV     DPL,?V4
   \   0000DC   85..83       MOV     DPH,?V5
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   6039         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_7
   \   0000E6   85..82       MOV     DPL,?V4
   \   0000E9   85..83       MOV     DPH,?V5
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   C3           CLR     C
   \   0000F2   9403         SUBB    A,#0x3
   \   0000F4   5029         JNC     ??ZDO_ProcessEndDeviceTimeoutReq_7
   1283              {
   1284                pAssoc->timeoutCounter = reqTimeout;
   \   0000F6   E5..         MOV     A,?V4
   \   0000F8   2412         ADD     A,#0x12
   \   0000FA   F582         MOV     DPL,A
   \   0000FC   E4           CLR     A
   \   0000FD   35..         ADDC    A,?V5
   \   0000FF   F583         MOV     DPH,A
   \   000101   E5..         MOV     A,?V0
   \   000103   F0           MOVX    @DPTR,A
   \   000104   A3           INC     DPTR
   \   000105   E5..         MOV     A,?V1
   \   000107   F0           MOVX    @DPTR,A
   1285                pAssoc->endDevKaTimeout = reqTimeout;
   \   000108   E5..         MOV     A,?V4
   \   00010A   2414         ADD     A,#0x14
   \   00010C   F582         MOV     DPL,A
   \   00010E   E4           CLR     A
   \   00010F   35..         ADDC    A,?V5
   \   000111   F583         MOV     DPH,A
   \   000113   E5..         MOV     A,?V0
   \   000115   F0           MOVX    @DPTR,A
   \   000116   A3           INC     DPTR
   \   000117   E5..         MOV     A,?V1
   \   000119   F0           MOVX    @DPTR,A
   1286          
   1287                // Set event to save NV
   1288                ZDApp_NVUpdate();
   \   00011A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00011A   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   00011D   8009         SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_6
   1289              }
   1290              else
   1291              {
   1292                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_7:
   \   00011F   85..82       MOV     DPL,?XSP + 0
   \   000122   85..83       MOV     DPH,?XSP + 1
   \   000125   7481         MOV     A,#-0x7f
   \   000127   F0           MOVX    @DPTR,A
   1293              }
   1294          
   1295            }
   1296          
   1297            ZDP_EndDeviceTimeoutRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
   1298                                     inMsg->SecurityUse );
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_6:
   \   000128                ; Setup parameters for call to function ZDP_SendData
   \   000128   EE           MOV     A,R6
   \   000129   240E         ADD     A,#0xe
   \   00012B   F582         MOV     DPL,A
   \   00012D   E4           CLR     A
   \   00012E   3F           ADDC    A,R7
   \   00012F   F583         MOV     DPH,A
   \   000131   E0           MOVX    A,@DPTR
   \   000132   F5..         MOV     ?V4,A
   \   000134   78..         MOV     R0,#?V4
   \   000136   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000139   7401         MOV     A,#0x1
   \   00013B   12....       LCALL   ?XSTACK_DISP100_8
   \   00013E   88..         MOV     ?V4,R0
   \   000140   89..         MOV     ?V5,R1
   \   000142   78..         MOV     R0,#?V4
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000147   75..1F       MOV     ?V4,#0x1f
   \   00014A   75..80       MOV     ?V5,#-0x80
   \   00014D   78..         MOV     R0,#?V4
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000152   7901         MOV     R1,#0x1
   \   000154   EE           MOV     A,R6
   \   000155   2402         ADD     A,#0x2
   \   000157   FC           MOV     R4,A
   \   000158   E4           CLR     A
   \   000159   3F           ADDC    A,R7
   \   00015A   FD           MOV     R5,A
   \   00015B   EE           MOV     A,R6
   \   00015C   240F         ADD     A,#0xf
   \   00015E   FA           MOV     R2,A
   \   00015F   E4           CLR     A
   \   000160   3F           ADDC    A,R7
   \   000161   FB           MOV     R3,A
   \   000162   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000165   7405         MOV     A,#0x5
   \   000167   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016A   E9           MOV     A,R1
   1299          }
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_3:
   \   00016B   7401         MOV     A,#0x1
   \   00016D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000170   7F08         MOV     R7,#0x8
   \   000172   02....       LJMP    ?BANKED_LEAVE_XDATA
   1300          #endif // ZIGBEE_CHILD_AGING
   1301          
   1302          /*********************************************************************
   1303           * Call Back Functions from APS  - API
   1304           */
   1305          
   1306          /*********************************************************************
   1307           * @fn          ZDO_EndDeviceTimeoutCB
   1308           *
   1309           * @brief       This function handles the binding timer for the End
   1310           *              Device Bind command.
   1311           *
   1312           * @param       none
   1313           *
   1314           * @return      none
   1315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1316          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1317          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1318          #if defined ( REFLECTOR )
   1319            byte stat;
   1320            if ( ZDO_EDBind )
   \   000005   90....       MOV     DPTR,#ZDO_EDBind
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   6047         JZ      ??ZDO_EndDeviceTimeoutCB_0
   1321            {
   1322              stat = ZDO_EDBind->status;
   \   000011   90....       MOV     DPTR,#ZDO_EDBind
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C8           XCH     A,R0
   \   000019   2416         ADD     A,#0x16
   \   00001B   F582         MOV     DPL,A
   \   00001D   C8           XCH     A,R0
   \   00001E   3400         ADDC    A,#0x0
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FE           MOV     R6,A
   1323          
   1324              // Send the response message to the first sent
   1325              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1326                                  stat, ZDO_EDBind->SecurityUse );
   \   000024                ; Setup parameters for call to function ZDO_SendEDBindRsp
   \   000024   90....       MOV     DPTR,#ZDO_EDBind
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C8           XCH     A,R0
   \   00002C   2415         ADD     A,#0x15
   \   00002E   F582         MOV     DPL,A
   \   000030   C8           XCH     A,R0
   \   000031   3400         ADDC    A,#0x0
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FD           MOV     R5,A
   \   000037   EE           MOV     A,R6
   \   000038   FC           MOV     R4,A
   \   000039   90....       MOV     DPTR,#ZDO_EDBind
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   2401         ADD     A,#0x1
   \   00003F   FA           MOV     R2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   3400         ADDC    A,#0x0
   \   000044   FB           MOV     R3,A
   \   000045   90....       MOV     DPTR,#ZDO_EDBind
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F583         MOV     DPH,A
   \   00004E   8882         MOV     DPL,R0
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   12....       LCALL   `??ZDO_SendEDBindRsp::?relay`; Banked call to: ZDO_SendEDBindRsp
   1327          
   1328              ZDO_RemoveEndDeviceBind();
   \   000055                ; Setup parameters for call to function ZDO_RemoveEndDeviceBind
   \   000055   12....       LCALL   `??ZDO_RemoveEndDeviceBind::?relay`; Banked call to: ZDO_RemoveEndDeviceBind
   1329            }
   1330          #endif  // REFLECTOR
   1331          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   000058   7F01         MOV     R7,#0x1
   \   00005A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1332          
   1333          /*********************************************************************
   1334           * Optional Management Messages
   1335           */
   1336          
   1337          /*********************************************************************
   1338           * @fn          ZDO_ProcessMgmtLqiReq
   1339           *
   1340           * @brief       This function handles parsing the incoming Management
   1341           *              LQI request and generate the response.
   1342           *
   1343           *   Note:      This function will limit the number of items returned
   1344           *              to ZDO_MAX_LQI_ITEMS items.
   1345           *
   1346           * @param       inMsg - incoming message (request)
   1347           *
   1348           * @return      none
   1349           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1350          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1351          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V12,R2
   \   00000C   8B..         MOV     ?V13,R3
   1352            byte x;
   1353            byte index;
   1354            byte numItems;
   1355            byte maxItems;
   1356            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV     ?V6,#0x0
   \   000011   75..00       MOV     ?V7,#0x0
   1357            ZDP_MgmtLqiItem_t* item;
   1358            neighborEntry_t    entry;
   1359            byte aItems;
   1360            associated_devices_t *aDevice;
   1361            AddrMgrEntry_t  nwkEntry;
   1362            uint8 StartIndex = inMsg->asdu[0];
   \   000014   E5..         MOV     A,?V12
   \   000016   2413         ADD     A,#0x13
   \   000018   F582         MOV     DPL,A
   \   00001A   E4           CLR     A
   \   00001B   35..         ADDC    A,?V13
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F583         MOV     DPH,A
   \   000025   8882         MOV     DPL,R0
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V2,A
   1363          
   1364            // Get the number of neighbor items
   1365            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   00002A                ; Setup parameters for call to function NLME_GetRequest
   \   00002A   AC..         MOV     R4,?XSP + 0
   \   00002C   AD..         MOV     R5,?XSP + 1
   \   00002E   7A00         MOV     R2,#0x0
   \   000030   7B00         MOV     R3,#0x0
   \   000032   799C         MOV     R1,#-0x64
   \   000034   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000037   E9           MOV     A,R1
   1366          
   1367            // Get the number of associated items
   1368            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   000038                ; Setup parameters for call to function AssocCount
   \   000038   7A04         MOV     R2,#0x4
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   `??AssocCount::?relay`; Banked call to: AssocCount
   \   00003F   EA           MOV     A,R2
   \   000040   F5..         MOV     ?V10,A
   1369          
   1370            // Total number of items
   1371            maxItems += aItems;
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   25..         ADD     A,?V10
   \   00004B   F0           MOVX    @DPTR,A
   1372          
   1373            // Start with the supplied index
   1374            if ( maxItems > StartIndex )
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F8           MOV     R0,A
   \   000054   E5..         MOV     A,?V2
   \   000056   C3           CLR     C
   \   000057   98           SUBB    A,R0
   \   000058   4003         JC      $+5
   \   00005A   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1375            {
   1376              numItems = maxItems - StartIndex;
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C3           CLR     C
   \   000065   95..         SUBB    A,?V2
   \   000067   F5..         MOV     ?V1,A
   1377          
   1378              // limit the size of the list
   1379              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000069   E5..         MOV     A,?V1
   \   00006B   C3           CLR     C
   \   00006C   9404         SUBB    A,#0x4
   \   00006E   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1380                numItems = ZDO_MAX_LQI_ITEMS;
   \   000070   75..03       MOV     ?V1,#0x3
   1381          
   1382              // Allocate the memory to build the table
   1383              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1384                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000073                ; Setup parameters for call to function osal_mem_alloc
   \   000073   AA..         MOV     R2,?V1
   \   000075   7B00         MOV     R3,#0x0
   \   000077   EA           MOV     A,R2
   \   000078   75F01A       MOV     B,#0x1a
   \   00007B   A4           MUL     AB
   \   00007C   CA           XCH     A,R2
   \   00007D   A8F0         MOV     R0,B
   \   00007F   75F000       MOV     B,#0x0
   \   000082   A4           MUL     AB
   \   000083   28           ADD     A,R0
   \   000084   F8           MOV     R0,A
   \   000085   75F01A       MOV     B,#0x1a
   \   000088   EB           MOV     A,R3
   \   000089   A4           MUL     AB
   \   00008A   28           ADD     A,R0
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00008F   8A..         MOV     ?V8,R2
   \   000091   8B..         MOV     ?V9,R3
   \   000093   85....       MOV     ?V6,?V8
   \   000096   85....       MOV     ?V7,?V9
   1385          
   1386              if ( table != NULL )
   \   000099   E5..         MOV     A,?V6
   \   00009B   45..         ORL     A,?V7
   \   00009D   7003         JNZ     $+5
   \   00009F   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1387              {
   1388                x = 0;
   \   0000A2   75..00       MOV     ?V3,#0x0
   1389                item = table;
   \   0000A5   AE..         MOV     R6,?V6
   \   0000A7   AF..         MOV     R7,?V7
   1390                index = StartIndex;
   \   0000A9   85....       MOV     ?V0,?V2
   1391          
   1392                // Loop through associated items and build list
   1393                for ( ; x < numItems; x++ )
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   0000AC   E5..         MOV     A,?V3
   \   0000AE   C3           CLR     C
   \   0000AF   95..         SUBB    A,?V1
   \   0000B1   4003         JC      $+5
   \   0000B3   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   1394                {
   1395                  if ( index < aItems )
   \   0000B6   E5..         MOV     A,?V0
   \   0000B8   C3           CLR     C
   \   0000B9   95..         SUBB    A,?V10
   \   0000BB   4003         JC      $+5
   \   0000BD   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   1396                  {
   1397                    // get next associated device
   1398                    aDevice = AssocFindDevice( index++ );
   \   0000C0                ; Setup parameters for call to function AssocFindDevice
   \   0000C0   AA..         MOV     R2,?V0
   \   0000C2   7B00         MOV     R3,#0x0
   \   0000C4   12....       LCALL   `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   0000C7   8A..         MOV     ?V8,R2
   \   0000C9   8B..         MOV     ?V9,R3
   \   0000CB   85....       MOV     ?V4,?V8
   \   0000CE   85....       MOV     ?V5,?V9
   \   0000D1   05..         INC     ?V0
   1399          
   1400                    // set basic fields
   1401                    item->panID   = _NIB.nwkPanId;
   \   0000D3   90....       MOV     DPTR,#_NIB + 33
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F8           MOV     R0,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F9           MOV     R1,A
   \   0000DB   8E82         MOV     DPL,R6
   \   0000DD   8F83         MOV     DPH,R7
   \   0000DF   E8           MOV     A,R0
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E9           MOV     A,R1
   \   0000E3   F0           MOVX    @DPTR,A
   1402                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   \   0000E4                ; Setup parameters for call to function sAddrExtCpy
   \   0000E4   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   0000E6   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   0000E8   EE           MOV     A,R6
   \   0000E9   2402         ADD     A,#0x2
   \   0000EB   FA           MOV     R2,A
   \   0000EC   E4           CLR     A
   \   0000ED   3F           ADDC    A,R7
   \   0000EE   FB           MOV     R3,A
   \   0000EF   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1403                    item->nwkAddr = aDevice->shortAddr;
   \   0000F2   85..82       MOV     DPL,?V4
   \   0000F5   85..83       MOV     DPH,?V5
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F8           MOV     R0,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F9           MOV     R1,A
   \   0000FD   EE           MOV     A,R6
   \   0000FE   2412         ADD     A,#0x12
   \   000100   F582         MOV     DPL,A
   \   000102   E4           CLR     A
   \   000103   3F           ADDC    A,R7
   \   000104   F583         MOV     DPH,A
   \   000106   E8           MOV     A,R0
   \   000107   F0           MOVX    @DPTR,A
   \   000108   A3           INC     DPTR
   \   000109   E9           MOV     A,R1
   \   00010A   F0           MOVX    @DPTR,A
   1404                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   \   00010B   EE           MOV     A,R6
   \   00010C   2417         ADD     A,#0x17
   \   00010E   F582         MOV     DPL,A
   \   000110   E4           CLR     A
   \   000111   3F           ADDC    A,R7
   \   000112   F583         MOV     DPH,A
   \   000114   7402         MOV     A,#0x2
   \   000116   F0           MOVX    @DPTR,A
   1405                    item->depth   = 0xFF;
   \   000117   EE           MOV     A,R6
   \   000118   2418         ADD     A,#0x18
   \   00011A   F582         MOV     DPL,A
   \   00011C   E4           CLR     A
   \   00011D   3F           ADDC    A,R7
   \   00011E   F583         MOV     DPH,A
   \   000120   74FF         MOV     A,#-0x1
   \   000122   F0           MOVX    @DPTR,A
   1406                    item->lqi     = aDevice->linkInfo.rxLqi;
   \   000123   85..82       MOV     DPL,?V4
   \   000126   85..83       MOV     DPH,?V5
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   C0E0         PUSH    A
   \   000136   EE           MOV     A,R6
   \   000137   2419         ADD     A,#0x19
   \   000139   F582         MOV     DPL,A
   \   00013B   E4           CLR     A
   \   00013C   3F           ADDC    A,R7
   \   00013D   F583         MOV     DPH,A
   \   00013F   D0E0         POP     A
   \   000141   F0           MOVX    @DPTR,A
   1407          
   1408                    // set extented address
   1409                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   \   000142   7401         MOV     A,#0x1
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   7400         MOV     A,#0x0
   \   000149   F0           MOVX    @DPTR,A
   1410                    nwkEntry.nwkAddr = aDevice->shortAddr;
   \   00014A   85..82       MOV     DPL,?V4
   \   00014D   85..83       MOV     DPH,?V5
   \   000150   E0           MOVX    A,@DPTR
   \   000151   F8           MOV     R0,A
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F9           MOV     R1,A
   \   000155   7402         MOV     A,#0x2
   \   000157   12....       LCALL   ?XSTACK_DISP0_8
   \   00015A   E8           MOV     A,R0
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   A3           INC     DPTR
   \   00015D   E9           MOV     A,R1
   \   00015E   F0           MOVX    @DPTR,A
   1411          
   1412                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   \   00015F                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00015F   7401         MOV     A,#0x1
   \   000161   12....       LCALL   ?XSTACK_DISP101_8
   \   000164   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000167   E9           MOV     A,R1
   \   000168   6401         XRL     A,#0x1
   \   00016A   7015         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1413                    {
   1414                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   \   00016C                ; Setup parameters for call to function sAddrExtCpy
   \   00016C   7404         MOV     A,#0x4
   \   00016E   12....       LCALL   ?XSTACK_DISP0_8
   \   000171   AC82         MOV     R4,DPL
   \   000173   AD83         MOV     R5,DPH
   \   000175   EE           MOV     A,R6
   \   000176   240A         ADD     A,#0xa
   \   000178   FA           MOV     R2,A
   \   000179   E4           CLR     A
   \   00017A   3F           ADDC    A,R7
   \   00017B   FB           MOV     R3,A
   \   00017C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00017F   8010         SJMP    ??ZDO_ProcessMgmtLqiReq_7
   1415                    }
   1416                    else
   1417                    {
   1418                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   000181                ; Setup parameters for call to function osal_memset
   \   000181   7C08         MOV     R4,#0x8
   \   000183   7D00         MOV     R5,#0x0
   \   000185   79FF         MOV     R1,#-0x1
   \   000187   EE           MOV     A,R6
   \   000188   240A         ADD     A,#0xa
   \   00018A   FA           MOV     R2,A
   \   00018B   E4           CLR     A
   \   00018C   3F           ADDC    A,R7
   \   00018D   FB           MOV     R3,A
   \   00018E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1419                    }
   1420          
   1421                    // use association info to set other fields
   1422                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   000191   85..82       MOV     DPL,?V4
   \   000194   85..83       MOV     DPH,?V5
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   7064         JNZ     ??ZDO_ProcessMgmtLqiReq_8
   1423                    {
   1424                      if (  aDevice->shortAddr == 0 )
   \   00019E   85..82       MOV     DPL,?V4
   \   0001A1   85..83       MOV     DPH,?V5
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   F8           MOV     R0,A
   \   0001A6   A3           INC     DPTR
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   F9           MOV     R1,A
   \   0001A9   E8           MOV     A,R0
   \   0001AA   49           ORL     A,R1
   \   0001AB   701A         JNZ     ??ZDO_ProcessMgmtLqiReq_9
   1425                      {
   1426                        item->devType = ZDP_MGMT_DT_COORD;
   \   0001AD   EE           MOV     A,R6
   \   0001AE   2414         ADD     A,#0x14
   \   0001B0   F582         MOV     DPL,A
   \   0001B2   E4           CLR     A
   \   0001B3   3F           ADDC    A,R7
   \   0001B4   F583         MOV     DPH,A
   \   0001B6   7400         MOV     A,#0x0
   \   0001B8   F0           MOVX    @DPTR,A
   1427                        item->depth = 0;
   \   0001B9   EE           MOV     A,R6
   \   0001BA   2418         ADD     A,#0x18
   \   0001BC   F582         MOV     DPL,A
   \   0001BE   E4           CLR     A
   \   0001BF   3F           ADDC    A,R7
   \   0001C0   F583         MOV     DPH,A
   \   0001C2   7400         MOV     A,#0x0
   \   0001C4   F0           MOVX    @DPTR,A
   \   0001C5   8020         SJMP    ??ZDO_ProcessMgmtLqiReq_10
   1428                      }
   1429                      else
   1430                      {
   1431                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   0001C7   EE           MOV     A,R6
   \   0001C8   2414         ADD     A,#0x14
   \   0001CA   F582         MOV     DPL,A
   \   0001CC   E4           CLR     A
   \   0001CD   3F           ADDC    A,R7
   \   0001CE   F583         MOV     DPH,A
   \   0001D0   7401         MOV     A,#0x1
   \   0001D2   F0           MOVX    @DPTR,A
   1432                        item->depth = _NIB.nodeDepth - 1;
   \   0001D3   90....       MOV     DPTR,#_NIB + 52
   \   0001D6   E0           MOVX    A,@DPTR
   \   0001D7   24FF         ADD     A,#-0x1
   \   0001D9   C0E0         PUSH    A
   \   0001DB   EE           MOV     A,R6
   \   0001DC   2418         ADD     A,#0x18
   \   0001DE   F582         MOV     DPL,A
   \   0001E0   E4           CLR     A
   \   0001E1   3F           ADDC    A,R7
   \   0001E2   F583         MOV     DPH,A
   \   0001E4   D0E0         POP     A
   \   0001E6   F0           MOVX    @DPTR,A
   1433                      }
   1434          
   1435                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0001E7   EE           MOV     A,R6
   \   0001E8   2415         ADD     A,#0x15
   \   0001EA   F582         MOV     DPL,A
   \   0001EC   E4           CLR     A
   \   0001ED   3F           ADDC    A,R7
   \   0001EE   F583         MOV     DPH,A
   \   0001F0   7402         MOV     A,#0x2
   \   0001F2   F0           MOVX    @DPTR,A
   1436                      item->relation = ZDP_MGMT_REL_PARENT;
   \   0001F3   EE           MOV     A,R6
   \   0001F4   2416         ADD     A,#0x16
   \   0001F6   F582         MOV     DPL,A
   \   0001F8   E4           CLR     A
   \   0001F9   3F           ADDC    A,R7
   \   0001FA   F583         MOV     DPH,A
   \   0001FC   7400         MOV     A,#0x0
   \   0001FE   F0           MOVX    @DPTR,A
   \   0001FF   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   1437                    }
   1438                    else
   1439                    {
   1440                      // If not parent, then it's a child
   1441                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   000202   90....       MOV     DPTR,#_NIB + 52
   \   000205   E0           MOVX    A,@DPTR
   \   000206   2401         ADD     A,#0x1
   \   000208   C0E0         PUSH    A
   \   00020A   EE           MOV     A,R6
   \   00020B   2418         ADD     A,#0x18
   \   00020D   F582         MOV     DPL,A
   \   00020F   E4           CLR     A
   \   000210   3F           ADDC    A,R7
   \   000211   F583         MOV     DPH,A
   \   000213   D0E0         POP     A
   \   000215   F0           MOVX    @DPTR,A
   1442          
   1443                      if ( aDevice->nodeRelation < CHILD_FFD )
   \   000216   85..82       MOV     DPL,?V4
   \   000219   85..83       MOV     DPH,?V5
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   E0           MOVX    A,@DPTR
   \   000221   C3           CLR     C
   \   000222   9403         SUBB    A,#0x3
   \   000224   5037         JNC     ??ZDO_ProcessMgmtLqiReq_12
   1444                      {
   1445                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   000226   EE           MOV     A,R6
   \   000227   2414         ADD     A,#0x14
   \   000229   F582         MOV     DPL,A
   \   00022B   E4           CLR     A
   \   00022C   3F           ADDC    A,R7
   \   00022D   F583         MOV     DPH,A
   \   00022F   7402         MOV     A,#0x2
   \   000231   F0           MOVX    @DPTR,A
   1446          
   1447                        if ( aDevice->nodeRelation == CHILD_RFD )
   \   000232   85..82       MOV     DPL,?V4
   \   000235   85..83       MOV     DPH,?V5
   \   000238   A3           INC     DPTR
   \   000239   A3           INC     DPTR
   \   00023A   A3           INC     DPTR
   \   00023B   A3           INC     DPTR
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   6401         XRL     A,#0x1
   \   00023F   700E         JNZ     ??ZDO_ProcessMgmtLqiReq_13
   1448                        {
   1449                          item->rxOnIdle = FALSE;
   \   000241   EE           MOV     A,R6
   \   000242   2415         ADD     A,#0x15
   \   000244   F582         MOV     DPL,A
   \   000246   E4           CLR     A
   \   000247   3F           ADDC    A,R7
   \   000248   F583         MOV     DPH,A
   \   00024A   7400         MOV     A,#0x0
   \   00024C   F0           MOVX    @DPTR,A
   \   00024D   8043         SJMP    ??ZDO_ProcessMgmtLqiReq_14
   1450                        }
   1451                        else
   1452                        {
   1453                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   00024F   EE           MOV     A,R6
   \   000250   2415         ADD     A,#0x15
   \   000252   F582         MOV     DPL,A
   \   000254   E4           CLR     A
   \   000255   3F           ADDC    A,R7
   \   000256   F583         MOV     DPH,A
   \   000258   7401         MOV     A,#0x1
   \   00025A   F0           MOVX    @DPTR,A
   \   00025B   8035         SJMP    ??ZDO_ProcessMgmtLqiReq_14
   1454                        }
   1455                      }
   1456                      else
   1457                      {
   1458                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   00025D   EE           MOV     A,R6
   \   00025E   2414         ADD     A,#0x14
   \   000260   F582         MOV     DPL,A
   \   000262   E4           CLR     A
   \   000263   3F           ADDC    A,R7
   \   000264   F583         MOV     DPH,A
   \   000266   7401         MOV     A,#0x1
   \   000268   F0           MOVX    @DPTR,A
   1459          
   1460                        if ( aDevice->nodeRelation == CHILD_FFD )
   \   000269   85..82       MOV     DPL,?V4
   \   00026C   85..83       MOV     DPH,?V5
   \   00026F   A3           INC     DPTR
   \   000270   A3           INC     DPTR
   \   000271   A3           INC     DPTR
   \   000272   A3           INC     DPTR
   \   000273   E0           MOVX    A,@DPTR
   \   000274   6403         XRL     A,#0x3
   \   000276   700E         JNZ     ??ZDO_ProcessMgmtLqiReq_15
   1461                        {
   1462                          item->rxOnIdle = FALSE;
   \   000278   EE           MOV     A,R6
   \   000279   2415         ADD     A,#0x15
   \   00027B   F582         MOV     DPL,A
   \   00027D   E4           CLR     A
   \   00027E   3F           ADDC    A,R7
   \   00027F   F583         MOV     DPH,A
   \   000281   7400         MOV     A,#0x0
   \   000283   F0           MOVX    @DPTR,A
   \   000284   800C         SJMP    ??ZDO_ProcessMgmtLqiReq_14
   1463                        }
   1464                        else
   1465                        {
   1466                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   000286   EE           MOV     A,R6
   \   000287   2415         ADD     A,#0x15
   \   000289   F582         MOV     DPL,A
   \   00028B   E4           CLR     A
   \   00028C   3F           ADDC    A,R7
   \   00028D   F583         MOV     DPH,A
   \   00028F   7401         MOV     A,#0x1
   \   000291   F0           MOVX    @DPTR,A
   1467                        }
   1468                      }
   1469          
   1470                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   000292   EE           MOV     A,R6
   \   000293   2416         ADD     A,#0x16
   \   000295   F582         MOV     DPL,A
   \   000297   E4           CLR     A
   \   000298   3F           ADDC    A,R7
   \   000299   F583         MOV     DPH,A
   \   00029B   7401         MOV     A,#0x1
   \   00029D   F0           MOVX    @DPTR,A
   1471                    }
   1472          
   1473                    item++;
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   00029E   EE           MOV     A,R6
   \   00029F   241A         ADD     A,#0x1a
   \   0002A1   FE           MOV     R6,A
   \   0002A2   5001         JNC     ??ZDO_ProcessMgmtLqiReq_16
   \   0002A4   0F           INC     R7
   1474                  }
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0002A5   05..         INC     ?V3
   \   0002A7   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   1475                  else
   1476                  {
   1477                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   0002AA   E5..         MOV     A,?V10
   \   0002AC   C3           CLR     C
   \   0002AD   95..         SUBB    A,?V2
   \   0002AF   4005         JC      ??ZDO_ProcessMgmtLqiReq_17
   1478                      // Start with 1st neighbor
   1479                      index = 0;
   \   0002B1   75..00       MOV     ?V0,#0x0
   \   0002B4   8007         SJMP    ??ZDO_ProcessMgmtLqiReq_4
   1480                    else
   1481                      // Start with >1st neighbor
   1482                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0002B6   E5..         MOV     A,?V2
   \   0002B8   C3           CLR     C
   \   0002B9   95..         SUBB    A,?V10
   \   0002BB   F5..         MOV     ?V0,A
   1483                    break;
   1484                  }
   1485                }
   1486          
   1487                // Loop through neighbor items and finish list
   1488                for ( ; x < numItems; x++ )
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   0002BD   E5..         MOV     A,?V3
   \   0002BF   C3           CLR     C
   \   0002C0   95..         SUBB    A,?V1
   \   0002C2   4003         JC      $+5
   \   0002C4   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1489                {
   1490                  // Add next neighbor table item
   1491                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   \   0002C7                ; Setup parameters for call to function NLME_GetRequest
   \   0002C7   740E         MOV     A,#0xe
   \   0002C9   12....       LCALL   ?XSTACK_DISP102_8
   \   0002CC   AA..         MOV     R2,?V0
   \   0002CE   7B00         MOV     R3,#0x0
   \   0002D0   7987         MOV     R1,#-0x79
   \   0002D2   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0002D5   E9           MOV     A,R1
   \   0002D6   05..         INC     ?V0
   1492          
   1493                  // set ZDP_MgmtLqiItem_t fields
   1494                  item->panID    = entry.panId;
   \   0002D8   7418         MOV     A,#0x18
   \   0002DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DD   E0           MOVX    A,@DPTR
   \   0002DE   F8           MOV     R0,A
   \   0002DF   A3           INC     DPTR
   \   0002E0   E0           MOVX    A,@DPTR
   \   0002E1   F9           MOV     R1,A
   \   0002E2   8E82         MOV     DPL,R6
   \   0002E4   8F83         MOV     DPH,R7
   \   0002E6   E8           MOV     A,R0
   \   0002E7   F0           MOVX    @DPTR,A
   \   0002E8   A3           INC     DPTR
   \   0002E9   E9           MOV     A,R1
   \   0002EA   F0           MOVX    @DPTR,A
   1495                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   \   0002EB                ; Setup parameters for call to function sAddrExtCpy
   \   0002EB   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   0002ED   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   0002EF   EE           MOV     A,R6
   \   0002F0   2402         ADD     A,#0x2
   \   0002F2   FA           MOV     R2,A
   \   0002F3   E4           CLR     A
   \   0002F4   3F           ADDC    A,R7
   \   0002F5   FB           MOV     R3,A
   \   0002F6   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1496                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \   0002F9                ; Setup parameters for call to function osal_memset
   \   0002F9   7C08         MOV     R4,#0x8
   \   0002FB   7D00         MOV     R5,#0x0
   \   0002FD   79FF         MOV     R1,#-0x1
   \   0002FF   EE           MOV     A,R6
   \   000300   240A         ADD     A,#0xa
   \   000302   FA           MOV     R2,A
   \   000303   E4           CLR     A
   \   000304   3F           ADDC    A,R7
   \   000305   FB           MOV     R3,A
   \   000306   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1497                  item->nwkAddr  = entry.neighborAddress;
   \   000309   740E         MOV     A,#0xe
   \   00030B   12....       LCALL   ?XSTACK_DISP0_8
   \   00030E   E0           MOVX    A,@DPTR
   \   00030F   F8           MOV     R0,A
   \   000310   A3           INC     DPTR
   \   000311   E0           MOVX    A,@DPTR
   \   000312   F9           MOV     R1,A
   \   000313   EE           MOV     A,R6
   \   000314   2412         ADD     A,#0x12
   \   000316   F582         MOV     DPL,A
   \   000318   E4           CLR     A
   \   000319   3F           ADDC    A,R7
   \   00031A   F583         MOV     DPH,A
   \   00031C   E8           MOV     A,R0
   \   00031D   F0           MOVX    @DPTR,A
   \   00031E   A3           INC     DPTR
   \   00031F   E9           MOV     A,R1
   \   000320   F0           MOVX    @DPTR,A
   1498                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   \   000321   EE           MOV     A,R6
   \   000322   2415         ADD     A,#0x15
   \   000324   F582         MOV     DPL,A
   \   000326   E4           CLR     A
   \   000327   3F           ADDC    A,R7
   \   000328   F583         MOV     DPH,A
   \   00032A   7402         MOV     A,#0x2
   \   00032C   F0           MOVX    @DPTR,A
   1499                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   \   00032D   EE           MOV     A,R6
   \   00032E   2416         ADD     A,#0x16
   \   000330   F582         MOV     DPL,A
   \   000332   E4           CLR     A
   \   000333   3F           ADDC    A,R7
   \   000334   F583         MOV     DPH,A
   \   000336   7403         MOV     A,#0x3
   \   000338   F0           MOVX    @DPTR,A
   1500                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   \   000339   EE           MOV     A,R6
   \   00033A   2417         ADD     A,#0x17
   \   00033C   F582         MOV     DPL,A
   \   00033E   E4           CLR     A
   \   00033F   3F           ADDC    A,R7
   \   000340   F583         MOV     DPH,A
   \   000342   7402         MOV     A,#0x2
   \   000344   F0           MOVX    @DPTR,A
   1501                  item->depth    = 0xFF;
   \   000345   EE           MOV     A,R6
   \   000346   2418         ADD     A,#0x18
   \   000348   F582         MOV     DPL,A
   \   00034A   E4           CLR     A
   \   00034B   3F           ADDC    A,R7
   \   00034C   F583         MOV     DPH,A
   \   00034E   74FF         MOV     A,#-0x1
   \   000350   F0           MOVX    @DPTR,A
   1502                  item->lqi      = entry.linkInfo.rxLqi;
   \   000351   741D         MOV     A,#0x1d
   \   000353   12....       LCALL   ?XSTACK_DISP0_8
   \   000356   E0           MOVX    A,@DPTR
   \   000357   C0E0         PUSH    A
   \   000359   EE           MOV     A,R6
   \   00035A   2419         ADD     A,#0x19
   \   00035C   F582         MOV     DPL,A
   \   00035E   E4           CLR     A
   \   00035F   3F           ADDC    A,R7
   \   000360   F583         MOV     DPH,A
   \   000362   D0E0         POP     A
   \   000364   F0           MOVX    @DPTR,A
   1503          
   1504                  if ( item->nwkAddr == 0 )
   \   000365   EE           MOV     A,R6
   \   000366   2412         ADD     A,#0x12
   \   000368   F582         MOV     DPL,A
   \   00036A   E4           CLR     A
   \   00036B   3F           ADDC    A,R7
   \   00036C   F583         MOV     DPH,A
   \   00036E   E0           MOVX    A,@DPTR
   \   00036F   F8           MOV     R0,A
   \   000370   A3           INC     DPTR
   \   000371   E0           MOVX    A,@DPTR
   \   000372   F9           MOV     R1,A
   \   000373   E8           MOV     A,R0
   \   000374   49           ORL     A,R1
   \   000375   700E         JNZ     ??ZDO_ProcessMgmtLqiReq_18
   1505                  {
   1506                    item->devType = ZDP_MGMT_DT_COORD;
   \   000377   EE           MOV     A,R6
   \   000378   2414         ADD     A,#0x14
   \   00037A   F582         MOV     DPL,A
   \   00037C   E4           CLR     A
   \   00037D   3F           ADDC    A,R7
   \   00037E   F583         MOV     DPH,A
   \   000380   7400         MOV     A,#0x0
   \   000382   F0           MOVX    @DPTR,A
   \   000383   800C         SJMP    ??ZDO_ProcessMgmtLqiReq_19
   1507                  }
   1508                  else
   1509                  {
   1510                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   000385   EE           MOV     A,R6
   \   000386   2414         ADD     A,#0x14
   \   000388   F582         MOV     DPL,A
   \   00038A   E4           CLR     A
   \   00038B   3F           ADDC    A,R7
   \   00038C   F583         MOV     DPH,A
   \   00038E   7401         MOV     A,#0x1
   \   000390   F0           MOVX    @DPTR,A
   1511                  }
   1512          
   1513                  item++;
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   000391   EE           MOV     A,R6
   \   000392   241A         ADD     A,#0x1a
   \   000394   FE           MOV     R6,A
   \   000395   5001         JNC     ??ZDO_ProcessMgmtLqiReq_20
   \   000397   0F           INC     R7
   1514                }
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   000398   05..         INC     ?V3
   \   00039A   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   1515              }
   1516            }
   1517            else
   1518            {
   1519              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   00039D   75..00       MOV     ?V1,#0x0
   1520            }
   1521          
   1522            // Send response
   1523            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1524                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   0003A0                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   0003A0   75..00       MOV     ?V8,#0x0
   \   0003A3   78..         MOV     R0,#?V8
   \   0003A5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003A8   78..         MOV     R0,#?V6
   \   0003AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003AD   E5..         MOV     A,?V1
   \   0003AF   F5..         MOV     ?V8,A
   \   0003B1   78..         MOV     R0,#?V8
   \   0003B3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003B6   E5..         MOV     A,?V2
   \   0003B8   F5..         MOV     ?V8,A
   \   0003BA   78..         MOV     R0,#?V8
   \   0003BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003BF   7405         MOV     A,#0x5
   \   0003C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C4   E0           MOVX    A,@DPTR
   \   0003C5   FD           MOV     R5,A
   \   0003C6   7C00         MOV     R4,#0x0
   \   0003C8   E5..         MOV     A,?V12
   \   0003CA   2402         ADD     A,#0x2
   \   0003CC   FA           MOV     R2,A
   \   0003CD   E4           CLR     A
   \   0003CE   35..         ADDC    A,?V13
   \   0003D0   FB           MOV     R3,A
   \   0003D1   E5..         MOV     A,?V12
   \   0003D3   240F         ADD     A,#0xf
   \   0003D5   F582         MOV     DPL,A
   \   0003D7   E4           CLR     A
   \   0003D8   35..         ADDC    A,?V13
   \   0003DA   F583         MOV     DPH,A
   \   0003DC   E0           MOVX    A,@DPTR
   \   0003DD   F9           MOV     R1,A
   \   0003DE   12....       LCALL   `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   0003E1   7405         MOV     A,#0x5
   \   0003E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003E6   E9           MOV     A,R1
   1525          
   1526            if ( table )
   \   0003E7   E5..         MOV     A,?V6
   \   0003E9   45..         ORL     A,?V7
   \   0003EB   6007         JZ      ??ZDO_ProcessMgmtLqiReq_21
   1527            {
   1528              osal_mem_free( table );
   \   0003ED                ; Setup parameters for call to function osal_mem_free
   \   0003ED   AA..         MOV     R2,?V6
   \   0003EF   AB..         MOV     R3,?V7
   \   0003F1   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1529            }
   1530          }
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   0003F4   7425         MOV     A,#0x25
   \   0003F6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003F9   7F0E         MOV     R7,#0xe
   \   0003FB   02....       LJMP    ?BANKED_LEAVE_XDATA
   1531          
   1532          /*********************************************************************
   1533           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1534           *
   1535           * @brief       This function handles parsing the incoming Management
   1536           *              Network Discover request and starts the request.
   1537           *
   1538           * @param       inMsg - incoming message (request)
   1539           *
   1540           * @return      none
   1541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1542          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1543          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1544            NLME_ScanFields_t scan;
   1545            uint8             index;
   1546            uint8             *msg;
   1547          
   1548            msg = inMsg->asdu;
   \   00000E   E5..         MOV     A,?V0
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V1
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   FE           MOV     R6,A
   \   000020   E9           MOV     A,R1
   \   000021   FF           MOV     R7,A
   1549            scan.channels = osal_build_uint32( msg, 4 );
   \   000022                ; Setup parameters for call to function osal_build_uint32
   \   000022   7904         MOV     R1,#0x4
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00002B   EA           MOV     A,R2
   \   00002C   F8           MOV     R0,A
   \   00002D   EB           MOV     A,R3
   \   00002E   F9           MOV     R1,A
   \   00002F   EC           MOV     A,R4
   \   000030   FA           MOV     R2,A
   \   000031   ED           MOV     A,R5
   \   000032   FB           MOV     R3,A
   \   000033   85..82       MOV     DPL,?XSP + 0
   \   000036   85..83       MOV     DPH,?XSP + 1
   \   000039   12....       LCALL   ?XSTORE_R0123
   1550            msg += 4;
   \   00003C   EE           MOV     A,R6
   \   00003D   2404         ADD     A,#0x4
   \   00003F   FE           MOV     R6,A
   \   000040   5001         JNC     ??ZDO_ProcessMgmtNwkDiscReq_0
   \   000042   0F           INC     R7
   1551            scan.duration = *msg++;
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   E0           MOVX    A,@DPTR
   \   000048   C0E0         PUSH    A
   \   00004A   7404         MOV     A,#0x4
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   AE82         MOV     R6,DPL
   \   000059   AF83         MOV     R7,DPH
   1552            index         = *msg;
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V2,A
   1553            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   000062   7405         MOV     A,#0x5
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   7401         MOV     A,#0x1
   \   000069   F0           MOVX    @DPTR,A
   1554            scan.scanApp  = NLME_DISC_SCAN;
   \   00006A   7406         MOV     A,#0x6
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   7401         MOV     A,#0x1
   \   000071   F0           MOVX    @DPTR,A
   1555          
   1556            // Save off the information to be used for the response
   1557            zdappMgmtNwkDiscReqInProgress          = true;
   \   000072   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000075   7401         MOV     A,#0x1
   \   000077   F0           MOVX    @DPTR,A
   1558            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000078   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   00007B   7402         MOV     A,#0x2
   \   00007D   F0           MOVX    @DPTR,A
   1559            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   00007E   85..82       MOV     DPL,?V0
   \   000081   85..83       MOV     DPH,?V1
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F8           MOV     R0,A
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00008E   E8           MOV     A,R0
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   E9           MOV     A,R1
   \   000092   F0           MOVX    @DPTR,A
   1560            zdappMgmtNwkDiscStartIndex             = index;
   \   000093   E5..         MOV     A,?V2
   \   000095   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000098   F0           MOVX    @DPTR,A
   1561            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000099   E5..         MOV     A,?V0
   \   00009B   240F         ADD     A,#0xf
   \   00009D   F582         MOV     DPL,A
   \   00009F   E4           CLR     A
   \   0000A0   35..         ADDC    A,?V1
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   0000A8   F0           MOVX    @DPTR,A
   1562          
   1563            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   0000A9                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   0000A9   AA..         MOV     R2,?XSP + 0
   \   0000AB   AB..         MOV     R3,?XSP + 1
   \   0000AD   12....       LCALL   `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   0000B0   E9           MOV     A,R1
   \   0000B1   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_1
   1564            {
   1565              NLME_NwkDiscTerm();
   \   0000B3                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000B3   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1566          
   1567              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1568            }
   1569          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_1:
   \   0000B6   7407         MOV     A,#0x7
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   7F03         MOV     R7,#0x3
   \   0000BD   02....       LJMP    ?BANKED_LEAVE_XDATA
   1570          
   1571          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1572          /*********************************************************************
   1573           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1574           *
   1575           * @brief       This function finishes the processing of the Management
   1576           *              Network Discover Request and generates the response.
   1577           *
   1578           *   Note:      This function will limit the number of items returned
   1579           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1580           *
   1581           * @param       ResultCountSrcAddr - source of the request
   1582           * @param       msg - pointer to incoming message
   1583           * @param       SecurityUse -
   1584           *
   1585           * @return      none
   1586           */
   1587          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1588          {
   1589            byte count, i, ResultCount = 0;
   1590            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1591          
   1592            NetworkList = nwk_getNwkDescList();
   1593          
   1594            // Count the number of nwk descriptors in the list
   1595            pList = nwk_getNwkDescList();
   1596            while (pList)
   1597            {
   1598              ResultCount++;
   1599              pList = pList->nextDesc;
   1600            }
   1601          
   1602            if ( ZSTACK_ROUTER_BUILD )
   1603            {
   1604              // Look for my PanID.
   1605              pList = nwk_getNwkDescList();
   1606              while ( pList )
   1607              {
   1608                if ( pList->panId == _NIB.nwkPanId )
   1609                {
   1610                  break;
   1611                }
   1612          
   1613          
   1614                if ( !pList->nextDesc )
   1615                {
   1616                  break;
   1617                }
   1618                pList = pList->nextDesc;
   1619              }
   1620          
   1621          
   1622              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1623              // prepend it.
   1624              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1625              {
   1626                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1627                if ( newDesc )
   1628                {
   1629                  byte pJoin;
   1630          
   1631                  newDesc->panId = _NIB.nwkPanId;
   1632                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1633                  newDesc->version = NLME_GetProtocolVersion();
   1634                  newDesc->stackProfile = zgStackProfile;
   1635          
   1636                  //Extended PanID
   1637                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1638          
   1639                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1640                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1641                                                     INVALID_NODE_ADDR);
   1642          
   1643                  newDesc->nextDesc = NetworkList;
   1644                  NetworkList = newDesc;
   1645                  ResultCount++;
   1646                }
   1647              }
   1648            }
   1649          
   1650            // Calc the count and apply a max count.
   1651            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1652            {
   1653              count = 0;
   1654            }
   1655            else
   1656            {
   1657              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1658              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1659              {
   1660                count = ZDO_MAX_NWKDISC_ITEMS;
   1661              }
   1662          
   1663              // Move the list pointer up to the start index.
   1664              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1665              {
   1666                NetworkList = NetworkList->nextDesc;
   1667              }
   1668            }
   1669          
   1670            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1671                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1672                                zdappMgmtNwkDiscStartIndex,
   1673                                count,
   1674                                NetworkList,
   1675                                false );
   1676          
   1677            if ( ZSTACK_ROUTER_BUILD )
   1678            {
   1679              if ( newDesc != NULL )
   1680              {
   1681                osal_mem_free( newDesc );
   1682              }
   1683            }
   1684          
   1685            NLME_NwkDiscTerm();
   1686          }
   1687          #endif
   1688          
   1689          /*********************************************************************
   1690           * @fn          ZDO_ProcessMgmtRtgReq
   1691           *
   1692           * @brief       This function finishes the processing of the Management
   1693           *              Routing Request and generates the response.
   1694           *
   1695           *   Note:      This function will limit the number of items returned
   1696           *              to ZDO_MAX_RTG_ITEMS items.
   1697           *
   1698           * @param       inMsg - incoming message (request)
   1699           *
   1700           * @return      none
   1701           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1702          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1703          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   1704            byte x;
   1705            byte maxNumItems;
   1706            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1707            uint8 *pBuf = NULL;
   \   000010   75..00       MOV     ?V6,#0x0
   \   000013   75..00       MOV     ?V7,#0x0
   1708            rtgItem_t *pList;
   1709            uint8 StartIndex = inMsg->asdu[0];
   \   000016   E5..         MOV     A,?V4
   \   000018   2413         ADD     A,#0x13
   \   00001A   F582         MOV     DPL,A
   \   00001C   E4           CLR     A
   \   00001D   35..         ADDC    A,?V5
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F583         MOV     DPH,A
   \   000027   8882         MOV     DPL,R0
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FF           MOV     R7,A
   1710          
   1711            // Get the number of table items
   1712            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   00002B                ; Setup parameters for call to function NLME_GetRequest
   \   00002B   AC..         MOV     R4,?XSP + 0
   \   00002D   AD..         MOV     R5,?XSP + 1
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \   000033   799D         MOV     R1,#-0x63
   \   000035   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000038   E9           MOV     A,R1
   1713          
   1714            if ( maxNumItems > StartIndex )
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F8           MOV     R0,A
   \   000041   EF           MOV     A,R7
   \   000042   C3           CLR     C
   \   000043   98           SUBB    A,R0
   \   000044   4003         JC      $+5
   \   000046   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
   1715            {
   1716              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C3           CLR     C
   \   000051   9F           SUBB    A,R7
   \   000052   FE           MOV     R6,A
   1717          
   1718              // limit the size of the list
   1719              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   000053   EE           MOV     A,R6
   \   000054   C3           CLR     C
   \   000055   940B         SUBB    A,#0xb
   \   000057   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1720              {
   1721                numItems = ZDO_MAX_RTG_ITEMS;
   \   000059   7E0A         MOV     R6,#0xa
   1722              }
   1723          
   1724              // Allocate the memory to build the table
   1725              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   00005B                ; Setup parameters for call to function osal_mem_alloc
   \   00005B   EE           MOV     A,R6
   \   00005C   FA           MOV     R2,A
   \   00005D   7B00         MOV     R3,#0x0
   \   00005F   EA           MOV     A,R2
   \   000060   75F007       MOV     B,#0x7
   \   000063   A4           MUL     AB
   \   000064   CA           XCH     A,R2
   \   000065   A8F0         MOV     R0,B
   \   000067   75F000       MOV     B,#0x0
   \   00006A   A4           MUL     AB
   \   00006B   28           ADD     A,R0
   \   00006C   F8           MOV     R0,A
   \   00006D   75F007       MOV     B,#0x7
   \   000070   EB           MOV     A,R3
   \   000071   A4           MUL     AB
   \   000072   28           ADD     A,R0
   \   000073   FB           MOV     R3,A
   \   000074   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000077   8A..         MOV     ?V8,R2
   \   000079   8B..         MOV     ?V9,R3
   \   00007B   85....       MOV     ?V6,?V8
   \   00007E   85....       MOV     ?V7,?V9
   1726          
   1727              if ( pBuf != NULL )
   \   000081   E5..         MOV     A,?V6
   \   000083   45..         ORL     A,?V7
   \   000085   7003         JNZ     $+5
   \   000087   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_2 & 0xFFFF
   1728              {
   1729                // Convert buffer to list
   1730                pList = (rtgItem_t *)pBuf;
   \   00008A   85....       MOV     ?V0,?V6
   \   00008D   85....       MOV     ?V1,?V7
   1731          
   1732                // Loop through items and build list
   1733                for ( x = 0; x < numItems; x++ )
   \   000090   75..00       MOV     ?V2,#0x0
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   000093   E5..         MOV     A,?V2
   \   000095   C3           CLR     C
   \   000096   9E           SUBB    A,R6
   \   000097   507E         JNC     ??ZDO_ProcessMgmtRtgReq_0
   1734                {
   1735                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   \   000099                ; Setup parameters for call to function NLME_GetRequest
   \   000099   AC..         MOV     R4,?V0
   \   00009B   AD..         MOV     R5,?V1
   \   00009D   AA..         MOV     R2,?V2
   \   00009F   7B00         MOV     R3,#0x0
   \   0000A1   EF           MOV     A,R7
   \   0000A2   F8           MOV     R0,A
   \   0000A3   7900         MOV     R1,#0x0
   \   0000A5   EA           MOV     A,R2
   \   0000A6   28           ADD     A,R0
   \   0000A7   FA           MOV     R2,A
   \   0000A8   EB           MOV     A,R3
   \   0000A9   39           ADDC    A,R1
   \   0000AA   FB           MOV     R3,A
   \   0000AB   798B         MOV     R1,#-0x75
   \   0000AD   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0000B0   E9           MOV     A,R1
   1736          
   1737                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1738                  switch( pList->status )
   \   0000B1   85..82       MOV     DPL,?V0
   \   0000B4   85..83       MOV     DPH,?V1
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   14           DEC     A
   \   0000BE   6008         JZ      ??ZDO_ProcessMgmtRtgReq_4
   \   0000C0   14           DEC     A
   \   0000C1   6015         JZ      ??ZDO_ProcessMgmtRtgReq_5
   \   0000C3   14           DEC     A
   \   0000C4   6022         JZ      ??ZDO_ProcessMgmtRtgReq_6
   \   0000C6   8030         SJMP    ??ZDO_ProcessMgmtRtgReq_7
   1739                  {
   1740                    case RT_ACTIVE:
   1741                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   0000C8   85..82       MOV     DPL,?V0
   \   0000CB   85..83       MOV     DPH,?V1
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   7400         MOV     A,#0x0
   \   0000D5   F0           MOVX    @DPTR,A
   1742                      break;
   \   0000D6   802E         SJMP    ??ZDO_ProcessMgmtRtgReq_8
   1743          
   1744                    case RT_DISC:
   1745                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   0000D8   85..82       MOV     DPL,?V0
   \   0000DB   85..83       MOV     DPH,?V1
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   7401         MOV     A,#0x1
   \   0000E5   F0           MOVX    @DPTR,A
   1746                      break;
   \   0000E6   801E         SJMP    ??ZDO_ProcessMgmtRtgReq_8
   1747          
   1748                    case RT_LINK_FAIL:
   1749                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   0000E8   85..82       MOV     DPL,?V0
   \   0000EB   85..83       MOV     DPH,?V1
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   7402         MOV     A,#0x2
   \   0000F5   F0           MOVX    @DPTR,A
   1750                      break;
   \   0000F6   800E         SJMP    ??ZDO_ProcessMgmtRtgReq_8
   1751          
   1752                    case RT_INIT:
   1753                    case RT_REPAIR:
   1754                    default:
   1755                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   0000F8   85..82       MOV     DPL,?V0
   \   0000FB   85..83       MOV     DPH,?V1
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   7403         MOV     A,#0x3
   \   000105   F0           MOVX    @DPTR,A
   1756                      break;
   1757                  }
   1758          
   1759                  // Increment pointer to next record
   1760                  pList++;
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   000106   E5..         MOV     A,?V0
   \   000108   2407         ADD     A,#0x7
   \   00010A   F5..         MOV     ?V0,A
   \   00010C   5002         JNC     ??ZDO_ProcessMgmtRtgReq_9
   \   00010E   05..         INC     ?V1
   1761                }
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   000110   05..         INC     ?V2
   \   000112   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_3 & 0xFFFF
   1762              }
   1763              else
   1764              {
   1765                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   000115   7E00         MOV     R6,#0x0
   1766              }
   1767            }
   1768          
   1769            // Send response
   1770            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1771                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   000117                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   000117   75..00       MOV     ?V3,#0x0
   \   00011A   78..         MOV     R0,#?V3
   \   00011C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011F   78..         MOV     R0,#?V6
   \   000121   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000124   EE           MOV     A,R6
   \   000125   F5..         MOV     ?V3,A
   \   000127   78..         MOV     R0,#?V3
   \   000129   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012C   EF           MOV     A,R7
   \   00012D   F5..         MOV     ?V3,A
   \   00012F   78..         MOV     R0,#?V3
   \   000131   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000134   7405         MOV     A,#0x5
   \   000136   12....       LCALL   ?XSTACK_DISP0_8
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   FD           MOV     R5,A
   \   00013B   7C00         MOV     R4,#0x0
   \   00013D   E5..         MOV     A,?V4
   \   00013F   2402         ADD     A,#0x2
   \   000141   FA           MOV     R2,A
   \   000142   E4           CLR     A
   \   000143   35..         ADDC    A,?V5
   \   000145   FB           MOV     R3,A
   \   000146   E5..         MOV     A,?V4
   \   000148   240F         ADD     A,#0xf
   \   00014A   F582         MOV     DPL,A
   \   00014C   E4           CLR     A
   \   00014D   35..         ADDC    A,?V5
   \   00014F   F583         MOV     DPH,A
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F9           MOV     R1,A
   \   000153   12....       LCALL   `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   000156   7405         MOV     A,#0x5
   \   000158   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015B   E9           MOV     A,R1
   1772          
   1773            if ( pBuf != NULL )
   \   00015C   E5..         MOV     A,?V6
   \   00015E   45..         ORL     A,?V7
   \   000160   6007         JZ      ??ZDO_ProcessMgmtRtgReq_10
   1774            {
   1775              osal_mem_free( pBuf );
   \   000162                ; Setup parameters for call to function osal_mem_free
   \   000162   AA..         MOV     R2,?V6
   \   000164   AB..         MOV     R3,?V7
   \   000166   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1776            }
   1777          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   000169   7401         MOV     A,#0x1
   \   00016B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016E   7F0A         MOV     R7,#0xa
   \   000170   02....       LJMP    ?BANKED_LEAVE_XDATA
   1778          
   1779          /*********************************************************************
   1780           * @fn          ZDO_ProcessMgmtBindReq
   1781           *
   1782           * @brief       This function finishes the processing of the Management
   1783           *              Bind Request and generates the response.
   1784           *
   1785           *   Note:      This function will limit the number of items returned
   1786           *              to ZDO_MAX_BIND_ITEMS items.
   1787           *
   1788           * @param       inMsg - incoming message (request)
   1789           *
   1790           * @return      none
   1791           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1792          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1793          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   1794          #if defined ( REFLECTOR )
   1795            byte x;
   1796            uint16 maxNumItems;
   1797            uint16 numItems;
   1798            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV     ?V8,#0x0
   \   000011   75..00       MOV     ?V9,#0x0
   1799            apsBindingItem_t *pList;
   1800            uint8 StartIndex = inMsg->asdu[0];
   \   000014   E5..         MOV     A,?V6
   \   000016   2413         ADD     A,#0x13
   \   000018   F582         MOV     DPL,A
   \   00001A   E4           CLR     A
   \   00001B   35..         ADDC    A,?V7
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F583         MOV     DPH,A
   \   000025   8882         MOV     DPL,R0
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V1,A
   1801            uint8 status;
   1802          
   1803            // Get the number of table items
   1804            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   00002A                ; Setup parameters for call to function APSME_GetRequest
   \   00002A   AC..         MOV     R4,?XSP + 0
   \   00002C   AD..         MOV     R5,?XSP + 1
   \   00002E   7A00         MOV     R2,#0x0
   \   000030   7B00         MOV     R3,#0x0
   \   000032   79A3         MOV     R1,#-0x5d
   \   000034   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   000037   E9           MOV     A,R1
   1805          
   1806            if ( maxNumItems > StartIndex )
   \   000038   A8..         MOV     R0,?V1
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FB           MOV     R3,A
   \   000047   C3           CLR     C
   \   000048   E8           MOV     A,R0
   \   000049   9A           SUBB    A,R2
   \   00004A   E9           MOV     A,R1
   \   00004B   9B           SUBB    A,R3
   \   00004C   5018         JNC     ??ZDO_ProcessMgmtBindReq_0
   1807            {
   1808              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00004E   85..82       MOV     DPL,?XSP + 0
   \   000051   85..83       MOV     DPH,?XSP + 1
   \   000054   A8..         MOV     R0,?V1
   \   000056   7900         MOV     R1,#0x0
   \   000058   E0           MOVX    A,@DPTR
   \   000059   C3           CLR     C
   \   00005A   98           SUBB    A,R0
   \   00005B   F8           MOV     R0,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   99           SUBB    A,R1
   \   00005F   F9           MOV     R1,A
   \   000060   E8           MOV     A,R0
   \   000061   FE           MOV     R6,A
   \   000062   E9           MOV     A,R1
   \   000063   FF           MOV     R7,A
   \   000064   8004         SJMP    ??ZDO_ProcessMgmtBindReq_1
   1809            }
   1810            else
   1811            {
   1812              numItems = 0;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   000066   7E00         MOV     R6,#0x0
   \   000068   7F00         MOV     R7,#0x0
   1813            }
   1814          
   1815            // limit the size of the list
   1816            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   00006A   C3           CLR     C
   \   00006B   EE           MOV     A,R6
   \   00006C   9404         SUBB    A,#0x4
   \   00006E   EF           MOV     A,R7
   \   00006F   9400         SUBB    A,#0x0
   \   000071   4004         JC      ??ZDO_ProcessMgmtBindReq_2
   1817            {
   1818              numItems = ZDO_MAX_BIND_ITEMS;
   \   000073   7E03         MOV     R6,#0x3
   \   000075   7F00         MOV     R7,#0x0
   1819            }
   1820          
   1821            // Allocate the memory to build the table
   1822            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000077   EE           MOV     A,R6
   \   000078   4F           ORL     A,R7
   \   000079   6069         JZ      ??ZDO_ProcessMgmtBindReq_3
   \   00007B                ; Setup parameters for call to function osal_mem_alloc
   \   00007B   EE           MOV     A,R6
   \   00007C   FA           MOV     R2,A
   \   00007D   EF           MOV     A,R7
   \   00007E   FB           MOV     R3,A
   \   00007F   EA           MOV     A,R2
   \   000080   75F015       MOV     B,#0x15
   \   000083   A4           MUL     AB
   \   000084   CA           XCH     A,R2
   \   000085   A8F0         MOV     R0,B
   \   000087   75F000       MOV     B,#0x0
   \   00008A   A4           MUL     AB
   \   00008B   28           ADD     A,R0
   \   00008C   F8           MOV     R0,A
   \   00008D   75F015       MOV     B,#0x15
   \   000090   EB           MOV     A,R3
   \   000091   A4           MUL     AB
   \   000092   28           ADD     A,R0
   \   000093   FB           MOV     R3,A
   \   000094   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000097   8A..         MOV     ?V10,R2
   \   000099   8B..         MOV     ?V11,R3
   \   00009B   85....       MOV     ?V8,?V10
   \   00009E   85....       MOV     ?V9,?V11
   \   0000A1   E5..         MOV     A,?V8
   \   0000A3   45..         ORL     A,?V9
   \   0000A5   603D         JZ      ??ZDO_ProcessMgmtBindReq_3
   1823            {
   1824              status = ZSuccess;
   \   0000A7   75..00       MOV     ?V0,#0x0
   1825          
   1826              // Convert buffer to list
   1827              pList = (apsBindingItem_t *)pBuf;
   \   0000AA   85....       MOV     ?V4,?V8
   \   0000AD   85....       MOV     ?V5,?V9
   1828          
   1829              // Loop through items and build list
   1830              for ( x = 0; x < numItems; x++ )
   \   0000B0   75..00       MOV     ?V2,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   0000B3   A8..         MOV     R0,?V2
   \   0000B5   7900         MOV     R1,#0x0
   \   0000B7   C3           CLR     C
   \   0000B8   E8           MOV     A,R0
   \   0000B9   9E           SUBB    A,R6
   \   0000BA   E9           MOV     A,R1
   \   0000BB   9F           SUBB    A,R7
   \   0000BC   502D         JNC     ??ZDO_ProcessMgmtBindReq_5
   1831              {
   1832                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \   0000BE                ; Setup parameters for call to function APSME_GetRequest
   \   0000BE   AC..         MOV     R4,?V4
   \   0000C0   AD..         MOV     R5,?V5
   \   0000C2   AA..         MOV     R2,?V2
   \   0000C4   7B00         MOV     R3,#0x0
   \   0000C6   A8..         MOV     R0,?V1
   \   0000C8   7900         MOV     R1,#0x0
   \   0000CA   EA           MOV     A,R2
   \   0000CB   28           ADD     A,R0
   \   0000CC   FA           MOV     R2,A
   \   0000CD   EB           MOV     A,R3
   \   0000CE   39           ADDC    A,R1
   \   0000CF   FB           MOV     R3,A
   \   0000D0   79A2         MOV     R1,#-0x5e
   \   0000D2   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   0000D5   E9           MOV     A,R1
   1833                pList++;
   \   0000D6   E5..         MOV     A,?V4
   \   0000D8   2415         ADD     A,#0x15
   \   0000DA   F5..         MOV     ?V4,A
   \   0000DC   5002         JNC     ??ZDO_ProcessMgmtBindReq_6
   \   0000DE   05..         INC     ?V5
   1834              }
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000E0   05..         INC     ?V2
   \   0000E2   80CF         SJMP    ??ZDO_ProcessMgmtBindReq_4
   1835          
   1836            }
   1837            else
   1838            {
   1839              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   0000E4   75..8B       MOV     ?V0,#-0x75
   1840              numItems = 0;
   \   0000E7   7E00         MOV     R6,#0x0
   \   0000E9   7F00         MOV     R7,#0x0
   1841            }
   1842          
   1843            // Send response
   1844            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1845                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000EB                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000EB   75..00       MOV     ?V3,#0x0
   \   0000EE   78..         MOV     R0,#?V3
   \   0000F0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F3   78..         MOV     R0,#?V8
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F8   EE           MOV     A,R6
   \   0000F9   F5..         MOV     ?V3,A
   \   0000FB   78..         MOV     R0,#?V3
   \   0000FD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000100   E5..         MOV     A,?V1
   \   000102   F5..         MOV     ?V3,A
   \   000104   78..         MOV     R0,#?V3
   \   000106   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000109   7405         MOV     A,#0x5
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   F8           MOV     R0,A
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   F9           MOV     R1,A
   \   000113   E8           MOV     A,R0
   \   000114   FD           MOV     R5,A
   \   000115   AC..         MOV     R4,?V0
   \   000117   E5..         MOV     A,?V6
   \   000119   2402         ADD     A,#0x2
   \   00011B   FA           MOV     R2,A
   \   00011C   E4           CLR     A
   \   00011D   35..         ADDC    A,?V7
   \   00011F   FB           MOV     R3,A
   \   000120   E5..         MOV     A,?V6
   \   000122   240F         ADD     A,#0xf
   \   000124   F582         MOV     DPL,A
   \   000126   E4           CLR     A
   \   000127   35..         ADDC    A,?V7
   \   000129   F583         MOV     DPH,A
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   F9           MOV     R1,A
   \   00012D   12....       LCALL   `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   000130   7405         MOV     A,#0x5
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
   \   000135   E9           MOV     A,R1
   1846          
   1847            if ( pBuf )
   \   000136   E5..         MOV     A,?V8
   \   000138   45..         ORL     A,?V9
   \   00013A   6007         JZ      ??ZDO_ProcessMgmtBindReq_7
   1848            {
   1849              osal_mem_free( pBuf );
   \   00013C                ; Setup parameters for call to function osal_mem_free
   \   00013C   AA..         MOV     R2,?V8
   \   00013E   AB..         MOV     R3,?V9
   \   000140   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1850            }
   1851          #else
   1852            (void)inMsg;
   1853          #endif
   1854          }
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   000143   7402         MOV     A,#0x2
   \   000145   12....       LCALL   ?DEALLOC_XSTACK8
   \   000148   7F0C         MOV     R7,#0xc
   \   00014A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1855          
   1856          /*********************************************************************
   1857           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1858           *
   1859           * @brief       This function finishes the processing of the Management
   1860           *              Direct Join Request and generates the response.
   1861           *
   1862           * @param       inMsg - incoming message (request)
   1863           *
   1864           * @return      none
   1865           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1866          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1867          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1868            uint8 *deviceAddr;
   1869            uint8 capInfo;
   1870            uint8 stat;
   1871          
   1872            // Parse the message
   1873            deviceAddr = inMsg->asdu;
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   88..         MOV     ?V0,R0
   \   00001E   89..         MOV     ?V1,R1
   1874            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   \   000020   EE           MOV     A,R6
   \   000021   2413         ADD     A,#0x13
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   3F           ADDC    A,R7
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C8           XCH     A,R0
   \   00002E   2408         ADD     A,#0x8
   \   000030   F582         MOV     DPL,A
   \   000032   C8           XCH     A,R0
   \   000033   3400         ADDC    A,#0x0
   \   000035   F583         MOV     DPH,A
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V2,A
   1875          
   1876            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \   00003A                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   00003A   A9..         MOV     R1,?V2
   \   00003C   AA..         MOV     R2,?V0
   \   00003E   AB..         MOV     R3,?V1
   \   000040   12....       LCALL   `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   000043   E9           MOV     A,R1
   \   000044   C0E0         PUSH    A
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   D0E0         POP     A
   \   00004E   F0           MOVX    @DPTR,A
   1877          
   1878            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00004F                ; Setup parameters for call to function ZDP_SendData
   \   00004F   75..00       MOV     ?V3,#0x0
   \   000052   78..         MOV     R0,#?V3
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   7401         MOV     A,#0x1
   \   000059   12....       LCALL   ?XSTACK_DISP100_8
   \   00005C   88..         MOV     ?V4,R0
   \   00005E   89..         MOV     ?V5,R1
   \   000060   78..         MOV     R0,#?V4
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   75..35       MOV     ?V4,#0x35
   \   000068   75..80       MOV     ?V5,#-0x80
   \   00006B   78..         MOV     R0,#?V4
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   7901         MOV     R1,#0x1
   \   000072   EE           MOV     A,R6
   \   000073   2402         ADD     A,#0x2
   \   000075   FC           MOV     R4,A
   \   000076   E4           CLR     A
   \   000077   3F           ADDC    A,R7
   \   000078   FD           MOV     R5,A
   \   000079   EE           MOV     A,R6
   \   00007A   240F         ADD     A,#0xf
   \   00007C   FA           MOV     R2,A
   \   00007D   E4           CLR     A
   \   00007E   3F           ADDC    A,R7
   \   00007F   FB           MOV     R3,A
   \   000080   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000083   7405         MOV     A,#0x5
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   E9           MOV     A,R1
   1879          }
   \   000089   7401         MOV     A,#0x1
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   7F06         MOV     R7,#0x6
   \   000090   02....       LJMP    ?BANKED_LEAVE_XDATA
   1880          
   1881          /*********************************************************************
   1882           * @fn          ZDO_ProcessMgmtLeaveReq
   1883           *
   1884           * @brief       This function processes a Management Leave Request
   1885           *              and generates the response.
   1886           *
   1887           * @param       inMsg - incoming message (request)
   1888           *
   1889           * @return      none
   1890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1891          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1892          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1893            NLME_LeaveReq_t req;
   1894            ZStatus_t       status;
   1895            uint8           option;
   1896            uint8 *msg = inMsg->asdu;
   \   00000E   E5..         MOV     A,?V0
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V1
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FF           MOV     R7,A
   1897          
   1898            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1899                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \   00001E                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000025   E9           MOV     A,R1
   \   000026   6017         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   000028                ; Setup parameters for call to function NLME_GetExtAddr
   \   000028   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00002B   8A..         MOV     ?V4,R2
   \   00002D   8B..         MOV     ?V5,R3
   \   00002F   AC..         MOV     R4,?V4
   \   000031   AD..         MOV     R5,?V5
   \   000033                ; Setup parameters for call to function sAddrExtCmp
   \   000033   EE           MOV     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00003A   E9           MOV     A,R1
   \   00003B   6401         XRL     A,#0x1
   \   00003D   700E         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1900            {
   1901              // Remove this device
   1902              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7400         MOV     A,#0x0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   800A         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1903            }
   1904            else
   1905            {
   1906              // Remove child device
   1907              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00004D   7401         MOV     A,#0x1
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   EE           MOV     A,R6
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   EF           MOV     A,R7
   \   000056   F0           MOVX    @DPTR,A
   1908            }
   1909          
   1910            option = msg[Z_EXTADDR_LEN];
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F5..         MOV     ?V2,A
   1911            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000066   E5..         MOV     A,?V2
   \   000068   A2E6         MOV     C,0xE0 /* A   */.6
   \   00006A   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1912            {
   1913              req.removeChildren = TRUE;
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   7401         MOV     A,#0x1
   \   000073   F0           MOVX    @DPTR,A
   1914            }
   1915          
   1916            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000074   E5..         MOV     A,?V2
   \   000076   A2E7         MOV     C,0xE0 /* A   */.7
   \   000078   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1917            {
   1918               req.rejoin = TRUE;
   \   00007A   7404         MOV     A,#0x4
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   7401         MOV     A,#0x1
   \   000081   F0           MOVX    @DPTR,A
   1919            }
   1920          
   1921            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000082   7405         MOV     A,#0x5
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   7400         MOV     A,#0x0
   \   000089   F0           MOVX    @DPTR,A
   1922          
   1923            status = NLME_LeaveReq( &req );
   \   00008A                ; Setup parameters for call to function NLME_LeaveReq
   \   00008A   7401         MOV     A,#0x1
   \   00008C   12....       LCALL   ?XSTACK_DISP101_8
   \   00008F   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   000092   E9           MOV     A,R1
   \   000093   C0E0         PUSH    A
   \   000095   85..82       MOV     DPL,?XSP + 0
   \   000098   85..83       MOV     DPH,?XSP + 1
   \   00009B   D0E0         POP     A
   \   00009D   F0           MOVX    @DPTR,A
   1924          
   1925            if ( ZG_BUILD_ENDDEVICE_TYPE )
   1926            {
   1927              // Stop polling and get ready to reset
   1928              NLME_SetPollRate( 0 );
   1929            }
   1930          
   1931            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   00009E                ; Setup parameters for call to function ZDP_SendData
   \   00009E   75..00       MOV     ?V3,#0x0
   \   0000A1   78..         MOV     R0,#?V3
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   12....       LCALL   ?XSTACK_DISP100_8
   \   0000AB   88..         MOV     ?V4,R0
   \   0000AD   89..         MOV     ?V5,R1
   \   0000AF   78..         MOV     R0,#?V4
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   75..34       MOV     ?V4,#0x34
   \   0000B7   75..80       MOV     ?V5,#-0x80
   \   0000BA   78..         MOV     R0,#?V4
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   7901         MOV     R1,#0x1
   \   0000C1   E5..         MOV     A,?V0
   \   0000C3   2402         ADD     A,#0x2
   \   0000C5   FC           MOV     R4,A
   \   0000C6   E4           CLR     A
   \   0000C7   35..         ADDC    A,?V1
   \   0000C9   FD           MOV     R5,A
   \   0000CA   E5..         MOV     A,?V0
   \   0000CC   240F         ADD     A,#0xf
   \   0000CE   FA           MOV     R2,A
   \   0000CF   E4           CLR     A
   \   0000D0   35..         ADDC    A,?V1
   \   0000D2   FB           MOV     R3,A
   \   0000D3   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000D6   7405         MOV     A,#0x5
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DB   E9           MOV     A,R1
   1932          }
   \   0000DC   7406         MOV     A,#0x6
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E1   7F06         MOV     R7,#0x6
   \   0000E3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1933          
   1934          
   1935          /*********************************************************************
   1936           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1937           *
   1938           * @brief       This function processes a Management Permit Join Request
   1939           *              and generates the response.
   1940           *
   1941           * @param       inMsg - incoming message (request)
   1942           *
   1943           * @return      none
   1944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1945          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1946          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1947            uint8 stat;
   1948            uint8 duration;
   1949            uint8 tcsig;
   1950          
   1951            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0,A
   1952            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   \   000022   EE           MOV     A,R6
   \   000023   2413         ADD     A,#0x13
   \   000025   F582         MOV     DPL,A
   \   000027   E4           CLR     A
   \   000028   3F           ADDC    A,R7
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F583         MOV     DPH,A
   \   000031   8882         MOV     DPL,R0
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V1,A
   1953          
   1954            // Set the network layer permit join duration
   1955            stat = (byte) NLME_PermitJoiningRequest( duration );
   \   000037                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000037   A9..         MOV     R1,?V0
   \   000039   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   00003C   E9           MOV     A,R1
   \   00003D   C0E0         PUSH    A
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
   1956          
   1957            // Handle the Trust Center Significance
   1958            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1959            {
   1960              if ( tcsig == TRUE )
   \   000048   7401         MOV     A,#0x1
   \   00004A   65..         XRL     A,?V1
   \   00004C   7006         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   1961              {
   1962                ZDSecMgrPermitJoining( duration );
   \   00004E                ; Setup parameters for call to function ZDSecMgrPermitJoining
   \   00004E   A9..         MOV     R1,?V0
   \   000050   12....       LCALL   `??ZDSecMgrPermitJoining::?relay`; Banked call to: ZDSecMgrPermitJoining
   \   000053   E9           MOV     A,R1
   1963              }
   1964            }
   1965          
   1966            // Send a response if unicast
   1967            if ( !inMsg->wasBroadcast )
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   000054   EE           MOV     A,R6
   \   000055   240B         ADD     A,#0xb
   \   000057   F582         MOV     DPL,A
   \   000059   E4           CLR     A
   \   00005A   3F           ADDC    A,R7
   \   00005B   F583         MOV     DPH,A
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   703A         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_1
   1968            {
   1969              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000060                ; Setup parameters for call to function ZDP_SendData
   \   000060   75..00       MOV     ?V2,#0x0
   \   000063   78..         MOV     R0,#?V2
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000068   7401         MOV     A,#0x1
   \   00006A   12....       LCALL   ?XSTACK_DISP100_8
   \   00006D   88..         MOV     ?V2,R0
   \   00006F   89..         MOV     ?V3,R1
   \   000071   78..         MOV     R0,#?V2
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   75..36       MOV     ?V2,#0x36
   \   000079   75..80       MOV     ?V3,#-0x80
   \   00007C   78..         MOV     R0,#?V2
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   7901         MOV     R1,#0x1
   \   000083   EE           MOV     A,R6
   \   000084   2402         ADD     A,#0x2
   \   000086   FC           MOV     R4,A
   \   000087   E4           CLR     A
   \   000088   3F           ADDC    A,R7
   \   000089   FD           MOV     R5,A
   \   00008A   EE           MOV     A,R6
   \   00008B   240F         ADD     A,#0xf
   \   00008D   FA           MOV     R2,A
   \   00008E   E4           CLR     A
   \   00008F   3F           ADDC    A,R7
   \   000090   FB           MOV     R3,A
   \   000091   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000094   7405         MOV     A,#0x5
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   E9           MOV     A,R1
   1970            }
   1971          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   00009A   7401         MOV     A,#0x1
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009F   7F04         MOV     R7,#0x4
   \   0000A1   02....       LJMP    ?BANKED_LEAVE_XDATA
   1972          
   1973          /*
   1974           * This function stub allows the next higher layer to be notified of
   1975           * a permit joining timeout.
   1976           */
   1977          /*********************************************************************
   1978           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1979           *
   1980           * @brief       This function stub allows the next higher layer to be
   1981           *              notified of a permit joining timeout. Currently, this
   1982           *              directly bypasses the APS layer.
   1983           *
   1984           * @param       none
   1985           *
   1986           * @return      none
   1987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1988          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1989          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1990            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1991            // Currently, only the ZDSecMgr needs to be notified
   1992            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1993            {
   1994              ZDSecMgrPermitJoiningTimeout();
   1995            }
   1996            #endif
   1997          }
   \   000000   02....       LJMP    ?BRET
   1998          
   1999          /*********************************************************************
   2000           * @fn          ZDO_ProcessUserDescReq
   2001           *
   2002           * @brief       This function finishes the processing of the User
   2003           *              Descriptor Request and generates the response.
   2004           *
   2005           * @param       inMsg - incoming message (request)
   2006           *
   2007           * @return      none
   2008           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2009          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   2010          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2011            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FA           MOV     R2,A
   \   000021   7B00         MOV     R3,#0x0
   \   000023   EE           MOV     A,R6
   \   000024   2413         ADD     A,#0x13
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3F           ADDC    A,R7
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F583         MOV     DPH,A
   \   000032   8882         MOV     DPL,R0
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F8           MOV     R0,A
   \   000037   7900         MOV     R1,#0x0
   \   000039   E4           CLR     A
   \   00003A   C8           XCH     A,R0
   \   00003B   F9           MOV     R1,A
   \   00003C   EA           MOV     A,R2
   \   00003D   28           ADD     A,R0
   \   00003E   F5..         MOV     ?V0,A
   \   000040   EB           MOV     A,R3
   \   000041   39           ADDC    A,R1
   \   000042   F5..         MOV     ?V1,A
   2012            UserDescriptorFormat_t userDesc;
   2013          
   2014            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   2015                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000044   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000047   E0           MOVX    A,@DPTR
   \   000048   65..         XRL     A,?V0
   \   00004A   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   65..         XRL     A,?V1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000050   7062         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000052                ; Setup parameters for call to function osal_nv_read
   \   000052   A8..         MOV     R0,?XSP + 0
   \   000054   A9..         MOV     R1,?XSP + 1
   \   000056   88..         MOV     ?V2,R0
   \   000058   89..         MOV     ?V3,R1
   \   00005A   78..         MOV     R0,#?V2
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   75..11       MOV     ?V2,#0x11
   \   000062   75..00       MOV     ?V3,#0x0
   \   000065   78..         MOV     R0,#?V2
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7C00         MOV     R4,#0x0
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   7A81         MOV     R2,#-0x7f
   \   000070   7B00         MOV     R3,#0x0
   \   000072   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000075   7404         MOV     A,#0x4
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   E9           MOV     A,R1
   \   00007B   7037         JNZ     ??ZDO_ProcessUserDescReq_1
   2016            {
   2017              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00007D                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00007D   75..00       MOV     ?V2,#0x0
   \   000080   78..         MOV     R0,#?V2
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   7401         MOV     A,#0x1
   \   000087   12....       LCALL   ?XSTACK_DISP100_8
   \   00008A   88..         MOV     ?V2,R0
   \   00008C   89..         MOV     ?V3,R1
   \   00008E   78..         MOV     R0,#?V2
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   AC..         MOV     R4,?V0
   \   000095   AD..         MOV     R5,?V1
   \   000097   EE           MOV     A,R6
   \   000098   2402         ADD     A,#0x2
   \   00009A   FA           MOV     R2,A
   \   00009B   E4           CLR     A
   \   00009C   3F           ADDC    A,R7
   \   00009D   FB           MOV     R3,A
   \   00009E   EE           MOV     A,R6
   \   00009F   240F         ADD     A,#0xf
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   E4           CLR     A
   \   0000A4   3F           ADDC    A,R7
   \   0000A5   F583         MOV     DPH,A
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   12....       LCALL   `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   0000AC   7403         MOV     A,#0x3
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B1   E9           MOV     A,R1
   \   0000B2   8038         SJMP    ??ZDO_ProcessUserDescReq_2
   2018            }
   2019            else
   2020            {
   2021              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   2022                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   0000B4                ; Setup parameters for call to function ZDP_GenericRsp
   \   0000B4   75..11       MOV     ?V2,#0x11
   \   0000B7   75..80       MOV     ?V3,#-0x80
   \   0000BA   78..         MOV     R0,#?V2
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   EE           MOV     A,R6
   \   0000C5   240E         ADD     A,#0xe
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   E4           CLR     A
   \   0000CA   3F           ADDC    A,R7
   \   0000CB   F583         MOV     DPH,A
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   FD           MOV     R5,A
   \   0000CF   7C84         MOV     R4,#-0x7c
   \   0000D1   EE           MOV     A,R6
   \   0000D2   2402         ADD     A,#0x2
   \   0000D4   FA           MOV     R2,A
   \   0000D5   E4           CLR     A
   \   0000D6   3F           ADDC    A,R7
   \   0000D7   FB           MOV     R3,A
   \   0000D8   EE           MOV     A,R6
   \   0000D9   240F         ADD     A,#0xf
   \   0000DB   F582         MOV     DPL,A
   \   0000DD   E4           CLR     A
   \   0000DE   3F           ADDC    A,R7
   \   0000DF   F583         MOV     DPH,A
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000E6   7404         MOV     A,#0x4
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV     A,R1
   2023            }
   2024          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000EC   7411         MOV     A,#0x11
   \   0000EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F1   7F04         MOV     R7,#0x4
   \   0000F3   02....       LJMP    ?BANKED_LEAVE_XDATA
   2025          
   2026          /*********************************************************************
   2027           * @fn          ZDO_ProcessUserDescSet
   2028           *
   2029           * @brief       This function finishes the processing of the User
   2030           *              Descriptor Set and generates the response.
   2031           *
   2032           * @param       inMsg - incoming message (request)
   2033           *
   2034           * @return      none
   2035           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2036          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   2037          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   2038            uint8 *msg;
   2039            uint16 aoi;
   2040            UserDescriptorFormat_t userDesc;
   2041            uint8 outMsg[3];
   2042            uint8 status;
   2043          
   2044            msg = inMsg->asdu;
   \   00000E   E5..         MOV     A,?V2
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V3
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   88..         MOV     ?V0,R0
   \   000020   89..         MOV     ?V1,R1
   2045            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   000022   85..82       MOV     DPL,?V0
   \   000025   85..83       MOV     DPH,?V1
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FA           MOV     R2,A
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   85..82       MOV     DPL,?V0
   \   00002F   85..83       MOV     DPH,?V1
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   E8           MOV     A,R0
   \   000041   FE           MOV     R6,A
   \   000042   E9           MOV     A,R1
   \   000043   FF           MOV     R7,A
   2046          
   2047            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000044   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6E           XRL     A,R6
   \   000049   7003         JNZ     ??ZDO_ProcessUserDescSet_0
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00004E   6003         JZ      $+5
   \   000050   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   2048            {
   2049              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000053   85..82       MOV     DPL,?V0
   \   000056   85..83       MOV     DPH,?V1
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   C3           CLR     C
   \   00005D   9410         SUBB    A,#0x10
   \   00005F   5015         JNC     ??ZDO_ProcessUserDescSet_2
   \   000061   85..82       MOV     DPL,?V0
   \   000064   85..83       MOV     DPH,?V1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C0E0         PUSH    A
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   D0E0         POP     A
   \   000073   F0           MOVX    @DPTR,A
   \   000074   8008         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   7410         MOV     A,#0x10
   \   00007D   F0           MOVX    @DPTR,A
   2050              msg ++;  // increment one for the length field
   \                     ??ZDO_ProcessUserDescSet_3:
   \   00007E   85..82       MOV     DPL,?V0
   \   000081   85..83       MOV     DPH,?V1
   \   000084   A3           INC     DPTR
   \   000085   8582..       MOV     ?V0,DPL
   \   000088   8583..       MOV     ?V1,DPH
   2051          
   2052              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \   00008B                ; Setup parameters for call to function osal_memcpy
   \   00008B   85..82       MOV     DPL,?V0
   \   00008E   85..83       MOV     DPH,?V1
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A982         MOV     R1,DPL
   \   000095   AA83         MOV     R2,DPH
   \   000097   7B00         MOV     R3,#0x0
   \   000099   89..         MOV     ?V4,R1
   \   00009B   8A..         MOV     ?V5,R2
   \   00009D   8B..         MOV     ?V6,R3
   \   00009F   78..         MOV     R0,#?V4
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A4   7406         MOV     A,#0x6
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   FC           MOV     R4,A
   \   0000AB   7D00         MOV     R5,#0x0
   \   0000AD   7407         MOV     A,#0x7
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   AA82         MOV     R2,DPL
   \   0000B4   AB83         MOV     R3,DPH
   \   0000B6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000B9   7403         MOV     A,#0x3
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
   2053              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   0000BE                ; Setup parameters for call to function osal_nv_write
   \   0000BE   7403         MOV     A,#0x3
   \   0000C0   12....       LCALL   ?XSTACK_DISP100_8
   \   0000C3   88..         MOV     ?V4,R0
   \   0000C5   89..         MOV     ?V5,R1
   \   0000C7   78..         MOV     R0,#?V4
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   75..11       MOV     ?V4,#0x11
   \   0000CF   75..00       MOV     ?V5,#0x0
   \   0000D2   78..         MOV     R0,#?V4
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D7   7C00         MOV     R4,#0x0
   \   0000D9   7D00         MOV     R5,#0x0
   \   0000DB   7A81         MOV     R2,#-0x7f
   \   0000DD   7B00         MOV     R3,#0x0
   \   0000DF   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000E2   7404         MOV     A,#0x4
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   E9           MOV     A,R1
   2054              if ( userDesc.len != 0 )
   \   0000E8   7403         MOV     A,#0x3
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   6009         JZ      ??ZDO_ProcessUserDescSet_4
   2055              {
   2056                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000F0   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   D2E4         SETB    0xE0 /* A   */.4
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   8007         SJMP    ??ZDO_ProcessUserDescSet_5
   2057              }
   2058              else
   2059              {
   2060                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000F9   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   C2E4         CLR     0xE0 /* A   */.4
   \   0000FF   F0           MOVX    @DPTR,A
   2061              }
   2062          
   2063              status = ZDP_SUCCESS;
   \                     ??ZDO_ProcessUserDescSet_5:
   \   000100   85..82       MOV     DPL,?XSP + 0
   \   000103   85..83       MOV     DPH,?XSP + 1
   \   000106   7400         MOV     A,#0x0
   \   000108   F0           MOVX    @DPTR,A
   \   000109   8009         SJMP    ??ZDO_ProcessUserDescSet_6
   2064            }
   2065            else
   2066            {
   2067              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   00010B   85..82       MOV     DPL,?XSP + 0
   \   00010E   85..83       MOV     DPH,?XSP + 1
   \   000111   7484         MOV     A,#-0x7c
   \   000113   F0           MOVX    @DPTR,A
   2068            }
   2069          
   2070            outMsg[0] = status;
   2071            outMsg[1] = LO_UINT16( aoi );
   \                     ??ZDO_ProcessUserDescSet_6:
   \   000114   EE           MOV     A,R6
   \   000115   C0E0         PUSH    A
   \   000117   7401         MOV     A,#0x1
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   D0E0         POP     A
   \   00011E   F0           MOVX    @DPTR,A
   2072            outMsg[2] = LO_UINT16( aoi );
   \   00011F   EE           MOV     A,R6
   \   000120   C0E0         PUSH    A
   \   000122   7402         MOV     A,#0x2
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   D0E0         POP     A
   \   000129   F0           MOVX    @DPTR,A
   2073          
   2074            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   2075                         inMsg->SecurityUse );
   \   00012A                ; Setup parameters for call to function ZDP_SendData
   \   00012A   E5..         MOV     A,?V2
   \   00012C   240E         ADD     A,#0xe
   \   00012E   F582         MOV     DPL,A
   \   000130   E4           CLR     A
   \   000131   35..         ADDC    A,?V3
   \   000133   F583         MOV     DPH,A
   \   000135   E0           MOVX    A,@DPTR
   \   000136   F5..         MOV     ?V4,A
   \   000138   78..         MOV     R0,#?V4
   \   00013A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013D   7401         MOV     A,#0x1
   \   00013F   12....       LCALL   ?XSTACK_DISP100_8
   \   000142   88..         MOV     ?V4,R0
   \   000144   89..         MOV     ?V5,R1
   \   000146   78..         MOV     R0,#?V4
   \   000148   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014B   75..14       MOV     ?V4,#0x14
   \   00014E   75..80       MOV     ?V5,#-0x80
   \   000151   78..         MOV     R0,#?V4
   \   000153   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000156   7903         MOV     R1,#0x3
   \   000158   E5..         MOV     A,?V2
   \   00015A   2402         ADD     A,#0x2
   \   00015C   FC           MOV     R4,A
   \   00015D   E4           CLR     A
   \   00015E   35..         ADDC    A,?V3
   \   000160   FD           MOV     R5,A
   \   000161   E5..         MOV     A,?V2
   \   000163   240F         ADD     A,#0xf
   \   000165   FA           MOV     R2,A
   \   000166   E4           CLR     A
   \   000167   35..         ADDC    A,?V3
   \   000169   FB           MOV     R3,A
   \   00016A   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00016D   7405         MOV     A,#0x5
   \   00016F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000172   E9           MOV     A,R1
   2076          }
   \   000173   7414         MOV     A,#0x14
   \   000175   12....       LCALL   ?DEALLOC_XSTACK8
   \   000178   7F07         MOV     R7,#0x7
   \   00017A   02....       LJMP    ?BANKED_LEAVE_XDATA
   2077          
   2078          /*********************************************************************
   2079           * @fn          ZDO_ProcessDeviceAnnce
   2080           *
   2081           * @brief       This function processes a device annouce message.
   2082           *
   2083           * @param       inMsg - incoming message
   2084           *
   2085           * @return      none
   2086           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2087          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )  //chaokw
   \                     ZDO_ProcessDeviceAnnce:
   2088          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2089            ZDO_DeviceAnnce_t Annce;
   2090            AddrMgrEntry_t addrEntry;
   2091            uint8 parentExt[Z_EXTADDR_LEN];
   2092          
   2093            // Parse incoming message
   2094            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000E                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   2095          
   2096            if ( ZSTACK_END_DEVICE_BUILD )
   2097            {
   2098              // Make sure the message didn't come from myself - end device only
   2099              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   2100              {
   2101                return;
   2102              }
   2103            }
   2104          
   2105          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2106            // Clean up the neighbor table
   2107            nwkNeighborRemoveAllStranded();
   \   000019                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000019   12....       LCALL   `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   2108          
   2109            // If address conflict is detected, no need to update the address manager
   2110            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   00001C                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   AC82         MOV     R4,DPL
   \   000023   AD83         MOV     R5,DPH
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   FA           MOV     R2,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   000033   E9           MOV     A,R1
   \   000034   6401         XRL     A,#0x1
   \   000036   7003         JNZ     $+5
   \   000038   02....       LJMP    ??ZDO_ProcessDeviceAnnce_0 & 0xFFFF
   2111            {
   2112              return;
   2113            }
   2114          #endif
   2115          
   2116          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2117            // Check for parent's address
   2118            NLME_GetCoordExtAddr( parentExt );
   \   00003B                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00003B   7418         MOV     A,#0x18
   \   00003D   12....       LCALL   ?XSTACK_DISP101_8
   \   000040   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   2119            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   000043                ; Setup parameters for call to function sAddrExtCmp
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   AC82         MOV     R4,DPL
   \   00004A   AD83         MOV     R5,DPH
   \   00004C   7418         MOV     A,#0x18
   \   00004E   12....       LCALL   ?XSTACK_DISP101_8
   \   000051   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000054   E9           MOV     A,R1
   \   000055   6037         JZ      ??ZDO_ProcessDeviceAnnce_1
   2120            {
   2121              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000057                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000057   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00005A   8A..         MOV     ?V0,R2
   \   00005C   8B..         MOV     ?V1,R3
   \   00005E   A8..         MOV     R0,?V0
   \   000060   A9..         MOV     R1,?V1
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   68           XRL     A,R0
   \   00006A   7003         JNZ     ??ZDO_ProcessDeviceAnnce_2
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   00006F   601D         JZ      ??ZDO_ProcessDeviceAnnce_1
   2122              {
   2123                // Set the Parent's MAC's new short address
   2124                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   000071   85..82       MOV     DPL,?XSP + 0
   \   000074   85..83       MOV     DPH,?XSP + 1
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F8           MOV     R0,A
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   90....       MOV     DPTR,#_NIB + 23
   \   00007F   E8           MOV     A,R0
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   E9           MOV     A,R1
   \   000083   F0           MOVX    @DPTR,A
   2125                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \   000084                ; Setup parameters for call to function ZMacSetReq
   \   000084   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   000086   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   000088   794B         MOV     R1,#0x4b
   \   00008A   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00008D   E9           MOV     A,R1
   2126              }
   2127            }
   2128          
   2129            if ( ZSTACK_ROUTER_BUILD )
   2130            {
   2131              // If the device annce comes from a end device child that has moved
   2132              // to another parent, remove it from associated device list
   2133          
   2134              // If the dev annce is coming from other device's children,
   2135              // (The dev annce from its own children shall be unicast to itself,
   2136              // So check the mac destination address)
   2137              // Remove it from the associated device list. If it is not
   2138              // a child, no action will be taken in AssocRemove() anyway.
   2139              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   00008E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008E   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000091   8A..         MOV     ?V0,R2
   \   000093   8B..         MOV     ?V1,R3
   \   000095   A8..         MOV     R0,?V0
   \   000097   A9..         MOV     R1,?V1
   \   000099   EE           MOV     A,R6
   \   00009A   2411         ADD     A,#0x11
   \   00009C   F582         MOV     DPL,A
   \   00009E   E4           CLR     A
   \   00009F   3F           ADDC    A,R7
   \   0000A0   F583         MOV     DPH,A
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   68           XRL     A,R0
   \   0000A4   7003         JNZ     ??ZDO_ProcessDeviceAnnce_3
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000A9   6074         JZ      ??ZDO_ProcessDeviceAnnce_4
   2140              {
   2141                associated_devices_t *dev_ptr;
   2142          
   2143                // If it's an end device child
   2144                dev_ptr = AssocGetWithExt( Annce.extAddr );
   \   0000AB                ; Setup parameters for call to function AssocGetWithExt
   \   0000AB   7402         MOV     A,#0x2
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   AA82         MOV     R2,DPL
   \   0000B2   AB83         MOV     R3,DPH
   \   0000B4   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   0000B7   8A..         MOV     ?V2,R2
   \   0000B9   8B..         MOV     ?V3,R3
   \   0000BB   85....       MOV     ?V0,?V2
   \   0000BE   85....       MOV     ?V1,?V3
   2145                if ( dev_ptr )
   \   0000C1   E5..         MOV     A,?V0
   \   0000C3   45..         ORL     A,?V1
   \   0000C5   602B         JZ      ??ZDO_ProcessDeviceAnnce_5
   2146                {
   2147                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2148                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   0000C7   85..82       MOV     DPL,?V0
   \   0000CA   85..83       MOV     DPH,?V1
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   6401         XRL     A,#0x1
   \   0000D4   600F         JZ      ??ZDO_ProcessDeviceAnnce_6
   \   0000D6   85..82       MOV     DPL,?V0
   \   0000D9   85..83       MOV     DPH,?V1
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6402         XRL     A,#0x2
   \   0000E3   700D         JNZ     ??ZDO_ProcessDeviceAnnce_5
   2149                  {
   2150                    AssocRemove( Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   0000E5                ; Setup parameters for call to function AssocRemove
   \   0000E5   7402         MOV     A,#0x2
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   AA82         MOV     R2,DPL
   \   0000EC   AB83         MOV     R3,DPH
   \   0000EE   12....       LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
   \   0000F1   E9           MOV     A,R1
   2151                  }
   2152                }
   2153          
   2154          #if defined ( ZIGBEE_CHILD_AGING )
   2155                // Remove the address from the SrcMatch table,
   2156                // just in case the device was aged out by Child Management Table process
   2157                if ( ( pNwkNotMyChildListDelete != NULL ) &&
   2158                     ( zgChildAgingEnable == TRUE ) )
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   0000F2   90....       MOV     DPTR,#pNwkNotMyChildListDelete
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F8           MOV     R0,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F9           MOV     R1,A
   \   0000FA   E8           MOV     A,R0
   \   0000FB   49           ORL     A,R1
   \   0000FC   6021         JZ      ??ZDO_ProcessDeviceAnnce_4
   \   0000FE   90....       MOV     DPTR,#zgChildAgingEnable
   \   000101   E0           MOVX    A,@DPTR
   \   000102   6401         XRL     A,#0x1
   \   000104   7019         JNZ     ??ZDO_ProcessDeviceAnnce_4
   2159                {
   2160                  pNwkNotMyChildListDelete( Annce.nwkAddr );
   \   000106                ; Setup parameters for indirect call
   \   000106   85..82       MOV     DPL,?XSP + 0
   \   000109   85..83       MOV     DPH,?XSP + 1
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   FA           MOV     R2,A
   \   00010E   A3           INC     DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   FB           MOV     R3,A
   \   000111   90....       MOV     DPTR,#pNwkNotMyChildListDelete
   \   000114   E0           MOVX    A,@DPTR
   \   000115   F8           MOV     R0,A
   \   000116   A3           INC     DPTR
   \   000117   E0           MOVX    A,@DPTR
   \   000118   F583         MOV     DPH,A
   \   00011A   8882         MOV     DPL,R0
   \   00011C   12....       LCALL   ?CALL_IND
   2161                }
   2162          #endif // ZIGBEE_CHILD_AGING
   2163              }
   2164          
   2165              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   00011F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00011F   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000122   8A..         MOV     ?V0,R2
   \   000124   8B..         MOV     ?V1,R3
   \   000126   A8..         MOV     R0,?V0
   \   000128   A9..         MOV     R1,?V1
   \   00012A   85..82       MOV     DPL,?XSP + 0
   \   00012D   85..83       MOV     DPH,?XSP + 1
   \   000130   E0           MOVX    A,@DPTR
   \   000131   68           XRL     A,R0
   \   000132   7003         JNZ     ??ZDO_ProcessDeviceAnnce_7
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_7:
   \   000137   601D         JZ      ??ZDO_ProcessDeviceAnnce_8
   2166              {
   2167                // If an associated device is found with matched extended Address,
   2168                // update its short address
   2169                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   \   000139                ; Setup parameters for call to function AssocChangeNwkAddr
   \   000139   7402         MOV     A,#0x2
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   AC82         MOV     R4,DPL
   \   000140   AD83         MOV     R5,DPH
   \   000142   85..82       MOV     DPL,?XSP + 0
   \   000145   85..83       MOV     DPH,?XSP + 1
   \   000148   E0           MOVX    A,@DPTR
   \   000149   FA           MOV     R2,A
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   FB           MOV     R3,A
   \   00014D   12....       LCALL   `??AssocChangeNwkAddr::?relay`; Banked call to: AssocChangeNwkAddr
   \   000150   E9           MOV     A,R1
   \   000151   6003         JZ      ??ZDO_ProcessDeviceAnnce_8
   2170                {
   2171                  // Set event to save NV
   2172                  ZDApp_NVUpdate();
   \   000153                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000153   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2173                }
   2174              }
   2175            }
   2176          
   2177            // Update the neighbor table
   2178            nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_8:
   \   000156                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   000156   7402         MOV     A,#0x2
   \   000158   12....       LCALL   ?XSTACK_DISP0_8
   \   00015B   AC82         MOV     R4,DPL
   \   00015D   AD83         MOV     R5,DPH
   \   00015F   85..82       MOV     DPL,?XSP + 0
   \   000162   85..83       MOV     DPH,?XSP + 1
   \   000165   E0           MOVX    A,@DPTR
   \   000166   FA           MOV     R2,A
   \   000167   A3           INC     DPTR
   \   000168   E0           MOVX    A,@DPTR
   \   000169   FB           MOV     R3,A
   \   00016A   12....       LCALL   `??nwkNeighborUpdateNwkAddr::?relay`; Banked call to: nwkNeighborUpdateNwkAddr
   2179          
   2180            // Assume that the device has moved, remove existing routing entries
   2181            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \   00016D                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00016D   7900         MOV     R1,#0x0
   \   00016F   85..82       MOV     DPL,?XSP + 0
   \   000172   85..83       MOV     DPH,?XSP + 1
   \   000175   E0           MOVX    A,@DPTR
   \   000176   FA           MOV     R2,A
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   FB           MOV     R3,A
   \   00017A   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   \   00017D   E9           MOV     A,R1
   2182          
   2183          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   2184          
   2185            // Fill in the extended address in address manager if we don't have it already.
   2186            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   00017E   740B         MOV     A,#0xb
   \   000180   12....       LCALL   ?XSTACK_DISP0_8
   \   000183   7400         MOV     A,#0x0
   \   000185   F0           MOVX    @DPTR,A
   2187            addrEntry.nwkAddr = Annce.nwkAddr;
   \   000186   85..82       MOV     DPL,?XSP + 0
   \   000189   85..83       MOV     DPH,?XSP + 1
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   F8           MOV     R0,A
   \   00018E   A3           INC     DPTR
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F9           MOV     R1,A
   \   000191   740C         MOV     A,#0xc
   \   000193   12....       LCALL   ?XSTACK_DISP0_8
   \   000196   E8           MOV     A,R0
   \   000197   F0           MOVX    @DPTR,A
   \   000198   A3           INC     DPTR
   \   000199   E9           MOV     A,R1
   \   00019A   F0           MOVX    @DPTR,A
   2188            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \   00019B                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00019B   740B         MOV     A,#0xb
   \   00019D   12....       LCALL   ?XSTACK_DISP101_8
   \   0001A0   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0001A3   E9           MOV     A,R1
   \   0001A4   6040         JZ      ??ZDO_ProcessDeviceAnnce_9
   2189            {
   2190              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   0001A6                ; Setup parameters for call to function osal_memset
   \   0001A6   7C08         MOV     R4,#0x8
   \   0001A8   7D00         MOV     R5,#0x0
   \   0001AA   7900         MOV     R1,#0x0
   \   0001AC   7418         MOV     A,#0x18
   \   0001AE   12....       LCALL   ?XSTACK_DISP101_8
   \   0001B1   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2191              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   0001B4                ; Setup parameters for call to function sAddrExtCmp
   \   0001B4   740E         MOV     A,#0xe
   \   0001B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B9   AC82         MOV     R4,DPL
   \   0001BB   AD83         MOV     R5,DPH
   \   0001BD   7418         MOV     A,#0x18
   \   0001BF   12....       LCALL   ?XSTACK_DISP101_8
   \   0001C2   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   0001C5   E9           MOV     A,R1
   \   0001C6   601E         JZ      ??ZDO_ProcessDeviceAnnce_9
   2192              {
   2193                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   0001C8                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0001C8   7402         MOV     A,#0x2
   \   0001CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CD   AC82         MOV     R4,DPL
   \   0001CF   AD83         MOV     R5,DPH
   \   0001D1   740E         MOV     A,#0xe
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   AA82         MOV     R2,DPL
   \   0001D8   AB83         MOV     R3,DPH
   \   0001DA   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2194                AddrMgrEntryUpdate( &addrEntry );
   \   0001DD                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   0001DD   740B         MOV     A,#0xb
   \   0001DF   12....       LCALL   ?XSTACK_DISP101_8
   \   0001E2   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   0001E5   E9           MOV     A,R1
   2195              }
   2196            }
   2197          
   2198            // Update the short address in address manager if it's been changed
   2199            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_9:
   \   0001E6                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0001E6   7402         MOV     A,#0x2
   \   0001E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EB   AC82         MOV     R4,DPL
   \   0001ED   AD83         MOV     R5,DPH
   \   0001EF   740E         MOV     A,#0xe
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   AA82         MOV     R2,DPL
   \   0001F6   AB83         MOV     R3,DPH
   \   0001F8   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2200            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   0001FB                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   0001FB   740B         MOV     A,#0xb
   \   0001FD   12....       LCALL   ?XSTACK_DISP101_8
   \   000200   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000203   E9           MOV     A,R1
   \   000204   6037         JZ      ??ZDO_ProcessDeviceAnnce_0
   2201            {
   2202              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   000206   740C         MOV     A,#0xc
   \   000208   12....       LCALL   ?XSTACK_DISP0_8
   \   00020B   E0           MOVX    A,@DPTR
   \   00020C   F8           MOV     R0,A
   \   00020D   A3           INC     DPTR
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   F9           MOV     R1,A
   \   000210   85..82       MOV     DPL,?XSP + 0
   \   000213   85..83       MOV     DPH,?XSP + 1
   \   000216   E0           MOVX    A,@DPTR
   \   000217   68           XRL     A,R0
   \   000218   7003         JNZ     ??ZDO_ProcessDeviceAnnce_10
   \   00021A   A3           INC     DPTR
   \   00021B   E0           MOVX    A,@DPTR
   \   00021C   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_10:
   \   00021D   601E         JZ      ??ZDO_ProcessDeviceAnnce_0
   2203              {
   2204                addrEntry.nwkAddr = Annce.nwkAddr;
   \   00021F   85..82       MOV     DPL,?XSP + 0
   \   000222   85..83       MOV     DPH,?XSP + 1
   \   000225   E0           MOVX    A,@DPTR
   \   000226   F8           MOV     R0,A
   \   000227   A3           INC     DPTR
   \   000228   E0           MOVX    A,@DPTR
   \   000229   F9           MOV     R1,A
   \   00022A   740C         MOV     A,#0xc
   \   00022C   12....       LCALL   ?XSTACK_DISP0_8
   \   00022F   E8           MOV     A,R0
   \   000230   F0           MOVX    @DPTR,A
   \   000231   A3           INC     DPTR
   \   000232   E9           MOV     A,R1
   \   000233   F0           MOVX    @DPTR,A
   2205                AddrMgrEntryUpdate( &addrEntry );
   \   000234                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000234   740B         MOV     A,#0xb
   \   000236   12....       LCALL   ?XSTACK_DISP101_8
   \   000239   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00023C   E9           MOV     A,R1
   2206              }
   2207            }
   2208          }
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   00023D   7420         MOV     A,#0x20
   \   00023F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000242   7F04         MOV     R7,#0x4
   \   000244   02....       LJMP    ?BANKED_LEAVE_XDATA
   2209          
   2210          /*********************************************************************
   2211           * @fn          ZDO_BuildSimpleDescBuf
   2212           *
   2213           * @brief       Build a byte sequence representation of a Simple Descriptor.
   2214           *
   2215           * @param       buf  - pointer to a byte array big enough for data.
   2216           * @param       desc - SimpleDescriptionFormat_t *
   2217           *
   2218           * @return      none
   2219           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2220          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2221          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2222            byte cnt;
   2223            uint16 *ptr;
   2224          
   2225            *buf++ = desc->EndPoint;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   C0E0         PUSH    A
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   D0E0         POP     A
   \   000016   F0           MOVX    @DPTR,A
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   AA82         MOV     R2,DPL
   \   00001E   AB83         MOV     R3,DPH
   2226            *buf++ = HI_UINT16( desc->AppProfId );
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V1,A
   \   00002C   E4           CLR     A
   \   00002D   C5..         XCH     A,?V1
   \   00002F   F5..         MOV     ?V0,A
   \   000031   E5..         MOV     A,?V0
   \   000033   C0E0         PUSH    A
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   D0E0         POP     A
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   AA82         MOV     R2,DPL
   \   000043   AB83         MOV     R3,DPH
   2227            *buf++ = LO_UINT16( desc->AppProfId );
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V1,A
   \   000051   E5..         MOV     A,?V0
   \   000053   C0E0         PUSH    A
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   D0E0         POP     A
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   A3           INC     DPTR
   \   000061   AA82         MOV     R2,DPL
   \   000063   AB83         MOV     R3,DPH
   2228            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F5..         MOV     ?V0,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F5..         MOV     ?V1,A
   \   000073   E4           CLR     A
   \   000074   C5..         XCH     A,?V1
   \   000076   F5..         MOV     ?V0,A
   \   000078   E5..         MOV     A,?V0
   \   00007A   C0E0         PUSH    A
   \   00007C   8A82         MOV     DPL,R2
   \   00007E   8B83         MOV     DPH,R3
   \   000080   D0E0         POP     A
   \   000082   F0           MOVX    @DPTR,A
   \   000083   8A82         MOV     DPL,R2
   \   000085   8B83         MOV     DPH,R3
   \   000087   A3           INC     DPTR
   \   000088   AA82         MOV     R2,DPL
   \   00008A   AB83         MOV     R3,DPH
   2229            *buf++ = LO_UINT16( desc->AppDeviceId );
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F5..         MOV     ?V0,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F5..         MOV     ?V1,A
   \   00009A   E5..         MOV     A,?V0
   \   00009C   C0E0         PUSH    A
   \   00009E   8A82         MOV     DPL,R2
   \   0000A0   8B83         MOV     DPH,R3
   \   0000A2   D0E0         POP     A
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   8A82         MOV     DPL,R2
   \   0000A7   8B83         MOV     DPH,R3
   \   0000A9   A3           INC     DPTR
   \   0000AA   AA82         MOV     R2,DPL
   \   0000AC   AB83         MOV     R3,DPH
   2230          
   2231            *buf++ = (byte)(desc->AppDevVer << 4);
   \   0000AE   8E82         MOV     DPL,R6
   \   0000B0   8F83         MOV     DPH,R7
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   C4           SWAP    A
   \   0000B9   54F0         ANL     A,#0xf0
   \   0000BB   C0E0         PUSH    A
   \   0000BD   8A82         MOV     DPL,R2
   \   0000BF   8B83         MOV     DPH,R3
   \   0000C1   D0E0         POP     A
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   8A82         MOV     DPL,R2
   \   0000C6   8B83         MOV     DPH,R3
   \   0000C8   A3           INC     DPTR
   \   0000C9   AA82         MOV     R2,DPL
   \   0000CB   AB83         MOV     R3,DPH
   2232          
   2233            *buf++ = desc->AppNumInClusters;
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   C0E0         PUSH    A
   \   0000DA   8A82         MOV     DPL,R2
   \   0000DC   8B83         MOV     DPH,R3
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   8A82         MOV     DPL,R2
   \   0000E3   8B83         MOV     DPH,R3
   \   0000E5   A3           INC     DPTR
   \   0000E6   AA82         MOV     R2,DPL
   \   0000E8   AB83         MOV     R3,DPH
   2234            ptr = desc->pAppInClusterList;
   \   0000EA   8E82         MOV     DPL,R6
   \   0000EC   8F83         MOV     DPH,R7
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F5..         MOV     ?V0,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F5..         MOV     ?V1,A
   \   0000FC   A8..         MOV     R0,?V0
   \   0000FE   A9..         MOV     R1,?V1
   2235            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \   000100   7C00         MOV     R4,#0x0
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000102   8E82         MOV     DPL,R6
   \   000104   8F83         MOV     DPH,R7
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   FD           MOV     R5,A
   \   00010E   EC           MOV     A,R4
   \   00010F   C3           CLR     C
   \   000110   9D           SUBB    A,R5
   \   000111   504D         JNC     ??ZDO_BuildSimpleDescBuf_1
   2236            {
   2237              *buf++ = HI_UINT16( *ptr );
   \   000113   8882         MOV     DPL,R0
   \   000115   8983         MOV     DPH,R1
   \   000117   E0           MOVX    A,@DPTR
   \   000118   F5..         MOV     ?V0,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F5..         MOV     ?V1,A
   \   00011E   E4           CLR     A
   \   00011F   C5..         XCH     A,?V1
   \   000121   F5..         MOV     ?V0,A
   \   000123   E5..         MOV     A,?V0
   \   000125   C0E0         PUSH    A
   \   000127   8A82         MOV     DPL,R2
   \   000129   8B83         MOV     DPH,R3
   \   00012B   D0E0         POP     A
   \   00012D   F0           MOVX    @DPTR,A
   \   00012E   8A82         MOV     DPL,R2
   \   000130   8B83         MOV     DPH,R3
   \   000132   A3           INC     DPTR
   \   000133   AA82         MOV     R2,DPL
   \   000135   AB83         MOV     R3,DPH
   2238              *buf++ = LO_UINT16( *ptr );
   \   000137   8882         MOV     DPL,R0
   \   000139   8983         MOV     DPH,R1
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F5..         MOV     ?V0,A
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F5..         MOV     ?V1,A
   \   000142   E5..         MOV     A,?V0
   \   000144   C0E0         PUSH    A
   \   000146   8A82         MOV     DPL,R2
   \   000148   8B83         MOV     DPH,R3
   \   00014A   D0E0         POP     A
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   8A82         MOV     DPL,R2
   \   00014F   8B83         MOV     DPH,R3
   \   000151   A3           INC     DPTR
   \   000152   AA82         MOV     R2,DPL
   \   000154   AB83         MOV     R3,DPH
   2239            }
   \   000156   E8           MOV     A,R0
   \   000157   2402         ADD     A,#0x2
   \   000159   F8           MOV     R0,A
   \   00015A   5001         JNC     ??ZDO_BuildSimpleDescBuf_2
   \   00015C   09           INC     R1
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   00015D   0C           INC     R4
   \   00015E   80A2         SJMP    ??ZDO_BuildSimpleDescBuf_0
   2240          
   2241            *buf++ = desc->AppNumOutClusters;
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000160   8E82         MOV     DPL,R6
   \   000162   8F83         MOV     DPH,R7
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   C0E0         PUSH    A
   \   000170   8A82         MOV     DPL,R2
   \   000172   8B83         MOV     DPH,R3
   \   000174   D0E0         POP     A
   \   000176   F0           MOVX    @DPTR,A
   \   000177   8A82         MOV     DPL,R2
   \   000179   8B83         MOV     DPH,R3
   \   00017B   A3           INC     DPTR
   \   00017C   AA82         MOV     R2,DPL
   \   00017E   AB83         MOV     R3,DPH
   2242            ptr = desc->pAppOutClusterList;
   \   000180   8E82         MOV     DPL,R6
   \   000182   8F83         MOV     DPH,R7
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F5..         MOV     ?V0,A
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F5..         MOV     ?V1,A
   \   000195   A8..         MOV     R0,?V0
   \   000197   A9..         MOV     R1,?V1
   2243            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \   000199   7C00         MOV     R4,#0x0
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   00019B   8E82         MOV     DPL,R6
   \   00019D   8F83         MOV     DPH,R7
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   A3           INC     DPTR
   \   0001A5   A3           INC     DPTR
   \   0001A6   A3           INC     DPTR
   \   0001A7   A3           INC     DPTR
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   FD           MOV     R5,A
   \   0001AA   EC           MOV     A,R4
   \   0001AB   C3           CLR     C
   \   0001AC   9D           SUBB    A,R5
   \   0001AD   504D         JNC     ??ZDO_BuildSimpleDescBuf_4
   2244            {
   2245              *buf++ = HI_UINT16( *ptr );
   \   0001AF   8882         MOV     DPL,R0
   \   0001B1   8983         MOV     DPH,R1
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F5..         MOV     ?V0,A
   \   0001B6   A3           INC     DPTR
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   F5..         MOV     ?V1,A
   \   0001BA   E4           CLR     A
   \   0001BB   C5..         XCH     A,?V1
   \   0001BD   F5..         MOV     ?V0,A
   \   0001BF   E5..         MOV     A,?V0
   \   0001C1   C0E0         PUSH    A
   \   0001C3   8A82         MOV     DPL,R2
   \   0001C5   8B83         MOV     DPH,R3
   \   0001C7   D0E0         POP     A
   \   0001C9   F0           MOVX    @DPTR,A
   \   0001CA   8A82         MOV     DPL,R2
   \   0001CC   8B83         MOV     DPH,R3
   \   0001CE   A3           INC     DPTR
   \   0001CF   AA82         MOV     R2,DPL
   \   0001D1   AB83         MOV     R3,DPH
   2246              *buf++ = LO_UINT16( *ptr );
   \   0001D3   8882         MOV     DPL,R0
   \   0001D5   8983         MOV     DPH,R1
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F5..         MOV     ?V0,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   F5..         MOV     ?V1,A
   \   0001DE   E5..         MOV     A,?V0
   \   0001E0   C0E0         PUSH    A
   \   0001E2   8A82         MOV     DPL,R2
   \   0001E4   8B83         MOV     DPH,R3
   \   0001E6   D0E0         POP     A
   \   0001E8   F0           MOVX    @DPTR,A
   \   0001E9   8A82         MOV     DPL,R2
   \   0001EB   8B83         MOV     DPH,R3
   \   0001ED   A3           INC     DPTR
   \   0001EE   AA82         MOV     R2,DPL
   \   0001F0   AB83         MOV     R3,DPH
   2247            }
   \   0001F2   E8           MOV     A,R0
   \   0001F3   2402         ADD     A,#0x2
   \   0001F5   F8           MOV     R0,A
   \   0001F6   5001         JNC     ??ZDO_BuildSimpleDescBuf_5
   \   0001F8   09           INC     R1
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0001F9   0C           INC     R4
   \   0001FA   809F         SJMP    ??ZDO_BuildSimpleDescBuf_3
   2248          }
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   0001FC   7F02         MOV     R7,#0x2
   \   0001FE   02....       LJMP    ?BANKED_LEAVE_XDATA
   2249          
   2250          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2251          /*********************************************************************
   2252           * @fn      ZDO_MatchEndDeviceBind()
   2253           *
   2254           * @brief
   2255           *
   2256           *   Called to match end device binding requests
   2257           *
   2258           * @param  bindReq  - binding request information
   2259           * @param  SecurityUse - Security enable/disable
   2260           *
   2261           * @return  none
   2262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2263          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   2264          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2265            zAddrType_t dstAddr;
   2266            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0,#0x0
   2267            uint8 status;
   2268          
   2269            // Is this the first request?
   2270            if ( matchED == NULL )
   \   000011   90....       MOV     DPTR,#matchED
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   49           ORL     A,R1
   \   00001B   6003         JZ      $+5
   \   00001D   02....       LJMP    ??ZDO_MatchEndDeviceBind_0 & 0xFFFF
   2271            {
   2272              // Create match info structure
   2273              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000020                ; Setup parameters for call to function osal_mem_alloc
   \   000020   7A37         MOV     R2,#0x37
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000027   90....       MOV     DPTR,#matchED
   \   00002A   EA           MOV     A,R2
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   EB           MOV     A,R3
   \   00002E   F0           MOVX    @DPTR,A
   2274              if ( matchED )
   \   00002F   90....       MOV     DPTR,#matchED
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   E8           MOV     A,R0
   \   000038   49           ORL     A,R1
   \   000039   6031         JZ      ??ZDO_MatchEndDeviceBind_1
   2275              {
   2276                // Clear the structure
   2277                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00003B                ; Setup parameters for call to function osal_memset
   \   00003B   7C37         MOV     R4,#0x37
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   7900         MOV     R1,#0x0
   \   000041   90....       MOV     DPTR,#matchED
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2278          
   2279                // Copy the first request's information
   2280                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   00004C                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   00004C   EE           MOV     A,R6
   \   00004D   FC           MOV     R4,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FD           MOV     R5,A
   \   000050   90....       MOV     DPTR,#matchED
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FA           MOV     R2,A
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FB           MOV     R3,A
   \   000058   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   00005B   E9           MOV     A,R1
   \   00005C   701A         JNZ     ??ZDO_MatchEndDeviceBind_2
   2281                {
   2282                  status = ZDP_NO_ENTRY;
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   7488         MOV     A,#-0x78
   \   000066   F0           MOVX    @DPTR,A
   2283                  sendRsp = TRUE;
   \   000067   75..01       MOV     ?V0,#0x1
   \   00006A   800C         SJMP    ??ZDO_MatchEndDeviceBind_2
   2284                }
   2285              }
   2286              else
   2287              {
   2288                status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   7488         MOV     A,#-0x78
   \   000074   F0           MOVX    @DPTR,A
   2289                sendRsp = TRUE;
   \   000075   75..01       MOV     ?V0,#0x1
   2290              }
   2291          
   2292              if ( !sendRsp )
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   000078   E5..         MOV     A,?V0
   \   00007A   6003         JZ      $+5
   \   00007C   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2293              {
   2294                // Set into the correct state
   2295                matchED->state = ZDMATCH_WAIT_REQ;
   \   00007F   90....       MOV     DPTR,#matchED
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F8           MOV     R0,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   C8           XCH     A,R0
   \   000087   242E         ADD     A,#0x2e
   \   000089   F582         MOV     DPL,A
   \   00008B   C8           XCH     A,R0
   \   00008C   3400         ADDC    A,#0x0
   \   00008E   F583         MOV     DPH,A
   \   000090   7401         MOV     A,#0x1
   \   000092   F0           MOVX    @DPTR,A
   2296          
   2297                // Setup the timeout
   2298                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000093                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000093   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000095   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000097   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FA           MOV     R2,A
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   FB           MOV     R3,A
   \   00009F   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   0000A2   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2299              }
   2300            }
   2301            else
   2302            {
   2303                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   0000A5   90....       MOV     DPTR,#matchED
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F8           MOV     R0,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   C8           XCH     A,R0
   \   0000AD   242E         ADD     A,#0x2e
   \   0000AF   F582         MOV     DPL,A
   \   0000B1   C8           XCH     A,R0
   \   0000B2   3400         ADDC    A,#0x0
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   7402         MOV     A,#0x2
   \   0000B8   F0           MOVX    @DPTR,A
   2304          
   2305                // Copy the 2nd request's information
   2306                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   0000B9                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   0000B9   EE           MOV     A,R6
   \   0000BA   FC           MOV     R4,A
   \   0000BB   EF           MOV     A,R7
   \   0000BC   FD           MOV     R5,A
   \   0000BD   90....       MOV     DPTR,#matchED
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   2417         ADD     A,#0x17
   \   0000C3   FA           MOV     R2,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   3400         ADDC    A,#0x0
   \   0000C8   FB           MOV     R3,A
   \   0000C9   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   0000CC   E9           MOV     A,R1
   \   0000CD   700C         JNZ     ??ZDO_MatchEndDeviceBind_4
   2307                {
   2308                  status = ZDP_NO_ENTRY;
   \   0000CF   85..82       MOV     DPL,?XSP + 0
   \   0000D2   85..83       MOV     DPH,?XSP + 1
   \   0000D5   7488         MOV     A,#-0x78
   \   0000D7   F0           MOVX    @DPTR,A
   2309                  sendRsp = TRUE;
   \   0000D8   75..01       MOV     ?V0,#0x1
   2310                }
   2311          
   2312                // Make a source match for ed1
   2313                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2314                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2315                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   0000DB                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   0000DB   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   0000DE   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   0000E1   78..         MOV     R0,#?V2
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   90....       MOV     DPTR,#matchED
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F8           MOV     R0,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   C8           XCH     A,R0
   \   0000EE   2429         ADD     A,#0x29
   \   0000F0   F582         MOV     DPL,A
   \   0000F2   C8           XCH     A,R0
   \   0000F3   3400         ADDC    A,#0x0
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000FA   90....       MOV     DPTR,#matchED
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F8           MOV     R0,A
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   C8           XCH     A,R0
   \   000102   2428         ADD     A,#0x28
   \   000104   F582         MOV     DPL,A
   \   000106   C8           XCH     A,R0
   \   000107   3400         ADDC    A,#0x0
   \   000109   F583         MOV     DPH,A
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   FC           MOV     R4,A
   \   00010D   90....       MOV     DPTR,#matchED
   \   000110   E0           MOVX    A,@DPTR
   \   000111   F8           MOV     R0,A
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   C8           XCH     A,R0
   \   000115   2415         ADD     A,#0x15
   \   000117   F582         MOV     DPL,A
   \   000119   C8           XCH     A,R0
   \   00011A   3400         ADDC    A,#0x0
   \   00011C   F583         MOV     DPH,A
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   FA           MOV     R2,A
   \   000120   A3           INC     DPTR
   \   000121   E0           MOVX    A,@DPTR
   \   000122   FB           MOV     R3,A
   \   000123   90....       MOV     DPTR,#matchED
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F8           MOV     R0,A
   \   000128   A3           INC     DPTR
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   C8           XCH     A,R0
   \   00012B   2414         ADD     A,#0x14
   \   00012D   F582         MOV     DPL,A
   \   00012F   C8           XCH     A,R0
   \   000130   3400         ADDC    A,#0x0
   \   000132   F583         MOV     DPH,A
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F9           MOV     R1,A
   \   000136   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   000139   7404         MOV     A,#0x4
   \   00013B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013E   E9           MOV     A,R1
   \   00013F   C0E0         PUSH    A
   \   000141   90....       MOV     DPTR,#matchED
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F8           MOV     R0,A
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   C8           XCH     A,R0
   \   000149   2431         ADD     A,#0x31
   \   00014B   F582         MOV     DPL,A
   \   00014D   C8           XCH     A,R0
   \   00014E   3400         ADDC    A,#0x0
   \   000150   F583         MOV     DPH,A
   \   000152   D0E0         POP     A
   \   000154   F0           MOVX    @DPTR,A
   2316                if ( matchED->ed1numMatched )
   \   000155   90....       MOV     DPTR,#matchED
   \   000158   E0           MOVX    A,@DPTR
   \   000159   F8           MOV     R0,A
   \   00015A   A3           INC     DPTR
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   C8           XCH     A,R0
   \   00015D   2431         ADD     A,#0x31
   \   00015F   F582         MOV     DPL,A
   \   000161   C8           XCH     A,R0
   \   000162   3400         ADDC    A,#0x0
   \   000164   F583         MOV     DPH,A
   \   000166   E0           MOVX    A,@DPTR
   \   000167   7003         JNZ     $+5
   \   000169   02....       LJMP    ??ZDO_MatchEndDeviceBind_5 & 0xFFFF
   2317                {
   2318                  // Save the match list
   2319                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   00016C                ; Setup parameters for call to function osal_mem_alloc
   \   00016C   90....       MOV     DPTR,#matchED
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   F8           MOV     R0,A
   \   000171   A3           INC     DPTR
   \   000172   E0           MOVX    A,@DPTR
   \   000173   C8           XCH     A,R0
   \   000174   2431         ADD     A,#0x31
   \   000176   F582         MOV     DPL,A
   \   000178   C8           XCH     A,R0
   \   000179   3400         ADDC    A,#0x0
   \   00017B   F583         MOV     DPH,A
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   FA           MOV     R2,A
   \   00017F   7B00         MOV     R3,#0x0
   \   000181   EA           MOV     A,R2
   \   000182   75F002       MOV     B,#0x2
   \   000185   A4           MUL     AB
   \   000186   CA           XCH     A,R2
   \   000187   A8F0         MOV     R0,B
   \   000189   75F000       MOV     B,#0x0
   \   00018C   A4           MUL     AB
   \   00018D   28           ADD     A,R0
   \   00018E   F8           MOV     R0,A
   \   00018F   75F002       MOV     B,#0x2
   \   000192   EB           MOV     A,R3
   \   000193   A4           MUL     AB
   \   000194   28           ADD     A,R0
   \   000195   FB           MOV     R3,A
   \   000196   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000199   8A..         MOV     ?V2,R2
   \   00019B   8B..         MOV     ?V3,R3
   \   00019D   A8..         MOV     R0,?V2
   \   00019F   A9..         MOV     R1,?V3
   \   0001A1   90....       MOV     DPTR,#matchED
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   FA           MOV     R2,A
   \   0001A6   A3           INC     DPTR
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   CA           XCH     A,R2
   \   0001A9   2432         ADD     A,#0x32
   \   0001AB   F582         MOV     DPL,A
   \   0001AD   CA           XCH     A,R2
   \   0001AE   3400         ADDC    A,#0x0
   \   0001B0   F583         MOV     DPH,A
   \   0001B2   E8           MOV     A,R0
   \   0001B3   F0           MOVX    @DPTR,A
   \   0001B4   A3           INC     DPTR
   \   0001B5   E9           MOV     A,R1
   \   0001B6   F0           MOVX    @DPTR,A
   2320                  if ( matchED->ed1Matched )
   \   0001B7   90....       MOV     DPTR,#matchED
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   F8           MOV     R0,A
   \   0001BC   A3           INC     DPTR
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   C8           XCH     A,R0
   \   0001BF   2432         ADD     A,#0x32
   \   0001C1   F582         MOV     DPL,A
   \   0001C3   C8           XCH     A,R0
   \   0001C4   3400         ADDC    A,#0x0
   \   0001C6   F583         MOV     DPH,A
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   F8           MOV     R0,A
   \   0001CA   A3           INC     DPTR
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   F9           MOV     R1,A
   \   0001CD   E8           MOV     A,R0
   \   0001CE   49           ORL     A,R1
   \   0001CF   6058         JZ      ??ZDO_MatchEndDeviceBind_6
   2321                  {
   2322                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0001D1                ; Setup parameters for call to function osal_memcpy
   \   0001D1   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   0001D4   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   0001D7   75..00       MOV     ?V6,#0x0
   \   0001DA   78..         MOV     R0,#?V4
   \   0001DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001DF   90....       MOV     DPTR,#matchED
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   F8           MOV     R0,A
   \   0001E4   A3           INC     DPTR
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   C8           XCH     A,R0
   \   0001E7   2431         ADD     A,#0x31
   \   0001E9   F582         MOV     DPL,A
   \   0001EB   C8           XCH     A,R0
   \   0001EC   3400         ADDC    A,#0x0
   \   0001EE   F583         MOV     DPH,A
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   FC           MOV     R4,A
   \   0001F2   7D00         MOV     R5,#0x0
   \   0001F4   EC           MOV     A,R4
   \   0001F5   75F002       MOV     B,#0x2
   \   0001F8   A4           MUL     AB
   \   0001F9   CC           XCH     A,R4
   \   0001FA   A8F0         MOV     R0,B
   \   0001FC   75F000       MOV     B,#0x0
   \   0001FF   A4           MUL     AB
   \   000200   28           ADD     A,R0
   \   000201   F8           MOV     R0,A
   \   000202   75F002       MOV     B,#0x2
   \   000205   ED           MOV     A,R5
   \   000206   A4           MUL     AB
   \   000207   28           ADD     A,R0
   \   000208   FD           MOV     R5,A
   \   000209   90....       MOV     DPTR,#matchED
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F8           MOV     R0,A
   \   00020E   A3           INC     DPTR
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   C8           XCH     A,R0
   \   000211   2432         ADD     A,#0x32
   \   000213   F582         MOV     DPL,A
   \   000215   C8           XCH     A,R0
   \   000216   3400         ADDC    A,#0x0
   \   000218   F583         MOV     DPH,A
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   FA           MOV     R2,A
   \   00021C   A3           INC     DPTR
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   FB           MOV     R3,A
   \   00021F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000222   7403         MOV     A,#0x3
   \   000224   12....       LCALL   ?DEALLOC_XSTACK8
   \   000227   800C         SJMP    ??ZDO_MatchEndDeviceBind_5
   2323                  }
   2324                  else
   2325                  {
   2326                    // Allocation error, stop
   2327                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   000229   85..82       MOV     DPL,?XSP + 0
   \   00022C   85..83       MOV     DPH,?XSP + 1
   \   00022F   7488         MOV     A,#-0x78
   \   000231   F0           MOVX    @DPTR,A
   2328                    sendRsp = TRUE;
   \   000232   75..01       MOV     ?V0,#0x1
   2329                  }
   2330                }
   2331          
   2332                // Make a source match for ed2
   2333                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2334                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2335                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   000235                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000235   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   000238   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   00023B   78..         MOV     R0,#?V2
   \   00023D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000240   90....       MOV     DPTR,#matchED
   \   000243   E0           MOVX    A,@DPTR
   \   000244   F8           MOV     R0,A
   \   000245   A3           INC     DPTR
   \   000246   E0           MOVX    A,@DPTR
   \   000247   C8           XCH     A,R0
   \   000248   2412         ADD     A,#0x12
   \   00024A   F582         MOV     DPL,A
   \   00024C   C8           XCH     A,R0
   \   00024D   3400         ADDC    A,#0x0
   \   00024F   F583         MOV     DPH,A
   \   000251   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000254   90....       MOV     DPTR,#matchED
   \   000257   E0           MOVX    A,@DPTR
   \   000258   F8           MOV     R0,A
   \   000259   A3           INC     DPTR
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   C8           XCH     A,R0
   \   00025C   2411         ADD     A,#0x11
   \   00025E   F582         MOV     DPL,A
   \   000260   C8           XCH     A,R0
   \   000261   3400         ADDC    A,#0x0
   \   000263   F583         MOV     DPH,A
   \   000265   E0           MOVX    A,@DPTR
   \   000266   FC           MOV     R4,A
   \   000267   90....       MOV     DPTR,#matchED
   \   00026A   E0           MOVX    A,@DPTR
   \   00026B   F8           MOV     R0,A
   \   00026C   A3           INC     DPTR
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   C8           XCH     A,R0
   \   00026F   242C         ADD     A,#0x2c
   \   000271   F582         MOV     DPL,A
   \   000273   C8           XCH     A,R0
   \   000274   3400         ADDC    A,#0x0
   \   000276   F583         MOV     DPH,A
   \   000278   E0           MOVX    A,@DPTR
   \   000279   FA           MOV     R2,A
   \   00027A   A3           INC     DPTR
   \   00027B   E0           MOVX    A,@DPTR
   \   00027C   FB           MOV     R3,A
   \   00027D   90....       MOV     DPTR,#matchED
   \   000280   E0           MOVX    A,@DPTR
   \   000281   F8           MOV     R0,A
   \   000282   A3           INC     DPTR
   \   000283   E0           MOVX    A,@DPTR
   \   000284   C8           XCH     A,R0
   \   000285   242B         ADD     A,#0x2b
   \   000287   F582         MOV     DPL,A
   \   000289   C8           XCH     A,R0
   \   00028A   3400         ADDC    A,#0x0
   \   00028C   F583         MOV     DPH,A
   \   00028E   E0           MOVX    A,@DPTR
   \   00028F   F9           MOV     R1,A
   \   000290   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   000293   7404         MOV     A,#0x4
   \   000295   12....       LCALL   ?DEALLOC_XSTACK8
   \   000298   E9           MOV     A,R1
   \   000299   F8           MOV     R0,A
   \   00029A   E8           MOV     A,R0
   \   00029B   C0E0         PUSH    A
   \   00029D   90....       MOV     DPTR,#matchED
   \   0002A0   E0           MOVX    A,@DPTR
   \   0002A1   F8           MOV     R0,A
   \   0002A2   A3           INC     DPTR
   \   0002A3   E0           MOVX    A,@DPTR
   \   0002A4   C8           XCH     A,R0
   \   0002A5   2434         ADD     A,#0x34
   \   0002A7   F582         MOV     DPL,A
   \   0002A9   C8           XCH     A,R0
   \   0002AA   3400         ADDC    A,#0x0
   \   0002AC   F583         MOV     DPH,A
   \   0002AE   D0E0         POP     A
   \   0002B0   F0           MOVX    @DPTR,A
   2336                if ( matchED->ed2numMatched )
   \   0002B1   90....       MOV     DPTR,#matchED
   \   0002B4   E0           MOVX    A,@DPTR
   \   0002B5   F8           MOV     R0,A
   \   0002B6   A3           INC     DPTR
   \   0002B7   E0           MOVX    A,@DPTR
   \   0002B8   C8           XCH     A,R0
   \   0002B9   2434         ADD     A,#0x34
   \   0002BB   F582         MOV     DPL,A
   \   0002BD   C8           XCH     A,R0
   \   0002BE   3400         ADDC    A,#0x0
   \   0002C0   F583         MOV     DPH,A
   \   0002C2   E0           MOVX    A,@DPTR
   \   0002C3   7003         JNZ     $+5
   \   0002C5   02....       LJMP    ??ZDO_MatchEndDeviceBind_7 & 0xFFFF
   2337                {
   2338                  // Save the match list
   2339                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   0002C8                ; Setup parameters for call to function osal_mem_alloc
   \   0002C8   90....       MOV     DPTR,#matchED
   \   0002CB   E0           MOVX    A,@DPTR
   \   0002CC   F8           MOV     R0,A
   \   0002CD   A3           INC     DPTR
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   C8           XCH     A,R0
   \   0002D0   2434         ADD     A,#0x34
   \   0002D2   F582         MOV     DPL,A
   \   0002D4   C8           XCH     A,R0
   \   0002D5   3400         ADDC    A,#0x0
   \   0002D7   F583         MOV     DPH,A
   \   0002D9   E0           MOVX    A,@DPTR
   \   0002DA   FA           MOV     R2,A
   \   0002DB   7B00         MOV     R3,#0x0
   \   0002DD   EA           MOV     A,R2
   \   0002DE   75F002       MOV     B,#0x2
   \   0002E1   A4           MUL     AB
   \   0002E2   CA           XCH     A,R2
   \   0002E3   A8F0         MOV     R0,B
   \   0002E5   75F000       MOV     B,#0x0
   \   0002E8   A4           MUL     AB
   \   0002E9   28           ADD     A,R0
   \   0002EA   F8           MOV     R0,A
   \   0002EB   75F002       MOV     B,#0x2
   \   0002EE   EB           MOV     A,R3
   \   0002EF   A4           MUL     AB
   \   0002F0   28           ADD     A,R0
   \   0002F1   FB           MOV     R3,A
   \   0002F2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0002F5   8A..         MOV     ?V2,R2
   \   0002F7   8B..         MOV     ?V3,R3
   \   0002F9   A8..         MOV     R0,?V2
   \   0002FB   A9..         MOV     R1,?V3
   \   0002FD   90....       MOV     DPTR,#matchED
   \   000300   E0           MOVX    A,@DPTR
   \   000301   FA           MOV     R2,A
   \   000302   A3           INC     DPTR
   \   000303   E0           MOVX    A,@DPTR
   \   000304   CA           XCH     A,R2
   \   000305   2435         ADD     A,#0x35
   \   000307   F582         MOV     DPL,A
   \   000309   CA           XCH     A,R2
   \   00030A   3400         ADDC    A,#0x0
   \   00030C   F583         MOV     DPH,A
   \   00030E   E8           MOV     A,R0
   \   00030F   F0           MOVX    @DPTR,A
   \   000310   A3           INC     DPTR
   \   000311   E9           MOV     A,R1
   \   000312   F0           MOVX    @DPTR,A
   2340                  if ( matchED->ed2Matched )
   \   000313   90....       MOV     DPTR,#matchED
   \   000316   E0           MOVX    A,@DPTR
   \   000317   F8           MOV     R0,A
   \   000318   A3           INC     DPTR
   \   000319   E0           MOVX    A,@DPTR
   \   00031A   C8           XCH     A,R0
   \   00031B   2435         ADD     A,#0x35
   \   00031D   F582         MOV     DPL,A
   \   00031F   C8           XCH     A,R0
   \   000320   3400         ADDC    A,#0x0
   \   000322   F583         MOV     DPH,A
   \   000324   E0           MOVX    A,@DPTR
   \   000325   F8           MOV     R0,A
   \   000326   A3           INC     DPTR
   \   000327   E0           MOVX    A,@DPTR
   \   000328   F9           MOV     R1,A
   \   000329   E8           MOV     A,R0
   \   00032A   49           ORL     A,R1
   \   00032B   6058         JZ      ??ZDO_MatchEndDeviceBind_8
   2341                  {
   2342                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   00032D                ; Setup parameters for call to function osal_memcpy
   \   00032D   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   000330   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   000333   75..00       MOV     ?V6,#0x0
   \   000336   78..         MOV     R0,#?V4
   \   000338   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00033B   90....       MOV     DPTR,#matchED
   \   00033E   E0           MOVX    A,@DPTR
   \   00033F   F8           MOV     R0,A
   \   000340   A3           INC     DPTR
   \   000341   E0           MOVX    A,@DPTR
   \   000342   C8           XCH     A,R0
   \   000343   2434         ADD     A,#0x34
   \   000345   F582         MOV     DPL,A
   \   000347   C8           XCH     A,R0
   \   000348   3400         ADDC    A,#0x0
   \   00034A   F583         MOV     DPH,A
   \   00034C   E0           MOVX    A,@DPTR
   \   00034D   FC           MOV     R4,A
   \   00034E   7D00         MOV     R5,#0x0
   \   000350   EC           MOV     A,R4
   \   000351   75F002       MOV     B,#0x2
   \   000354   A4           MUL     AB
   \   000355   CC           XCH     A,R4
   \   000356   A8F0         MOV     R0,B
   \   000358   75F000       MOV     B,#0x0
   \   00035B   A4           MUL     AB
   \   00035C   28           ADD     A,R0
   \   00035D   F8           MOV     R0,A
   \   00035E   75F002       MOV     B,#0x2
   \   000361   ED           MOV     A,R5
   \   000362   A4           MUL     AB
   \   000363   28           ADD     A,R0
   \   000364   FD           MOV     R5,A
   \   000365   90....       MOV     DPTR,#matchED
   \   000368   E0           MOVX    A,@DPTR
   \   000369   F8           MOV     R0,A
   \   00036A   A3           INC     DPTR
   \   00036B   E0           MOVX    A,@DPTR
   \   00036C   C8           XCH     A,R0
   \   00036D   2435         ADD     A,#0x35
   \   00036F   F582         MOV     DPL,A
   \   000371   C8           XCH     A,R0
   \   000372   3400         ADDC    A,#0x0
   \   000374   F583         MOV     DPH,A
   \   000376   E0           MOVX    A,@DPTR
   \   000377   FA           MOV     R2,A
   \   000378   A3           INC     DPTR
   \   000379   E0           MOVX    A,@DPTR
   \   00037A   FB           MOV     R3,A
   \   00037B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00037E   7403         MOV     A,#0x3
   \   000380   12....       LCALL   ?DEALLOC_XSTACK8
   \   000383   800C         SJMP    ??ZDO_MatchEndDeviceBind_7
   2343                  }
   2344                  else
   2345                  {
   2346                    // Allocation error, stop
   2347                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   000385   85..82       MOV     DPL,?XSP + 0
   \   000388   85..83       MOV     DPH,?XSP + 1
   \   00038B   7488         MOV     A,#-0x78
   \   00038D   F0           MOVX    @DPTR,A
   2348                    sendRsp = TRUE;
   \   00038E   75..01       MOV     ?V0,#0x1
   2349                  }
   2350                }
   2351          
   2352                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   000391   E5..         MOV     A,?V0
   \   000393   7034         JNZ     ??ZDO_MatchEndDeviceBind_9
   \   000395   90....       MOV     DPTR,#matchED
   \   000398   E0           MOVX    A,@DPTR
   \   000399   F8           MOV     R0,A
   \   00039A   A3           INC     DPTR
   \   00039B   E0           MOVX    A,@DPTR
   \   00039C   C8           XCH     A,R0
   \   00039D   2431         ADD     A,#0x31
   \   00039F   F582         MOV     DPL,A
   \   0003A1   C8           XCH     A,R0
   \   0003A2   3400         ADDC    A,#0x0
   \   0003A4   F583         MOV     DPH,A
   \   0003A6   E0           MOVX    A,@DPTR
   \   0003A7   7014         JNZ     ??ZDO_MatchEndDeviceBind_10
   \   0003A9   90....       MOV     DPTR,#matchED
   \   0003AC   E0           MOVX    A,@DPTR
   \   0003AD   F8           MOV     R0,A
   \   0003AE   A3           INC     DPTR
   \   0003AF   E0           MOVX    A,@DPTR
   \   0003B0   C8           XCH     A,R0
   \   0003B1   2434         ADD     A,#0x34
   \   0003B3   F582         MOV     DPL,A
   \   0003B5   C8           XCH     A,R0
   \   0003B6   3400         ADDC    A,#0x0
   \   0003B8   F583         MOV     DPH,A
   \   0003BA   E0           MOVX    A,@DPTR
   \   0003BB   600C         JZ      ??ZDO_MatchEndDeviceBind_9
   2353                {
   2354                  // Do the first unbind/bind state
   2355                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   0003BD                ; Setup parameters for call to function ZDMatchSendState
   \   0003BD   7B00         MOV     R3,#0x0
   \   0003BF   7A00         MOV     R2,#0x0
   \   0003C1   7900         MOV     R1,#0x0
   \   0003C3   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   0003C6   E9           MOV     A,R1
   \   0003C7   800C         SJMP    ??ZDO_MatchEndDeviceBind_3
   2356                }
   2357                else
   2358                {
   2359                  status = ZDP_NO_MATCH;
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   0003C9   85..82       MOV     DPL,?XSP + 0
   \   0003CC   85..83       MOV     DPH,?XSP + 1
   \   0003CF   7486         MOV     A,#-0x7a
   \   0003D1   F0           MOVX    @DPTR,A
   2360                  sendRsp = TRUE;
   \   0003D2   75..01       MOV     ?V0,#0x1
   2361                }
   2362            }
   2363          
   2364            if ( sendRsp )
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   0003D5   E5..         MOV     A,?V0
   \   0003D7   7003         JNZ     $+5
   \   0003D9   02....       LJMP    ??ZDO_MatchEndDeviceBind_11 & 0xFFFF
   2365            {
   2366              // send response to this requester
   2367              dstAddr.addrMode = Addr16Bit;
   \   0003DC   7409         MOV     A,#0x9
   \   0003DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E1   7402         MOV     A,#0x2
   \   0003E3   F0           MOVX    @DPTR,A
   2368              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \   0003E4   8E82         MOV     DPL,R6
   \   0003E6   8F83         MOV     DPH,R7
   \   0003E8   A3           INC     DPTR
   \   0003E9   A3           INC     DPTR
   \   0003EA   E0           MOVX    A,@DPTR
   \   0003EB   F8           MOV     R0,A
   \   0003EC   A3           INC     DPTR
   \   0003ED   E0           MOVX    A,@DPTR
   \   0003EE   F9           MOV     R1,A
   \   0003EF   7401         MOV     A,#0x1
   \   0003F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F4   E8           MOV     A,R0
   \   0003F5   F0           MOVX    @DPTR,A
   \   0003F6   A3           INC     DPTR
   \   0003F7   E9           MOV     A,R1
   \   0003F8   F0           MOVX    @DPTR,A
   2369              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \   0003F9                ; Setup parameters for call to function ZDP_SendData
   \   0003F9   8E82         MOV     DPL,R6
   \   0003FB   8F83         MOV     DPH,R7
   \   0003FD   A3           INC     DPTR
   \   0003FE   E0           MOVX    A,@DPTR
   \   0003FF   F5..         MOV     ?V1,A
   \   000401   78..         MOV     R0,#?V1
   \   000403   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000406   7401         MOV     A,#0x1
   \   000408   12....       LCALL   ?XSTACK_DISP100_8
   \   00040B   88..         MOV     ?V2,R0
   \   00040D   89..         MOV     ?V3,R1
   \   00040F   78..         MOV     R0,#?V2
   \   000411   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000414   75..20       MOV     ?V2,#0x20
   \   000417   75..80       MOV     ?V3,#-0x80
   \   00041A   78..         MOV     R0,#?V2
   \   00041C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00041F   7901         MOV     R1,#0x1
   \   000421   7406         MOV     A,#0x6
   \   000423   12....       LCALL   ?XSTACK_DISP102_8
   \   000426   EE           MOV     A,R6
   \   000427   FA           MOV     R2,A
   \   000428   EF           MOV     A,R7
   \   000429   FB           MOV     R3,A
   \   00042A   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00042D   7405         MOV     A,#0x5
   \   00042F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000432   E9           MOV     A,R1
   2370          
   2371              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   000433   90....       MOV     DPTR,#matchED
   \   000436   E0           MOVX    A,@DPTR
   \   000437   F8           MOV     R0,A
   \   000438   A3           INC     DPTR
   \   000439   E0           MOVX    A,@DPTR
   \   00043A   C8           XCH     A,R0
   \   00043B   242E         ADD     A,#0x2e
   \   00043D   F582         MOV     DPL,A
   \   00043F   C8           XCH     A,R0
   \   000440   3400         ADDC    A,#0x0
   \   000442   F583         MOV     DPH,A
   \   000444   E0           MOVX    A,@DPTR
   \   000445   6402         XRL     A,#0x2
   \   000447   7069         JNZ     ??ZDO_MatchEndDeviceBind_12
   2372              {
   2373                // send response to first requester
   2374                dstAddr.addrMode = Addr16Bit;
   \   000449   7409         MOV     A,#0x9
   \   00044B   12....       LCALL   ?XSTACK_DISP0_8
   \   00044E   7402         MOV     A,#0x2
   \   000450   F0           MOVX    @DPTR,A
   2375                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \   000451   90....       MOV     DPTR,#matchED
   \   000454   E0           MOVX    A,@DPTR
   \   000455   F8           MOV     R0,A
   \   000456   A3           INC     DPTR
   \   000457   E0           MOVX    A,@DPTR
   \   000458   F583         MOV     DPH,A
   \   00045A   8882         MOV     DPL,R0
   \   00045C   A3           INC     DPTR
   \   00045D   A3           INC     DPTR
   \   00045E   E0           MOVX    A,@DPTR
   \   00045F   F8           MOV     R0,A
   \   000460   A3           INC     DPTR
   \   000461   E0           MOVX    A,@DPTR
   \   000462   F9           MOV     R1,A
   \   000463   7401         MOV     A,#0x1
   \   000465   12....       LCALL   ?XSTACK_DISP0_8
   \   000468   E8           MOV     A,R0
   \   000469   F0           MOVX    @DPTR,A
   \   00046A   A3           INC     DPTR
   \   00046B   E9           MOV     A,R1
   \   00046C   F0           MOVX    @DPTR,A
   2376                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   \   00046D                ; Setup parameters for call to function ZDP_SendData
   \   00046D   90....       MOV     DPTR,#matchED
   \   000470   E0           MOVX    A,@DPTR
   \   000471   F8           MOV     R0,A
   \   000472   A3           INC     DPTR
   \   000473   E0           MOVX    A,@DPTR
   \   000474   F583         MOV     DPH,A
   \   000476   8882         MOV     DPL,R0
   \   000478   A3           INC     DPTR
   \   000479   E0           MOVX    A,@DPTR
   \   00047A   F5..         MOV     ?V1,A
   \   00047C   78..         MOV     R0,#?V1
   \   00047E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000481   7401         MOV     A,#0x1
   \   000483   12....       LCALL   ?XSTACK_DISP100_8
   \   000486   88..         MOV     ?V2,R0
   \   000488   89..         MOV     ?V3,R1
   \   00048A   78..         MOV     R0,#?V2
   \   00048C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00048F   75..20       MOV     ?V2,#0x20
   \   000492   75..80       MOV     ?V3,#-0x80
   \   000495   78..         MOV     R0,#?V2
   \   000497   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00049A   7901         MOV     R1,#0x1
   \   00049C   7406         MOV     A,#0x6
   \   00049E   12....       LCALL   ?XSTACK_DISP102_8
   \   0004A1   90....       MOV     DPTR,#matchED
   \   0004A4   E0           MOVX    A,@DPTR
   \   0004A5   FA           MOV     R2,A
   \   0004A6   A3           INC     DPTR
   \   0004A7   E0           MOVX    A,@DPTR
   \   0004A8   FB           MOV     R3,A
   \   0004A9   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0004AC   7405         MOV     A,#0x5
   \   0004AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004B1   E9           MOV     A,R1
   2377              }
   2378          
   2379              // Process ended - release memory used
   2380              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   0004B2                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   0004B2   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2381            }
   2382          }
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   0004B5   740A         MOV     A,#0xa
   \   0004B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004BA   7F07         MOV     R7,#0x7
   \   0004BC   02....       LJMP    ?BANKED_LEAVE_XDATA
   2383          
   2384          /*********************************************************************
   2385           * @fn      ZDO_RemoveMatchMemory()
   2386           *
   2387           * @brief   Called to clear the memory used for the end device bind.
   2388           *
   2389           * @param  none
   2390           *
   2391           * @return  none
   2392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2393          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2394          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2395            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   7003         JNZ     $+5
   \   000010   02....       LJMP    ??ZDO_RemoveMatchMemory_0 & 0xFFFF
   2396            {
   2397              if ( matchED->ed2Matched != NULL )
   \   000013   90....       MOV     DPTR,#matchED
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   C8           XCH     A,R0
   \   00001B   2435         ADD     A,#0x35
   \   00001D   F582         MOV     DPL,A
   \   00001F   C8           XCH     A,R0
   \   000020   3400         ADDC    A,#0x0
   \   000022   F583         MOV     DPH,A
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   E8           MOV     A,R0
   \   00002A   49           ORL     A,R1
   \   00002B   6019         JZ      ??ZDO_RemoveMatchMemory_1
   2398              {
   2399                osal_mem_free( matchED->ed2Matched );
   \   00002D                ; Setup parameters for call to function osal_mem_free
   \   00002D   90....       MOV     DPTR,#matchED
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C8           XCH     A,R0
   \   000035   2435         ADD     A,#0x35
   \   000037   F582         MOV     DPL,A
   \   000039   C8           XCH     A,R0
   \   00003A   3400         ADDC    A,#0x0
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FA           MOV     R2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2400              }
   2401              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_1:
   \   000046   90....       MOV     DPTR,#matchED
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   C8           XCH     A,R0
   \   00004E   2432         ADD     A,#0x32
   \   000050   F582         MOV     DPL,A
   \   000052   C8           XCH     A,R0
   \   000053   3400         ADDC    A,#0x0
   \   000055   F583         MOV     DPH,A
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F8           MOV     R0,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   E8           MOV     A,R0
   \   00005D   49           ORL     A,R1
   \   00005E   6019         JZ      ??ZDO_RemoveMatchMemory_2
   2402              {
   2403                osal_mem_free( matchED->ed1Matched );
   \   000060                ; Setup parameters for call to function osal_mem_free
   \   000060   90....       MOV     DPTR,#matchED
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   C8           XCH     A,R0
   \   000068   2432         ADD     A,#0x32
   \   00006A   F582         MOV     DPL,A
   \   00006C   C8           XCH     A,R0
   \   00006D   3400         ADDC    A,#0x0
   \   00006F   F583         MOV     DPH,A
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FA           MOV     R2,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FB           MOV     R3,A
   \   000076   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2404              }
   2405              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_2:
   \   000079   90....       MOV     DPTR,#matchED
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F8           MOV     R0,A
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C8           XCH     A,R0
   \   000081   2412         ADD     A,#0x12
   \   000083   F582         MOV     DPL,A
   \   000085   C8           XCH     A,R0
   \   000086   3400         ADDC    A,#0x0
   \   000088   F583         MOV     DPH,A
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F8           MOV     R0,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   E8           MOV     A,R0
   \   000090   49           ORL     A,R1
   \   000091   6019         JZ      ??ZDO_RemoveMatchMemory_3
   2406              {
   2407                osal_mem_free( matchED->ed1.inClusters );
   \   000093                ; Setup parameters for call to function osal_mem_free
   \   000093   90....       MOV     DPTR,#matchED
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F8           MOV     R0,A
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   C8           XCH     A,R0
   \   00009B   2412         ADD     A,#0x12
   \   00009D   F582         MOV     DPL,A
   \   00009F   C8           XCH     A,R0
   \   0000A0   3400         ADDC    A,#0x0
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FA           MOV     R2,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2408              }
   2409              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   0000AC   90....       MOV     DPTR,#matchED
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   C8           XCH     A,R0
   \   0000B4   2415         ADD     A,#0x15
   \   0000B6   F582         MOV     DPL,A
   \   0000B8   C8           XCH     A,R0
   \   0000B9   3400         ADDC    A,#0x0
   \   0000BB   F583         MOV     DPH,A
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F8           MOV     R0,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   E8           MOV     A,R0
   \   0000C3   49           ORL     A,R1
   \   0000C4   6019         JZ      ??ZDO_RemoveMatchMemory_4
   2410              {
   2411                osal_mem_free( matchED->ed1.outClusters );
   \   0000C6                ; Setup parameters for call to function osal_mem_free
   \   0000C6   90....       MOV     DPTR,#matchED
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F8           MOV     R0,A
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   C8           XCH     A,R0
   \   0000CE   2415         ADD     A,#0x15
   \   0000D0   F582         MOV     DPL,A
   \   0000D2   C8           XCH     A,R0
   \   0000D3   3400         ADDC    A,#0x0
   \   0000D5   F583         MOV     DPH,A
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   FA           MOV     R2,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   FB           MOV     R3,A
   \   0000DC   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2412              }
   2413              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   0000DF   90....       MOV     DPTR,#matchED
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F8           MOV     R0,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   C8           XCH     A,R0
   \   0000E7   2429         ADD     A,#0x29
   \   0000E9   F582         MOV     DPL,A
   \   0000EB   C8           XCH     A,R0
   \   0000EC   3400         ADDC    A,#0x0
   \   0000EE   F583         MOV     DPH,A
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F8           MOV     R0,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F9           MOV     R1,A
   \   0000F5   E8           MOV     A,R0
   \   0000F6   49           ORL     A,R1
   \   0000F7   6019         JZ      ??ZDO_RemoveMatchMemory_5
   2414              {
   2415                osal_mem_free( matchED->ed2.inClusters );
   \   0000F9                ; Setup parameters for call to function osal_mem_free
   \   0000F9   90....       MOV     DPTR,#matchED
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F8           MOV     R0,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   C8           XCH     A,R0
   \   000101   2429         ADD     A,#0x29
   \   000103   F582         MOV     DPL,A
   \   000105   C8           XCH     A,R0
   \   000106   3400         ADDC    A,#0x0
   \   000108   F583         MOV     DPH,A
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   FA           MOV     R2,A
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   FB           MOV     R3,A
   \   00010F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2416              }
   2417              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000112   90....       MOV     DPTR,#matchED
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F8           MOV     R0,A
   \   000117   A3           INC     DPTR
   \   000118   E0           MOVX    A,@DPTR
   \   000119   C8           XCH     A,R0
   \   00011A   242C         ADD     A,#0x2c
   \   00011C   F582         MOV     DPL,A
   \   00011E   C8           XCH     A,R0
   \   00011F   3400         ADDC    A,#0x0
   \   000121   F583         MOV     DPH,A
   \   000123   E0           MOVX    A,@DPTR
   \   000124   F8           MOV     R0,A
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F9           MOV     R1,A
   \   000128   E8           MOV     A,R0
   \   000129   49           ORL     A,R1
   \   00012A   6019         JZ      ??ZDO_RemoveMatchMemory_6
   2418              {
   2419                osal_mem_free( matchED->ed2.outClusters );
   \   00012C                ; Setup parameters for call to function osal_mem_free
   \   00012C   90....       MOV     DPTR,#matchED
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F8           MOV     R0,A
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   C8           XCH     A,R0
   \   000134   242C         ADD     A,#0x2c
   \   000136   F582         MOV     DPL,A
   \   000138   C8           XCH     A,R0
   \   000139   3400         ADDC    A,#0x0
   \   00013B   F583         MOV     DPH,A
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   FA           MOV     R2,A
   \   00013F   A3           INC     DPTR
   \   000140   E0           MOVX    A,@DPTR
   \   000141   FB           MOV     R3,A
   \   000142   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2420              }
   2421          
   2422              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_6:
   \   000145                ; Setup parameters for call to function osal_mem_free
   \   000145   90....       MOV     DPTR,#matchED
   \   000148   E0           MOVX    A,@DPTR
   \   000149   FA           MOV     R2,A
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   FB           MOV     R3,A
   \   00014D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2423              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \   000150   90....       MOV     DPTR,#matchED
   \   000153   7400         MOV     A,#0x0
   \   000155   F0           MOVX    @DPTR,A
   \   000156   A3           INC     DPTR
   \   000157   7400         MOV     A,#0x0
   \   000159   F0           MOVX    @DPTR,A
   2424            }
   2425          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   00015A   D083         POP     DPH
   \   00015C   D082         POP     DPL
   \   00015E   02....       LJMP    ?BRET
   2426          
   2427          /*********************************************************************
   2428           * @fn      ZDO_CopyMatchInfo()
   2429           *
   2430           * @brief   Called to copy memory used for the end device bind.
   2431           *
   2432           * @param  srcReq - source information
   2433           * @param  dstReq - destination location
   2434           *
   2435           * @return  TRUE if copy was successful.
   2436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2437          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2438          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2439            uint8 allOK = TRUE;
   \   00000D   75..01       MOV     ?V2,#0x1
   2440          
   2441            // Copy bind information into the match info structure
   2442            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   85....       MOV     ?V4,?V0
   \   000013   85....       MOV     ?V5,?V1
   \   000016   75..00       MOV     ?V6,#0x0
   \   000019   78..         MOV     R0,#?V4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001E   7C17         MOV     R4,#0x17
   \   000020   7D00         MOV     R5,#0x0
   \   000022   EE           MOV     A,R6
   \   000023   FA           MOV     R2,A
   \   000024   EF           MOV     A,R7
   \   000025   FB           MOV     R3,A
   \   000026   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000029   7403         MOV     A,#0x3
   \   00002B   12....       LCALL   ?DEALLOC_XSTACK8
   2443          
   2444            // Initialize the destination cluster pointers
   2445            destReq->inClusters = NULL;
   \   00002E   EE           MOV     A,R6
   \   00002F   2412         ADD     A,#0x12
   \   000031   F582         MOV     DPL,A
   \   000033   E4           CLR     A
   \   000034   3F           ADDC    A,R7
   \   000035   F583         MOV     DPH,A
   \   000037   7400         MOV     A,#0x0
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   7400         MOV     A,#0x0
   \   00003D   F0           MOVX    @DPTR,A
   2446            destReq->outClusters = NULL;
   \   00003E   EE           MOV     A,R6
   \   00003F   2415         ADD     A,#0x15
   \   000041   F582         MOV     DPL,A
   \   000043   E4           CLR     A
   \   000044   3F           ADDC    A,R7
   \   000045   F583         MOV     DPH,A
   \   000047   7400         MOV     A,#0x0
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   7400         MOV     A,#0x0
   \   00004D   F0           MOVX    @DPTR,A
   2447          
   2448            // Copy input cluster IDs
   2449            if ( srcReq->numInClusters )
   \   00004E   E5..         MOV     A,?V0
   \   000050   2411         ADD     A,#0x11
   \   000052   F582         MOV     DPL,A
   \   000054   E4           CLR     A
   \   000055   35..         ADDC    A,?V1
   \   000057   F583         MOV     DPH,A
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   7003         JNZ     $+5
   \   00005C   02....       LJMP    ??ZDO_CopyMatchInfo_0 & 0xFFFF
   2450            {
   2451              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   00005F                ; Setup parameters for call to function osal_mem_alloc
   \   00005F   E5..         MOV     A,?V0
   \   000061   2411         ADD     A,#0x11
   \   000063   F582         MOV     DPL,A
   \   000065   E4           CLR     A
   \   000066   35..         ADDC    A,?V1
   \   000068   F583         MOV     DPH,A
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FA           MOV     R2,A
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   EA           MOV     A,R2
   \   00006F   75F002       MOV     B,#0x2
   \   000072   A4           MUL     AB
   \   000073   CA           XCH     A,R2
   \   000074   A8F0         MOV     R0,B
   \   000076   75F000       MOV     B,#0x0
   \   000079   A4           MUL     AB
   \   00007A   28           ADD     A,R0
   \   00007B   F8           MOV     R0,A
   \   00007C   75F002       MOV     B,#0x2
   \   00007F   EB           MOV     A,R3
   \   000080   A4           MUL     AB
   \   000081   28           ADD     A,R0
   \   000082   FB           MOV     R3,A
   \   000083   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000086   EE           MOV     A,R6
   \   000087   2412         ADD     A,#0x12
   \   000089   F582         MOV     DPL,A
   \   00008B   E4           CLR     A
   \   00008C   3F           ADDC    A,R7
   \   00008D   F583         MOV     DPH,A
   \   00008F   EA           MOV     A,R2
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   EB           MOV     A,R3
   \   000093   F0           MOVX    @DPTR,A
   2452              if ( destReq->inClusters )
   \   000094   EE           MOV     A,R6
   \   000095   2412         ADD     A,#0x12
   \   000097   F582         MOV     DPL,A
   \   000099   E4           CLR     A
   \   00009A   3F           ADDC    A,R7
   \   00009B   F583         MOV     DPH,A
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F8           MOV     R0,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   E8           MOV     A,R0
   \   0000A3   49           ORL     A,R1
   \   0000A4   6056         JZ      ??ZDO_CopyMatchInfo_1
   2453              {
   2454                // Copy the clusters
   2455                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2456                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   0000A6                ; Setup parameters for call to function osal_memcpy
   \   0000A6   E5..         MOV     A,?V0
   \   0000A8   2412         ADD     A,#0x12
   \   0000AA   F582         MOV     DPL,A
   \   0000AC   E4           CLR     A
   \   0000AD   35..         ADDC    A,?V1
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F5..         MOV     ?V4,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F5..         MOV     ?V5,A
   \   0000B8   75..00       MOV     ?V6,#0x0
   \   0000BB   78..         MOV     R0,#?V4
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C0   E5..         MOV     A,?V0
   \   0000C2   2411         ADD     A,#0x11
   \   0000C4   F582         MOV     DPL,A
   \   0000C6   E4           CLR     A
   \   0000C7   35..         ADDC    A,?V1
   \   0000C9   F583         MOV     DPH,A
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   FC           MOV     R4,A
   \   0000CD   7D00         MOV     R5,#0x0
   \   0000CF   EC           MOV     A,R4
   \   0000D0   75F002       MOV     B,#0x2
   \   0000D3   A4           MUL     AB
   \   0000D4   CC           XCH     A,R4
   \   0000D5   A8F0         MOV     R0,B
   \   0000D7   75F000       MOV     B,#0x0
   \   0000DA   A4           MUL     AB
   \   0000DB   28           ADD     A,R0
   \   0000DC   F8           MOV     R0,A
   \   0000DD   75F002       MOV     B,#0x2
   \   0000E0   ED           MOV     A,R5
   \   0000E1   A4           MUL     AB
   \   0000E2   28           ADD     A,R0
   \   0000E3   FD           MOV     R5,A
   \   0000E4   EE           MOV     A,R6
   \   0000E5   2412         ADD     A,#0x12
   \   0000E7   F582         MOV     DPL,A
   \   0000E9   E4           CLR     A
   \   0000EA   3F           ADDC    A,R7
   \   0000EB   F583         MOV     DPH,A
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   FA           MOV     R2,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   FB           MOV     R3,A
   \   0000F2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F5   7403         MOV     A,#0x3
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   8003         SJMP    ??ZDO_CopyMatchInfo_0
   2457              }
   2458              else
   2459              {
   2460                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   0000FC   75..00       MOV     ?V2,#0x0
   2461              }
   2462            }
   2463          
   2464            // Copy output cluster IDs
   2465            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   0000FF   E5..         MOV     A,?V0
   \   000101   2414         ADD     A,#0x14
   \   000103   F582         MOV     DPL,A
   \   000105   E4           CLR     A
   \   000106   35..         ADDC    A,?V1
   \   000108   F583         MOV     DPH,A
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   7003         JNZ     $+5
   \   00010D   02....       LJMP    ??ZDO_CopyMatchInfo_2 & 0xFFFF
   2466            {
   2467              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000110                ; Setup parameters for call to function osal_mem_alloc
   \   000110   E5..         MOV     A,?V0
   \   000112   2414         ADD     A,#0x14
   \   000114   F582         MOV     DPL,A
   \   000116   E4           CLR     A
   \   000117   35..         ADDC    A,?V1
   \   000119   F583         MOV     DPH,A
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   FA           MOV     R2,A
   \   00011D   7B00         MOV     R3,#0x0
   \   00011F   EA           MOV     A,R2
   \   000120   75F002       MOV     B,#0x2
   \   000123   A4           MUL     AB
   \   000124   CA           XCH     A,R2
   \   000125   A8F0         MOV     R0,B
   \   000127   75F000       MOV     B,#0x0
   \   00012A   A4           MUL     AB
   \   00012B   28           ADD     A,R0
   \   00012C   F8           MOV     R0,A
   \   00012D   75F002       MOV     B,#0x2
   \   000130   EB           MOV     A,R3
   \   000131   A4           MUL     AB
   \   000132   28           ADD     A,R0
   \   000133   FB           MOV     R3,A
   \   000134   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000137   EE           MOV     A,R6
   \   000138   2415         ADD     A,#0x15
   \   00013A   F582         MOV     DPL,A
   \   00013C   E4           CLR     A
   \   00013D   3F           ADDC    A,R7
   \   00013E   F583         MOV     DPH,A
   \   000140   EA           MOV     A,R2
   \   000141   F0           MOVX    @DPTR,A
   \   000142   A3           INC     DPTR
   \   000143   EB           MOV     A,R3
   \   000144   F0           MOVX    @DPTR,A
   2468              if ( destReq->outClusters )
   \   000145   EE           MOV     A,R6
   \   000146   2415         ADD     A,#0x15
   \   000148   F582         MOV     DPL,A
   \   00014A   E4           CLR     A
   \   00014B   3F           ADDC    A,R7
   \   00014C   F583         MOV     DPH,A
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F8           MOV     R0,A
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F9           MOV     R1,A
   \   000153   E8           MOV     A,R0
   \   000154   49           ORL     A,R1
   \   000155   6056         JZ      ??ZDO_CopyMatchInfo_3
   2469              {
   2470                // Copy the clusters
   2471                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2472                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000157                ; Setup parameters for call to function osal_memcpy
   \   000157   E5..         MOV     A,?V0
   \   000159   2415         ADD     A,#0x15
   \   00015B   F582         MOV     DPL,A
   \   00015D   E4           CLR     A
   \   00015E   35..         ADDC    A,?V1
   \   000160   F583         MOV     DPH,A
   \   000162   E0           MOVX    A,@DPTR
   \   000163   F5..         MOV     ?V4,A
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F5..         MOV     ?V5,A
   \   000169   75..00       MOV     ?V6,#0x0
   \   00016C   78..         MOV     R0,#?V4
   \   00016E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000171   E5..         MOV     A,?V0
   \   000173   2414         ADD     A,#0x14
   \   000175   F582         MOV     DPL,A
   \   000177   E4           CLR     A
   \   000178   35..         ADDC    A,?V1
   \   00017A   F583         MOV     DPH,A
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   FC           MOV     R4,A
   \   00017E   7D00         MOV     R5,#0x0
   \   000180   EC           MOV     A,R4
   \   000181   75F002       MOV     B,#0x2
   \   000184   A4           MUL     AB
   \   000185   CC           XCH     A,R4
   \   000186   A8F0         MOV     R0,B
   \   000188   75F000       MOV     B,#0x0
   \   00018B   A4           MUL     AB
   \   00018C   28           ADD     A,R0
   \   00018D   F8           MOV     R0,A
   \   00018E   75F002       MOV     B,#0x2
   \   000191   ED           MOV     A,R5
   \   000192   A4           MUL     AB
   \   000193   28           ADD     A,R0
   \   000194   FD           MOV     R5,A
   \   000195   EE           MOV     A,R6
   \   000196   2415         ADD     A,#0x15
   \   000198   F582         MOV     DPL,A
   \   00019A   E4           CLR     A
   \   00019B   3F           ADDC    A,R7
   \   00019C   F583         MOV     DPH,A
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   FA           MOV     R2,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   FB           MOV     R3,A
   \   0001A3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001A6   7403         MOV     A,#0x3
   \   0001A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001AB   8003         SJMP    ??ZDO_CopyMatchInfo_2
   2473              }
   2474              else
   2475              {
   2476                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_3:
   \   0001AD   75..00       MOV     ?V2,#0x0
   2477              }
   2478            }
   2479          
   2480            if ( allOK == FALSE )
   \                     ??ZDO_CopyMatchInfo_2:
   \   0001B0   E5..         MOV     A,?V2
   \   0001B2   7046         JNZ     ??ZDO_CopyMatchInfo_4
   2481            {
   2482              if ( destReq->inClusters != NULL )
   \   0001B4   EE           MOV     A,R6
   \   0001B5   2412         ADD     A,#0x12
   \   0001B7   F582         MOV     DPL,A
   \   0001B9   E4           CLR     A
   \   0001BA   3F           ADDC    A,R7
   \   0001BB   F583         MOV     DPH,A
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   F8           MOV     R0,A
   \   0001BF   A3           INC     DPTR
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   F9           MOV     R1,A
   \   0001C2   E8           MOV     A,R0
   \   0001C3   49           ORL     A,R1
   \   0001C4   6011         JZ      ??ZDO_CopyMatchInfo_5
   2483              {
   2484                osal_mem_free( destReq->inClusters );
   \   0001C6                ; Setup parameters for call to function osal_mem_free
   \   0001C6   EE           MOV     A,R6
   \   0001C7   2412         ADD     A,#0x12
   \   0001C9   F582         MOV     DPL,A
   \   0001CB   E4           CLR     A
   \   0001CC   3F           ADDC    A,R7
   \   0001CD   F583         MOV     DPH,A
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   FA           MOV     R2,A
   \   0001D1   A3           INC     DPTR
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   FB           MOV     R3,A
   \   0001D4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2485              }
   2486              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_5:
   \   0001D7   EE           MOV     A,R6
   \   0001D8   2415         ADD     A,#0x15
   \   0001DA   F582         MOV     DPL,A
   \   0001DC   E4           CLR     A
   \   0001DD   3F           ADDC    A,R7
   \   0001DE   F583         MOV     DPH,A
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   F8           MOV     R0,A
   \   0001E2   A3           INC     DPTR
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   F9           MOV     R1,A
   \   0001E5   E8           MOV     A,R0
   \   0001E6   49           ORL     A,R1
   \   0001E7   6011         JZ      ??ZDO_CopyMatchInfo_4
   2487              {
   2488                osal_mem_free( destReq->outClusters );
   \   0001E9                ; Setup parameters for call to function osal_mem_free
   \   0001E9   EE           MOV     A,R6
   \   0001EA   2415         ADD     A,#0x15
   \   0001EC   F582         MOV     DPL,A
   \   0001EE   E4           CLR     A
   \   0001EF   3F           ADDC    A,R7
   \   0001F0   F583         MOV     DPH,A
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   FA           MOV     R2,A
   \   0001F4   A3           INC     DPTR
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   FB           MOV     R3,A
   \   0001F7   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2489              }
   2490            }
   2491          
   2492            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_4:
   \   0001FA   A9..         MOV     R1,?V2
   \   0001FC   7F07         MOV     R7,#0x7
   \   0001FE   02....       LJMP    ?BANKED_LEAVE_XDATA
   2493          }
   2494          
   2495          /*********************************************************************
   2496           * @fn      ZDMatchSendState()
   2497           *
   2498           * @brief   State machine for the End device match message algorithm.
   2499           *
   2500           * @param  reason - state of algoritm
   2501           * @param  status - initial message status
   2502           * @param  TransSeq - next transaction sequence number
   2503           *
   2504           * @return  FALSE if error and we are not currently matching, TRUE
   2505           *          if success.
   2506           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2507          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2508          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V2,R1
   \   00000C   8A..         MOV     ?V6,R2
   \   00000E   8B..         MOV     ?V7,R3
   2509            uint8 *dstIEEEAddr = NULL;
   \   000010   75..00       MOV     ?V8,#0x0
   \   000013   75..00       MOV     ?V9,#0x0
   2510            uint8 dstEP = 0xFF;
   \   000016   75..FF       MOV     ?V3,#-0x1
   2511            zAddrType_t dstAddr;
   2512            zAddrType_t destinationAddr;
   2513            uint16 msgType;
   2514            uint16 clusterID = 0xFFFF;
   \   000019   7EFF         MOV     R6,#-0x1
   \   00001B   7FFF         MOV     R7,#-0x1
   2515            ZDEndDeviceBind_t *ed = NULL;
   \   00001D   75..00       MOV     ?V4,#0x0
   \   000020   75..00       MOV     ?V5,#0x0
   2516            uint8 rspStatus = ZDP_SUCCESS;
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   7400         MOV     A,#0x0
   \   00002B   F0           MOVX    @DPTR,A
   2517          
   2518            if ( matchED == NULL )
   \   00002C   90....       MOV     DPTR,#matchED
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   E8           MOV     A,R0
   \   000035   49           ORL     A,R1
   \   000036   7005         JNZ     ??ZDMatchSendState_0
   2519            {
   2520              return ( FALSE );
   \   000038   7900         MOV     R1,#0x0
   \   00003A   02....       LJMP    ??ZDMatchSendState_1 & 0xFFFF
   2521            }
   2522          
   2523            // Check sequence number
   2524            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_0:
   \   00003D   7403         MOV     A,#0x3
   \   00003F   65..         XRL     A,?V2
   \   000041   6006         JZ      ??ZDMatchSendState_2
   \   000043   7402         MOV     A,#0x2
   \   000045   65..         XRL     A,?V2
   \   000047   701B         JNZ     ??ZDMatchSendState_3
   2525            {
   2526              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_2:
   \   000049   90....       MOV     DPTR,#matchED
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F8           MOV     R0,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C8           XCH     A,R0
   \   000051   2430         ADD     A,#0x30
   \   000053   F582         MOV     DPL,A
   \   000055   C8           XCH     A,R0
   \   000056   3400         ADDC    A,#0x0
   \   000058   F583         MOV     DPH,A
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   65..         XRL     A,?V7
   \   00005D   6005         JZ      ??ZDMatchSendState_3
   2527              {
   2528                return( FALSE ); // ignore the message
   \   00005F   7900         MOV     R1,#0x0
   \   000061   02....       LJMP    ??ZDMatchSendState_1 & 0xFFFF
   2529              }
   2530            }
   2531          
   2532            // turn off timer
   2533            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_3:
   \   000064                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000064   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000066   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000068   7A00         MOV     R2,#0x0
   \   00006A   7B00         MOV     R3,#0x0
   \   00006C   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   2534          
   2535            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   00006F   7401         MOV     A,#0x1
   \   000071   65..         XRL     A,?V2
   \   000073   7009         JNZ     ??ZDMatchSendState_4
   2536            {
   2537              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   000075   85..82       MOV     DPL,?XSP + 0
   \   000078   85..83       MOV     DPH,?XSP + 1
   \   00007B   7485         MOV     A,#-0x7b
   \   00007D   F0           MOVX    @DPTR,A
   2538            }
   2539          
   2540            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_4:
   \   00007E   E5..         MOV     A,?V2
   \   000080   6006         JZ      ??ZDMatchSendState_5
   \   000082   7403         MOV     A,#0x3
   \   000084   65..         XRL     A,?V2
   \   000086   702D         JNZ     ??ZDMatchSendState_6
   2541            {
   2542              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_5:
   \   000088   90....       MOV     DPTR,#matchED
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F8           MOV     R0,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   C8           XCH     A,R0
   \   000090   242F         ADD     A,#0x2f
   \   000092   F582         MOV     DPL,A
   \   000094   C8           XCH     A,R0
   \   000095   3400         ADDC    A,#0x0
   \   000097   F583         MOV     DPH,A
   \   000099   7401         MOV     A,#0x1
   \   00009B   F0           MOVX    @DPTR,A
   2543          
   2544              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   00009C   7403         MOV     A,#0x3
   \   00009E   65..         XRL     A,?V2
   \   0000A0   7047         JNZ     ??ZDMatchSendState_7
   \   0000A2   E5..         MOV     A,?V6
   \   0000A4   6043         JZ      ??ZDMatchSendState_7
   2545              {
   2546                rspStatus = status;
   \   0000A6   E5..         MOV     A,?V6
   \   0000A8   C0E0         PUSH    A
   \   0000AA   85..82       MOV     DPL,?XSP + 0
   \   0000AD   85..83       MOV     DPH,?XSP + 1
   \   0000B0   D0E0         POP     A
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   8034         SJMP    ??ZDMatchSendState_7
   2547              }
   2548            }
   2549            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_6:
   \   0000B5   7402         MOV     A,#0x2
   \   0000B7   65..         XRL     A,?V2
   \   0000B9   702E         JNZ     ??ZDMatchSendState_7
   2550            {
   2551              if ( status == ZDP_SUCCESS )
   \   0000BB   E5..         MOV     A,?V6
   \   0000BD   7016         JNZ     ??ZDMatchSendState_8
   2552              {
   2553                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   0000BF   90....       MOV     DPTR,#matchED
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F8           MOV     R0,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   C8           XCH     A,R0
   \   0000C7   242F         ADD     A,#0x2f
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   C8           XCH     A,R0
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F583         MOV     DPH,A
   \   0000D0   7401         MOV     A,#0x1
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   8014         SJMP    ??ZDMatchSendState_7
   2554              }
   2555              else
   2556              {
   2557                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_8:
   \   0000D5   90....       MOV     DPTR,#matchED
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   F8           MOV     R0,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   C8           XCH     A,R0
   \   0000DD   242F         ADD     A,#0x2f
   \   0000DF   F582         MOV     DPL,A
   \   0000E1   C8           XCH     A,R0
   \   0000E2   3400         ADDC    A,#0x0
   \   0000E4   F583         MOV     DPH,A
   \   0000E6   7402         MOV     A,#0x2
   \   0000E8   F0           MOVX    @DPTR,A
   2558              }
   2559            }
   2560          
   2561            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_7:
   \   0000E9   E5..         MOV     A,?V2
   \   0000EB   606A         JZ      ??ZDMatchSendState_9
   \   0000ED   90....       MOV     DPTR,#matchED
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F8           MOV     R0,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   C8           XCH     A,R0
   \   0000F5   242F         ADD     A,#0x2f
   \   0000F7   F582         MOV     DPL,A
   \   0000F9   C8           XCH     A,R0
   \   0000FA   3400         ADDC    A,#0x0
   \   0000FC   F583         MOV     DPH,A
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   6401         XRL     A,#0x1
   \   000101   7054         JNZ     ??ZDMatchSendState_9
   2562            {
   2563              // Move to the next cluster ID
   2564              if ( matchED->ed1numMatched )
   \   000103   90....       MOV     DPTR,#matchED
   \   000106   E0           MOVX    A,@DPTR
   \   000107   F8           MOV     R0,A
   \   000108   A3           INC     DPTR
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   C8           XCH     A,R0
   \   00010B   2431         ADD     A,#0x31
   \   00010D   F582         MOV     DPL,A
   \   00010F   C8           XCH     A,R0
   \   000110   3400         ADDC    A,#0x0
   \   000112   F583         MOV     DPH,A
   \   000114   E0           MOVX    A,@DPTR
   \   000115   6017         JZ      ??ZDMatchSendState_10
   2565              {
   2566                matchED->ed1numMatched--;
   \   000117   90....       MOV     DPTR,#matchED
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   F8           MOV     R0,A
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   C8           XCH     A,R0
   \   00011F   2431         ADD     A,#0x31
   \   000121   F582         MOV     DPL,A
   \   000123   C8           XCH     A,R0
   \   000124   3400         ADDC    A,#0x0
   \   000126   F583         MOV     DPH,A
   \   000128   E0           MOVX    A,@DPTR
   \   000129   24FF         ADD     A,#-0x1
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   8029         SJMP    ??ZDMatchSendState_9
   2567              }
   2568              else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_10:
   \   00012E   90....       MOV     DPTR,#matchED
   \   000131   E0           MOVX    A,@DPTR
   \   000132   F8           MOV     R0,A
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   C8           XCH     A,R0
   \   000136   2434         ADD     A,#0x34
   \   000138   F582         MOV     DPL,A
   \   00013A   C8           XCH     A,R0
   \   00013B   3400         ADDC    A,#0x0
   \   00013D   F583         MOV     DPH,A
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   6015         JZ      ??ZDMatchSendState_9
   2569              {
   2570                matchED->ed2numMatched--;
   \   000142   90....       MOV     DPTR,#matchED
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F8           MOV     R0,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   C8           XCH     A,R0
   \   00014A   2434         ADD     A,#0x34
   \   00014C   F582         MOV     DPL,A
   \   00014E   C8           XCH     A,R0
   \   00014F   3400         ADDC    A,#0x0
   \   000151   F583         MOV     DPH,A
   \   000153   E0           MOVX    A,@DPTR
   \   000154   24FF         ADD     A,#-0x1
   \   000156   F0           MOVX    @DPTR,A
   2571              }
   2572            }
   2573          
   2574            // What message do we send now
   2575            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_9:
   \   000157   90....       MOV     DPTR,#matchED
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F8           MOV     R0,A
   \   00015C   A3           INC     DPTR
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   C8           XCH     A,R0
   \   00015F   2431         ADD     A,#0x31
   \   000161   F582         MOV     DPL,A
   \   000163   C8           XCH     A,R0
   \   000164   3400         ADDC    A,#0x0
   \   000166   F583         MOV     DPH,A
   \   000168   E0           MOVX    A,@DPTR
   \   000169   7003         JNZ     $+5
   \   00016B   02....       LJMP    ??ZDMatchSendState_11 & 0xFFFF
   2576            {
   2577              ed = &(matchED->ed1);
   \   00016E   90....       MOV     DPTR,#matchED
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F8           MOV     R0,A
   \   000173   A3           INC     DPTR
   \   000174   E0           MOVX    A,@DPTR
   \   000175   F9           MOV     R1,A
   \   000176   88..         MOV     ?V4,R0
   \   000178   89..         MOV     ?V5,R1
   2578              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \   00017A   90....       MOV     DPTR,#matchED
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   F8           MOV     R0,A
   \   00017F   A3           INC     DPTR
   \   000180   E0           MOVX    A,@DPTR
   \   000181   C8           XCH     A,R0
   \   000182   2431         ADD     A,#0x31
   \   000184   F582         MOV     DPL,A
   \   000186   C8           XCH     A,R0
   \   000187   3400         ADDC    A,#0x0
   \   000189   F583         MOV     DPH,A
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   FA           MOV     R2,A
   \   00018D   7B00         MOV     R3,#0x0
   \   00018F   EA           MOV     A,R2
   \   000190   75F002       MOV     B,#0x2
   \   000193   A4           MUL     AB
   \   000194   CA           XCH     A,R2
   \   000195   A8F0         MOV     R0,B
   \   000197   75F000       MOV     B,#0x0
   \   00019A   A4           MUL     AB
   \   00019B   28           ADD     A,R0
   \   00019C   F8           MOV     R0,A
   \   00019D   75F002       MOV     B,#0x2
   \   0001A0   EB           MOV     A,R3
   \   0001A1   A4           MUL     AB
   \   0001A2   28           ADD     A,R0
   \   0001A3   FB           MOV     R3,A
   \   0001A4   90....       MOV     DPTR,#matchED
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   F8           MOV     R0,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   C8           XCH     A,R0
   \   0001AC   2432         ADD     A,#0x32
   \   0001AE   F582         MOV     DPL,A
   \   0001B0   C8           XCH     A,R0
   \   0001B1   3400         ADDC    A,#0x0
   \   0001B3   F583         MOV     DPH,A
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   2A           ADD     A,R2
   \   0001B7   F8           MOV     R0,A
   \   0001B8   A3           INC     DPTR
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   3B           ADDC    A,R3
   \   0001BB   F9           MOV     R1,A
   \   0001BC   E8           MOV     A,R0
   \   0001BD   24FE         ADD     A,#-0x2
   \   0001BF   F582         MOV     DPL,A
   \   0001C1   E9           MOV     A,R1
   \   0001C2   34FF         ADDC    A,#-0x1
   \   0001C4   F583         MOV     DPH,A
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   FE           MOV     R6,A
   \   0001C8   A3           INC     DPTR
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   FF           MOV     R7,A
   2579              dstIEEEAddr = matchED->ed2.ieeeAddr;
   \   0001CB   90....       MOV     DPTR,#matchED
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   241D         ADD     A,#0x1d
   \   0001D1   F8           MOV     R0,A
   \   0001D2   A3           INC     DPTR
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   3400         ADDC    A,#0x0
   \   0001D6   F9           MOV     R1,A
   \   0001D7   88..         MOV     ?V8,R0
   \   0001D9   89..         MOV     ?V9,R1
   2580              dstEP = matchED->ed2.endpoint;
   \   0001DB   90....       MOV     DPTR,#matchED
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   F8           MOV     R0,A
   \   0001E0   A3           INC     DPTR
   \   0001E1   E0           MOVX    A,@DPTR
   \   0001E2   C8           XCH     A,R0
   \   0001E3   2425         ADD     A,#0x25
   \   0001E5   F582         MOV     DPL,A
   \   0001E7   C8           XCH     A,R0
   \   0001E8   3400         ADDC    A,#0x0
   \   0001EA   F583         MOV     DPH,A
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   F5..         MOV     ?V3,A
   \   0001EF   02....       LJMP    ??ZDMatchSendState_12 & 0xFFFF
   2581            }
   2582            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_11:
   \   0001F2   90....       MOV     DPTR,#matchED
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   F8           MOV     R0,A
   \   0001F7   A3           INC     DPTR
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   C8           XCH     A,R0
   \   0001FA   2434         ADD     A,#0x34
   \   0001FC   F582         MOV     DPL,A
   \   0001FE   C8           XCH     A,R0
   \   0001FF   3400         ADDC    A,#0x0
   \   000201   F583         MOV     DPH,A
   \   000203   E0           MOVX    A,@DPTR
   \   000204   7003         JNZ     $+5
   \   000206   02....       LJMP    ??ZDMatchSendState_12 & 0xFFFF
   2583            {
   2584              ed = &(matchED->ed2);
   \   000209   90....       MOV     DPTR,#matchED
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   2417         ADD     A,#0x17
   \   00020F   F8           MOV     R0,A
   \   000210   A3           INC     DPTR
   \   000211   E0           MOVX    A,@DPTR
   \   000212   3400         ADDC    A,#0x0
   \   000214   F9           MOV     R1,A
   \   000215   88..         MOV     ?V4,R0
   \   000217   89..         MOV     ?V5,R1
   2585              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \   000219   90....       MOV     DPTR,#matchED
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   F8           MOV     R0,A
   \   00021E   A3           INC     DPTR
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   C8           XCH     A,R0
   \   000221   2434         ADD     A,#0x34
   \   000223   F582         MOV     DPL,A
   \   000225   C8           XCH     A,R0
   \   000226   3400         ADDC    A,#0x0
   \   000228   F583         MOV     DPH,A
   \   00022A   E0           MOVX    A,@DPTR
   \   00022B   FA           MOV     R2,A
   \   00022C   7B00         MOV     R3,#0x0
   \   00022E   EA           MOV     A,R2
   \   00022F   75F002       MOV     B,#0x2
   \   000232   A4           MUL     AB
   \   000233   CA           XCH     A,R2
   \   000234   A8F0         MOV     R0,B
   \   000236   75F000       MOV     B,#0x0
   \   000239   A4           MUL     AB
   \   00023A   28           ADD     A,R0
   \   00023B   F8           MOV     R0,A
   \   00023C   75F002       MOV     B,#0x2
   \   00023F   EB           MOV     A,R3
   \   000240   A4           MUL     AB
   \   000241   28           ADD     A,R0
   \   000242   FB           MOV     R3,A
   \   000243   90....       MOV     DPTR,#matchED
   \   000246   E0           MOVX    A,@DPTR
   \   000247   F8           MOV     R0,A
   \   000248   A3           INC     DPTR
   \   000249   E0           MOVX    A,@DPTR
   \   00024A   C8           XCH     A,R0
   \   00024B   2435         ADD     A,#0x35
   \   00024D   F582         MOV     DPL,A
   \   00024F   C8           XCH     A,R0
   \   000250   3400         ADDC    A,#0x0
   \   000252   F583         MOV     DPH,A
   \   000254   E0           MOVX    A,@DPTR
   \   000255   2A           ADD     A,R2
   \   000256   F8           MOV     R0,A
   \   000257   A3           INC     DPTR
   \   000258   E0           MOVX    A,@DPTR
   \   000259   3B           ADDC    A,R3
   \   00025A   F9           MOV     R1,A
   \   00025B   E8           MOV     A,R0
   \   00025C   24FE         ADD     A,#-0x2
   \   00025E   F582         MOV     DPL,A
   \   000260   E9           MOV     A,R1
   \   000261   34FF         ADDC    A,#-0x1
   \   000263   F583         MOV     DPH,A
   \   000265   E0           MOVX    A,@DPTR
   \   000266   FE           MOV     R6,A
   \   000267   A3           INC     DPTR
   \   000268   E0           MOVX    A,@DPTR
   \   000269   FF           MOV     R7,A
   2586              dstIEEEAddr = matchED->ed1.ieeeAddr;
   \   00026A   90....       MOV     DPTR,#matchED
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   2406         ADD     A,#0x6
   \   000270   F8           MOV     R0,A
   \   000271   A3           INC     DPTR
   \   000272   E0           MOVX    A,@DPTR
   \   000273   3400         ADDC    A,#0x0
   \   000275   F9           MOV     R1,A
   \   000276   88..         MOV     ?V8,R0
   \   000278   89..         MOV     ?V9,R1
   2587              dstEP = matchED->ed1.endpoint;
   \   00027A   90....       MOV     DPTR,#matchED
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   F8           MOV     R0,A
   \   00027F   A3           INC     DPTR
   \   000280   E0           MOVX    A,@DPTR
   \   000281   C8           XCH     A,R0
   \   000282   240E         ADD     A,#0xe
   \   000284   F582         MOV     DPL,A
   \   000286   C8           XCH     A,R0
   \   000287   3400         ADDC    A,#0x0
   \   000289   F583         MOV     DPH,A
   \   00028B   E0           MOVX    A,@DPTR
   \   00028C   F5..         MOV     ?V3,A
   2588            }
   2589          
   2590            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_12:
   \   00028E   7409         MOV     A,#0x9
   \   000290   12....       LCALL   ?XSTACK_DISP0_8
   \   000293   7402         MOV     A,#0x2
   \   000295   F0           MOVX    @DPTR,A
   2591          
   2592            // Send the next message
   2593            if ( (rspStatus == ZDP_SUCCESS) && ed )
   \   000296   85..82       MOV     DPL,?XSP + 0
   \   000299   85..83       MOV     DPH,?XSP + 1
   \   00029C   E0           MOVX    A,@DPTR
   \   00029D   6003         JZ      $+5
   \   00029F   02....       LJMP    ??ZDMatchSendState_13 & 0xFFFF
   \   0002A2   E5..         MOV     A,?V4
   \   0002A4   45..         ORL     A,?V5
   \   0002A6   7003         JNZ     $+5
   \   0002A8   02....       LJMP    ??ZDMatchSendState_13 & 0xFFFF
   2594            {
   2595              // Send unbind/bind message to source
   2596              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   0002AB   90....       MOV     DPTR,#matchED
   \   0002AE   E0           MOVX    A,@DPTR
   \   0002AF   F8           MOV     R0,A
   \   0002B0   A3           INC     DPTR
   \   0002B1   E0           MOVX    A,@DPTR
   \   0002B2   C8           XCH     A,R0
   \   0002B3   242F         ADD     A,#0x2f
   \   0002B5   F582         MOV     DPL,A
   \   0002B7   C8           XCH     A,R0
   \   0002B8   3400         ADDC    A,#0x0
   \   0002BA   F583         MOV     DPH,A
   \   0002BC   E0           MOVX    A,@DPTR
   \   0002BD   6401         XRL     A,#0x1
   \   0002BF   7008         JNZ     ??ZDMatchSendState_14
   2597              {
   2598                msgType = Unbind_req;
   \   0002C1   75..22       MOV     ?V0,#0x22
   \   0002C4   75..00       MOV     ?V1,#0x0
   \   0002C7   8006         SJMP    ??ZDMatchSendState_15
   2599              }
   2600              else
   2601              {
   2602                msgType = Bind_req;
   \                     ??ZDMatchSendState_14:
   \   0002C9   75..21       MOV     ?V0,#0x21
   \   0002CC   75..00       MOV     ?V1,#0x0
   2603              }
   2604          
   2605              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_15:
   \   0002CF   85..82       MOV     DPL,?V4
   \   0002D2   85..83       MOV     DPH,?V5
   \   0002D5   A3           INC     DPTR
   \   0002D6   A3           INC     DPTR
   \   0002D7   E0           MOVX    A,@DPTR
   \   0002D8   F8           MOV     R0,A
   \   0002D9   A3           INC     DPTR
   \   0002DA   E0           MOVX    A,@DPTR
   \   0002DB   F9           MOV     R1,A
   \   0002DC   7401         MOV     A,#0x1
   \   0002DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E1   E8           MOV     A,R0
   \   0002E2   F0           MOVX    @DPTR,A
   \   0002E3   A3           INC     DPTR
   \   0002E4   E9           MOV     A,R1
   \   0002E5   F0           MOVX    @DPTR,A
   2606          
   2607              // Save off the transaction sequence number
   2608              matchED->transSeq = ZDP_TransID;
   \   0002E6   90....       MOV     DPTR,#ZDP_TransID
   \   0002E9   E0           MOVX    A,@DPTR
   \   0002EA   C0E0         PUSH    A
   \   0002EC   90....       MOV     DPTR,#matchED
   \   0002EF   E0           MOVX    A,@DPTR
   \   0002F0   F8           MOV     R0,A
   \   0002F1   A3           INC     DPTR
   \   0002F2   E0           MOVX    A,@DPTR
   \   0002F3   C8           XCH     A,R0
   \   0002F4   2430         ADD     A,#0x30
   \   0002F6   F582         MOV     DPL,A
   \   0002F8   C8           XCH     A,R0
   \   0002F9   3400         ADDC    A,#0x0
   \   0002FB   F583         MOV     DPH,A
   \   0002FD   D0E0         POP     A
   \   0002FF   F0           MOVX    @DPTR,A
   2609          
   2610              destinationAddr.addrMode = Addr64Bit;
   \   000300   7412         MOV     A,#0x12
   \   000302   12....       LCALL   ?XSTACK_DISP0_8
   \   000305   7403         MOV     A,#0x3
   \   000307   F0           MOVX    @DPTR,A
   2611              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000308                ; Setup parameters for call to function sAddrExtCpy
   \   000308   AC..         MOV     R4,?V8
   \   00030A   AD..         MOV     R5,?V9
   \   00030C   740A         MOV     A,#0xa
   \   00030E   12....       LCALL   ?XSTACK_DISP101_8
   \   000311   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2612          
   2613              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2614                  &destinationAddr, dstEP, ed->SecurityUse );
   \   000314                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000314   85..82       MOV     DPL,?V4
   \   000317   85..83       MOV     DPH,?V5
   \   00031A   A3           INC     DPTR
   \   00031B   E0           MOVX    A,@DPTR
   \   00031C   F5..         MOV     ?V10,A
   \   00031E   78..         MOV     R0,#?V10
   \   000320   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000323   E5..         MOV     A,?V3
   \   000325   F5..         MOV     ?V10,A
   \   000327   78..         MOV     R0,#?V10
   \   000329   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00032C   740C         MOV     A,#0xc
   \   00032E   12....       LCALL   ?XSTACK_DISP100_8
   \   000331   88..         MOV     ?V10,R0
   \   000333   89..         MOV     ?V11,R1
   \   000335   78..         MOV     R0,#?V10
   \   000337   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00033A   8E..         MOV     ?V10,R6
   \   00033C   8F..         MOV     ?V11,R7
   \   00033E   78..         MOV     R0,#?V10
   \   000340   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000343   E5..         MOV     A,?V4
   \   000345   2406         ADD     A,#0x6
   \   000347   F5..         MOV     ?V10,A
   \   000349   E4           CLR     A
   \   00034A   35..         ADDC    A,?V5
   \   00034C   F5..         MOV     ?V11,A
   \   00034E   78..         MOV     R0,#?V10
   \   000350   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000353   E5..         MOV     A,?V4
   \   000355   240E         ADD     A,#0xe
   \   000357   F582         MOV     DPL,A
   \   000359   E4           CLR     A
   \   00035A   35..         ADDC    A,?V5
   \   00035C   F583         MOV     DPH,A
   \   00035E   E0           MOVX    A,@DPTR
   \   00035F   F9           MOV     R1,A
   \   000360   7409         MOV     A,#0x9
   \   000362   12....       LCALL   ?XSTACK_DISP102_8
   \   000365   AA..         MOV     R2,?V0
   \   000367   AB..         MOV     R3,?V1
   \   000369   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   00036C   7408         MOV     A,#0x8
   \   00036E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000371   E9           MOV     A,R1
   2615          
   2616              // Set timeout for response
   2617              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000372                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000372   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000374   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000376   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000379   E0           MOVX    A,@DPTR
   \   00037A   FA           MOV     R2,A
   \   00037B   A3           INC     DPTR
   \   00037C   E0           MOVX    A,@DPTR
   \   00037D   FB           MOV     R3,A
   \   00037E   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   000381   02....       LJMP    ??ZDMatchSendState_16 & 0xFFFF
   2618            }
   2619            else
   2620            {
   2621              // Send the response messages to requesting devices
   2622              // send response to first requester
   2623              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_13:
   \   000384   90....       MOV     DPTR,#matchED
   \   000387   E0           MOVX    A,@DPTR
   \   000388   F8           MOV     R0,A
   \   000389   A3           INC     DPTR
   \   00038A   E0           MOVX    A,@DPTR
   \   00038B   F583         MOV     DPH,A
   \   00038D   8882         MOV     DPL,R0
   \   00038F   A3           INC     DPTR
   \   000390   A3           INC     DPTR
   \   000391   E0           MOVX    A,@DPTR
   \   000392   F8           MOV     R0,A
   \   000393   A3           INC     DPTR
   \   000394   E0           MOVX    A,@DPTR
   \   000395   F9           MOV     R1,A
   \   000396   7401         MOV     A,#0x1
   \   000398   12....       LCALL   ?XSTACK_DISP0_8
   \   00039B   E8           MOV     A,R0
   \   00039C   F0           MOVX    @DPTR,A
   \   00039D   A3           INC     DPTR
   \   00039E   E9           MOV     A,R1
   \   00039F   F0           MOVX    @DPTR,A
   2624              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \   0003A0                ; Setup parameters for call to function ZDP_SendData
   \   0003A0   90....       MOV     DPTR,#matchED
   \   0003A3   E0           MOVX    A,@DPTR
   \   0003A4   F8           MOV     R0,A
   \   0003A5   A3           INC     DPTR
   \   0003A6   E0           MOVX    A,@DPTR
   \   0003A7   F583         MOV     DPH,A
   \   0003A9   8882         MOV     DPL,R0
   \   0003AB   A3           INC     DPTR
   \   0003AC   E0           MOVX    A,@DPTR
   \   0003AD   F5..         MOV     ?V10,A
   \   0003AF   78..         MOV     R0,#?V10
   \   0003B1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003B4   7401         MOV     A,#0x1
   \   0003B6   12....       LCALL   ?XSTACK_DISP100_8
   \   0003B9   88..         MOV     ?V10,R0
   \   0003BB   89..         MOV     ?V11,R1
   \   0003BD   78..         MOV     R0,#?V10
   \   0003BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003C2   75..20       MOV     ?V10,#0x20
   \   0003C5   75..80       MOV     ?V11,#-0x80
   \   0003C8   78..         MOV     R0,#?V10
   \   0003CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003CD   7901         MOV     R1,#0x1
   \   0003CF   7406         MOV     A,#0x6
   \   0003D1   12....       LCALL   ?XSTACK_DISP102_8
   \   0003D4   90....       MOV     DPTR,#matchED
   \   0003D7   E0           MOVX    A,@DPTR
   \   0003D8   FA           MOV     R2,A
   \   0003D9   A3           INC     DPTR
   \   0003DA   E0           MOVX    A,@DPTR
   \   0003DB   FB           MOV     R3,A
   \   0003DC   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0003DF   7405         MOV     A,#0x5
   \   0003E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003E4   E9           MOV     A,R1
   2625          
   2626              // send response to second requester
   2627              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0003E5   90....       MOV     DPTR,#matchED
   \   0003E8   E0           MOVX    A,@DPTR
   \   0003E9   F8           MOV     R0,A
   \   0003EA   A3           INC     DPTR
   \   0003EB   E0           MOVX    A,@DPTR
   \   0003EC   C8           XCH     A,R0
   \   0003ED   242E         ADD     A,#0x2e
   \   0003EF   F582         MOV     DPL,A
   \   0003F1   C8           XCH     A,R0
   \   0003F2   3400         ADDC    A,#0x0
   \   0003F4   F583         MOV     DPH,A
   \   0003F6   E0           MOVX    A,@DPTR
   \   0003F7   6402         XRL     A,#0x2
   \   0003F9   706E         JNZ     ??ZDMatchSendState_17
   2628              {
   2629                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   0003FB   90....       MOV     DPTR,#matchED
   \   0003FE   E0           MOVX    A,@DPTR
   \   0003FF   F8           MOV     R0,A
   \   000400   A3           INC     DPTR
   \   000401   E0           MOVX    A,@DPTR
   \   000402   C8           XCH     A,R0
   \   000403   2419         ADD     A,#0x19
   \   000405   F582         MOV     DPL,A
   \   000407   C8           XCH     A,R0
   \   000408   3400         ADDC    A,#0x0
   \   00040A   F583         MOV     DPH,A
   \   00040C   E0           MOVX    A,@DPTR
   \   00040D   F8           MOV     R0,A
   \   00040E   A3           INC     DPTR
   \   00040F   E0           MOVX    A,@DPTR
   \   000410   F9           MOV     R1,A
   \   000411   7401         MOV     A,#0x1
   \   000413   12....       LCALL   ?XSTACK_DISP0_8
   \   000416   E8           MOV     A,R0
   \   000417   F0           MOVX    @DPTR,A
   \   000418   A3           INC     DPTR
   \   000419   E9           MOV     A,R1
   \   00041A   F0           MOVX    @DPTR,A
   2630                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   \   00041B                ; Setup parameters for call to function ZDP_SendData
   \   00041B   90....       MOV     DPTR,#matchED
   \   00041E   E0           MOVX    A,@DPTR
   \   00041F   F8           MOV     R0,A
   \   000420   A3           INC     DPTR
   \   000421   E0           MOVX    A,@DPTR
   \   000422   C8           XCH     A,R0
   \   000423   2418         ADD     A,#0x18
   \   000425   F582         MOV     DPL,A
   \   000427   C8           XCH     A,R0
   \   000428   3400         ADDC    A,#0x0
   \   00042A   F583         MOV     DPH,A
   \   00042C   E0           MOVX    A,@DPTR
   \   00042D   F5..         MOV     ?V10,A
   \   00042F   78..         MOV     R0,#?V10
   \   000431   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000434   7401         MOV     A,#0x1
   \   000436   12....       LCALL   ?XSTACK_DISP100_8
   \   000439   88..         MOV     ?V10,R0
   \   00043B   89..         MOV     ?V11,R1
   \   00043D   78..         MOV     R0,#?V10
   \   00043F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000442   75..20       MOV     ?V10,#0x20
   \   000445   75..80       MOV     ?V11,#-0x80
   \   000448   78..         MOV     R0,#?V10
   \   00044A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00044D   7901         MOV     R1,#0x1
   \   00044F   7406         MOV     A,#0x6
   \   000451   12....       LCALL   ?XSTACK_DISP102_8
   \   000454   90....       MOV     DPTR,#matchED
   \   000457   E0           MOVX    A,@DPTR
   \   000458   2417         ADD     A,#0x17
   \   00045A   FA           MOV     R2,A
   \   00045B   A3           INC     DPTR
   \   00045C   E0           MOVX    A,@DPTR
   \   00045D   3400         ADDC    A,#0x0
   \   00045F   FB           MOV     R3,A
   \   000460   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000463   7405         MOV     A,#0x5
   \   000465   12....       LCALL   ?DEALLOC_XSTACK8
   \   000468   E9           MOV     A,R1
   2631              }
   2632          
   2633              // Process ended - release memory used
   2634              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_17:
   \   000469                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000469   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2635            }
   2636          
   2637            return ( TRUE );
   \                     ??ZDMatchSendState_16:
   \   00046C   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_1:
   \   00046E   7413         MOV     A,#0x13
   \   000470   12....       LCALL   ?DEALLOC_XSTACK8
   \   000473   7F0C         MOV     R7,#0xc
   \   000475   02....       LJMP    ?BANKED_LEAVE_XDATA
   2638          }
   2639          
   2640          /*********************************************************************
   2641           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2642           *
   2643           * @brief   End device bind timeout.
   2644           *
   2645           * @param  none
   2646           *
   2647           * @return  none
   2648           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2649          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2650          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2651            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   00000D   E9           MOV     A,R1
   2652          }
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
   2653          #endif // ZG_BUILD_COORDINATOR_TYPE
   2654          
   2655          /*********************************************************************
   2656           * ZDO MESSAGE PARSING API FUNCTIONS
   2657           */
   2658          
   2659          /*********************************************************************
   2660           * @fn          ZDO_ParseEndDeviceBindReq
   2661           *
   2662           * @brief       This function parses the End_Device_Bind_req message.
   2663           *
   2664           *     NOTE:  The clusters lists in bindReq are allocated in this
   2665           *            function and must be freed by that calling function.
   2666           *
   2667           * @param       inMsg  - incoming message (request)
   2668           * @param       bindReq - pointer to place to parse message to
   2669           *
   2670           * @return      none
   2671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2672          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2673          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2674            uint8 *msg;
   2675          
   2676            // Parse the message
   2677            bindReq->TransSeq = inMsg->TransSeq;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   240F         ADD     A,#0xf
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C0E0         PUSH    A
   \   00001B   85..82       MOV     DPL,?V0
   \   00001E   85..83       MOV     DPH,?V1
   \   000021   D0E0         POP     A
   \   000023   F0           MOVX    @DPTR,A
   2678            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \   000024   85..82       MOV     DPL,?V2
   \   000027   85..83       MOV     DPH,?V3
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   85..82       MOV     DPL,?V0
   \   000034   85..83       MOV     DPH,?V1
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
   2679            bindReq->SecurityUse = inMsg->SecurityUse;
   \   00003E   E5..         MOV     A,?V2
   \   000040   240E         ADD     A,#0xe
   \   000042   F582         MOV     DPL,A
   \   000044   E4           CLR     A
   \   000045   35..         ADDC    A,?V3
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C0E0         PUSH    A
   \   00004C   85..82       MOV     DPL,?V0
   \   00004F   85..83       MOV     DPH,?V1
   \   000052   A3           INC     DPTR
   \   000053   D0E0         POP     A
   \   000055   F0           MOVX    @DPTR,A
   2680            msg = inMsg->asdu;
   \   000056   E5..         MOV     A,?V2
   \   000058   2413         ADD     A,#0x13
   \   00005A   F582         MOV     DPL,A
   \   00005C   E4           CLR     A
   \   00005D   35..         ADDC    A,?V3
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F9           MOV     R1,A
   \   000066   E8           MOV     A,R0
   \   000067   FE           MOV     R6,A
   \   000068   E9           MOV     A,R1
   \   000069   FF           MOV     R7,A
   2681          
   2682            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FA           MOV     R2,A
   \   000070   7B00         MOV     R3,#0x0
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F8           MOV     R0,A
   \   000079   7900         MOV     R1,#0x0
   \   00007B   E4           CLR     A
   \   00007C   C8           XCH     A,R0
   \   00007D   F9           MOV     R1,A
   \   00007E   EA           MOV     A,R2
   \   00007F   28           ADD     A,R0
   \   000080   F8           MOV     R0,A
   \   000081   EB           MOV     A,R3
   \   000082   39           ADDC    A,R1
   \   000083   F9           MOV     R1,A
   \   000084   85..82       MOV     DPL,?V0
   \   000087   85..83       MOV     DPH,?V1
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   E8           MOV     A,R0
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   E9           MOV     A,R1
   \   000092   F0           MOVX    @DPTR,A
   2683            msg += 2;
   \   000093   EE           MOV     A,R6
   \   000094   2402         ADD     A,#0x2
   \   000096   FE           MOV     R6,A
   \   000097   5001         JNC     ??ZDO_ParseEndDeviceBindReq_0
   \   000099   0F           INC     R7
   2684          
   2685            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   00009A                ; Setup parameters for call to function sAddrExtCpy
   \   00009A   EE           MOV     A,R6
   \   00009B   FC           MOV     R4,A
   \   00009C   EF           MOV     A,R7
   \   00009D   FD           MOV     R5,A
   \   00009E   E5..         MOV     A,?V0
   \   0000A0   2406         ADD     A,#0x6
   \   0000A2   FA           MOV     R2,A
   \   0000A3   E4           CLR     A
   \   0000A4   35..         ADDC    A,?V1
   \   0000A6   FB           MOV     R3,A
   \   0000A7   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2686            msg += Z_EXTADDR_LEN;
   \   0000AA   EE           MOV     A,R6
   \   0000AB   2408         ADD     A,#0x8
   \   0000AD   FE           MOV     R6,A
   \   0000AE   5001         JNC     ??ZDO_ParseEndDeviceBindReq_1
   \   0000B0   0F           INC     R7
   2687          
   2688            bindReq->endpoint = *msg++;
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   C0E0         PUSH    A
   \   0000B8   E5..         MOV     A,?V0
   \   0000BA   240E         ADD     A,#0xe
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   E4           CLR     A
   \   0000BF   35..         ADDC    A,?V1
   \   0000C1   F583         MOV     DPH,A
   \   0000C3   D0E0         POP     A
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   8E82         MOV     DPL,R6
   \   0000C8   8F83         MOV     DPH,R7
   \   0000CA   A3           INC     DPTR
   \   0000CB   AE82         MOV     R6,DPL
   \   0000CD   AF83         MOV     R7,DPH
   2689            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \   0000CF   8E82         MOV     DPL,R6
   \   0000D1   8F83         MOV     DPH,R7
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   FA           MOV     R2,A
   \   0000D5   7B00         MOV     R3,#0x0
   \   0000D7   8E82         MOV     DPL,R6
   \   0000D9   8F83         MOV     DPH,R7
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F8           MOV     R0,A
   \   0000DE   7900         MOV     R1,#0x0
   \   0000E0   E4           CLR     A
   \   0000E1   C8           XCH     A,R0
   \   0000E2   F9           MOV     R1,A
   \   0000E3   EA           MOV     A,R2
   \   0000E4   28           ADD     A,R0
   \   0000E5   F8           MOV     R0,A
   \   0000E6   EB           MOV     A,R3
   \   0000E7   39           ADDC    A,R1
   \   0000E8   F9           MOV     R1,A
   \   0000E9   E5..         MOV     A,?V0
   \   0000EB   240F         ADD     A,#0xf
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   E4           CLR     A
   \   0000F0   35..         ADDC    A,?V1
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   E8           MOV     A,R0
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E9           MOV     A,R1
   \   0000F8   F0           MOVX    @DPTR,A
   2690            msg += 2;
   \   0000F9   EE           MOV     A,R6
   \   0000FA   2402         ADD     A,#0x2
   \   0000FC   FE           MOV     R6,A
   \   0000FD   5001         JNC     ??ZDO_ParseEndDeviceBindReq_2
   \   0000FF   0F           INC     R7
   2691          
   2692            bindReq->inClusters = NULL;
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   000100   E5..         MOV     A,?V0
   \   000102   2412         ADD     A,#0x12
   \   000104   F582         MOV     DPL,A
   \   000106   E4           CLR     A
   \   000107   35..         ADDC    A,?V1
   \   000109   F583         MOV     DPH,A
   \   00010B   7400         MOV     A,#0x0
   \   00010D   F0           MOVX    @DPTR,A
   \   00010E   A3           INC     DPTR
   \   00010F   7400         MOV     A,#0x0
   \   000111   F0           MOVX    @DPTR,A
   2693            bindReq->outClusters = NULL;
   \   000112   E5..         MOV     A,?V0
   \   000114   2415         ADD     A,#0x15
   \   000116   F582         MOV     DPL,A
   \   000118   E4           CLR     A
   \   000119   35..         ADDC    A,?V1
   \   00011B   F583         MOV     DPH,A
   \   00011D   7400         MOV     A,#0x0
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   7400         MOV     A,#0x0
   \   000123   F0           MOVX    @DPTR,A
   2694          
   2695            if ((bindReq->numInClusters = *msg++) &&
   2696                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \   000124   8E82         MOV     DPL,R6
   \   000126   8F83         MOV     DPH,R7
   \   000128   E0           MOVX    A,@DPTR
   \   000129   C0E0         PUSH    A
   \   00012B   E5..         MOV     A,?V0
   \   00012D   2411         ADD     A,#0x11
   \   00012F   F582         MOV     DPL,A
   \   000131   E4           CLR     A
   \   000132   35..         ADDC    A,?V1
   \   000134   F583         MOV     DPH,A
   \   000136   D0E0         POP     A
   \   000138   F0           MOVX    @DPTR,A
   \   000139   8E82         MOV     DPL,R6
   \   00013B   8F83         MOV     DPH,R7
   \   00013D   A3           INC     DPTR
   \   00013E   AE82         MOV     R6,DPL
   \   000140   AF83         MOV     R7,DPH
   \   000142   E5..         MOV     A,?V0
   \   000144   2411         ADD     A,#0x11
   \   000146   F582         MOV     DPL,A
   \   000148   E4           CLR     A
   \   000149   35..         ADDC    A,?V1
   \   00014B   F583         MOV     DPH,A
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   6079         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   000150                ; Setup parameters for call to function osal_mem_alloc
   \   000150   E5..         MOV     A,?V0
   \   000152   2411         ADD     A,#0x11
   \   000154   F582         MOV     DPL,A
   \   000156   E4           CLR     A
   \   000157   35..         ADDC    A,?V1
   \   000159   F583         MOV     DPH,A
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   FA           MOV     R2,A
   \   00015D   7B00         MOV     R3,#0x0
   \   00015F   EA           MOV     A,R2
   \   000160   75F002       MOV     B,#0x2
   \   000163   A4           MUL     AB
   \   000164   CA           XCH     A,R2
   \   000165   A8F0         MOV     R0,B
   \   000167   75F000       MOV     B,#0x0
   \   00016A   A4           MUL     AB
   \   00016B   28           ADD     A,R0
   \   00016C   F8           MOV     R0,A
   \   00016D   75F002       MOV     B,#0x2
   \   000170   EB           MOV     A,R3
   \   000171   A4           MUL     AB
   \   000172   28           ADD     A,R0
   \   000173   FB           MOV     R3,A
   \   000174   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000177   E5..         MOV     A,?V0
   \   000179   2412         ADD     A,#0x12
   \   00017B   F582         MOV     DPL,A
   \   00017D   E4           CLR     A
   \   00017E   35..         ADDC    A,?V1
   \   000180   F583         MOV     DPH,A
   \   000182   EA           MOV     A,R2
   \   000183   F0           MOVX    @DPTR,A
   \   000184   A3           INC     DPTR
   \   000185   EB           MOV     A,R3
   \   000186   F0           MOVX    @DPTR,A
   \   000187   E5..         MOV     A,?V0
   \   000189   2412         ADD     A,#0x12
   \   00018B   F582         MOV     DPL,A
   \   00018D   E4           CLR     A
   \   00018E   35..         ADDC    A,?V1
   \   000190   F583         MOV     DPH,A
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F8           MOV     R0,A
   \   000194   A3           INC     DPTR
   \   000195   E0           MOVX    A,@DPTR
   \   000196   F9           MOV     R1,A
   \   000197   E8           MOV     A,R0
   \   000198   49           ORL     A,R1
   \   000199   602E         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2697            {
   2698              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   00019B                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00019B   E5..         MOV     A,?V0
   \   00019D   2412         ADD     A,#0x12
   \   00019F   F582         MOV     DPL,A
   \   0001A1   E4           CLR     A
   \   0001A2   35..         ADDC    A,?V1
   \   0001A4   F583         MOV     DPH,A
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   FC           MOV     R4,A
   \   0001A8   A3           INC     DPTR
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   FD           MOV     R5,A
   \   0001AB   EE           MOV     A,R6
   \   0001AC   FA           MOV     R2,A
   \   0001AD   EF           MOV     A,R7
   \   0001AE   FB           MOV     R3,A
   \   0001AF   E5..         MOV     A,?V0
   \   0001B1   2411         ADD     A,#0x11
   \   0001B3   F582         MOV     DPL,A
   \   0001B5   E4           CLR     A
   \   0001B6   35..         ADDC    A,?V1
   \   0001B8   F583         MOV     DPH,A
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   F9           MOV     R1,A
   \   0001BC   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0001BF   8A..         MOV     ?V4,R2
   \   0001C1   8B..         MOV     ?V5,R3
   \   0001C3   AE..         MOV     R6,?V4
   \   0001C5   AF..         MOV     R7,?V5
   \   0001C7   800E         SJMP    ??ZDO_ParseEndDeviceBindReq_4
   2699            }
   2700            else
   2701            {
   2702              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0001C9   E5..         MOV     A,?V0
   \   0001CB   2411         ADD     A,#0x11
   \   0001CD   F582         MOV     DPL,A
   \   0001CF   E4           CLR     A
   \   0001D0   35..         ADDC    A,?V1
   \   0001D2   F583         MOV     DPH,A
   \   0001D4   7400         MOV     A,#0x0
   \   0001D6   F0           MOVX    @DPTR,A
   2703            }
   2704          
   2705            if ((bindReq->numOutClusters = *msg++) &&
   2706                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0001D7   8E82         MOV     DPL,R6
   \   0001D9   8F83         MOV     DPH,R7
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   C0E0         PUSH    A
   \   0001DE   E5..         MOV     A,?V0
   \   0001E0   2414         ADD     A,#0x14
   \   0001E2   F582         MOV     DPL,A
   \   0001E4   E4           CLR     A
   \   0001E5   35..         ADDC    A,?V1
   \   0001E7   F583         MOV     DPH,A
   \   0001E9   D0E0         POP     A
   \   0001EB   F0           MOVX    @DPTR,A
   \   0001EC   8E82         MOV     DPL,R6
   \   0001EE   8F83         MOV     DPH,R7
   \   0001F0   A3           INC     DPTR
   \   0001F1   AE82         MOV     R6,DPL
   \   0001F3   AF83         MOV     R7,DPH
   \   0001F5   E5..         MOV     A,?V0
   \   0001F7   2414         ADD     A,#0x14
   \   0001F9   F582         MOV     DPL,A
   \   0001FB   E4           CLR     A
   \   0001FC   35..         ADDC    A,?V1
   \   0001FE   F583         MOV     DPH,A
   \   000200   E0           MOVX    A,@DPTR
   \   000201   6079         JZ      ??ZDO_ParseEndDeviceBindReq_5
   \   000203                ; Setup parameters for call to function osal_mem_alloc
   \   000203   E5..         MOV     A,?V0
   \   000205   2414         ADD     A,#0x14
   \   000207   F582         MOV     DPL,A
   \   000209   E4           CLR     A
   \   00020A   35..         ADDC    A,?V1
   \   00020C   F583         MOV     DPH,A
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   FA           MOV     R2,A
   \   000210   7B00         MOV     R3,#0x0
   \   000212   EA           MOV     A,R2
   \   000213   75F002       MOV     B,#0x2
   \   000216   A4           MUL     AB
   \   000217   CA           XCH     A,R2
   \   000218   A8F0         MOV     R0,B
   \   00021A   75F000       MOV     B,#0x0
   \   00021D   A4           MUL     AB
   \   00021E   28           ADD     A,R0
   \   00021F   F8           MOV     R0,A
   \   000220   75F002       MOV     B,#0x2
   \   000223   EB           MOV     A,R3
   \   000224   A4           MUL     AB
   \   000225   28           ADD     A,R0
   \   000226   FB           MOV     R3,A
   \   000227   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00022A   E5..         MOV     A,?V0
   \   00022C   2415         ADD     A,#0x15
   \   00022E   F582         MOV     DPL,A
   \   000230   E4           CLR     A
   \   000231   35..         ADDC    A,?V1
   \   000233   F583         MOV     DPH,A
   \   000235   EA           MOV     A,R2
   \   000236   F0           MOVX    @DPTR,A
   \   000237   A3           INC     DPTR
   \   000238   EB           MOV     A,R3
   \   000239   F0           MOVX    @DPTR,A
   \   00023A   E5..         MOV     A,?V0
   \   00023C   2415         ADD     A,#0x15
   \   00023E   F582         MOV     DPL,A
   \   000240   E4           CLR     A
   \   000241   35..         ADDC    A,?V1
   \   000243   F583         MOV     DPH,A
   \   000245   E0           MOVX    A,@DPTR
   \   000246   F8           MOV     R0,A
   \   000247   A3           INC     DPTR
   \   000248   E0           MOVX    A,@DPTR
   \   000249   F9           MOV     R1,A
   \   00024A   E8           MOV     A,R0
   \   00024B   49           ORL     A,R1
   \   00024C   602E         JZ      ??ZDO_ParseEndDeviceBindReq_5
   2707            {
   2708              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   00024E                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00024E   E5..         MOV     A,?V0
   \   000250   2415         ADD     A,#0x15
   \   000252   F582         MOV     DPL,A
   \   000254   E4           CLR     A
   \   000255   35..         ADDC    A,?V1
   \   000257   F583         MOV     DPH,A
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   FC           MOV     R4,A
   \   00025B   A3           INC     DPTR
   \   00025C   E0           MOVX    A,@DPTR
   \   00025D   FD           MOV     R5,A
   \   00025E   EE           MOV     A,R6
   \   00025F   FA           MOV     R2,A
   \   000260   EF           MOV     A,R7
   \   000261   FB           MOV     R3,A
   \   000262   E5..         MOV     A,?V0
   \   000264   2414         ADD     A,#0x14
   \   000266   F582         MOV     DPL,A
   \   000268   E4           CLR     A
   \   000269   35..         ADDC    A,?V1
   \   00026B   F583         MOV     DPH,A
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   F9           MOV     R1,A
   \   00026F   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000272   8A..         MOV     ?V4,R2
   \   000274   8B..         MOV     ?V5,R3
   \   000276   AE..         MOV     R6,?V4
   \   000278   AF..         MOV     R7,?V5
   \   00027A   800E         SJMP    ??ZDO_ParseEndDeviceBindReq_6
   2709            }
   2710            else
   2711            {
   2712              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   00027C   E5..         MOV     A,?V0
   \   00027E   2414         ADD     A,#0x14
   \   000280   F582         MOV     DPL,A
   \   000282   E4           CLR     A
   \   000283   35..         ADDC    A,?V1
   \   000285   F583         MOV     DPH,A
   \   000287   7400         MOV     A,#0x0
   \   000289   F0           MOVX    @DPTR,A
   2713            }
   2714          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   00028A   7F06         MOV     R7,#0x6
   \   00028C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2715          
   2716          /*********************************************************************
   2717           * @fn          ZDO_ParseBindUnbindReq
   2718           *
   2719           * @brief       This function parses the Bind_req or Unbind_req message.
   2720           *
   2721           * @param       inMsg  - incoming message (request)
   2722           * @param       pReq - place to put parsed information
   2723           *
   2724           * @return      none
   2725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2726          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2727          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2728            uint8 *msg;
   2729          
   2730            msg = inMsg->asdu;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FE           MOV     R6,A
   \   00001F   E9           MOV     A,R1
   \   000020   FF           MOV     R7,A
   2731            osal_cpyExtAddr( pReq->srcAddress, msg );
   \   000021                ; Setup parameters for call to function sAddrExtCpy
   \   000021   EE           MOV     A,R6
   \   000022   FC           MOV     R4,A
   \   000023   EF           MOV     A,R7
   \   000024   FD           MOV     R5,A
   \   000025   AA..         MOV     R2,?V0
   \   000027   AB..         MOV     R3,?V1
   \   000029   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2732            msg += Z_EXTADDR_LEN;
   \   00002C   EE           MOV     A,R6
   \   00002D   2408         ADD     A,#0x8
   \   00002F   FE           MOV     R6,A
   \   000030   5001         JNC     ??ZDO_ParseBindUnbindReq_0
   \   000032   0F           INC     R7
   2733            pReq->srcEndpoint = *msg++;
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   85..82       MOV     DPL,?V0
   \   00003D   85..83       MOV     DPH,?V1
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   D0E0         POP     A
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   AE82         MOV     R6,DPL
   \   000052   AF83         MOV     R7,DPH
   2734            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FA           MOV     R2,A
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   7900         MOV     R1,#0x0
   \   000065   E4           CLR     A
   \   000066   C8           XCH     A,R0
   \   000067   F9           MOV     R1,A
   \   000068   EA           MOV     A,R2
   \   000069   28           ADD     A,R0
   \   00006A   F8           MOV     R0,A
   \   00006B   EB           MOV     A,R3
   \   00006C   39           ADDC    A,R1
   \   00006D   F9           MOV     R1,A
   \   00006E   85..82       MOV     DPL,?V0
   \   000071   85..83       MOV     DPH,?V1
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E8           MOV     A,R0
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   E9           MOV     A,R1
   \   000081   F0           MOVX    @DPTR,A
   2735            msg += 2;
   \   000082   EE           MOV     A,R6
   \   000083   2402         ADD     A,#0x2
   \   000085   FE           MOV     R6,A
   \   000086   5001         JNC     ??ZDO_ParseBindUnbindReq_1
   \   000088   0F           INC     R7
   2736            pReq->dstAddress.addrMode = *msg++;
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   C0E0         PUSH    A
   \   000090   E5..         MOV     A,?V0
   \   000092   2413         ADD     A,#0x13
   \   000094   F582         MOV     DPL,A
   \   000096   E4           CLR     A
   \   000097   35..         ADDC    A,?V1
   \   000099   F583         MOV     DPH,A
   \   00009B   D0E0         POP     A
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   A3           INC     DPTR
   \   0000A3   AE82         MOV     R6,DPL
   \   0000A5   AF83         MOV     R7,DPH
   2737            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   0000A7   E5..         MOV     A,?V0
   \   0000A9   2413         ADD     A,#0x13
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   E4           CLR     A
   \   0000AE   35..         ADDC    A,?V1
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   6403         XRL     A,#0x3
   \   0000B5   702E         JNZ     ??ZDO_ParseBindUnbindReq_2
   2738            {
   2739              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   0000B7                ; Setup parameters for call to function sAddrExtCpy
   \   0000B7   EE           MOV     A,R6
   \   0000B8   FC           MOV     R4,A
   \   0000B9   EF           MOV     A,R7
   \   0000BA   FD           MOV     R5,A
   \   0000BB   E5..         MOV     A,?V0
   \   0000BD   240B         ADD     A,#0xb
   \   0000BF   FA           MOV     R2,A
   \   0000C0   E4           CLR     A
   \   0000C1   35..         ADDC    A,?V1
   \   0000C3   FB           MOV     R3,A
   \   0000C4   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2740              msg += Z_EXTADDR_LEN;
   \   0000C7   EE           MOV     A,R6
   \   0000C8   2408         ADD     A,#0x8
   \   0000CA   FE           MOV     R6,A
   \   0000CB   5001         JNC     ??ZDO_ParseBindUnbindReq_3
   \   0000CD   0F           INC     R7
   2741              pReq->dstEndpoint = *msg;
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   C0E0         PUSH    A
   \   0000D5   E5..         MOV     A,?V0
   \   0000D7   2414         ADD     A,#0x14
   \   0000D9   F582         MOV     DPL,A
   \   0000DB   E4           CLR     A
   \   0000DC   35..         ADDC    A,?V1
   \   0000DE   F583         MOV     DPH,A
   \   0000E0   D0E0         POP     A
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   802A         SJMP    ??ZDO_ParseBindUnbindReq_4
   2742            }
   2743            else
   2744            {
   2745              // copy group address
   2746              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   FA           MOV     R2,A
   \   0000EB   7B00         MOV     R3,#0x0
   \   0000ED   8E82         MOV     DPL,R6
   \   0000EF   8F83         MOV     DPH,R7
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F8           MOV     R0,A
   \   0000F4   7900         MOV     R1,#0x0
   \   0000F6   E4           CLR     A
   \   0000F7   C8           XCH     A,R0
   \   0000F8   F9           MOV     R1,A
   \   0000F9   EA           MOV     A,R2
   \   0000FA   28           ADD     A,R0
   \   0000FB   F8           MOV     R0,A
   \   0000FC   EB           MOV     A,R3
   \   0000FD   39           ADDC    A,R1
   \   0000FE   F9           MOV     R1,A
   \   0000FF   E5..         MOV     A,?V0
   \   000101   240B         ADD     A,#0xb
   \   000103   F582         MOV     DPL,A
   \   000105   E4           CLR     A
   \   000106   35..         ADDC    A,?V1
   \   000108   F583         MOV     DPH,A
   \   00010A   E8           MOV     A,R0
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   A3           INC     DPTR
   \   00010D   E9           MOV     A,R1
   \   00010E   F0           MOVX    @DPTR,A
   2747            }
   2748          }
   \                     ??ZDO_ParseBindUnbindReq_4:
   \   00010F   7F04         MOV     R7,#0x4
   \   000111   02....       LJMP    ?BANKED_LEAVE_XDATA
   2749          
   2750          /*********************************************************************
   2751           * @fn      ZDO_ParseAddrRsp
   2752           *
   2753           * @brief   Turns the inMsg (incoming message) into the out parsed
   2754           *          structure.
   2755           *
   2756           * @param   inMsg - incoming message
   2757           *
   2758           * @return  pointer to parsed structures.  This structure was
   2759           *          allocated using osal_mem_alloc, so it must be freed
   2760           *          by the calling function [osal_mem_free()].
   2761           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2762          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2763          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2764            ZDO_NwkIEEEAddrResp_t *rsp;
   2765            uint8 *msg;
   2766            byte cnt = 0;
   \   000009   75..00       MOV     ?V4,#0x0
   2767          
   2768            // Calculate the number of items in the list
   2769            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   00000C   E5..         MOV     A,?V0
   \   00000E   2410         ADD     A,#0x10
   \   000010   F582         MOV     DPL,A
   \   000012   E4           CLR     A
   \   000013   35..         ADDC    A,?V1
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C3           CLR     C
   \   000019   940C         SUBB    A,#0xc
   \   00001B   401E         JC      ??ZDO_ParseAddrRsp_0
   2770            {
   2771              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001D   E5..         MOV     A,?V0
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   35..         ADDC    A,?V1
   \   000026   F583         MOV     DPH,A
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   C8           XCH     A,R0
   \   00002D   240B         ADD     A,#0xb
   \   00002F   F582         MOV     DPL,A
   \   000031   C8           XCH     A,R0
   \   000032   3400         ADDC    A,#0x0
   \   000034   F583         MOV     DPH,A
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V4,A
   \   000039   8003         SJMP    ??ZDO_ParseAddrRsp_1
   2772            }
   2773            else
   2774            {
   2775              cnt = 0;
   \                     ??ZDO_ParseAddrRsp_0:
   \   00003B   75..00       MOV     ?V4,#0x0
   2776            }
   2777          
   2778            // Make buffer
   2779            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_1:
   \   00003E                ; Setup parameters for call to function osal_mem_alloc
   \   00003E   A8..         MOV     R0,?V4
   \   000040   7900         MOV     R1,#0x0
   \   000042   E8           MOV     A,R0
   \   000043   75F002       MOV     B,#0x2
   \   000046   A4           MUL     AB
   \   000047   C8           XCH     A,R0
   \   000048   AAF0         MOV     R2,B
   \   00004A   75F000       MOV     B,#0x0
   \   00004D   A4           MUL     AB
   \   00004E   2A           ADD     A,R2
   \   00004F   FA           MOV     R2,A
   \   000050   75F002       MOV     B,#0x2
   \   000053   E9           MOV     A,R1
   \   000054   A4           MUL     AB
   \   000055   2A           ADD     A,R2
   \   000056   F9           MOV     R1,A
   \   000057   E8           MOV     A,R0
   \   000058   240D         ADD     A,#0xd
   \   00005A   FA           MOV     R2,A
   \   00005B   E4           CLR     A
   \   00005C   39           ADDC    A,R1
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000061   8A..         MOV     ?V6,R2
   \   000063   8B..         MOV     ?V7,R3
   \   000065   AE..         MOV     R6,?V6
   \   000067   AF..         MOV     R7,?V7
   2780          
   2781            if ( rsp )
   \   000069   EE           MOV     A,R6
   \   00006A   4F           ORL     A,R7
   \   00006B   7003         JNZ     $+5
   \   00006D   02....       LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
   2782            {
   2783              msg = inMsg->asdu;
   \   000070   E5..         MOV     A,?V0
   \   000072   2413         ADD     A,#0x13
   \   000074   F582         MOV     DPL,A
   \   000076   E4           CLR     A
   \   000077   35..         ADDC    A,?V1
   \   000079   F583         MOV     DPH,A
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F8           MOV     R0,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080   88..         MOV     ?V2,R0
   \   000082   89..         MOV     ?V3,R1
   2784          
   2785              rsp->status = *msg++;
   \   000084   85..82       MOV     DPL,?V2
   \   000087   85..83       MOV     DPH,?V3
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   C0E0         PUSH    A
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   D0E0         POP     A
   \   000093   F0           MOVX    @DPTR,A
   \   000094   85..82       MOV     DPL,?V2
   \   000097   85..83       MOV     DPH,?V3
   \   00009A   A3           INC     DPTR
   \   00009B   8582..       MOV     ?V2,DPL
   \   00009E   8583..       MOV     ?V3,DPH
   2786              if ( rsp->status == ZDO_SUCCESS )
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   6003         JZ      $+5
   \   0000A8   02....       LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
   2787              {
   2788                osal_cpyExtAddr( rsp->extAddr, msg );
   \   0000AB                ; Setup parameters for call to function sAddrExtCpy
   \   0000AB   AC..         MOV     R4,?V2
   \   0000AD   AD..         MOV     R5,?V3
   \   0000AF   EE           MOV     A,R6
   \   0000B0   2403         ADD     A,#0x3
   \   0000B2   FA           MOV     R2,A
   \   0000B3   E4           CLR     A
   \   0000B4   3F           ADDC    A,R7
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2789                msg += Z_EXTADDR_LEN;
   \   0000B9   E5..         MOV     A,?V2
   \   0000BB   2408         ADD     A,#0x8
   \   0000BD   F5..         MOV     ?V2,A
   \   0000BF   5002         JNC     ??ZDO_ParseAddrRsp_3
   \   0000C1   05..         INC     ?V3
   2790                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000C3   85..82       MOV     DPL,?V2
   \   0000C6   85..83       MOV     DPH,?V3
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   FA           MOV     R2,A
   \   0000CB   7B00         MOV     R3,#0x0
   \   0000CD   85..82       MOV     DPL,?V2
   \   0000D0   85..83       MOV     DPH,?V3
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F8           MOV     R0,A
   \   0000D6   7900         MOV     R1,#0x0
   \   0000D8   E4           CLR     A
   \   0000D9   C8           XCH     A,R0
   \   0000DA   F9           MOV     R1,A
   \   0000DB   EA           MOV     A,R2
   \   0000DC   28           ADD     A,R0
   \   0000DD   F8           MOV     R0,A
   \   0000DE   EB           MOV     A,R3
   \   0000DF   39           ADDC    A,R1
   \   0000E0   F9           MOV     R1,A
   \   0000E1   8E82         MOV     DPL,R6
   \   0000E3   8F83         MOV     DPH,R7
   \   0000E5   A3           INC     DPTR
   \   0000E6   E8           MOV     A,R0
   \   0000E7   F0           MOVX    @DPTR,A
   \   0000E8   A3           INC     DPTR
   \   0000E9   E9           MOV     A,R1
   \   0000EA   F0           MOVX    @DPTR,A
   2791          
   2792                msg += 2;
   \   0000EB   E5..         MOV     A,?V2
   \   0000ED   2402         ADD     A,#0x2
   \   0000EF   F5..         MOV     ?V2,A
   \   0000F1   5002         JNC     ??ZDO_ParseAddrRsp_4
   \   0000F3   05..         INC     ?V3
   2793                rsp->numAssocDevs = 0;
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000F5   EE           MOV     A,R6
   \   0000F6   240B         ADD     A,#0xb
   \   0000F8   F582         MOV     DPL,A
   \   0000FA   E4           CLR     A
   \   0000FB   3F           ADDC    A,R7
   \   0000FC   F583         MOV     DPH,A
   \   0000FE   7400         MOV     A,#0x0
   \   000100   F0           MOVX    @DPTR,A
   2794          
   2795                // StartIndex field is only present if NumAssocDev field is non-zero.
   2796                if ( cnt > 0 )
   \   000101   E5..         MOV     A,?V4
   \   000103   7003         JNZ     $+5
   \   000105   02....       LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
   2797                {
   2798                  uint16 *pList = &(rsp->devList[0]);
   \   000108   EE           MOV     A,R6
   \   000109   240D         ADD     A,#0xd
   \   00010B   F8           MOV     R0,A
   \   00010C   E4           CLR     A
   \   00010D   3F           ADDC    A,R7
   \   00010E   F9           MOV     R1,A
   2799                  byte n = cnt;
   \   00010F   85....       MOV     ?V5,?V4
   2800          
   2801                  rsp->numAssocDevs = *msg++;
   \   000112   85..82       MOV     DPL,?V2
   \   000115   85..83       MOV     DPH,?V3
   \   000118   E0           MOVX    A,@DPTR
   \   000119   C0E0         PUSH    A
   \   00011B   EE           MOV     A,R6
   \   00011C   240B         ADD     A,#0xb
   \   00011E   F582         MOV     DPL,A
   \   000120   E4           CLR     A
   \   000121   3F           ADDC    A,R7
   \   000122   F583         MOV     DPH,A
   \   000124   D0E0         POP     A
   \   000126   F0           MOVX    @DPTR,A
   \   000127   85..82       MOV     DPL,?V2
   \   00012A   85..83       MOV     DPH,?V3
   \   00012D   A3           INC     DPTR
   \   00012E   8582..       MOV     ?V2,DPL
   \   000131   8583..       MOV     ?V3,DPH
   2802                  rsp->startIndex = *msg++;
   \   000134   85..82       MOV     DPL,?V2
   \   000137   85..83       MOV     DPH,?V3
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   C0E0         PUSH    A
   \   00013D   EE           MOV     A,R6
   \   00013E   240C         ADD     A,#0xc
   \   000140   F582         MOV     DPL,A
   \   000142   E4           CLR     A
   \   000143   3F           ADDC    A,R7
   \   000144   F583         MOV     DPH,A
   \   000146   D0E0         POP     A
   \   000148   F0           MOVX    @DPTR,A
   \   000149   85..82       MOV     DPL,?V2
   \   00014C   85..83       MOV     DPH,?V3
   \   00014F   A3           INC     DPTR
   \   000150   8582..       MOV     ?V2,DPL
   \   000153   8583..       MOV     ?V3,DPH
   2803          
   2804                  while ( n != 0 )
   \                     ??ZDO_ParseAddrRsp_5:
   \   000156   E5..         MOV     A,?V5
   \   000158   603C         JZ      ??ZDO_ParseAddrRsp_2
   2805                  {
   2806                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \   00015A   85..82       MOV     DPL,?V2
   \   00015D   85..83       MOV     DPH,?V3
   \   000160   E0           MOVX    A,@DPTR
   \   000161   FC           MOV     R4,A
   \   000162   7D00         MOV     R5,#0x0
   \   000164   85..82       MOV     DPL,?V2
   \   000167   85..83       MOV     DPH,?V3
   \   00016A   A3           INC     DPTR
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   FA           MOV     R2,A
   \   00016D   7B00         MOV     R3,#0x0
   \   00016F   E4           CLR     A
   \   000170   CA           XCH     A,R2
   \   000171   FB           MOV     R3,A
   \   000172   EC           MOV     A,R4
   \   000173   2A           ADD     A,R2
   \   000174   FA           MOV     R2,A
   \   000175   ED           MOV     A,R5
   \   000176   3B           ADDC    A,R3
   \   000177   FB           MOV     R3,A
   \   000178   8882         MOV     DPL,R0
   \   00017A   8983         MOV     DPH,R1
   \   00017C   EA           MOV     A,R2
   \   00017D   F0           MOVX    @DPTR,A
   \   00017E   A3           INC     DPTR
   \   00017F   EB           MOV     A,R3
   \   000180   F0           MOVX    @DPTR,A
   \   000181   E8           MOV     A,R0
   \   000182   2402         ADD     A,#0x2
   \   000184   F8           MOV     R0,A
   \   000185   5001         JNC     ??ZDO_ParseAddrRsp_6
   \   000187   09           INC     R1
   2807                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_6:
   \   000188   E5..         MOV     A,?V2
   \   00018A   2402         ADD     A,#0x2
   \   00018C   F5..         MOV     ?V2,A
   \   00018E   5002         JNC     ??ZDO_ParseAddrRsp_7
   \   000190   05..         INC     ?V3
   2808                    n--;
   \                     ??ZDO_ParseAddrRsp_7:
   \   000192   15..         DEC     ?V5
   \   000194   80C0         SJMP    ??ZDO_ParseAddrRsp_5
   2809                  }
   2810                }
   2811              }
   2812            }
   2813          
   2814            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_2:
   \   000196   EE           MOV     A,R6
   \   000197   FA           MOV     R2,A
   \   000198   EF           MOV     A,R7
   \   000199   FB           MOV     R3,A
   \   00019A   7F08         MOV     R7,#0x8
   \   00019C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2815          }
   2816          
   2817          /*********************************************************************
   2818           * @fn          ZDO_ParseNodeDescRsp
   2819           *
   2820           * @brief       This function parses the Node_Desc_rsp message.
   2821           *
   2822           * @param       inMsg - incoming message
   2823           * @param       pNDRsp - place to parse the message into
   2824           *
   2825           * @return      none
   2826           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2827          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2828          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2829            uint8 *msg;
   2830          
   2831            msg = inMsg->asdu;
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FE           MOV     R6,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
   \   000013   EE           MOV     A,R6
   \   000014   F8           MOV     R0,A
   \   000015   EF           MOV     A,R7
   \   000016   F9           MOV     R1,A
   2832          
   2833            pNDRsp->status = *msg++;
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   8C82         MOV     DPL,R4
   \   000020   8D83         MOV     DPH,R5
   \   000022   D0E0         POP     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   A3           INC     DPTR
   \   00002A   A882         MOV     R0,DPL
   \   00002C   A983         MOV     R1,DPH
   2834            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V0,A
   \   000035   75..00       MOV     ?V1,#0x0
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FE           MOV     R6,A
   \   00003F   7F00         MOV     R7,#0x0
   \   000041   E4           CLR     A
   \   000042   CE           XCH     A,R6
   \   000043   FF           MOV     R7,A
   \   000044   E5..         MOV     A,?V0
   \   000046   2E           ADD     A,R6
   \   000047   FE           MOV     R6,A
   \   000048   E5..         MOV     A,?V1
   \   00004A   3F           ADDC    A,R7
   \   00004B   FF           MOV     R7,A
   \   00004C   8C82         MOV     DPL,R4
   \   00004E   8D83         MOV     DPH,R5
   \   000050   A3           INC     DPTR
   \   000051   EE           MOV     A,R6
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   EF           MOV     A,R7
   \   000055   F0           MOVX    @DPTR,A
   2835          
   2836            if ( pNDRsp->status == ZDP_SUCCESS )
   \   000056   8C82         MOV     DPL,R4
   \   000058   8D83         MOV     DPH,R5
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6003         JZ      $+5
   \   00005D   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2837            {
   2838              msg += 2;
   \   000060   E8           MOV     A,R0
   \   000061   2402         ADD     A,#0x2
   \   000063   F8           MOV     R0,A
   \   000064   5001         JNC     ??ZDO_ParseNodeDescRsp_1
   \   000066   09           INC     R1
   2839              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   000067   8882         MOV     DPL,R0
   \   000069   8983         MOV     DPH,R1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   5407         ANL     A,#0x7
   \   00006E   FE           MOV     R6,A
   \   00006F   8C82         MOV     DPL,R4
   \   000071   8D83         MOV     DPH,R5
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   54F8         ANL     A,#0xf8
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   7407         MOV     A,#0x7
   \   00007C   5E           ANL     A,R6
   \   00007D   FE           MOV     R6,A
   \   00007E   8C82         MOV     DPL,R4
   \   000080   8D83         MOV     DPH,R5
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   4E           ORL     A,R6
   \   000087   F0           MOVX    @DPTR,A
   2840          
   2841              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \   000088   8882         MOV     DPL,R0
   \   00008A   8983         MOV     DPH,R1
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   A2E3         MOV     C,0xE0 /* A   */.3
   \   00008F   E4           CLR     A
   \   000090   33           RLC     A
   \   000091   FE           MOV     R6,A
   \   000092   8C82         MOV     DPL,R4
   \   000094   8D83         MOV     DPH,R5
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   EE           MOV     A,R6
   \   00009A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   92E3         MOV     0xE0 /* A   */.3,C
   \   00009F   F0           MOVX    @DPTR,A
   2842              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \   0000A0   8882         MOV     DPL,R0
   \   0000A2   8983         MOV     DPH,R1
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   A2E4         MOV     C,0xE0 /* A   */.4
   \   0000A7   E4           CLR     A
   \   0000A8   33           RLC     A
   \   0000A9   FE           MOV     R6,A
   \   0000AA   8C82         MOV     DPL,R4
   \   0000AC   8D83         MOV     DPH,R5
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   EE           MOV     A,R6
   \   0000B2   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   92E4         MOV     0xE0 /* A   */.4,C
   \   0000B7   F0           MOVX    @DPTR,A
   2843          
   2844              msg++;  // Reserved bits.
   \   0000B8   8882         MOV     DPL,R0
   \   0000BA   8983         MOV     DPH,R1
   \   0000BC   A3           INC     DPTR
   \   0000BD   A882         MOV     R0,DPL
   \   0000BF   A983         MOV     R1,DPH
   2845              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   0000C1   8882         MOV     DPL,R0
   \   0000C3   8983         MOV     DPH,R1
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   13           RRC     A
   \   0000C7   13           RRC     A
   \   0000C8   13           RRC     A
   \   0000C9   541F         ANL     A,#0x1f
   \   0000CB   FE           MOV     R6,A
   \   0000CC   8C82         MOV     DPL,R4
   \   0000CE   8D83         MOV     DPH,R5
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   5407         ANL     A,#0x7
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   EE           MOV     A,R6
   \   0000D9   33           RLC     A
   \   0000DA   33           RLC     A
   \   0000DB   33           RLC     A
   \   0000DC   54F8         ANL     A,#0xf8
   \   0000DE   FE           MOV     R6,A
   \   0000DF   8C82         MOV     DPL,R4
   \   0000E1   8D83         MOV     DPH,R5
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   4E           ORL     A,R6
   \   0000E9   F0           MOVX    @DPTR,A
   2846              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \   0000EA   8882         MOV     DPL,R0
   \   0000EC   8983         MOV     DPH,R1
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   5407         ANL     A,#0x7
   \   0000F1   FE           MOV     R6,A
   \   0000F2   8882         MOV     DPL,R0
   \   0000F4   8983         MOV     DPH,R1
   \   0000F6   A3           INC     DPTR
   \   0000F7   A882         MOV     R0,DPL
   \   0000F9   A983         MOV     R1,DPH
   \   0000FB   8C82         MOV     DPL,R4
   \   0000FD   8D83         MOV     DPH,R5
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   54F8         ANL     A,#0xf8
   \   000106   F0           MOVX    @DPTR,A
   \   000107   7407         MOV     A,#0x7
   \   000109   5E           ANL     A,R6
   \   00010A   FE           MOV     R6,A
   \   00010B   8C82         MOV     DPL,R4
   \   00010D   8D83         MOV     DPH,R5
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   4E           ORL     A,R6
   \   000115   F0           MOVX    @DPTR,A
   2847              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \   000116   8882         MOV     DPL,R0
   \   000118   8983         MOV     DPH,R1
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   C0E0         PUSH    A
   \   00011D   8C82         MOV     DPL,R4
   \   00011F   8D83         MOV     DPH,R5
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   D0E0         POP     A
   \   000128   F0           MOVX    @DPTR,A
   \   000129   8882         MOV     DPL,R0
   \   00012B   8983         MOV     DPH,R1
   \   00012D   A3           INC     DPTR
   \   00012E   A882         MOV     R0,DPL
   \   000130   A983         MOV     R1,DPH
   2848              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \   000132   8882         MOV     DPL,R0
   \   000134   8983         MOV     DPH,R1
   \   000136   E0           MOVX    A,@DPTR
   \   000137   C0E0         PUSH    A
   \   000139   8C82         MOV     DPL,R4
   \   00013B   8D83         MOV     DPH,R5
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   D0E0         POP     A
   \   000145   F0           MOVX    @DPTR,A
   \   000146   8882         MOV     DPL,R0
   \   000148   8983         MOV     DPH,R1
   \   00014A   A3           INC     DPTR
   \   00014B   A882         MOV     R0,DPL
   \   00014D   A983         MOV     R1,DPH
   2849              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \   00014F   8882         MOV     DPL,R0
   \   000151   8983         MOV     DPH,R1
   \   000153   E0           MOVX    A,@DPTR
   \   000154   C0E0         PUSH    A
   \   000156   8C82         MOV     DPL,R4
   \   000158   8D83         MOV     DPH,R5
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   D0E0         POP     A
   \   000163   F0           MOVX    @DPTR,A
   \   000164   8882         MOV     DPL,R0
   \   000166   8983         MOV     DPH,R1
   \   000168   A3           INC     DPTR
   \   000169   A882         MOV     R0,DPL
   \   00016B   A983         MOV     R1,DPH
   2850              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \   00016D   8882         MOV     DPL,R0
   \   00016F   8983         MOV     DPH,R1
   \   000171   E0           MOVX    A,@DPTR
   \   000172   C0E0         PUSH    A
   \   000174   8C82         MOV     DPL,R4
   \   000176   8D83         MOV     DPH,R5
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   D0E0         POP     A
   \   000182   F0           MOVX    @DPTR,A
   \   000183   8882         MOV     DPL,R0
   \   000185   8983         MOV     DPH,R1
   \   000187   A3           INC     DPTR
   \   000188   A882         MOV     R0,DPL
   \   00018A   A983         MOV     R1,DPH
   2851              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \   00018C   8882         MOV     DPL,R0
   \   00018E   8983         MOV     DPH,R1
   \   000190   E0           MOVX    A,@DPTR
   \   000191   C0E0         PUSH    A
   \   000193   8C82         MOV     DPL,R4
   \   000195   8D83         MOV     DPH,R5
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   D0E0         POP     A
   \   0001A2   F0           MOVX    @DPTR,A
   \   0001A3   8882         MOV     DPL,R0
   \   0001A5   8983         MOV     DPH,R1
   \   0001A7   A3           INC     DPTR
   \   0001A8   A882         MOV     R0,DPL
   \   0001AA   A983         MOV     R1,DPH
   2852              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \   0001AC   8882         MOV     DPL,R0
   \   0001AE   8983         MOV     DPH,R1
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   C0E0         PUSH    A
   \   0001B3   8C82         MOV     DPL,R4
   \   0001B5   8D83         MOV     DPH,R5
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   A3           INC     DPTR
   \   0001BF   A3           INC     DPTR
   \   0001C0   A3           INC     DPTR
   \   0001C1   D0E0         POP     A
   \   0001C3   F0           MOVX    @DPTR,A
   \   0001C4   8882         MOV     DPL,R0
   \   0001C6   8983         MOV     DPH,R1
   \   0001C8   A3           INC     DPTR
   \   0001C9   A882         MOV     R0,DPL
   \   0001CB   A983         MOV     R1,DPH
   2853              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \   0001CD   8882         MOV     DPL,R0
   \   0001CF   8983         MOV     DPH,R1
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   F5..         MOV     ?V0,A
   \   0001D4   75..00       MOV     ?V1,#0x0
   \   0001D7   8882         MOV     DPL,R0
   \   0001D9   8983         MOV     DPH,R1
   \   0001DB   A3           INC     DPTR
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   FE           MOV     R6,A
   \   0001DE   7F00         MOV     R7,#0x0
   \   0001E0   E4           CLR     A
   \   0001E1   CE           XCH     A,R6
   \   0001E2   FF           MOV     R7,A
   \   0001E3   E5..         MOV     A,?V0
   \   0001E5   2E           ADD     A,R6
   \   0001E6   FE           MOV     R6,A
   \   0001E7   E5..         MOV     A,?V1
   \   0001E9   3F           ADDC    A,R7
   \   0001EA   FF           MOV     R7,A
   \   0001EB   EC           MOV     A,R4
   \   0001EC   240B         ADD     A,#0xb
   \   0001EE   F582         MOV     DPL,A
   \   0001F0   E4           CLR     A
   \   0001F1   3D           ADDC    A,R5
   \   0001F2   F583         MOV     DPH,A
   \   0001F4   EE           MOV     A,R6
   \   0001F5   F0           MOVX    @DPTR,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   EF           MOV     A,R7
   \   0001F8   F0           MOVX    @DPTR,A
   2854              msg += 2;
   \   0001F9   E8           MOV     A,R0
   \   0001FA   2402         ADD     A,#0x2
   \   0001FC   F8           MOV     R0,A
   \   0001FD   5001         JNC     ??ZDO_ParseNodeDescRsp_2
   \   0001FF   09           INC     R1
   2855              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??ZDO_ParseNodeDescRsp_2:
   \   000200   8882         MOV     DPL,R0
   \   000202   8983         MOV     DPH,R1
   \   000204   E0           MOVX    A,@DPTR
   \   000205   C0E0         PUSH    A
   \   000207   EC           MOV     A,R4
   \   000208   240D         ADD     A,#0xd
   \   00020A   F582         MOV     DPL,A
   \   00020C   E4           CLR     A
   \   00020D   3D           ADDC    A,R5
   \   00020E   F583         MOV     DPH,A
   \   000210   D0E0         POP     A
   \   000212   F0           MOVX    @DPTR,A
   \   000213   8882         MOV     DPL,R0
   \   000215   8983         MOV     DPH,R1
   \   000217   A3           INC     DPTR
   \   000218   A882         MOV     R0,DPL
   \   00021A   A983         MOV     R1,DPH
   2856              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   \   00021C   8882         MOV     DPL,R0
   \   00021E   8983         MOV     DPH,R1
   \   000220   E0           MOVX    A,@DPTR
   \   000221   C0E0         PUSH    A
   \   000223   EC           MOV     A,R4
   \   000224   240E         ADD     A,#0xe
   \   000226   F582         MOV     DPL,A
   \   000228   E4           CLR     A
   \   000229   3D           ADDC    A,R5
   \   00022A   F583         MOV     DPH,A
   \   00022C   D0E0         POP     A
   \   00022E   F0           MOVX    @DPTR,A
   \   00022F   8882         MOV     DPL,R0
   \   000231   8983         MOV     DPH,R1
   \   000233   A3           INC     DPTR
   \   000234   A882         MOV     R0,DPL
   \   000236   A983         MOV     R1,DPH
   2857              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   \   000238   8882         MOV     DPL,R0
   \   00023A   8983         MOV     DPH,R1
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   C0E0         PUSH    A
   \   00023F   EC           MOV     A,R4
   \   000240   240F         ADD     A,#0xf
   \   000242   F582         MOV     DPL,A
   \   000244   E4           CLR     A
   \   000245   3D           ADDC    A,R5
   \   000246   F583         MOV     DPH,A
   \   000248   D0E0         POP     A
   \   00024A   F0           MOVX    @DPTR,A
   2858            }
   2859          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   00024B   7F02         MOV     R7,#0x2
   \   00024D   02....       LJMP    ?BANKED_LEAVE_XDATA
   2860          
   2861          /*********************************************************************
   2862           * @fn          ZDO_ParsePowerDescRsp
   2863           *
   2864           * @brief       This function parses the Power_Desc_rsp message.
   2865           *
   2866           * @param       inMsg  - incoming message
   2867           * @param       pNPRsp - place to parse the message into
   2868           *
   2869           * @return      none
   2870           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2871          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2872          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2873            uint8 *msg;
   2874          
   2875            msg = inMsg->asdu;
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   E8           MOV     A,R0
   \   000018   FA           MOV     R2,A
   \   000019   E9           MOV     A,R1
   \   00001A   FB           MOV     R3,A
   2876            pNPRsp->status = *msg++;
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   C0E0         PUSH    A
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   D0E0         POP     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   A3           INC     DPTR
   \   00002E   AA82         MOV     R2,DPL
   \   000030   AB83         MOV     R3,DPH
   2877            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V0,A
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   7900         MOV     R1,#0x0
   \   000045   E4           CLR     A
   \   000046   C8           XCH     A,R0
   \   000047   F9           MOV     R1,A
   \   000048   E5..         MOV     A,?V0
   \   00004A   28           ADD     A,R0
   \   00004B   F8           MOV     R0,A
   \   00004C   E5..         MOV     A,?V1
   \   00004E   39           ADDC    A,R1
   \   00004F   F9           MOV     R1,A
   \   000050   8C82         MOV     DPL,R4
   \   000052   8D83         MOV     DPH,R5
   \   000054   A3           INC     DPTR
   \   000055   E8           MOV     A,R0
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   E9           MOV     A,R1
   \   000059   F0           MOVX    @DPTR,A
   2878          
   2879            if ( pNPRsp->status == ZDP_SUCCESS )
   \   00005A   8C82         MOV     DPL,R4
   \   00005C   8D83         MOV     DPH,R5
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6003         JZ      $+5
   \   000061   02....       LJMP    ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2880            {
   2881              msg += 2;
   \   000064   EA           MOV     A,R2
   \   000065   2402         ADD     A,#0x2
   \   000067   FA           MOV     R2,A
   \   000068   5001         JNC     ??ZDO_ParsePowerDescRsp_1
   \   00006A   0B           INC     R3
   2882              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \                     ??ZDO_ParsePowerDescRsp_1:
   \   00006B   8A82         MOV     DPL,R2
   \   00006D   8B83         MOV     DPH,R3
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   C4           SWAP    A
   \   000071   540F         ANL     A,#0xf
   \   000073   F5..         MOV     ?V0,A
   \   000075   75..00       MOV     ?V1,#0x0
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   540F         ANL     A,#0xf
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   54FF         ANL     A,#0xff
   \   000087   F0           MOVX    @DPTR,A
   \   000088   7404         MOV     A,#0x4
   \   00008A   78..         MOV     R0,#?V0
   \   00008C   12....       LCALL   ?S_SHL
   \   00008F   E5..         MOV     A,?V0
   \   000091   54F0         ANL     A,#0xf0
   \   000093   F8           MOV     R0,A
   \   000094   E5..         MOV     A,?V1
   \   000096   5400         ANL     A,#0x0
   \   000098   F9           MOV     R1,A
   \   000099   8C82         MOV     DPL,R4
   \   00009B   8D83         MOV     DPH,R5
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   48           ORL     A,R0
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   49           ORL     A,R1
   \   0000A6   F0           MOVX    @DPTR,A
   2883              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \   0000A7   8A82         MOV     DPL,R2
   \   0000A9   8B83         MOV     DPH,R3
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F8           MOV     R0,A
   \   0000AD   7900         MOV     R1,#0x0
   \   0000AF   E8           MOV     A,R0
   \   0000B0   540F         ANL     A,#0xf
   \   0000B2   F8           MOV     R0,A
   \   0000B3   E9           MOV     A,R1
   \   0000B4   5400         ANL     A,#0x0
   \   0000B6   F9           MOV     R1,A
   \   0000B7   8A82         MOV     DPL,R2
   \   0000B9   8B83         MOV     DPH,R3
   \   0000BB   A3           INC     DPTR
   \   0000BC   AA82         MOV     R2,DPL
   \   0000BE   AB83         MOV     R3,DPH
   \   0000C0   8C82         MOV     DPL,R4
   \   0000C2   8D83         MOV     DPH,R5
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   54F0         ANL     A,#0xf0
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   54FF         ANL     A,#0xff
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   E8           MOV     A,R0
   \   0000D1   540F         ANL     A,#0xf
   \   0000D3   F8           MOV     R0,A
   \   0000D4   E9           MOV     A,R1
   \   0000D5   5400         ANL     A,#0x0
   \   0000D7   F9           MOV     R1,A
   \   0000D8   8C82         MOV     DPL,R4
   \   0000DA   8D83         MOV     DPH,R5
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   48           ORL     A,R0
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   49           ORL     A,R1
   \   0000E5   F0           MOVX    @DPTR,A
   2884              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \   0000E6   8A82         MOV     DPL,R2
   \   0000E8   8B83         MOV     DPH,R3
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   C4           SWAP    A
   \   0000EC   540F         ANL     A,#0xf
   \   0000EE   F5..         MOV     ?V0,A
   \   0000F0   75..00       MOV     ?V1,#0x0
   \   0000F3   8C82         MOV     DPL,R4
   \   0000F5   8D83         MOV     DPH,R5
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   54FF         ANL     A,#0xff
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   540F         ANL     A,#0xf
   \   000102   F0           MOVX    @DPTR,A
   \   000103   740C         MOV     A,#0xc
   \   000105   78..         MOV     R0,#?V0
   \   000107   12....       LCALL   ?S_SHL
   \   00010A   8C82         MOV     DPL,R4
   \   00010C   8D83         MOV     DPH,R5
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   45..         ORL     A,?V0
   \   000114   F0           MOVX    @DPTR,A
   \   000115   A3           INC     DPTR
   \   000116   E0           MOVX    A,@DPTR
   \   000117   45..         ORL     A,?V1
   \   000119   F0           MOVX    @DPTR,A
   2885              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   \   00011A   8A82         MOV     DPL,R2
   \   00011C   8B83         MOV     DPH,R3
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   F8           MOV     R0,A
   \   000120   7900         MOV     R1,#0x0
   \   000122   E8           MOV     A,R0
   \   000123   540F         ANL     A,#0xf
   \   000125   F8           MOV     R0,A
   \   000126   E9           MOV     A,R1
   \   000127   5400         ANL     A,#0x0
   \   000129   F9           MOV     R1,A
   \   00012A   8A82         MOV     DPL,R2
   \   00012C   8B83         MOV     DPH,R3
   \   00012E   A3           INC     DPTR
   \   00012F   AA82         MOV     R2,DPL
   \   000131   AB83         MOV     R3,DPH
   \   000133   8C82         MOV     DPL,R4
   \   000135   8D83         MOV     DPH,R5
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   54FF         ANL     A,#0xff
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   54F0         ANL     A,#0xf0
   \   000142   F0           MOVX    @DPTR,A
   \   000143   E4           CLR     A
   \   000144   C8           XCH     A,R0
   \   000145   F9           MOV     R1,A
   \   000146   E8           MOV     A,R0
   \   000147   5400         ANL     A,#0x0
   \   000149   F8           MOV     R0,A
   \   00014A   E9           MOV     A,R1
   \   00014B   540F         ANL     A,#0xf
   \   00014D   F9           MOV     R1,A
   \   00014E   8C82         MOV     DPL,R4
   \   000150   8D83         MOV     DPH,R5
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   48           ORL     A,R0
   \   000157   F0           MOVX    @DPTR,A
   \   000158   A3           INC     DPTR
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   49           ORL     A,R1
   \   00015B   F0           MOVX    @DPTR,A
   2886            }
   2887          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   00015C   7F02         MOV     R7,#0x2
   \   00015E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2888          
   2889          /*********************************************************************
   2890           * @fn          ZDO_ParseSimpleDescRsp
   2891           *
   2892           * @brief       This function parse the Simple_Desc_rsp message.
   2893           *
   2894           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2895           *         in the SimpleDescriptionFormat_t structure are allocated
   2896           *         and the calling function needs to free [osal_msg_free()]
   2897           *         these buffers.
   2898           *
   2899           * @param       inMsg  - incoming message
   2900           * @param       pSimpleDescRsp - place to parse the message into
   2901           *
   2902           * @return      none
   2903           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2904          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2905          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   2906            uint8 *msg;
   2907          
   2908            msg = inMsg->asdu;
   \   00000D   E5..         MOV     A,?V0
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V1
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FE           MOV     R6,A
   \   00001F   E9           MOV     A,R1
   \   000020   FF           MOV     R7,A
   2909            pSimpleDescRsp->status = *msg++;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C0E0         PUSH    A
   \   000028   85..82       MOV     DPL,?V2
   \   00002B   85..83       MOV     DPH,?V3
   \   00002E   D0E0         POP     A
   \   000030   F0           MOVX    @DPTR,A
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   AE82         MOV     R6,DPL
   \   000038   AF83         MOV     R7,DPH
   2910            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FA           MOV     R2,A
   \   000040   7B00         MOV     R3,#0x0
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   7900         MOV     R1,#0x0
   \   00004B   E4           CLR     A
   \   00004C   C8           XCH     A,R0
   \   00004D   F9           MOV     R1,A
   \   00004E   EA           MOV     A,R2
   \   00004F   28           ADD     A,R0
   \   000050   F8           MOV     R0,A
   \   000051   EB           MOV     A,R3
   \   000052   39           ADDC    A,R1
   \   000053   F9           MOV     R1,A
   \   000054   85..82       MOV     DPL,?V2
   \   000057   85..83       MOV     DPH,?V3
   \   00005A   A3           INC     DPTR
   \   00005B   E8           MOV     A,R0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
   2911            msg += sizeof ( uint16 );
   \   000060   EE           MOV     A,R6
   \   000061   2402         ADD     A,#0x2
   \   000063   FE           MOV     R6,A
   \   000064   5001         JNC     ??ZDO_ParseSimpleDescRsp_0
   \   000066   0F           INC     R7
   2912            msg++; // Skip past the length field.
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   A3           INC     DPTR
   \   00006C   AE82         MOV     R6,DPL
   \   00006E   AF83         MOV     R7,DPH
   2913          
   2914            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \   000070   85..82       MOV     DPL,?V2
   \   000073   85..83       MOV     DPH,?V3
   \   000076   E0           MOVX    A,@DPTR
   \   000077   7011         JNZ     ??ZDO_ParseSimpleDescRsp_1
   2915            {
   2916              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   000079                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   000079   E5..         MOV     A,?V2
   \   00007B   2403         ADD     A,#0x3
   \   00007D   FC           MOV     R4,A
   \   00007E   E4           CLR     A
   \   00007F   35..         ADDC    A,?V3
   \   000081   FD           MOV     R5,A
   \   000082   EE           MOV     A,R6
   \   000083   FA           MOV     R2,A
   \   000084   EF           MOV     A,R7
   \   000085   FB           MOV     R3,A
   \   000086   12....       LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   \   000089   E9           MOV     A,R1
   2917            }
   2918          }
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   00008A   7F04         MOV     R7,#0x4
   \   00008C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2919          
   2920          /*********************************************************************
   2921           * @fn          ZDO_ParseEPListRsp
   2922           *
   2923           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2924           *
   2925           * @param       inMsg  - incoming message
   2926           *
   2927           * @return      none
   2928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2929          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2930          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   2931            ZDO_ActiveEndpointRsp_t *pRsp;
   2932            uint8 *msg;
   2933            uint8 Status;
   2934            uint8 cnt;
   2935          
   2936            msg = inMsg->asdu;
   \   000009   E5..         MOV     A,?V2
   \   00000B   2413         ADD     A,#0x13
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   35..         ADDC    A,?V3
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   FE           MOV     R6,A
   \   00001B   E9           MOV     A,R1
   \   00001C   FF           MOV     R7,A
   2937            Status = *msg++;
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V7,A
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   AE82         MOV     R6,DPL
   \   00002B   AF83         MOV     R7,DPH
   2938            cnt = msg[2];
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V8,A
   2939          
   2940            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000036                ; Setup parameters for call to function osal_mem_alloc
   \   000036   A8..         MOV     R0,?V8
   \   000038   7900         MOV     R1,#0x0
   \   00003A   E8           MOV     A,R0
   \   00003B   2404         ADD     A,#0x4
   \   00003D   FA           MOV     R2,A
   \   00003E   E4           CLR     A
   \   00003F   39           ADDC    A,R1
   \   000040   FB           MOV     R3,A
   \   000041   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000044   8A..         MOV     ?V4,R2
   \   000046   8B..         MOV     ?V5,R3
   \   000048   85....       MOV     ?V0,?V4
   \   00004B   85....       MOV     ?V1,?V5
   2941            if ( pRsp )
   \   00004E   E5..         MOV     A,?V0
   \   000050   45..         ORL     A,?V1
   \   000052   6074         JZ      ??ZDO_ParseEPListRsp_0
   2942            {
   2943              pRsp->status = Status;
   \   000054   E5..         MOV     A,?V7
   \   000056   C0E0         PUSH    A
   \   000058   85..82       MOV     DPL,?V0
   \   00005B   85..83       MOV     DPH,?V1
   \   00005E   D0E0         POP     A
   \   000060   F0           MOVX    @DPTR,A
   2944              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FA           MOV     R2,A
   \   000067   7B00         MOV     R3,#0x0
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   7900         MOV     R1,#0x0
   \   000072   E4           CLR     A
   \   000073   C8           XCH     A,R0
   \   000074   F9           MOV     R1,A
   \   000075   EA           MOV     A,R2
   \   000076   28           ADD     A,R0
   \   000077   F8           MOV     R0,A
   \   000078   EB           MOV     A,R3
   \   000079   39           ADDC    A,R1
   \   00007A   F9           MOV     R1,A
   \   00007B   85..82       MOV     DPL,?V0
   \   00007E   85..83       MOV     DPH,?V1
   \   000081   A3           INC     DPTR
   \   000082   E8           MOV     A,R0
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   E9           MOV     A,R1
   \   000086   F0           MOVX    @DPTR,A
   2945              msg += sizeof( uint16 );
   \   000087   EE           MOV     A,R6
   \   000088   2402         ADD     A,#0x2
   \   00008A   FE           MOV     R6,A
   \   00008B   5001         JNC     ??ZDO_ParseEPListRsp_1
   \   00008D   0F           INC     R7
   2946              pRsp->cnt = cnt;
   \                     ??ZDO_ParseEPListRsp_1:
   \   00008E   E5..         MOV     A,?V8
   \   000090   C0E0         PUSH    A
   \   000092   85..82       MOV     DPL,?V0
   \   000095   85..83       MOV     DPH,?V1
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   D0E0         POP     A
   \   00009D   F0           MOVX    @DPTR,A
   2947              msg++; // pass cnt
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   A3           INC     DPTR
   \   0000A3   AE82         MOV     R6,DPL
   \   0000A5   AF83         MOV     R7,DPH
   2948              osal_memcpy( pRsp->epList, msg, cnt );
   \   0000A7                ; Setup parameters for call to function osal_memcpy
   \   0000A7   8E..         MOV     ?V4,R6
   \   0000A9   8F..         MOV     ?V5,R7
   \   0000AB   75..00       MOV     ?V6,#0x0
   \   0000AE   78..         MOV     R0,#?V4
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B3   AC..         MOV     R4,?V8
   \   0000B5   7D00         MOV     R5,#0x0
   \   0000B7   E5..         MOV     A,?V0
   \   0000B9   2404         ADD     A,#0x4
   \   0000BB   FA           MOV     R2,A
   \   0000BC   E4           CLR     A
   \   0000BD   35..         ADDC    A,?V1
   \   0000BF   FB           MOV     R3,A
   \   0000C0   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C3   7403         MOV     A,#0x3
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
   2949            }
   2950          
   2951            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   0000C8   AA..         MOV     R2,?V0
   \   0000CA   AB..         MOV     R3,?V1
   \   0000CC   7F09         MOV     R7,#0x9
   \   0000CE   02....       LJMP    ?BANKED_LEAVE_XDATA
   2952          }
   2953          
   2954          /*********************************************************************
   2955           * @fn          ZDO_ParseServerDiscRsp
   2956           *
   2957           * @brief       Parse the Server_Discovery_rsp message.
   2958           *
   2959           * @param       inMsg - incoming message.
   2960           * @param       pRsp - place to put the parsed information.
   2961           *
   2962           * @return      none
   2963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2964          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2965          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2966            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F583         MOV     DPH,A
   \   000014   8882         MOV     DPL,R0
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C0E0         PUSH    A
   \   000019   8C82         MOV     DPL,R4
   \   00001B   8D83         MOV     DPH,R5
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   2967            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \   000020   EA           MOV     A,R2
   \   000021   2413         ADD     A,#0x13
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   3B           ADDC    A,R3
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F583         MOV     DPH,A
   \   00002F   8882         MOV     DPL,R0
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FE           MOV     R6,A
   \   000034   7F00         MOV     R7,#0x0
   \   000036   EA           MOV     A,R2
   \   000037   2413         ADD     A,#0x13
   \   000039   F582         MOV     DPL,A
   \   00003B   E4           CLR     A
   \   00003C   3B           ADDC    A,R3
   \   00003D   F583         MOV     DPH,A
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F8           MOV     R0,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F583         MOV     DPH,A
   \   000045   8882         MOV     DPL,R0
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   E4           CLR     A
   \   00004E   C8           XCH     A,R0
   \   00004F   F9           MOV     R1,A
   \   000050   EE           MOV     A,R6
   \   000051   28           ADD     A,R0
   \   000052   F8           MOV     R0,A
   \   000053   EF           MOV     A,R7
   \   000054   39           ADDC    A,R1
   \   000055   F9           MOV     R1,A
   \   000056   8C82         MOV     DPL,R4
   \   000058   8D83         MOV     DPH,R5
   \   00005A   A3           INC     DPTR
   \   00005B   E8           MOV     A,R0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
   2968          }
   \   000060   7F01         MOV     R7,#0x1
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
   2969          
   2970          /*********************************************************************
   2971           * @fn          ZDO_ParseMgmtLqiRsp
   2972           *
   2973           * @brief       This function parses the incoming Management
   2974           *              LQI response
   2975           *
   2976           * @param       inMsg - incoming message
   2977           *
   2978           * @return      a pointer to parsed response structure (NULL if not allocated).
   2979           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2980           *          by the calling function [osal_mem_free()].
   2981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2982          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2983          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V10,R2
   \   000007   8B..         MOV     ?V11,R3
   2984            ZDO_MgmtLqiRsp_t *pRsp;
   2985            uint8 status;
   2986            uint8 startIndex = 0;
   \   000009   75..00       MOV     ?V6,#0x0
   2987            uint8 neighborLqiCount = 0;
   \   00000C   75..00       MOV     ?V4,#0x0
   2988            uint8 neighborLqiEntries = 0;
   \   00000F   75..00       MOV     ?V5,#0x0
   2989            uint8 *msg;
   2990          
   2991            msg = inMsg->asdu;
   \   000012   E5..         MOV     A,?V10
   \   000014   2413         ADD     A,#0x13
   \   000016   F582         MOV     DPL,A
   \   000018   E4           CLR     A
   \   000019   35..         ADDC    A,?V11
   \   00001B   F583         MOV     DPH,A
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   E8           MOV     A,R0
   \   000023   FE           MOV     R6,A
   \   000024   E9           MOV     A,R1
   \   000025   FF           MOV     R7,A
   2992          
   2993            status = *msg++;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V9,A
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   AE82         MOV     R6,DPL
   \   000034   AF83         MOV     R7,DPH
   2994            if ( status == ZSuccess )
   \   000036   E5..         MOV     A,?V9
   \   000038   7030         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   2995            {
   2996              neighborLqiEntries = *msg++;
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V5,A
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   AE82         MOV     R6,DPL
   \   000048   AF83         MOV     R7,DPH
   2997              startIndex = *msg++;
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V6,A
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   A3           INC     DPTR
   \   000056   AE82         MOV     R6,DPL
   \   000058   AF83         MOV     R7,DPH
   2998              neighborLqiCount = *msg++;
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F5..         MOV     ?V4,A
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   A3           INC     DPTR
   \   000066   AE82         MOV     R6,DPL
   \   000068   AF83         MOV     R7,DPH
   2999            }
   3000          
   3001            // Allocate a buffer big enough to handle the list.
   3002            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   3003                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( ZDP_MgmtLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00006A                ; Setup parameters for call to function osal_mem_alloc
   \   00006A   A8..         MOV     R0,?V4
   \   00006C   7900         MOV     R1,#0x0
   \   00006E   E8           MOV     A,R0
   \   00006F   75F01A       MOV     B,#0x1a
   \   000072   A4           MUL     AB
   \   000073   C8           XCH     A,R0
   \   000074   AAF0         MOV     R2,B
   \   000076   75F000       MOV     B,#0x0
   \   000079   A4           MUL     AB
   \   00007A   2A           ADD     A,R2
   \   00007B   FA           MOV     R2,A
   \   00007C   75F01A       MOV     B,#0x1a
   \   00007F   E9           MOV     A,R1
   \   000080   A4           MUL     AB
   \   000081   2A           ADD     A,R2
   \   000082   F9           MOV     R1,A
   \   000083   E8           MOV     A,R0
   \   000084   2404         ADD     A,#0x4
   \   000086   FA           MOV     R2,A
   \   000087   E4           CLR     A
   \   000088   39           ADDC    A,R1
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00008D   8A..         MOV     ?V0,R2
   \   00008F   8B..         MOV     ?V1,R3
   \   000091   85....       MOV     ?V2,?V0
   \   000094   85....       MOV     ?V3,?V1
   3004            if ( pRsp )
   \   000097   E5..         MOV     A,?V2
   \   000099   45..         ORL     A,?V3
   \   00009B   7003         JNZ     $+5
   \   00009D   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   3005            {
   3006              uint8 x;
   3007              ZDP_MgmtLqiItem_t *pList = pRsp->list;
   \   0000A0   E5..         MOV     A,?V2
   \   0000A2   2404         ADD     A,#0x4
   \   0000A4   F5..         MOV     ?V0,A
   \   0000A6   E4           CLR     A
   \   0000A7   35..         ADDC    A,?V3
   \   0000A9   F5..         MOV     ?V1,A
   3008              pRsp->status = status;
   \   0000AB   E5..         MOV     A,?V9
   \   0000AD   C0E0         PUSH    A
   \   0000AF   85..82       MOV     DPL,?V2
   \   0000B2   85..83       MOV     DPH,?V3
   \   0000B5   D0E0         POP     A
   \   0000B7   F0           MOVX    @DPTR,A
   3009              pRsp->neighborLqiEntries = neighborLqiEntries;
   \   0000B8   E5..         MOV     A,?V5
   \   0000BA   C0E0         PUSH    A
   \   0000BC   85..82       MOV     DPL,?V2
   \   0000BF   85..83       MOV     DPH,?V3
   \   0000C2   A3           INC     DPTR
   \   0000C3   D0E0         POP     A
   \   0000C5   F0           MOVX    @DPTR,A
   3010              pRsp->startIndex = startIndex;
   \   0000C6   E5..         MOV     A,?V6
   \   0000C8   C0E0         PUSH    A
   \   0000CA   85..82       MOV     DPL,?V2
   \   0000CD   85..83       MOV     DPH,?V3
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   D0E0         POP     A
   \   0000D4   F0           MOVX    @DPTR,A
   3011              pRsp->neighborLqiCount = neighborLqiCount;
   \   0000D5   E5..         MOV     A,?V4
   \   0000D7   C0E0         PUSH    A
   \   0000D9   85..82       MOV     DPL,?V2
   \   0000DC   85..83       MOV     DPH,?V3
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   D0E0         POP     A
   \   0000E4   F0           MOVX    @DPTR,A
   3012          
   3013              for ( x = 0; x < neighborLqiCount; x++ )
   \   0000E5   75..00       MOV     ?V8,#0x0
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   0000E8   E5..         MOV     A,?V8
   \   0000EA   C3           CLR     C
   \   0000EB   95..         SUBB    A,?V4
   \   0000ED   4003         JC      $+5
   \   0000EF   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   3014              {
   3015                uint8 tmp;
   3016          
   3017                pList->panID = 0; // This isn't in the record, why is it in the structure?
   \   0000F2   85..82       MOV     DPL,?V0
   \   0000F5   85..83       MOV     DPH,?V1
   \   0000F8   7400         MOV     A,#0x0
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   7400         MOV     A,#0x0
   \   0000FE   F0           MOVX    @DPTR,A
   3018                osal_cpyExtAddr(pList->extPanID, msg);   //Copy extended PAN ID
   \   0000FF                ; Setup parameters for call to function sAddrExtCpy
   \   0000FF   EE           MOV     A,R6
   \   000100   FC           MOV     R4,A
   \   000101   EF           MOV     A,R7
   \   000102   FD           MOV     R5,A
   \   000103   E5..         MOV     A,?V0
   \   000105   2402         ADD     A,#0x2
   \   000107   FA           MOV     R2,A
   \   000108   E4           CLR     A
   \   000109   35..         ADDC    A,?V1
   \   00010B   FB           MOV     R3,A
   \   00010C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3019                msg += Z_EXTADDR_LEN;
   \   00010F   EE           MOV     A,R6
   \   000110   2408         ADD     A,#0x8
   \   000112   FE           MOV     R6,A
   \   000113   5001         JNC     ??ZDO_ParseMgmtLqiRsp_3
   \   000115   0F           INC     R7
   3020          
   3021                osal_cpyExtAddr(pList->extAddr, msg);   //Copy extended address
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   000116                ; Setup parameters for call to function sAddrExtCpy
   \   000116   EE           MOV     A,R6
   \   000117   FC           MOV     R4,A
   \   000118   EF           MOV     A,R7
   \   000119   FD           MOV     R5,A
   \   00011A   E5..         MOV     A,?V0
   \   00011C   240A         ADD     A,#0xa
   \   00011E   FA           MOV     R2,A
   \   00011F   E4           CLR     A
   \   000120   35..         ADDC    A,?V1
   \   000122   FB           MOV     R3,A
   \   000123   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3022                msg += Z_EXTADDR_LEN;
   \   000126   EE           MOV     A,R6
   \   000127   2408         ADD     A,#0x8
   \   000129   FE           MOV     R6,A
   \   00012A   5001         JNC     ??ZDO_ParseMgmtLqiRsp_4
   \   00012C   0F           INC     R7
   3023          
   3024                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   00012D   8E82         MOV     DPL,R6
   \   00012F   8F83         MOV     DPH,R7
   \   000131   E0           MOVX    A,@DPTR
   \   000132   FA           MOV     R2,A
   \   000133   7B00         MOV     R3,#0x0
   \   000135   8E82         MOV     DPL,R6
   \   000137   8F83         MOV     DPH,R7
   \   000139   A3           INC     DPTR
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F8           MOV     R0,A
   \   00013C   7900         MOV     R1,#0x0
   \   00013E   E4           CLR     A
   \   00013F   C8           XCH     A,R0
   \   000140   F9           MOV     R1,A
   \   000141   EA           MOV     A,R2
   \   000142   28           ADD     A,R0
   \   000143   F8           MOV     R0,A
   \   000144   EB           MOV     A,R3
   \   000145   39           ADDC    A,R1
   \   000146   F9           MOV     R1,A
   \   000147   E5..         MOV     A,?V0
   \   000149   2412         ADD     A,#0x12
   \   00014B   F582         MOV     DPL,A
   \   00014D   E4           CLR     A
   \   00014E   35..         ADDC    A,?V1
   \   000150   F583         MOV     DPH,A
   \   000152   E8           MOV     A,R0
   \   000153   F0           MOVX    @DPTR,A
   \   000154   A3           INC     DPTR
   \   000155   E9           MOV     A,R1
   \   000156   F0           MOVX    @DPTR,A
   3025                msg += 2;
   \   000157   EE           MOV     A,R6
   \   000158   2402         ADD     A,#0x2
   \   00015A   FE           MOV     R6,A
   \   00015B   5001         JNC     ??ZDO_ParseMgmtLqiRsp_5
   \   00015D   0F           INC     R7
   3026          
   3027                tmp = *msg++;
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   00015E   8E82         MOV     DPL,R6
   \   000160   8F83         MOV     DPH,R7
   \   000162   E0           MOVX    A,@DPTR
   \   000163   F5..         MOV     ?V7,A
   \   000165   8E82         MOV     DPL,R6
   \   000167   8F83         MOV     DPH,R7
   \   000169   A3           INC     DPTR
   \   00016A   AE82         MOV     R6,DPL
   \   00016C   AF83         MOV     R7,DPH
   3028                pList->devType = tmp & 0x03;
   \   00016E   7403         MOV     A,#0x3
   \   000170   55..         ANL     A,?V7
   \   000172   C0E0         PUSH    A
   \   000174   E5..         MOV     A,?V0
   \   000176   2414         ADD     A,#0x14
   \   000178   F582         MOV     DPL,A
   \   00017A   E4           CLR     A
   \   00017B   35..         ADDC    A,?V1
   \   00017D   F583         MOV     DPH,A
   \   00017F   D0E0         POP     A
   \   000181   F0           MOVX    @DPTR,A
   3029                pList->rxOnIdle = (tmp >> 2) & 0x03;
   \   000182   E5..         MOV     A,?V7
   \   000184   13           RRC     A
   \   000185   13           RRC     A
   \   000186   543F         ANL     A,#0x3f
   \   000188   5403         ANL     A,#0x3
   \   00018A   C0E0         PUSH    A
   \   00018C   E5..         MOV     A,?V0
   \   00018E   2415         ADD     A,#0x15
   \   000190   F582         MOV     DPL,A
   \   000192   E4           CLR     A
   \   000193   35..         ADDC    A,?V1
   \   000195   F583         MOV     DPH,A
   \   000197   D0E0         POP     A
   \   000199   F0           MOVX    @DPTR,A
   3030                pList->relation = (tmp >> 4) & 0x07;
   \   00019A   E5..         MOV     A,?V7
   \   00019C   C4           SWAP    A
   \   00019D   540F         ANL     A,#0xf
   \   00019F   5407         ANL     A,#0x7
   \   0001A1   C0E0         PUSH    A
   \   0001A3   E5..         MOV     A,?V0
   \   0001A5   2416         ADD     A,#0x16
   \   0001A7   F582         MOV     DPL,A
   \   0001A9   E4           CLR     A
   \   0001AA   35..         ADDC    A,?V1
   \   0001AC   F583         MOV     DPH,A
   \   0001AE   D0E0         POP     A
   \   0001B0   F0           MOVX    @DPTR,A
   3031          
   3032                pList->permit = (*msg++) & 0x03;
   \   0001B1   8E82         MOV     DPL,R6
   \   0001B3   8F83         MOV     DPH,R7
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   5403         ANL     A,#0x3
   \   0001B8   C0E0         PUSH    A
   \   0001BA   E5..         MOV     A,?V0
   \   0001BC   2417         ADD     A,#0x17
   \   0001BE   F582         MOV     DPL,A
   \   0001C0   E4           CLR     A
   \   0001C1   35..         ADDC    A,?V1
   \   0001C3   F583         MOV     DPH,A
   \   0001C5   D0E0         POP     A
   \   0001C7   F0           MOVX    @DPTR,A
   \   0001C8   8E82         MOV     DPL,R6
   \   0001CA   8F83         MOV     DPH,R7
   \   0001CC   A3           INC     DPTR
   \   0001CD   AE82         MOV     R6,DPL
   \   0001CF   AF83         MOV     R7,DPH
   3033          
   3034                pList->depth = *msg++;
   \   0001D1   8E82         MOV     DPL,R6
   \   0001D3   8F83         MOV     DPH,R7
   \   0001D5   E0           MOVX    A,@DPTR
   \   0001D6   C0E0         PUSH    A
   \   0001D8   E5..         MOV     A,?V0
   \   0001DA   2418         ADD     A,#0x18
   \   0001DC   F582         MOV     DPL,A
   \   0001DE   E4           CLR     A
   \   0001DF   35..         ADDC    A,?V1
   \   0001E1   F583         MOV     DPH,A
   \   0001E3   D0E0         POP     A
   \   0001E5   F0           MOVX    @DPTR,A
   \   0001E6   8E82         MOV     DPL,R6
   \   0001E8   8F83         MOV     DPH,R7
   \   0001EA   A3           INC     DPTR
   \   0001EB   AE82         MOV     R6,DPL
   \   0001ED   AF83         MOV     R7,DPH
   3035          
   3036                pList->lqi = *msg++;
   \   0001EF   8E82         MOV     DPL,R6
   \   0001F1   8F83         MOV     DPH,R7
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   C0E0         PUSH    A
   \   0001F6   E5..         MOV     A,?V0
   \   0001F8   2419         ADD     A,#0x19
   \   0001FA   F582         MOV     DPL,A
   \   0001FC   E4           CLR     A
   \   0001FD   35..         ADDC    A,?V1
   \   0001FF   F583         MOV     DPH,A
   \   000201   D0E0         POP     A
   \   000203   F0           MOVX    @DPTR,A
   \   000204   8E82         MOV     DPL,R6
   \   000206   8F83         MOV     DPH,R7
   \   000208   A3           INC     DPTR
   \   000209   AE82         MOV     R6,DPL
   \   00020B   AF83         MOV     R7,DPH
   3037                pList++;
   \   00020D   E5..         MOV     A,?V0
   \   00020F   241A         ADD     A,#0x1a
   \   000211   F5..         MOV     ?V0,A
   \   000213   5002         JNC     ??ZDO_ParseMgmtLqiRsp_6
   \   000215   05..         INC     ?V1
   3038              }
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   000217   05..         INC     ?V8
   \   000219   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
   3039            }
   3040          
   3041            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   00021C   AA..         MOV     R2,?V2
   \   00021E   AB..         MOV     R3,?V3
   \   000220   7F0C         MOV     R7,#0xc
   \   000222   02....       LJMP    ?BANKED_LEAVE_XDATA
   3042          }
   3043          
   3044          /*********************************************************************
   3045           * @fn          ZDO_ParseMgmNwkDiscRsp
   3046           *
   3047           * @brief       This function parses the incoming Management
   3048           *              Network Discover response.
   3049           *
   3050           * @param       inMsg - incoming message
   3051           *
   3052           * @return      pointer to parsed response.  This structure was
   3053           *          allocated using osal_mem_alloc, so it must be freed
   3054           *          by the calling function [osal_mem_free()].
   3055           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3056          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   3057          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V10,R2
   \   000007   8B..         MOV     ?V11,R3
   3058            ZDO_MgmNwkDiscRsp_t *pRsp;
   3059            uint8 status;
   3060            uint8 networkCount = 0;
   \   000009   75..00       MOV     ?V6,#0x0
   3061            uint8 startIndex = 0;
   \   00000C   75..00       MOV     ?V5,#0x0
   3062            uint8 networkListCount = 0;
   \   00000F   75..00       MOV     ?V4,#0x0
   3063            uint8 *msg;
   3064          
   3065            msg = inMsg->asdu;
   \   000012   E5..         MOV     A,?V10
   \   000014   2413         ADD     A,#0x13
   \   000016   F582         MOV     DPL,A
   \   000018   E4           CLR     A
   \   000019   35..         ADDC    A,?V11
   \   00001B   F583         MOV     DPH,A
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   E8           MOV     A,R0
   \   000023   FE           MOV     R6,A
   \   000024   E9           MOV     A,R1
   \   000025   FF           MOV     R7,A
   3066            status = *msg++;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V8,A
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   AE82         MOV     R6,DPL
   \   000034   AF83         MOV     R7,DPH
   3067          
   3068            if ( status == ZSuccess )
   \   000036   E5..         MOV     A,?V8
   \   000038   7030         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   3069            {
   3070              networkCount = *msg++;
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V6,A
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   AE82         MOV     R6,DPL
   \   000048   AF83         MOV     R7,DPH
   3071              startIndex = *msg++;
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V5,A
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   A3           INC     DPTR
   \   000056   AE82         MOV     R6,DPL
   \   000058   AF83         MOV     R7,DPH
   3072              networkListCount = *msg++;
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F5..         MOV     ?V4,A
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   A3           INC     DPTR
   \   000066   AE82         MOV     R6,DPL
   \   000068   AF83         MOV     R7,DPH
   3073            }
   3074          
   3075            // Allocate a buffer big enough to handle the list.
   3076            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   3077                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   00006A                ; Setup parameters for call to function osal_mem_alloc
   \   00006A   A8..         MOV     R0,?V4
   \   00006C   7900         MOV     R1,#0x0
   \   00006E   E8           MOV     A,R0
   \   00006F   75F010       MOV     B,#0x10
   \   000072   A4           MUL     AB
   \   000073   C8           XCH     A,R0
   \   000074   AAF0         MOV     R2,B
   \   000076   75F000       MOV     B,#0x0
   \   000079   A4           MUL     AB
   \   00007A   2A           ADD     A,R2
   \   00007B   FA           MOV     R2,A
   \   00007C   75F010       MOV     B,#0x10
   \   00007F   E9           MOV     A,R1
   \   000080   A4           MUL     AB
   \   000081   2A           ADD     A,R2
   \   000082   F9           MOV     R1,A
   \   000083   E8           MOV     A,R0
   \   000084   2404         ADD     A,#0x4
   \   000086   FA           MOV     R2,A
   \   000087   E4           CLR     A
   \   000088   39           ADDC    A,R1
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00008D   8A..         MOV     ?V0,R2
   \   00008F   8B..         MOV     ?V1,R3
   \   000091   85....       MOV     ?V2,?V0
   \   000094   85....       MOV     ?V3,?V1
   3078            if ( pRsp )
   \   000097   E5..         MOV     A,?V2
   \   000099   45..         ORL     A,?V3
   \   00009B   7003         JNZ     $+5
   \   00009D   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   3079            {
   3080              uint8 x;
   3081              mgmtNwkDiscItem_t *pList;
   3082          
   3083              pRsp->status = status;
   \   0000A0   E5..         MOV     A,?V8
   \   0000A2   C0E0         PUSH    A
   \   0000A4   85..82       MOV     DPL,?V2
   \   0000A7   85..83       MOV     DPH,?V3
   \   0000AA   D0E0         POP     A
   \   0000AC   F0           MOVX    @DPTR,A
   3084              pRsp->networkCount = networkCount;
   \   0000AD   E5..         MOV     A,?V6
   \   0000AF   C0E0         PUSH    A
   \   0000B1   85..82       MOV     DPL,?V2
   \   0000B4   85..83       MOV     DPH,?V3
   \   0000B7   A3           INC     DPTR
   \   0000B8   D0E0         POP     A
   \   0000BA   F0           MOVX    @DPTR,A
   3085              pRsp->startIndex = startIndex;
   \   0000BB   E5..         MOV     A,?V5
   \   0000BD   C0E0         PUSH    A
   \   0000BF   85..82       MOV     DPL,?V2
   \   0000C2   85..83       MOV     DPH,?V3
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   D0E0         POP     A
   \   0000C9   F0           MOVX    @DPTR,A
   3086              pRsp->networkListCount = networkListCount;
   \   0000CA   E5..         MOV     A,?V4
   \   0000CC   C0E0         PUSH    A
   \   0000CE   85..82       MOV     DPL,?V2
   \   0000D1   85..83       MOV     DPH,?V3
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   D0E0         POP     A
   \   0000D9   F0           MOVX    @DPTR,A
   3087              pList = pRsp->list;
   \   0000DA   E5..         MOV     A,?V2
   \   0000DC   2404         ADD     A,#0x4
   \   0000DE   F8           MOV     R0,A
   \   0000DF   E4           CLR     A
   \   0000E0   35..         ADDC    A,?V3
   \   0000E2   F9           MOV     R1,A
   \   0000E3   88..         MOV     ?V0,R0
   \   0000E5   89..         MOV     ?V1,R1
   3088          
   3089              for ( x = 0; x < networkListCount; x++ )
   \   0000E7   75..00       MOV     ?V7,#0x0
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000EA   E5..         MOV     A,?V7
   \   0000EC   C3           CLR     C
   \   0000ED   95..         SUBB    A,?V4
   \   0000EF   4003         JC      $+5
   \   0000F1   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   3090              {
   3091                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \   0000F4                ; Setup parameters for call to function sAddrExtCpy
   \   0000F4   EE           MOV     A,R6
   \   0000F5   FC           MOV     R4,A
   \   0000F6   EF           MOV     A,R7
   \   0000F7   FD           MOV     R5,A
   \   0000F8   AA..         MOV     R2,?V0
   \   0000FA   AB..         MOV     R3,?V1
   \   0000FC   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3092                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   0000FF   8E82         MOV     DPL,R6
   \   000101   8F83         MOV     DPH,R7
   \   000103   E0           MOVX    A,@DPTR
   \   000104   FA           MOV     R2,A
   \   000105   7B00         MOV     R3,#0x0
   \   000107   8E82         MOV     DPL,R6
   \   000109   8F83         MOV     DPH,R7
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   F8           MOV     R0,A
   \   00010E   7900         MOV     R1,#0x0
   \   000110   E4           CLR     A
   \   000111   C8           XCH     A,R0
   \   000112   F9           MOV     R1,A
   \   000113   EA           MOV     A,R2
   \   000114   28           ADD     A,R0
   \   000115   F8           MOV     R0,A
   \   000116   EB           MOV     A,R3
   \   000117   39           ADDC    A,R1
   \   000118   F9           MOV     R1,A
   \   000119   85..82       MOV     DPL,?V0
   \   00011C   85..83       MOV     DPH,?V1
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   E8           MOV     A,R0
   \   000128   F0           MOVX    @DPTR,A
   \   000129   A3           INC     DPTR
   \   00012A   E9           MOV     A,R1
   \   00012B   F0           MOVX    @DPTR,A
   3093                msg += Z_EXTADDR_LEN;
   \   00012C   EE           MOV     A,R6
   \   00012D   2408         ADD     A,#0x8
   \   00012F   FE           MOV     R6,A
   \   000130   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_3
   \   000132   0F           INC     R7
   3094          
   3095                pList->logicalChannel = *msg++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000133   8E82         MOV     DPL,R6
   \   000135   8F83         MOV     DPH,R7
   \   000137   E0           MOVX    A,@DPTR
   \   000138   C0E0         PUSH    A
   \   00013A   85..82       MOV     DPL,?V0
   \   00013D   85..83       MOV     DPH,?V1
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   D0E0         POP     A
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   8E82         MOV     DPL,R6
   \   00014F   8F83         MOV     DPH,R7
   \   000151   A3           INC     DPTR
   \   000152   AE82         MOV     R6,DPL
   \   000154   AF83         MOV     R7,DPH
   3096                pList->stackProfile = (*msg) & 0x0F;
   \   000156   8E82         MOV     DPL,R6
   \   000158   8F83         MOV     DPH,R7
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   540F         ANL     A,#0xf
   \   00015D   C0E0         PUSH    A
   \   00015F   E5..         MOV     A,?V0
   \   000161   240B         ADD     A,#0xb
   \   000163   F582         MOV     DPL,A
   \   000165   E4           CLR     A
   \   000166   35..         ADDC    A,?V1
   \   000168   F583         MOV     DPH,A
   \   00016A   D0E0         POP     A
   \   00016C   F0           MOVX    @DPTR,A
   3097                pList->version = (*msg++ >> 4) & 0x0F;
   \   00016D   8E82         MOV     DPL,R6
   \   00016F   8F83         MOV     DPH,R7
   \   000171   E0           MOVX    A,@DPTR
   \   000172   C4           SWAP    A
   \   000173   540F         ANL     A,#0xf
   \   000175   C0E0         PUSH    A
   \   000177   E5..         MOV     A,?V0
   \   000179   240C         ADD     A,#0xc
   \   00017B   F582         MOV     DPL,A
   \   00017D   E4           CLR     A
   \   00017E   35..         ADDC    A,?V1
   \   000180   F583         MOV     DPH,A
   \   000182   D0E0         POP     A
   \   000184   F0           MOVX    @DPTR,A
   \   000185   8E82         MOV     DPL,R6
   \   000187   8F83         MOV     DPH,R7
   \   000189   A3           INC     DPTR
   \   00018A   AE82         MOV     R6,DPL
   \   00018C   AF83         MOV     R7,DPH
   3098                pList->beaconOrder = (*msg) & 0x0F;
   \   00018E   8E82         MOV     DPL,R6
   \   000190   8F83         MOV     DPH,R7
   \   000192   E0           MOVX    A,@DPTR
   \   000193   540F         ANL     A,#0xf
   \   000195   C0E0         PUSH    A
   \   000197   E5..         MOV     A,?V0
   \   000199   240D         ADD     A,#0xd
   \   00019B   F582         MOV     DPL,A
   \   00019D   E4           CLR     A
   \   00019E   35..         ADDC    A,?V1
   \   0001A0   F583         MOV     DPH,A
   \   0001A2   D0E0         POP     A
   \   0001A4   F0           MOVX    @DPTR,A
   3099                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \   0001A5   8E82         MOV     DPL,R6
   \   0001A7   8F83         MOV     DPH,R7
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   C4           SWAP    A
   \   0001AB   540F         ANL     A,#0xf
   \   0001AD   C0E0         PUSH    A
   \   0001AF   E5..         MOV     A,?V0
   \   0001B1   240E         ADD     A,#0xe
   \   0001B3   F582         MOV     DPL,A
   \   0001B5   E4           CLR     A
   \   0001B6   35..         ADDC    A,?V1
   \   0001B8   F583         MOV     DPH,A
   \   0001BA   D0E0         POP     A
   \   0001BC   F0           MOVX    @DPTR,A
   \   0001BD   8E82         MOV     DPL,R6
   \   0001BF   8F83         MOV     DPH,R7
   \   0001C1   A3           INC     DPTR
   \   0001C2   AE82         MOV     R6,DPL
   \   0001C4   AF83         MOV     R7,DPH
   3100                pList->permitJoining = *msg++;
   \   0001C6   8E82         MOV     DPL,R6
   \   0001C8   8F83         MOV     DPH,R7
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   C0E0         PUSH    A
   \   0001CD   E5..         MOV     A,?V0
   \   0001CF   240F         ADD     A,#0xf
   \   0001D1   F582         MOV     DPL,A
   \   0001D3   E4           CLR     A
   \   0001D4   35..         ADDC    A,?V1
   \   0001D6   F583         MOV     DPH,A
   \   0001D8   D0E0         POP     A
   \   0001DA   F0           MOVX    @DPTR,A
   \   0001DB   8E82         MOV     DPL,R6
   \   0001DD   8F83         MOV     DPH,R7
   \   0001DF   A3           INC     DPTR
   \   0001E0   AE82         MOV     R6,DPL
   \   0001E2   AF83         MOV     R7,DPH
   3101                pList++;
   \   0001E4   E5..         MOV     A,?V0
   \   0001E6   2410         ADD     A,#0x10
   \   0001E8   F5..         MOV     ?V0,A
   \   0001EA   5002         JNC     ??ZDO_ParseMgmNwkDiscRsp_4
   \   0001EC   05..         INC     ?V1
   3102              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0001EE   05..         INC     ?V7
   \   0001F0   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   3103            }
   3104          
   3105            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0001F3   AA..         MOV     R2,?V2
   \   0001F5   AB..         MOV     R3,?V3
   \   0001F7   7F0C         MOV     R7,#0xc
   \   0001F9   02....       LJMP    ?BANKED_LEAVE_XDATA
   3106          }
   3107          
   3108          /*********************************************************************
   3109           * @fn          ZDO_ParseMgmtRtgRsp
   3110           *
   3111           * @brief       This function parses the incoming Management
   3112           *              Routing response.
   3113           *
   3114           * @param       inMsg - incoming message
   3115           *
   3116           * @return      a pointer to parsed response structure (NULL if not allocated).
   3117           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3118           *          by the calling function [osal_mem_free()].
   3119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3120          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   3121          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   3122            ZDO_MgmtRtgRsp_t *pRsp;
   3123            uint8 status;
   3124            uint8 rtgCount = 0;
   \   000009   75..00       MOV     ?V4,#0x0
   3125            uint8 startIndex = 0;
   \   00000C   75..00       MOV     ?V5,#0x0
   3126            uint8 rtgListCount = 0;
   \   00000F   75..00       MOV     ?V6,#0x0
   3127            uint8 *msg;
   3128          
   3129            msg = inMsg->asdu;
   \   000012   E5..         MOV     A,?V2
   \   000014   2413         ADD     A,#0x13
   \   000016   F582         MOV     DPL,A
   \   000018   E4           CLR     A
   \   000019   35..         ADDC    A,?V3
   \   00001B   F583         MOV     DPH,A
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   E8           MOV     A,R0
   \   000023   FE           MOV     R6,A
   \   000024   E9           MOV     A,R1
   \   000025   FF           MOV     R7,A
   3130          
   3131            status = *msg++;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V7,A
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   AE82         MOV     R6,DPL
   \   000034   AF83         MOV     R7,DPH
   3132            if ( status == ZSuccess )
   \   000036   E5..         MOV     A,?V7
   \   000038   7030         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   3133            {
   3134              rtgCount = *msg++;
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V4,A
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   AE82         MOV     R6,DPL
   \   000048   AF83         MOV     R7,DPH
   3135              startIndex = *msg++;
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V5,A
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   A3           INC     DPTR
   \   000056   AE82         MOV     R6,DPL
   \   000058   AF83         MOV     R7,DPH
   3136              rtgListCount = *msg++;
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F5..         MOV     ?V6,A
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   A3           INC     DPTR
   \   000066   AE82         MOV     R6,DPL
   \   000068   AF83         MOV     R7,DPH
   3137            }
   3138          
   3139            // Allocate a buffer big enough to handle the list
   3140            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   3141                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   00006A                ; Setup parameters for call to function osal_mem_alloc
   \   00006A   A8..         MOV     R0,?V6
   \   00006C   7900         MOV     R1,#0x0
   \   00006E   E8           MOV     A,R0
   \   00006F   75F007       MOV     B,#0x7
   \   000072   A4           MUL     AB
   \   000073   C8           XCH     A,R0
   \   000074   AAF0         MOV     R2,B
   \   000076   75F000       MOV     B,#0x0
   \   000079   A4           MUL     AB
   \   00007A   2A           ADD     A,R2
   \   00007B   FA           MOV     R2,A
   \   00007C   75F007       MOV     B,#0x7
   \   00007F   E9           MOV     A,R1
   \   000080   A4           MUL     AB
   \   000081   2A           ADD     A,R2
   \   000082   F9           MOV     R1,A
   \   000083   E8           MOV     A,R0
   \   000084   2404         ADD     A,#0x4
   \   000086   FA           MOV     R2,A
   \   000087   E4           CLR     A
   \   000088   39           ADDC    A,R1
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00008D   8A..         MOV     ?V8,R2
   \   00008F   8B..         MOV     ?V9,R3
   \   000091   85....       MOV     ?V0,?V8
   \   000094   85....       MOV     ?V1,?V9
   3142            if ( pRsp )
   \   000097   E5..         MOV     A,?V0
   \   000099   45..         ORL     A,?V1
   \   00009B   7003         JNZ     $+5
   \   00009D   02....       LJMP    ??ZDO_ParseMgmtRtgRsp_1 & 0xFFFF
   3143            {
   3144              uint8 x;
   3145              rtgItem_t *pList = pRsp->list;
   \   0000A0   E5..         MOV     A,?V0
   \   0000A2   2404         ADD     A,#0x4
   \   0000A4   FA           MOV     R2,A
   \   0000A5   E4           CLR     A
   \   0000A6   35..         ADDC    A,?V1
   \   0000A8   FB           MOV     R3,A
   3146              pRsp->status = status;
   \   0000A9   E5..         MOV     A,?V7
   \   0000AB   C0E0         PUSH    A
   \   0000AD   85..82       MOV     DPL,?V0
   \   0000B0   85..83       MOV     DPH,?V1
   \   0000B3   D0E0         POP     A
   \   0000B5   F0           MOVX    @DPTR,A
   3147              pRsp->rtgCount = rtgCount;
   \   0000B6   E5..         MOV     A,?V4
   \   0000B8   C0E0         PUSH    A
   \   0000BA   85..82       MOV     DPL,?V0
   \   0000BD   85..83       MOV     DPH,?V1
   \   0000C0   A3           INC     DPTR
   \   0000C1   D0E0         POP     A
   \   0000C3   F0           MOVX    @DPTR,A
   3148              pRsp->startIndex = startIndex;
   \   0000C4   E5..         MOV     A,?V5
   \   0000C6   C0E0         PUSH    A
   \   0000C8   85..82       MOV     DPL,?V0
   \   0000CB   85..83       MOV     DPH,?V1
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   D0E0         POP     A
   \   0000D2   F0           MOVX    @DPTR,A
   3149              pRsp->rtgListCount = rtgListCount;
   \   0000D3   E5..         MOV     A,?V6
   \   0000D5   C0E0         PUSH    A
   \   0000D7   85..82       MOV     DPL,?V0
   \   0000DA   85..83       MOV     DPH,?V1
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   D0E0         POP     A
   \   0000E2   F0           MOVX    @DPTR,A
   3150          
   3151              for ( x = 0; x < rtgListCount; x++ )
   \   0000E3   7800         MOV     R0,#0x0
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   0000E5   E8           MOV     A,R0
   \   0000E6   C3           CLR     C
   \   0000E7   95..         SUBB    A,?V6
   \   0000E9   4003         JC      $+5
   \   0000EB   02....       LJMP    ??ZDO_ParseMgmtRtgRsp_1 & 0xFFFF
   3152              {
   3153                uint8 statOpt;
   3154          
   3155                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \   0000EE   8E82         MOV     DPL,R6
   \   0000F0   8F83         MOV     DPH,R7
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F5..         MOV     ?V8,A
   \   0000F5   75..00       MOV     ?V9,#0x0
   \   0000F8   8E82         MOV     DPL,R6
   \   0000FA   8F83         MOV     DPH,R7
   \   0000FC   A3           INC     DPTR
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   FC           MOV     R4,A
   \   0000FF   7D00         MOV     R5,#0x0
   \   000101   E4           CLR     A
   \   000102   CC           XCH     A,R4
   \   000103   FD           MOV     R5,A
   \   000104   E5..         MOV     A,?V8
   \   000106   2C           ADD     A,R4
   \   000107   FC           MOV     R4,A
   \   000108   E5..         MOV     A,?V9
   \   00010A   3D           ADDC    A,R5
   \   00010B   FD           MOV     R5,A
   \   00010C   8A82         MOV     DPL,R2
   \   00010E   8B83         MOV     DPH,R3
   \   000110   EC           MOV     A,R4
   \   000111   F0           MOVX    @DPTR,A
   \   000112   A3           INC     DPTR
   \   000113   ED           MOV     A,R5
   \   000114   F0           MOVX    @DPTR,A
   3156                msg += 2;
   \   000115   EE           MOV     A,R6
   \   000116   2402         ADD     A,#0x2
   \   000118   FE           MOV     R6,A
   \   000119   5001         JNC     ??ZDO_ParseMgmtRtgRsp_3
   \   00011B   0F           INC     R7
   3157                statOpt = *msg++;
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   00011C   8E82         MOV     DPL,R6
   \   00011E   8F83         MOV     DPH,R7
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F9           MOV     R1,A
   \   000122   8E82         MOV     DPL,R6
   \   000124   8F83         MOV     DPH,R7
   \   000126   A3           INC     DPTR
   \   000127   AE82         MOV     R6,DPL
   \   000129   AF83         MOV     R7,DPH
   3158                pList->status = (statOpt & 0x07);
   \   00012B   7407         MOV     A,#0x7
   \   00012D   59           ANL     A,R1
   \   00012E   C0E0         PUSH    A
   \   000130   8A82         MOV     DPL,R2
   \   000132   8B83         MOV     DPH,R3
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   D0E0         POP     A
   \   00013B   F0           MOVX    @DPTR,A
   3159                pList->options = ((statOpt >> 3) & 0x07);
   \   00013C   E9           MOV     A,R1
   \   00013D   13           RRC     A
   \   00013E   13           RRC     A
   \   00013F   13           RRC     A
   \   000140   541F         ANL     A,#0x1f
   \   000142   5407         ANL     A,#0x7
   \   000144   C0E0         PUSH    A
   \   000146   8A82         MOV     DPL,R2
   \   000148   8B83         MOV     DPH,R3
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   D0E0         POP     A
   \   000152   F0           MOVX    @DPTR,A
   3160                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \   000153   8E82         MOV     DPL,R6
   \   000155   8F83         MOV     DPH,R7
   \   000157   E0           MOVX    A,@DPTR
   \   000158   F5..         MOV     ?V8,A
   \   00015A   75..00       MOV     ?V9,#0x0
   \   00015D   8E82         MOV     DPL,R6
   \   00015F   8F83         MOV     DPH,R7
   \   000161   A3           INC     DPTR
   \   000162   E0           MOVX    A,@DPTR
   \   000163   FC           MOV     R4,A
   \   000164   7D00         MOV     R5,#0x0
   \   000166   E4           CLR     A
   \   000167   CC           XCH     A,R4
   \   000168   FD           MOV     R5,A
   \   000169   E5..         MOV     A,?V8
   \   00016B   2C           ADD     A,R4
   \   00016C   FC           MOV     R4,A
   \   00016D   E5..         MOV     A,?V9
   \   00016F   3D           ADDC    A,R5
   \   000170   FD           MOV     R5,A
   \   000171   8A82         MOV     DPL,R2
   \   000173   8B83         MOV     DPH,R3
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   EC           MOV     A,R4
   \   000178   F0           MOVX    @DPTR,A
   \   000179   A3           INC     DPTR
   \   00017A   ED           MOV     A,R5
   \   00017B   F0           MOVX    @DPTR,A
   3161                msg += 2;
   \   00017C   EE           MOV     A,R6
   \   00017D   2402         ADD     A,#0x2
   \   00017F   FE           MOV     R6,A
   \   000180   5001         JNC     ??ZDO_ParseMgmtRtgRsp_4
   \   000182   0F           INC     R7
   3162                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000183   EA           MOV     A,R2
   \   000184   2407         ADD     A,#0x7
   \   000186   FA           MOV     R2,A
   \   000187   5001         JNC     ??ZDO_ParseMgmtRtgRsp_5
   \   000189   0B           INC     R3
   3163              }
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   00018A   08           INC     R0
   \   00018B   02....       LJMP    ??ZDO_ParseMgmtRtgRsp_2 & 0xFFFF
   3164            }
   3165          
   3166            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   00018E   AA..         MOV     R2,?V0
   \   000190   AB..         MOV     R3,?V1
   \   000192   7F0A         MOV     R7,#0xa
   \   000194   02....       LJMP    ?BANKED_LEAVE_XDATA
   3167          }
   3168          
   3169          /*********************************************************************
   3170           * @fn          ZDO_ParseMgmtBindRsp
   3171           *
   3172           * @brief       This function parses the incoming Management
   3173           *              Binding response.
   3174           *
   3175           * @param       inMsg - pointer to message to parse
   3176           *
   3177           * @return      a pointer to parsed response structure (NULL if not allocated).
   3178           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3179           *          by the calling function [osal_mem_free()].
   3180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3181          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   3182          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V10,R2
   \   000007   8B..         MOV     ?V11,R3
   3183            ZDO_MgmtBindRsp_t *pRsp;
   3184            uint8 status;
   3185            uint8 bindingCount = 0;
   \   000009   75..00       MOV     ?V6,#0x0
   3186            uint8 startIndex = 0;
   \   00000C   75..00       MOV     ?V5,#0x0
   3187            uint8 bindingListCount = 0;
   \   00000F   75..00       MOV     ?V4,#0x0
   3188            uint8 *msg;
   3189          
   3190            msg = inMsg->asdu;
   \   000012   E5..         MOV     A,?V10
   \   000014   2413         ADD     A,#0x13
   \   000016   F582         MOV     DPL,A
   \   000018   E4           CLR     A
   \   000019   35..         ADDC    A,?V11
   \   00001B   F583         MOV     DPH,A
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   88..         MOV     ?V2,R0
   \   000024   89..         MOV     ?V3,R1
   3191          
   3192            status = *msg++;
   \   000026   85..82       MOV     DPL,?V2
   \   000029   85..83       MOV     DPH,?V3
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V8,A
   \   00002F   85..82       MOV     DPL,?V2
   \   000032   85..83       MOV     DPH,?V3
   \   000035   A3           INC     DPTR
   \   000036   8582..       MOV     ?V2,DPL
   \   000039   8583..       MOV     ?V3,DPH
   3193            if ( status == ZSuccess )
   \   00003C   E5..         MOV     A,?V8
   \   00003E   7042         JNZ     ??ZDO_ParseMgmtBindRsp_0
   3194            {
   3195              bindingCount = *msg++;
   \   000040   85..82       MOV     DPL,?V2
   \   000043   85..83       MOV     DPH,?V3
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F5..         MOV     ?V6,A
   \   000049   85..82       MOV     DPL,?V2
   \   00004C   85..83       MOV     DPH,?V3
   \   00004F   A3           INC     DPTR
   \   000050   8582..       MOV     ?V2,DPL
   \   000053   8583..       MOV     ?V3,DPH
   3196              startIndex = *msg++;
   \   000056   85..82       MOV     DPL,?V2
   \   000059   85..83       MOV     DPH,?V3
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F5..         MOV     ?V5,A
   \   00005F   85..82       MOV     DPL,?V2
   \   000062   85..83       MOV     DPH,?V3
   \   000065   A3           INC     DPTR
   \   000066   8582..       MOV     ?V2,DPL
   \   000069   8583..       MOV     ?V3,DPH
   3197              bindingListCount = *msg++;
   \   00006C   85..82       MOV     DPL,?V2
   \   00006F   85..83       MOV     DPH,?V3
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F5..         MOV     ?V4,A
   \   000075   85..82       MOV     DPL,?V2
   \   000078   85..83       MOV     DPH,?V3
   \   00007B   A3           INC     DPTR
   \   00007C   8582..       MOV     ?V2,DPL
   \   00007F   8583..       MOV     ?V3,DPH
   3198            }
   3199          
   3200            // Allocate a buffer big enough to handle the list
   3201            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   3202                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   000082                ; Setup parameters for call to function osal_mem_alloc
   \   000082   A8..         MOV     R0,?V4
   \   000084   7900         MOV     R1,#0x0
   \   000086   E8           MOV     A,R0
   \   000087   75F015       MOV     B,#0x15
   \   00008A   A4           MUL     AB
   \   00008B   C8           XCH     A,R0
   \   00008C   AAF0         MOV     R2,B
   \   00008E   75F000       MOV     B,#0x0
   \   000091   A4           MUL     AB
   \   000092   2A           ADD     A,R2
   \   000093   FA           MOV     R2,A
   \   000094   75F015       MOV     B,#0x15
   \   000097   E9           MOV     A,R1
   \   000098   A4           MUL     AB
   \   000099   2A           ADD     A,R2
   \   00009A   F9           MOV     R1,A
   \   00009B   E8           MOV     A,R0
   \   00009C   2404         ADD     A,#0x4
   \   00009E   FA           MOV     R2,A
   \   00009F   E4           CLR     A
   \   0000A0   39           ADDC    A,R1
   \   0000A1   FB           MOV     R3,A
   \   0000A2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A5   8A..         MOV     ?V12,R2
   \   0000A7   8B..         MOV     ?V13,R3
   \   0000A9   85....       MOV     ?V0,?V12
   \   0000AC   85....       MOV     ?V1,?V13
   3203            if ( pRsp )
   \   0000AF   E5..         MOV     A,?V0
   \   0000B1   45..         ORL     A,?V1
   \   0000B3   7003         JNZ     $+5
   \   0000B5   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   3204            {
   3205              uint8 x;
   3206              apsBindingItem_t *pList = pRsp->list;
   \   0000B8   E5..         MOV     A,?V0
   \   0000BA   2404         ADD     A,#0x4
   \   0000BC   FE           MOV     R6,A
   \   0000BD   E4           CLR     A
   \   0000BE   35..         ADDC    A,?V1
   \   0000C0   FF           MOV     R7,A
   3207              pRsp->status = status;
   \   0000C1   E5..         MOV     A,?V8
   \   0000C3   C0E0         PUSH    A
   \   0000C5   85..82       MOV     DPL,?V0
   \   0000C8   85..83       MOV     DPH,?V1
   \   0000CB   D0E0         POP     A
   \   0000CD   F0           MOVX    @DPTR,A
   3208              pRsp->bindingCount = bindingCount;
   \   0000CE   E5..         MOV     A,?V6
   \   0000D0   C0E0         PUSH    A
   \   0000D2   85..82       MOV     DPL,?V0
   \   0000D5   85..83       MOV     DPH,?V1
   \   0000D8   A3           INC     DPTR
   \   0000D9   D0E0         POP     A
   \   0000DB   F0           MOVX    @DPTR,A
   3209              pRsp->startIndex = startIndex;
   \   0000DC   E5..         MOV     A,?V5
   \   0000DE   C0E0         PUSH    A
   \   0000E0   85..82       MOV     DPL,?V0
   \   0000E3   85..83       MOV     DPH,?V1
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   D0E0         POP     A
   \   0000EA   F0           MOVX    @DPTR,A
   3210              pRsp->bindingListCount = bindingListCount;
   \   0000EB   E5..         MOV     A,?V4
   \   0000ED   C0E0         PUSH    A
   \   0000EF   85..82       MOV     DPL,?V0
   \   0000F2   85..83       MOV     DPH,?V1
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
   3211          
   3212              for ( x = 0; x < bindingListCount; x++ )
   \   0000FB   75..00       MOV     ?V7,#0x0
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   0000FE   E5..         MOV     A,?V7
   \   000100   C3           CLR     C
   \   000101   95..         SUBB    A,?V4
   \   000103   4003         JC      $+5
   \   000105   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   3213              {
   3214                osal_cpyExtAddr( pList->srcAddr, msg );
   \   000108                ; Setup parameters for call to function sAddrExtCpy
   \   000108   AC..         MOV     R4,?V2
   \   00010A   AD..         MOV     R5,?V3
   \   00010C   EE           MOV     A,R6
   \   00010D   FA           MOV     R2,A
   \   00010E   EF           MOV     A,R7
   \   00010F   FB           MOV     R3,A
   \   000110   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3215                msg += Z_EXTADDR_LEN;
   \   000113   E5..         MOV     A,?V2
   \   000115   2408         ADD     A,#0x8
   \   000117   F5..         MOV     ?V2,A
   \   000119   5002         JNC     ??ZDO_ParseMgmtBindRsp_3
   \   00011B   05..         INC     ?V3
   3216                pList->srcEP = *msg++;
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00011D   85..82       MOV     DPL,?V2
   \   000120   85..83       MOV     DPH,?V3
   \   000123   E0           MOVX    A,@DPTR
   \   000124   C0E0         PUSH    A
   \   000126   8E82         MOV     DPL,R6
   \   000128   8F83         MOV     DPH,R7
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   D0E0         POP     A
   \   000134   F0           MOVX    @DPTR,A
   \   000135   85..82       MOV     DPL,?V2
   \   000138   85..83       MOV     DPH,?V3
   \   00013B   A3           INC     DPTR
   \   00013C   8582..       MOV     ?V2,DPL
   \   00013F   8583..       MOV     ?V3,DPH
   3217          
   3218                // Get the Cluster ID
   3219          
   3220                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \   000142   85..82       MOV     DPL,?V2
   \   000145   85..83       MOV     DPH,?V3
   \   000148   E0           MOVX    A,@DPTR
   \   000149   FA           MOV     R2,A
   \   00014A   7B00         MOV     R3,#0x0
   \   00014C   85..82       MOV     DPL,?V2
   \   00014F   85..83       MOV     DPH,?V3
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F8           MOV     R0,A
   \   000155   7900         MOV     R1,#0x0
   \   000157   E4           CLR     A
   \   000158   C8           XCH     A,R0
   \   000159   F9           MOV     R1,A
   \   00015A   EA           MOV     A,R2
   \   00015B   28           ADD     A,R0
   \   00015C   F8           MOV     R0,A
   \   00015D   EB           MOV     A,R3
   \   00015E   39           ADDC    A,R1
   \   00015F   F9           MOV     R1,A
   \   000160   8E82         MOV     DPL,R6
   \   000162   8F83         MOV     DPH,R7
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   E8           MOV     A,R0
   \   00016E   F0           MOVX    @DPTR,A
   \   00016F   A3           INC     DPTR
   \   000170   E9           MOV     A,R1
   \   000171   F0           MOVX    @DPTR,A
   3221                msg += 2;
   \   000172   E5..         MOV     A,?V2
   \   000174   2402         ADD     A,#0x2
   \   000176   F5..         MOV     ?V2,A
   \   000178   5002         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   00017A   05..         INC     ?V3
   3222                pList->dstAddr.addrMode = *msg++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   00017C   85..82       MOV     DPL,?V2
   \   00017F   85..83       MOV     DPH,?V3
   \   000182   E0           MOVX    A,@DPTR
   \   000183   C0E0         PUSH    A
   \   000185   EE           MOV     A,R6
   \   000186   2413         ADD     A,#0x13
   \   000188   F582         MOV     DPL,A
   \   00018A   E4           CLR     A
   \   00018B   3F           ADDC    A,R7
   \   00018C   F583         MOV     DPH,A
   \   00018E   D0E0         POP     A
   \   000190   F0           MOVX    @DPTR,A
   \   000191   85..82       MOV     DPL,?V2
   \   000194   85..83       MOV     DPH,?V3
   \   000197   A3           INC     DPTR
   \   000198   8582..       MOV     ?V2,DPL
   \   00019B   8583..       MOV     ?V3,DPH
   3223                if ( pList->dstAddr.addrMode == Addr64Bit )
   \   00019E   EE           MOV     A,R6
   \   00019F   2413         ADD     A,#0x13
   \   0001A1   F582         MOV     DPL,A
   \   0001A3   E4           CLR     A
   \   0001A4   3F           ADDC    A,R7
   \   0001A5   F583         MOV     DPH,A
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   6403         XRL     A,#0x3
   \   0001AA   703C         JNZ     ??ZDO_ParseMgmtBindRsp_5
   3224                {
   3225                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   \   0001AC                ; Setup parameters for call to function sAddrExtCpy
   \   0001AC   AC..         MOV     R4,?V2
   \   0001AE   AD..         MOV     R5,?V3
   \   0001B0   EE           MOV     A,R6
   \   0001B1   240B         ADD     A,#0xb
   \   0001B3   FA           MOV     R2,A
   \   0001B4   E4           CLR     A
   \   0001B5   3F           ADDC    A,R7
   \   0001B6   FB           MOV     R3,A
   \   0001B7   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3226                  msg += Z_EXTADDR_LEN;
   \   0001BA   E5..         MOV     A,?V2
   \   0001BC   2408         ADD     A,#0x8
   \   0001BE   F5..         MOV     ?V2,A
   \   0001C0   5002         JNC     ??ZDO_ParseMgmtBindRsp_6
   \   0001C2   05..         INC     ?V3
   3227                  pList->dstEP = *msg++;
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   0001C4   85..82       MOV     DPL,?V2
   \   0001C7   85..83       MOV     DPH,?V3
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   C0E0         PUSH    A
   \   0001CD   EE           MOV     A,R6
   \   0001CE   2414         ADD     A,#0x14
   \   0001D0   F582         MOV     DPL,A
   \   0001D2   E4           CLR     A
   \   0001D3   3F           ADDC    A,R7
   \   0001D4   F583         MOV     DPH,A
   \   0001D6   D0E0         POP     A
   \   0001D8   F0           MOVX    @DPTR,A
   \   0001D9   85..82       MOV     DPL,?V2
   \   0001DC   85..83       MOV     DPH,?V3
   \   0001DF   A3           INC     DPTR
   \   0001E0   8582..       MOV     ?V2,DPL
   \   0001E3   8583..       MOV     ?V3,DPH
   \   0001E6   8036         SJMP    ??ZDO_ParseMgmtBindRsp_7
   3228                }
   3229                else
   3230                {
   3231                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   0001E8   85..82       MOV     DPL,?V2
   \   0001EB   85..83       MOV     DPH,?V3
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   FA           MOV     R2,A
   \   0001F0   7B00         MOV     R3,#0x0
   \   0001F2   85..82       MOV     DPL,?V2
   \   0001F5   85..83       MOV     DPH,?V3
   \   0001F8   A3           INC     DPTR
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   F8           MOV     R0,A
   \   0001FB   7900         MOV     R1,#0x0
   \   0001FD   E4           CLR     A
   \   0001FE   C8           XCH     A,R0
   \   0001FF   F9           MOV     R1,A
   \   000200   EA           MOV     A,R2
   \   000201   28           ADD     A,R0
   \   000202   F8           MOV     R0,A
   \   000203   EB           MOV     A,R3
   \   000204   39           ADDC    A,R1
   \   000205   F9           MOV     R1,A
   \   000206   EE           MOV     A,R6
   \   000207   240B         ADD     A,#0xb
   \   000209   F582         MOV     DPL,A
   \   00020B   E4           CLR     A
   \   00020C   3F           ADDC    A,R7
   \   00020D   F583         MOV     DPH,A
   \   00020F   E8           MOV     A,R0
   \   000210   F0           MOVX    @DPTR,A
   \   000211   A3           INC     DPTR
   \   000212   E9           MOV     A,R1
   \   000213   F0           MOVX    @DPTR,A
   3232                  msg += 2;
   \   000214   E5..         MOV     A,?V2
   \   000216   2402         ADD     A,#0x2
   \   000218   F5..         MOV     ?V2,A
   \   00021A   5002         JNC     ??ZDO_ParseMgmtBindRsp_7
   \   00021C   05..         INC     ?V3
   3233                }
   3234          
   3235                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   00021E   EE           MOV     A,R6
   \   00021F   2415         ADD     A,#0x15
   \   000221   FE           MOV     R6,A
   \   000222   5001         JNC     ??ZDO_ParseMgmtBindRsp_8
   \   000224   0F           INC     R7
   3236              }
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   000225   05..         INC     ?V7
   \   000227   02....       LJMP    ??ZDO_ParseMgmtBindRsp_2 & 0xFFFF
   3237            }
   3238          
   3239            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   00022A   AA..         MOV     R2,?V0
   \   00022C   AB..         MOV     R3,?V1
   \   00022E   7F0E         MOV     R7,#0xe
   \   000230   02....       LJMP    ?BANKED_LEAVE_XDATA
   3240          }
   3241          
   3242          /*********************************************************************
   3243           * @fn          ZDO_ParseUserDescRsp
   3244           *
   3245           * @brief       This function parses the incoming User
   3246           *              Descriptor Response.
   3247           *
   3248           * @param       inMsg - incoming response message
   3249           *
   3250           * @return      a pointer to parsed response structure (NULL if not allocated).
   3251           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3252           *          by the calling function [osal_mem_free()].
   3253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3254          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3255          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   3256            ZDO_UserDescRsp_t *pRsp;
   3257            uint8 *msg;
   3258            uint8 descLen = 0;
   \   000009   75..00       MOV     ?V7,#0x0
   3259          
   3260            msg = inMsg->asdu;
   \   00000C   E5..         MOV     A,?V2
   \   00000E   2413         ADD     A,#0x13
   \   000010   F582         MOV     DPL,A
   \   000012   E4           CLR     A
   \   000013   35..         ADDC    A,?V3
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   88..         MOV     ?V0,R0
   \   00001E   89..         MOV     ?V1,R1
   3261          
   3262            if ( msg[0] == ZSuccess )
   \   000020   85..82       MOV     DPL,?V0
   \   000023   85..83       MOV     DPH,?V1
   \   000026   E0           MOVX    A,@DPTR
   \   000027   700C         JNZ     ??ZDO_ParseUserDescRsp_0
   3263            {
   3264              descLen = msg[3];
   \   000029   85..82       MOV     DPL,?V0
   \   00002C   85..83       MOV     DPH,?V1
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V7,A
   3265            }
   3266          
   3267            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   A8..         MOV     R0,?V7
   \   000037   7900         MOV     R1,#0x0
   \   000039   E8           MOV     A,R0
   \   00003A   2404         ADD     A,#0x4
   \   00003C   FA           MOV     R2,A
   \   00003D   E4           CLR     A
   \   00003E   39           ADDC    A,R1
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000043   8A..         MOV     ?V4,R2
   \   000045   8B..         MOV     ?V5,R3
   \   000047   AE..         MOV     R6,?V4
   \   000049   AF..         MOV     R7,?V5
   3268            if ( pRsp )
   \   00004B   EE           MOV     A,R6
   \   00004C   4F           ORL     A,R7
   \   00004D   6072         JZ      ??ZDO_ParseUserDescRsp_1
   3269            {
   3270              pRsp->status = msg[0];
   \   00004F   85..82       MOV     DPL,?V0
   \   000052   85..83       MOV     DPH,?V1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   C0E0         PUSH    A
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   D0E0         POP     A
   \   00005E   F0           MOVX    @DPTR,A
   3271              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \   00005F   85..82       MOV     DPL,?V0
   \   000062   85..83       MOV     DPH,?V1
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FA           MOV     R2,A
   \   000068   7B00         MOV     R3,#0x0
   \   00006A   85..82       MOV     DPL,?V0
   \   00006D   85..83       MOV     DPH,?V1
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F8           MOV     R0,A
   \   000074   7900         MOV     R1,#0x0
   \   000076   E4           CLR     A
   \   000077   C8           XCH     A,R0
   \   000078   F9           MOV     R1,A
   \   000079   EA           MOV     A,R2
   \   00007A   28           ADD     A,R0
   \   00007B   F8           MOV     R0,A
   \   00007C   EB           MOV     A,R3
   \   00007D   39           ADDC    A,R1
   \   00007E   F9           MOV     R1,A
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   A3           INC     DPTR
   \   000084   E8           MOV     A,R0
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   E9           MOV     A,R1
   \   000088   F0           MOVX    @DPTR,A
   3272              pRsp->length = descLen;
   \   000089   E5..         MOV     A,?V7
   \   00008B   C0E0         PUSH    A
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   D0E0         POP     A
   \   000096   F0           MOVX    @DPTR,A
   3273              if ( descLen )
   \   000097   E5..         MOV     A,?V7
   \   000099   6026         JZ      ??ZDO_ParseUserDescRsp_1
   3274              {
   3275                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   00009B                ; Setup parameters for call to function osal_memcpy
   \   00009B   E5..         MOV     A,?V0
   \   00009D   2404         ADD     A,#0x4
   \   00009F   F5..         MOV     ?V4,A
   \   0000A1   E4           CLR     A
   \   0000A2   35..         ADDC    A,?V1
   \   0000A4   F5..         MOV     ?V5,A
   \   0000A6   75..00       MOV     ?V6,#0x0
   \   0000A9   78..         MOV     R0,#?V4
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AE   AC..         MOV     R4,?V7
   \   0000B0   7D00         MOV     R5,#0x0
   \   0000B2   EE           MOV     A,R6
   \   0000B3   2404         ADD     A,#0x4
   \   0000B5   FA           MOV     R2,A
   \   0000B6   E4           CLR     A
   \   0000B7   3F           ADDC    A,R7
   \   0000B8   FB           MOV     R3,A
   \   0000B9   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000BC   7403         MOV     A,#0x3
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   3276              }
   3277            }
   3278          
   3279            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   FB           MOV     R3,A
   \   0000C5   7F08         MOV     R7,#0x8
   \   0000C7   02....       LJMP    ?BANKED_LEAVE_XDATA
   3280          }
   3281          
   3282          /*********************************************************************
   3283           * @fn          ZDO_ParseSimpleDescBuf
   3284           *
   3285           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3286           *
   3287           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3288           * @param       desc - SimpleDescriptionFormat_t *
   3289           *
   3290           *              This routine allocates storage for the cluster IDs because
   3291           *              they are 16-bit and need to be aligned to be properly processed.
   3292           *              This routine returns non-zero if an allocation fails.
   3293           *
   3294           *              NOTE: This means that the caller or user of the input structure
   3295           *                    is responsible for freeing the memory
   3296           *
   3297           * @return      0: success
   3298           *              1: failure due to malloc failure.
   3299           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3300          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3301          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3302            uint8 num, i;
   3303          
   3304            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   E0           MOVX    A,@DPTR
   \   000012   C0E0         PUSH    A
   \   000014   85..82       MOV     DPL,?V0
   \   000017   85..83       MOV     DPH,?V1
   \   00001A   D0E0         POP     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   AE82         MOV     R6,DPL
   \   000024   AF83         MOV     R7,DPH
   3305            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   85..82       MOV     DPL,?V0
   \   000043   85..83       MOV     DPH,?V1
   \   000046   A3           INC     DPTR
   \   000047   E8           MOV     A,R0
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E9           MOV     A,R1
   \   00004B   F0           MOVX    @DPTR,A
   3306            buf += 2;
   \   00004C   EE           MOV     A,R6
   \   00004D   2402         ADD     A,#0x2
   \   00004F   FE           MOV     R6,A
   \   000050   5001         JNC     ??ZDO_ParseSimpleDescBuf_0
   \   000052   0F           INC     R7
   3307            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FA           MOV     R2,A
   \   000059   7B00         MOV     R3,#0x0
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   7900         MOV     R1,#0x0
   \   000064   E4           CLR     A
   \   000065   C8           XCH     A,R0
   \   000066   F9           MOV     R1,A
   \   000067   EA           MOV     A,R2
   \   000068   28           ADD     A,R0
   \   000069   F8           MOV     R0,A
   \   00006A   EB           MOV     A,R3
   \   00006B   39           ADDC    A,R1
   \   00006C   F9           MOV     R1,A
   \   00006D   85..82       MOV     DPL,?V0
   \   000070   85..83       MOV     DPH,?V1
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   E8           MOV     A,R0
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   E9           MOV     A,R1
   \   00007A   F0           MOVX    @DPTR,A
   3308            buf += 2;
   \   00007B   EE           MOV     A,R6
   \   00007C   2402         ADD     A,#0x2
   \   00007E   FE           MOV     R6,A
   \   00007F   5001         JNC     ??ZDO_ParseSimpleDescBuf_1
   \   000081   0F           INC     R7
   3309            desc->AppDevVer = *buf >> 4;
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   E0           MOVX    A,@DPTR
   \   000087   C4           SWAP    A
   \   000088   540F         ANL     A,#0xf
   \   00008A   F8           MOV     R0,A
   \   00008B   85..82       MOV     DPL,?V0
   \   00008E   85..83       MOV     DPH,?V1
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   54F0         ANL     A,#0xf0
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   740F         MOV     A,#0xf
   \   00009C   58           ANL     A,R0
   \   00009D   F8           MOV     R0,A
   \   00009E   85..82       MOV     DPL,?V0
   \   0000A1   85..83       MOV     DPH,?V1
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   48           ORL     A,R0
   \   0000AB   F0           MOVX    @DPTR,A
   3310          
   3311            desc->Reserved = 0;
   \   0000AC   85..82       MOV     DPL,?V0
   \   0000AF   85..83       MOV     DPH,?V1
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   540F         ANL     A,#0xf
   \   0000BA   F0           MOVX    @DPTR,A
   3312            buf++;
   \   0000BB   8E82         MOV     DPL,R6
   \   0000BD   8F83         MOV     DPH,R7
   \   0000BF   A3           INC     DPTR
   \   0000C0   AE82         MOV     R6,DPL
   \   0000C2   AF83         MOV     R7,DPH
   3313          
   3314            // move in input cluster list (if any). allocate aligned memory.
   3315            num = desc->AppNumInClusters = *buf++;
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F8           MOV     R0,A
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   A3           INC     DPTR
   \   0000CF   AE82         MOV     R6,DPL
   \   0000D1   AF83         MOV     R7,DPH
   \   0000D3   E8           MOV     A,R0
   \   0000D4   C0E0         PUSH    A
   \   0000D6   85..82       MOV     DPL,?V0
   \   0000D9   85..83       MOV     DPH,?V1
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   D0E0         POP     A
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   88..         MOV     ?V3,R0
   3316            if ( num )
   \   0000E7   E5..         MOV     A,?V3
   \   0000E9   7003         JNZ     $+5
   \   0000EB   02....       LJMP    ??ZDO_ParseSimpleDescBuf_2 & 0xFFFF
   3317            {
   3318              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000EE                ; Setup parameters for call to function osal_mem_alloc
   \   0000EE   AA..         MOV     R2,?V3
   \   0000F0   7B00         MOV     R3,#0x0
   \   0000F2   EA           MOV     A,R2
   \   0000F3   75F002       MOV     B,#0x2
   \   0000F6   A4           MUL     AB
   \   0000F7   CA           XCH     A,R2
   \   0000F8   A8F0         MOV     R0,B
   \   0000FA   75F000       MOV     B,#0x0
   \   0000FD   A4           MUL     AB
   \   0000FE   28           ADD     A,R0
   \   0000FF   F8           MOV     R0,A
   \   000100   75F002       MOV     B,#0x2
   \   000103   EB           MOV     A,R3
   \   000104   A4           MUL     AB
   \   000105   28           ADD     A,R0
   \   000106   FB           MOV     R3,A
   \   000107   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00010A   85..82       MOV     DPL,?V0
   \   00010D   85..83       MOV     DPH,?V1
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   EA           MOV     A,R2
   \   000118   F0           MOVX    @DPTR,A
   \   000119   A3           INC     DPTR
   \   00011A   EB           MOV     A,R3
   \   00011B   F0           MOVX    @DPTR,A
   \   00011C   85..82       MOV     DPL,?V0
   \   00011F   85..83       MOV     DPH,?V1
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   F8           MOV     R0,A
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   F9           MOV     R1,A
   \   00012E   E8           MOV     A,R0
   \   00012F   49           ORL     A,R1
   \   000130   7005         JNZ     ??ZDO_ParseSimpleDescBuf_3
   3319              {
   3320                // malloc failed. we're done.
   3321                return 1;
   \   000132   7901         MOV     R1,#0x1
   \   000134   02....       LJMP    ??ZDO_ParseSimpleDescBuf_4 & 0xFFFF
   3322              }
   3323              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   000137   75..00       MOV     ?V2,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   00013A   E5..         MOV     A,?V2
   \   00013C   C3           CLR     C
   \   00013D   95..         SUBB    A,?V3
   \   00013F   505A         JNC     ??ZDO_ParseSimpleDescBuf_2
   3324              {
   3325                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \   000141   8E82         MOV     DPL,R6
   \   000143   8F83         MOV     DPH,R7
   \   000145   E0           MOVX    A,@DPTR
   \   000146   FA           MOV     R2,A
   \   000147   7B00         MOV     R3,#0x0
   \   000149   8E82         MOV     DPL,R6
   \   00014B   8F83         MOV     DPH,R7
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F8           MOV     R0,A
   \   000150   7900         MOV     R1,#0x0
   \   000152   E4           CLR     A
   \   000153   C8           XCH     A,R0
   \   000154   F9           MOV     R1,A
   \   000155   EA           MOV     A,R2
   \   000156   28           ADD     A,R0
   \   000157   FA           MOV     R2,A
   \   000158   EB           MOV     A,R3
   \   000159   39           ADDC    A,R1
   \   00015A   FB           MOV     R3,A
   \   00015B   A8..         MOV     R0,?V2
   \   00015D   7900         MOV     R1,#0x0
   \   00015F   E8           MOV     A,R0
   \   000160   75F002       MOV     B,#0x2
   \   000163   A4           MUL     AB
   \   000164   C8           XCH     A,R0
   \   000165   ACF0         MOV     R4,B
   \   000167   75F000       MOV     B,#0x0
   \   00016A   A4           MUL     AB
   \   00016B   2C           ADD     A,R4
   \   00016C   FC           MOV     R4,A
   \   00016D   75F002       MOV     B,#0x2
   \   000170   E9           MOV     A,R1
   \   000171   A4           MUL     AB
   \   000172   2C           ADD     A,R4
   \   000173   F9           MOV     R1,A
   \   000174   85..82       MOV     DPL,?V0
   \   000177   85..83       MOV     DPH,?V1
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   E0           MOVX    A,@DPTR
   \   000182   28           ADD     A,R0
   \   000183   FC           MOV     R4,A
   \   000184   A3           INC     DPTR
   \   000185   E0           MOVX    A,@DPTR
   \   000186   39           ADDC    A,R1
   \   000187   8C82         MOV     DPL,R4
   \   000189   F583         MOV     DPH,A
   \   00018B   EA           MOV     A,R2
   \   00018C   F0           MOVX    @DPTR,A
   \   00018D   A3           INC     DPTR
   \   00018E   EB           MOV     A,R3
   \   00018F   F0           MOVX    @DPTR,A
   3326                buf += 2;
   \   000190   EE           MOV     A,R6
   \   000191   2402         ADD     A,#0x2
   \   000193   FE           MOV     R6,A
   \   000194   5001         JNC     ??ZDO_ParseSimpleDescBuf_6
   \   000196   0F           INC     R7
   3327              }
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000197   05..         INC     ?V2
   \   000199   809F         SJMP    ??ZDO_ParseSimpleDescBuf_5
   3328            }
   3329          
   3330            // move in output cluster list (if any). allocate aligned memory.
   3331            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   00019B   8E82         MOV     DPL,R6
   \   00019D   8F83         MOV     DPH,R7
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   F8           MOV     R0,A
   \   0001A1   8E82         MOV     DPL,R6
   \   0001A3   8F83         MOV     DPH,R7
   \   0001A5   A3           INC     DPTR
   \   0001A6   AE82         MOV     R6,DPL
   \   0001A8   AF83         MOV     R7,DPH
   \   0001AA   E8           MOV     A,R0
   \   0001AB   C0E0         PUSH    A
   \   0001AD   85..82       MOV     DPL,?V0
   \   0001B0   85..83       MOV     DPH,?V1
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   D0E0         POP     A
   \   0001BE   F0           MOVX    @DPTR,A
   \   0001BF   88..         MOV     ?V3,R0
   3332            if (num)
   \   0001C1   E5..         MOV     A,?V3
   \   0001C3   7003         JNZ     $+5
   \   0001C5   02....       LJMP    ??ZDO_ParseSimpleDescBuf_7 & 0xFFFF
   3333            {
   3334              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0001C8                ; Setup parameters for call to function osal_mem_alloc
   \   0001C8   AA..         MOV     R2,?V3
   \   0001CA   7B00         MOV     R3,#0x0
   \   0001CC   EA           MOV     A,R2
   \   0001CD   75F002       MOV     B,#0x2
   \   0001D0   A4           MUL     AB
   \   0001D1   CA           XCH     A,R2
   \   0001D2   A8F0         MOV     R0,B
   \   0001D4   75F000       MOV     B,#0x0
   \   0001D7   A4           MUL     AB
   \   0001D8   28           ADD     A,R0
   \   0001D9   F8           MOV     R0,A
   \   0001DA   75F002       MOV     B,#0x2
   \   0001DD   EB           MOV     A,R3
   \   0001DE   A4           MUL     AB
   \   0001DF   28           ADD     A,R0
   \   0001E0   FB           MOV     R3,A
   \   0001E1   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001E4   85..82       MOV     DPL,?V0
   \   0001E7   85..83       MOV     DPH,?V1
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   EA           MOV     A,R2
   \   0001F5   F0           MOVX    @DPTR,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   EB           MOV     A,R3
   \   0001F8   F0           MOVX    @DPTR,A
   \   0001F9   85..82       MOV     DPL,?V0
   \   0001FC   85..83       MOV     DPH,?V1
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   A3           INC     DPTR
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   E0           MOVX    A,@DPTR
   \   00020A   F8           MOV     R0,A
   \   00020B   A3           INC     DPTR
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F9           MOV     R1,A
   \   00020E   E8           MOV     A,R0
   \   00020F   49           ORL     A,R1
   \   000210   7043         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3335              {
   3336                // malloc failed. free input cluster list memory if there is any
   3337                if ( desc->pAppInClusterList != NULL )
   \   000212   85..82       MOV     DPL,?V0
   \   000215   85..83       MOV     DPH,?V1
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   F8           MOV     R0,A
   \   000221   A3           INC     DPTR
   \   000222   E0           MOVX    A,@DPTR
   \   000223   F9           MOV     R1,A
   \   000224   E8           MOV     A,R0
   \   000225   49           ORL     A,R1
   \   000226   6029         JZ      ??ZDO_ParseSimpleDescBuf_9
   3338                {
   3339                  osal_mem_free(desc->pAppInClusterList);
   \   000228                ; Setup parameters for call to function osal_mem_free
   \   000228   85..82       MOV     DPL,?V0
   \   00022B   85..83       MOV     DPH,?V1
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   E0           MOVX    A,@DPTR
   \   000236   FA           MOV     R2,A
   \   000237   A3           INC     DPTR
   \   000238   E0           MOVX    A,@DPTR
   \   000239   FB           MOV     R3,A
   \   00023A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3340          
   3341                  desc->pAppInClusterList = NULL;
   \   00023D   85..82       MOV     DPL,?V0
   \   000240   85..83       MOV     DPH,?V1
   \   000243   A3           INC     DPTR
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   A3           INC     DPTR
   \   000247   A3           INC     DPTR
   \   000248   A3           INC     DPTR
   \   000249   A3           INC     DPTR
   \   00024A   7400         MOV     A,#0x0
   \   00024C   F0           MOVX    @DPTR,A
   \   00024D   A3           INC     DPTR
   \   00024E   7400         MOV     A,#0x0
   \   000250   F0           MOVX    @DPTR,A
   3342                }
   3343                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   000251   7901         MOV     R1,#0x1
   \   000253   8069         SJMP    ??ZDO_ParseSimpleDescBuf_4
   3344              }
   3345              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   000255   75..00       MOV     ?V2,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   000258   E5..         MOV     A,?V2
   \   00025A   C3           CLR     C
   \   00025B   95..         SUBB    A,?V3
   \   00025D   505D         JNC     ??ZDO_ParseSimpleDescBuf_7
   3346              {
   3347                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \   00025F   8E82         MOV     DPL,R6
   \   000261   8F83         MOV     DPH,R7
   \   000263   E0           MOVX    A,@DPTR
   \   000264   FA           MOV     R2,A
   \   000265   7B00         MOV     R3,#0x0
   \   000267   8E82         MOV     DPL,R6
   \   000269   8F83         MOV     DPH,R7
   \   00026B   A3           INC     DPTR
   \   00026C   E0           MOVX    A,@DPTR
   \   00026D   F8           MOV     R0,A
   \   00026E   7900         MOV     R1,#0x0
   \   000270   E4           CLR     A
   \   000271   C8           XCH     A,R0
   \   000272   F9           MOV     R1,A
   \   000273   EA           MOV     A,R2
   \   000274   28           ADD     A,R0
   \   000275   FA           MOV     R2,A
   \   000276   EB           MOV     A,R3
   \   000277   39           ADDC    A,R1
   \   000278   FB           MOV     R3,A
   \   000279   A8..         MOV     R0,?V2
   \   00027B   7900         MOV     R1,#0x0
   \   00027D   E8           MOV     A,R0
   \   00027E   75F002       MOV     B,#0x2
   \   000281   A4           MUL     AB
   \   000282   C8           XCH     A,R0
   \   000283   ACF0         MOV     R4,B
   \   000285   75F000       MOV     B,#0x0
   \   000288   A4           MUL     AB
   \   000289   2C           ADD     A,R4
   \   00028A   FC           MOV     R4,A
   \   00028B   75F002       MOV     B,#0x2
   \   00028E   E9           MOV     A,R1
   \   00028F   A4           MUL     AB
   \   000290   2C           ADD     A,R4
   \   000291   F9           MOV     R1,A
   \   000292   85..82       MOV     DPL,?V0
   \   000295   85..83       MOV     DPH,?V1
   \   000298   A3           INC     DPTR
   \   000299   A3           INC     DPTR
   \   00029A   A3           INC     DPTR
   \   00029B   A3           INC     DPTR
   \   00029C   A3           INC     DPTR
   \   00029D   A3           INC     DPTR
   \   00029E   A3           INC     DPTR
   \   00029F   A3           INC     DPTR
   \   0002A0   A3           INC     DPTR
   \   0002A1   A3           INC     DPTR
   \   0002A2   E0           MOVX    A,@DPTR
   \   0002A3   28           ADD     A,R0
   \   0002A4   FC           MOV     R4,A
   \   0002A5   A3           INC     DPTR
   \   0002A6   E0           MOVX    A,@DPTR
   \   0002A7   39           ADDC    A,R1
   \   0002A8   8C82         MOV     DPL,R4
   \   0002AA   F583         MOV     DPH,A
   \   0002AC   EA           MOV     A,R2
   \   0002AD   F0           MOVX    @DPTR,A
   \   0002AE   A3           INC     DPTR
   \   0002AF   EB           MOV     A,R3
   \   0002B0   F0           MOVX    @DPTR,A
   3348                buf += 2;
   \   0002B1   EE           MOV     A,R6
   \   0002B2   2402         ADD     A,#0x2
   \   0002B4   FE           MOV     R6,A
   \   0002B5   5001         JNC     ??ZDO_ParseSimpleDescBuf_11
   \   0002B7   0F           INC     R7
   3349              }
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   0002B8   05..         INC     ?V2
   \   0002BA   809C         SJMP    ??ZDO_ParseSimpleDescBuf_10
   3350            }
   3351            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   0002BC   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   0002BE   7F04         MOV     R7,#0x4
   \   0002C0   02....       LJMP    ?BANKED_LEAVE_XDATA
   3352          }
   3353          
   3354          /*********************************************************************
   3355           * @fn          ZDO_ParseDeviceAnnce
   3356           *
   3357           * @brief       Parse a Device Announce message.
   3358           *
   3359           * @param       inMsg - Incoming message
   3360           * @param       pAnnce - place to put the parsed information
   3361           *
   3362           * @return      none
   3363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3364          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3365          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   3366            uint8 *msg;
   3367          
   3368            // Parse incoming message
   3369            msg = inMsg->asdu;
   \   00000D   E5..         MOV     A,?V0
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V1
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FE           MOV     R6,A
   \   00001F   E9           MOV     A,R1
   \   000020   FF           MOV     R7,A
   3370            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   7B00         MOV     R3,#0x0
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   7900         MOV     R1,#0x0
   \   000032   E4           CLR     A
   \   000033   C8           XCH     A,R0
   \   000034   F9           MOV     R1,A
   \   000035   EA           MOV     A,R2
   \   000036   28           ADD     A,R0
   \   000037   F8           MOV     R0,A
   \   000038   EB           MOV     A,R3
   \   000039   39           ADDC    A,R1
   \   00003A   F9           MOV     R1,A
   \   00003B   85..82       MOV     DPL,?V2
   \   00003E   85..83       MOV     DPH,?V3
   \   000041   E8           MOV     A,R0
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E9           MOV     A,R1
   \   000045   F0           MOVX    @DPTR,A
   3371            msg += 2;
   \   000046   EE           MOV     A,R6
   \   000047   2402         ADD     A,#0x2
   \   000049   FE           MOV     R6,A
   \   00004A   5001         JNC     ??ZDO_ParseDeviceAnnce_0
   \   00004C   0F           INC     R7
   3372            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   00004D                ; Setup parameters for call to function sAddrExtCpy
   \   00004D   EE           MOV     A,R6
   \   00004E   FC           MOV     R4,A
   \   00004F   EF           MOV     A,R7
   \   000050   FD           MOV     R5,A
   \   000051   E5..         MOV     A,?V2
   \   000053   2402         ADD     A,#0x2
   \   000055   FA           MOV     R2,A
   \   000056   E4           CLR     A
   \   000057   35..         ADDC    A,?V3
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3373            msg += Z_EXTADDR_LEN;
   \   00005D   EE           MOV     A,R6
   \   00005E   2408         ADD     A,#0x8
   \   000060   FE           MOV     R6,A
   \   000061   5001         JNC     ??ZDO_ParseDeviceAnnce_1
   \   000063   0F           INC     R7
   3374            pAnnce->capabilities = *msg;
   \                     ??ZDO_ParseDeviceAnnce_1:
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   E0           MOVX    A,@DPTR
   \   000069   C0E0         PUSH    A
   \   00006B   85..82       MOV     DPL,?V2
   \   00006E   85..83       MOV     DPH,?V3
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   D0E0         POP     A
   \   00007D   F0           MOVX    @DPTR,A
   3375          }
   \   00007E   7F04         MOV     R7,#0x4
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA
   3376          
   3377          /*********************************************************************
   3378           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3379           *
   3380           * @brief       This function handles parsing of the incoming Management
   3381           *              Network Update notify.
   3382           *
   3383           * @param       inMsg - incoming message (request)
   3384           *
   3385           * @return      a pointer to parsed response structure (NULL if not allocated).
   3386           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3387           *          by the calling function [osal_mem_free()].
   3388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3389          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3390          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   3391            uint8 status;
   3392            uint32 scannedChannels = 0;
   \   000015   75..00       MOV     ?V4,#0x0
   \   000018   75..00       MOV     ?V5,#0x0
   \   00001B   75..00       MOV     ?V6,#0x0
   \   00001E   75..00       MOV     ?V7,#0x0
   3393            uint16 totalTransmissions = 0;
   \   000021   75..00       MOV     ?V14,#0x0
   \   000024   75..00       MOV     ?V15,#0x0
   3394            uint16 transmissionFailures = 0;
   \   000027   75..00       MOV     ?V12,#0x0
   \   00002A   75..00       MOV     ?V13,#0x0
   3395            uint8 listCount = 0;
   \   00002D   75..00       MOV     ?V8,#0x0
   3396            uint8 *msg = inMsg->asdu;
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   C8           XCH     A,R0
   \   00003B   2413         ADD     A,#0x13
   \   00003D   F582         MOV     DPL,A
   \   00003F   C8           XCH     A,R0
   \   000040   3400         ADDC    A,#0x0
   \   000042   F583         MOV     DPH,A
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FE           MOV     R6,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FF           MOV     R7,A
   3397            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3398          
   3399            status = *msg++;
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V9,A
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   A3           INC     DPTR
   \   000055   AE82         MOV     R6,DPL
   \   000057   AF83         MOV     R7,DPH
   3400            if ( status == ZSuccess )
   \   000059   E5..         MOV     A,?V9
   \   00005B   707E         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
   3401            {
   3402              scannedChannels = osal_build_uint32( msg, 4 );
   \   00005D                ; Setup parameters for call to function osal_build_uint32
   \   00005D   7904         MOV     R1,#0x4
   \   00005F   EE           MOV     A,R6
   \   000060   FA           MOV     R2,A
   \   000061   EF           MOV     A,R7
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000066   8A..         MOV     ?V0,R2
   \   000068   8B..         MOV     ?V1,R3
   \   00006A   8C..         MOV     ?V2,R4
   \   00006C   8D..         MOV     ?V3,R5
   \   00006E   85....       MOV     ?V4,?V0
   \   000071   85....       MOV     ?V5,?V1
   \   000074   85....       MOV     ?V6,?V2
   \   000077   85....       MOV     ?V7,?V3
   3403              msg += 4;
   \   00007A   EE           MOV     A,R6
   \   00007B   2404         ADD     A,#0x4
   \   00007D   FE           MOV     R6,A
   \   00007E   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000080   0F           INC     R7
   3404              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   000081   8E82         MOV     DPL,R6
   \   000083   8F83         MOV     DPH,R7
   \   000085   E0           MOVX    A,@DPTR
   \   000086   FA           MOV     R2,A
   \   000087   7B00         MOV     R3,#0x0
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F8           MOV     R0,A
   \   000090   7900         MOV     R1,#0x0
   \   000092   E4           CLR     A
   \   000093   C8           XCH     A,R0
   \   000094   F9           MOV     R1,A
   \   000095   EA           MOV     A,R2
   \   000096   28           ADD     A,R0
   \   000097   F8           MOV     R0,A
   \   000098   EB           MOV     A,R3
   \   000099   39           ADDC    A,R1
   \   00009A   F9           MOV     R1,A
   \   00009B   88..         MOV     ?V14,R0
   \   00009D   89..         MOV     ?V15,R1
   3405              msg += 2;
   \   00009F   EE           MOV     A,R6
   \   0000A0   2402         ADD     A,#0x2
   \   0000A2   FE           MOV     R6,A
   \   0000A3   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_2
   \   0000A5   0F           INC     R7
   3406              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   0000A6   8E82         MOV     DPL,R6
   \   0000A8   8F83         MOV     DPH,R7
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   FA           MOV     R2,A
   \   0000AC   7B00         MOV     R3,#0x0
   \   0000AE   8E82         MOV     DPL,R6
   \   0000B0   8F83         MOV     DPH,R7
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F8           MOV     R0,A
   \   0000B5   7900         MOV     R1,#0x0
   \   0000B7   E4           CLR     A
   \   0000B8   C8           XCH     A,R0
   \   0000B9   F9           MOV     R1,A
   \   0000BA   EA           MOV     A,R2
   \   0000BB   28           ADD     A,R0
   \   0000BC   F8           MOV     R0,A
   \   0000BD   EB           MOV     A,R3
   \   0000BE   39           ADDC    A,R1
   \   0000BF   F9           MOV     R1,A
   \   0000C0   88..         MOV     ?V12,R0
   \   0000C2   89..         MOV     ?V13,R1
   3407              msg += 2;
   \   0000C4   EE           MOV     A,R6
   \   0000C5   2402         ADD     A,#0x2
   \   0000C7   FE           MOV     R6,A
   \   0000C8   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_3
   \   0000CA   0F           INC     R7
   3408              listCount = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_3:
   \   0000CB   8E82         MOV     DPL,R6
   \   0000CD   8F83         MOV     DPH,R7
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   F5..         MOV     ?V8,A
   \   0000D2   8E82         MOV     DPL,R6
   \   0000D4   8F83         MOV     DPH,R7
   \   0000D6   A3           INC     DPTR
   \   0000D7   AE82         MOV     R6,DPL
   \   0000D9   AF83         MOV     R7,DPH
   3409            }
   3410          
   3411            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   0000DB                ; Setup parameters for call to function osal_mem_alloc
   \   0000DB   A8..         MOV     R0,?V8
   \   0000DD   7900         MOV     R1,#0x0
   \   0000DF   E8           MOV     A,R0
   \   0000E0   240A         ADD     A,#0xa
   \   0000E2   FA           MOV     R2,A
   \   0000E3   E4           CLR     A
   \   0000E4   39           ADDC    A,R1
   \   0000E5   FB           MOV     R3,A
   \   0000E6   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000E9   8A..         MOV     ?V0,R2
   \   0000EB   8B..         MOV     ?V1,R3
   \   0000ED   85....       MOV     ?V10,?V0
   \   0000F0   85....       MOV     ?V11,?V1
   3412          
   3413            if ( pRsp )
   \   0000F3   E5..         MOV     A,?V10
   \   0000F5   45..         ORL     A,?V11
   \   0000F7   607A         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_4
   3414            {
   3415              pRsp->status = status;
   \   0000F9   E5..         MOV     A,?V9
   \   0000FB   C0E0         PUSH    A
   \   0000FD   85..82       MOV     DPL,?V10
   \   000100   85..83       MOV     DPH,?V11
   \   000103   D0E0         POP     A
   \   000105   F0           MOVX    @DPTR,A
   3416              pRsp->scannedChannels = scannedChannels;
   \   000106   85..82       MOV     DPL,?V10
   \   000109   85..83       MOV     DPH,?V11
   \   00010C   A3           INC     DPTR
   \   00010D   78..         MOV     R0,#?V4
   \   00010F   12....       LCALL   ?L_MOV_TO_X
   3417              pRsp->totalTransmissions = totalTransmissions;
   \   000112   85..82       MOV     DPL,?V10
   \   000115   85..83       MOV     DPH,?V11
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   E5..         MOV     A,?V14
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   E5..         MOV     A,?V15
   \   000123   F0           MOVX    @DPTR,A
   3418              pRsp->transmissionFailures = transmissionFailures;
   \   000124   85..82       MOV     DPL,?V10
   \   000127   85..83       MOV     DPH,?V11
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   E5..         MOV     A,?V12
   \   000133   F0           MOVX    @DPTR,A
   \   000134   A3           INC     DPTR
   \   000135   E5..         MOV     A,?V13
   \   000137   F0           MOVX    @DPTR,A
   3419              pRsp->listCount = listCount;
   \   000138   E5..         MOV     A,?V8
   \   00013A   C0E0         PUSH    A
   \   00013C   85..82       MOV     DPL,?V10
   \   00013F   85..83       MOV     DPH,?V11
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   D0E0         POP     A
   \   00014D   F0           MOVX    @DPTR,A
   3420          
   3421              // Allocate a buffer big enough to handle the list.
   3422              if ( listCount > 0 )
   \   00014E   E5..         MOV     A,?V8
   \   000150   6021         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_4
   3423              {
   3424                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   000152                ; Setup parameters for call to function osal_memcpy
   \   000152   8E..         MOV     ?V0,R6
   \   000154   8F..         MOV     ?V1,R7
   \   000156   75..00       MOV     ?V2,#0x0
   \   000159   78..         MOV     R0,#?V0
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00015E   AC..         MOV     R4,?V8
   \   000160   7D00         MOV     R5,#0x0
   \   000162   E5..         MOV     A,?V10
   \   000164   240A         ADD     A,#0xa
   \   000166   FA           MOV     R2,A
   \   000167   E4           CLR     A
   \   000168   35..         ADDC    A,?V11
   \   00016A   FB           MOV     R3,A
   \   00016B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00016E   7403         MOV     A,#0x3
   \   000170   12....       LCALL   ?DEALLOC_XSTACK8
   3425              }
   3426            }
   3427          
   3428            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_4:
   \   000173   AA..         MOV     R2,?V10
   \   000175   AB..         MOV     R3,?V11
   \   000177   7402         MOV     A,#0x2
   \   000179   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017C   7F10         MOV     R7,#0x10
   \   00017E   02....       LJMP    ?BANKED_LEAVE_XDATA
   3429          }
   3430          
   3431          /*********************************************************************
   3432           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3433           *
   3434           * @brief       This function handles parsing the incoming Management
   3435           *              Network Update request and starts the request (if needed).
   3436           *
   3437           * @param       inMsg - incoming message (request)
   3438           * @param       pReq - pointer to place to parse message to
   3439           *
   3440           * @return      none
   3441           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3442          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3443          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3444            uint8 *msg = inMsg->asdu;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FE           MOV     R6,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FF           MOV     R7,A
   3445          
   3446            pReq->channelMask = osal_build_uint32( msg, 4 );
   \   00001D                ; Setup parameters for call to function osal_build_uint32
   \   00001D   7904         MOV     R1,#0x4
   \   00001F   EE           MOV     A,R6
   \   000020   FA           MOV     R2,A
   \   000021   EF           MOV     A,R7
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000026   EA           MOV     A,R2
   \   000027   F8           MOV     R0,A
   \   000028   EB           MOV     A,R3
   \   000029   F9           MOV     R1,A
   \   00002A   EC           MOV     A,R4
   \   00002B   FA           MOV     R2,A
   \   00002C   ED           MOV     A,R5
   \   00002D   FB           MOV     R3,A
   \   00002E   85..82       MOV     DPL,?V0
   \   000031   85..83       MOV     DPH,?V1
   \   000034   12....       LCALL   ?XSTORE_R0123
   3447            msg += 4;
   \   000037   EE           MOV     A,R6
   \   000038   2404         ADD     A,#0x4
   \   00003A   FE           MOV     R6,A
   \   00003B   5001         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   \   00003D   0F           INC     R7
   3448            pReq->scanDuration = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C0E0         PUSH    A
   \   000045   85..82       MOV     DPL,?V0
   \   000048   85..83       MOV     DPH,?V1
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   AE82         MOV     R6,DPL
   \   000059   AF83         MOV     R7,DPH
   3449          
   3450            if ( pReq->scanDuration <= 0x05 )
   \   00005B   85..82       MOV     DPL,?V0
   \   00005E   85..83       MOV     DPH,?V1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   C3           CLR     C
   \   000067   9406         SUBB    A,#0x6
   \   000069   5017         JNC     ??ZDO_ParseMgmtNwkUpdateReq_1
   3451            {
   3452              // Request is to scan over channelMask
   3453              pReq->scanCount = *msg;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   C0E0         PUSH    A
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   D0E0         POP     A
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   8078         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_2
   3454            }
   3455            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000082   85..82       MOV     DPL,?V0
   \   000085   85..83       MOV     DPH,?V1
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   64FE         XRL     A,#0xfe
   \   00008F   600F         JZ      ??ZDO_ParseMgmtNwkUpdateReq_3
   \   000091   85..82       MOV     DPL,?V0
   \   000094   85..83       MOV     DPH,?V1
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   64FF         XRL     A,#0xff
   \   00009E   705A         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_2
   3456            {
   3457              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3458              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C0E0         PUSH    A
   \   0000A7   85..82       MOV     DPL,?V0
   \   0000AA   85..83       MOV     DPH,?V1
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   D0E0         POP     A
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   A3           INC     DPTR
   \   0000BB   AE82         MOV     R6,DPL
   \   0000BD   AF83         MOV     R7,DPH
   3459          
   3460              if ( pReq->scanDuration == 0xFF )
   \   0000BF   85..82       MOV     DPL,?V0
   \   0000C2   85..83       MOV     DPH,?V1
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   64FF         XRL     A,#0xff
   \   0000CC   702C         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_2
   3461              {
   3462                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FA           MOV     R2,A
   \   0000D4   7B00         MOV     R3,#0x0
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   7900         MOV     R1,#0x0
   \   0000DF   E4           CLR     A
   \   0000E0   C8           XCH     A,R0
   \   0000E1   F9           MOV     R1,A
   \   0000E2   EA           MOV     A,R2
   \   0000E3   28           ADD     A,R0
   \   0000E4   F8           MOV     R0,A
   \   0000E5   EB           MOV     A,R3
   \   0000E6   39           ADDC    A,R1
   \   0000E7   F9           MOV     R1,A
   \   0000E8   85..82       MOV     DPL,?V0
   \   0000EB   85..83       MOV     DPH,?V1
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   E8           MOV     A,R0
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   E9           MOV     A,R1
   \   0000F9   F0           MOVX    @DPTR,A
   3463              }
   3464            }
   3465          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   0000FA   7F04         MOV     R7,#0x4
   \   0000FC   02....       LJMP    ?BANKED_LEAVE_XDATA
   3466          
   3467          /*********************************************************************
   3468           * @fn          ZDO_ParseEndDeviceTimeoutRsp
   3469           *
   3470           * @brief       Parse the End_Device_Timeout_rsp message.
   3471           *
   3472           * @param       inMsg - incoming message.
   3473           * @param       pRsp - place to put the parsed information.
   3474           *
   3475           * @return      none
   3476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3477          void ZDO_ParseEndDeviceTimeoutRsp( zdoIncomingMsg_t *inMsg, uint16 *pRsp )
   \                     ZDO_ParseEndDeviceTimeoutRsp:
   3478          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3479            *pRsp = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F583         MOV     DPH,A
   \   000014   8882         MOV     DPL,R0
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F8           MOV     R0,A
   \   000018   7900         MOV     R1,#0x0
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   E8           MOV     A,R0
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   E9           MOV     A,R1
   \   000022   F0           MOVX    @DPTR,A
   3480          }
   \   000023   7F01         MOV     R7,#0x1
   \   000025   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdpExternalStateTaskID>`:
   \   000000   FFFF         DW -1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDODeviceSetup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDODeviceSetup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdoSendStateChangeMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdoSendStateChangeMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendEDBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendEDBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CompareClusterLists::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessEndDeviceTimeoutReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessEndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_MatchEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveMatchMemory::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CopyMatchInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDMatchSendState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceBindMatchTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceTimeoutRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceTimeoutRsp

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StartDevice ERR">`:
   \   000000   53746172     DB "StartDevice ERR"
   \            74446576
   \            69636520
   \            45525200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MODE unknown">`:
   \   000000   4D4F4445     DB "MODE unknown"
   \            20756E6B
   \            6E6F776E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Bind">`:
   \   000000   456E6420     DB "End Device Bind"
   \            44657669
   \            63652042
   \            696E6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Success Sent">`:
   \   000000   53756363     DB "Success Sent"
   \            65737320
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Timeout">`:
   \   000000   54696D65     DB "Timeout"
   \            6F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match Desc Req">`:
   \   000000   4D617463     DB "Match Desc Req"
   \            68204465
   \            73632052
   \            657100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Sent">`:
   \   000000   52737020     DB "Rsp Sent"
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Non Matched">`:
   \   000000   52737020     DB "Rsp Non Matched"
   \            4E6F6E20
   \            4D617463
   \            68656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Non Matched">`:
   \   000000   4E6F6E20     DB "Non Matched"
   \            4D617463
   \            68656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   3481          
   3482          /*********************************************************************
   3483          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      1     72   ZDMatchSendState
        0     39   -> APS_SetEndDeviceBindTimeout
        0     39   -> ZDO_RemoveMatchMemory
        0     47   -> ZDP_BindUnbindReq
        0     44   -> ZDP_SendData
        0     39   -> sAddrExtCpy
      2      0   ZDODeviceSetup
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_CoordinatorInit
      0     49   ZDO_AnyClusterMatches
      1     10   ZDO_BuildSimpleDescBuf
      0     45   ZDO_CompareClusterLists
      0     45   ZDO_ConvertOTAClusters
      0     43   ZDO_CopyMatchInfo
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      2      0   ZDO_EndDeviceBindMatchTimeoutCB
        2      0   -> ZDMatchSendState
      0      9   ZDO_EndDeviceTimeoutCB
        0      9   -> ZDO_RemoveEndDeviceBind
        0      9   -> ZDO_SendEDBindRsp
      2      0   ZDO_Init
        2      0   -> ZDODeviceSetup
        2      0   -> sAddrExtCpy
      1     30   ZDO_MatchEndDeviceBind
        0     25   -> APS_SetEndDeviceBindTimeout
        0     25   -> ZDMatchSendState
        0     29   -> ZDO_CompareClusterLists
        0     25   -> ZDO_CopyMatchInfo
        0     25   -> ZDO_RemoveMatchMemory
        0     30   -> ZDP_SendData
        0     25   -> osal_mem_alloc
        0     28   -> osal_memcpy
        0     25   -> osal_memset
      1     16   ZDO_ParseAddrRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     12   ZDO_ParseBindUnbindReq
        0     12   -> sAddrExtCpy
      1     56   ZDO_ParseDeviceAnnce
        0     12   -> sAddrExtCpy
      1     20   ZDO_ParseEPListRsp
        0     17   -> osal_mem_alloc
        0     20   -> osal_memcpy
      1     14   ZDO_ParseEndDeviceBindReq
        0     14   -> ZDO_ConvertOTAClusters
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      0      9   ZDO_ParseEndDeviceTimeoutRsp
      1     20   ZDO_ParseMgmNwkDiscRsp
        0     20   -> osal_mem_alloc
        0     20   -> sAddrExtCpy
      1     22   ZDO_ParseMgmtBindRsp
        0     22   -> osal_mem_alloc
        0     22   -> sAddrExtCpy
      1     20   ZDO_ParseMgmtLqiRsp
        0     20   -> osal_mem_alloc
        0     20   -> sAddrExtCpy
      1     29   ZDO_ParseMgmtNwkUpdateNotify
        0     26   -> osal_build_uint32
        0     26   -> osal_mem_alloc
        0     29   -> osal_memcpy
      1     12   ZDO_ParseMgmtNwkUpdateReq
        0     12   -> osal_build_uint32
      1     18   ZDO_ParseMgmtRtgRsp
        0     18   -> osal_mem_alloc
      1     10   ZDO_ParseNodeDescRsp
      1     10   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     24   ZDO_ParseSimpleDescBuf
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
      1     12   ZDO_ParseSimpleDescRsp
        0     12   -> ZDO_ParseSimpleDescBuf
      1     19   ZDO_ParseUserDescRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      1     33   ZDO_ProcessBindUnbindReq
        0     29   -> APSME_BindRequest
        0     28   -> APSME_LookupNwkAddr
        0     29   -> APSME_UnBindRequest
        0     28   -> NLME_GetExtAddr
        0     28   -> ZDApp_GetEmptyPendingBindReq
        0     28   -> ZDApp_NVUpdate
        0     28   -> ZDP_NwkAddrReq
        0     33   -> ZDP_SendData
        0     28   -> bindAddrIndexGet
        0     31   -> osal_memcpy
        0     32   -> osal_start_timerEx
        0     28   -> sAddrExtCmp
        0     28   -> sAddrExtCpy
      0     44   ZDO_ProcessDeviceAnnce
        0     44   -> AddrMgrEntryLookupExt
        0     44   -> AddrMgrEntryLookupNwk
        0     44   -> AddrMgrEntryUpdate
        0     44   -> AddrMgrExtAddrSet
        0     44   -> AssocChangeNwkAddr
        0     44   -> AssocGetWithExt
        0     44   -> AssocRemove
        0     44   -> NLME_CheckNewAddrSet
        0     44   -> NLME_GetCoordExtAddr
        0     44   -> NLME_GetCoordShortAddr
        0     44   -> NLME_GetShortAddr
        0     44   -> RTG_RemoveRtgEntry
        0     44   -> ZDApp_NVUpdate
        0     44   -> ZDO_ParseDeviceAnnce
        0     44   -> ZMacSetReq
        0     44   -> nwkNeighborRemoveAllStranded
        0     44   -> nwkNeighborUpdateNwkAddr
        0     44   -> osal_memset
        0     44   -> sAddrExtCmp
      0     22   ZDO_ProcessEndDeviceTimeoutReq
        0     17   -> AssocGetWithExt
        0     17   -> ZDApp_NVUpdate
        0     22   -> ZDP_SendData
      1     41   ZDO_ProcessMatchDescReq
        0     34   -> HalLcdWriteScreen
        0     34   -> NLME_IsAddressBroadcast
        0     36   -> ZDO_AnyClusterMatches
        0     34   -> ZDO_ConvertOTAClusters
        0     41   -> ZDP_EPRsp
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     37   -> osal_memcpy
        0     34   -> osal_msg_allocate
        0     34   -> osal_msg_send
      0     27   ZDO_ProcessMgmtBindReq
        0     22   -> APSME_GetRequest
        0     27   -> ZDP_MgmtBindRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      1     20   ZDO_ProcessMgmtDirectJoinReq
        0     15   -> NLME_DirectJoinRequest
        0     20   -> ZDP_SendData
      1     25   ZDO_ProcessMgmtLeaveReq
        0     20   -> AddrMgrExtAddrValid
        0     20   -> NLME_GetExtAddr
        0     20   -> NLME_LeaveReq
        0     25   -> ZDP_SendData
        0     20   -> sAddrExtCmp
      1     64   ZDO_ProcessMgmtLqiReq
        0     59   -> AddrMgrEntryLookupNwk
        0     59   -> AssocCount
        0     59   -> AssocFindDevice
        0     59   -> NLME_GetRequest
        0     64   -> ZDP_MgmtLqiRsp
        0     59   -> osal_mem_alloc
        0     59   -> osal_mem_free
        0     59   -> osal_memset
        0     59   -> sAddrExtCpy
      1     18   ZDO_ProcessMgmtNwkDiscReq
        0     18   -> NLME_NwkDiscReq2
        0     18   -> NLME_NwkDiscTerm
        0     18   -> osal_build_uint32
      1     18   ZDO_ProcessMgmtPermitJoinReq
        0     13   -> NLME_PermitJoiningRequest
        0     18   -> ZDP_SendData
        0     13   -> ZDSecMgrPermitJoining
      0     24   ZDO_ProcessMgmtRtgReq
        0     19   -> NLME_GetRequest
        0     24   -> ZDP_MgmtRtgRsp
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      0     18   ZDO_ProcessNodeDescReq
        0     18   -> ZDP_GenericRsp
        0     16   -> ZDP_NodeDescMsg
      0     18   ZDO_ProcessPowerDescReq
        0     18   -> ZDP_GenericRsp
        0     16   -> ZDP_PowerDescMsg
      0     16   ZDO_ProcessServerDiscReq
        0     16   -> ZDP_ServerDiscRsp
      0     15   ZDO_ProcessSimpleDescReq
        0     15   -> ZDP_SimpleDescMsg
        0     15   -> afFindSimpleDesc
        0     15   -> osal_mem_free
      0     33   ZDO_ProcessUserDescReq
        0     33   -> ZDP_GenericRsp
        0     32   -> ZDP_UserDescRsp
        0     33   -> osal_nv_read
      1     40   ZDO_ProcessUserDescSet
        0     40   -> ZDP_SendData
        0     38   -> osal_memcpy
        0     39   -> osal_nv_write
      2      9   ZDO_RemoveEndDeviceBind
        2      0   -> osal_mem_free
      2     39   ZDO_RemoveMatchMemory
        2      0   -> osal_mem_free
      1     28   ZDO_SendEDBindRsp
        0     14   -> HalLcdWriteString
        0     19   -> ZDP_SendData
      0     19   ZDO_StartDevice
        0     12   -> HalLcdWriteScreen
        0     19   -> NLME_NetworkFormationRequest
        0     12   -> NLME_StartRouterRequest
        0     16   -> osal_start_timerEx
      0     23   ZDO_UpdateAddrManager
        0     23   -> AddrMgrEntryUpdate
        0     23   -> AddrMgrExtAddrSet
      0     12   ZDO_UpdateNwkStatus
        0     12   -> NLME_GetExtAddr
        0     12   -> NLME_GetShortAddr
        0     12   -> zdoSendStateChangeMsg
      1     25   zdoSendStateChangeMsg
        0     13   -> osal_msg_allocate
        0     13   -> osal_msg_find
        0     13   -> osal_msg_send
        0     13   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "End Device Bind">
      13  ?<Constant "MODE unknown">
      15  ?<Constant "Match Desc Req">
      12  ?<Constant "Non Matched">
      16  ?<Constant "Rsp Non Matched">
       9  ?<Constant "Rsp Sent">
      16  ?<Constant "StartDevice ERR">
      13  ?<Constant "Success Sent">
       8  ?<Constant "Timeout">
       2  ?<Initializer for zdpExternalStateTaskID>
       3  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
    1144  ZDMatchSendState
       6  ZDMatchSendState::?relay
      52  ZDOBuildBuf
      17  ZDODeviceSetup
       6  ZDODeviceSetup::?relay
     146  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     513  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
     220  ZDO_CompareClusterLists
       6  ZDO_CompareClusterLists::?relay
     101  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
     513  ZDO_CopyMatchInfo
       6  ZDO_CopyMatchInfo::?relay
       2  ZDO_EDBind
      21  ZDO_EndDeviceBindMatchTimeoutCB
       6  ZDO_EndDeviceBindMatchTimeoutCB::?relay
      93  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
      35  ZDO_Init
       6  ZDO_Init::?relay
    1215  ZDO_MatchEndDeviceBind
       6  ZDO_MatchEndDeviceBind::?relay
     415  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
     276  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
     131  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
     209  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     655  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
      40  ZDO_ParseEndDeviceTimeoutRsp
       6  ZDO_ParseEndDeviceTimeoutRsp::?relay
     508  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     563  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     549  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     385  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     255  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     407  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     592  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     353  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
     101  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     707  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
     143  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
     202  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     199  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     732  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     583  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
     373  ZDO_ProcessEndDeviceTimeoutReq
       6  ZDO_ProcessEndDeviceTimeoutReq::?relay
    1734  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     333  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
     147  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     230  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
    1022  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     192  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
     164  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     371  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
     180  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
     180  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
     139  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     239  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
     246  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     381  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     146  ZDO_RemoveEndDeviceBind
       6  ZDO_RemoveEndDeviceBind::?relay
     353  ZDO_RemoveMatchMemory
       6  ZDO_RemoveMatchMemory::?relay
     141  ZDO_SendEDBindRsp
       6  ZDO_SendEDBindRsp::?relay
     214  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      73  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
     137  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  __Constant_3e8
       4  apsChannelMask
       2  matchED
     131  zdoSendStateChangeMsg
       6  zdoSendStateChangeMsg::?relay
       2  zdpExternalStateTaskID

 
 19 152 bytes in segment BANKED_CODE
    330 bytes in segment BANK_RELAYS
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
    122 bytes in segment XDATA_ROM_C
     60 bytes in segment XDATA_Z
 
 19 484 bytes of CODE  memory
    118 bytes of CONST memory (+ 4 bytes shared)
     62 bytes of XDATA memory

Errors: none
Warnings: none
