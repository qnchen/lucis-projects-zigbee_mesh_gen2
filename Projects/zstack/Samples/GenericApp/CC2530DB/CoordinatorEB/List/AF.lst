###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  17:49:07
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\af\AF.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\af\AF.c" -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC
#        -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D NV_RESTORE -D NV_INIT -D
#        NODE_AUTH -D xWIFI_FREQUENCY_SELECT -D OPEN_FCS -lC "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\AF.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\AF.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2014-06-30 16:29:17 -0700 (Mon, 30 Jun 2014) $
      4            Revision:       $Revision: 39295 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * GLOBAL VARIABLES
     93           */
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTIONS
     99           */
    100          
    101          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    102                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    103                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
    104          
    105          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    106          
    107          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    108          
    109          /*********************************************************************
    110           * PUBLIC FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * @fn      afInit
    115           *
    116           * @brief   Initialization function for the AF.
    117           *
    118           * @param   none
    119           *
    120           * @return  none
    121          void afInit( void )
    122          {
    123          }
    124           */
    125          
    126          /*********************************************************************
    127           * @fn      afRegisterExtended
    128           *
    129           * @brief   Register an Application's EndPoint description.
    130           *
    131           * @param   epDesc - pointer to the Application's endpoint descriptor.
    132           * @param   descFn - pointer to descriptor callback function
    133           * @param   applFn - pointer to the Application callback function
    134           *
    135           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    136           *
    137           * @return  Pointer to epList_t on success, NULL otherwise.
    138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
   \                     afRegisterExtended:
    140          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V2,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V3,A
    141            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   7A0B         MOV     R2,#0xb
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000020   8A..         MOV     ?V4,R2
   \   000022   8B..         MOV     ?V5,R3
   \   000024   AA..         MOV     R2,?V4
   \   000026   AB..         MOV     R3,?V5
    142          
    143            if (ep != NULL)
   \   000028   EA           MOV     A,R2
   \   000029   4B           ORL     A,R3
   \   00002A   6073         JZ      ??afRegisterExtended_0
    144            {
    145              ep->nextDesc = epList;
   \   00002C   90....       MOV     DPTR,#epList
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   E8           MOV     A,R0
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   E9           MOV     A,R1
   \   00003C   F0           MOVX    @DPTR,A
    146              epList = ep;
   \   00003D   90....       MOV     DPTR,#epList
   \   000040   EA           MOV     A,R2
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   EB           MOV     A,R3
   \   000044   F0           MOVX    @DPTR,A
    147              ep->epDesc = epDesc;
   \   000045   8A82         MOV     DPL,R2
   \   000047   8B83         MOV     DPH,R3
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   E5..         MOV     A,?V0
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   E5..         MOV     A,?V1
   \   000051   F0           MOVX    @DPTR,A
    148              ep->pfnDescCB = descFn;
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   EE           MOV     A,R6
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   EF           MOV     A,R7
   \   00005E   F0           MOVX    @DPTR,A
    149              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   7432         MOV     A,#0x32
   \   00006B   F0           MOVX    @DPTR,A
    150              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   00006C   8A82         MOV     DPL,R2
   \   00006E   8B83         MOV     DPH,R3
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   7401         MOV     A,#0x1
   \   000079   F0           MOVX    @DPTR,A
    151              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \   00007A   8A82         MOV     DPL,R2
   \   00007C   8B83         MOV     DPH,R3
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   7401         MOV     A,#0x1
   \   000088   F0           MOVX    @DPTR,A
    152              ep->pfnApplCB = applFn;
   \   000089   A8..         MOV     R0,?V2
   \   00008B   A9..         MOV     R1,?V3
   \   00008D   8A82         MOV     DPL,R2
   \   00008F   8B83         MOV     DPH,R3
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   E8           MOV     A,R0
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   A3           INC     DPTR
   \   00009D   E9           MOV     A,R1
   \   00009E   F0           MOVX    @DPTR,A
    153            }
    154          
    155            return ep;
   \                     ??afRegisterExtended_0:
   \   00009F   7F06         MOV     R7,#0x6
   \   0000A1   02....       LJMP    ?BANKED_LEAVE_XDATA
    156          }
    157          
    158          /*********************************************************************
    159           * @fn      afRegister
    160           *
    161           * @brief   Register an Application's EndPoint description.
    162           *
    163           * @param   epDesc - pointer to the Application's endpoint descriptor.
    164           *
    165           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    166           *
    167           * @return  afStatus_SUCCESS - Registered
    168           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    169           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    173            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   8A..         MOV     ?V0,R2
   \   000014   8B..         MOV     ?V1,R3
   \   000016   E5..         MOV     A,?V0
   \   000018   45..         ORL     A,?V1
   \   00001A   6004         JZ      ??afRegister_0
    174            {
    175              return afStatus_INVALID_PARAMETER;
   \   00001C   7902         MOV     R1,#0x2
   \   00001E   802A         SJMP    ??afRegister_1
    176            }
    177          
    178            return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   000020                ; Setup parameters for call to function afRegisterExtended
   \   000020   E4           CLR     A
   \   000021   F5..         MOV     ?V0,A
   \   000023   F5..         MOV     ?V1,A
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   7C00         MOV     R4,#0x0
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003A   8A..         MOV     ?V0,R2
   \   00003C   8B..         MOV     ?V1,R3
   \   00003E   E5..         MOV     A,?V0
   \   000040   45..         ORL     A,?V1
   \   000042   7004         JNZ     ??afRegister_2
   \   000044   7910         MOV     R1,#0x10
   \   000046   8002         SJMP    ??afRegister_1
   \                     ??afRegister_2:
   \   000048   7900         MOV     R1,#0x0
   \                     ??afRegister_1:
   \   00004A   7F02         MOV     R7,#0x2
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA
    179          }
    180          
    181          /*********************************************************************
    182           * @fn      afDelete
    183           *
    184           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    185           *
    186           * @param   EndPoint - Application Endpoint to delete
    187           *
    188           * @return  afStatus_SUCCESS - endpoint deleted
    189           *          afStatus_INVALID_PARAMETER - endpoint not found
    190           *          afStatus_FAILED - endpoint list empty
    191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    193          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
    194            epList_t *epCurrent;
    195            epList_t *epPrevious;
    196          
    197            if ( epList != NULL )
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??afDelete_0 & 0xFFFF
    198            {
    199              epPrevious = epCurrent = epList;
   \   000016   90....       MOV     DPTR,#epList
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   FE           MOV     R6,A
   \   000020   E9           MOV     A,R1
   \   000021   FF           MOV     R7,A
   \   000022   8E..         MOV     ?V0,R6
   \   000024   8F..         MOV     ?V1,R7
    200          
    201              // first element of the list matches
    202              if ( epCurrent->epDesc->endPoint == EndPoint )
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F583         MOV     DPH,A
   \   000032   8882         MOV     DPL,R0
   \   000034   E0           MOVX    A,@DPTR
   \   000035   65..         XRL     A,?V2
   \   000037   701C         JNZ     ??afDelete_1
    203              {
    204                epList = epCurrent->nextDesc;
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   90....       MOV     DPTR,#epList
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    205                osal_mem_free( epCurrent );
   \   00004A                ; Setup parameters for call to function osal_mem_free
   \   00004A   EE           MOV     A,R6
   \   00004B   FA           MOV     R2,A
   \   00004C   EF           MOV     A,R7
   \   00004D   FB           MOV     R3,A
   \   00004E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    206          
    207                return ( afStatus_SUCCESS );
   \   000051   7900         MOV     R1,#0x0
   \   000053   805A         SJMP    ??afDelete_2
    208              }
    209              else
    210              {
    211                // search the list
    212                for ( epCurrent = epPrevious->nextDesc;
   \                     ??afDelete_1:
   \   000055   85..82       MOV     DPL,?V0
   \   000058   85..83       MOV     DPH,?V1
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   E8           MOV     A,R0
   \   000061   FE           MOV     R6,A
   \   000062   E9           MOV     A,R1
   \   000063   FF           MOV     R7,A
    213                      epCurrent != NULL;
   \                     ??afDelete_3:
   \   000064   EE           MOV     A,R6
   \   000065   4F           ORL     A,R7
   \   000066   6041         JZ      ??afDelete_4
    214                      epCurrent = epCurrent->nextDesc )
    215                {
    216                  if ( epCurrent->epDesc->endPoint == EndPoint )
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F583         MOV     DPH,A
   \   000074   8882         MOV     DPL,R0
   \   000076   E0           MOVX    A,@DPTR
   \   000077   65..         XRL     A,?V2
   \   000079   701F         JNZ     ??afDelete_5
    217                  {
    218                    epPrevious->nextDesc = epCurrent->nextDesc;
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F8           MOV     R0,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F9           MOV     R1,A
   \   000084   85..82       MOV     DPL,?V0
   \   000087   85..83       MOV     DPH,?V1
   \   00008A   E8           MOV     A,R0
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   E9           MOV     A,R1
   \   00008E   F0           MOVX    @DPTR,A
    219                    osal_mem_free( epCurrent );
   \   00008F                ; Setup parameters for call to function osal_mem_free
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    220          
    221                    // delete the entry and free the memory
    222                    return ( afStatus_SUCCESS );
   \   000096   7900         MOV     R1,#0x0
   \   000098   8015         SJMP    ??afDelete_2
    223                  }
    224                  epPrevious = epCurrent;
   \                     ??afDelete_5:
   \   00009A   8E..         MOV     ?V0,R6
   \   00009C   8F..         MOV     ?V1,R7
    225                }
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   FE           MOV     R6,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FF           MOV     R7,A
   \   0000A7   80BB         SJMP    ??afDelete_3
    226              }
    227          
    228              // no endpoint found
    229              return ( afStatus_INVALID_PARAMETER );
   \                     ??afDelete_4:
   \   0000A9   7902         MOV     R1,#0x2
   \   0000AB   8002         SJMP    ??afDelete_2
    230            }
    231            else
    232            {
    233              // epList is empty
    234              return ( afStatus_FAILED );
   \                     ??afDelete_0:
   \   0000AD   7901         MOV     R1,#0x1
   \                     ??afDelete_2:
   \   0000AF   7F03         MOV     R7,#0x3
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    235            }
    236          }
    237          
    238          /*********************************************************************
    239           * @fn          afDataConfirm
    240           *
    241           * @brief       This function will generate the Data Confirm back to
    242           *              the application.
    243           *
    244           * @param       endPoint - confirm end point
    245           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    246           * @param       status - status of APSDE_DATA_REQUEST
    247           *
    248           * @return      none
    249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    250          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V3,R2
   \   000009   8B..         MOV     ?V4,R3
    252            endPointDesc_t *epDesc;
    253            afDataConfirm_t *msgPtr;
    254          
    255            // Find the endpoint description
    256            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   A9..         MOV     R1,?V2
   \   00000D   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000010   8A..         MOV     ?V6,R2
   \   000012   8B..         MOV     ?V7,R3
   \   000014   85....       MOV     ?V0,?V6
   \   000017   85....       MOV     ?V1,?V7
    257            if ( epDesc == NULL )
   \   00001A   E5..         MOV     A,?V0
   \   00001C   45..         ORL     A,?V1
   \   00001E   605A         JZ      ??afDataConfirm_0
    258              return;
    259          
    260            // Determine the incoming command type
    261            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000020                ; Setup parameters for call to function osal_msg_allocate
   \   000020   7A04         MOV     R2,#0x4
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000027   8A..         MOV     ?V6,R2
   \   000029   8B..         MOV     ?V7,R3
   \   00002B   AE..         MOV     R6,?V6
   \   00002D   AF..         MOV     R7,?V7
    262            if ( msgPtr )
   \   00002F   EE           MOV     A,R6
   \   000030   4F           ORL     A,R7
   \   000031   6047         JZ      ??afDataConfirm_0
    263            {
    264              // Build the Data Confirm message
    265              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   74FD         MOV     A,#-0x3
   \   000039   F0           MOVX    @DPTR,A
    266              msgPtr->hdr.status = status;
   \   00003A   E5..         MOV     A,?V4
   \   00003C   C0E0         PUSH    A
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
    267              msgPtr->endpoint = endPoint;
   \   000046   E5..         MOV     A,?V2
   \   000048   C0E0         PUSH    A
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
    268              msgPtr->transID = transID;
   \   000053   E5..         MOV     A,?V3
   \   000055   C0E0         PUSH    A
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   D0E0         POP     A
   \   000060   F0           MOVX    @DPTR,A
    269          
    270          #if defined ( MT_AF_CB_FUNC )
    271              /* If MT has subscribed for this callback, don't send as a message. */
    272              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    273              {
    274                /* Send callback if it's subscribed */
    275                MT_AfDataConfirm ((void *)msgPtr);
    276                /* Release the memory. */
    277                osal_msg_deallocate( (void *)msgPtr );
    278              }
    279              else
    280          #endif
    281              {
    282                /* send message through task message */
    283                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   000061                ; Setup parameters for call to function osal_msg_send
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   FB           MOV     R3,A
   \   000065   85..82       MOV     DPL,?V0
   \   000068   85..83       MOV     DPH,?V1
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F8           MOV     R0,A
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F583         MOV     DPH,A
   \   000072   8882         MOV     DPL,R0
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000079   E9           MOV     A,R1
    284              }
    285            }
    286          }
   \                     ??afDataConfirm_0:
   \   00007A   7F08         MOV     R7,#0x8
   \   00007C   02....       LJMP    ?BANKED_LEAVE_XDATA
    287          
    288          /*********************************************************************
    289           * @fn          afReflectError
    290           *
    291           * @brief       This function will generate the Reflect Error message to
    292           *              the application.
    293           *
    294           * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
    295           * @param       dstAddr - intended destination
    296           * @param       endPoint - confirm end point
    297           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    298           * @param       status - status of APSDE_DATA_REQUEST
    299           *
    300           * @return      none
    301           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    302          void afReflectError( uint8 dstAddrMode, uint16 dstAddr, uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afReflectError:
    303          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V6,R1
   \   000007   8A..         MOV     ?V2,R2
   \   000009   8B..         MOV     ?V3,R3
   \   00000B   8C..         MOV     ?V5,R4
   \   00000D   8D..         MOV     ?V7,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V4,A
    304            endPointDesc_t *epDesc;
    305            afReflectError_t *msgPtr;
    306          
    307            // Find the endpoint description
    308            epDesc = afFindEndPointDesc( endPoint );
   \   000017                ; Setup parameters for call to function afFindEndPointDesc
   \   000017   A9..         MOV     R1,?V5
   \   000019   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00001C   8A..         MOV     ?V8,R2
   \   00001E   8B..         MOV     ?V9,R3
   \   000020   85....       MOV     ?V0,?V8
   \   000023   85....       MOV     ?V1,?V9
    309            if ( epDesc == NULL )
   \   000026   E5..         MOV     A,?V0
   \   000028   45..         ORL     A,?V1
   \   00002A   6079         JZ      ??afReflectError_0
    310              return;
    311          
    312            // Determine the incoming command type
    313            msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
   \   00002C                ; Setup parameters for call to function osal_msg_allocate
   \   00002C   7A07         MOV     R2,#0x7
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000033   8A..         MOV     ?V8,R2
   \   000035   8B..         MOV     ?V9,R3
   \   000037   AE..         MOV     R6,?V8
   \   000039   AF..         MOV     R7,?V9
    314            if ( msgPtr )
   \   00003B   EE           MOV     A,R6
   \   00003C   4F           ORL     A,R7
   \   00003D   6066         JZ      ??afReflectError_0
    315            {
    316              // Build the Data Confirm message
    317              msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   74FE         MOV     A,#-0x2
   \   000045   F0           MOVX    @DPTR,A
    318              msgPtr->hdr.status = status;
   \   000046   E5..         MOV     A,?V4
   \   000048   C0E0         PUSH    A
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   A3           INC     DPTR
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
    319              msgPtr->endpoint = endPoint;
   \   000052   E5..         MOV     A,?V5
   \   000054   C0E0         PUSH    A
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   D0E0         POP     A
   \   00005E   F0           MOVX    @DPTR,A
    320              msgPtr->transID = transID;
   \   00005F   E5..         MOV     A,?V7
   \   000061   C0E0         PUSH    A
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
    321              msgPtr->dstAddrMode = dstAddrMode;
   \   00006D   E5..         MOV     A,?V6
   \   00006F   C0E0         PUSH    A
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   D0E0         POP     A
   \   00007B   F0           MOVX    @DPTR,A
    322              msgPtr->dstAddr = dstAddr;
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   E5..         MOV     A,?V2
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   E5..         MOV     A,?V3
   \   00008B   F0           MOVX    @DPTR,A
    323          
    324          #if defined ( MT_AF_CB_FUNC )
    325              /* If MT has subscribed for this callback, don't send as a message. */
    326              if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
    327              {
    328                /* Send callback if it's subscribed */
    329                MT_AfReflectError( (void *)msgPtr );
    330                /* Release the memory. */
    331                osal_msg_deallocate( (void *)msgPtr );
    332              }
    333              else
    334          #endif
    335              {
    336                /* send message through task message */
    337                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   00008C                ; Setup parameters for call to function osal_msg_send
   \   00008C   EE           MOV     A,R6
   \   00008D   FA           MOV     R2,A
   \   00008E   EF           MOV     A,R7
   \   00008F   FB           MOV     R3,A
   \   000090   85..82       MOV     DPL,?V0
   \   000093   85..83       MOV     DPH,?V1
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F8           MOV     R0,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F583         MOV     DPH,A
   \   00009D   8882         MOV     DPL,R0
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F9           MOV     R1,A
   \   0000A1   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000A4   E9           MOV     A,R1
    338              }
    339            }
    340          }
   \                     ??afReflectError_0:
   \   0000A5   7F0A         MOV     R7,#0xa
   \   0000A7   02....       LJMP    ?BANKED_LEAVE_XDATA
    341          
    342          /*********************************************************************
    343           * @fn          afIncomingData
    344           *
    345           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    346           *
    347           * @param       aff  - pointer to APS frame format
    348           * @param       SrcAddress  - Source address
    349           * @param       SrcPanId  - Source PAN ID
    350           * @param       sig - incoming message's link quality
    351           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    352           * @param       SecurityUse - Security enable/disable
    353           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    354           * @param       radius - incoming messages received radius
    355           *
    356           * @return      none
    357           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    359                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
    360                               uint32 timestamp, uint8 radius )
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   C0E0         PUSH    A
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   D0E0         POP     A
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   EA           MOV     A,R2
   \   000020   FE           MOV     R6,A
   \   000021   EB           MOV     A,R3
   \   000022   FF           MOV     R7,A
   \   000023   741D         MOV     A,#0x1d
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V10,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V11,A
   \   00002F   7422         MOV     A,#0x22
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   78..         MOV     R0,#?V4
   \   000036   12....       LCALL   ?L_MOV_X
    362            endPointDesc_t *epDesc = NULL;
   \   000039   75..00       MOV     ?V0,#0x0
   \   00003C   75..00       MOV     ?V1,#0x0
    363            epList_t *pList = epList;
   \   00003F   90....       MOV     DPTR,#epList
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F5..         MOV     ?V2,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F5..         MOV     ?V3,A
    364          #if !defined ( APS_NO_GROUPS )
    365            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   000049   75..FE       MOV     ?V8,#-0x2
    366          #endif
    367          
    368            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   E0           MOVX    A,@DPTR
   \   000051   540C         ANL     A,#0xc
   \   000053   640C         XRL     A,#0xc
   \   000055   704D         JNZ     ??afIncomingData_0
    369            {
    370          #if !defined ( APS_NO_GROUPS )
    371              // Find the first endpoint for this group
    372              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000057                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000057   79FE         MOV     R1,#-0x2
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FA           MOV     R2,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   000069   E9           MOV     A,R1
   \   00006A   F5..         MOV     ?V8,A
    373              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   00006C   74FE         MOV     A,#-0x2
   \   00006E   65..         XRL     A,?V8
   \   000070   7003         JNZ     $+5
   \   000072   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    374                return;   // No endpoint found
    375          
    376              epDesc = afFindEndPointDesc( grpEp );
   \   000075                ; Setup parameters for call to function afFindEndPointDesc
   \   000075   A9..         MOV     R1,?V8
   \   000077   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00007A   8A..         MOV     ?V12,R2
   \   00007C   8B..         MOV     ?V13,R3
   \   00007E   85....       MOV     ?V0,?V12
   \   000081   85....       MOV     ?V1,?V13
    377              if ( epDesc == NULL )
   \   000084   E5..         MOV     A,?V0
   \   000086   45..         ORL     A,?V1
   \   000088   7003         JNZ     $+5
   \   00008A   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    378                return;   // Endpoint descriptor not found
    379          
    380              pList = afFindEndPointDescList( epDesc->endPoint );
   \   00008D                ; Setup parameters for call to function afFindEndPointDescList
   \   00008D   85..82       MOV     DPL,?V0
   \   000090   85..83       MOV     DPH,?V1
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000098   8A..         MOV     ?V12,R2
   \   00009A   8B..         MOV     ?V13,R3
   \   00009C   85....       MOV     ?V2,?V12
   \   00009F   85....       MOV     ?V3,?V13
   \   0000A2   8054         SJMP    ??afIncomingData_2
    381          #else
    382              return; // Not supported
    383          #endif
    384            }
    385            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   0000A4   8E82         MOV     DPL,R6
   \   0000A6   8F83         MOV     DPH,R7
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   64FF         XRL     A,#0xff
   \   0000AD   7019         JNZ     ??afIncomingData_3
    386            {
    387              // Set the list
    388              if ( pList != NULL )
   \   0000AF   E5..         MOV     A,?V2
   \   0000B1   45..         ORL     A,?V3
   \   0000B3   6043         JZ      ??afIncomingData_2
    389              {
    390                epDesc = pList->epDesc;
   \   0000B5   85..82       MOV     DPL,?V2
   \   0000B8   85..83       MOV     DPH,?V3
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F8           MOV     R0,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   88..         MOV     ?V0,R0
   \   0000C4   89..         MOV     ?V1,R1
   \   0000C6   8030         SJMP    ??afIncomingData_2
    391              }
    392            }
    393            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   0000C8                ; Setup parameters for call to function afFindEndPointDesc
   \   0000C8   8E82         MOV     DPL,R6
   \   0000CA   8F83         MOV     DPH,R7
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F9           MOV     R1,A
   \   0000D0   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000D3   8A..         MOV     ?V12,R2
   \   0000D5   8B..         MOV     ?V13,R3
   \   0000D7   A8..         MOV     R0,?V12
   \   0000D9   A9..         MOV     R1,?V13
   \   0000DB   88..         MOV     ?V0,R0
   \   0000DD   89..         MOV     ?V1,R1
   \   0000DF   E8           MOV     A,R0
   \   0000E0   49           ORL     A,R1
   \   0000E1   6015         JZ      ??afIncomingData_2
    394            {
    395              pList = afFindEndPointDescList( epDesc->endPoint );
   \   0000E3                ; Setup parameters for call to function afFindEndPointDescList
   \   0000E3   85..82       MOV     DPL,?V0
   \   0000E6   85..83       MOV     DPH,?V1
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F9           MOV     R1,A
   \   0000EB   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000EE   8A..         MOV     ?V12,R2
   \   0000F0   8B..         MOV     ?V13,R3
   \   0000F2   85....       MOV     ?V2,?V12
   \   0000F5   85....       MOV     ?V3,?V13
    396            }
    397          
    398            while ( epDesc )
   \                     ??afIncomingData_2:
   \   0000F8   E5..         MOV     A,?V0
   \   0000FA   45..         ORL     A,?V1
   \   0000FC   7003         JNZ     $+5
   \   0000FE   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    399            {
    400              uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
   \   000101   85..82       MOV     DPL,?XSP + 0
   \   000104   85..83       MOV     DPH,?XSP + 1
   \   000107   74FE         MOV     A,#-0x2
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   A3           INC     DPTR
   \   00010B   74FF         MOV     A,#-0x1
   \   00010D   F0           MOVX    @DPTR,A
    401          
    402              if ( pList->pfnDescCB )
   \   00010E   85..82       MOV     DPL,?V2
   \   000111   85..83       MOV     DPH,?V3
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F8           MOV     R0,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F9           MOV     R1,A
   \   00011D   E8           MOV     A,R0
   \   00011E   49           ORL     A,R1
   \   00011F   604E         JZ      ??afIncomingData_4
    403              {
    404                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    405                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
   \   000121                ; Setup parameters for indirect call
   \   000121   85..82       MOV     DPL,?V0
   \   000124   85..83       MOV     DPH,?V1
   \   000127   E0           MOVX    A,@DPTR
   \   000128   FA           MOV     R2,A
   \   000129   7902         MOV     R1,#0x2
   \   00012B   85..82       MOV     DPL,?V2
   \   00012E   85..83       MOV     DPH,?V3
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   F8           MOV     R0,A
   \   000137   A3           INC     DPTR
   \   000138   E0           MOVX    A,@DPTR
   \   000139   F583         MOV     DPH,A
   \   00013B   8882         MOV     DPL,R0
   \   00013D   12....       LCALL   ?CALL_IND
   \   000140   8A..         MOV     ?V12,R2
   \   000142   8B..         MOV     ?V13,R3
   \   000144   85....       MOV     ?V14,?V12
   \   000147   85....       MOV     ?V15,?V13
    406                if ( pID )
   \   00014A   E5..         MOV     A,?V14
   \   00014C   45..         ORL     A,?V15
   \   00014E   6053         JZ      ??afIncomingData_5
    407                {
    408                  epProfileID = *pID;
   \   000150   85..82       MOV     DPL,?V14
   \   000153   85..83       MOV     DPH,?V15
   \   000156   E0           MOVX    A,@DPTR
   \   000157   F8           MOV     R0,A
   \   000158   A3           INC     DPTR
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F9           MOV     R1,A
   \   00015B   85..82       MOV     DPL,?XSP + 0
   \   00015E   85..83       MOV     DPH,?XSP + 1
   \   000161   E8           MOV     A,R0
   \   000162   F0           MOVX    @DPTR,A
   \   000163   A3           INC     DPTR
   \   000164   E9           MOV     A,R1
   \   000165   F0           MOVX    @DPTR,A
    409                  osal_mem_free( pID );
   \   000166                ; Setup parameters for call to function osal_mem_free
   \   000166   AA..         MOV     R2,?V14
   \   000168   AB..         MOV     R3,?V15
   \   00016A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00016D   8034         SJMP    ??afIncomingData_5
    410                }
    411              }
    412              else if ( epDesc->simpleDesc )
   \                     ??afIncomingData_4:
   \   00016F   85..82       MOV     DPL,?V0
   \   000172   85..83       MOV     DPH,?V1
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   F8           MOV     R0,A
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F9           MOV     R1,A
   \   00017D   E8           MOV     A,R0
   \   00017E   49           ORL     A,R1
   \   00017F   6022         JZ      ??afIncomingData_5
    413              {
    414                epProfileID = epDesc->simpleDesc->AppProfId;
   \   000181   85..82       MOV     DPL,?V0
   \   000184   85..83       MOV     DPH,?V1
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   F8           MOV     R0,A
   \   00018C   A3           INC     DPTR
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   F583         MOV     DPH,A
   \   000190   8882         MOV     DPL,R0
   \   000192   A3           INC     DPTR
   \   000193   E0           MOVX    A,@DPTR
   \   000194   F8           MOV     R0,A
   \   000195   A3           INC     DPTR
   \   000196   E0           MOVX    A,@DPTR
   \   000197   F9           MOV     R1,A
   \   000198   85..82       MOV     DPL,?XSP + 0
   \   00019B   85..83       MOV     DPH,?XSP + 1
   \   00019E   E8           MOV     A,R0
   \   00019F   F0           MOVX    @DPTR,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E9           MOV     A,R1
   \   0001A2   F0           MOVX    @DPTR,A
    415              }
    416          
    417              // First part of verification is to make sure that:
    418              // the local Endpoint ProfileID matches the received ProfileID OR
    419              // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
    420              // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
    421              if ( (aff->ProfileID == epProfileID) ||
    422                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    423                   ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
   \                     ??afIncomingData_5:
   \   0001A3   8E82         MOV     DPL,R6
   \   0001A5   8F83         MOV     DPH,R7
   \   0001A7   A3           INC     DPTR
   \   0001A8   A3           INC     DPTR
   \   0001A9   A3           INC     DPTR
   \   0001AA   A3           INC     DPTR
   \   0001AB   A3           INC     DPTR
   \   0001AC   A3           INC     DPTR
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   F8           MOV     R0,A
   \   0001B1   A3           INC     DPTR
   \   0001B2   E0           MOVX    A,@DPTR
   \   0001B3   F9           MOV     R1,A
   \   0001B4   85..82       MOV     DPL,?XSP + 0
   \   0001B7   85..83       MOV     DPH,?XSP + 1
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   68           XRL     A,R0
   \   0001BC   7003         JNZ     ??afIncomingData_6
   \   0001BE   A3           INC     DPTR
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   69           XRL     A,R1
   \                     ??afIncomingData_6:
   \   0001C1   6041         JZ      ??afIncomingData_7
   \   0001C3   85..82       MOV     DPL,?V0
   \   0001C6   85..83       MOV     DPH,?V1
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   7015         JNZ     ??afIncomingData_8
   \   0001CC   8E82         MOV     DPL,R6
   \   0001CE   8F83         MOV     DPH,R7
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   A3           INC     DPTR
   \   0001D6   A3           INC     DPTR
   \   0001D7   A3           INC     DPTR
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   F8           MOV     R0,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   F9           MOV     R1,A
   \   0001DD   E8           MOV     A,R0
   \   0001DE   49           ORL     A,R1
   \   0001DF   6023         JZ      ??afIncomingData_7
   \                     ??afIncomingData_8:
   \   0001E1   85..82       MOV     DPL,?V0
   \   0001E4   85..83       MOV     DPH,?V1
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   7003         JNZ     $+5
   \   0001EA   02....       LJMP    ??afIncomingData_9 & 0xFFFF
   \   0001ED   8E82         MOV     DPL,R6
   \   0001EF   8F83         MOV     DPH,R7
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   A3           INC     DPTR
   \   0001F5   A3           INC     DPTR
   \   0001F6   A3           INC     DPTR
   \   0001F7   A3           INC     DPTR
   \   0001F8   A3           INC     DPTR
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   64FF         XRL     A,#0xff
   \   0001FC   7004         JNZ     ??afIncomingData_10
   \   0001FE   A3           INC     DPTR
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   64FF         XRL     A,#0xff
   \                     ??afIncomingData_10:
   \   000202   7073         JNZ     ??afIncomingData_9
    424              {
    425                // Save original endpoint
    426                uint8 endpoint = aff->DstEndPoint;
   \                     ??afIncomingData_7:
   \   000204   8E82         MOV     DPL,R6
   \   000206   8F83         MOV     DPH,R7
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   F5..         MOV     ?V9,A
    427          
    428                // overwrite with descriptor's endpoint
    429                aff->DstEndPoint = epDesc->endPoint;
   \   00020D   85..82       MOV     DPL,?V0
   \   000210   85..83       MOV     DPH,?V1
   \   000213   E0           MOVX    A,@DPTR
   \   000214   C0E0         PUSH    A
   \   000216   8E82         MOV     DPL,R6
   \   000218   8F83         MOV     DPH,R7
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   D0E0         POP     A
   \   00021E   F0           MOVX    @DPTR,A
    430          
    431                afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    432                                   nwkSeqNum, SecurityUse, timestamp, radius );
   \   00021F                ; Setup parameters for call to function afBuildMSGIncoming
   \   00021F   7426         MOV     A,#0x26
   \   000221   12....       LCALL   ?XSTACK_DISP0_8
   \   000224   E0           MOVX    A,@DPTR
   \   000225   F5..         MOV     ?V12,A
   \   000227   78..         MOV     R0,#?V12
   \   000229   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00022C   78..         MOV     R0,#?V4
   \   00022E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000231   7426         MOV     A,#0x26
   \   000233   12....       LCALL   ?XSTACK_DISP0_8
   \   000236   E0           MOVX    A,@DPTR
   \   000237   F5..         MOV     ?V12,A
   \   000239   78..         MOV     R0,#?V12
   \   00023B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00023E   7425         MOV     A,#0x25
   \   000240   12....       LCALL   ?XSTACK_DISP0_8
   \   000243   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000246   78..         MOV     R0,#?V10
   \   000248   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024B   740D         MOV     A,#0xd
   \   00024D   12....       LCALL   ?XSTACK_DISP0_8
   \   000250   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000253   740E         MOV     A,#0xe
   \   000255   12....       LCALL   ?XSTACK_DISP0_8
   \   000258   E0           MOVX    A,@DPTR
   \   000259   F9           MOV     R1,A
   \   00025A   AC..         MOV     R4,?V0
   \   00025C   AD..         MOV     R5,?V1
   \   00025E   EE           MOV     A,R6
   \   00025F   FA           MOV     R2,A
   \   000260   EF           MOV     A,R7
   \   000261   FB           MOV     R3,A
   \   000262   12....       LCALL   `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   000265   740C         MOV     A,#0xc
   \   000267   12....       LCALL   ?DEALLOC_XSTACK8
    433          
    434                // Restore with original endpoint
    435                aff->DstEndPoint = endpoint;
   \   00026A   E5..         MOV     A,?V9
   \   00026C   C0E0         PUSH    A
   \   00026E   8E82         MOV     DPL,R6
   \   000270   8F83         MOV     DPH,R7
   \   000272   A3           INC     DPTR
   \   000273   A3           INC     DPTR
   \   000274   D0E0         POP     A
   \   000276   F0           MOVX    @DPTR,A
    436              }
    437          
    438              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \                     ??afIncomingData_9:
   \   000277   8E82         MOV     DPL,R6
   \   000279   8F83         MOV     DPH,R7
   \   00027B   E0           MOVX    A,@DPTR
   \   00027C   540C         ANL     A,#0xc
   \   00027E   640C         XRL     A,#0xc
   \   000280   7048         JNZ     ??afIncomingData_11
    439              {
    440          #if !defined ( APS_NO_GROUPS )
    441                // Find the next endpoint for this group
    442                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
   \   000282                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000282   A9..         MOV     R1,?V8
   \   000284   8E82         MOV     DPL,R6
   \   000286   8F83         MOV     DPH,R7
   \   000288   A3           INC     DPTR
   \   000289   A3           INC     DPTR
   \   00028A   A3           INC     DPTR
   \   00028B   A3           INC     DPTR
   \   00028C   E0           MOVX    A,@DPTR
   \   00028D   FA           MOV     R2,A
   \   00028E   A3           INC     DPTR
   \   00028F   E0           MOVX    A,@DPTR
   \   000290   FB           MOV     R3,A
   \   000291   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   000294   E9           MOV     A,R1
   \   000295   F5..         MOV     ?V8,A
    443                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   000297   74FE         MOV     A,#-0x2
   \   000299   65..         XRL     A,?V8
   \   00029B   6071         JZ      ??afIncomingData_1
    444                  return;   // No endpoint found
    445          
    446                epDesc = afFindEndPointDesc( grpEp );
   \   00029D                ; Setup parameters for call to function afFindEndPointDesc
   \   00029D   A9..         MOV     R1,?V8
   \   00029F   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0002A2   8A..         MOV     ?V12,R2
   \   0002A4   8B..         MOV     ?V13,R3
   \   0002A6   85....       MOV     ?V0,?V12
   \   0002A9   85....       MOV     ?V1,?V13
    447                if ( epDesc == NULL )
   \   0002AC   E5..         MOV     A,?V0
   \   0002AE   45..         ORL     A,?V1
   \   0002B0   605C         JZ      ??afIncomingData_1
    448                  return;   // Endpoint descriptor not found
    449          
    450                pList = afFindEndPointDescList( epDesc->endPoint );
   \   0002B2                ; Setup parameters for call to function afFindEndPointDescList
   \   0002B2   85..82       MOV     DPL,?V0
   \   0002B5   85..83       MOV     DPH,?V1
   \   0002B8   E0           MOVX    A,@DPTR
   \   0002B9   F9           MOV     R1,A
   \   0002BA   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0002BD   8A..         MOV     ?V12,R2
   \   0002BF   8B..         MOV     ?V13,R3
   \   0002C1   85....       MOV     ?V2,?V12
   \   0002C4   85....       MOV     ?V3,?V13
   \   0002C7   02....       LJMP    ??afIncomingData_2 & 0xFFFF
    451          #else
    452                return;
    453          #endif
    454              }
    455              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_11:
   \   0002CA   8E82         MOV     DPL,R6
   \   0002CC   8F83         MOV     DPH,R7
   \   0002CE   A3           INC     DPTR
   \   0002CF   A3           INC     DPTR
   \   0002D0   E0           MOVX    A,@DPTR
   \   0002D1   64FF         XRL     A,#0xff
   \   0002D3   7030         JNZ     ??afIncomingData_12
    456              {
    457                pList = pList->nextDesc;
   \   0002D5   85..82       MOV     DPL,?V2
   \   0002D8   85..83       MOV     DPH,?V3
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   F5..         MOV     ?V2,A
   \   0002DE   A3           INC     DPTR
   \   0002DF   E0           MOVX    A,@DPTR
   \   0002E0   F5..         MOV     ?V3,A
    458                if ( pList )
   \   0002E2   E5..         MOV     A,?V2
   \   0002E4   45..         ORL     A,?V3
   \   0002E6   6014         JZ      ??afIncomingData_13
    459                  epDesc = pList->epDesc;
   \   0002E8   85..82       MOV     DPL,?V2
   \   0002EB   85..83       MOV     DPH,?V3
   \   0002EE   A3           INC     DPTR
   \   0002EF   A3           INC     DPTR
   \   0002F0   E0           MOVX    A,@DPTR
   \   0002F1   F8           MOV     R0,A
   \   0002F2   A3           INC     DPTR
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   F9           MOV     R1,A
   \   0002F5   88..         MOV     ?V0,R0
   \   0002F7   89..         MOV     ?V1,R1
   \   0002F9   02....       LJMP    ??afIncomingData_2 & 0xFFFF
    460                else
    461                  epDesc = NULL;
   \                     ??afIncomingData_13:
   \   0002FC   75..00       MOV     ?V0,#0x0
   \   0002FF   75..00       MOV     ?V1,#0x0
   \   000302   02....       LJMP    ??afIncomingData_2 & 0xFFFF
    462              }
    463              else
    464                epDesc = NULL;
   \                     ??afIncomingData_12:
   \   000305   75..00       MOV     ?V0,#0x0
   \   000308   75..00       MOV     ?V1,#0x0
   \   00030B   02....       LJMP    ??afIncomingData_2 & 0xFFFF
    465            }
    466          }
   \                     ??afIncomingData_1:
   \   00030E   7405         MOV     A,#0x5
   \   000310   12....       LCALL   ?DEALLOC_XSTACK8
   \   000313   7F10         MOV     R7,#0x10
   \   000315   02....       LJMP    ?BANKED_LEAVE_XDATA
    467          
    468          /*********************************************************************
    469           * @fn          afBuildMSGIncoming
    470           *
    471           * @brief       Build the message for the app
    472           *
    473           * @param
    474           *
    475           * @return      pointer to next in data buffer
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    478                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    479                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
    480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V0,R2
   \   000018   8B..         MOV     ?V1,R3
   \   00001A   8C..         MOV     ?V14,R4
   \   00001C   8D..         MOV     ?V15,R5
   \   00001E   741F         MOV     A,#0x1f
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V3,A
   \   00002A   7421         MOV     A,#0x21
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V13,A
   \   000032   7422         MOV     A,#0x22
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   78..         MOV     R0,#?V4
   \   000039   12....       LCALL   ?L_MOV_X
   \   00003C   7426         MOV     A,#0x26
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F5..         MOV     ?V11,A
    481            afIncomingMSGPacket_t *MSGpkt;
    482            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
   \   000044   E5..         MOV     A,?V0
   \   000046   2410         ADD     A,#0x10
   \   000048   F582         MOV     DPL,A
   \   00004A   E4           CLR     A
   \   00004B   35..         ADDC    A,?V1
   \   00004D   F583         MOV     DPH,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   2427         ADD     A,#0x27
   \   000052   F5..         MOV     ?V12,A
    483            uint8 *asdu = aff->asdu;
   \   000054   E5..         MOV     A,?V0
   \   000056   240E         ADD     A,#0xe
   \   000058   F582         MOV     DPL,A
   \   00005A   E4           CLR     A
   \   00005B   35..         ADDC    A,?V1
   \   00005D   F583         MOV     DPH,A
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F8           MOV     R0,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   7401         MOV     A,#0x1
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E8           MOV     A,R0
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   E9           MOV     A,R1
   \   00006D   F0           MOVX    @DPTR,A
    484            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \   00006E                ; Setup parameters for call to function osal_msg_allocate
   \   00006E   AA..         MOV     R2,?V12
   \   000070   7B00         MOV     R3,#0x0
   \   000072   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000075   8A..         MOV     ?V8,R2
   \   000077   8B..         MOV     ?V9,R3
   \   000079   AE..         MOV     R6,?V8
   \   00007B   AF..         MOV     R7,?V9
    485          
    486            if ( MSGpkt == NULL )
   \   00007D   EE           MOV     A,R6
   \   00007E   4F           ORL     A,R7
   \   00007F   7003         JNZ     $+5
   \   000081   02....       LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
    487            {
    488              return;
    489            }
    490          
    491            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   741A         MOV     A,#0x1a
   \   00008A   F0           MOVX    @DPTR,A
    492            MSGpkt->groupId = aff->GroupID;
   \   00008B   85..82       MOV     DPL,?V0
   \   00008E   85..83       MOV     DPH,?V1
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F8           MOV     R0,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   E8           MOV     A,R0
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   E9           MOV     A,R1
   \   0000A4   F0           MOVX    @DPTR,A
    493            MSGpkt->clusterId = aff->ClusterID;
   \   0000A5   85..82       MOV     DPL,?V0
   \   0000A8   85..83       MOV     DPH,?V1
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F8           MOV     R0,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F9           MOV     R1,A
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   E8           MOV     A,R0
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E9           MOV     A,R1
   \   0000C2   F0           MOVX    @DPTR,A
    494            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \   0000C3                ; Setup parameters for call to function afCopyAddress
   \   0000C3   741B         MOV     A,#0x1b
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FC           MOV     R4,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   FD           MOV     R5,A
   \   0000CD   EE           MOV     A,R6
   \   0000CE   2406         ADD     A,#0x6
   \   0000D0   FA           MOV     R2,A
   \   0000D1   E4           CLR     A
   \   0000D2   3F           ADDC    A,R7
   \   0000D3   FB           MOV     R3,A
   \   0000D4   12....       LCALL   `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    495            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   0000D7   85..82       MOV     DPL,?V0
   \   0000DA   85..83       MOV     DPH,?V1
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   C0E0         PUSH    A
   \   0000E3   EE           MOV     A,R6
   \   0000E4   240F         ADD     A,#0xf
   \   0000E6   F582         MOV     DPL,A
   \   0000E8   E4           CLR     A
   \   0000E9   3F           ADDC    A,R7
   \   0000EA   F583         MOV     DPH,A
   \   0000EC   D0E0         POP     A
   \   0000EE   F0           MOVX    @DPTR,A
    496            MSGpkt->endPoint = epDesc->endPoint;
   \   0000EF   85..82       MOV     DPL,?V14
   \   0000F2   85..83       MOV     DPH,?V15
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   C0E0         PUSH    A
   \   0000F8   EE           MOV     A,R6
   \   0000F9   2414         ADD     A,#0x14
   \   0000FB   F582         MOV     DPL,A
   \   0000FD   E4           CLR     A
   \   0000FE   3F           ADDC    A,R7
   \   0000FF   F583         MOV     DPH,A
   \   000101   D0E0         POP     A
   \   000103   F0           MOVX    @DPTR,A
    497            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   000104   E5..         MOV     A,?V0
   \   000106   240C         ADD     A,#0xc
   \   000108   F582         MOV     DPL,A
   \   00010A   E4           CLR     A
   \   00010B   35..         ADDC    A,?V1
   \   00010D   F583         MOV     DPH,A
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   C0E0         PUSH    A
   \   000112   EE           MOV     A,R6
   \   000113   2415         ADD     A,#0x15
   \   000115   F582         MOV     DPL,A
   \   000117   E4           CLR     A
   \   000118   3F           ADDC    A,R7
   \   000119   F583         MOV     DPH,A
   \   00011B   D0E0         POP     A
   \   00011D   F0           MOVX    @DPTR,A
    498            MSGpkt->LinkQuality = sig->LinkQuality;
   \   00011E   85..82       MOV     DPL,?V2
   \   000121   85..83       MOV     DPH,?V3
   \   000124   E0           MOVX    A,@DPTR
   \   000125   C0E0         PUSH    A
   \   000127   EE           MOV     A,R6
   \   000128   2416         ADD     A,#0x16
   \   00012A   F582         MOV     DPL,A
   \   00012C   E4           CLR     A
   \   00012D   3F           ADDC    A,R7
   \   00012E   F583         MOV     DPH,A
   \   000130   D0E0         POP     A
   \   000132   F0           MOVX    @DPTR,A
    499            MSGpkt->correlation = sig->correlation;
   \   000133   85..82       MOV     DPL,?V2
   \   000136   85..83       MOV     DPH,?V3
   \   000139   A3           INC     DPTR
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   C0E0         PUSH    A
   \   00013D   EE           MOV     A,R6
   \   00013E   2417         ADD     A,#0x17
   \   000140   F582         MOV     DPL,A
   \   000142   E4           CLR     A
   \   000143   3F           ADDC    A,R7
   \   000144   F583         MOV     DPH,A
   \   000146   D0E0         POP     A
   \   000148   F0           MOVX    @DPTR,A
    500            MSGpkt->rssi = sig->rssi;
   \   000149   85..82       MOV     DPL,?V2
   \   00014C   85..83       MOV     DPH,?V3
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   C0E0         PUSH    A
   \   000154   EE           MOV     A,R6
   \   000155   2418         ADD     A,#0x18
   \   000157   F582         MOV     DPL,A
   \   000159   E4           CLR     A
   \   00015A   3F           ADDC    A,R7
   \   00015B   F583         MOV     DPH,A
   \   00015D   D0E0         POP     A
   \   00015F   F0           MOVX    @DPTR,A
    501            MSGpkt->SecurityUse = SecurityUse;
   \   000160   E5..         MOV     A,?V13
   \   000162   C0E0         PUSH    A
   \   000164   EE           MOV     A,R6
   \   000165   2419         ADD     A,#0x19
   \   000167   F582         MOV     DPL,A
   \   000169   E4           CLR     A
   \   00016A   3F           ADDC    A,R7
   \   00016B   F583         MOV     DPH,A
   \   00016D   D0E0         POP     A
   \   00016F   F0           MOVX    @DPTR,A
    502            MSGpkt->timestamp = timestamp;
   \   000170   EE           MOV     A,R6
   \   000171   241A         ADD     A,#0x1a
   \   000173   F582         MOV     DPL,A
   \   000175   E4           CLR     A
   \   000176   3F           ADDC    A,R7
   \   000177   F583         MOV     DPH,A
   \   000179   78..         MOV     R0,#?V4
   \   00017B   12....       LCALL   ?L_MOV_TO_X
    503            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   00017E   85..82       MOV     DPL,?XSP + 0
   \   000181   85..83       MOV     DPH,?XSP + 1
   \   000184   E0           MOVX    A,@DPTR
   \   000185   C0E0         PUSH    A
   \   000187   EE           MOV     A,R6
   \   000188   241E         ADD     A,#0x1e
   \   00018A   F582         MOV     DPL,A
   \   00018C   E4           CLR     A
   \   00018D   3F           ADDC    A,R7
   \   00018E   F583         MOV     DPH,A
   \   000190   D0E0         POP     A
   \   000192   F0           MOVX    @DPTR,A
    504            MSGpkt->macSrcAddr = aff->macSrcAddr;
   \   000193   E5..         MOV     A,?V0
   \   000195   2415         ADD     A,#0x15
   \   000197   F582         MOV     DPL,A
   \   000199   E4           CLR     A
   \   00019A   35..         ADDC    A,?V1
   \   00019C   F583         MOV     DPH,A
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   F8           MOV     R0,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   F9           MOV     R1,A
   \   0001A3   EE           MOV     A,R6
   \   0001A4   2424         ADD     A,#0x24
   \   0001A6   F582         MOV     DPL,A
   \   0001A8   E4           CLR     A
   \   0001A9   3F           ADDC    A,R7
   \   0001AA   F583         MOV     DPH,A
   \   0001AC   E8           MOV     A,R0
   \   0001AD   F0           MOVX    @DPTR,A
   \   0001AE   A3           INC     DPTR
   \   0001AF   E9           MOV     A,R1
   \   0001B0   F0           MOVX    @DPTR,A
    505            MSGpkt->macDestAddr = aff->macDestAddr;
   \   0001B1   85..82       MOV     DPL,?V0
   \   0001B4   85..83       MOV     DPH,?V1
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   A3           INC     DPTR
   \   0001BF   A3           INC     DPTR
   \   0001C0   A3           INC     DPTR
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   F8           MOV     R0,A
   \   0001C3   A3           INC     DPTR
   \   0001C4   E0           MOVX    A,@DPTR
   \   0001C5   F9           MOV     R1,A
   \   0001C6   EE           MOV     A,R6
   \   0001C7   2412         ADD     A,#0x12
   \   0001C9   F582         MOV     DPL,A
   \   0001CB   E4           CLR     A
   \   0001CC   3F           ADDC    A,R7
   \   0001CD   F583         MOV     DPH,A
   \   0001CF   E8           MOV     A,R0
   \   0001D0   F0           MOVX    @DPTR,A
   \   0001D1   A3           INC     DPTR
   \   0001D2   E9           MOV     A,R1
   \   0001D3   F0           MOVX    @DPTR,A
    506            MSGpkt->srcAddr.panId = SrcPanId;
   \   0001D4   741D         MOV     A,#0x1d
   \   0001D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   F8           MOV     R0,A
   \   0001DB   A3           INC     DPTR
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   F9           MOV     R1,A
   \   0001DE   EE           MOV     A,R6
   \   0001DF   2410         ADD     A,#0x10
   \   0001E1   F582         MOV     DPL,A
   \   0001E3   E4           CLR     A
   \   0001E4   3F           ADDC    A,R7
   \   0001E5   F583         MOV     DPH,A
   \   0001E7   E8           MOV     A,R0
   \   0001E8   F0           MOVX    @DPTR,A
   \   0001E9   A3           INC     DPTR
   \   0001EA   E9           MOV     A,R1
   \   0001EB   F0           MOVX    @DPTR,A
    507            MSGpkt->cmd.TransSeqNumber = 0;
   \   0001EC   EE           MOV     A,R6
   \   0001ED   241F         ADD     A,#0x1f
   \   0001EF   F582         MOV     DPL,A
   \   0001F1   E4           CLR     A
   \   0001F2   3F           ADDC    A,R7
   \   0001F3   F583         MOV     DPH,A
   \   0001F5   7400         MOV     A,#0x0
   \   0001F7   F0           MOVX    @DPTR,A
    508            MSGpkt->cmd.DataLength = aff->asduLength;
   \   0001F8   E5..         MOV     A,?V0
   \   0001FA   2410         ADD     A,#0x10
   \   0001FC   F582         MOV     DPL,A
   \   0001FE   E4           CLR     A
   \   0001FF   35..         ADDC    A,?V1
   \   000201   F583         MOV     DPH,A
   \   000203   E0           MOVX    A,@DPTR
   \   000204   F8           MOV     R0,A
   \   000205   7900         MOV     R1,#0x0
   \   000207   EE           MOV     A,R6
   \   000208   2420         ADD     A,#0x20
   \   00020A   F582         MOV     DPL,A
   \   00020C   E4           CLR     A
   \   00020D   3F           ADDC    A,R7
   \   00020E   F583         MOV     DPH,A
   \   000210   E8           MOV     A,R0
   \   000211   F0           MOVX    @DPTR,A
   \   000212   A3           INC     DPTR
   \   000213   E9           MOV     A,R1
   \   000214   F0           MOVX    @DPTR,A
    509            MSGpkt->radius = radius;
   \   000215   E5..         MOV     A,?V11
   \   000217   C0E0         PUSH    A
   \   000219   EE           MOV     A,R6
   \   00021A   2426         ADD     A,#0x26
   \   00021C   F582         MOV     DPL,A
   \   00021E   E4           CLR     A
   \   00021F   3F           ADDC    A,R7
   \   000220   F583         MOV     DPH,A
   \   000222   D0E0         POP     A
   \   000224   F0           MOVX    @DPTR,A
    510          
    511            if ( MSGpkt->cmd.DataLength )
   \   000225   EE           MOV     A,R6
   \   000226   2420         ADD     A,#0x20
   \   000228   F582         MOV     DPL,A
   \   00022A   E4           CLR     A
   \   00022B   3F           ADDC    A,R7
   \   00022C   F583         MOV     DPH,A
   \   00022E   E0           MOVX    A,@DPTR
   \   00022F   F8           MOV     R0,A
   \   000230   A3           INC     DPTR
   \   000231   E0           MOVX    A,@DPTR
   \   000232   F9           MOV     R1,A
   \   000233   E8           MOV     A,R0
   \   000234   49           ORL     A,R1
   \   000235   604F         JZ      ??afBuildMSGIncoming_1
    512            {
    513              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   000237   EE           MOV     A,R6
   \   000238   2427         ADD     A,#0x27
   \   00023A   F8           MOV     R0,A
   \   00023B   E4           CLR     A
   \   00023C   3F           ADDC    A,R7
   \   00023D   F9           MOV     R1,A
   \   00023E   EE           MOV     A,R6
   \   00023F   2422         ADD     A,#0x22
   \   000241   F582         MOV     DPL,A
   \   000243   E4           CLR     A
   \   000244   3F           ADDC    A,R7
   \   000245   F583         MOV     DPH,A
   \   000247   E8           MOV     A,R0
   \   000248   F0           MOVX    @DPTR,A
   \   000249   A3           INC     DPTR
   \   00024A   E9           MOV     A,R1
   \   00024B   F0           MOVX    @DPTR,A
    514              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   00024C                ; Setup parameters for call to function osal_memcpy
   \   00024C   7401         MOV     A,#0x1
   \   00024E   12....       LCALL   ?XSTACK_DISP0_8
   \   000251   E0           MOVX    A,@DPTR
   \   000252   F5..         MOV     ?V8,A
   \   000254   A3           INC     DPTR
   \   000255   E0           MOVX    A,@DPTR
   \   000256   F5..         MOV     ?V9,A
   \   000258   75..00       MOV     ?V10,#0x0
   \   00025B   78..         MOV     R0,#?V8
   \   00025D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000260   EE           MOV     A,R6
   \   000261   2420         ADD     A,#0x20
   \   000263   F582         MOV     DPL,A
   \   000265   E4           CLR     A
   \   000266   3F           ADDC    A,R7
   \   000267   F583         MOV     DPH,A
   \   000269   E0           MOVX    A,@DPTR
   \   00026A   FC           MOV     R4,A
   \   00026B   A3           INC     DPTR
   \   00026C   E0           MOVX    A,@DPTR
   \   00026D   FD           MOV     R5,A
   \   00026E   EE           MOV     A,R6
   \   00026F   2422         ADD     A,#0x22
   \   000271   F582         MOV     DPL,A
   \   000273   E4           CLR     A
   \   000274   3F           ADDC    A,R7
   \   000275   F583         MOV     DPH,A
   \   000277   E0           MOVX    A,@DPTR
   \   000278   FA           MOV     R2,A
   \   000279   A3           INC     DPTR
   \   00027A   E0           MOVX    A,@DPTR
   \   00027B   FB           MOV     R3,A
   \   00027C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00027F   7403         MOV     A,#0x3
   \   000281   12....       LCALL   ?DEALLOC_XSTACK8
   \   000284   8010         SJMP    ??afBuildMSGIncoming_2
    515            }
    516            else
    517            {
    518              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   000286   EE           MOV     A,R6
   \   000287   2422         ADD     A,#0x22
   \   000289   F582         MOV     DPL,A
   \   00028B   E4           CLR     A
   \   00028C   3F           ADDC    A,R7
   \   00028D   F583         MOV     DPH,A
   \   00028F   7400         MOV     A,#0x0
   \   000291   F0           MOVX    @DPTR,A
   \   000292   A3           INC     DPTR
   \   000293   7400         MOV     A,#0x0
   \   000295   F0           MOVX    @DPTR,A
    519            }
    520          
    521          #if defined ( MT_AF_CB_FUNC )
    522            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    523            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    524            {
    525              MT_AfIncomingMsg( (void *)MSGpkt );
    526              // Release the memory.
    527              osal_msg_deallocate( (void *)MSGpkt );
    528            }
    529            else
    530          #endif
    531            {
    532              // Send message through task message.
    533              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   000296                ; Setup parameters for call to function osal_msg_send
   \   000296   EE           MOV     A,R6
   \   000297   FA           MOV     R2,A
   \   000298   EF           MOV     A,R7
   \   000299   FB           MOV     R3,A
   \   00029A   85..82       MOV     DPL,?V14
   \   00029D   85..83       MOV     DPH,?V15
   \   0002A0   A3           INC     DPTR
   \   0002A1   E0           MOVX    A,@DPTR
   \   0002A2   F8           MOV     R0,A
   \   0002A3   A3           INC     DPTR
   \   0002A4   E0           MOVX    A,@DPTR
   \   0002A5   F583         MOV     DPH,A
   \   0002A7   8882         MOV     DPL,R0
   \   0002A9   E0           MOVX    A,@DPTR
   \   0002AA   F9           MOV     R1,A
   \   0002AB   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0002AE   E9           MOV     A,R1
    534            }
    535          }
   \                     ??afBuildMSGIncoming_0:
   \   0002AF   7403         MOV     A,#0x3
   \   0002B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002B4   7F10         MOV     R7,#0x10
   \   0002B6   02....       LJMP    ?BANKED_LEAVE_XDATA
    536          
    537          /*********************************************************************
    538           * @fn      AF_DataRequest
    539           *
    540           * @brief   Common functionality for invoking APSDE_DataReq() for both
    541           *          SendMulti and MSG-Send.
    542           *
    543           * input parameters
    544           *
    545           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    546           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    547           * @param   cID - A valid cluster ID as specified by the Profile.
    548           * @param   len - Number of bytes of data pointed to by next param.
    549           * @param  *buf - A pointer to the data bytes to send.
    550           * @param  *transID - A pointer to a byte which can be modified and which will
    551           *                    be used as the transaction sequence number of the msg.
    552           * @param   options - Valid bit mask of Tx options.
    553           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    554           *
    555           * output parameters
    556           *
    557           * @param  *transID - Incremented by one if the return value is success.
    558           *
    559           * @return  afStatus_t - See previous definition of afStatus_... types.
    560           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    561          uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    563                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    564                                     uint8 options, uint8 radius )
    565          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   \   000012   89..         MOV     ?V1,R1
   \   000014   743A         MOV     A,#0x3a
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V14,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V15,A
   \   000020   743E         MOV     A,#0x3e
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V8,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V9,A
   \   00002C   7440         MOV     A,#0x40
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V12,A
    566            pDescCB pfnDescCB;
    567            ZStatus_t stat;
    568            APSDE_DataReq_t req;
    569            afDataReqMTU_t mtu;
    570            epList_t *pList;
    571          
    572            // Verify source end point
    573            if ( srcEP == NULL )
   \   000034   E5..         MOV     A,?V2
   \   000036   45..         ORL     A,?V3
   \   000038   7005         JNZ     ??AF_DataRequest_0
    574            {
    575              return afStatus_INVALID_PARAMETER;
   \   00003A   7902         MOV     R1,#0x2
   \   00003C   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    576            }
    577          
    578          #if !defined( REFLECTOR )
    579            if ( dstAddr->addrMode == afAddrNotPresent )
    580            {
    581              return afStatus_INVALID_PARAMETER;
    582            }
    583          #endif
    584          
    585            // Check if route is available before sending data
    586            if ( options & AF_LIMIT_CONCENTRATOR  )
   \                     ??AF_DataRequest_0:
   \   00003F   E5..         MOV     A,?V1
   \   000041   A2E3         MOV     C,0xE0 /* A   */.3
   \   000043   5046         JNC     ??AF_DataRequest_2
    587            {
    588              if ( dstAddr->addrMode != afAddr16Bit )
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   6402         XRL     A,#0x2
   \   000054   6005         JZ      ??AF_DataRequest_3
    589              {
    590                return ( afStatus_INVALID_PARAMETER );
   \   000056   7902         MOV     R1,#0x2
   \   000058   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    591              }
    592          
    593              // First, make sure the destination is not its self, then check for an existing route.
    594              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    595                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \                     ??AF_DataRequest_3:
   \   00005B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00005B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00005E   8A..         MOV     ?V6,R2
   \   000060   8B..         MOV     ?V7,R3
   \   000062   A8..         MOV     R0,?V6
   \   000064   A9..         MOV     R1,?V7
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   68           XRL     A,R0
   \   00006C   7003         JNZ     ??AF_DataRequest_4
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   69           XRL     A,R1
   \                     ??AF_DataRequest_4:
   \   000071   6018         JZ      ??AF_DataRequest_2
   \   000073                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000073   7C03         MOV     R4,#0x3
   \   000075   7901         MOV     R1,#0x1
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   FA           MOV     R2,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   FB           MOV     R3,A
   \   000080   12....       LCALL   `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   000083   E9           MOV     A,R1
   \   000084   6005         JZ      ??AF_DataRequest_2
    596              {
    597                // A valid route to a concentrator wasn't found
    598                return ( afStatus_NO_ROUTE );
   \   000086   79CD         MOV     R1,#-0x33
   \   000088   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    599              }
    600            }
    601          
    602            // Validate broadcasting
    603            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    604                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_2:
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   6402         XRL     A,#0x2
   \   00009A   6011         JZ      ??AF_DataRequest_5
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   640F         XRL     A,#0xf
   \   0000AB   7036         JNZ     ??AF_DataRequest_6
    605            {
    606              // Check for valid broadcast values
    607              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_5:
   \   0000AD                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   FA           MOV     R2,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   0000B9   E9           MOV     A,R1
   \   0000BA   6011         JZ      ??AF_DataRequest_7
    608              {
    609                // Force mode to broadcast
    610                dstAddr->addrMode = afAddrBroadcast;
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   740F         MOV     A,#0xf
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   804C         SJMP    ??AF_DataRequest_8
    611              }
    612              else
    613              {
    614                // Address is not a valid broadcast type
    615                if ( dstAddr->addrMode == afAddrBroadcast )
   \                     ??AF_DataRequest_7:
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   640F         XRL     A,#0xf
   \   0000DC   703B         JNZ     ??AF_DataRequest_8
    616                {
    617                  return afStatus_INVALID_PARAMETER;
   \   0000DE   7902         MOV     R1,#0x2
   \   0000E0   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    618                }
    619              }
    620            }
    621            else if ( dstAddr->addrMode != afAddr64Bit &&
    622                      dstAddr->addrMode != afAddrGroup &&
    623                      dstAddr->addrMode != afAddrNotPresent )
   \                     ??AF_DataRequest_6:
   \   0000E3   8E82         MOV     DPL,R6
   \   0000E5   8F83         MOV     DPH,R7
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   6403         XRL     A,#0x3
   \   0000F2   6025         JZ      ??AF_DataRequest_8
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   6401         XRL     A,#0x1
   \   000103   6014         JZ      ??AF_DataRequest_8
   \   000105   8E82         MOV     DPL,R6
   \   000107   8F83         MOV     DPH,R7
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   6005         JZ      ??AF_DataRequest_8
    624            {
    625              return afStatus_INVALID_PARAMETER;
   \   000114   7902         MOV     R1,#0x2
   \   000116   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    626            }
    627          
    628            // Set destination address
    629            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_8:
   \   000119   8E82         MOV     DPL,R6
   \   00011B   8F83         MOV     DPH,R7
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \   000126   C0E0         PUSH    A
   \   000128   740C         MOV     A,#0xc
   \   00012A   12....       LCALL   ?XSTACK_DISP0_8
   \   00012D   D0E0         POP     A
   \   00012F   F0           MOVX    @DPTR,A
    630            if ( dstAddr->addrMode == afAddr64Bit )
   \   000130   8E82         MOV     DPL,R6
   \   000132   8F83         MOV     DPH,R7
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   6403         XRL     A,#0x3
   \   00013F   700E         JNZ     ??AF_DataRequest_9
    631            {
    632              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   000141                ; Setup parameters for call to function sAddrExtCpy
   \   000141   EE           MOV     A,R6
   \   000142   FC           MOV     R4,A
   \   000143   EF           MOV     A,R7
   \   000144   FD           MOV     R5,A
   \   000145   7404         MOV     A,#0x4
   \   000147   12....       LCALL   ?XSTACK_DISP101_8
   \   00014A   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00014D   8013         SJMP    ??AF_DataRequest_10
    633            }
    634            else
    635            {
    636              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_9:
   \   00014F   8E82         MOV     DPL,R6
   \   000151   8F83         MOV     DPH,R7
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F8           MOV     R0,A
   \   000155   A3           INC     DPTR
   \   000156   E0           MOVX    A,@DPTR
   \   000157   F9           MOV     R1,A
   \   000158   7404         MOV     A,#0x4
   \   00015A   12....       LCALL   ?XSTACK_DISP0_8
   \   00015D   E8           MOV     A,R0
   \   00015E   F0           MOVX    @DPTR,A
   \   00015F   A3           INC     DPTR
   \   000160   E9           MOV     A,R1
   \   000161   F0           MOVX    @DPTR,A
    637            }
    638          
    639            // This option is to use Wildcard ProfileID in outgoing packets
    640            if ( options & AF_WILDCARD_PROFILEID )
   \                     ??AF_DataRequest_10:
   \   000162   E5..         MOV     A,?V1
   \   000164   A2E1         MOV     C,0xE0 /* A   */.1
   \   000166   500F         JNC     ??AF_DataRequest_11
    641            {
    642              req.profileID = ZDO_WILDCARD_PROFILE_ID;
   \   000168   7413         MOV     A,#0x13
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   74FF         MOV     A,#-0x1
   \   00016F   F0           MOVX    @DPTR,A
   \   000170   A3           INC     DPTR
   \   000171   74FF         MOV     A,#-0x1
   \   000173   F0           MOVX    @DPTR,A
   \   000174   02....       LJMP    ??AF_DataRequest_12 & 0xFFFF
    643            }
    644            else
    645            {
    646              req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_11:
   \   000177   7413         MOV     A,#0x13
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   7400         MOV     A,#0x0
   \   00017E   F0           MOVX    @DPTR,A
   \   00017F   A3           INC     DPTR
   \   000180   7400         MOV     A,#0x0
   \   000182   F0           MOVX    @DPTR,A
    647          
    648              if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   000183                ; Setup parameters for call to function afGetDescCB
   \   000183   AA..         MOV     R2,?V2
   \   000185   AB..         MOV     R3,?V3
   \   000187   12....       LCALL   `??afGetDescCB::?relay`; Banked call to: afGetDescCB
   \   00018A   8A..         MOV     ?V6,R2
   \   00018C   8B..         MOV     ?V7,R3
   \   00018E   A8..         MOV     R0,?V6
   \   000190   A9..         MOV     R1,?V7
   \   000192   7402         MOV     A,#0x2
   \   000194   12....       LCALL   ?XSTACK_DISP0_8
   \   000197   E8           MOV     A,R0
   \   000198   F0           MOVX    @DPTR,A
   \   000199   A3           INC     DPTR
   \   00019A   E9           MOV     A,R1
   \   00019B   F0           MOVX    @DPTR,A
   \   00019C   E8           MOV     A,R0
   \   00019D   49           ORL     A,R1
   \   00019E   6048         JZ      ??AF_DataRequest_13
    649              {
    650                uint16 *pID = (uint16 *)(pfnDescCB(
    651                                             AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   0001A0                ; Setup parameters for indirect call
   \   0001A0   85..82       MOV     DPL,?V2
   \   0001A3   85..83       MOV     DPH,?V3
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   FA           MOV     R2,A
   \   0001A8   7902         MOV     R1,#0x2
   \   0001AA   7402         MOV     A,#0x2
   \   0001AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   F8           MOV     R0,A
   \   0001B1   A3           INC     DPTR
   \   0001B2   E0           MOVX    A,@DPTR
   \   0001B3   F583         MOV     DPH,A
   \   0001B5   8882         MOV     DPL,R0
   \   0001B7   12....       LCALL   ?CALL_IND
   \   0001BA   8A..         MOV     ?V10,R2
   \   0001BC   8B..         MOV     ?V11,R3
   \   0001BE   85....       MOV     ?V6,?V10
   \   0001C1   85....       MOV     ?V7,?V11
    652                if ( pID )
   \   0001C4   E5..         MOV     A,?V6
   \   0001C6   45..         ORL     A,?V7
   \   0001C8   6051         JZ      ??AF_DataRequest_12
    653                {
    654                  req.profileID = *pID;
   \   0001CA   85..82       MOV     DPL,?V6
   \   0001CD   85..83       MOV     DPH,?V7
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   F8           MOV     R0,A
   \   0001D2   A3           INC     DPTR
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   F9           MOV     R1,A
   \   0001D5   7413         MOV     A,#0x13
   \   0001D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DA   E8           MOV     A,R0
   \   0001DB   F0           MOVX    @DPTR,A
   \   0001DC   A3           INC     DPTR
   \   0001DD   E9           MOV     A,R1
   \   0001DE   F0           MOVX    @DPTR,A
    655                  osal_mem_free( pID );
   \   0001DF                ; Setup parameters for call to function osal_mem_free
   \   0001DF   AA..         MOV     R2,?V6
   \   0001E1   AB..         MOV     R3,?V7
   \   0001E3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001E6   8033         SJMP    ??AF_DataRequest_12
    656                }
    657              }
    658              else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_13:
   \   0001E8   85..82       MOV     DPL,?V2
   \   0001EB   85..83       MOV     DPH,?V3
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   F8           MOV     R0,A
   \   0001F3   A3           INC     DPTR
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   F9           MOV     R1,A
   \   0001F6   E8           MOV     A,R0
   \   0001F7   49           ORL     A,R1
   \   0001F8   6021         JZ      ??AF_DataRequest_12
    659              {
    660                req.profileID = srcEP->simpleDesc->AppProfId;
   \   0001FA   85..82       MOV     DPL,?V2
   \   0001FD   85..83       MOV     DPH,?V3
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   E0           MOVX    A,@DPTR
   \   000204   F8           MOV     R0,A
   \   000205   A3           INC     DPTR
   \   000206   E0           MOVX    A,@DPTR
   \   000207   F583         MOV     DPH,A
   \   000209   8882         MOV     DPL,R0
   \   00020B   A3           INC     DPTR
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F8           MOV     R0,A
   \   00020E   A3           INC     DPTR
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   F9           MOV     R1,A
   \   000211   7413         MOV     A,#0x13
   \   000213   12....       LCALL   ?XSTACK_DISP0_8
   \   000216   E8           MOV     A,R0
   \   000217   F0           MOVX    @DPTR,A
   \   000218   A3           INC     DPTR
   \   000219   E9           MOV     A,R1
   \   00021A   F0           MOVX    @DPTR,A
    661              }
    662            }
    663          
    664            req.txOptions = 0;
   \                     ??AF_DataRequest_12:
   \   00021B   7419         MOV     A,#0x19
   \   00021D   12....       LCALL   ?XSTACK_DISP0_8
   \   000220   7400         MOV     A,#0x0
   \   000222   F0           MOVX    @DPTR,A
   \   000223   A3           INC     DPTR
   \   000224   7400         MOV     A,#0x0
   \   000226   F0           MOVX    @DPTR,A
    665          
    666            if ( ( options & AF_ACK_REQUEST              ) &&
    667                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    668                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   000227   E5..         MOV     A,?V1
   \   000229   A2E4         MOV     C,0xE0 /* A   */.4
   \   00022B   5022         JNC     ??AF_DataRequest_14
   \   00022D   740C         MOV     A,#0xc
   \   00022F   12....       LCALL   ?XSTACK_DISP0_8
   \   000232   E0           MOVX    A,@DPTR
   \   000233   640F         XRL     A,#0xf
   \   000235   6018         JZ      ??AF_DataRequest_14
   \   000237   740C         MOV     A,#0xc
   \   000239   12....       LCALL   ?XSTACK_DISP0_8
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   6401         XRL     A,#0x1
   \   00023F   600E         JZ      ??AF_DataRequest_14
    669            {
    670              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   000241   7419         MOV     A,#0x19
   \   000243   12....       LCALL   ?XSTACK_DISP0_8
   \   000246   E0           MOVX    A,@DPTR
   \   000247   4404         ORL     A,#0x4
   \   000249   F0           MOVX    @DPTR,A
   \   00024A   A3           INC     DPTR
   \   00024B   E0           MOVX    A,@DPTR
   \   00024C   4400         ORL     A,#0x0
   \   00024E   F0           MOVX    @DPTR,A
    671            }
    672          
    673            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_14:
   \   00024F   E5..         MOV     A,?V1
   \   000251   A2E7         MOV     C,0xE0 /* A   */.7
   \   000253   500E         JNC     ??AF_DataRequest_15
    674            {
    675              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000255   7419         MOV     A,#0x19
   \   000257   12....       LCALL   ?XSTACK_DISP0_8
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   4410         ORL     A,#0x10
   \   00025D   F0           MOVX    @DPTR,A
   \   00025E   A3           INC     DPTR
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   4400         ORL     A,#0x0
   \   000262   F0           MOVX    @DPTR,A
    676            }
    677          
    678            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_15:
   \   000263   E5..         MOV     A,?V1
   \   000265   A2E6         MOV     C,0xE0 /* A   */.6
   \   000267   5018         JNC     ??AF_DataRequest_16
    679            {
    680              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   000269   7419         MOV     A,#0x19
   \   00026B   12....       LCALL   ?XSTACK_DISP0_8
   \   00026E   E0           MOVX    A,@DPTR
   \   00026F   4401         ORL     A,#0x1
   \   000271   F0           MOVX    @DPTR,A
   \   000272   A3           INC     DPTR
   \   000273   E0           MOVX    A,@DPTR
   \   000274   4400         ORL     A,#0x0
   \   000276   F0           MOVX    @DPTR,A
    681              mtu.aps.secure = TRUE;
   \   000277   7401         MOV     A,#0x1
   \   000279   12....       LCALL   ?XSTACK_DISP0_8
   \   00027C   7401         MOV     A,#0x1
   \   00027E   F0           MOVX    @DPTR,A
   \   00027F   8008         SJMP    ??AF_DataRequest_17
    682            }
    683            else
    684            {
    685              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_16:
   \   000281   7401         MOV     A,#0x1
   \   000283   12....       LCALL   ?XSTACK_DISP0_8
   \   000286   7400         MOV     A,#0x0
   \   000288   F0           MOVX    @DPTR,A
    686            }
    687          
    688            if ( options & AF_PREPROCESS )
   \                     ??AF_DataRequest_17:
   \   000289   E5..         MOV     A,?V1
   \   00028B   A2E2         MOV     C,0xE0 /* A   */.2
   \   00028D   500E         JNC     ??AF_DataRequest_18
    689            {
    690              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   00028F   7419         MOV     A,#0x19
   \   000291   12....       LCALL   ?XSTACK_DISP0_8
   \   000294   E0           MOVX    A,@DPTR
   \   000295   4440         ORL     A,#0x40
   \   000297   F0           MOVX    @DPTR,A
   \   000298   A3           INC     DPTR
   \   000299   E0           MOVX    A,@DPTR
   \   00029A   4400         ORL     A,#0x0
   \   00029C   F0           MOVX    @DPTR,A
    691            }
    692          
    693            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_18:
   \   00029D   85..82       MOV     DPL,?XSP + 0
   \   0002A0   85..83       MOV     DPH,?XSP + 1
   \   0002A3   7400         MOV     A,#0x0
   \   0002A5   F0           MOVX    @DPTR,A
    694          
    695            if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
   \   0002A6   E5..         MOV     A,?V1
   \   0002A8   A2E5         MOV     C,0xE0 /* A   */.5
   \   0002AA   500A         JNC     ??AF_DataRequest_19
    696            {
    697              req.discoverRoute = DISC_ROUTE_INITIATE;
   \   0002AC   741C         MOV     A,#0x1c
   \   0002AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B1   7404         MOV     A,#0x4
   \   0002B3   F0           MOVX    @DPTR,A
   \   0002B4   800E         SJMP    ??AF_DataRequest_20
    698            }
    699            else
    700            {
    701              req.discoverRoute = AF_DataRequestDiscoverRoute;
   \                     ??AF_DataRequest_19:
   \   0002B6   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   0002B9   E0           MOVX    A,@DPTR
   \   0002BA   C0E0         PUSH    A
   \   0002BC   741C         MOV     A,#0x1c
   \   0002BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C1   D0E0         POP     A
   \   0002C3   F0           MOVX    @DPTR,A
    702            }
    703          
    704            req.transID       = *transID;
   \                     ??AF_DataRequest_20:
   \   0002C4   85..82       MOV     DPL,?V8
   \   0002C7   85..83       MOV     DPH,?V9
   \   0002CA   E0           MOVX    A,@DPTR
   \   0002CB   C0E0         PUSH    A
   \   0002CD   741B         MOV     A,#0x1b
   \   0002CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D2   D0E0         POP     A
   \   0002D4   F0           MOVX    @DPTR,A
    705            req.srcEP         = srcEP->endPoint;
   \   0002D5   85..82       MOV     DPL,?V2
   \   0002D8   85..83       MOV     DPH,?V3
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   C0E0         PUSH    A
   \   0002DE   740D         MOV     A,#0xd
   \   0002E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E3   D0E0         POP     A
   \   0002E5   F0           MOVX    @DPTR,A
    706            req.dstEP         = dstAddr->endPoint;
   \   0002E6   8E82         MOV     DPL,R6
   \   0002E8   8F83         MOV     DPH,R7
   \   0002EA   A3           INC     DPTR
   \   0002EB   A3           INC     DPTR
   \   0002EC   A3           INC     DPTR
   \   0002ED   A3           INC     DPTR
   \   0002EE   A3           INC     DPTR
   \   0002EF   A3           INC     DPTR
   \   0002F0   A3           INC     DPTR
   \   0002F1   A3           INC     DPTR
   \   0002F2   A3           INC     DPTR
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   C0E0         PUSH    A
   \   0002F6   740E         MOV     A,#0xe
   \   0002F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FB   D0E0         POP     A
   \   0002FD   F0           MOVX    @DPTR,A
    707            req.clusterID     = cID;
   \   0002FE   7438         MOV     A,#0x38
   \   000300   12....       LCALL   ?XSTACK_DISP0_8
   \   000303   E0           MOVX    A,@DPTR
   \   000304   F8           MOV     R0,A
   \   000305   A3           INC     DPTR
   \   000306   E0           MOVX    A,@DPTR
   \   000307   F9           MOV     R1,A
   \   000308   7411         MOV     A,#0x11
   \   00030A   12....       LCALL   ?XSTACK_DISP0_8
   \   00030D   E8           MOV     A,R0
   \   00030E   F0           MOVX    @DPTR,A
   \   00030F   A3           INC     DPTR
   \   000310   E9           MOV     A,R1
   \   000311   F0           MOVX    @DPTR,A
    708            req.asduLen       = len;
   \   000312   7415         MOV     A,#0x15
   \   000314   12....       LCALL   ?XSTACK_DISP0_8
   \   000317   E5..         MOV     A,?V14
   \   000319   F0           MOVX    @DPTR,A
   \   00031A   A3           INC     DPTR
   \   00031B   E5..         MOV     A,?V15
   \   00031D   F0           MOVX    @DPTR,A
    709            req.asdu          = buf;
   \   00031E   743C         MOV     A,#0x3c
   \   000320   12....       LCALL   ?XSTACK_DISP0_8
   \   000323   E0           MOVX    A,@DPTR
   \   000324   F8           MOV     R0,A
   \   000325   A3           INC     DPTR
   \   000326   E0           MOVX    A,@DPTR
   \   000327   F9           MOV     R1,A
   \   000328   7417         MOV     A,#0x17
   \   00032A   12....       LCALL   ?XSTACK_DISP0_8
   \   00032D   E8           MOV     A,R0
   \   00032E   F0           MOVX    @DPTR,A
   \   00032F   A3           INC     DPTR
   \   000330   E9           MOV     A,R1
   \   000331   F0           MOVX    @DPTR,A
    710            req.radiusCounter = radius;
   \   000332   E5..         MOV     A,?V12
   \   000334   C0E0         PUSH    A
   \   000336   741D         MOV     A,#0x1d
   \   000338   12....       LCALL   ?XSTACK_DISP0_8
   \   00033B   D0E0         POP     A
   \   00033D   F0           MOVX    @DPTR,A
    711          #if defined ( INTER_PAN )
    712            req.dstPanId      = dstAddr->panId;
    713          #endif // INTER_PAN
    714          
    715            // Look if there is a Callback function registered for this endpoint
    716            // The callback is used to control the AF Transaction ID used when sending messages
    717            pList = afFindEndPointDescList( srcEP->endPoint );
   \   00033E                ; Setup parameters for call to function afFindEndPointDescList
   \   00033E   85..82       MOV     DPL,?V2
   \   000341   85..83       MOV     DPH,?V3
   \   000344   E0           MOVX    A,@DPTR
   \   000345   F9           MOV     R1,A
   \   000346   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000349   8A..         MOV     ?V6,R2
   \   00034B   8B..         MOV     ?V7,R3
   \   00034D   85....       MOV     ?V4,?V6
   \   000350   85....       MOV     ?V5,?V7
    718          
    719            if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
   \   000353   E5..         MOV     A,?V4
   \   000355   45..         ORL     A,?V5
   \   000357   6037         JZ      ??AF_DataRequest_21
   \   000359   85..82       MOV     DPL,?V4
   \   00035C   85..83       MOV     DPH,?V5
   \   00035F   A3           INC     DPTR
   \   000360   A3           INC     DPTR
   \   000361   A3           INC     DPTR
   \   000362   A3           INC     DPTR
   \   000363   A3           INC     DPTR
   \   000364   A3           INC     DPTR
   \   000365   A3           INC     DPTR
   \   000366   A3           INC     DPTR
   \   000367   A3           INC     DPTR
   \   000368   E0           MOVX    A,@DPTR
   \   000369   F8           MOV     R0,A
   \   00036A   A3           INC     DPTR
   \   00036B   E0           MOVX    A,@DPTR
   \   00036C   F9           MOV     R1,A
   \   00036D   E8           MOV     A,R0
   \   00036E   49           ORL     A,R1
   \   00036F   601F         JZ      ??AF_DataRequest_21
    720            {
    721              pList->pfnApplCB( &req );
   \   000371                ; Setup parameters for indirect call
   \   000371   7404         MOV     A,#0x4
   \   000373   12....       LCALL   ?XSTACK_DISP101_8
   \   000376   85..82       MOV     DPL,?V4
   \   000379   85..83       MOV     DPH,?V5
   \   00037C   A3           INC     DPTR
   \   00037D   A3           INC     DPTR
   \   00037E   A3           INC     DPTR
   \   00037F   A3           INC     DPTR
   \   000380   A3           INC     DPTR
   \   000381   A3           INC     DPTR
   \   000382   A3           INC     DPTR
   \   000383   A3           INC     DPTR
   \   000384   A3           INC     DPTR
   \   000385   E0           MOVX    A,@DPTR
   \   000386   F8           MOV     R0,A
   \   000387   A3           INC     DPTR
   \   000388   E0           MOVX    A,@DPTR
   \   000389   F583         MOV     DPH,A
   \   00038B   8882         MOV     DPL,R0
   \   00038D   12....       LCALL   ?CALL_IND
    722            }
    723          
    724          #if defined ( INTER_PAN )
    725            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    726            {
    727              if ( len > INTERP_DataReqMTU() )
    728              {
    729                stat = afStatus_INVALID_PARAMETER;
    730              }
    731              else
    732              {
    733                stat = INTERP_DataReq( &req );
    734              }
    735            }
    736            else
    737          #endif // INTER_PAN
    738            {
    739              if (len > afDataReqMTU( &mtu ) )
   \                     ??AF_DataRequest_21:
   \   000390                ; Setup parameters for call to function afDataReqMTU
   \   000390   AA..         MOV     R2,?XSP + 0
   \   000392   AB..         MOV     R3,?XSP + 1
   \   000394   12....       LCALL   `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   000397   E9           MOV     A,R1
   \   000398   F8           MOV     R0,A
   \   000399   7900         MOV     R1,#0x0
   \   00039B   C3           CLR     C
   \   00039C   E8           MOV     A,R0
   \   00039D   95..         SUBB    A,?V14
   \   00039F   E9           MOV     A,R1
   \   0003A0   95..         SUBB    A,?V15
   \   0003A2   5029         JNC     ??AF_DataRequest_22
    740              {
    741                if (apsfSendFragmented)
   \   0003A4   90....       MOV     DPTR,#apsfSendFragmented
   \   0003A7   E0           MOVX    A,@DPTR
   \   0003A8   F8           MOV     R0,A
   \   0003A9   A3           INC     DPTR
   \   0003AA   E0           MOVX    A,@DPTR
   \   0003AB   F9           MOV     R1,A
   \   0003AC   E8           MOV     A,R0
   \   0003AD   49           ORL     A,R1
   \   0003AE   6018         JZ      ??AF_DataRequest_23
    742                {
    743                  stat = (*apsfSendFragmented)( &req );
   \   0003B0                ; Setup parameters for indirect call
   \   0003B0   7404         MOV     A,#0x4
   \   0003B2   12....       LCALL   ?XSTACK_DISP101_8
   \   0003B5   90....       MOV     DPTR,#apsfSendFragmented
   \   0003B8   E0           MOVX    A,@DPTR
   \   0003B9   F8           MOV     R0,A
   \   0003BA   A3           INC     DPTR
   \   0003BB   E0           MOVX    A,@DPTR
   \   0003BC   F583         MOV     DPH,A
   \   0003BE   8882         MOV     DPL,R0
   \   0003C0   12....       LCALL   ?CALL_IND
   \   0003C3   E9           MOV     A,R1
   \   0003C4   F5..         MOV     ?V0,A
   \   0003C6   8010         SJMP    ??AF_DataRequest_24
    744                }
    745                else
    746                {
    747                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_23:
   \   0003C8   75..02       MOV     ?V0,#0x2
   \   0003CB   800B         SJMP    ??AF_DataRequest_24
    748                }
    749              }
    750              else
    751              {
    752                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_22:
   \   0003CD                ; Setup parameters for call to function APSDE_DataReq
   \   0003CD   7404         MOV     A,#0x4
   \   0003CF   12....       LCALL   ?XSTACK_DISP101_8
   \   0003D2   12....       LCALL   `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \   0003D5   E9           MOV     A,R1
   \   0003D6   F5..         MOV     ?V0,A
    753              }
    754            }
    755          
    756            /*
    757             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    758             * get added to the NWK databufs. So it will not go OTA and it will not get
    759             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    760             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    761             * message with the first in line TransSeqNumber, even on a multi message.
    762             * Also note that a reflected msg will not have its confirmation generated
    763             * here.
    764             */
    765            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    766                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_24:
   \   0003D8   740C         MOV     A,#0xc
   \   0003DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0003DD   E0           MOVX    A,@DPTR
   \   0003DE   6402         XRL     A,#0x2
   \   0003E0   702E         JNZ     ??AF_DataRequest_25
   \   0003E2                ; Setup parameters for call to function NLME_GetShortAddr
   \   0003E2   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0003E5   8A..         MOV     ?V6,R2
   \   0003E7   8B..         MOV     ?V7,R3
   \   0003E9   A8..         MOV     R0,?V6
   \   0003EB   A9..         MOV     R1,?V7
   \   0003ED   7404         MOV     A,#0x4
   \   0003EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F2   E0           MOVX    A,@DPTR
   \   0003F3   68           XRL     A,R0
   \   0003F4   7003         JNZ     ??AF_DataRequest_26
   \   0003F6   A3           INC     DPTR
   \   0003F7   E0           MOVX    A,@DPTR
   \   0003F8   69           XRL     A,R1
   \                     ??AF_DataRequest_26:
   \   0003F9   7015         JNZ     ??AF_DataRequest_25
    767            {
    768              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   0003FB                ; Setup parameters for call to function afDataConfirm
   \   0003FB   AB..         MOV     R3,?V0
   \   0003FD   85..82       MOV     DPL,?V8
   \   000400   85..83       MOV     DPH,?V9
   \   000403   E0           MOVX    A,@DPTR
   \   000404   FA           MOV     R2,A
   \   000405   85..82       MOV     DPL,?V2
   \   000408   85..83       MOV     DPH,?V3
   \   00040B   E0           MOVX    A,@DPTR
   \   00040C   F9           MOV     R1,A
   \   00040D   12....       LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    769            }
    770          
    771            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_25:
   \   000410   E5..         MOV     A,?V0
   \   000412   700A         JNZ     ??AF_DataRequest_27
    772            {
    773              (*transID)++;
   \   000414   85..82       MOV     DPL,?V8
   \   000417   85..83       MOV     DPH,?V9
   \   00041A   E0           MOVX    A,@DPTR
   \   00041B   2401         ADD     A,#0x1
   \   00041D   F0           MOVX    @DPTR,A
    774            }
    775          
    776            return (afStatus_t)stat;
   \                     ??AF_DataRequest_27:
   \   00041E   A9..         MOV     R1,?V0
   \                     ??AF_DataRequest_1:
   \   000420   7420         MOV     A,#0x20
   \   000422   12....       LCALL   ?DEALLOC_XSTACK8
   \   000425   7F10         MOV     R7,#0x10
   \   000427   02....       LJMP    ?BANKED_LEAVE_XDATA
    777          }
    778          
    779          #if defined ( ZIGBEE_SOURCE_ROUTING )
    780          /*********************************************************************
    781           * @fn      AF_DataRequestSrcRtg
    782           *
    783           * @brief   Common functionality for invoking APSDE_DataReq() for both
    784           *          SendMulti and MSG-Send.
    785           *
    786           * input parameters
    787           *
    788           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    789           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    790           * @param   cID - A valid cluster ID as specified by the Profile.
    791           * @param   len - Number of bytes of data pointed to by next param.
    792           * @param  *buf - A pointer to the data bytes to send.
    793           * @param  *transID - A pointer to a byte which can be modified and which will
    794           *                    be used as the transaction sequence number of the msg.
    795           * @param   options - Valid bit mask of Tx options.
    796           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    797           * @param   relayCnt - Number of devices in the relay list
    798           * @param   pRelayList - Pointer to the relay list
    799           *
    800           * output parameters
    801           *
    802           * @param  *transID - Incremented by one if the return value is success.
    803           *
    804           * @return  afStatus_t - See previous definition of afStatus_... types.
    805           */
    806          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    807          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    808                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    809                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    810          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V10,R4
   \   00000B   8D..         MOV     ?V11,R5
   \   00000D   89..         MOV     ?V5,R1
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V1,A
   \   00001B   741A         MOV     A,#0x1a
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FE           MOV     R6,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FF           MOV     R7,A
   \   000025   741C         MOV     A,#0x1c
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V14,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V15,A
   \   000031   741E         MOV     A,#0x1e
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V12,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V13,A
   \   00003D   7420         MOV     A,#0x20
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F5..         MOV     ?V4,A
   \   000045   7421         MOV     A,#0x21
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V3,A
    811            uint8 status;
    812          
    813            /* Add the source route to the source routing table */
    814            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    815                                                   pRelayList );
   \   00004D                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00004D   7422         MOV     A,#0x22
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FC           MOV     R4,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FD           MOV     R5,A
   \   000057   A9..         MOV     R1,?V3
   \   000059   85..82       MOV     DPL,?V6
   \   00005C   85..83       MOV     DPH,?V7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FB           MOV     R3,A
   \   000064   12....       LCALL   `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   000067   E9           MOV     A,R1
   \   000068   F5..         MOV     ?V2,A
    816          
    817            if( status == RTG_SUCCESS)
   \   00006A   E5..         MOV     A,?V2
   \   00006C   7044         JNZ     ??AF_DataRequestSrcRtg_0
    818            {
    819              /* Call AF_DataRequest to send the data */
    820              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   00006E                ; Setup parameters for call to function AF_DataRequest
   \   00006E   E5..         MOV     A,?V4
   \   000070   F5..         MOV     ?V8,A
   \   000072   78..         MOV     R0,#?V8
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   85....       MOV     ?V8,?V12
   \   00007A   85....       MOV     ?V9,?V13
   \   00007D   78..         MOV     R0,#?V8
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   85....       MOV     ?V8,?V14
   \   000085   85....       MOV     ?V9,?V15
   \   000088   78..         MOV     R0,#?V8
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   8E..         MOV     ?V8,R6
   \   00008F   8F..         MOV     ?V9,R7
   \   000091   78..         MOV     R0,#?V8
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   78..         MOV     R0,#?V0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   A9..         MOV     R1,?V5
   \   00009D   AC..         MOV     R4,?V10
   \   00009F   AD..         MOV     R5,?V11
   \   0000A1   AA..         MOV     R2,?V6
   \   0000A3   AB..         MOV     R3,?V7
   \   0000A5   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000A8   7409         MOV     A,#0x9
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AD   E9           MOV     A,R1
   \   0000AE   F5..         MOV     ?V2,A
   \   0000B0   800E         SJMP    ??AF_DataRequestSrcRtg_1
    821            }
    822            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   0000B2   7405         MOV     A,#0x5
   \   0000B4   65..         XRL     A,?V2
   \   0000B6   7005         JNZ     ??AF_DataRequestSrcRtg_2
    823            {
    824              /* The source route relay count is exceeding the network limit */
    825              status = afStatus_INVALID_PARAMETER;
   \   0000B8   75..02       MOV     ?V2,#0x2
   \   0000BB   8003         SJMP    ??AF_DataRequestSrcRtg_1
    826            }
    827            else
    828            {
    829              /* The guaranteed adding entry fails due to memory failure */
    830              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   0000BD   75..10       MOV     ?V2,#0x10
    831            }
    832            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   0000C0   A9..         MOV     R1,?V2
   \   0000C2   7F10         MOV     R7,#0x10
   \   0000C4   02....       LJMP    ?BANKED_LEAVE_XDATA
    833          }
    834          
    835          #endif
    836          
    837          /*********************************************************************
    838           * @fn      afFindEndPointDescList
    839           *
    840           * @brief   Find the endpoint description entry from the endpoint
    841           *          number.
    842           *
    843           * @param   EndPoint - Application Endpoint to look for
    844           *
    845           * @return  the address to the endpoint/interface description entry
    846           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    847          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    848          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    849            epList_t *epSearch;
    850          
    851            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FD           MOV     R5,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FA           MOV     R2,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FB           MOV     R3,A
   \                     ??afFindEndPointDescList_0:
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   601D         JZ      ??afFindEndPointDescList_1
    852            {
    853              if (epSearch->epDesc->endPoint == EndPoint)
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F583         MOV     DPH,A
   \   000020   8882         MOV     DPL,R0
   \   000022   E0           MOVX    A,@DPTR
   \   000023   69           XRL     A,R1
   \   000024   600B         JZ      ??afFindEndPointDescList_1
    854              {
    855                break;
    856              }
    857            }
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FB           MOV     R3,A
   \   00002F   80DF         SJMP    ??afFindEndPointDescList_0
    858          
    859            return epSearch;
   \                     ??afFindEndPointDescList_1:
   \   000031   D083         POP     DPH
   \   000033   D082         POP     DPL
   \   000035   02....       LJMP    ?BRET
    860          }
    861          
    862          /*********************************************************************
    863           * @fn      afFindEndPointDesc
    864           *
    865           * @brief   Find the endpoint description entry from the endpoint
    866           *          number.
    867           *
    868           * @param   EndPoint - Application Endpoint to look for
    869           *
    870           * @return  the address to the endpoint/interface description entry
    871           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    872          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    873          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    874            epList_t *epSearch;
    875          
    876            // Look for the endpoint
    877            epSearch = afFindEndPointDescList( EndPoint );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   A9..         MOV     R1,?V0
   \   000009   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   AE..         MOV     R6,?V2
   \   000012   AF..         MOV     R7,?V3
    878          
    879            if ( epSearch )
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   600D         JZ      ??afFindEndPointDesc_0
    880              return ( epSearch->epDesc );
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FB           MOV     R3,A
   \   000023   8004         SJMP    ??afFindEndPointDesc_1
    881            else
    882              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000025   7A00         MOV     R2,#0x0
   \   000027   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   000029   7F04         MOV     R7,#0x4
   \   00002B   02....       LJMP    ?BANKED_LEAVE_XDATA
    883          }
    884          
    885          /*********************************************************************
    886           * @fn      afFindSimpleDesc
    887           *
    888           * @brief   Find the Simple Descriptor from the endpoint number.
    889           *
    890           * @param   EP - Application Endpoint to look for.
    891           *
    892           * @return  Non-zero to indicate that the descriptor memory must be freed.
    893           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    894          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    895          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V1,R1
    896            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV     R1,?V1
   \   00000D   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV     ?V4,R2
   \   000012   8B..         MOV     ?V5,R3
   \   000014   85....       MOV     ?V2,?V4
   \   000017   85....       MOV     ?V3,?V5
    897            uint8 rtrn = FALSE;
   \   00001A   75..00       MOV     ?V0,#0x0
    898          
    899            if ( epItem )
   \   00001D   E5..         MOV     A,?V2
   \   00001F   45..         ORL     A,?V3
   \   000021   605D         JZ      ??afFindSimpleDesc_0
    900            {
    901              if ( epItem->pfnDescCB )
   \   000023   85..82       MOV     DPL,?V2
   \   000026   85..83       MOV     DPH,?V3
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F9           MOV     R1,A
   \   000032   E8           MOV     A,R0
   \   000033   49           ORL     A,R1
   \   000034   6027         JZ      ??afFindSimpleDesc_1
    902              {
    903                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000036                ; Setup parameters for indirect call
   \   000036   AA..         MOV     R2,?V1
   \   000038   7901         MOV     R1,#0x1
   \   00003A   85..82       MOV     DPL,?V2
   \   00003D   85..83       MOV     DPH,?V3
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F583         MOV     DPH,A
   \   00004A   8882         MOV     DPL,R0
   \   00004C   12....       LCALL   ?CALL_IND
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   EA           MOV     A,R2
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   EB           MOV     A,R3
   \   000057   F0           MOVX    @DPTR,A
    904                rtrn = TRUE;
   \   000058   75..01       MOV     ?V0,#0x1
   \   00005B   802E         SJMP    ??afFindSimpleDesc_2
    905              }
    906              else
    907              {
    908                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   00005D   85..82       MOV     DPL,?V2
   \   000060   85..83       MOV     DPH,?V3
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F8           MOV     R0,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F583         MOV     DPH,A
   \   00006B   8882         MOV     DPL,R0
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F8           MOV     R0,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   E8           MOV     A,R0
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   E9           MOV     A,R1
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   800B         SJMP    ??afFindSimpleDesc_2
    909              }
    910            }
    911            else
    912            {
    913              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   7400         MOV     A,#0x0
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   7400         MOV     A,#0x0
   \   00008A   F0           MOVX    @DPTR,A
    914            }
    915          
    916            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   00008B   A9..         MOV     R1,?V0
   \   00008D   7F06         MOV     R7,#0x6
   \   00008F   02....       LJMP    ?BANKED_LEAVE_XDATA
    917          }
    918          
    919          /*********************************************************************
    920           * @fn      afGetDescCB
    921           *
    922           * @brief   Get the Descriptor callback function.
    923           *
    924           * @param   epDesc - pointer to the endpoint descriptor
    925           *
    926           * @return  function pointer or NULL
    927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    928          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
   \                     afGetDescCB:
    929          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   EB           MOV     A,R3
   \   000007   F9           MOV     R1,A
    930            epList_t *epSearch;
    931          
    932            // Start at the beginning
    933            epSearch = epList;
   \   000008   90....       MOV     DPTR,#epList
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FA           MOV     R2,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FB           MOV     R3,A
   \   000010   EA           MOV     A,R2
   \   000011   FC           MOV     R4,A
   \   000012   EB           MOV     A,R3
   \   000013   FD           MOV     R5,A
    934          
    935            // Look through the list until the end
    936            while ( epSearch )
   \                     ??afGetDescCB_0:
   \   000014   EC           MOV     A,R4
   \   000015   4D           ORL     A,R5
   \   000016   6031         JZ      ??afGetDescCB_1
    937            {
    938              // Is there a match?
    939              if ( epSearch->epDesc == epDesc )
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FB           MOV     R3,A
   \   000023   E8           MOV     A,R0
   \   000024   6A           XRL     A,R2
   \   000025   7002         JNZ     ??afGetDescCB_2
   \   000027   E9           MOV     A,R1
   \   000028   6B           XRL     A,R3
   \                     ??afGetDescCB_2:
   \   000029   700F         JNZ     ??afGetDescCB_3
    940              {
    941                return ( epSearch->pfnDescCB );
   \   00002B   8C82         MOV     DPL,R4
   \   00002D   8D83         MOV     DPH,R5
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FA           MOV     R2,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FB           MOV     R3,A
   \   000038   8013         SJMP    ??afGetDescCB_4
    942              }
    943              else
    944                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afGetDescCB_3:
   \   00003A   8C82         MOV     DPL,R4
   \   00003C   8D83         MOV     DPH,R5
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FA           MOV     R2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FB           MOV     R3,A
   \   000043   EA           MOV     A,R2
   \   000044   FC           MOV     R4,A
   \   000045   EB           MOV     A,R3
   \   000046   FD           MOV     R5,A
   \   000047   80CB         SJMP    ??afGetDescCB_0
    945            }
    946          
    947            return ( (pDescCB)NULL );
   \                     ??afGetDescCB_1:
   \   000049   7A00         MOV     R2,#0x0
   \   00004B   7B00         MOV     R3,#0x0
   \                     ??afGetDescCB_4:
   \   00004D   D083         POP     DPH
   \   00004F   D082         POP     DPL
   \   000051   02....       LJMP    ?BRET
    948          }
    949          
    950          /*********************************************************************
    951           * @fn      afDataReqMTU
    952           *
    953           * @brief   Get the Data Request MTU(Max Transport Unit).
    954           *
    955           * @param   fields - afDataReqMTU_t
    956           *
    957           * @return  uint8(MTU)
    958           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    959          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    960          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    961            uint8 len;
    962            uint8 hdr;
    963          
    964            if ( fields->kvp == TRUE )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6401         XRL     A,#0x1
   \   000010   7005         JNZ     ??afDataReqMTU_0
    965            {
    966              hdr = AF_HDR_KVP_MAX_LEN;
   \   000012   75..08       MOV     ?V0,#0x8
   \   000015   8003         SJMP    ??afDataReqMTU_1
    967            }
    968            else
    969            {
    970              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000017   75..00       MOV     ?V0,#0x0
    971            }
    972          
    973            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   \                     ??afDataReqMTU_1:
   \   00001A                ; Setup parameters for call to function APSDE_DataReqMTU
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   12....       LCALL   `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   000026   E9           MOV     A,R1
   \   000027   C3           CLR     C
   \   000028   95..         SUBB    A,?V0
   \   00002A   F5..         MOV     ?V1,A
    974          
    975            return len;
   \   00002C   A9..         MOV     R1,?V1
   \   00002E   7F02         MOV     R7,#0x2
   \   000030   02....       LJMP    ?BANKED_LEAVE_XDATA
    976          }
    977          
    978          /*********************************************************************
    979           * @fn      afGetMatch
    980           *
    981           * @brief   Set the allow response flag.
    982           *
    983           * @param   ep - Application Endpoint to look for
    984           * @param   action - true - allow response, false - no response
    985           *
    986           * @return  TRUE allow responses, FALSE no response
    987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    988          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    989          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    990            epList_t *epSearch;
    991          
    992            // Look for the endpoint
    993            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   A9..         MOV     R1,?V0
   \   000009   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   AE..         MOV     R6,?V2
   \   000012   AF..         MOV     R7,?V3
    994          
    995            if ( epSearch )
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   6019         JZ      ??afGetMatch_0
    996            {
    997              if ( epSearch->flags & eEP_AllowMatch )
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   A2E0         MOV     C,0xE0 /* A   */.0
   \   000027   5004         JNC     ??afGetMatch_1
    998                return ( TRUE );
   \   000029   7901         MOV     R1,#0x1
   \   00002B   8006         SJMP    ??afGetMatch_2
    999              else
   1000                return ( FALSE );
   \                     ??afGetMatch_1:
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   8002         SJMP    ??afGetMatch_2
   1001            }
   1002            else
   1003              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000031   7900         MOV     R1,#0x0
   \                     ??afGetMatch_2:
   \   000033   7F04         MOV     R7,#0x4
   \   000035   02....       LJMP    ?BANKED_LEAVE_XDATA
   1004          }
   1005          
   1006          /*********************************************************************
   1007           * @fn      afSetMatch
   1008           *
   1009           * @brief   Set the allow response flag.
   1010           *
   1011           * @param   ep - Application Endpoint to look for
   1012           * @param   action - true - allow response, false - no response
   1013           *
   1014           * @return  TRUE if success, FALSE if endpoint not found
   1015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
   1017          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   1018            epList_t *epSearch;
   1019          
   1020            // Look for the endpoint
   1021            epSearch = afFindEndPointDescList( ep );
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   A9..         MOV     R1,?V0
   \   00000B   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV     ?V2,R2
   \   000010   8B..         MOV     ?V3,R3
   \   000012   AE..         MOV     R6,?V2
   \   000014   AF..         MOV     R7,?V3
   1022          
   1023            if ( epSearch )
   \   000016   EE           MOV     A,R6
   \   000017   4F           ORL     A,R7
   \   000018   602A         JZ      ??afSetMatch_0
   1024            {
   1025              if ( action )
   \   00001A   E5..         MOV     A,?V1
   \   00001C   6012         JZ      ??afSetMatch_1
   1026              {
   1027                epSearch->flags |= eEP_AllowMatch;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   D2E0         SETB    0xE0 /* A   */.0
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   8010         SJMP    ??afSetMatch_2
   1028              }
   1029              else
   1030              {
   1031                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C2E0         CLR     0xE0 /* A   */.0
   \   00003F   F0           MOVX    @DPTR,A
   1032              }
   1033              return ( TRUE );
   \                     ??afSetMatch_2:
   \   000040   7901         MOV     R1,#0x1
   \   000042   8002         SJMP    ??afSetMatch_3
   1034            }
   1035            else
   1036              return ( FALSE );
   \                     ??afSetMatch_0:
   \   000044   7900         MOV     R1,#0x0
   \                     ??afSetMatch_3:
   \   000046   7F04         MOV     R7,#0x4
   \   000048   02....       LJMP    ?BANKED_LEAVE_XDATA
   1037          }
   1038          
   1039          /*********************************************************************
   1040           * @fn      afNumEndPoints
   1041           *
   1042           * @brief   Returns the number of endpoints defined (including 0)
   1043           *
   1044           * @param   none
   1045           *
   1046           * @return  number of endpoints
   1047           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1048          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
   1049          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1050            epList_t *epSearch;
   1051            uint8 endpoints;
   1052          
   1053            // Start at the beginning
   1054            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FD           MOV     R5,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FA           MOV     R2,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FB           MOV     R3,A
   1055            endpoints = 0;
   \   000010   7900         MOV     R1,#0x0
   1056          
   1057            while ( epSearch )
   \                     ??afNumEndPoints_0:
   \   000012   EA           MOV     A,R2
   \   000013   4B           ORL     A,R3
   \   000014   600C         JZ      ??afNumEndPoints_1
   1058            {
   1059              endpoints++;
   \   000016   09           INC     R1
   1060              epSearch = epSearch->nextDesc;
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FA           MOV     R2,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FB           MOV     R3,A
   \   000020   80F0         SJMP    ??afNumEndPoints_0
   1061            }
   1062          
   1063            return ( endpoints );
   \                     ??afNumEndPoints_1:
   \   000022   D083         POP     DPH
   \   000024   D082         POP     DPL
   \   000026   02....       LJMP    ?BRET
   1064          }
   1065          
   1066          /*********************************************************************
   1067           * @fn      afEndPoints
   1068           *
   1069           * @brief   Fills in the passed in buffer with the endpoint (numbers).
   1070           *          Use afNumEndPoints to find out how big a buffer to supply.
   1071           *
   1072           * @param   epBuf - pointer to mem used
   1073           *
   1074           * @return  void
   1075           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1076          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
   1077          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1078            epList_t *epSearch;
   1079            uint8 endPoint;
   1080          
   1081            // Start at the beginning
   1082            epSearch = epList;
   \   000005   90....       MOV     DPTR,#epList
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FE           MOV     R6,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FF           MOV     R7,A
   \   00000D   EE           MOV     A,R6
   \   00000E   FC           MOV     R4,A
   \   00000F   EF           MOV     A,R7
   \   000010   FD           MOV     R5,A
   1083          
   1084            while ( epSearch )
   \                     ??afEndPoints_0:
   \   000011   EC           MOV     A,R4
   \   000012   4D           ORL     A,R5
   \   000013   6034         JZ      ??afEndPoints_1
   1085            {
   1086              endPoint = epSearch->epDesc->endPoint;
   \   000015   8C82         MOV     DPL,R4
   \   000017   8D83         MOV     DPH,R5
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FE           MOV     R6,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F583         MOV     DPH,A
   \   000021   8E82         MOV     DPL,R6
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   1087          
   1088              if ( !skipZDO || endPoint != 0 )
   \   000025   E9           MOV     A,R1
   \   000026   6003         JZ      ??afEndPoints_2
   \   000028   E8           MOV     A,R0
   \   000029   6013         JZ      ??afEndPoints_3
   1089                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   00002B   E8           MOV     A,R0
   \   00002C   C0E0         PUSH    A
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   A3           INC     DPTR
   \   00003A   AA82         MOV     R2,DPL
   \   00003C   AB83         MOV     R3,DPH
   1090          
   1091              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00003E   8C82         MOV     DPL,R4
   \   000040   8D83         MOV     DPH,R5
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FC           MOV     R4,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FD           MOV     R5,A
   \   000047   80C8         SJMP    ??afEndPoints_0
   1092            }
   1093          }
   \                     ??afEndPoints_1:
   \   000049   7F01         MOV     R7,#0x1
   \   00004B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1094          
   1095          /*********************************************************************
   1096           * @fn      afCopyAddress
   1097           *
   1098           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1099           *          from the zAddrType_t parameter.
   1100           *
   1101           * @param   epBuf - pointer to mem used
   1102           *
   1103           * @return  void
   1104           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1105          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1106          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   1107            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   00000D   85..82       MOV     DPL,?V0
   \   000010   85..83       MOV     DPH,?V1
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
   1108            if ( zAddr->addrMode == Addr64Bit )
   \   00002D   85..82       MOV     DPL,?V0
   \   000030   85..83       MOV     DPH,?V1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6403         XRL     A,#0x3
   \   00003E   7017         JNZ     ??afCopyAddress_0
   1109            {
   1110              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   AC..         MOV     R4,?V0
   \   000042   AD..         MOV     R5,?V1
   \   000044   EE           MOV     A,R6
   \   000045   FA           MOV     R2,A
   \   000046   EF           MOV     A,R7
   \   000047   FB           MOV     R3,A
   \   000048   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00004B   8A..         MOV     ?V2,R2
   \   00004D   8B..         MOV     ?V3,R3
   \   00004F   85..82       MOV     DPL,?V2
   \   000052   85..83       MOV     DPH,?V3
   \   000055   8014         SJMP    ??afCopyAddress_1
   1111            }
   1112            else
   1113            {
   1114              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000057   85..82       MOV     DPL,?V0
   \   00005A   85..83       MOV     DPH,?V1
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F8           MOV     R0,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F9           MOV     R1,A
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   E8           MOV     A,R0
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E9           MOV     A,R1
   \   00006A   F0           MOVX    @DPTR,A
   1115            }
   1116          
   1117            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1118            afAddr->panId = 0;
   \                     ??afCopyAddress_1:
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   7400         MOV     A,#0x0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   7400         MOV     A,#0x0
   \   00007F   F0           MOVX    @DPTR,A
   1119          }
   \   000080   7F04         MOV     R7,#0x4
   \   000082   02....       LJMP    ?BANKED_LEAVE_XDATA
   1120          
   1121          /**************************************************************************************************
   1122           * @fn          afAPSF_ConfigGet
   1123           *
   1124           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1125           *              the specified EndPoint.
   1126           *
   1127           * input parameters
   1128           *
   1129           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1130           *
   1131           * output parameters
   1132           *
   1133           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1134           *
   1135           * @return      None.
   1136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1137          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   1139            epList_t *pList = afFindEndPointDescList(endPoint);
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV     R1,?V2
   \   00000D   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV     ?V4,R2
   \   000012   8B..         MOV     ?V5,R3
   \   000014   85....       MOV     ?V0,?V4
   \   000017   85....       MOV     ?V1,?V5
   1140          
   1141            if (pList == NULL)
   \   00001A   E5..         MOV     A,?V0
   \   00001C   45..         ORL     A,?V1
   \   00001E   7011         JNZ     ??afAPSF_ConfigGet_0
   1142            {
   1143              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   7432         MOV     A,#0x32
   \   000026   F0           MOVX    @DPTR,A
   1144              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   7401         MOV     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   802D         SJMP    ??afAPSF_ConfigGet_1
   1145            }
   1146            else
   1147            {
   1148              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   000031                ; Setup parameters for call to function osal_memcpy
   \   000031   E5..         MOV     A,?V0
   \   000033   2406         ADD     A,#0x6
   \   000035   F5..         MOV     ?V4,A
   \   000037   E4           CLR     A
   \   000038   35..         ADDC    A,?V1
   \   00003A   F5..         MOV     ?V5,A
   \   00003C   75..00       MOV     ?V6,#0x0
   \   00003F   78..         MOV     R0,#?V4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000044   7C02         MOV     R4,#0x2
   \   000046   7D00         MOV     R5,#0x0
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   8A..         MOV     ?V4,R2
   \   000056   8B..         MOV     ?V5,R3
   \   000058   85..82       MOV     DPL,?V4
   \   00005B   85..83       MOV     DPH,?V5
   1149            }
   1150          }
   \                     ??afAPSF_ConfigGet_1:
   \   00005E   7F07         MOV     R7,#0x7
   \   000060   02....       LJMP    ?BANKED_LEAVE_XDATA
   1151          
   1152          /**************************************************************************************************
   1153           * @fn          afAPSF_ConfigSet
   1154           *
   1155           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1156           *              the specified EndPoint.
   1157           *
   1158           * input parameters
   1159           *
   1160           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1161           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1162           *
   1163           * output parameters
   1164           *
   1165           * None.
   1166           *
   1167           * @return      afStatus_SUCCESS for success.
   1168           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1169           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1170          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1171          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   1172            epList_t *pList = afFindEndPointDescList(endPoint);
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV     R1,?V2
   \   00000D   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV     ?V4,R2
   \   000012   8B..         MOV     ?V5,R3
   \   000014   85....       MOV     ?V0,?V4
   \   000017   85....       MOV     ?V1,?V5
   1173          
   1174            if (pList == NULL)
   \   00001A   E5..         MOV     A,?V0
   \   00001C   45..         ORL     A,?V1
   \   00001E   7004         JNZ     ??afAPSF_ConfigSet_0
   1175            {
   1176              return afStatus_INVALID_PARAMETER;
   \   000020   7902         MOV     R1,#0x2
   \   000022   802D         SJMP    ??afAPSF_ConfigSet_1
   1177            }
   1178          
   1179            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000024                ; Setup parameters for call to function osal_memcpy
   \   000024   8E..         MOV     ?V4,R6
   \   000026   8F..         MOV     ?V5,R7
   \   000028   75..00       MOV     ?V6,#0x0
   \   00002B   78..         MOV     R0,#?V4
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000030   7C02         MOV     R4,#0x2
   \   000032   7D00         MOV     R5,#0x0
   \   000034   E5..         MOV     A,?V0
   \   000036   2406         ADD     A,#0x6
   \   000038   FA           MOV     R2,A
   \   000039   E4           CLR     A
   \   00003A   35..         ADDC    A,?V1
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   8A..         MOV     ?V4,R2
   \   000047   8B..         MOV     ?V5,R3
   \   000049   85..82       MOV     DPL,?V4
   \   00004C   85..83       MOV     DPH,?V5
   1180            return afStatus_SUCCESS;
   \   00004F   7900         MOV     R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   000051   7F07         MOV     R7,#0x7
   \   000053   02....       LJMP    ?BANKED_LEAVE_XDATA
   1181          }
   1182          
   1183          /**************************************************************************************************
   1184           * @fn          afSetApplCB
   1185           *
   1186           * @brief       Sets the pointer to the Application Callback function for a
   1187           *              specific EndPoint.
   1188           *
   1189           * input parameters
   1190           *
   1191           * @param       endPoint - The specific EndPoint for which to set Application Callback.
   1192           * @param       pApplFn - A pointer to the Application Callback function.
   1193           *
   1194           * output parameters
   1195           *
   1196           * None.
   1197           *
   1198           * @return      TRUE if success, FALSE if endpoint not found
   1199           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1200          uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
   \                     afSetApplCB:
   1201          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   1202            if ( pApplFn != NULL )
   \   00000B   EE           MOV     A,R6
   \   00000C   4F           ORL     A,R7
   \   00000D   602D         JZ      ??afSetApplCB_0
   1203            {
   1204              epList_t *epSearch;
   1205          
   1206              // Look for the endpoint
   1207              epSearch = afFindEndPointDescList( endPoint );
   \   00000F                ; Setup parameters for call to function afFindEndPointDescList
   \   00000F   A9..         MOV     R1,?V2
   \   000011   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000014   8A..         MOV     ?V4,R2
   \   000016   8B..         MOV     ?V5,R3
   \   000018   85....       MOV     ?V0,?V4
   \   00001B   85....       MOV     ?V1,?V5
   1208          
   1209              if ( epSearch )
   \   00001E   E5..         MOV     A,?V0
   \   000020   45..         ORL     A,?V1
   \   000022   6018         JZ      ??afSetApplCB_0
   1210              {
   1211                epSearch->pfnApplCB = pApplFn;
   \   000024   85..82       MOV     DPL,?V0
   \   000027   85..83       MOV     DPH,?V1
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   EE           MOV     A,R6
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   EF           MOV     A,R7
   \   000037   F0           MOVX    @DPTR,A
   1212          
   1213                return ( TRUE );
   \   000038   7901         MOV     R1,#0x1
   \   00003A   8002         SJMP    ??afSetApplCB_1
   1214              }
   1215            }
   1216          
   1217            return ( FALSE );
   \                     ??afSetApplCB_0:
   \   00003C   7900         MOV     R1,#0x0
   \                     ??afSetApplCB_1:
   \   00003E   7F06         MOV     R7,#0x6
   \   000040   02....       LJMP    ?BANKED_LEAVE_XDATA
   1218          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afReflectError::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetDescCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetDescCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetApplCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetApplCB
   1219          
   1220          /**************************************************************************************************
   1221          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     89   AF_DataRequest
        0     56   -> APSDE_DataReq
        0     56   -> NLME_GetShortAddr
        0     56   -> NLME_IsAddressBroadcast
        0     56   -> RTG_CheckRtStatus
        0     56   -> afDataConfirm
        0     56   -> afDataReqMTU
        0     56   -> afFindEndPointDescList
        0     56   -> afGetDescCB
        0     56   -> osal_mem_free
        0     56   -> sAddrExtCpy
      0     45   AF_DataRequestSrcRtg
        0     33   -> AF_DataRequest
        0     24   -> RTG_AddSrcRtgEntry_Guaranteed
      0     18   afAPSF_ConfigGet
        0     15   -> afFindEndPointDescList
        0     18   -> osal_memcpy
      0     18   afAPSF_ConfigSet
        0     15   -> afFindEndPointDescList
        0     18   -> osal_memcpy
      1     71   afBuildMSGIncoming
        0     27   -> afCopyAddress
        0     30   -> osal_memcpy
        0     27   -> osal_msg_allocate
        0     27   -> osal_msg_send
      1     39   afCopyAddress
        0     12   -> sAddrExtCpy
      1     72   afDataConfirm
        0     16   -> afFindEndPointDesc
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     66   afDataReqMTU
        0     10   -> APSDE_DataReqMTU
      0     11   afDelete
        0     11   -> osal_mem_free
      1      9   afEndPoints
      0     41   afFindEndPointDesc
        0     12   -> afFindEndPointDescList
      2     56   afFindEndPointDescList
      0     14   afFindSimpleDesc
        0     14   -> afFindEndPointDescList
      2     56   afGetDescCB
      0     12   afGetMatch
        0     12   -> afFindEndPointDescList
      1     51   afIncomingData
        0     41   -> afBuildMSGIncoming
        0     29   -> afFindEndPointDesc
        0     29   -> afFindEndPointDescList
        0     29   -> aps_FindGroupForEndpoint
        0     29   -> osal_mem_free
      2      0   afNumEndPoints
      1     19   afReflectError
        0     18   -> afFindEndPointDesc
        0     18   -> osal_msg_allocate
        0     18   -> osal_msg_send
      0     12   afRegister
        0     10   -> afFindEndPointDescList
        0     12   -> afRegisterExtended
      0     26   afRegisterExtended
        0     14   -> osal_mem_alloc
      0     14   afSetApplCB
        0     14   -> afFindEndPointDescList
      0     12   afSetMatch
        0     12   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
    1066  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     199  AF_DataRequestSrcRtg
       6  AF_DataRequestSrcRtg::?relay
      99  afAPSF_ConfigGet
       6  afAPSF_ConfigGet::?relay
      86  afAPSF_ConfigSet
       6  afAPSF_ConfigSet::?relay
     697  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
     133  afCopyAddress
       6  afCopyAddress::?relay
     127  afDataConfirm
       6  afDataConfirm::?relay
      51  afDataReqMTU
       6  afDataReqMTU::?relay
     180  afDelete
       6  afDelete::?relay
      78  afEndPoints
       6  afEndPoints::?relay
      46  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      56  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
     146  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      84  afGetDescCB
       6  afGetDescCB::?relay
      56  afGetMatch
       6  afGetMatch::?relay
     792  afIncomingData
       6  afIncomingData::?relay
      41  afNumEndPoints
       6  afNumEndPoints::?relay
     170  afReflectError
       6  afReflectError::?relay
      79  afRegister
       6  afRegister::?relay
     164  afRegisterExtended
       6  afRegisterExtended::?relay
      67  afSetApplCB
       6  afSetApplCB::?relay
      75  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 4 492 bytes in segment BANKED_CODE
   132 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 4 625 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none
