###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  13:46:06
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\mt\MT_SYS.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0100
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\mt\MT_SYS.c" -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D
#        MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE -D NV_INIT -D
#        OPEN_FCS -D PANID_INCREASE -D MAKE_CRC_SHDW -lC "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\Obj" -e
#        --no_code_motion --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List\MT_SYS.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\Obj\MT_SYS.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\mt\MT_SYS.c
      1          /******************************************************************************
      2            Filename:       MT_SYS.c
      3            Revised:        $Date: 2014-08-04 15:38:03 -0700 (Mon, 04 Aug 2014) $
      4            Revision:       $Revision: 39653 $
      5          
      6            Description:   MonitorTest functions for SYS commands.
      7          
      8            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           *****************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT.h"
     45          #include "MT_SYS.h"
     46          #include "MT_VERSION.h"
     47          #include "OSAL.h"
     48          #include "OSAL_NV.h"
     49          #include "Onboard.h"  /* This is here because RAM read/write macros need it */

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     50          #include "hal_adc.h"
     51          #include "OSAL_Clock.h"
     52          #include "mac_low_level.h"
     53          #include "ZMAC.h"
     54          #include "mac_radio_defs.h"
     55          #if defined ( MT_SYS_JAMMER_FEATURE )
     56            #include "mac_rx.h"
     57          #endif
     58          #if !defined(CC253X_MACNP)
     59            #include "ZGlobals.h"
     60          #endif
     61          #if (defined INCLUDE_REVISION_INFORMATION) && ((defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)) //built for bootloader
     62            #include "hal_flash.h"
     63            #include "sb_shared.h"
     64          #endif
     65          #include "ZDiags.h"
     66          #include "MT_UART.h"
     67          //chaokw
     68          #include "AF.h"
     69          #include "GenericApp.h"
     70          #include "NodeAuth.h"
     71          #include "ZDSecMgr.h"
     72          
     73          
     74          /***************************************************************************************************
     75           * MACROS
     76           ***************************************************************************************************/
     77          
     78          /* Max possible MT response length, limited by TX buffer size and sizeof uint8 */
     79          #define MT_MAX_RSP_LEN  ( MIN( MT_UART_DEFAULT_MAX_TX_BUFF, 255 ) )
     80          
     81          /* Max possible MT response data length, MT protocol overhead */
     82          #define MT_MAX_RSP_DATA_LEN  ( (MT_MAX_RSP_LEN - 1) - SPI_0DATA_MSG_LEN )
     83            
     84          #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
     85          
     86          #if !defined HAL_GPIO || !HAL_GPIO
     87          #define GPIO_DIR_IN(IDX)
     88          #define GPIO_DIR_OUT(IDX)
     89          #define GPIO_TRI(IDX)
     90          #define GPIO_PULL_UP(IDX)
     91          #define GPIO_PULL_DN(IDX)
     92          #define GPIO_SET(IDX)
     93          #define GPIO_CLR(IDX)
     94          #define GPIO_TOG(IDX)
     95          #define GPIO_GET(IDX) 0
     96          #define GPIO_HiD_SET() (val = 0)
     97          #define GPIO_HiD_CLR() (val = 0)
     98          #endif
     99          
    100          #if defined ( MT_SYS_SNIFFER_FEATURE )
    101          #if defined ( HAL_MCU_CC2530 ) && !defined ( HAL_BOARD_CC2530USB )
    102            // This only work with the CC253x chips
    103            #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() st         \
    104            (                                                                                                                                                                                                                                   \
    105              OBSSEL3 = 0xFD;                                        \
    106              OBSSEL4 = 0xFC;                                        \
    107              RFC_OBS_CTRL1 = 0x09; /* 9 - sniff clk */              \
    108              RFC_OBS_CTRL2 = 0x08; /* 8 - sniff data */             \
    109              MDMTEST1 |= 0x04;                                      \
    110            )
    111          
    112            // This only work with the CC253x chips
    113            #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() st        \
    114            (                                                                                                                                                                                                                                   \
    115              OBSSEL3 &= ~0x80;                                                                                                                                                                             \
    116              OBSSEL4 &= ~0x80;                                                                                                                                                                             \
    117              RFC_OBS_CTRL1 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[1] */                                                                                   \
    118              RFC_OBS_CTRL2 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[2] */                                                                                   \
    119              MDMTEST1 &= ~0x04;                                                                                                                                                         \
    120            )
    121          #else
    122            #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
    123            #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
    124          #endif
    125          #endif // MT_SYS_SNIFFER_FEATURE
    126          
    127          #define RESET_HARD     0
    128          #define RESET_SOFT     1
    129          #define RESET_SHUTDOWN 2
    130          
    131          /***************************************************************************************************
    132           * CONSTANTS
    133           ***************************************************************************************************/
    134          
    135          #if !defined MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
    136          #define MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA  FALSE
    137          #endif
    138          

   \                                 In  segment XDATA_ROM_C, align 1
    139          const uint16 MT_SysOsalEventId [] = {
   \                     MT_SysOsalEventId:
   \   000000   0008         DW 2048
   \   000002   0004         DW 1024
   \   000004   0002         DW 512
   \   000006   0001         DW 256
    140                                                MT_SYS_OSAL_EVENT_0,
    141                                                MT_SYS_OSAL_EVENT_1,
    142                                                MT_SYS_OSAL_EVENT_2,
    143                                                MT_SYS_OSAL_EVENT_3
    144                                              };
    145          
    146          typedef enum {
    147            GPIO_DIR,
    148            GPIO_TRI,
    149            GPIO_SET,
    150            GPIO_CLR,
    151            GPIO_TOG,
    152            GPIO_GET,
    153            GPIO_HiD = 0x12
    154          } GPIO_Op_t;
    155          
    156          #if defined ( MT_SYS_JAMMER_FEATURE )
    157            #define JAMMER_CHECK_EVT                           0x0001
    158          
    159            #if !defined ( JAMMER_DETECT_CONTINUOUS_EVENTS )
    160              #define JAMMER_DETECT_CONTINUOUS_EVENTS          150
    161            #endif
    162            #if !defined ( JAMMER_DETECT_PERIOD_TIME )
    163              #define JAMMER_DETECT_PERIOD_TIME                100  // In milliseconds
    164            #endif
    165            #if !defined ( JAMMER_HIGH_NOISE_LEVEL )
    166              #define JAMMER_HIGH_NOISE_LEVEL                  -65
    167            #endif
    168          #endif // MT_SYS_JAMMER_FEATURE
    169          
    170          /***************************************************************************************************
    171           * LOCAL VARIABLES
    172           ***************************************************************************************************/
    173          #if defined ( MT_SYS_JAMMER_FEATURE )
    174            static uint8 jammerTaskID;
    175            static uint16 jammerContinuousEvents = JAMMER_DETECT_CONTINUOUS_EVENTS;
    176            static uint16 jammerDetections = JAMMER_DETECT_CONTINUOUS_EVENTS;
    177            static int8 jammerHighNoiseLevel = JAMMER_HIGH_NOISE_LEVEL;
    178            static uint32 jammerDetectPeriodTime = JAMMER_DETECT_PERIOD_TIME;
    179          #endif 
    180            
    181          #if defined ( MT_SYS_SNIFFER_FEATURE )
    182          static uint8 sniffer = FALSE;
    183          #endif
    184          
    185          /***************************************************************************************************
    186           * LOCAL FUNCTIONS
    187           ***************************************************************************************************/
    188          #if defined (MT_SYS_FUNC)
    189          void MT_SysReset(uint8 *pBuf);
    190          void MT_SysPing(void);
    191          void MT_SysVersion(void);
    192          void MT_SysSetExtAddr(uint8 *pBuf);
    193          void MT_SysGetExtAddr(void);
    194          void MT_SysOsalNVItemInit(uint8 *pBuf);
    195          void MT_SysOsalNVDelete(uint8 *pBuf);
    196          void MT_SysOsalNVLength(uint8 *pBuf);
    197          void MT_SysOsalNVRead(uint8 *pBuf);
    198          void MT_SysOsalNVWrite(uint8 *pBuf);
    199          void MT_SysOsalStartTimer(uint8 *pBuf);
    200          void MT_SysOsalStopTimer(uint8 *pBuf);
    201          void MT_SysRandom(void);
    202          void MT_SysAdcRead(uint8 *pBuf);
    203          void MT_SysGpio(uint8 *pBuf);
    204          void MT_SysStackTune(uint8 *pBuf);
    205          void MT_SysSetUtcTime(uint8 *pBuf);
    206          void MT_SysGetUtcTime(void);
    207          void MT_SysSetTxPower(uint8 *pBuf);
    208          #if defined ( MT_SYS_JAMMER_FEATURE )
    209            void MT_SysJammerParameters( uint8 *pBuf );
    210          #endif /* MT_SYS_JAMMER_FEATURE */
    211          #if defined ( MT_SYS_SNIFFER_FEATURE )
    212          void MT_SysSnifferParameters( uint8 *pBuf );
    213          #endif /* MT_SYS_SNIFFER_FEATURE */
    214          #if defined ( FEATURE_SYSTEM_STATS )
    215          void MT_SysZDiagsInitStats(void);
    216          void MT_SysZDiagsClearStats(uint8 *pBuf);
    217          void MT_SysZDiagsGetStatsAttr(uint8 *pBuf);
    218          void MT_SysZDiagsRestoreStatsFromNV(void);
    219          void MT_SysZDiagsSaveStatsToNV(void);
    220          #endif /* FEATURE_SYSTEM_STATS */
    221          #endif /* MT_SYS_FUNC */
    222          void powerOffSoc(void);
    223          //chaokw
    224          void MT_SysP2PTransfer(uint8 *pBuf);
    225          void MT_SysGroupTransfer(uint8 *pBuf);
    226          void MT_SysBroadCastTransfer(uint8 *pBuf);
    227          
    228          static void MT_SysPkgSendMsg( byte taskID, uint8 event, uint8 *pBuf, uint8 len, uint8 offset );
    229          static void MT_SysChannelUpdate( uint8 *pBuf );
    230          static void MT_SysMACReq( uint8 *pBuf );
    231          static void MT_SysNWKInfoReq( uint8 *pBuf );
    232          static void MT_SysActiveCntReq( uint8 *pBuf );
    233          static void MT_SysGetFWVersionReq( uint8 *pBuf );
    234          static void MT_SysFWUpdateReq( uint8 *pBuf );
    235          static void MT_SysMultiwaySetReq( uint8 *pBuf );
    236          static void MT_SysMultiwaySendReq( uint8 *pBuf );
    237          
    238          
    239          #if defined (MT_SYS_FUNC)
    240          /***************************************************************************************************
    241           * @fn      MT_SysProcessing
    242           *
    243           * @brief   Process all the SYS commands that are issued by test tool
    244           *
    245           * @param   pBuf - pointer to the msg buffer
    246           *
    247           *          | LEN  | CMD0  | CMD1  |  DATA  |
    248           *          |  1   |   1   |   1   |  0-255 |
    249           *
    250           * @return  status
    251           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    252          uint8 MT_SysCommandProcessing(uint8 *pBuf)
   \                     MT_SysCommandProcessing:
    253          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    254            uint8 status = MT_RPC_SUCCESS;
   \   000009   75..00       MOV     ?V2,#0x0
    255          
    256            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??MT_SysCommandProcessing_0 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??MT_SysCommandProcessing_1 & 0xFFFF
   \   00001E   14           DEC     A
   \   00001F   7003         JNZ     $+5
   \   000021   02....       LJMP    ??MT_SysCommandProcessing_2 & 0xFFFF
   \   000024   14           DEC     A
   \   000025   7003         JNZ     $+5
   \   000027   02....       LJMP    ??MT_SysCommandProcessing_3 & 0xFFFF
   \   00002A   14           DEC     A
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??MT_SysCommandProcessing_4 & 0xFFFF
   \   000030   24FD         ADD     A,#-0x3
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??MT_SysCommandProcessing_5 & 0xFFFF
   \   000037   14           DEC     A
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??MT_SysCommandProcessing_6 & 0xFFFF
   \   00003D   14           DEC     A
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??MT_SysCommandProcessing_7 & 0xFFFF
   \   000043   14           DEC     A
   \   000044   7003         JNZ     $+5
   \   000046   02....       LJMP    ??MT_SysCommandProcessing_8 & 0xFFFF
   \   000049   14           DEC     A
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??MT_SysCommandProcessing_9 & 0xFFFF
   \   00004F   14           DEC     A
   \   000050   7003         JNZ     $+5
   \   000052   02....       LJMP    ??MT_SysCommandProcessing_10 & 0xFFFF
   \   000055   14           DEC     A
   \   000056   7003         JNZ     $+5
   \   000058   02....       LJMP    ??MT_SysCommandProcessing_11 & 0xFFFF
   \   00005B   14           DEC     A
   \   00005C   7003         JNZ     $+5
   \   00005E   02....       LJMP    ??MT_SysCommandProcessing_12 & 0xFFFF
   \   000061   14           DEC     A
   \   000062   7003         JNZ     $+5
   \   000064   02....       LJMP    ??MT_SysCommandProcessing_13 & 0xFFFF
   \   000067   14           DEC     A
   \   000068   7003         JNZ     $+5
   \   00006A   02....       LJMP    ??MT_SysCommandProcessing_14 & 0xFFFF
   \   00006D   14           DEC     A
   \   00006E   7003         JNZ     $+5
   \   000070   02....       LJMP    ??MT_SysCommandProcessing_15 & 0xFFFF
   \   000073   14           DEC     A
   \   000074   7003         JNZ     $+5
   \   000076   02....       LJMP    ??MT_SysCommandProcessing_16 & 0xFFFF
   \   000079   14           DEC     A
   \   00007A   7003         JNZ     $+5
   \   00007C   02....       LJMP    ??MT_SysCommandProcessing_17 & 0xFFFF
   \   00007F   14           DEC     A
   \   000080   7003         JNZ     $+5
   \   000082   02....       LJMP    ??MT_SysCommandProcessing_18 & 0xFFFF
   \   000085   24F8         ADD     A,#-0x8
   \   000087   7003         JNZ     $+5
   \   000089   02....       LJMP    ??MT_SysCommandProcessing_6 & 0xFFFF
   \   00008C   14           DEC     A
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??MT_SysCommandProcessing_7 & 0xFFFF
   \   000092   24FD         ADD     A,#-0x3
   \   000094   7003         JNZ     $+5
   \   000096   02....       LJMP    ??MT_SysCommandProcessing_19 & 0xFFFF
   \   000099   24FE         ADD     A,#-0x2
   \   00009B   7003         JNZ     $+5
   \   00009D   02....       LJMP    ??MT_SysCommandProcessing_20 & 0xFFFF
   \   0000A0   14           DEC     A
   \   0000A1   7003         JNZ     $+5
   \   0000A3   02....       LJMP    ??MT_SysCommandProcessing_21 & 0xFFFF
   \   0000A6   24F3         ADD     A,#-0xd
   \   0000A8   7003         JNZ     $+5
   \   0000AA   02....       LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
   \   0000AD   14           DEC     A
   \   0000AE   7003         JNZ     $+5
   \   0000B0   02....       LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
   \   0000B3   14           DEC     A
   \   0000B4   7003         JNZ     $+5
   \   0000B6   02....       LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
   \   0000B9   14           DEC     A
   \   0000BA   7003         JNZ     $+5
   \   0000BC   02....       LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
   \   0000BF   14           DEC     A
   \   0000C0   7003         JNZ     $+5
   \   0000C2   02....       LJMP    ??MT_SysCommandProcessing_23 & 0xFFFF
   \   0000C5   14           DEC     A
   \   0000C6   7003         JNZ     $+5
   \   0000C8   02....       LJMP    ??MT_SysCommandProcessing_24 & 0xFFFF
   \   0000CB   14           DEC     A
   \   0000CC   7003         JNZ     $+5
   \   0000CE   02....       LJMP    ??MT_SysCommandProcessing_25 & 0xFFFF
   \   0000D1   14           DEC     A
   \   0000D2   7003         JNZ     $+5
   \   0000D4   02....       LJMP    ??MT_SysCommandProcessing_26 & 0xFFFF
   \   0000D7   14           DEC     A
   \   0000D8   7003         JNZ     $+5
   \   0000DA   02....       LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
   \   0000DD   24F8         ADD     A,#-0x8
   \   0000DF   7003         JNZ     $+5
   \   0000E1   02....       LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
   \   0000E4   14           DEC     A
   \   0000E5   7003         JNZ     $+5
   \   0000E7   02....       LJMP    ??MT_SysCommandProcessing_27 & 0xFFFF
   \   0000EA   14           DEC     A
   \   0000EB   7003         JNZ     $+5
   \   0000ED   02....       LJMP    ??MT_SysCommandProcessing_28 & 0xFFFF
   \   0000F0   14           DEC     A
   \   0000F1   7003         JNZ     $+5
   \   0000F3   02....       LJMP    ??MT_SysCommandProcessing_20 & 0xFFFF
   \   0000F6   24B3         ADD     A,#-0x4d
   \   0000F8   7003         JNZ     $+5
   \   0000FA   02....       LJMP    ??MT_SysCommandProcessing_29 & 0xFFFF
   \   0000FD   02....       LJMP    ??MT_SysCommandProcessing_30 & 0xFFFF
    257            {
    258              case MT_SYS_RESET_REQ:
    259                MT_SysReset(pBuf);
   \                     ??MT_SysCommandProcessing_0:
   \   000100                ; Setup parameters for call to function MT_SysReset
   \   000100   12....       LCALL   `??MT_SysReset::?relay`; Banked call to: MT_SysReset
    260                break;
   \   000103   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    261          
    262              case MT_SYS_PING:
    263                MT_SysPing();
   \                     ??MT_SysCommandProcessing_1:
   \   000106                ; Setup parameters for call to function MT_SysPing
   \   000106   12....       LCALL   `??MT_SysPing::?relay`; Banked call to: MT_SysPing
    264                break;
   \   000109   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    265          
    266              case MT_SYS_VERSION:
    267                MT_SysVersion();
   \                     ??MT_SysCommandProcessing_2:
   \   00010C                ; Setup parameters for call to function MT_SysVersion
   \   00010C   12....       LCALL   `??MT_SysVersion::?relay`; Banked call to: MT_SysVersion
    268                break;
   \   00010F   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    269          
    270              case MT_SYS_SET_EXTADDR:
    271                MT_SysSetExtAddr(pBuf);
   \                     ??MT_SysCommandProcessing_3:
   \   000112                ; Setup parameters for call to function MT_SysSetExtAddr
   \   000112   12....       LCALL   `??MT_SysSetExtAddr::?relay`; Banked call to: MT_SysSetExtAddr
    272                break;
   \   000115   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    273          
    274              case MT_SYS_GET_EXTADDR:
    275                MT_SysGetExtAddr();
   \                     ??MT_SysCommandProcessing_4:
   \   000118                ; Setup parameters for call to function MT_SysGetExtAddr
   \   000118   12....       LCALL   `??MT_SysGetExtAddr::?relay`; Banked call to: MT_SysGetExtAddr
    276                break;
   \   00011B   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    277          
    278          // CC253X MAC Network Processor does not have NV support
    279          #if !defined(CC253X_MACNP)
    280              case MT_SYS_OSAL_NV_DELETE:
    281                MT_SysOsalNVDelete(pBuf);
   \                     ??MT_SysCommandProcessing_16:
   \   00011E                ; Setup parameters for call to function MT_SysOsalNVDelete
   \   00011E   12....       LCALL   `??MT_SysOsalNVDelete::?relay`; Banked call to: MT_SysOsalNVDelete
    282                break;
   \   000121   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    283          
    284              case MT_SYS_OSAL_NV_ITEM_INIT:
    285                MT_SysOsalNVItemInit(pBuf);
   \                     ??MT_SysCommandProcessing_5:
   \   000124                ; Setup parameters for call to function MT_SysOsalNVItemInit
   \   000124   12....       LCALL   `??MT_SysOsalNVItemInit::?relay`; Banked call to: MT_SysOsalNVItemInit
    286                break;
   \   000127   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    287          
    288              case MT_SYS_OSAL_NV_LENGTH:
    289                MT_SysOsalNVLength(pBuf);
   \                     ??MT_SysCommandProcessing_17:
   \   00012A                ; Setup parameters for call to function MT_SysOsalNVLength
   \   00012A   12....       LCALL   `??MT_SysOsalNVLength::?relay`; Banked call to: MT_SysOsalNVLength
    290                break;
   \   00012D   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    291          
    292              case MT_SYS_OSAL_NV_READ:
    293                MT_SysOsalNVRead(pBuf);
    294                break;
    295          
    296              case MT_SYS_OSAL_NV_WRITE:
    297                MT_SysOsalNVWrite(pBuf);
    298                break;
    299          
    300              case MT_SYS_OSAL_NV_READ_EXT:
    301                MT_SysOsalNVRead(pBuf);
   \                     ??MT_SysCommandProcessing_6:
   \   000130                ; Setup parameters for call to function MT_SysOsalNVRead
   \   000130   12....       LCALL   `??MT_SysOsalNVRead::?relay`; Banked call to: MT_SysOsalNVRead
    302                break;
   \   000133   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    303                
    304              case MT_SYS_OSAL_NV_WRITE_EXT:
    305                MT_SysOsalNVWrite(pBuf);
   \                     ??MT_SysCommandProcessing_7:
   \   000136                ; Setup parameters for call to function MT_SysOsalNVWrite
   \   000136   12....       LCALL   `??MT_SysOsalNVWrite::?relay`; Banked call to: MT_SysOsalNVWrite
    306                break;
   \   000139   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    307          #endif
    308          
    309              case MT_SYS_OSAL_START_TIMER:
    310                MT_SysOsalStartTimer(pBuf);
   \                     ??MT_SysCommandProcessing_8:
   \   00013C                ; Setup parameters for call to function MT_SysOsalStartTimer
   \   00013C   12....       LCALL   `??MT_SysOsalStartTimer::?relay`; Banked call to: MT_SysOsalStartTimer
    311                break;
   \   00013F   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    312          
    313              case MT_SYS_OSAL_STOP_TIMER:
    314                MT_SysOsalStopTimer(pBuf);
   \                     ??MT_SysCommandProcessing_9:
   \   000142                ; Setup parameters for call to function MT_SysOsalStopTimer
   \   000142   12....       LCALL   `??MT_SysOsalStopTimer::?relay`; Banked call to: MT_SysOsalStopTimer
    315                break;
   \   000145   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    316          
    317              case MT_SYS_RANDOM:
    318                MT_SysRandom();
   \                     ??MT_SysCommandProcessing_10:
   \   000148                ; Setup parameters for call to function MT_SysRandom
   \   000148   12....       LCALL   `??MT_SysRandom::?relay`; Banked call to: MT_SysRandom
    319                break;
   \   00014B   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    320          
    321              case MT_SYS_ADC_READ:
    322                MT_SysAdcRead(pBuf);
   \                     ??MT_SysCommandProcessing_11:
   \   00014E                ; Setup parameters for call to function MT_SysAdcRead
   \   00014E   12....       LCALL   `??MT_SysAdcRead::?relay`; Banked call to: MT_SysAdcRead
    323                break;
   \   000151   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    324          
    325              case MT_SYS_GPIO:
    326                MT_SysGpio(pBuf);
   \                     ??MT_SysCommandProcessing_12:
   \   000154                ; Setup parameters for call to function MT_SysGpio
   \   000154   12....       LCALL   `??MT_SysGpio::?relay`; Banked call to: MT_SysGpio
    327                break;
   \   000157   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    328          
    329              case MT_SYS_STACK_TUNE:
    330                MT_SysStackTune(pBuf);
   \                     ??MT_SysCommandProcessing_13:
   \   00015A                ; Setup parameters for call to function MT_SysStackTune
   \   00015A   12....       LCALL   `??MT_SysStackTune::?relay`; Banked call to: MT_SysStackTune
    331                break;
   \   00015D   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    332          
    333              case MT_SYS_SET_TIME:
    334                MT_SysSetUtcTime(pBuf);
   \                     ??MT_SysCommandProcessing_14:
   \   000160                ; Setup parameters for call to function MT_SysSetUtcTime
   \   000160   12....       LCALL   `??MT_SysSetUtcTime::?relay`; Banked call to: MT_SysSetUtcTime
    335                break;
   \   000163   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    336          
    337              case MT_SYS_GET_TIME:
    338                MT_SysGetUtcTime();
   \                     ??MT_SysCommandProcessing_15:
   \   000166                ; Setup parameters for call to function MT_SysGetUtcTime
   \   000166   12....       LCALL   `??MT_SysGetUtcTime::?relay`; Banked call to: MT_SysGetUtcTime
    339                break;
   \   000169   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    340          
    341              case MT_SYS_SET_TX_POWER:
    342                MT_SysSetTxPower(pBuf);
   \                     ??MT_SysCommandProcessing_18:
   \   00016C                ; Setup parameters for call to function MT_SysSetTxPower
   \   00016C   12....       LCALL   `??MT_SysSetTxPower::?relay`; Banked call to: MT_SysSetTxPower
    343                break;
   \   00016F   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    344                
    345          #if defined ( MT_SYS_JAMMER_FEATURE )
    346              case MT_SYS_JAMMER_PARAMETERS:
    347                MT_SysJammerParameters( pBuf );
    348                break;
    349          #endif      
    350          
    351          #if defined ( MT_SYS_SNIFFER_FEATURE )
    352              case MT_SYS_SNIFFER_PARAMETERS:
    353                MT_SysSnifferParameters( pBuf );
    354                break;
    355          #endif      
    356          
    357          #if defined ( FEATURE_SYSTEM_STATS )
    358              case MT_SYS_ZDIAGS_INIT_STATS:
    359                MT_SysZDiagsInitStats();
    360                break;
    361          
    362              case MT_SYS_ZDIAGS_CLEAR_STATS:
    363                MT_SysZDiagsClearStats(pBuf);
    364                break;
    365          
    366              case MT_SYS_ZDIAGS_GET_STATS:
    367                MT_SysZDiagsGetStatsAttr(pBuf);
    368                 break;
    369          
    370              case MT_SYS_ZDIAGS_RESTORE_STATS_NV:
    371                MT_SysZDiagsRestoreStatsFromNV();
    372                break;
    373          
    374              case MT_SYS_ZDIAGS_SAVE_STATS_TO_NV:
    375                MT_SysZDiagsSaveStatsToNV();
    376                break;
    377          #endif /* FEATURE_SYSTEM_STATS */
    378          
    379          //chaokw
    380              case MT_SYS_P2P_TRANSFER:
    381                MT_SysP2PTransfer(pBuf);
   \                     ??MT_SysCommandProcessing_19:
   \   000172                ; Setup parameters for call to function MT_SysP2PTransfer
   \   000172   12....       LCALL   `??MT_SysP2PTransfer::?relay`; Banked call to: MT_SysP2PTransfer
    382                break;
   \   000175   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    383              case MT_SYS_GROUP_TRANSFER:
    384                MT_SysGroupTransfer(pBuf);
    385                break;
    386              case MT_SYS_BROADCAST_TRANSFER:
    387                MT_SysBroadCastTransfer(pBuf);
   \                     ??MT_SysCommandProcessing_21:
   \   000178                ; Setup parameters for call to function MT_SysBroadCastTransfer
   \   000178   12....       LCALL   `??MT_SysBroadCastTransfer::?relay`; Banked call to: MT_SysBroadCastTransfer
    388                break;
   \   00017B   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
    389          
    390              case MT_SYS_CHANNEL_UPDATE:
    391                MT_SysChannelUpdate( pBuf );
   \                     ??MT_SysCommandProcessing_23:
   \   00017E                ; Setup parameters for call to function osal_msg_allocate
   \   00017E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000181   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000184   8A..         MOV     ?V0,R2
   \   000186   8B..         MOV     ?V1,R3
   \   000188   EA           MOV     A,R2
   \   000189   45..         ORL     A,?V1
   \   00018B   7003         JNZ     $+5
   \   00018D   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
   \   000190   8A82         MOV     DPL,R2
   \   000192   8B83         MOV     DPH,R3
   \   000194   74E6         MOV     A,#-0x1a
   \   000196   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000199   6013         JZ      ??MT_SysCommandProcessing_32
   \   00019B   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00019E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001A1   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0001A4   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001A7   7403         MOV     A,#0x3
   \   0001A9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001AC   8003         SJMP    ??CrossCallReturnLabel_56
   \                     ??MT_SysCommandProcessing_32:
   \   0001AE   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0001B1                ; Setup parameters for call to function osal_msg_send
   \   0001B1   02....       LJMP    ??CrossCallReturnLabel_60 & 0xFFFF
    392                break;
    393          
    394              case MT_SYS_MAC_REQ:
    395                MT_SysMACReq( pBuf );
   \                     ??MT_SysCommandProcessing_24:
   \   0001B4                ; Setup parameters for call to function osal_msg_allocate
   \   0001B4   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0001B7   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0001BA   8A..         MOV     ?V0,R2
   \   0001BC   8B..         MOV     ?V1,R3
   \   0001BE   EA           MOV     A,R2
   \   0001BF   45..         ORL     A,?V1
   \   0001C1   7003         JNZ     $+5
   \   0001C3   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
   \   0001C6   8A82         MOV     DPL,R2
   \   0001C8   8B83         MOV     DPH,R3
   \   0001CA   74E7         MOV     A,#-0x19
   \   0001CC   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0001CF   6013         JZ      ??MT_SysCommandProcessing_33
   \   0001D1   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0001D4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001D7   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001DA   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001DD   7403         MOV     A,#0x3
   \   0001DF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E2   8003         SJMP    ??CrossCallReturnLabel_57
   \                     ??MT_SysCommandProcessing_33:
   \   0001E4   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0001E7                ; Setup parameters for call to function osal_msg_send
   \   0001E7   02....       LJMP    ??CrossCallReturnLabel_60 & 0xFFFF
    396                break;
    397          
    398              case MT_SYS_ACTIVE_CNT_REQ:
    399                MT_SysActiveCntReq( pBuf );
   \                     ??MT_SysCommandProcessing_27:
   \   0001EA                ; Setup parameters for call to function osal_msg_allocate
   \   0001EA   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001ED   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0001F0   8A..         MOV     ?V0,R2
   \   0001F2   8B..         MOV     ?V1,R3
   \   0001F4   EA           MOV     A,R2
   \   0001F5   45..         ORL     A,?V1
   \   0001F7   7003         JNZ     $+5
   \   0001F9   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
   \   0001FC   8A82         MOV     DPL,R2
   \   0001FE   8B83         MOV     DPH,R3
   \   000200   74ED         MOV     A,#-0x13
   \   000202   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000205   6013         JZ      ??MT_SysCommandProcessing_34
   \   000207   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00020A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00020D   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000210   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000213   7403         MOV     A,#0x3
   \   000215   12....       LCALL   ?DEALLOC_XSTACK8
   \   000218   8003         SJMP    ??CrossCallReturnLabel_58
   \                     ??MT_SysCommandProcessing_34:
   \   00021A   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00021D                ; Setup parameters for call to function osal_msg_send
   \   00021D   02....       LJMP    ??CrossCallReturnLabel_60 & 0xFFFF
    400                break;
    401          
    402              case MT_SYS_FW_VERSION_REQ:
    403                MT_SysGetFWVersionReq( pBuf );
   \                     ??MT_SysCommandProcessing_25:
   \   000220                ; Setup parameters for call to function MT_SysPkgSendMsg
   \   000220   75..03       MOV     ?V0,#0x3
   \   000223   78..         MOV     R0,#?V0
   \   000225   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000228   7B00         MOV     R3,#0x0
   \   00022A   EE           MOV     A,R6
   \   00022B   FC           MOV     R4,A
   \   00022C   EF           MOV     A,R7
   \   00022D   FD           MOV     R5,A
   \   00022E   7AE8         MOV     R2,#-0x18
   \   000230   8010         SJMP    ??MT_SysCommandProcessing_35
    404                break;
    405          
    406              case MT_SYS_FW_UPDATE_REQ:
    407                MT_SysFWUpdateReq( pBuf );
   \                     ??MT_SysCommandProcessing_26:
   \   000232                ; Setup parameters for call to function MT_SysPkgSendMsg
   \   000232   75..03       MOV     ?V0,#0x3
   \   000235   78..         MOV     R0,#?V0
   \   000237   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00023A   7B00         MOV     R3,#0x0
   \   00023C   EE           MOV     A,R6
   \   00023D   FC           MOV     R4,A
   \   00023E   EF           MOV     A,R7
   \   00023F   FD           MOV     R5,A
   \   000240   7AE9         MOV     R2,#-0x17
   \                     ??MT_SysCommandProcessing_35:
   \   000242   90....       MOV     DPTR,#GenericApp_TaskID
   \   000245   E0           MOVX    A,@DPTR
   \   000246   F9           MOV     R1,A
   \   000247   12....       LCALL   `??MT_SysPkgSendMsg::?relay`; Banked call to: MT_SysPkgSendMsg
   \   00024A   8061         SJMP    ??MT_SysCommandProcessing_36
    408                break;
    409          
    410              case MT_SYS_MULTIWAY_SET_REQ:
    411                MT_SysMultiwaySetReq( pBuf );
   \                     ??MT_SysCommandProcessing_28:
   \   00024C                ; Setup parameters for call to function osal_msg_allocate
   \   00024C   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00024F   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000252   8A..         MOV     ?V0,R2
   \   000254   8B..         MOV     ?V1,R3
   \   000256   EA           MOV     A,R2
   \   000257   45..         ORL     A,?V1
   \   000259   7003         JNZ     $+5
   \   00025B   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
   \   00025E   8A82         MOV     DPL,R2
   \   000260   8B83         MOV     DPH,R3
   \   000262   74EC         MOV     A,#-0x14
   \   000264   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000267   6013         JZ      ??MT_SysCommandProcessing_37
   \   000269   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00026C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00026F   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000272   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000275   7403         MOV     A,#0x3
   \   000277   12....       LCALL   ?DEALLOC_XSTACK8
   \   00027A   8068         SJMP    ??CrossCallReturnLabel_60
   \                     ??MT_SysCommandProcessing_37:
   \   00027C   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00027F                ; Setup parameters for call to function osal_msg_send
   \   00027F   8063         SJMP    ??CrossCallReturnLabel_60
    412                break;
    413          
    414              case MT_SYS_MULTIWAY_SEND_REQ:
    415                MT_SysMultiwaySendReq( pBuf );
   \                     ??MT_SysCommandProcessing_20:
   \   000281                ; Setup parameters for call to function MT_SysGroupTransfer
   \   000281   12....       LCALL   `??MT_SysGroupTransfer::?relay`; Banked call to: MT_SysGroupTransfer
    416                break;		
   \   000284   806F         SJMP    ??MT_SysCommandProcessing_31
    417          
    418              case NODE_AUTH_MSG_CMD_ADD:
    419              case NODE_AUTH_MSG_CMD_COUNT:
    420              case NODE_AUTH_MSG_CMD_GET:
    421              case NODE_AUTH_MSG_CMD_DEL:
    422              case NODE_AUTH_MSG_CMD_WIPE:
    423              case NODE_AUTH_MSG_CMD_RESET_NET:
    424                Node_auth_uart_msg_process(0, 
    425                      pBuf[MT_RPC_POS_CMD0], 
    426                      pBuf[MT_RPC_POS_CMD1], 
    427                      &pBuf[MT_RPC_POS_DAT0],
    428                      pBuf[MT_RPC_POS_LEN]);
   \                     ??MT_SysCommandProcessing_22:
   \   000286                ; Setup parameters for call to function Node_auth_uart_msg_process
   \   000286   8E82         MOV     DPL,R6
   \   000288   8F83         MOV     DPH,R7
   \   00028A   E0           MOVX    A,@DPTR
   \   00028B   F5..         MOV     ?V0,A
   \   00028D   78..         MOV     R0,#?V0
   \   00028F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000292   EE           MOV     A,R6
   \   000293   2403         ADD     A,#0x3
   \   000295   FC           MOV     R4,A
   \   000296   E4           CLR     A
   \   000297   3F           ADDC    A,R7
   \   000298   FD           MOV     R5,A
   \   000299   8E82         MOV     DPL,R6
   \   00029B   8F83         MOV     DPH,R7
   \   00029D   A3           INC     DPTR
   \   00029E   A3           INC     DPTR
   \   00029F   E0           MOVX    A,@DPTR
   \   0002A0   FB           MOV     R3,A
   \   0002A1   8E82         MOV     DPL,R6
   \   0002A3   8F83         MOV     DPH,R7
   \   0002A5   A3           INC     DPTR
   \   0002A6   E0           MOVX    A,@DPTR
   \   0002A7   FA           MOV     R2,A
   \   0002A8   7900         MOV     R1,#0x0
   \   0002AA   12....       LCALL   `??Node_auth_uart_msg_process::?relay`; Banked call to: Node_auth_uart_msg_process
   \                     ??MT_SysCommandProcessing_36:
   \   0002AD   7401         MOV     A,#0x1
   \   0002AF   12....       LCALL   ?DEALLOC_XSTACK8
    429                break;
   \   0002B2   8041         SJMP    ??MT_SysCommandProcessing_31
    430          
    431              case MT_SYS_NWKINFO_REQ:
    432                MT_SysNWKInfoReq( pBuf );
   \                     ??MT_SysCommandProcessing_29:
   \   0002B4                ; Setup parameters for call to function osal_msg_allocate
   \   0002B4   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0002B7   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0002BA   8A..         MOV     ?V0,R2
   \   0002BC   8B..         MOV     ?V1,R3
   \   0002BE   EA           MOV     A,R2
   \   0002BF   45..         ORL     A,?V1
   \   0002C1   6032         JZ      ??MT_SysCommandProcessing_31
   \   0002C3   8A82         MOV     DPL,R2
   \   0002C5   8B83         MOV     DPH,R3
   \   0002C7   74EE         MOV     A,#-0x12
   \   0002C9   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0002CC   6013         JZ      ??MT_SysCommandProcessing_38
   \   0002CE   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0002D1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002D4   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0002D7   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002DA   7403         MOV     A,#0x3
   \   0002DC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002DF   8003         SJMP    ??CrossCallReturnLabel_60
   \                     ??MT_SysCommandProcessing_38:
   \   0002E1   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0002E4                ; Setup parameters for call to function osal_msg_send
   \   0002E4   AA..         MOV     R2,?V0
   \   0002E6   AB..         MOV     R3,?V1
   \   0002E8   90....       MOV     DPTR,#GenericApp_TaskID
   \   0002EB   E0           MOVX    A,@DPTR
   \   0002EC   F9           MOV     R1,A
   \   0002ED   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0002F0   8003         SJMP    ??MT_SysCommandProcessing_31
    433                break;
    434          
    435              default:
    436                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_SysCommandProcessing_30:
   \   0002F2   75..02       MOV     ?V2,#0x2
    437                break;
    438            }
    439          
    440            return status;
   \                     ??MT_SysCommandProcessing_31:
   \   0002F5   A9..         MOV     R1,?V2
   \   0002F7   7F0B         MOV     R7,#0xb
   \   0002F9   02....       LJMP    ?BANKED_LEAVE_XDATA
    441          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EA           MOV     A,R2
   \   000001   2427         ADD     A,#0x27
   \   000003   F5..         MOV     ?V4,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V1
   \   000008   F5..         MOV     ?V5,A
   \   00000A   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00000D   E5..         MOV     A,?V4
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   E5..         MOV     A,?V5
   \   000013   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000016   A982         MOV     R1,DPL
   \   000018   AA83         MOV     R2,DPH
   \   00001A   89..         MOV     ?V8,R1
   \   00001C   8A..         MOV     ?V9,R2
   \   00001E   75..00       MOV     ?V10,#0x0
   \   000021   78..         MOV     R0,#?V8
   \   000023   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2427         ADD     A,#0x27
   \   000007   FA           MOV     R2,A
   \   000008   E4           CLR     A
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E5..         MOV     A,?V0
   \   000002   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FC           MOV     R4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FD           MOV     R5,A
   \   00000A   AA..         MOV     R2,?V4
   \   00000C   AB..         MOV     R3,?V5
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F8           MOV     R0,A
   \   000007   EA           MOV     A,R2
   \   000008   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00000B   E8           MOV     A,R0
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   E8           MOV     A,R0
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   2420         ADD     A,#0x20
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   35..         ADDC    A,?V1
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    442          
    443          /**************************************************************************************************
    444           * @fn      MT_SysReset
    445           *
    446           * @brief   Reset the device.
    447           * @param   typID: 0=reset, 1=serial bootloader, 
    448           *
    449           * @return  None
    450           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    451          void MT_SysReset( uint8 *pBuf )
   \                     MT_SysReset:
    452          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    453            switch( pBuf[MT_RPC_POS_DAT0] )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6009         JZ      ??MT_SysReset_0
   \   00000E   14           DEC     A
   \   00000F   6012         JZ      ??MT_SysReset_1
   \   000011   24FE         ADD     A,#-0x2
   \   000013   600E         JZ      ??MT_SysReset_1
   \   000015   800F         SJMP    ??MT_SysReset_2
    454            {
    455              case MT_SYS_RESET_HARD:
    456                SystemReset();
   \                     ??MT_SysReset_0:
   \   000017   C2AF         CLR     0xa8.7
   \   000019   C2AF         CLR     0xa8.7
   \   00001B   75C9AB       MOV     0xc9,#-0x55
   \   00001E   75C95B       MOV     0xc9,#0x5b
   \                     ??MT_SysReset_3:
   \   000021   80FE         SJMP    ??MT_SysReset_3
    457                break;
    458                
    459              case MT_SYS_RESET_SOFT:
    460          #if !(defined(HAL_BOARD_F2618) || defined(HAL_BOARD_F5438) || defined(HAL_BOARD_LM3S))
    461                SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
    462          #endif
    463                break;
    464                
    465              case MT_SYS_RESET_SHUTDOWN:
    466                {
    467                  // Disable interrupts and put into deep sleep, use hardware reset to wakeup
    468                  powerOffSoc();
    469                }
    470                break;
    471          
    472              case MT_SYS_RESET_CLEAR_NV:
    473          #if defined ( NV_RESTORE )		
    474                NLME_InitNV();
    475                NLME_SetDefaultNV();
    476                ZDSecMgrClearNVKeyValues();
    477          #endif	  
    478                Onboard_soft_reset();
   \                     ??MT_SysReset_1:
   \   000023                ; Setup parameters for call to function Onboard_soft_reset
   \   000023   12....       LCALL   Onboard_soft_reset & 0xFFFF
    479                break;  
    480            }
    481          
    482          }
   \                     ??MT_SysReset_2:
   \   000026   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   \   000029                REQUIRE _A_IEN0
   \   000029                REQUIRE WDCTL

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    483          
    484          /***************************************************************************************************
    485           * @fn      MT_SysPing
    486           *
    487           * @brief   Process the Ping command
    488           *
    489           * @param   None
    490           *
    491           * @return  None
    492           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    493          void MT_SysPing(void)
   \                     MT_SysPing:
    494          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    495            uint16 tmp16;
    496            uint8 retArray[2];
    497          
    498            /* Build Capabilities */
    499            tmp16 = MT_CAP_SYS | MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF | MT_CAP_ZDO |
    500                    MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG | MT_CAP_APP | MT_CAP_GP | MT_CAP_ZOAD;
    501          
    502            /* Convert to high byte first into temp buffer */
    503            retArray[0] = LO_UINT16( tmp16 );
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7411         MOV     A,#0x11
   \   000011   F0           MOVX    @DPTR,A
    504            retArray[1] = HI_UINT16( tmp16 );
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    505          
    506            /* Build and send back the response */
    507            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_PING,
    508                                          sizeof (tmp16), retArray );
   \                     ??CrossCallReturnLabel_89:
   \   00001B   7A01         MOV     R2,#0x1
   \   00001D   02....       LJMP    ?Subroutine0 & 0xFFFF
    509          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   7B02         MOV     R3,#0x2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7961         MOV     R1,#0x61
   \   000002   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005   7402         MOV     A,#0x2
   \   000007                REQUIRE ??Subroutine43_0
   \   000007                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine44_0
   \   000003                ; // Fall through to label ??Subroutine44_0
    510          
    511          /***************************************************************************************************
    512           * @fn      MT_SysVersion
    513           *
    514           * @brief   Process the Version command
    515           *
    516           * @param   None
    517           *
    518           * @return  None
    519           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    520          void MT_SysVersion(void)
   \                     MT_SysVersion:
    521          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    522          #if !defined INCLUDE_REVISION_INFORMATION
    523            /* Build and send back the response */
    524            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
    525                                         sizeof(MTVersionString), (uint8 *)MTVersionString);
   \   000004                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000004   7C..         MOV     R4,#MTVersionString & 0xff
   \   000006   7D..         MOV     R5,#(MTVersionString >> 8) & 0xff
   \   000008   7B05         MOV     R3,#0x5
   \   00000A   7A02         MOV     R2,#0x2
   \   00000C   7961         MOV     R1,#0x61
   \   00000E   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    526          
    527          #else
    528            uint8 verStr[sizeof(MTVersionString) + 4];
    529            uint8 *pBuf = &verStr[sizeof(MTVersionString)];
    530            
    531          #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
    532            uint32 sblSig;
    533            uint32 sblRev;
    534          #endif
    535          
    536            osal_memcpy(verStr, (uint8 *)MTVersionString, sizeof(MTVersionString));
    537          
    538          #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
    539            HalFlashRead(SBL_SIG_ADDR / HAL_FLASH_PAGE_SIZE,
    540                         SBL_SIG_ADDR % HAL_FLASH_PAGE_SIZE,
    541                         (uint8 *)&sblSig, sizeof(sblSig));
    542          
    543            if (sblSig == SBL_SIGNATURE)
    544            {
    545              // SBL is supported and its revision is provided (in a known flash location)
    546              HalFlashRead(SBL_REV_ADDR / HAL_FLASH_PAGE_SIZE,
    547                           SBL_REV_ADDR % HAL_FLASH_PAGE_SIZE,
    548                           (uint8 *)&sblRev, sizeof(sblRev));
    549            }
    550            else
    551            {
    552              //  SBL is supported but its revision is not provided
    553              sblRev = 0x00000000;
    554            }
    555          #else
    556            // SBL is NOT supported
    557            sblRev = 0xFFFFFFFF;
    558          #endif
    559          
    560            // Plug the SBL revision indication
    561            UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,sblRev);
    562          
    563            /* Build and send back the response */
    564            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
    565                                         sizeof(verStr), verStr);
    566          
    567          #endif
    568          }
   \   000011   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    569          
    570          /***************************************************************************************************
    571           * @fn      MT_SysSetExtAddr
    572           *
    573           * @brief   Set the Extended Address
    574           *
    575           * @param   pBuf
    576           *
    577           * @return  None
    578           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          void MT_SysSetExtAddr(uint8 *pBuf)
   \                     MT_SysSetExtAddr:
    580          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V1,R3
    581            uint8 retValue = ZFailure;
   \   00000C   12....       LCALL   ?Subroutine24 & 0xFFFF
    582            uint8 cmdId;
    583          
    584            /* parse header */
    585            cmdId = pBuf[MT_RPC_POS_CMD1];
    586            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_50:
   \   00000F   F5..         MOV     ?V0,A
   \   000011   5002         JNC     ??MT_SysSetExtAddr_0
   \   000013   05..         INC     ?V1
    587          
    588            if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
   \                     ??MT_SysSetExtAddr_0:
   \   000015                ; Setup parameters for call to function ZMacSetReq
   \   000015   0A           INC     R2
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   AB..         MOV     R3,?V1
   \   00001A   79E2         MOV     R1,#-0x1e
   \   00001C   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00001F   E9           MOV     A,R1
   \   000020   7028         JNZ     ??MT_SysSetExtAddr_1
    589            {
    590          // CC253X MAC Network Processor does not have NV support
    591          #if !defined(CC253X_MACNP)
    592              retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
   \   000022                ; Setup parameters for call to function osal_nv_write
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   75..08       MOV     ?V0,#0x8
   \   00002A   75..00       MOV     ?V1,#0x0
   \   00002D   78..         MOV     R0,#?V0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7C00         MOV     R4,#0x0
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A01         MOV     R2,#0x1
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   E9           MOV     A,R1
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   F0           MOVX    @DPTR,A
    593          #endif
    594            }
    595          
    596            /* Build and send back the response */
    597            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
   \                     ??MT_SysSetExtAddr_1:
   \   00004A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00004A   AC..         MOV     R4,?XSP + 0
   \   00004C   AD..         MOV     R5,?XSP + 1
   \   00004E   7B01         MOV     R3,#0x1
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   7961         MOV     R1,#0x61
   \   000054   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    598          
    599          }
   \   000057   7401         MOV     A,#0x1
   \   000059   02....       LJMP    ??Subroutine41_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7401         MOV     A,#0x1
   \   000008   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   2403         ADD     A,#0x3
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    600          
    601          /***************************************************************************************************
    602           * @fn      MT_SysGetExtAddr
    603           *
    604           * @brief   Get the Extended Address
    605           *
    606           * @param   None
    607           *
    608           * @return  None
    609           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    610          void MT_SysGetExtAddr(void)
   \                     MT_SysGetExtAddr:
    611          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV     A,#-0x8
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    612            uint8 extAddr[Z_EXTADDR_LEN];
    613          
    614            ZMacGetReq( ZMacExtAddr, extAddr );
   \   000009                ; Setup parameters for call to function ZMacGetReq
   \   000009   AA..         MOV     R2,?XSP + 0
   \   00000B   AB..         MOV     R3,?XSP + 1
   \   00000D   79E2         MOV     R1,#-0x1e
   \   00000F   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    615          
    616            /* Build and send back the response */
    617            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_GET_EXTADDR,
    618                                         Z_EXTADDR_LEN, extAddr);
   \   000012                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000012   AC..         MOV     R4,?XSP + 0
   \   000014   AD..         MOV     R5,?XSP + 1
   \   000016   7B08         MOV     R3,#0x8
   \   000018   7A04         MOV     R2,#0x4
   \   00001A   7961         MOV     R1,#0x61
   \   00001C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    619          }
   \   00001F   7408         MOV     A,#0x8
   \   000021   02....       LJMP    ??Subroutine43_0 & 0xFFFF
    620          
    621          #if !defined(CC253X_MACNP)
    622          /***************************************************************************************************
    623           * @fn      MT_SysOsalNVRead
    624           *
    625           * @brief   Attempt to read an NV value
    626           *
    627           * @param   pBuf - pointer to the data
    628           *
    629           * @return  None
    630           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    631          void MT_SysOsalNVRead(uint8 *pBuf)
   \                     MT_SysOsalNVRead:
    632          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    633            uint8 cmdId;
    634            uint16 nvId;
    635            uint16 dataLen;
    636            uint16 dataOfs;
    637            uint16 nvItemLen;
    638            uint8 error = ZSuccess;
   \   00000E   75..00       MOV     ?V2,#0x0
    639          
    640            /* MT command ID */
    641            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000011   8E82         MOV     DPL,R6
   \   000013   8F83         MOV     DPH,R7
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V3,A
    642            /* Skip over RPC header */
    643            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001A   EE           MOV     A,R6
   \   00001B   2403         ADD     A,#0x3
   \   00001D   FE           MOV     R6,A
   \   00001E   5001         JNC     ??MT_SysOsalNVRead_0
   \   000020   0F           INC     R7
    644          
    645            /* NV item ID */
    646            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVRead_0:
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   12....       LCALL   ?Subroutine9 & 0xFFFF
    647            /* Length of entire NV item data */
    648            nvItemLen = osal_nv_item_len(nvId);
   \                     ??CrossCallReturnLabel_17:
   \   000028                ; Setup parameters for call to function osal_nv_item_len
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00002C   8A..         MOV     ?V4,R2
   \   00002E   8B..         MOV     ?V5,R3
   \   000030   AC..         MOV     R4,?V4
   \   000032   AD..         MOV     R5,?V5
    649          
    650          #if !MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
    651            if ((ZCD_NV_IMPLICIT_CERTIFICATE == nvId) ||
    652                (ZCD_NV_CA_PUBLIC_KEY == nvId)        ||
    653                (ZCD_NV_DEVICE_PRIVATE_KEY == nvId))
   \   000034   7469         MOV     A,#0x69
   \   000036   65..         XRL     A,?V0
   \   000038   7002         JNZ     ??MT_SysOsalNVRead_1
   \   00003A   E5..         MOV     A,?V1
   \                     ??MT_SysOsalNVRead_1:
   \   00003C   6012         JZ      ??MT_SysOsalNVRead_2
   \   00003E   746B         MOV     A,#0x6b
   \   000040   65..         XRL     A,?V0
   \   000042   7002         JNZ     ??MT_SysOsalNVRead_3
   \   000044   E5..         MOV     A,?V1
   \                     ??MT_SysOsalNVRead_3:
   \   000046   6008         JZ      ??MT_SysOsalNVRead_2
   \   000048   746A         MOV     A,#0x6a
   \   00004A   65..         XRL     A,?V0
   \   00004C   45..         ORL     A,?V1
   \   00004E   7003         JNZ     ??MT_SysOsalNVRead_4
    654            {
    655              /* Access to Security Certificate Data is denied */
    656              error = ZInvalidParameter;
   \                     ??MT_SysOsalNVRead_2:
   \   000050   75..02       MOV     ?V2,#0x2
    657            }
    658          #endif
    659          
    660          #if !MT_SYS_KEY_MANAGEMENT
    661            if ( (nvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
    662                 (nvId == ZCD_NV_NWK_ALTERN_KEY_INFO) ||
    663                ((nvId >= ZCD_NV_TCLK_TABLE_START) && (nvId <= ZCD_NV_TCLK_TABLE_END)) ||
    664                ((nvId >= ZCD_NV_APS_LINK_KEY_DATA_START) && (nvId <= ZCD_NV_APS_LINK_KEY_DATA_END)) ||
    665                 (nvId == ZCD_NV_PRECFGKEY) )
   \                     ??MT_SysOsalNVRead_4:
   \   000053   743A         MOV     A,#0x3a
   \   000055   65..         XRL     A,?V0
   \   000057   7002         JNZ     ??MT_SysOsalNVRead_5
   \   000059   E5..         MOV     A,?V1
   \                     ??MT_SysOsalNVRead_5:
   \   00005B   602F         JZ      ??MT_SysOsalNVRead_6
   \   00005D   743B         MOV     A,#0x3b
   \   00005F   65..         XRL     A,?V0
   \   000061   7002         JNZ     ??MT_SysOsalNVRead_7
   \   000063   E5..         MOV     A,?V1
   \                     ??MT_SysOsalNVRead_7:
   \   000065   6025         JZ      ??MT_SysOsalNVRead_6
   \   000067   E5..         MOV     A,?V0
   \   000069   24FF         ADD     A,#-0x1
   \   00006B   F8           MOV     R0,A
   \   00006C   E5..         MOV     A,?V1
   \   00006E   34FE         ADDC    A,#-0x2
   \   000070   F9           MOV     R1,A
   \   000071   C3           CLR     C
   \   000072   E8           MOV     A,R0
   \   000073   94FF         SUBB    A,#-0x1
   \   000075   E9           MOV     A,R1
   \   000076   9400         SUBB    A,#0x0
   \   000078   4012         JC      ??MT_SysOsalNVRead_6
   \   00007A   19           DEC     R1
   \   00007B   C3           CLR     C
   \   00007C   E8           MOV     A,R0
   \   00007D   94FF         SUBB    A,#-0x1
   \   00007F   E9           MOV     A,R1
   \   000080   9400         SUBB    A,#0x0
   \   000082   4008         JC      ??MT_SysOsalNVRead_6
   \   000084   7462         MOV     A,#0x62
   \   000086   65..         XRL     A,?V0
   \   000088   45..         ORL     A,?V1
   \   00008A   7003         JNZ     ??MT_SysOsalNVRead_8
    666            {
    667              /* Access to Security Key Data is denied */
    668              error = ZInvalidParameter;
   \                     ??MT_SysOsalNVRead_6:
   \   00008C   75..02       MOV     ?V2,#0x2
    669            }
    670          #endif //!MT_SYS_KEY_MANAGEMENT
    671            
    672            /* Get NV data offset */
    673            if (cmdId == MT_SYS_OSAL_NV_READ)
   \                     ??MT_SysOsalNVRead_8:
   \   00008F   7408         MOV     A,#0x8
   \   000091   65..         XRL     A,?V3
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   7006         JNZ     ??MT_SysOsalNVRead_9
    674            {
    675              /* MT_SYS_OSAL_NV_READ has 1-byte offset */
    676              dataOfs = (uint16)pBuf[2];
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   FE           MOV     R6,A
   \   00009D   7F00         MOV     R7,#0x0
   \   00009F   800B         SJMP    ??CrossCallReturnLabel_24
    677            }
    678            else
    679            {
    680              /* MT_SYS_OSAL_NV_READ_EXT has 2-byte offset */
    681              dataOfs = BUILD_UINT16(pBuf[2], pBuf[3]);
   \                     ??MT_SysOsalNVRead_9:
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FA           MOV     R2,A
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   12....       LCALL   ?Subroutine12 & 0xFFFF
    682            }
    683            if (nvItemLen <= dataOfs)
   \                     ??CrossCallReturnLabel_24:
   \   0000AC   C3           CLR     C
   \   0000AD   EE           MOV     A,R6
   \   0000AE   9C           SUBB    A,R4
   \   0000AF   EF           MOV     A,R7
   \   0000B0   9D           SUBB    A,R5
   \   0000B1   4006         JC      ??MT_SysOsalNVRead_10
    684            {
    685              /* Offset is past end of data */
    686              error = ZInvalidParameter;
   \   0000B3   75..02       MOV     ?V2,#0x2
   \   0000B6   02....       LJMP    ??MT_SysOsalNVRead_11 & 0xFFFF
    687            }
    688          
    689            if (error == ZSuccess)
   \                     ??MT_SysOsalNVRead_10:
   \   0000B9   E5..         MOV     A,?V2
   \   0000BB   6003         JZ      $+5
   \   0000BD   02....       LJMP    ??MT_SysOsalNVRead_12 & 0xFFFF
    690            {
    691              uint8 *pRetBuf;
    692              uint8 respLen = 2;  /* Response header: [0]=status,[1]=length */
    693          
    694              dataLen = nvItemLen - dataOfs;
   \   0000C0   EC           MOV     A,R4
   \   0000C1   C3           CLR     C
   \   0000C2   9E           SUBB    A,R6
   \   0000C3   F5..         MOV     ?V8,A
   \   0000C5   ED           MOV     A,R5
   \   0000C6   9F           SUBB    A,R7
   \   0000C7   F5..         MOV     ?V9,A
    695              if (dataLen > (uint16)(MT_MAX_RSP_DATA_LEN - respLen))
   \   0000C9   C3           CLR     C
   \   0000CA   E5..         MOV     A,?V8
   \   0000CC   94F8         SUBB    A,#-0x8
   \   0000CE   E5..         MOV     A,?V9
   \   0000D0   9400         SUBB    A,#0x0
   \   0000D2   4006         JC      ??MT_SysOsalNVRead_13
    696              {
    697                /* Data length is limited by TX buffer size and MT protocol */
    698                dataLen = (MT_MAX_RSP_DATA_LEN - respLen);
   \   0000D4   75..F7       MOV     ?V8,#-0x9
   \   0000D7   75..00       MOV     ?V9,#0x0
    699              }
    700              respLen += dataLen;
   \                     ??MT_SysOsalNVRead_13:
   \   0000DA   E5..         MOV     A,?V8
   \   0000DC   2402         ADD     A,#0x2
   \   0000DE   F5..         MOV     ?V4,A
    701          
    702              pRetBuf = osal_mem_alloc(respLen);
   \   0000E0                ; Setup parameters for call to function osal_mem_alloc
   \   0000E0   FA           MOV     R2,A
   \   0000E1   7B00         MOV     R3,#0x0
   \   0000E3   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000E6   8A..         MOV     ?V6,R2
   \   0000E8   8B..         MOV     ?V7,R3
    703              if (pRetBuf != NULL)
   \   0000EA   EA           MOV     A,R2
   \   0000EB   45..         ORL     A,?V7
   \   0000ED   7003         JNZ     $+5
   \   0000EF   02....       LJMP    ??MT_SysOsalNVRead_14 & 0xFFFF
    704              {
    705                osal_memset(&pRetBuf[2], 0, dataLen);
   \   0000F2   EA           MOV     A,R2
   \   0000F3   2402         ADD     A,#0x2
   \   0000F5   F5..         MOV     ?V10,A
   \   0000F7   E4           CLR     A
   \   0000F8   35..         ADDC    A,?V7
   \   0000FA   F5..         MOV     ?V11,A
   \   0000FC                ; Setup parameters for call to function osal_memset
   \   0000FC   AC..         MOV     R4,?V8
   \   0000FE   AD..         MOV     R5,?V9
   \   000100   7900         MOV     R1,#0x0
   \   000102   0A           INC     R2
   \   000103   0A           INC     R2
   \   000104   FB           MOV     R3,A
   \   000105   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    706                if (((osal_nv_read( nvId, dataOfs, dataLen, &pRetBuf[2])) == ZSUCCESS))
   \   000108                ; Setup parameters for call to function osal_nv_read
   \   000108   78..         MOV     R0,#?V10
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   78..         MOV     R0,#?V8
   \   00010F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000112   EE           MOV     A,R6
   \   000113   FC           MOV     R4,A
   \   000114   EF           MOV     A,R7
   \   000115   FD           MOV     R5,A
   \   000116   AA..         MOV     R2,?V0
   \   000118   AB..         MOV     R3,?V1
   \   00011A   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00011D   7404         MOV     A,#0x4
   \   00011F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000122   E9           MOV     A,R1
   \   000123   701B         JNZ     ??MT_SysOsalNVRead_15
    707                {
    708                  pRetBuf[0] = ZSuccess;
   \   000125   85..82       MOV     DPL,?V6
   \   000128   85..83       MOV     DPH,?V7
   \   00012B   E4           CLR     A
   \   00012C   F0           MOVX    @DPTR,A
    709                  pRetBuf[1] = dataLen;
   \   00012D   A3           INC     DPTR
   \   00012E   E5..         MOV     A,?V8
   \   000130   F0           MOVX    @DPTR,A
    710                  MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    711                                                 cmdId, respLen, pRetBuf );
   \   000131                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000131   AC..         MOV     R4,?V6
   \   000133   AD..         MOV     R5,?V7
   \   000135   AB..         MOV     R3,?V4
   \   000137   AA..         MOV     R2,?V3
   \   000139   7961         MOV     R1,#0x61
   \   00013B   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   00013E   8003         SJMP    ??MT_SysOsalNVRead_16
    712                }
    713                else
    714                {
    715                  error = NV_OPER_FAILED;
   \                     ??MT_SysOsalNVRead_15:
   \   000140   75..0A       MOV     ?V2,#0xa
    716                }
    717                osal_mem_free(pRetBuf);
   \                     ??MT_SysOsalNVRead_16:
   \   000143                ; Setup parameters for call to function osal_mem_free
   \   000143   AA..         MOV     R2,?V6
   \   000145   AB..         MOV     R3,?V7
   \   000147   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    718              }
    719              else
    720              {
    721                /* Could not get buffer for NV data */
    722                error = ZMemError;
    723              }
    724            }
    725            
    726            if (error != ZSuccess)
   \                     ??MT_SysOsalNVRead_12:
   \   00014A   E5..         MOV     A,?V2
   \   00014C   601E         JZ      ??MT_SysOsalNVRead_17
    727            {
    728              uint8 tmp[2] = { error, 0 };
   \                     ??MT_SysOsalNVRead_11:
   \   00014E   90....       MOV     DPTR,#`?<Constant {0, 0}>`
   \   000151   AC..         MOV     R4,?XSP + 0
   \   000153   AD..         MOV     R5,?XSP + 1
   \   000155   7402         MOV     A,#0x2
   \   000157   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00015A   85..82       MOV     DPL,?XSP + 0
   \   00015D   85..83       MOV     DPH,?XSP + 1
   \   000160   E5..         MOV     A,?V2
   \   000162   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    729              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    730                                             cmdId, 2, tmp);
    731            }
   \                     ??CrossCallReturnLabel_90:
   \   000165   AA..         MOV     R2,?V3
   \   000167   7961         MOV     R1,#0x61
   \   000169   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    732          }
   \                     ??MT_SysOsalNVRead_17:
   \   00016C   7402         MOV     A,#0x2
   \   00016E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000171   7F0C         MOV     R7,#0xc
   \   000173   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??MT_SysOsalNVRead_14:
   \   000176   75..10       MOV     ?V2,#0x10
   \   000179   80D3         SJMP    ??MT_SysOsalNVRead_11

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   E4           CLR     A
   \   000006   C8           XCH     A,R0
   \   000007   F9           MOV     R1,A
   \   000008   EA           MOV     A,R2
   \   000009   28           ADD     A,R0
   \   00000A   F5..         MOV     ?V0,A
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   F5..         MOV     ?V1,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   28           ADD     A,R0
   \   000008   FE           MOV     R6,A
   \   000009   E4           CLR     A
   \   00000A   39           ADDC    A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
    733          
    734          /***************************************************************************************************
    735           * @fn      MT_SysOsalNVWrite
    736           *
    737           * @brief   Attempt to write an NV item
    738           *
    739           * @param   pBuf - pointer to the data
    740           *
    741           * @return  None
    742           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    743          void MT_SysOsalNVWrite(uint8 *pBuf)
   \                     MT_SysOsalNVWrite:
    744          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V5,R3
    745            uint8 cmdId;
    746            uint16 nvId;
    747            uint16 dataLen;
    748            uint16 dataOfs;
    749            uint16 nvItemLen;
    750            uint8 rtrn = ZSuccess;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   12....       LCALL   ?Subroutine34 & 0xFFFF
    751          
    752            /* MT command ID */
    753            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_76:
   \   000016   F5..         MOV     ?V2,A
    754            /* Skip over RPC header */
    755            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000018   EA           MOV     A,R2
   \   000019   2403         ADD     A,#0x3
   \   00001B   F5..         MOV     ?V4,A
   \   00001D   5002         JNC     ??MT_SysOsalNVWrite_0
   \   00001F   05..         INC     ?V5
    756          
    757            /* NV item ID */
    758            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVWrite_0:
   \   000021   F582         MOV     DPL,A
   \   000023   85..83       MOV     DPH,?V5
   \   000026   12....       LCALL   ?Subroutine9 & 0xFFFF
    759            
    760            /* Get NV data offset & length */
    761            if ( cmdId == MT_SYS_OSAL_NV_WRITE )
   \                     ??CrossCallReturnLabel_18:
   \   000029   7409         MOV     A,#0x9
   \   00002B   65..         XRL     A,?V2
   \   00002D   85..82       MOV     DPL,?V4
   \   000030   85..83       MOV     DPH,?V5
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   7018         JNZ     ??MT_SysOsalNVWrite_1
    762            {
    763              /* MT_SYS_OSAL_NV_WRITE has 1-byte offset & length */
    764              dataOfs = (uint16)pBuf[2];
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FE           MOV     R6,A
   \   000039   7F00         MOV     R7,#0x0
    765              dataLen = (uint16)pBuf[3];
   \   00003B   85..82       MOV     DPL,?V4
   \   00003E   85..83       MOV     DPH,?V5
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V6,A
   \   000047   88..         MOV     ?V7,R0
    766              pBuf += 4;
   \   000049   E5..         MOV     A,?V4
   \   00004B   2404         ADD     A,#0x4
   \   00004D   8026         SJMP    ??MT_SysOsalNVWrite_2
    767            }
    768            else
    769            {
    770              /* MT_SYS_OSAL_NV_WRITE_EXT has 2-byte offset & length */
    771              dataOfs = BUILD_UINT16(pBuf[2], pBuf[3]);
   \                     ??MT_SysOsalNVWrite_1:
   \   00004F   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   EA           MOV     A,R2
   \   000055   FE           MOV     R6,A
   \   000056   E4           CLR     A
   \   000057   39           ADDC    A,R1
   \   000058   FF           MOV     R7,A
    772              dataLen = BUILD_UINT16(pBuf[4], pBuf[5]);
   \   000059   85..82       MOV     DPL,?V4
   \   00005C   85..83       MOV     DPH,?V5
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   EA           MOV     A,R2
   \   00006B   F5..         MOV     ?V6,A
   \   00006D   E4           CLR     A
   \   00006E   39           ADDC    A,R1
   \   00006F   F5..         MOV     ?V7,A
    773              pBuf += 6;
   \   000071   E5..         MOV     A,?V4
   \   000073   2406         ADD     A,#0x6
   \                     ??MT_SysOsalNVWrite_2:
   \   000075   F5..         MOV     ?V4,A
   \   000077   5002         JNC     ??MT_SysOsalNVWrite_3
   \   000079   05..         INC     ?V5
    774            }
    775          
    776            /* Length of entire NV item data */
    777            nvItemLen = osal_nv_item_len(nvId);
    778            if ((dataOfs + dataLen) <= nvItemLen)
   \                     ??MT_SysOsalNVWrite_3:
   \   00007B                ; Setup parameters for call to function osal_nv_item_len
   \   00007B   AA..         MOV     R2,?V0
   \   00007D   AB..         MOV     R3,?V1
   \   00007F   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000082   EE           MOV     A,R6
   \   000083   25..         ADD     A,?V6
   \   000085   F8           MOV     R0,A
   \   000086   EF           MOV     A,R7
   \   000087   35..         ADDC    A,?V7
   \   000089   F9           MOV     R1,A
   \   00008A   C3           CLR     C
   \   00008B   EA           MOV     A,R2
   \   00008C   98           SUBB    A,R0
   \   00008D   EB           MOV     A,R3
   \   00008E   99           SUBB    A,R1
   \   00008F   405A         JC      ??MT_SysOsalNVWrite_4
    779            {
    780              if (dataOfs == 0)
   \   000091   EE           MOV     A,R6
   \   000092   4F           ORL     A,R7
   \   000093   7015         JNZ     ??MT_SysOsalNVWrite_5
    781              {
    782                /* Set the Z-Globals value of this NV item */
    783                zgSetItem( nvId, dataLen, pBuf );
   \   000095                ; Setup parameters for call to function zgSetItem
   \   000095   78..         MOV     R0,#?V4
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   AC..         MOV     R4,?V6
   \   00009C   AD..         MOV     R5,?V7
   \   00009E   AA..         MOV     R2,?V0
   \   0000A0   AB..         MOV     R3,?V1
   \   0000A2   12....       LCALL   `??zgSetItem::?relay`; Banked call to: zgSetItem
   \   0000A5   7402         MOV     A,#0x2
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
    784              }
    785              
    786              if ((osal_nv_write(nvId, dataOfs, dataLen, pBuf)) == ZSUCCESS)
   \                     ??MT_SysOsalNVWrite_5:
   \   0000AA                ; Setup parameters for call to function osal_nv_write
   \   0000AA   78..         MOV     R0,#?V4
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AF   78..         MOV     R0,#?V6
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   EE           MOV     A,R6
   \   0000B5   FC           MOV     R4,A
   \   0000B6   EF           MOV     A,R7
   \   0000B7   FD           MOV     R5,A
   \   0000B8   AA..         MOV     R2,?V0
   \   0000BA   AB..         MOV     R3,?V1
   \   0000BC   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000BF   7404         MOV     A,#0x4
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV     A,R1
   \   0000C5   701A         JNZ     ??MT_SysOsalNVWrite_6
    787              {
    788                if (nvId == ZCD_NV_EXTADDR)
   \   0000C7   7401         MOV     A,#0x1
   \   0000C9   65..         XRL     A,?V0
   \   0000CB   45..         ORL     A,?V1
   \   0000CD   7025         JNZ     ??MT_SysOsalNVWrite_7
    789                {
    790                  rtrn = ZMacSetReq(ZMacExtAddr, pBuf);
   \   0000CF                ; Setup parameters for call to function ZMacSetReq
   \   0000CF   AA..         MOV     R2,?V4
   \   0000D1   AB..         MOV     R3,?V5
   \   0000D3   79E2         MOV     R1,#-0x1e
   \   0000D5   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0000D8   E9           MOV     A,R1
   \   0000D9   85..82       MOV     DPL,?XSP + 0
   \   0000DC   85..83       MOV     DPH,?XSP + 1
   \   0000DF   8012         SJMP    ??MT_SysOsalNVWrite_8
    791                }
    792              }
    793              else
    794              {
    795                rtrn = NV_OPER_FAILED;
   \                     ??MT_SysOsalNVWrite_6:
   \   0000E1   85..82       MOV     DPL,?XSP + 0
   \   0000E4   85..83       MOV     DPH,?XSP + 1
   \   0000E7   740A         MOV     A,#0xa
   \   0000E9   8008         SJMP    ??MT_SysOsalNVWrite_8
    796              }
    797            }
    798            else
    799            {
    800              /* Bad length or/and offset */
    801              rtrn = ZInvalidParameter;
   \                     ??MT_SysOsalNVWrite_4:
   \   0000EB   85..82       MOV     DPL,?XSP + 0
   \   0000EE   85..83       MOV     DPH,?XSP + 1
   \   0000F1   7402         MOV     A,#0x2
   \                     ??MT_SysOsalNVWrite_8:
   \   0000F3   F0           MOVX    @DPTR,A
    802            }
    803          
    804            /* Build and send back the response */
    805            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    806                                           cmdId, 1, &rtrn);
   \                     ??MT_SysOsalNVWrite_7:
   \   0000F4                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000F4   AC..         MOV     R4,?XSP + 0
   \   0000F6   AD..         MOV     R5,?XSP + 1
   \   0000F8   7B01         MOV     R3,#0x1
   \   0000FA   AA..         MOV     R2,?V2
   \   0000FC   7961         MOV     R1,#0x61
   \   0000FE   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    807          }
   \   000101   7401         MOV     A,#0x1
   \   000103   12....       LCALL   ?DEALLOC_XSTACK8
   \   000106   7F0A         MOV     R7,#0xa
   \   000108   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   85..82       MOV     DPL,?V4
   \   000005   85..83       MOV     DPH,?V5
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET
    808          
    809          /***************************************************************************************************
    810           * @fn      MT_SysOsalNVItemInit
    811           *
    812           * @brief   Attempt to create an NV item
    813           *
    814           * @param   pBuf - pointer to the data
    815           *
    816           * @return  None
    817           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    818          void MT_SysOsalNVItemInit(uint8 *pBuf)
   \                     MT_SysOsalNVItemInit:
    819          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V1,R3
    820            uint8 ret;
    821            uint8 idLen;
    822            uint16 nvId;
    823            uint16 nvLen;
    824          
    825            /* Skip over RPC header */
    826            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000C   EA           MOV     A,R2
   \   00000D   2403         ADD     A,#0x3
   \   00000F   F5..         MOV     ?V0,A
   \   000011   5002         JNC     ??MT_SysOsalNVItemInit_0
   \   000013   05..         INC     ?V1
    827          
    828            /* NV item ID */
    829            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVItemInit_0:
   \   000015   F582         MOV     DPL,A
   \   000017   85..83       MOV     DPH,?V1
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ?Subroutine12 & 0xFFFF
    830            /* NV item length */
    831            nvLen = BUILD_UINT16(pBuf[2], pBuf[3]);
   \                     ??CrossCallReturnLabel_25:
   \   00001F   85..82       MOV     DPL,?V0
   \   000022   85..83       MOV     DPH,?V1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FA           MOV     R2,A
   \   000029   85..82       MOV     DPL,?V0
   \   00002C   85..83       MOV     DPH,?V1
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   EA           MOV     A,R2
   \   000035   FC           MOV     R4,A
   \   000036   E4           CLR     A
   \   000037   39           ADDC    A,R1
   \   000038   FD           MOV     R5,A
    832            /* Initialization data length */
    833            idLen = pBuf[4];
   \   000039   85..82       MOV     DPL,?V0
   \   00003C   85..83       MOV     DPH,?V1
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V2,A
    834            pBuf += 5;
   \   000046   E5..         MOV     A,?V0
   \   000048   2405         ADD     A,#0x5
   \   00004A   F5..         MOV     ?V0,A
   \   00004C   5002         JNC     ??MT_SysOsalNVItemInit_1
   \   00004E   05..         INC     ?V1
    835          
    836            if ( idLen < nvLen )
   \                     ??MT_SysOsalNVItemInit_1:
   \   000050   C3           CLR     C
   \   000051   E5..         MOV     A,?V2
   \   000053   9C           SUBB    A,R4
   \   000054   E4           CLR     A
   \   000055   9D           SUBB    A,R5
   \   000056   5045         JNC     ??MT_SysOsalNVItemInit_2
    837            {
    838              /* Attempt to create a new NV item */
    839              ret = osal_nv_item_init( nvId, nvLen, NULL );
   \   000058                ; Setup parameters for call to function osal_nv_item_init
   \   000058   E4           CLR     A
   \   000059   F5..         MOV     ?V4,A
   \   00005B   F5..         MOV     ?V5,A
   \   00005D   78..         MOV     R0,#?V4
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   EE           MOV     A,R6
   \   000063   FA           MOV     R2,A
   \   000064   EF           MOV     A,R7
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   E9           MOV     A,R1
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   F0           MOVX    @DPTR,A
    840              if ( (ret == NV_ITEM_UNINIT) && (idLen > 0) )
   \   000076   6409         XRL     A,#0x9
   \   000078   703C         JNZ     ??MT_SysOsalNVItemInit_3
   \   00007A   E5..         MOV     A,?V2
   \   00007C   6038         JZ      ??MT_SysOsalNVItemInit_3
    841              {
    842                /* Write initialization data to first part of new item */
    843                (void) osal_nv_write( nvId, 0, (uint16)idLen, pBuf );
   \   00007E                ; Setup parameters for call to function osal_nv_write
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   75..00       MOV     ?V3,#0x0
   \   000086   78..         MOV     R0,#?V2
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   7C00         MOV     R4,#0x0
   \   00008D   7D00         MOV     R5,#0x0
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000096   7404         MOV     A,#0x4
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009B   8019         SJMP    ??MT_SysOsalNVItemInit_3
    844              }
    845            }
    846            else
    847            {
    848              /* Attempt to create/initialize a new NV item */
    849              ret = osal_nv_item_init( nvId, nvLen, pBuf );
   \                     ??MT_SysOsalNVItemInit_2:
   \   00009D                ; Setup parameters for call to function osal_nv_item_init
   \   00009D   78..         MOV     R0,#?V0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   EE           MOV     A,R6
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   FB           MOV     R3,A
   \   0000A6   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000A9   7402         MOV     A,#0x2
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   F0           MOVX    @DPTR,A
    850            }
    851          
    852            /* Build and send back the response */
    853            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    854                                           MT_SYS_OSAL_NV_ITEM_INIT, 1, &ret);
   \                     ??MT_SysOsalNVItemInit_3:
   \   0000B6                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B6   AC..         MOV     R4,?XSP + 0
   \   0000B8   AD..         MOV     R5,?XSP + 1
   \   0000BA   7B01         MOV     R3,#0x1
   \   0000BC   7A07         MOV     R2,#0x7
   \   0000BE   7961         MOV     R1,#0x61
   \   0000C0   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    855          }
   \   0000C3   7401         MOV     A,#0x1
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C8   7F06         MOV     R7,#0x6
   \   0000CA   02....       LJMP    ?BANKED_LEAVE_XDATA
    856          
    857          /***************************************************************************************************
    858           * @fn      MT_SysOsalNVDelete
    859           *
    860           * @brief   Attempt to delete an NV item
    861           *
    862           * @param   pBuf - pointer to the data
    863           *
    864           * @return  None
    865           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    866          void MT_SysOsalNVDelete(uint8 *pBuf)
   \                     MT_SysOsalNVDelete:
    867          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    868            uint16 nvId;
    869            uint16 nvLen;
    870            uint8 ret;
    871          
    872            /* Skip over RPC header */
    873            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000A   EA           MOV     A,R2
   \   00000B   2403         ADD     A,#0x3
   \   00000D   FA           MOV     R2,A
   \   00000E   5001         JNC     ??MT_SysOsalNVDelete_0
   \   000010   0B           INC     R3
    874          
    875            /* Get the ID */
    876            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
    877            /* Get the length */
    878            nvLen = BUILD_UINT16(pBuf[2], pBuf[3]);
    879          
    880            /* Attempt to delete the NV item */
    881            ret = osal_nv_delete( nvId, nvLen );
   \                     ??MT_SysOsalNVDelete_0:
   \   000011                ; Setup parameters for call to function osal_nv_delete
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FC           MOV     R4,A
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   A3           INC     DPTR
   \   00001E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000021   E4           CLR     A
   \   000022   39           ADDC    A,R1
   \   000023   FD           MOV     R5,A
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FE           MOV     R6,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   EE           MOV     A,R6
   \   00002E   FA           MOV     R2,A
   \   00002F   E4           CLR     A
   \   000030   39           ADDC    A,R1
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   000035   12....       LCALL   ?Subroutine23 & 0xFFFF
    882          
    883            /* Build and send back the response */
    884            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    885                                           MT_SYS_OSAL_NV_DELETE, 1, &ret);
   \                     ??CrossCallReturnLabel_92:
   \   000038   7A12         MOV     R2,#0x12
   \   00003A   80..         SJMP    ??Subroutine39_0
    886          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine38_0
   \   000001                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EC           MOV     A,R4
   \   000007   28           ADD     A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   7961         MOV     R1,#0x61
   \   000002                REQUIRE ??Subroutine40_0
   \   000002                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000003   7401         MOV     A,#0x1
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008   7F01         MOV     R7,#0x1
   \   00000A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine45_0
   \   000007                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   7B01         MOV     R3,#0x1
   \   000007   22           RET
    887          
    888          /***************************************************************************************************
    889           * @fn      MT_SysOsalNVLength
    890           *
    891           * @brief   Attempt to get the length to an NV item
    892           *
    893           * @param   pBuf - pointer to the data
    894           *
    895           * @return  None
    896           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    897          void MT_SysOsalNVLength(uint8 *pBuf)
   \                     MT_SysOsalNVLength:
    898          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    899            uint16 nvId;
    900            uint16 nvLen;
    901            uint8 rsp[2];
    902          
    903            /* Skip over RPC header */
    904            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000A   EA           MOV     A,R2
   \   00000B   2403         ADD     A,#0x3
   \   00000D   FA           MOV     R2,A
   \   00000E   5001         JNC     ??MT_SysOsalNVLength_0
   \   000010   0B           INC     R3
    905          
    906            /* Get the ID */
    907            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
    908          
    909            /* Attempt to get NV item length */
    910            nvLen = osal_nv_item_len( nvId );
   \                     ??MT_SysOsalNVLength_0:
   \   000011                ; Setup parameters for call to function osal_nv_item_len
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FC           MOV     R4,A
   \   000017   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00001A   FA           MOV     R2,A
   \   00001B   E4           CLR     A
   \   00001C   39           ADDC    A,R1
   \   00001D   FB           MOV     R3,A
   \   00001E   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
    911            rsp[0] = LO_UINT16( nvLen );
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   EA           MOV     A,R2
   \   000028   F0           MOVX    @DPTR,A
    912            rsp[1] = HI_UINT16( nvLen );
   \   000029   7401         MOV     A,#0x1
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   12....       LCALL   ?Subroutine22 & 0xFFFF
    913          
    914            /* Build and send back the response */
    915            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    916                                           MT_SYS_OSAL_NV_LENGTH, 2, rsp);
   \                     ??CrossCallReturnLabel_87:
   \   000031   7A13         MOV     R2,#0x13
   \   000033   02....       LJMP    ?Subroutine1 & 0xFFFF
    917          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7961         MOV     R1,#0x61
   \   000002   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005   7402         MOV     A,#0x2
   \   000007                REQUIRE ??Subroutine41_0
   \   000007                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   EB           MOV     A,R3
   \   000001                REQUIRE ??Subroutine42_0
   \   000001                ; // Fall through to label ??Subroutine42_0
    918          #endif // !defined(CC253X_MACNP)
    919          
    920          /***************************************************************************************************
    921           * @fn      MT_SysOsalStartTimer
    922           *
    923           * @brief
    924           *
    925           * @param   uint8 pBuf - pointer to the data
    926           *
    927           * @return  None
    928           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    929          void MT_SysOsalStartTimer(uint8 *pBuf)
   \                     MT_SysOsalStartTimer:
    930          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    931            uint16 eventId;
    932            uint8 retValue = ZFailure;
   \   00000A   12....       LCALL   ?Subroutine24 & 0xFFFF
    933            uint8 cmdId;
    934          
    935            /* parse header */
    936            cmdId = pBuf[MT_RPC_POS_CMD1];
    937            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_51:
   \   00000D   FA           MOV     R2,A
   \   00000E   5001         JNC     ??MT_SysOsalStartTimer_0
   \   000010   0B           INC     R3
    938          
    939            if (*pBuf <= 3)
   \                     ??MT_SysOsalStartTimer_0:
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C3           CLR     C
   \   000017   9404         SUBB    A,#0x4
   \   000019   5032         JNC     ??MT_SysOsalStartTimer_1
    940            {
    941              eventId = (uint16) MT_SysOsalEventId[*pBuf];
    942              retValue = osal_start_timerEx(MT_TaskID, eventId, BUILD_UINT16(pBuf[1], pBuf[2]));
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FC           MOV     R4,A
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   12....       LCALL   ?Subroutine13 & 0xFFFF
    943            }
   \                     ??CrossCallReturnLabel_86:
   \   000025   F5..         MOV     ?V0,A
   \   000027   E4           CLR     A
   \   000028   39           ADDC    A,R1
   \   000029   F5..         MOV     ?V1,A
   \   00002B   E4           CLR     A
   \   00002C   F5..         MOV     ?V2,A
   \   00002E   F5..         MOV     ?V3,A
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00003C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00003F   7404         MOV     A,#0x4
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044   E9           MOV     A,R1
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   8008         SJMP    ??MT_SysOsalStartTimer_2
    944            else
    945            {
    946              retValue = ZInvalidParameter;
   \                     ??MT_SysOsalStartTimer_1:
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   7402         MOV     A,#0x2
    947            }
   \                     ??MT_SysOsalStartTimer_2:
   \   000055   12....       LCALL   ??Subroutine45_0 & 0xFFFF
    948          
    949            /* Build and send back the response */
    950            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_94:
   \   000058   EE           MOV     A,R6
   \   000059   FA           MOV     R2,A
   \   00005A   7961         MOV     R1,#0x61
   \   00005C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    951          }
   \   00005F   7401         MOV     A,#0x1
   \   000061   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25E0         ADD     A,0xE0 /* A   */
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   F9           MOV     R1,A
   \   000007   74..         MOV     A,#MT_SysOsalEventId & 0xff
   \   000009   28           ADD     A,R0
   \   00000A   F582         MOV     DPL,A
   \   00000C   74..         MOV     A,#(MT_SysOsalEventId >> 8) & 0xff
   \   00000E   39           ADDC    A,R1
   \   00000F   F583         MOV     DPH,A
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FA           MOV     R2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   90....       MOV     DPTR,#MT_TaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    952          
    953          /***************************************************************************************************
    954           * @fn      MT_SysOsalStopTimer
    955           *
    956           * @brief
    957           *
    958           * @param   uint8 pBuf - pointer to the data
    959           *
    960           * @return  None
    961           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   AC..         MOV     R4,?XSP + 0
   \   000002   AD..         MOV     R5,?XSP + 1
   \   000004   7B01         MOV     R3,#0x1
   \   000006   EE           MOV     A,R6
   \   000007   FA           MOV     R2,A
   \   000008                REQUIRE ??Subroutine39_0
   \   000008                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    962          void MT_SysOsalStopTimer(uint8 *pBuf)
   \                     MT_SysOsalStopTimer:
    963          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    964            uint16 eventId;
    965            uint8 retValue = ZFailure;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
    966            uint8 cmdId;
    967          
    968            /* parse header */
    969            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000013   12....       LCALL   ?Subroutine15 & 0xFFFF
    970            pBuf += MT_RPC_FRAME_HDR_SZ;
    971          
    972            if (*pBuf <= 3)
   \                     ??CrossCallReturnLabel_29:
   \   000016   C3           CLR     C
   \   000017   9404         SUBB    A,#0x4
   \   000019   5016         JNC     ??MT_SysOsalStopTimer_0
    973            {
    974              eventId = (uint16) MT_SysOsalEventId[*pBuf];
    975              retValue = osal_stop_timerEx(MT_TaskID, eventId);
   \   00001B                ; Setup parameters for call to function osal_stop_timerEx
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   12....       LCALL   ?Subroutine7 & 0xFFFF
    976            }
   \                     ??CrossCallReturnLabel_11:
   \   000025   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000028   E9           MOV     A,R1
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   8008         SJMP    ??MT_SysOsalStopTimer_1
    977            else
    978            {
    979              retValue = ZInvalidParameter;
   \                     ??MT_SysOsalStopTimer_0:
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   7402         MOV     A,#0x2
   \                     ??MT_SysOsalStopTimer_1:
   \   000039   F0           MOVX    @DPTR,A
    980            }
    981          
    982            /* Build and send back the response */
    983            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue );
   \   00003A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00003A   02....       LJMP    ?Subroutine2 & 0xFFFF
    984          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET
    985          
    986          /***************************************************************************************************
    987           * @fn      MT_SysRandom
    988           *
    989           * @brief
    990           *
    991           * @param   uint8 pData - pointer to the data
    992           *
    993           * @return  None
    994           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    995          void MT_SysRandom()
   \                     MT_SysRandom:
    996          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    997            uint16 randValue = Onboard_rand();
   \   00000A                ; Setup parameters for call to function Onboard_rand
   \   00000A   12....       LCALL   `??Onboard_rand::?relay`; Banked call to: Onboard_rand
    998            uint8 retArray[2];
    999          
   1000            retArray[0] = LO_UINT16(randValue);
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   EA           MOV     A,R2
   \   000014   F0           MOVX    @DPTR,A
   1001            retArray[1] = HI_UINT16(randValue);
   \   000015   7401         MOV     A,#0x1
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine22 & 0xFFFF
   1002          
   1003            /* Build and send back the response */
   1004            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_RANDOM, 2, retArray );
   \                     ??CrossCallReturnLabel_88:
   \   00001D   7A0C         MOV     R2,#0xc
   \   00001F   80..         SJMP    ?Subroutine1
   1005          }
   1006          
   1007          /***************************************************************************************************
   1008           * @fn      MT_SysAdcRead
   1009           *
   1010           * @brief   Reading ADC value, temperature sensor and voltage
   1011           *
   1012           * @param   uint8 pBuf - pointer to the data
   1013           *
   1014           * @return  None
   1015           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          void MT_SysAdcRead(uint8 *pBuf)
   \                     MT_SysAdcRead:
   1017          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1018          #ifndef HAL_BOARD_LM3S
   1019            uint8 channel, resolution;
   1020            uint16 tempValue;
   1021            uint8 retArray[2];
   1022            uint8 cmdId;
   1023          
   1024            /* parse header */
   1025            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine15 & 0xFFFF
   1026            pBuf += MT_RPC_FRAME_HDR_SZ;
   1027          
   1028            /* Channel */
   1029            channel = *pBuf++;
   \                     ??CrossCallReturnLabel_30:
   \   00000D   F9           MOV     R1,A
   1030          
   1031            /* Resolution */
   1032            resolution = *pBuf++;
   1033          
   1034            /* Voltage reading */
   1035            switch (channel)
   \   00000E   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for MT_SysAdcRead>_0`:
   \   000011   01           DB        1
   \   000012   00           DB        0
   \   000013   07           DB        7
   \   000014   ....         DW        ??MT_SysAdcRead_0
   \   000016   02           DB        2
   \   000017   0E           DB        14
   \   000018   ....         DW        ??MT_SysAdcRead_1
   \   00001A   0F           DB        15
   \   00001B   ....         DW        ??MT_SysAdcRead_2
   \   00001D   ....         DW        ??MT_SysAdcRead_3
   1036            {
   1037              /* Analog input channel */
   1038              case HAL_ADC_CHANNEL_0:
   1039              case HAL_ADC_CHANNEL_1:
   1040              case HAL_ADC_CHANNEL_2:
   1041              case HAL_ADC_CHANNEL_3:
   1042              case HAL_ADC_CHANNEL_4:
   1043              case HAL_ADC_CHANNEL_5:
   1044              case HAL_ADC_CHANNEL_6:
   1045              case HAL_ADC_CHANNEL_7:
   1046                tempValue = HalAdcRead(channel, resolution);
   \                     ??MT_SysAdcRead_0:
   \   00001F                ; Setup parameters for call to function HalAdcRead
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FA           MOV     R2,A
   \   000029   800A         SJMP    ??MT_SysAdcRead_4
   1047                break;
   1048          
   1049              /* Temperature sensor */
   1050              case(HAL_ADC_CHANNEL_TEMP):
   1051                tempValue = HalAdcRead(HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
   \                     ??MT_SysAdcRead_1:
   \   00002B                ; Setup parameters for call to function HalAdcRead
   \   00002B   7A04         MOV     R2,#0x4
   \   00002D   790E         MOV     R1,#0xe
   \   00002F   8004         SJMP    ??MT_SysAdcRead_4
   1052                break;
   1053          
   1054              /* Voltage reading */
   1055              case(HAL_ADC_CHANNEL_VDD):
   1056                tempValue = HalAdcRead(HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
   \                     ??MT_SysAdcRead_2:
   \   000031                ; Setup parameters for call to function HalAdcRead
   \   000031   7A04         MOV     R2,#0x4
   \   000033   790F         MOV     R1,#0xf
   \                     ??MT_SysAdcRead_4:
   \   000035   12....       LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   000038   8A..         MOV     ?V0,R2
   \   00003A   8B..         MOV     ?V1,R3
   \   00003C   A8..         MOV     R0,?V0
   \   00003E   A9..         MOV     R1,?V1
   1057                break;
   \   000040   8004         SJMP    ??MT_SysAdcRead_5
   1058          
   1059              /* Undefined channels */
   1060              default:
   1061                tempValue = 0x00;
   \                     ??MT_SysAdcRead_3:
   \   000042   7800         MOV     R0,#0x0
   \   000044   7900         MOV     R1,#0x0
   1062                break;
   1063            }
   1064          
   1065            retArray[0] = LO_UINT16(tempValue);
   \                     ??MT_SysAdcRead_5:
   \   000046   E8           MOV     A,R0
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   F0           MOVX    @DPTR,A
   1066            retArray[1] = HI_UINT16(tempValue);
   \   00004E   7401         MOV     A,#0x1
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E9           MOV     A,R1
   \   000054   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   1067          
   1068            /* Build and send back the response */
   1069            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, retArray);
   \                     ??CrossCallReturnLabel_91:
   \   000057   EE           MOV     A,R6
   \   000058   FA           MOV     R2,A
   \   000059                REQUIRE ?Subroutine1
   \   000059                ; // Fall through to label ?Subroutine1
   1070          #endif /* #ifndef HAL_BOARD_LM3S */
   1071          }
   1072          
   1073          /**************************************************************************************************
   1074           * @fn      MT_SysGpio
   1075           *
   1076           * @brief   ZAccel RPC interface for controlling the available GPIO pins.
   1077           *
   1078           * @param   uint8 pBuf - pointer to the data
   1079           *
   1080           * @return  None
   1081           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1082          void MT_SysGpio(uint8 *pBuf)
   \                     MT_SysGpio:
   1083          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1084            uint8 cmd, val;
   1085            GPIO_Op_t op;
   1086          
   1087            cmd = pBuf[MT_RPC_POS_CMD1];
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   1088            pBuf += MT_RPC_FRAME_HDR_SZ;
   1089          
   1090            op = (GPIO_Op_t)(*pBuf++);
   1091            val = *pBuf;
   1092          
   1093            switch (op)
   1094            {
   1095              case GPIO_DIR:
   1096                if (val & BV(0)) {GPIO_DIR_OUT(0);} else {GPIO_DIR_IN(0);}
   1097                if (val & BV(1)) {GPIO_DIR_OUT(1);} else {GPIO_DIR_IN(1);}
   1098                if (val & BV(2)) {GPIO_DIR_OUT(2);} else {GPIO_DIR_IN(2);}
   1099                if (val & BV(3)) {GPIO_DIR_OUT(3);} else {GPIO_DIR_IN(3);}
   1100                break;
   1101          
   1102              case GPIO_TRI:
   1103                if(val & BV(0)) {GPIO_TRI(0);} else if(val & BV(4)) {GPIO_PULL_DN(0);} else {GPIO_PULL_UP(0);}
   1104                if(val & BV(1)) {GPIO_TRI(1);} else if(val & BV(5)) {GPIO_PULL_DN(1);} else {GPIO_PULL_UP(1);}
   1105                if(val & BV(2)) {GPIO_TRI(2);} else if(val & BV(6)) {GPIO_PULL_DN(2);} else {GPIO_PULL_UP(2);}
   1106                if(val & BV(3)) {GPIO_TRI(3);} else if(val & BV(7)) {GPIO_PULL_DN(3);} else {GPIO_PULL_UP(3);}
   1107                break;
   1108          
   1109              case GPIO_SET:
   1110                if (val & BV(0)) {GPIO_SET(0);}
   1111                if (val & BV(1)) {GPIO_SET(1);}
   1112                if (val & BV(2)) {GPIO_SET(2);}
   1113                if (val & BV(3)) {GPIO_SET(3);}
   1114                break;
   1115          
   1116              case GPIO_CLR:
   1117                if (val & BV(0)) {GPIO_CLR(0);}
   1118                if (val & BV(1)) {GPIO_CLR(1);}
   1119                if (val & BV(2)) {GPIO_CLR(2);}
   1120                if (val & BV(3)) {GPIO_CLR(3);}
   1121                break;
   1122          
   1123              case GPIO_TOG:
   1124                if (val & BV(0)) {GPIO_TOG(0);}
   1125                if (val & BV(1)) {GPIO_TOG(1);}
   1126                if (val & BV(2)) {GPIO_TOG(2);}
   1127                if (val & BV(3)) {GPIO_TOG(3);}
   1128                break;
   1129          
   1130              case GPIO_GET:
   1131                break;
   1132          
   1133              case GPIO_HiD:
   1134                (val) ? GPIO_HiD_SET() :  GPIO_HiD_CLR();
   1135                break;
   1136          
   1137              default:
   1138                break;
   1139            }
   1140          
   1141            val  = (GPIO_GET(0)) ? BV(0) : 0;
   1142            val |= (GPIO_GET(1)) ? BV(1) : 0;
   1143            val |= (GPIO_GET(2)) ? BV(2) : 0;
   1144            val |= (GPIO_GET(3)) ? BV(3) : 0;
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   E4           CLR     A
   \   000018   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   1145          
   1146            /* Build and send back the response */
   1147            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &val);
   \                     ??CrossCallReturnLabel_95:
   \   00001B   7961         MOV     R1,#0x61
   \   00001D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1148          }
   \   000020   7401         MOV     A,#0x1
   \   000022   80..         SJMP    ??Subroutine43_0
   1149          
   1150          /**************************************************************************************************
   1151           * @fn      MT_SysStackTune
   1152           *
   1153           * @brief   ZAccel RPC interface for tuning the stack parameters to adjust performance
   1154           *
   1155           * @param   uint8 pBuf - pointer to the data
   1156           *
   1157           * @return  None
   1158           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1159          void MT_SysStackTune(uint8 *pBuf)
   \                     MT_SysStackTune:
   1160          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1161            uint8 cmd, rtrn;
   1162          
   1163            cmd = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
   1164            pBuf += MT_RPC_FRAME_HDR_SZ;
   1165          
   1166            switch (*pBuf++)
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   F8           MOV     R0,A
   \   000016   E4           CLR     A
   \   000017   3B           ADDC    A,R3
   \   000018   F9           MOV     R1,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   A3           INC     DPTR
   \   00001E   AA82         MOV     R2,DPL
   \   000020   AB83         MOV     R3,DPH
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6005         JZ      ??MT_SysStackTune_0
   \   000029   14           DEC     A
   \   00002A   6006         JZ      ??MT_SysStackTune_1
   \   00002C   8029         SJMP    ??MT_SysStackTune_2
   1167            {
   1168            case STK_TX_PWR:
   1169              rtrn = ZMacSetReq(ZMacPhyTransmitPowerSigned, pBuf);
   \                     ??MT_SysStackTune_0:
   \   00002E                ; Setup parameters for call to function ZMacSetReq
   \   00002E   79E0         MOV     R1,#-0x20
   \   000030   8019         SJMP    ??MT_SysStackTune_3
   1170              break;
   1171          
   1172            case STK_RX_ON_IDLE:
   1173              if ((*pBuf != TRUE) && (*pBuf != FALSE))
   \                     ??MT_SysStackTune_1:
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6401         XRL     A,#0x1
   \   000039   600E         JZ      ??MT_SysStackTune_4
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   600B         JZ      ??MT_SysStackTune_4
   1174              {
   1175                (void)ZMacGetReq(ZMacRxOnIdle, &rtrn);
   \   00003E                ; Setup parameters for call to function ZMacGetReq
   \   00003E   AA..         MOV     R2,?XSP + 0
   \   000040   AB..         MOV     R3,?XSP + 1
   \   000042   7952         MOV     R1,#0x52
   \   000044   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   000047   8017         SJMP    ??MT_SysStackTune_5
   1176              }
   1177              else
   1178              {
   1179                rtrn = ZMacSetReq(ZMacRxOnIdle, pBuf);
   \                     ??MT_SysStackTune_4:
   \   000049                ; Setup parameters for call to function ZMacSetReq
   \   000049   7952         MOV     R1,#0x52
   \                     ??MT_SysStackTune_3:
   \   00004B   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00004E   E9           MOV     A,R1
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   8008         SJMP    ??MT_SysStackTune_6
   1180              }
   1181              break;
   1182          
   1183            default:
   1184              rtrn = ZInvalidParameter;
   \                     ??MT_SysStackTune_2:
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   7402         MOV     A,#0x2
   \                     ??MT_SysStackTune_6:
   \   00005F   F0           MOVX    @DPTR,A
   1185              break;
   1186            }
   1187          
   1188            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
   \                     ??MT_SysStackTune_5:
   \   000060                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000060   02....       LJMP    ?Subroutine2 & 0xFFFF
   1189          }
   1190          
   1191          /***************************************************************************************************
   1192           * @fn      MT_SysSetUtcTime
   1193           *
   1194           * @brief   Set the OSAL UTC Time. UTC rollover is: 06:28:16 02/07/2136
   1195           *
   1196           * @param   pBuf - pointer to time parameters
   1197           *
   1198           * @return  None
   1199           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1200          void MT_SysSetUtcTime(uint8 *pBuf)
   \                     MT_SysSetUtcTime:
   1201          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1202            uint8 cmdId;
   1203            uint8 retStat;
   1204            UTCTime utcSecs;
   1205          
   1206            /* Parse header */
   1207            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0,A
   1208            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_SysSetUtcTime_0
   \   00001D   0F           INC     R7
   1209          
   1210            utcSecs = osal_build_uint32( pBuf, 4 );
   \                     ??MT_SysSetUtcTime_0:
   \   00001E                ; Setup parameters for call to function osal_build_uint32
   \   00001E   7904         MOV     R1,#0x4
   \   000020   FA           MOV     R2,A
   \   000021   EF           MOV     A,R7
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000026   8A..         MOV     ?V4,R2
   \   000028   8B..         MOV     ?V5,R3
   \   00002A   8C..         MOV     ?V6,R4
   \   00002C   8D..         MOV     ?V7,R5
   1211            if ( utcSecs == 0 )
   \   00002E   EA           MOV     A,R2
   \   00002F   45..         ORL     A,?V5
   \   000031   45..         ORL     A,?V6
   \   000033   45..         ORL     A,?V7
   \   000035   6003         JZ      $+5
   \   000037   02....       LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
   1212            {
   1213              UTCTimeStruct utc;
   1214          
   1215              /* Skip past UTC time */
   1216              pBuf += 4;
   1217          
   1218              /* Get time and date parameters */
   1219              utc.hour = *pBuf++;
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C0E0         PUSH    A
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   D0E0         POP     A
   \   00004C   12....       LCALL   ?Subroutine26 & 0xFFFF
   1220              utc.minutes = *pBuf++;
   \                     ??CrossCallReturnLabel_54:
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C0E0         PUSH    A
   \   000052   7402         MOV     A,#0x2
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   D0E0         POP     A
   \   000059   12....       LCALL   ?Subroutine26 & 0xFFFF
   1221              utc.seconds = *pBuf++;
   \                     ??CrossCallReturnLabel_55:
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C0E0         PUSH    A
   \   000060   7401         MOV     A,#0x1
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   D0E0         POP     A
   \   000067   12....       LCALL   ?Subroutine25 & 0xFFFF
   1222              utc.month = (*pBuf++) - 1;
   \                     ??CrossCallReturnLabel_52:
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   14           DEC     A
   \   00006C   C0E0         PUSH    A
   \   00006E   7405         MOV     A,#0x5
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   D0E0         POP     A
   \   000075   12....       LCALL   ?Subroutine25 & 0xFFFF
   1223              utc.day = (*pBuf++) - 1;
   \                     ??CrossCallReturnLabel_53:
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   14           DEC     A
   \   00007B   C0E0         PUSH    A
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   D0E0         POP     A
   \   000084   F0           MOVX    @DPTR,A
   1224              utc.year = osal_build_uint16 ( pBuf );
   \   000085                ; Setup parameters for call to function osal_build_uint16
   \   000085   EE           MOV     A,R6
   \   000086   2409         ADD     A,#0x9
   \   000088   FA           MOV     R2,A
   \   000089   E4           CLR     A
   \   00008A   3F           ADDC    A,R7
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00008F   7406         MOV     A,#0x6
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   EA           MOV     A,R2
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   EB           MOV     A,R3
   \   000098   F0           MOVX    @DPTR,A
   1225          
   1226              if ((utc.hour < 24) && (utc.minutes < 60) && (utc.seconds < 60) &&
   1227                  (utc.month < 12) && (utc.day < 31) && (utc.year > 1999) && (utc.year < 2136))
   \   000099   7403         MOV     A,#0x3
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   C3           CLR     C
   \   0000A0   9418         SUBB    A,#0x18
   \   0000A2   4003         JC      $+5
   \   0000A4   02....       LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   C3           CLR     C
   \   0000AE   943C         SUBB    A,#0x3c
   \   0000B0   4003         JC      $+5
   \   0000B2   02....       LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   C3           CLR     C
   \   0000BC   943C         SUBB    A,#0x3c
   \   0000BE   4003         JC      $+5
   \   0000C0   02....       LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000C3   7405         MOV     A,#0x5
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   C3           CLR     C
   \   0000CA   940C         SUBB    A,#0xc
   \   0000CC   4003         JC      $+5
   \   0000CE   02....       LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000D1   7404         MOV     A,#0x4
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   C3           CLR     C
   \   0000D8   941F         SUBB    A,#0x1f
   \   0000DA   4003         JC      $+5
   \   0000DC   02....       LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000DF   7406         MOV     A,#0x6
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   2430         ADD     A,#0x30
   \   0000E7   F8           MOV     R0,A
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   34F8         ADDC    A,#-0x8
   \   0000EC   F9           MOV     R1,A
   \   0000ED   C3           CLR     C
   \   0000EE   E8           MOV     A,R0
   \   0000EF   9488         SUBB    A,#-0x78
   \   0000F1   E9           MOV     A,R1
   \   0000F2   9400         SUBB    A,#0x0
   \   0000F4   5074         JNC     ??MT_SysSetUtcTime_2
   1228              {
   1229                /* Got past the course filter, now check for leap year */
   1230                if ((utc.month != 1) || (utc.day < (IsLeapYear( utc.year ) ? 29 : 28)))
   \   0000F6   7405         MOV     A,#0x5
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   6401         XRL     A,#0x1
   \   0000FE   7050         JNZ     ??MT_SysSetUtcTime_3
   \   000100   7406         MOV     A,#0x6
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F8           MOV     R0,A
   \   000107   A3           INC     DPTR
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F9           MOV     R1,A
   \   00010A   7A90         MOV     R2,#-0x70
   \   00010C   7B01         MOV     R3,#0x1
   \   00010E   12....       LCALL   ?US_DIV_MOD
   \   000111   8B..         MOV     ?V3,R3
   \   000113   EA           MOV     A,R2
   \   000114   45..         ORL     A,?V3
   \   000116   6022         JZ      ??MT_SysSetUtcTime_4
   \   000118   7406         MOV     A,#0x6
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   F8           MOV     R0,A
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F9           MOV     R1,A
   \   000122   7A64         MOV     R2,#0x64
   \   000124   7B00         MOV     R3,#0x0
   \   000126   12....       LCALL   ?US_DIV_MOD
   \   000129   8B..         MOV     ?V3,R3
   \   00012B   EA           MOV     A,R2
   \   00012C   45..         ORL     A,?V3
   \   00012E   600E         JZ      ??MT_SysSetUtcTime_5
   \   000130   7406         MOV     A,#0x6
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   E0           MOVX    A,@DPTR
   \   000136   5403         ANL     A,#0x3
   \   000138   7004         JNZ     ??MT_SysSetUtcTime_5
   \                     ??MT_SysSetUtcTime_4:
   \   00013A   7A1D         MOV     R2,#0x1d
   \   00013C   8002         SJMP    ??MT_SysSetUtcTime_6
   \                     ??MT_SysSetUtcTime_5:
   \   00013E   7A1C         MOV     R2,#0x1c
   \                     ??MT_SysSetUtcTime_6:
   \   000140   7404         MOV     A,#0x4
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   E0           MOVX    A,@DPTR
   \   000146   C3           CLR     C
   \   000147   9A           SUBB    A,R2
   \   000148   95E0         SUBB    A,0xE0 /* A   */
   \   00014A   C3           CLR     C
   \   00014B   65D0         XRL     A,PSW
   \   00014D   33           RLC     A
   \   00014E   501A         JNC     ??MT_SysSetUtcTime_2
   1231                {
   1232                  /* Numbers look reasonable, convert to UTC */
   1233                  utcSecs = osal_ConvertUTCSecs( &utc );
   \                     ??MT_SysSetUtcTime_3:
   \   000150                ; Setup parameters for call to function osal_ConvertUTCSecs
   \   000150   7401         MOV     A,#0x1
   \   000152   12....       LCALL   ?XSTACK_DISP101_8
   \   000155   12....       LCALL   `??osal_ConvertUTCSecs::?relay`; Banked call to: osal_ConvertUTCSecs
   \   000158   8A..         MOV     ?V4,R2
   \   00015A   8B..         MOV     ?V5,R3
   \   00015C   8C..         MOV     ?V6,R4
   \   00015E   8D..         MOV     ?V7,R5
   1234                }
   1235              }
   1236            }
   1237          
   1238            if ( utcSecs == 0 )
   \                     ??MT_SysSetUtcTime_1:
   \   000160   E5..         MOV     A,?V4
   \   000162   45..         ORL     A,?V5
   \   000164   45..         ORL     A,?V6
   \   000166   45..         ORL     A,?V7
   \   000168   700A         JNZ     ??MT_SysSetUtcTime_7
   1239            {
   1240              /* Bad parameter(s) */
   1241              retStat = ZInvalidParameter;
   \                     ??MT_SysSetUtcTime_2:
   \   00016A   85..82       MOV     DPL,?XSP + 0
   \   00016D   85..83       MOV     DPH,?XSP + 1
   \   000170   7402         MOV     A,#0x2
   \   000172   8012         SJMP    ??MT_SysSetUtcTime_8
   1242            }
   1243            else
   1244            {
   1245              /* Parameters accepted, set the time */
   1246              osal_setClock( utcSecs );
   \                     ??MT_SysSetUtcTime_7:
   \   000174                ; Setup parameters for call to function osal_setClock
   \   000174   AA..         MOV     R2,?V4
   \   000176   AB..         MOV     R3,?V5
   \   000178   AC..         MOV     R4,?V6
   \   00017A   AD..         MOV     R5,?V7
   \   00017C   12....       LCALL   `??osal_setClock::?relay`; Banked call to: osal_setClock
   1247              retStat = ZSuccess;
   \   00017F   85..82       MOV     DPL,?XSP + 0
   \   000182   85..83       MOV     DPH,?XSP + 1
   \   000185   E4           CLR     A
   1248            }
   \                     ??MT_SysSetUtcTime_8:
   \   000186   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   1249          
   1250            /* Build and send back the response */
   1251            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1252                                           cmdId, 1, &retStat);
   \                     ??CrossCallReturnLabel_96:
   \   000189   AA..         MOV     R2,?V0
   \   00018B   7961         MOV     R1,#0x61
   \   00018D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1253          }
   \   000190   7408         MOV     A,#0x8
   \   000192   12....       LCALL   ?DEALLOC_XSTACK8
   \   000195                REQUIRE ?Subroutine4
   \   000195                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
   1254          
   1255          /***************************************************************************************************
   1256           * @fn      MT_SysGetUtcTime
   1257           *
   1258           * @brief   Get the OSAL UTC time
   1259           *
   1260           * @param   None
   1261           *
   1262           * @return  32-bit and Parsed UTC time
   1263           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1264          void MT_SysGetUtcTime(void)
   \                     MT_SysGetUtcTime:
   1265          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1266            uint8 len;
   1267            uint8 *buf;
   1268          
   1269            len = sizeof( UTCTime ) + sizeof( UTCTimeStruct );
   1270          
   1271            buf = osal_mem_alloc( len );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A0B         MOV     R2,#0xb
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   8A..         MOV     ?V0,R2
   \   000013   8B..         MOV     ?V1,R3
   \   000015   AE..         MOV     R6,?V0
   \   000017   AF..         MOV     R7,?V1
   1272            if ( buf )
   \   000019   EE           MOV     A,R6
   \   00001A   4F           ORL     A,R7
   \   00001B   7003         JNZ     $+5
   \   00001D   02....       LJMP    ??MT_SysGetUtcTime_0 & 0xFFFF
   1273            {
   1274              uint8 *pBuf;
   1275              UTCTime utcSecs;
   1276              UTCTimeStruct utcTime;
   1277          
   1278              // Get current 32-bit UTC time and parse it
   1279              utcSecs = osal_getClock();
   \   000020                ; Setup parameters for call to function osal_getClock
   \   000020   12....       LCALL   `??osal_getClock::?relay`; Banked call to: osal_getClock
   \   000023   8A..         MOV     ?V0,R2
   \   000025   8B..         MOV     ?V1,R3
   \   000027   8C..         MOV     ?V2,R4
   \   000029   8D..         MOV     ?V3,R5
   1280              osal_ConvertUTCTime( &utcTime, utcSecs );
   \   00002B                ; Setup parameters for call to function osal_ConvertUTCTime
   \   00002B   78..         MOV     R0,#?V0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000030   7404         MOV     A,#0x4
   \   000032   12....       LCALL   ?XSTACK_DISP101_8
   \   000035   12....       LCALL   `??osal_ConvertUTCTime::?relay`; Banked call to: osal_ConvertUTCTime
   \   000038   7404         MOV     A,#0x4
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
   1281          
   1282              // Start with 32-bit UTC time
   1283              pBuf = osal_buffer_uint32( buf, utcSecs );
   \   00003D                ; Setup parameters for call to function osal_buffer_uint32
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000042   EE           MOV     A,R6
   \   000043   FA           MOV     R2,A
   \   000044   EF           MOV     A,R7
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000049   7404         MOV     A,#0x4
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
   1284          
   1285              // Concatenate parsed UTC time fields
   1286              *pBuf++ = utcTime.hour;
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E0           MOVX    A,@DPTR
   \   000054   8A82         MOV     DPL,R2
   \   000056   8B83         MOV     DPH,R3
   \   000058   F0           MOVX    @DPTR,A
   1287              *pBuf++ = utcTime.minutes;
   \   000059   7401         MOV     A,#0x1
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000061   F0           MOVX    @DPTR,A
   1288              *pBuf++ = utcTime.seconds;
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00006B   A3           INC     DPTR
   \   00006C   F0           MOVX    @DPTR,A
   1289              *pBuf++ = utcTime.month + 1;  // Convert to human numbers
   \   00006D   7404         MOV     A,#0x4
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000075   F0           MOVX    @DPTR,A
   1290              *pBuf++ = utcTime.day + 1;
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00007E   A3           INC     DPTR
   \   00007F   F0           MOVX    @DPTR,A
   1291              *pBuf++ = LO_UINT16( utcTime.year );
   \   000080   7405         MOV     A,#0x5
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000088   F0           MOVX    @DPTR,A
   1292              *pBuf++ = HI_UINT16( utcTime.year );
   \   000089   7405         MOV     A,#0x5
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   A3           INC     DPTR
   \   00008F   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000092   A3           INC     DPTR
   \   000093   F0           MOVX    @DPTR,A
   1293          
   1294              /* Build and send back the response */
   1295              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1296                                             MT_SYS_GET_TIME, (uint8)(pBuf-buf), buf);
   \   000094                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000094   EE           MOV     A,R6
   \   000095   FC           MOV     R4,A
   \   000096   EF           MOV     A,R7
   \   000097   FD           MOV     R5,A
   \   000098   EE           MOV     A,R6
   \   000099   F8           MOV     R0,A
   \   00009A   EA           MOV     A,R2
   \   00009B   2407         ADD     A,#0x7
   \   00009D   C3           CLR     C
   \   00009E   98           SUBB    A,R0
   \   00009F   FB           MOV     R3,A
   \   0000A0   7A11         MOV     R2,#0x11
   \   0000A2   7961         MOV     R1,#0x61
   \   0000A4   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1297          
   1298              osal_mem_free( buf );
   \   0000A7                ; Setup parameters for call to function osal_mem_free
   \   0000A7   EE           MOV     A,R6
   \   0000A8   FA           MOV     R2,A
   \   0000A9   EF           MOV     A,R7
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1299            }
   1300          }
   \                     ??MT_SysGetUtcTime_0:
   \   0000AE   7407         MOV     A,#0x7
   \   0000B0   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   04           INC     A
   \   000002   8A82         MOV     DPL,R2
   \   000004   8B83         MOV     DPH,R3
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   1301          
   1302          /***************************************************************************************************
   1303           * @fn      MT_SysSetTxPower
   1304           *
   1305           * @brief   Set the transmit power.
   1306           *
   1307           * @param   pBuf - MT message containing the ZMacTransmitPower_t power level to set.
   1308           *
   1309           * @return  None
   1310           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1311          void MT_SysSetTxPower(uint8 *pBuf)
   \                     MT_SysSetTxPower:
   1312          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1313            /* A local variable to hold the signed dBm value of TxPower that is being requested. */
   1314            uint8 signed_dBm_of_TxPower_requeseted;
   1315          
   1316            /*
   1317             * A local variable to hold the signed dBm value of TxPower that can be set which is closest to
   1318             * the requested dBm value of TxPower, but which is also valid according to a complex set of
   1319             * compile-time and run-time configuration which is interpreted by the macRadioSetTxPower()
   1320             * function.
   1321             */
   1322            uint8 signed_dBm_of_TxPower_range_corrected;
   1323          
   1324            /* Parse the requested dBm from the RPC message. */
   1325            signed_dBm_of_TxPower_requeseted = pBuf[MT_RPC_POS_DAT0];
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   F0           MOVX    @DPTR,A
   1326          
   1327            /*
   1328             * MAC_MlmeSetReq() will store an out-of-range dBm parameter value into the NIB. So it is not
   1329             * possible to learn the actual dBm value that will be set by invoking MACMlmeGetReq().
   1330             * But this actual dBm value is a required return value in the SRSP to this SREQ. Therefore,
   1331             * it is necessary to make this redundant pre-call to macRadioSetTxPower() here in order to run
   1332             * the code that will properly constrain the requested dBm to a valid range based on both the
   1333             * compile-time and the run-time configurations that affect the available valid ranges
   1334             * (i.e. MAC_MlmeSetReq() itself will invoke for a second time the macRadioSetTxPower() function).
   1335             */
   1336            signed_dBm_of_TxPower_range_corrected = macRadioSetTxPower(signed_dBm_of_TxPower_requeseted);
   \   000018                ; Setup parameters for call to function macRadioSetTxPower
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??macRadioSetTxPower::?relay`; Banked call to: macRadioSetTxPower
   \   00001C   7401         MOV     A,#0x1
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E9           MOV     A,R1
   \   000022   F0           MOVX    @DPTR,A
   1337          
   1338            /*
   1339             * Call the function to store the requested dBm in the MAC PIB and to set the TxPower as closely
   1340             * as possible within the TxPower range that is valid for the compile-time and run-time
   1341             * configuration.
   1342             */
   1343            (void)MAC_MlmeSetReq(MAC_PHY_TRANSMIT_POWER_SIGNED, &signed_dBm_of_TxPower_requeseted);
   \   000023                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000023   AA..         MOV     R2,?XSP + 0
   \   000025   AB..         MOV     R3,?XSP + 1
   \   000027   79E0         MOV     R1,#-0x20
   \   000029   12....       LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   1344          
   1345            /* Build and send back the response that includes the actual dBm TxPower that can be set. */
   1346            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1347                                                 MT_SYS_SET_TX_POWER, 1,
   1348                                                 &signed_dBm_of_TxPower_range_corrected);
   \   00002C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?XSTACK_DISP102_8
   \   000031   7B01         MOV     R3,#0x1
   \   000033   7A14         MOV     R2,#0x14
   \   000035   02....       LJMP    ?Subroutine0 & 0xFFFF
   1349          }
   1350          
   1351          #if defined ( FEATURE_SYSTEM_STATS )
   1352          /***************************************************************************************************
   1353           * @fn      MT_SysZDiagsInitStats
   1354           *
   1355           * @brief   Initialize the statistics table in NV or restore values from
   1356           *          NV into the Statistics table in RAM
   1357           *
   1358           * @param   None
   1359           *
   1360           * @return  None
   1361           ***************************************************************************************************/
   1362          void MT_SysZDiagsInitStats(void)
   1363          {
   1364            uint8 retValue;
   1365          
   1366            retValue = ZDiagsInitStats();
   1367          
   1368            /* Build and send back the response */
   1369            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1370                                          MT_SYS_ZDIAGS_INIT_STATS, 1, &retValue);
   1371          }
   1372          
   1373          /***************************************************************************************************
   1374           * @fn      MT_SysZDiagsClearStats
   1375           *
   1376           * @brief   Clears the statistics table in RAM and NV if option flag set.
   1377           *
   1378           * @param   uint8 pBuf - pointer to the data
   1379           *
   1380           * @return  None
   1381           ***************************************************************************************************/
   1382          void MT_SysZDiagsClearStats(uint8 *pBuf)
   1383          {
   1384            uint8 cmdId;
   1385            uint8 clearNV;
   1386            uint32 sysClock;
   1387            uint8 retBuf[4];
   1388          
   1389            /* parse header */
   1390            cmdId = pBuf[MT_RPC_POS_CMD1];
   1391            pBuf += MT_RPC_FRAME_HDR_SZ;
   1392          
   1393            clearNV = *pBuf;
   1394          
   1395            /* returns the system clock of the time when the statistics were cleared */
   1396            sysClock = ZDiagsClearStats( clearNV );
   1397          
   1398            retBuf[0] = BREAK_UINT32( sysClock, 0);
   1399            retBuf[1] = BREAK_UINT32( sysClock, 1);
   1400            retBuf[2] = BREAK_UINT32( sysClock, 2);
   1401            retBuf[3] = BREAK_UINT32( sysClock, 3);
   1402          
   1403            /* Build and send back the response */
   1404            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1405                                         cmdId, 4, retBuf);
   1406          }
   1407          
   1408          /***************************************************************************************************
   1409           * @fn      MT_SysZDiagsGetStatsAttr
   1410           *
   1411           * @brief   Reads specific system (attribute) ID statistics and/or metrics.
   1412           *
   1413           * @param   uint8 pBuf - pointer to the data
   1414           *
   1415           * @return  None
   1416           ***************************************************************************************************/
   1417          void MT_SysZDiagsGetStatsAttr(uint8 *pBuf)
   1418          {
   1419            uint8 cmdId;
   1420            uint16 attributeId;
   1421            uint32 attrValue;
   1422            uint8 retBuf[4];
   1423          
   1424            /* parse header */
   1425            cmdId = pBuf[MT_RPC_POS_CMD1];
   1426            pBuf += MT_RPC_FRAME_HDR_SZ;
   1427          
   1428            /* Get the Attribute ID */
   1429            attributeId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1430          
   1431            attrValue = ZDiagsGetStatsAttr( attributeId );
   1432          
   1433            retBuf[0] = BREAK_UINT32( attrValue, 0);
   1434            retBuf[1] = BREAK_UINT32( attrValue, 1);
   1435            retBuf[2] = BREAK_UINT32( attrValue, 2);
   1436            retBuf[3] = BREAK_UINT32( attrValue, 3);
   1437          
   1438            /* Build and send back the response */
   1439            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1440                                         cmdId, 4, retBuf);
   1441          }
   1442          
   1443          /***************************************************************************************************
   1444           * @fn      MT_SysZDiagsRestoreStatsFromNV
   1445           *
   1446           * @brief   Restores the statistics table from NV into the RAM table.
   1447           *
   1448           * @param   None
   1449           *
   1450           * @return  None
   1451           ***************************************************************************************************/
   1452          void MT_SysZDiagsRestoreStatsFromNV(void)
   1453          {
   1454            uint8 retValue;
   1455          
   1456            retValue = ZDiagsRestoreStatsFromNV();
   1457          
   1458            /* Build and send back the response */
   1459            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1460                                          MT_SYS_ZDIAGS_RESTORE_STATS_NV, 1, &retValue);
   1461          }
   1462          
   1463          /***************************************************************************************************
   1464           * @fn      MT_SysZDiagsSaveStatsToNV
   1465           *
   1466           * @brief   Saves the statistics table from RAM to NV.
   1467           *
   1468           * @param   None
   1469           *
   1470           * @return  None
   1471           ***************************************************************************************************/
   1472          void MT_SysZDiagsSaveStatsToNV(void)
   1473          {
   1474            uint32 sysClock;
   1475            uint8 retBuf[4];
   1476          
   1477            /* returns the system clock of the time when the statistics were saved to NV */
   1478            sysClock = ZDiagsSaveStatsToNV();
   1479          
   1480            retBuf[0] = BREAK_UINT32( sysClock, 0);
   1481            retBuf[1] = BREAK_UINT32( sysClock, 1);
   1482            retBuf[2] = BREAK_UINT32( sysClock, 2);
   1483            retBuf[3] = BREAK_UINT32( sysClock, 3);
   1484          
   1485            /* Build and send back the response */
   1486            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1487                                         MT_SYS_ZDIAGS_SAVE_STATS_TO_NV, 4, retBuf);
   1488          }
   1489          #endif /* FEATURE_SYSTEM_STATS */
   1490          
   1491          #endif /* MT_SYS_FUNC */
   1492          
   1493          /***************************************************************************************************
   1494           * SUPPORT
   1495           ***************************************************************************************************/
   1496          
   1497          /***************************************************************************************************
   1498           * @fn      MT_SysResetInd()
   1499           *
   1500           * @brief   Sends a ZTOOL "reset response" message.
   1501           *
   1502           * @param   None
   1503           *
   1504           * @return  None
   1505           *
   1506           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1507          void MT_SysResetInd(void)
   \                     MT_SysResetInd:
   1508          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1509          #if 0   //chaokw
   1510            uint8 retArray[6];
   1511          
   1512            retArray[0] = ResetReason();   /* Reason */
   1513            osal_memcpy( &retArray[1], MTVersionString, 5 );   /* Revision info */
   1514            /* Send out Reset Response message */
   1515            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_RESET_IND,
   1516                                          sizeof(retArray), retArray);
   1517          #endif
   1518          }
   \   000000   02....       LJMP    ?BRET
   1519          
   1520          /***************************************************************************************************
   1521           * @fn      MT_SysOsalTimerExpired()
   1522           *
   1523           * @brief   Sends a SYS Osal Timer Expired
   1524           *
   1525           * @param   None
   1526           *
   1527           * @return  None
   1528           *
   1529           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1530          void MT_SysOsalTimerExpired(uint8 Id)
   \                     MT_SysOsalTimerExpired:
   1531          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine23 & 0xFFFF
   1532            uint8 retValue;
   1533            retValue = Id;
   1534            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_OSAL_TIMER_EXPIRED, 1, &retValue);
   \                     ??CrossCallReturnLabel_93:
   \   00000D   7A81         MOV     R2,#-0x7f
   \   00000F   7941         MOV     R1,#0x41
   \   000011   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1535          }
   1536          
   1537          #if defined ( MT_SYS_JAMMER_FEATURE )
   1538          /***************************************************************************************************
   1539           * @fn      MT_SysJammerParameters
   1540           *
   1541           * @brief   Set the Jammer detection parameters.
   1542           *
   1543           * @param   pBuf - MT message containing the parameters.
   1544           *
   1545           * @return  None
   1546           ***************************************************************************************************/
   1547          void MT_SysJammerParameters( uint8 *pBuf )
   1548          {
   1549            uint8 status = SUCCESS;
   1550            
   1551            // Adjust for the data
   1552            pBuf += MT_RPC_FRAME_HDR_SZ;
   1553            
   1554            // Number of continuous events needed to detect Jam
   1555            jammerContinuousEvents = BUILD_UINT16( pBuf[0], pBuf[1] );
   1556            jammerDetections = jammerContinuousEvents;
   1557            pBuf += 2;
   1558            
   1559            // Noise Level need to be a Jam
   1560            jammerHighNoiseLevel = *pBuf++;
   1561            
   1562            // The time between each noise level reading
   1563            jammerDetectPeriodTime = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   1564            
   1565            // Update the timer
   1566            osal_start_reload_timer( jammerTaskID, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
   1567            
   1568            /* Build and send back the response that includes the actual dBm TxPower that can be set. */
   1569            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1570                                                 MT_SYS_JAMMER_PARAMETERS, 1, &status );
   1571          }
   1572          
   1573          /***************************************************************************************************
   1574           * @fn      MT_SysJammerInd()
   1575           *
   1576           * @brief   Sends a jammer indication message.
   1577           *
   1578           * @param   jammerInd - TRUE if jammer detected, FALSE if changed to undetected
   1579           *
   1580           * @return  None
   1581           *
   1582           ***************************************************************************************************/
   1583          void MT_SysJammerInd( uint8 jammerInd )
   1584          {
   1585            /* Send out Reset Response message */
   1586            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_JAMMER_IND,
   1587                                          1, &jammerInd );
   1588          }
   1589          
   1590          /***************************************************************************************************
   1591           * @fn      jammerInit()
   1592           *
   1593           * @brief   Jammer Detection task initialization function
   1594           *
   1595           * @param   taskId - task ID 
   1596           *
   1597           * @return  None
   1598           *
   1599           ***************************************************************************************************/
   1600          void jammerInit( uint8 taskId )
   1601          {
   1602            jammerTaskID = taskId; 
   1603            
   1604            // Start the jammer check timer
   1605            osal_start_reload_timer( taskId, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
   1606          }
   1607          
   1608          /***************************************************************************************************
   1609           * @fn      jammerEventLoop()
   1610           *
   1611           * @brief   Jammer Detection task event processing function
   1612           *
   1613           * @param   taskId - task ID 
   1614           * @param   events - task events 
   1615           *
   1616           * @return  remaining events
   1617           *
   1618           ***************************************************************************************************/
   1619          uint16 jammerEventLoop( uint8 taskId, uint16 events )
   1620          {
   1621            osal_event_hdr_t  *pMsg;
   1622          
   1623            if (events & SYS_EVENT_MSG)
   1624            {
   1625              if ( (pMsg = (osal_event_hdr_t *) osal_msg_receive( taskId )) != NULL )
   1626              {
   1627                switch ( pMsg->event )
   1628                {
   1629                  default:
   1630                    break;
   1631                }
   1632          
   1633                osal_msg_deallocate( (byte *)pMsg );
   1634              }
   1635          
   1636              events ^= SYS_EVENT_MSG;
   1637            }
   1638            else if ( events & JAMMER_CHECK_EVT )
   1639            {
   1640              // Make sure we aren't currently receiving a message
   1641              // and the radio is active.
   1642              if ( MAC_RX_IS_PHYSICALLY_ACTIVE() == MAC_RX_ACTIVE_NO_ACTIVITY )
   1643              {
   1644                int8 rssiDbm = -128;
   1645                
   1646                // Read the noise level
   1647                if ( RSSISTAT & 0x01 )
   1648                {
   1649                  /* Add the RSSI offset */  
   1650                  rssiDbm = RSSI + MAC_RADIO_RSSI_OFFSET;
   1651          
   1652                  /* Adjust for external PA/LNA, if any */
   1653                  MAC_RADIO_RSSI_LNA_OFFSET( rssiDbm );
   1654                
   1655                  // Check for a noise level that's high
   1656                  if ( jammerDetections && (rssiDbm  > jammerHighNoiseLevel) )
   1657                  {
   1658                    jammerDetections--;
   1659                    if ( jammerDetections == 0 )
   1660                    {
   1661                      // Jam detected
   1662                      MT_SysJammerInd( TRUE );
   1663                    }
   1664                  }
   1665                  else if ( rssiDbm <= jammerHighNoiseLevel )
   1666                  {
   1667                    if ( jammerDetections == 0 )
   1668                    {
   1669                      // Jam cleared
   1670                      MT_SysJammerInd( FALSE );
   1671                    }
   1672                    jammerDetections = jammerContinuousEvents;
   1673                  }
   1674                }
   1675              }
   1676              events ^= JAMMER_CHECK_EVT;
   1677            }
   1678            else
   1679            {
   1680              events = 0;  /* Discard unknown events. */
   1681            }
   1682          
   1683            return ( events );
   1684          }
   1685          #endif // MT_SYS_JAMMER_FEATURE
   1686          
   1687          #if defined ( MT_SYS_SNIFFER_FEATURE )
   1688          /***************************************************************************************************
   1689           * @fn      MT_SysSnifferParameters
   1690           *
   1691           * @brief   Set the sniffer parameters.
   1692           *
   1693           * @param   pBuf - MT message containing the parameters.
   1694           *
   1695           * @return  None
   1696           ***************************************************************************************************/
   1697          void MT_SysSnifferParameters( uint8 *pBuf )
   1698          {
   1699            uint8 status = SUCCESS;
   1700            uint8 param;
   1701            
   1702            // Adjust for the data
   1703            pBuf += MT_RPC_FRAME_HDR_SZ;
   1704            
   1705            // Noise Level need to be a Jam
   1706            param = *pBuf++;
   1707            
   1708            if ( param == MT_SYS_SNIFFER_DISABLE )
   1709            {
   1710              // Disable Sniffer
   1711              HAL_BOARD_DISABLE_INTEGRATED_SNIFFER();
   1712              sniffer = FALSE;
   1713            }
   1714            else if ( param == MT_SYS_SNIFFER_ENABLE )
   1715            {
   1716              // Enable the Sniffer
   1717              HAL_BOARD_ENABLE_INTEGRATED_SNIFFER();
   1718              sniffer = TRUE;
   1719            }
   1720            else if ( param == MT_SYS_SNIFFER_GET_SETTING )
   1721            {
   1722              status = sniffer; // sniffer setting
   1723            }
   1724            else 
   1725            {
   1726              status = INVALIDPARAMETER;
   1727            }
   1728            
   1729            /* Build and send back the response that includes the actual dBm TxPower that can be set. */
   1730            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1731                                                 MT_SYS_SNIFFER_PARAMETERS, 1, &status );
   1732          }
   1733          #endif // MT_SYS_SNIFFER_FEATURE
   1734          
   1735          /**************************************************************************************************
   1736           * @fn          powerOffSoc
   1737           *
   1738           * @brief       put the device in lowest power mode infinitely.
   1739           *
   1740           * input parameters
   1741           *
   1742           * None.
   1743           *
   1744           * output parameters
   1745           *
   1746           * None.
   1747           *
   1748           * @return      None.
   1749           **************************************************************************************************
   1750           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1751          void powerOffSoc(void)
   \                     powerOffSoc:
   1752          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1753          #ifdef ENABLE_MT_SYS_RESET_SHUTDOWN
   1754            HAL_DISABLE_INTERRUPTS();
   1755          
   1756            /* turn off the RF front end device */
   1757            //TBD, based on the rf-front-end being used
   1758          
   1759            /* turn off the receiver */
   1760            MAC_RADIO_RXTX_OFF();
   1761            
   1762            /* just in case a receive was about to start, flush the receive FIFO */
   1763            MAC_RADIO_FLUSH_RX_FIFO();
   1764            
   1765            /* clear any receive interrupt that happened to squeak through */
   1766            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   1767            
   1768            /* put MAC timer to sleep */
   1769            MAC_RADIO_TIMER_SLEEP();
   1770            
   1771            /* power of radio */
   1772            MAC_RADIO_TURN_OFF_POWER();
   1773            
   1774            STIF = 0; //HAL_SLEEP_TIMER_CLEAR_INT;
   1775            
   1776            if (ZNP_CFG1_UART == znpCfg1)
   1777            {
   1778              HalUARTSuspend();
   1779            }
   1780            
   1781            /* Prep CC2530 power mode */
   1782            //HAL_SLEEP_PREP_POWER_MODE(3);
   1783            SLEEPCMD &= ~PMODE; /* clear mode bits */
   1784            SLEEPCMD |= 3;      /* set mode bits  to PM3 */
   1785            while (!(STLOAD & LDRDY));
   1786            
   1787            while (1) //just in case we wake up for some unknown reason
   1788            {
   1789              PCON = halSleepPconValue; //execution is suppose to halt with this command. Interrupts are disabled, so the only way to exit this state is using a hardware reset.
   1790              asm("NOP");
   1791            }
   1792          #endif
   1793          }
   \   000000   02....       LJMP    ?BRET
   1794          
   1795          
   1796          //chaokw

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1797          void MT_SysP2PTransfer(uint8 *pBuf)
   \                     MT_SysP2PTransfer:
   1798          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   1799              afIncomingMSGPacket_t *MSGpkt;
   1800              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN); 
   \                     ??CrossCallReturnLabel_19:
   \   000008   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   1801              if(MSGpkt == NULL)
   \   000013   EE           MOV     A,R6
   \   000014   4F           ORL     A,R7
   \   000015   6033         JZ      ??MT_SysP2PTransfer_0
   1802              {
   1803                  return;
   1804              }	
   1805          	
   1806              MSGpkt->hdr.event = ZDO_P2P_REQ;	
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   74E1         MOV     A,#-0x1f
   \   00001D   12....       LCALL   ?Subroutine21 & 0xFFFF
   1807              MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN ;   //cmd+len,  no 0xfe
   \                     ??CrossCallReturnLabel_47:
   \   000020   5001         JNC     ??MT_SysP2PTransfer_1
   \   000022   0B           INC     R3
   \                     ??MT_SysP2PTransfer_1:
   \   000023   12....       LCALL   ?Subroutine14 & 0xFFFF
   1808              if ( MSGpkt->cmd.DataLength )
   \                     ??CrossCallReturnLabel_26:
   \   000026   6013         JZ      ??MT_SysP2PTransfer_2
   1809              {
   1810                  MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   000028   12....       LCALL   ?Subroutine20 & 0xFFFF
   1811                  osal_memcpy(MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_LEN], MSGpkt->cmd.DataLength);  
   1812              }
   \                     ??CrossCallReturnLabel_44:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000031   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000034   7403         MOV     A,#0x3
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   8003         SJMP    ??CrossCallReturnLabel_61
   1813              else
   1814              {
   1815                  MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysP2PTransfer_2:
   \   00003B   12....       LCALL   ?Subroutine28 & 0xFFFF
   1816              }	
   1817              osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_61:
   \   00003E                ; Setup parameters for call to function osal_msg_send
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   FB           MOV     R3,A
   \   000042   90....       MOV     DPTR,#GenericApp_TaskID
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1818          }
   \                     ??MT_SysP2PTransfer_0:
   \   00004A   80..         SJMP    ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2420         ADD     A,#0x20
   \   000004   F8           MOV     R0,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F9           MOV     R1,A
   \   000008   85..82       MOV     DPL,?V0
   \   00000B   85..83       MOV     DPH,?V1
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   2403         ADD     A,#0x3
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   75..00       MOV     ?V2,#0x0
   \   000006   78..         MOV     R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   EB           MOV     A,R3
   \   000007   F0           MOVX    @DPTR,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8A..         MOV     ?V0,R2
   \   000002   8B..         MOV     ?V1,R3
   \   000004                ; Setup parameters for call to function osal_msg_allocate
   \   000004                ; Setup parameters for call to function osal_msg_allocate
   \   000004                ; Setup parameters for call to function osal_msg_allocate
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   242A         ADD     A,#0x2a
   \   00000B   FA           MOV     R2,A
   \   00000C   E4           CLR     A
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   FB           MOV     R3,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   EE           MOV     A,R6
   \   000001   2420         ADD     A,#0x20
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EE           MOV     A,R6
   \   000001   2427         ADD     A,#0x27
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00000A   EA           MOV     A,R2
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   EB           MOV     A,R3
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   1819          
   1820          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1821          void MT_SysBroadCastTransfer(uint8 *pBuf)
   \                     MT_SysBroadCastTransfer:
   1822          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   1823                afIncomingMSGPacket_t *MSGpkt;
   1824                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN); 
   \                     ??CrossCallReturnLabel_20:
   \   000008   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   1825                if(MSGpkt == NULL)
   \   000013   EE           MOV     A,R6
   \   000014   4F           ORL     A,R7
   \   000015   6033         JZ      ??MT_SysBroadCastTransfer_0
   1826                {
   1827          	  return;
   1828                }
   1829          
   1830                MSGpkt->hdr.event = ZDO_BROADCAST_REQ;
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   74EA         MOV     A,#-0x16
   \   00001D   12....       LCALL   ?Subroutine21 & 0xFFFF
   1831                MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN; 
   \                     ??CrossCallReturnLabel_48:
   \   000020   5001         JNC     ??MT_SysBroadCastTransfer_1
   \   000022   0B           INC     R3
   \                     ??MT_SysBroadCastTransfer_1:
   \   000023   12....       LCALL   ?Subroutine14 & 0xFFFF
   1832                if ( MSGpkt->cmd.DataLength )
   \                     ??CrossCallReturnLabel_27:
   \   000026   6013         JZ      ??MT_SysBroadCastTransfer_2
   1833                {
   1834          	   MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   000028   12....       LCALL   ?Subroutine20 & 0xFFFF
   1835          	   osal_memcpy(MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_LEN], MSGpkt->cmd.DataLength);  
   1836                }
   \                     ??CrossCallReturnLabel_45:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000031   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000034   7403         MOV     A,#0x3
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   8003         SJMP    ??CrossCallReturnLabel_62
   1837                else
   1838                {
   1839           	   MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysBroadCastTransfer_2:
   \   00003B   12....       LCALL   ?Subroutine28 & 0xFFFF
   1840                }	
   1841                osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_62:
   \   00003E                ; Setup parameters for call to function osal_msg_send
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   FB           MOV     R3,A
   \   000042   90....       MOV     DPTR,#GenericApp_TaskID
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1842          }
   \                     ??MT_SysBroadCastTransfer_0:
   \   00004A   80..         SJMP    ??Subroutine46_0
   1843          
   1844          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1845          void MT_SysGroupTransfer(uint8 *pBuf)  //chaokw
   \                     MT_SysGroupTransfer:
   1846          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   1847              afIncomingMSGPacket_t *MSGpkt;
   1848              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN); 
   \                     ??CrossCallReturnLabel_21:
   \   000008   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   1849              if(MSGpkt == NULL)
   \   000013   EE           MOV     A,R6
   \   000014   4F           ORL     A,R7
   \   000015   6033         JZ      ??MT_SysGroupTransfer_0
   1850              {
   1851                  return;
   1852              }
   1853          	
   1854              MSGpkt->hdr.event = ZDO_GROUP_REQ;
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   74E3         MOV     A,#-0x1d
   \   00001D   12....       LCALL   ?Subroutine21 & 0xFFFF
   1855              MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN;
   \                     ??CrossCallReturnLabel_49:
   \   000020   5001         JNC     ??MT_SysGroupTransfer_1
   \   000022   0B           INC     R3
   \                     ??MT_SysGroupTransfer_1:
   \   000023   12....       LCALL   ?Subroutine14 & 0xFFFF
   1856              if ( MSGpkt->cmd.DataLength )
   \                     ??CrossCallReturnLabel_28:
   \   000026   6013         JZ      ??MT_SysGroupTransfer_2
   1857              {
   1858                  MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   000028   12....       LCALL   ?Subroutine20 & 0xFFFF
   1859                  osal_memcpy(MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_LEN], MSGpkt->cmd.DataLength);  
   1860              }
   \                     ??CrossCallReturnLabel_46:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000031   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000034   7403         MOV     A,#0x3
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   8003         SJMP    ??CrossCallReturnLabel_63
   1861              else
   1862              {
   1863                  MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysGroupTransfer_2:
   \   00003B   12....       LCALL   ?Subroutine28 & 0xFFFF
   1864              }	
   1865              osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_63:
   \   00003E                ; Setup parameters for call to function osal_msg_send
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   FB           MOV     R3,A
   \   000042   90....       MOV     DPTR,#GenericApp_TaskID
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1866          }
   \                     ??MT_SysGroupTransfer_0:
   \   00004A   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   1867          
   1868          
   1869          
   1870          static void MT_SysChannelUpdate( uint8 *pBuf )
   1871          {
   1872          	afIncomingMSGPacket_t *MSGpkt;
   1873          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t )  + pBuf[MT_RPC_POS_LEN] );
   1874          	if ( MSGpkt == NULL )
   1875          	{
   1876          		return;
   1877          	}
   1878          	MSGpkt->hdr.event = ZDO_CHANNEL_UPDATE;
   1879          	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
   1880          	if ( MSGpkt->cmd.DataLength )
   1881          	{
   1882          		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   1883          		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
   1884          	}
   1885          	else
   1886          	{
   1887          		MSGpkt->cmd.Data = NULL;
   1888          	}
   1889          	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   1890          }
   1891          
   1892          
   1893          
   1894          static void MT_SysMACReq( uint8 *pBuf )
   1895          {
   1896          	afIncomingMSGPacket_t *MSGpkt;
   1897          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] );
   1898          	if ( MSGpkt == NULL )
   1899          	{
   1900          		return;
   1901          	}
   1902          	MSGpkt->hdr.event = ZDO_MAC_REQ;
   1903          	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
   1904          	if ( MSGpkt->cmd.DataLength )
   1905          	{
   1906          		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   1907          		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
   1908          	}
   1909          	else
   1910          	{
   1911          		MSGpkt->cmd.Data = NULL;
   1912          	}
   1913          	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   1914          }
   1915          
   1916          
   1917          
   1918          static void MT_SysActiveCntReq( uint8 *pBuf )
   1919          {
   1920          	afIncomingMSGPacket_t *MSGpkt;
   1921          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] );
   1922          	if ( MSGpkt == NULL )
   1923          	{
   1924          		return;
   1925          	}
   1926          	MSGpkt->hdr.event = ZDO_ACTIVE_CNT_REQ;
   1927          	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
   1928          	if ( MSGpkt->cmd.DataLength )
   1929          	{
   1930          		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   1931          		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
   1932          	}
   1933          	else
   1934          	{
   1935          		MSGpkt->cmd.Data = NULL;
   1936          	}
   1937          	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   1938          }
   1939          
   1940          
   1941          
   1942          static void MT_SysGetFWVersionReq( uint8 *pBuf )
   1943          {
   1944          	MT_SysPkgSendMsg( GenericApp_TaskID, ZDO_FW_VERSION_REQ, pBuf, 0, MT_RPC_POS_DAT0 );
   1945          }
   1946          
   1947          static void MT_SysFWUpdateReq( uint8 *pBuf )
   1948          {
   1949          	MT_SysPkgSendMsg( GenericApp_TaskID, ZDO_FW_UPDATE_REQ, pBuf, 0, MT_RPC_POS_DAT0 );
   1950          }
   1951          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1952          static void MT_SysPkgSendMsg( byte taskID, uint8 event, uint8 *pBuf, uint8 len, uint8 offset )
   \                     MT_SysPkgSendMsg:
   1953          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V3,R2
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   8B..         MOV     ?V7,R3
   1954          	afIncomingMSGPacket_t *MSGpkt;
   1955          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) + len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   EB           MOV     A,R3
   \   000010   2427         ADD     A,#0x27
   \   000012   FA           MOV     R2,A
   \   000013   E4           CLR     A
   \   000014   3400         ADDC    A,#0x0
   \   000016   FB           MOV     R3,A
   \   000017   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00001A   8A..         MOV     ?V4,R2
   \   00001C   8B..         MOV     ?V5,R3
   \   00001E   AE..         MOV     R6,?V4
   \   000020   AF..         MOV     R7,?V5
   1956          	if ( MSGpkt == NULL )
   \   000022   EE           MOV     A,R6
   \   000023   4F           ORL     A,R7
   \   000024   6049         JZ      ??MT_SysPkgSendMsg_0
   1957          	{
   1958          		return;
   1959          	}
   1960          	MSGpkt->hdr.event = event;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E5..         MOV     A,?V3
   \   00002C   F0           MOVX    @DPTR,A
   1961          	MSGpkt->cmd.DataLength = len;
   \   00002D   A8..         MOV     R0,?V7
   \   00002F   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000032   E8           MOV     A,R0
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   1962          	if ( MSGpkt->cmd.DataLength )
   \   000037   E8           MOV     A,R0
   \   000038   6029         JZ      ??MT_SysPkgSendMsg_1
   1963          	{
   1964          		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   00003A   12....       LCALL   ?Subroutine30 & 0xFFFF
   1965          		osal_memcpy( MSGpkt->cmd.Data, &pBuf[offset], MSGpkt->cmd.DataLength );
   \                     ??CrossCallReturnLabel_68:
   \   00003D                ; Setup parameters for call to function osal_memcpy
   \   00003D   7410         MOV     A,#0x10
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F8           MOV     R0,A
   \   000044   E5..         MOV     A,?V0
   \   000046   28           ADD     A,R0
   \   000047   F5..         MOV     ?V4,A
   \   000049   E4           CLR     A
   \   00004A   35..         ADDC    A,?V1
   \   00004C   F5..         MOV     ?V5,A
   \   00004E   75..00       MOV     ?V6,#0x0
   \   000051   78..         MOV     R0,#?V4
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000056   12....       LCALL   ?Subroutine17 & 0xFFFF
   1966          	}
   \                     ??CrossCallReturnLabel_36:
   \   000059   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00005C   7403         MOV     A,#0x3
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   8003         SJMP    ??CrossCallReturnLabel_64
   1967          	else
   1968          	{
   1969          		MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysPkgSendMsg_1:
   \   000063   12....       LCALL   ?Subroutine28 & 0xFFFF
   1970          	}
   1971          	osal_msg_send( taskID, (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_64:
   \   000066                ; Setup parameters for call to function osal_msg_send
   \   000066   EE           MOV     A,R6
   \   000067   FA           MOV     R2,A
   \   000068   EF           MOV     A,R7
   \   000069   FB           MOV     R3,A
   \   00006A   A9..         MOV     R1,?V2
   \   00006C   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1972          }
   \                     ??MT_SysPkgSendMsg_0:
   \   00006F   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysPing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysPing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysVersion::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysVersion

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysSetExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGetExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGetExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVItemInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVItemInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalStartTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalStartTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalStopTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalStopTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysRandom::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysRandom

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysAdcRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysAdcRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGpio::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGpio

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysStackTune::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysStackTune

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysSetUtcTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetUtcTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGetUtcTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGetUtcTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysSetTxPower::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetTxPower

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysResetInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysResetInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalTimerExpired::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalTimerExpired

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??powerOffSoc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    powerOffSoc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysP2PTransfer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysP2PTransfer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysBroadCastTransfer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysBroadCastTransfer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGroupTransfer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGroupTransfer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysPkgSendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysPkgSendMsg
   1973          
   1974          
   1975          static void MT_SysMultiwaySetReq( uint8 *pBuf )
   1976          {
   1977          	afIncomingMSGPacket_t *MSGpkt;
   1978          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] );
   1979          	if ( MSGpkt == NULL )
   1980          	{
   1981          		return;
   1982          	}
   1983          	MSGpkt->hdr.event = ZDO_MULTIWAY_SET_REQ;
   1984          	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
   1985          	if ( MSGpkt->cmd.DataLength )
   1986          	{
   1987          		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   1988          		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
   1989          	}
   1990          	else
   1991          	{
   1992          		MSGpkt->cmd.Data = NULL;
   1993          	}
   1994          	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   1995          }
   1996          
   1997          
   1998          static void MT_SysMultiwaySendReq( uint8 *pBuf )
   1999          {
   2000          	MT_SysGroupTransfer(pBuf);
   2001          }
   2002          
   2003          
   2004          static void MT_SysNWKInfoReq( uint8 *pBuf )
   2005          {
   2006          	afIncomingMSGPacket_t *MSGpkt;
   2007          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] );
   2008          	if ( MSGpkt == NULL )
   2009          	{
   2010          		return;
   2011          	}
   2012          	MSGpkt->hdr.event = ZDO_NWKINFO_REQ;
   2013          	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
   2014          	if ( MSGpkt->cmd.DataLength )
   2015          	{
   2016          		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   2017          		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
   2018          	}
   2019          	else
   2020          	{
   2021          		MSGpkt->cmd.Data = NULL;
   2022          	}
   2023          	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   2024          }
   2025          
   2026          /***************************************************************************************************
   2027           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     31   MT_SysAdcRead
        0     12   -> HalAdcRead
        0     12   -> MT_BuildAndSendZToolResponse
      0     34   MT_SysBroadCastTransfer
        0     15   -> osal_memcpy
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      0     22   MT_SysCommandProcessing
        0     19   -> MT_SysAdcRead
        0     19   -> MT_SysBroadCastTransfer
        0     19   -> MT_SysGetExtAddr
        0     19   -> MT_SysGetUtcTime
        0     19   -> MT_SysGpio
        0     19   -> MT_SysGroupTransfer
        0     19   -> MT_SysOsalNVDelete
        0     19   -> MT_SysOsalNVItemInit
        0     19   -> MT_SysOsalNVLength
        0     19   -> MT_SysOsalNVRead
        0     19   -> MT_SysOsalNVWrite
        0     19   -> MT_SysOsalStartTimer
        0     19   -> MT_SysOsalStopTimer
        0     19   -> MT_SysP2PTransfer
        0     19   -> MT_SysPing
        0     20   -> MT_SysPkgSendMsg
        0     19   -> MT_SysRandom
        0     19   -> MT_SysReset
        0     19   -> MT_SysSetExtAddr
        0     19   -> MT_SysSetTxPower
        0     19   -> MT_SysSetUtcTime
        0     19   -> MT_SysStackTune
        0     19   -> MT_SysVersion
        0     20   -> Node_auth_uart_msg_process
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      2     27   MT_SysGetExtAddr
        2      8   -> MT_BuildAndSendZToolResponse
        2      8   -> ZMacGetReq
      1     42   MT_SysGetUtcTime
        0     19   -> MT_BuildAndSendZToolResponse
        0     23   -> osal_ConvertUTCTime
        0     23   -> osal_buffer_uint32
        0     19   -> osal_getClock
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      2     20   MT_SysGpio
        2      1   -> MT_BuildAndSendZToolResponse
      0     34   MT_SysGroupTransfer
        0     15   -> osal_memcpy
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      1     29   MT_SysOsalNVDelete
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> osal_nv_delete
      1     38   MT_SysOsalNVItemInit
        0     15   -> MT_BuildAndSendZToolResponse
        0     17   -> osal_nv_item_init
        0     19   -> osal_nv_write
      1     31   MT_SysOsalNVLength
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> osal_nv_item_len
      1     45   MT_SysOsalNVRead
        0     22   -> MT_BuildAndSendZToolResponse
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> osal_memset
        0     22   -> osal_nv_item_len
        0     26   -> osal_nv_read
      1     42   MT_SysOsalNVWrite
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> ZMacSetReq
        0     19   -> osal_nv_item_len
        0     23   -> osal_nv_write
        0     21   -> zgSetItem
      1     36   MT_SysOsalStartTimer
        0     13   -> MT_BuildAndSendZToolResponse
        0     17   -> osal_start_timerEx
      1     29   MT_SysOsalStopTimer
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> osal_stop_timerEx
      1     10   MT_SysOsalTimerExpired
        0     10   -> MT_BuildAndSendZToolResponse
      0     34   MT_SysP2PTransfer
        0     15   -> osal_memcpy
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      2     21   MT_SysPing
        2      2   -> MT_BuildAndSendZToolResponse
      1     39   MT_SysPkgSendMsg
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      1     31   MT_SysRandom
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> Onboard_rand
      2     19   MT_SysReset
        2      0   -> Onboard_soft_reset
      0      0   MT_SysResetInd
      1     34   MT_SysSetExtAddr
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> ZMacSetReq
        0     15   -> osal_nv_write
      3     21   MT_SysSetTxPower
        2      2   -> MAC_MlmeSetReq
        2      2   -> MT_BuildAndSendZToolResponse
        2      2   -> macRadioSetTxPower
      1     43   MT_SysSetUtcTime
        0     24   -> MT_BuildAndSendZToolResponse
        0     24   -> osal_ConvertUTCSecs
        0     24   -> osal_build_uint16
        0     24   -> osal_build_uint32
        0     24   -> osal_setClock
      1     29   MT_SysStackTune
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZMacGetReq
        0     10   -> ZMacSetReq
      2     19   MT_SysVersion
        2      0   -> MT_BuildAndSendZToolResponse
      0      0   powerOffSoc


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
       9  ??Subroutine38_0
       2  ??Subroutine39_0
      13  ??Subroutine40_0
       8  ??Subroutine41_0
       8  ??Subroutine42_0
       3  ??Subroutine43_0
       7  ??Subroutine44_0
       8  ??Subroutine45_0
       5  ??Subroutine46_0
       7  ?Subroutine0
       7  ?Subroutine1
      17  ?Subroutine10
      12  ?Subroutine11
      13  ?Subroutine12
       1  ?Subroutine13
      20  ?Subroutine14
      17  ?Subroutine15
       8  ?Subroutine16
       9  ?Subroutine17
      10  ?Subroutine18
      36  ?Subroutine19
       8  ?Subroutine2
       9  ?Subroutine20
      20  ?Subroutine21
       1  ?Subroutine22
       7  ?Subroutine23
      16  ?Subroutine24
       6  ?Subroutine25
       4  ?Subroutine26
       8  ?Subroutine27
       8  ?Subroutine28
       7  ?Subroutine29
       3  ?Subroutine3
      16  ?Subroutine30
       6  ?Subroutine31
      11  ?Subroutine32
      10  ?Subroutine33
       9  ?Subroutine34
      10  ?Subroutine35
       9  ?Subroutine36
      10  ?Subroutine37
       5  ?Subroutine4
      18  ?Subroutine5
      15  ?Subroutine6
      28  ?Subroutine7
      13  ?Subroutine8
      17  ?Subroutine9
      89  MT_SysAdcRead
       6  MT_SysAdcRead::?relay
      76  MT_SysBroadCastTransfer
       6  MT_SysBroadCastTransfer::?relay
     764  MT_SysCommandProcessing
       6  MT_SysCommandProcessing::?relay
      36  MT_SysGetExtAddr
       6  MT_SysGetExtAddr::?relay
     179  MT_SysGetUtcTime
       6  MT_SysGetUtcTime::?relay
      36  MT_SysGpio
       6  MT_SysGpio::?relay
      77  MT_SysGroupTransfer
       6  MT_SysGroupTransfer::?relay
       8  MT_SysOsalEventId
      60  MT_SysOsalNVDelete
       6  MT_SysOsalNVDelete::?relay
     205  MT_SysOsalNVItemInit
       6  MT_SysOsalNVItemInit::?relay
      54  MT_SysOsalNVLength
       6  MT_SysOsalNVLength::?relay
     379  MT_SysOsalNVRead
       6  MT_SysOsalNVRead::?relay
     267  MT_SysOsalNVWrite
       6  MT_SysOsalNVWrite::?relay
     100  MT_SysOsalStartTimer
       6  MT_SysOsalStartTimer::?relay
      61  MT_SysOsalStopTimer
       6  MT_SysOsalStopTimer::?relay
      20  MT_SysOsalTimerExpired
       6  MT_SysOsalTimerExpired::?relay
      76  MT_SysP2PTransfer
       6  MT_SysP2PTransfer::?relay
      32  MT_SysPing
       6  MT_SysPing::?relay
     114  MT_SysPkgSendMsg
       6  MT_SysPkgSendMsg::?relay
      33  MT_SysRandom
       6  MT_SysRandom::?relay
      41  MT_SysReset
       6  MT_SysReset::?relay
       3  MT_SysResetInd
       6  MT_SysResetInd::?relay
      92  MT_SysSetExtAddr
       6  MT_SysSetExtAddr::?relay
      56  MT_SysSetTxPower
       6  MT_SysSetTxPower::?relay
     405  MT_SysSetUtcTime
       6  MT_SysSetUtcTime::?relay
      99  MT_SysStackTune
       6  MT_SysStackTune::?relay
      20  MT_SysVersion
       6  MT_SysVersion::?relay
       1  WDCTL
       1  _A_IEN0
       3  powerOffSoc
       6  powerOffSoc::?relay

 
 3 871 bytes in segment BANKED_CODE
   162 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
    10 bytes in segment XDATA_ROM_C
 
 4 033 bytes of CODE  memory
    10 bytes of CONST memory
     0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
