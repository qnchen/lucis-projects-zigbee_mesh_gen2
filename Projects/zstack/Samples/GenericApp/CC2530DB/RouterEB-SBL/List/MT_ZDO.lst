###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  13:46:08
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\mt\MT_ZDO.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0100
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\mt\MT_ZDO.c" -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D
#        MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE -D NV_INIT -D
#        OPEN_FCS -D PANID_INCREASE -D MAKE_CRC_SHDW -lC "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\Obj" -e
#        --no_code_motion --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List\MT_ZDO.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\Obj\MT_ZDO.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2014-05-16 18:14:48 -0700 (Fri, 16 May 2014) $
      4            Revision:       $Revision: 38577 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef MT_ZDO_FUNC
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "MT.h"
     49          #include "MT_ZDO.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          #include "OnBoard.h"
     56          #include "aps_groups.h"
     57          
     58          #if defined ( MT_ZDO_EXTENSIONS )
     59            #include "rtg.h"
     60          #endif
     61          #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
     62            #include "ZDSecMgr.h"
     63          #endif
     64          
     65          #include "nwk_util.h"
     66          
     67          /**************************************************************************************************
     68           * CONSTANTS
     69           **************************************************************************************************/
     70          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     71          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     72          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     73          #define MT_ZDO_BEACON_IND_LEN             21
     74          #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
     75          #define MT_ZDO_JOIN_CNF_LEN               5
     76          
     77          // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
     78          // sizeof(zdoConcentratorInd_t) is not usable.
     79          #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
     80          
     81          #define MTZDO_RESPONSE_BUFFER_LEN   100
     82          
     83          #define MTZDO_MAX_MATCH_CLUSTERS    16
     84          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     85          
     86          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     87          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     88          
     89          #define MT_ZDO_STATUS_LEN   1
     90          
     91          #if defined ( MT_ZDO_EXTENSIONS )
     92          typedef struct
     93          {
     94            uint16            ami;
     95            uint16            keyNvId;   // index to the Link Key table in NV
     96            ZDSecMgr_Authentication_Option authenticateOption;
     97          } ZDSecMgrEntry_t;
     98          #endif  // MT_ZDO_EXTENSIONS
     99          
    100          /**************************************************************************************************
    101           * GLOBAL VARIABLES
    102           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 *pBeaconIndBuf = NULL;
   \                     pBeaconIndBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /**************************************************************************************************
    107           * LOCAL VARIABLES
    108           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          bool ignoreIndication = FALSE;
   \                     ignoreIndication:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    110          
    111          /**************************************************************************************************
    112           * LOCAL FUNCTIONS
    113           **************************************************************************************************/
    114          #if defined (MT_ZDO_FUNC)
    115          void MT_ZdoNWKAddressRequest(uint8 *pBuf);
    116          void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
    117          void MT_ZdoNodeDescRequest(uint8 *pBuf);
    118          void MT_ZdoPowerDescRequest(uint8 *pBuf);
    119          void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    120          void MT_ZdoActiveEpRequest(uint8 *pBuf);
    121          void MT_ZdoMatchDescRequest(uint8 *pBuf);
    122          void MT_ZdoComplexDescRequest(uint8 *pBuf);
    123          void MT_ZdoUserDescRequest(uint8 *pBuf);
    124          void MT_ZdoEndDevAnnce(uint8 *pBuf);
    125          void MT_ZdoUserDescSet(uint8 *pBuf);
    126          void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    127          #if defined ( ZIGBEE_CHILD_AGING )
    128          void MT_ZdoEndDeviceTimeoutRequest(uint8 *pBuf);
    129          #endif // ZIGBEE_CHILD_AGING
    130          void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    131          void MT_ZdoBindRequest(uint8 *pBuf);
    132          void MT_ZdoUnbindRequest(uint8 *pBuf);
    133          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    134          #if defined ( MT_SYS_KEY_MANAGEMENT )
    135          void MT_ZdoSetLinkKey(uint8 *pBuf);
    136          void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    137          void MT_ZdoGetLinkKey(uint8 *pBuf);
    138          #endif /* MT_SYS_KEY_MANAGEMENT */
    139          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
    140          void MT_ZdoJoinReq(uint8 *pBuf);
    141          /* Call back function */
    142          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
    143          void *MT_ZdoBeaconIndCB ( void *pStr );
    144          void *MT_ZdoJoinCnfCB ( void *pStr );
    145          #if defined (MT_ZDO_MGMT)
    146          void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    147          void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    148          void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    149          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    150          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    151          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    152          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    153          #endif /* MT_ZDO_MGMT */
    154          void MT_ZdoSendData( uint8 *pBuf );
    155          void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
    156          void MT_ZdoStartupFromApp(uint8 *pBuf);
    157          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    158          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    159          #endif /* MT_ZDO_FUNC */
    160          
    161          #if defined (MT_ZDO_CB_FUNC)
    162          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    163          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    164          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    165          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    166          void* MT_ZdoSrcRtgCB( void *pStr );
    167          static void *MT_ZdoConcentratorIndCB(void *pStr);
    168          static void *MT_ZdoLeaveInd(void *vPtr);
    169          void *MT_ZdoTcDeviceInd( void *params );
    170          void *MT_ZdoPermitJoinInd( void *duration );
    171          #endif /* MT_ZDO_CB_FUNC */
    172          
    173          #if defined ( MT_ZDO_EXTENSIONS )
    174          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf );
    175          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf );
    176          void MT_ZdoSecAddLinkKey( uint8 *pBuf );
    177          void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
    178          void MT_ZdoSecDeviceRemove( uint8 *pBuf );
    179          void MT_ZdoExtRouteDisc( uint8 *pBuf );
    180          void MT_ZdoExtRouteCheck( uint8 *pBuf );
    181          static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
    182          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
    183          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
    184          static void MT_ZdoExtFindGroup( uint8 *pBuf );
    185          static void MT_ZdoExtAddGroup( uint8 *pBuf );
    186          static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
    187          static void MT_ZdoExtRxIdle( uint8 *pBuf );
    188          static void MT_ZdoExtNwkInfo( uint8 *pBuf );
    189          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf );
    190          static void MT_ZdoExtSetParams( uint8 *pBuf );
    191          extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    192          #endif // MT_ZDO_EXTENSIONS
    193          
    194          #if defined (MT_ZDO_FUNC)
    195          /***************************************************************************************************
    196           * @fn      MT_ZdoInit
    197           *
    198           * @brief   MT ZDO initialization
    199           *
    200           * @param   none
    201           *
    202           * @return  none
    203           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          void MT_ZdoInit(void)
   \                     MT_ZdoInit:
    205          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    206          #ifdef MT_ZDO_CB_FUNC
    207            /* Register with ZDO for indication callbacks */
    208            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
    209            ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
    210            ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
    211            ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &MT_ZdoPermitJoinInd);
    212            ZDO_RegisterForZdoCB(ZDO_TC_DEVICE_CBID, &MT_ZdoTcDeviceInd);
    213          #endif
    214          }
   \   000000   02....       LJMP    ?BRET
    215          
    216          /***************************************************************************************************
    217           * @fn      MT_ZdoCommandProcessing
    218           *
    219           * @brief
    220           *
    221           *   Process all the ZDO commands that are issued by test tool
    222           *
    223           * @param   pBuf - pointer to the msg buffer
    224           *
    225           *          | LEN  | CMD0  | CMD1  |  DATA  |
    226           *          |  1   |   1   |   1   |  0-255 |
    227           *
    228           * @return  status
    229           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    230          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
   \                     MT_ZdoCommandProcessing:
    231          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    232            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV     R6,#0x0
    233          
    234            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6048         JZ      ??MT_ZdoCommandProcessing_0
   \   000010   14           DEC     A
   \   000011   604A         JZ      ??MT_ZdoCommandProcessing_1
   \   000013   14           DEC     A
   \   000014   604C         JZ      ??MT_ZdoCommandProcessing_2
   \   000016   14           DEC     A
   \   000017   604E         JZ      ??MT_ZdoCommandProcessing_3
   \   000019   14           DEC     A
   \   00001A   6050         JZ      ??MT_ZdoCommandProcessing_4
   \   00001C   14           DEC     A
   \   00001D   6052         JZ      ??MT_ZdoCommandProcessing_5
   \   00001F   14           DEC     A
   \   000020   6054         JZ      ??MT_ZdoCommandProcessing_6
   \   000022   14           DEC     A
   \   000023   6056         JZ      ??MT_ZdoCommandProcessing_7
   \   000025   14           DEC     A
   \   000026   6058         JZ      ??MT_ZdoCommandProcessing_8
   \   000028   24FE         ADD     A,#-0x2
   \   00002A   6059         JZ      ??MT_ZdoCommandProcessing_9
   \   00002C   14           DEC     A
   \   00002D   605B         JZ      ??MT_ZdoCommandProcessing_10
   \   00002F   14           DEC     A
   \   000030   605D         JZ      ??MT_ZdoCommandProcessing_11
   \   000032   14           DEC     A
   \   000033   605F         JZ      ??MT_ZdoCommandProcessing_12
   \   000035   24ED         ADD     A,#-0x13
   \   000037   6060         JZ      ??MT_ZdoCommandProcessing_13
   \   000039   14           DEC     A
   \   00003A   6062         JZ      ??MT_ZdoCommandProcessing_14
   \   00003C   14           DEC     A
   \   00003D   6064         JZ      ??MT_ZdoCommandProcessing_15
   \   00003F   24FC         ADD     A,#-0x4
   \   000041   6065         JZ      ??MT_ZdoCommandProcessing_16
   \   000043   14           DEC     A
   \   000044   6067         JZ      ??MT_ZdoCommandProcessing_17
   \   000046   14           DEC     A
   \   000047   606E         JZ      ??MT_ZdoCommandProcessing_18
   \   000049   14           DEC     A
   \   00004A   6070         JZ      ??MT_ZdoCommandProcessing_19
   \   00004C   24EB         ADD     A,#-0x15
   \   00004E   6071         JZ      ??MT_ZdoCommandProcessing_20
   \   000050   14           DEC     A
   \   000051   6073         JZ      ??MT_ZdoCommandProcessing_21
   \   000053   14           DEC     A
   \   000054   605C         JZ      ??MT_ZdoCommandProcessing_22
   \   000056   8073         SJMP    ??MT_ZdoCommandProcessing_23
    235            {
    236          #if defined ( ZDO_NWKADDR_REQUEST )
    237              case MT_ZDO_NWK_ADDR_REQ:
    238                MT_ZdoNWKAddressRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_0:
   \   000058                ; Setup parameters for call to function MT_ZdoNWKAddressRequest
   \   000058   12....       LCALL   `??MT_ZdoNWKAddressRequest::?relay`; Banked call to: MT_ZdoNWKAddressRequest
    239                break;
   \   00005B   8070         SJMP    ??MT_ZdoCommandProcessing_24
    240          #endif
    241          
    242          #if defined ( ZDO_IEEEADDR_REQUEST )
    243              case MT_ZDO_IEEE_ADDR_REQ:
    244                MT_ZdoIEEEAddrRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_1:
   \   00005D                ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
   \   00005D   12....       LCALL   `??MT_ZdoIEEEAddrRequest::?relay`; Banked call to: MT_ZdoIEEEAddrRequest
    245                break;
   \   000060   806B         SJMP    ??MT_ZdoCommandProcessing_24
    246          #endif
    247          
    248          #if defined ( ZDO_NODEDESC_REQUEST )
    249              case MT_ZDO_NODE_DESC_REQ:
    250                MT_ZdoNodeDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_2:
   \   000062                ; Setup parameters for call to function MT_ZdoNodeDescRequest
   \   000062   12....       LCALL   `??MT_ZdoNodeDescRequest::?relay`; Banked call to: MT_ZdoNodeDescRequest
    251                break;
   \   000065   8066         SJMP    ??MT_ZdoCommandProcessing_24
    252          #endif
    253          
    254          #if defined ( ZDO_POWERDESC_REQUEST )
    255              case MT_ZDO_POWER_DESC_REQ:
    256                MT_ZdoPowerDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_3:
   \   000067                ; Setup parameters for call to function MT_ZdoPowerDescRequest
   \   000067   12....       LCALL   `??MT_ZdoPowerDescRequest::?relay`; Banked call to: MT_ZdoPowerDescRequest
    257                break;
   \   00006A   8061         SJMP    ??MT_ZdoCommandProcessing_24
    258          #endif
    259          
    260          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    261              case MT_ZDO_SIMPLE_DESC_REQ:
    262                MT_ZdoSimpleDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_4:
   \   00006C                ; Setup parameters for call to function MT_ZdoSimpleDescRequest
   \   00006C   12....       LCALL   `??MT_ZdoSimpleDescRequest::?relay`; Banked call to: MT_ZdoSimpleDescRequest
    263                break;
   \   00006F   805C         SJMP    ??MT_ZdoCommandProcessing_24
    264          #endif
    265          
    266          #if defined ( ZDO_ACTIVEEP_REQUEST )
    267              case MT_ZDO_ACTIVE_EP_REQ:
    268                MT_ZdoActiveEpRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_5:
   \   000071                ; Setup parameters for call to function MT_ZdoActiveEpRequest
   \   000071   12....       LCALL   `??MT_ZdoActiveEpRequest::?relay`; Banked call to: MT_ZdoActiveEpRequest
    269                break;
   \   000074   8057         SJMP    ??MT_ZdoCommandProcessing_24
    270          #endif
    271          
    272          #if defined ( ZDO_MATCH_REQUEST )
    273              case MT_ZDO_MATCH_DESC_REQ:
    274                MT_ZdoMatchDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_6:
   \   000076                ; Setup parameters for call to function MT_ZdoMatchDescRequest
   \   000076   12....       LCALL   `??MT_ZdoMatchDescRequest::?relay`; Banked call to: MT_ZdoMatchDescRequest
    275                break;
   \   000079   8052         SJMP    ??MT_ZdoCommandProcessing_24
    276          #endif
    277          
    278          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    279              case MT_ZDO_COMPLEX_DESC_REQ:
    280                MT_ZdoComplexDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_7:
   \   00007B                ; Setup parameters for call to function MT_ZdoComplexDescRequest
   \   00007B   12....       LCALL   `??MT_ZdoComplexDescRequest::?relay`; Banked call to: MT_ZdoComplexDescRequest
    281                break;
   \   00007E   804D         SJMP    ??MT_ZdoCommandProcessing_24
    282          #endif
    283          
    284          #if defined ( ZDO_USERDESC_REQUEST )
    285              case MT_ZDO_USER_DESC_REQ:
    286                MT_ZdoUserDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_8:
   \   000080                ; Setup parameters for call to function MT_ZdoUserDescRequest
   \   000080   12....       LCALL   `??MT_ZdoUserDescRequest::?relay`; Banked call to: MT_ZdoUserDescRequest
    287                break;
   \   000083   8048         SJMP    ??MT_ZdoCommandProcessing_24
    288          #endif
    289          
    290          #if defined ( ZDO_ENDDEVICE_ANNCE )
    291              case MT_ZDO_END_DEV_ANNCE:
    292                MT_ZdoEndDevAnnce(pBuf);
   \                     ??MT_ZdoCommandProcessing_9:
   \   000085                ; Setup parameters for call to function MT_ZdoEndDevAnnce
   \   000085   12....       LCALL   `??MT_ZdoEndDevAnnce::?relay`; Banked call to: MT_ZdoEndDevAnnce
    293                break;
   \   000088   8043         SJMP    ??MT_ZdoCommandProcessing_24
    294          #endif
    295          
    296          #if defined ( ZDO_USERDESCSET_REQUEST )
    297              case MT_ZDO_USER_DESC_SET:
    298                MT_ZdoUserDescSet(pBuf);
   \                     ??MT_ZdoCommandProcessing_10:
   \   00008A                ; Setup parameters for call to function MT_ZdoUserDescSet
   \   00008A   12....       LCALL   `??MT_ZdoUserDescSet::?relay`; Banked call to: MT_ZdoUserDescSet
    299                break;
   \   00008D   803E         SJMP    ??MT_ZdoCommandProcessing_24
    300          #endif
    301          
    302          #if defined ( ZDO_SERVERDISC_REQUEST )
    303              case MT_ZDO_SERVICE_DISC_REQ:
    304                MT_ZdoServiceDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_11:
   \   00008F                ; Setup parameters for call to function MT_ZdoServiceDiscRequest
   \   00008F   12....       LCALL   `??MT_ZdoServiceDiscRequest::?relay`; Banked call to: MT_ZdoServiceDiscRequest
    305                break;
   \   000092   8039         SJMP    ??MT_ZdoCommandProcessing_24
    306          #endif
    307          
    308          #if defined ( ZIGBEE_CHILD_AGING )
    309          #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
    310              case MT_ZDO_END_DEVICE_TIMEOUT_REQ:
    311                MT_ZdoEndDeviceTimeoutRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_12:
   \   000094                ; Setup parameters for call to function MT_ZdoEndDeviceTimeoutRequest
   \   000094   12....       LCALL   `??MT_ZdoEndDeviceTimeoutRequest::?relay`; Banked call to: MT_ZdoEndDeviceTimeoutRequest
    312                break;
   \   000097   8034         SJMP    ??MT_ZdoCommandProcessing_24
    313          #endif
    314          #endif // ZIGBEE_CHILD_AGING
    315          
    316          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    317              case MT_ZDO_END_DEV_BIND_REQ:
    318                MT_ZdoEndDevBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_13:
   \   000099                ; Setup parameters for call to function MT_ZdoEndDevBindRequest
   \   000099   12....       LCALL   `??MT_ZdoEndDevBindRequest::?relay`; Banked call to: MT_ZdoEndDevBindRequest
    319                break;
   \   00009C   802F         SJMP    ??MT_ZdoCommandProcessing_24
    320          #endif
    321          
    322          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    323              case MT_ZDO_BIND_REQ:
    324                MT_ZdoBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_14:
   \   00009E                ; Setup parameters for call to function MT_ZdoBindRequest
   \   00009E   12....       LCALL   `??MT_ZdoBindRequest::?relay`; Banked call to: MT_ZdoBindRequest
    325                break;
   \   0000A1   802A         SJMP    ??MT_ZdoCommandProcessing_24
    326          #endif
    327          
    328          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    329              case MT_ZDO_UNBIND_REQ:
    330                MT_ZdoUnbindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_15:
   \   0000A3                ; Setup parameters for call to function MT_ZdoUnbindRequest
   \   0000A3   12....       LCALL   `??MT_ZdoUnbindRequest::?relay`; Banked call to: MT_ZdoUnbindRequest
    331                break;
   \   0000A6   8025         SJMP    ??MT_ZdoCommandProcessing_24
    332          #endif
    333          
    334          #if defined ( MT_SYS_KEY_MANAGEMENT )
    335              case MT_ZDO_SET_LINK_KEY:
    336                MT_ZdoSetLinkKey(pBuf);
    337                break;
    338          
    339              case MT_ZDO_REMOVE_LINK_KEY:
    340                MT_ZdoRemoveLinkKey(pBuf);
    341                break;
    342          
    343              case MT_ZDO_GET_LINK_KEY:
    344                MT_ZdoGetLinkKey(pBuf);
    345                break;
    346          #endif // MT_SYS_KEY_MANAGEMENT
    347          
    348          #if defined ( ZDO_MANUAL_JOIN )
    349              case MT_ZDO_NWK_DISCOVERY_REQ:
    350                MT_ZdoNetworkDiscoveryReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_16:
   \   0000A8                ; Setup parameters for call to function MT_ZdoNetworkDiscoveryReq
   \   0000A8   12....       LCALL   `??MT_ZdoNetworkDiscoveryReq::?relay`; Banked call to: MT_ZdoNetworkDiscoveryReq
    351                break;
   \   0000AB   8020         SJMP    ??MT_ZdoCommandProcessing_24
    352          
    353              case MT_ZDO_JOIN_REQ:
    354                MT_ZdoJoinReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_17:
   \   0000AD                ; Setup parameters for call to function MT_ZdoJoinReq
   \   0000AD   12....       LCALL   `??MT_ZdoJoinReq::?relay`; Banked call to: MT_ZdoJoinReq
    355                break;
   \   0000B0   801B         SJMP    ??MT_ZdoCommandProcessing_24
    356          #endif
    357          
    358          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    359              case MT_ZDO_MGMT_NWKDISC_REQ:
    360                MT_ZdoMgmtNwkDiscRequest(pBuf);
    361                break;
    362          #endif
    363          
    364          #if defined ( ZDO_MGMT_LQI_REQUEST )
    365              case MT_ZDO_MGMT_LQI_REQ:
    366                MT_ZdoMgmtLqiRequest(pBuf);
    367                break;
    368          #endif
    369          
    370          #if defined ( ZDO_MGMT_RTG_REQUEST )
    371              case MT_ZDO_MGMT_RTG_REQ:
    372                MT_ZdoMgmtRtgRequest(pBuf);
    373                break;
    374          #endif
    375          
    376          #if defined ( ZDO_MGMT_BIND_REQUEST )
    377              case MT_ZDO_MGMT_BIND_REQ:
    378                MT_ZdoMgmtBindRequest(pBuf);
    379                break;
    380          #endif
    381          
    382          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    383              case MT_ZDO_MGMT_LEAVE_REQ:
    384                MT_ZdoMgmtLeaveRequest(pBuf);
    385                break;
    386          #endif
    387          
    388          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    389              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    390                MT_ZdoMgmtDirectJoinRequest(pBuf);
    391                break;
    392          #endif
    393          
    394          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    395              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    396                MT_ZdoMgmtPermitJoinRequest(pBuf);
    397                break;
    398          #endif
    399          
    400          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    401              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    402                MT_ZdoMgmtNwkUpdateRequest(pBuf);
    403                break;
    404          #endif
    405          
    406          #if defined ( ZDO_NETWORKSTART_REQUEST )
    407              case MT_ZDO_STARTUP_FROM_APP:
    408                MT_ZdoStartupFromApp(pBuf);
   \                     ??MT_ZdoCommandProcessing_22:
   \   0000B2                ; Setup parameters for call to function MT_ZdoStartupFromApp
   \   0000B2   12....       LCALL   `??MT_ZdoStartupFromApp::?relay`; Banked call to: MT_ZdoStartupFromApp
    409                break;
   \   0000B5   8016         SJMP    ??MT_ZdoCommandProcessing_24
    410          #endif
    411          
    412              case MT_ZDO_SEND_DATA:
    413                MT_ZdoSendData( pBuf );
   \                     ??MT_ZdoCommandProcessing_18:
   \   0000B7                ; Setup parameters for call to function MT_ZdoSendData
   \   0000B7   12....       LCALL   `??MT_ZdoSendData::?relay`; Banked call to: MT_ZdoSendData
    414                break;
   \   0000BA   8011         SJMP    ??MT_ZdoCommandProcessing_24
    415          
    416              case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
    417                MT_ZdoNwkAddrOfInterestReq( pBuf );
   \                     ??MT_ZdoCommandProcessing_19:
   \   0000BC                ; Setup parameters for call to function MT_ZdoNwkAddrOfInterestReq
   \   0000BC   12....       LCALL   `??MT_ZdoNwkAddrOfInterestReq::?relay`; Banked call to: MT_ZdoNwkAddrOfInterestReq
    418                break;
   \   0000BF   800C         SJMP    ??MT_ZdoCommandProcessing_24
    419          
    420              case MT_ZDO_MSG_CB_REGISTER:
    421                MT_ZdoRegisterForZDOMsg(pBuf);
   \                     ??MT_ZdoCommandProcessing_20:
   \   0000C1                ; Setup parameters for call to function MT_ZdoRegisterForZDOMsg
   \   0000C1   12....       LCALL   `??MT_ZdoRegisterForZDOMsg::?relay`; Banked call to: MT_ZdoRegisterForZDOMsg
    422                break;
   \   0000C4   8007         SJMP    ??MT_ZdoCommandProcessing_24
    423          
    424              case MT_ZDO_MSG_CB_REMOVE:
    425                MT_ZdoRemoveRegisteredCB(pBuf);
   \                     ??MT_ZdoCommandProcessing_21:
   \   0000C6                ; Setup parameters for call to function MT_ZdoRemoveRegisteredCB
   \   0000C6   12....       LCALL   `??MT_ZdoRemoveRegisteredCB::?relay`; Banked call to: MT_ZdoRemoveRegisteredCB
    426                break;
   \   0000C9   8002         SJMP    ??MT_ZdoCommandProcessing_24
    427          
    428          #if defined ( MT_ZDO_EXTENSIONS )
    429              case MT_ZDO_EXT_UPDATE_NWK_KEY:
    430                MT_ZdoSecUpdateNwkKey( pBuf );
    431                break;
    432          
    433              case MT_ZDO_EXT_SWITCH_NWK_KEY:
    434                MT_ZdoSecSwitchNwkKey( pBuf );
    435                break;
    436          
    437              case MT_ZDO_SEC_ADD_LINK_KEY:
    438                MT_ZdoSecAddLinkKey( pBuf );
    439                break;
    440          
    441              case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
    442                MT_ZdoSecEntryLookupExt( pBuf );
    443                break;
    444          
    445              case MT_ZDO_SEC_DEVICE_REMOVE:
    446                 MT_ZdoSecDeviceRemove( pBuf );
    447                 break;
    448          
    449              case MT_ZDO_EXT_ROUTE_DISC:
    450                 MT_ZdoExtRouteDisc( pBuf );
    451                 break;
    452          
    453              case MT_ZDO_EXT_ROUTE_CHECK:
    454                 MT_ZdoExtRouteCheck( pBuf );
    455                 break;
    456          
    457              case MT_ZDO_EXT_REMOVE_GROUP:
    458                MT_ZdoExtRemoveGroup( pBuf );
    459                break;
    460          
    461              case MT_ZDO_EXT_REMOVE_ALL_GROUP:
    462                MT_ZdoExtRemoveAllGroup( pBuf );
    463                break;
    464          
    465              case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
    466                MT_ZdoExtFindAllGroupsEndpoint( pBuf );
    467                break;
    468          
    469              case MT_ZDO_EXT_FIND_GROUP:
    470                MT_ZdoExtFindGroup( pBuf );
    471                break;
    472          
    473              case MT_ZDO_EXT_ADD_GROUP:
    474                MT_ZdoExtAddGroup( pBuf );
    475                break;
    476          
    477              case MT_ZDO_EXT_COUNT_ALL_GROUPS:
    478                MT_ZdoExtCountAllGroups( pBuf );
    479                break;
    480          
    481              case MT_ZDO_EXT_RX_IDLE:
    482                MT_ZdoExtRxIdle( pBuf );
    483                break;
    484                
    485              case MT_ZDO_EXT_NWK_INFO:
    486                MT_ZdoExtNwkInfo( pBuf );
    487                break;
    488                
    489              case MT_ZDO_EXT_SEC_APS_REMOVE_REQ:
    490                MT_ZdoExtSecApsRemoveReq( pBuf );
    491                break;
    492                
    493              case MT_ZDO_FORCE_CONCENTRATOR_CHANGE:
    494                ZDApp_ForceConcentratorChange();
    495                break;
    496                
    497              case MT_ZDO_EXT_SET_PARAMS:
    498                MT_ZdoExtSetParams( pBuf );
    499                break;
    500          #endif  // MT_ZDO_EXTENSIONS
    501          
    502              default:
    503                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_ZdoCommandProcessing_23:
   \   0000CB   7E02         MOV     R6,#0x2
    504                break;
    505            }
    506          
    507            return status;
   \                     ??MT_ZdoCommandProcessing_24:
   \   0000CD   EE           MOV     A,R6
   \   0000CE   F9           MOV     R1,A
   \   0000CF   02....       LJMP    ??Subroutine67_0 & 0xFFFF
    508          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    509          
    510          /***************************************************************************************************
    511           * @fn      MT_ZdoNwkAddrReq
    512           *
    513           * @brief   Handle a nwk address request.
    514           *
    515           * @param   pData  - MT message data
    516           *
    517           * @return  void
    518           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    519          void MT_ZdoNWKAddressRequest(uint8 *pBuf)
   \                     MT_ZdoNWKAddressRequest:
    520          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    521            uint8 cmdId;
    522            uint8 retValue;
    523            uint8 reqType;
    524            uint8 startIndex;
    525            uint8 *pExtAddr;
    526          
    527            /* parse header */
    528            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0,A
    529            pBuf += MT_RPC_FRAME_HDR_SZ;
    530          
    531            /* parse parameters */
    532            pExtAddr = pBuf;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   FE           MOV     R6,A
   \   000017   E4           CLR     A
   \   000018   3B           ADDC    A,R3
   \   000019   FF           MOV     R7,A
    533            pBuf += Z_EXTADDR_LEN;
   \   00001A   EE           MOV     A,R6
   \   00001B   2408         ADD     A,#0x8
   \   00001D   FA           MOV     R2,A
   \   00001E   E4           CLR     A
   \   00001F   3F           ADDC    A,R7
   \   000020   FB           MOV     R3,A
    534          
    535            /* Request type */
    536            reqType = *pBuf++;
    537          
    538            /* Start index */
    539            startIndex = *pBuf;
    540          
    541            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
   \   000021                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000021   7D00         MOV     R5,#0x0
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FC           MOV     R4,A
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   EF           MOV     A,R7
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000037                REQUIRE ?Subroutine5
   \   000037                ; // Fall through to label ?Subroutine5
    542          
    543            /* Build and send back the response */
    544            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    545            
    546          #if defined ( MT_ZDO_EXTENSIONS )
    547            {
    548              // Force a response message if the ext address matches a child of this device
    549              associated_devices_t *pAssoc;
    550              uint8 buf[21];
    551              uint8 *pBuf = buf;
    552              
    553              if ( (ZSTACK_ROUTER_BUILD)
    554                && (((pAssoc = AssocGetWithExt( pExtAddr )) != NULL)
    555                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    556              {
    557                uint16 nwkAddr = NLME_GetShortAddr();
    558                
    559                *pBuf++ = LO_UINT16(nwkAddr);
    560                *pBuf++ = HI_UINT16(nwkAddr);
    561                *pBuf++ = 0;
    562                *pBuf++ = LO_UINT16(NWK_addr_rsp);
    563                *pBuf++ = HI_UINT16(NWK_addr_rsp);
    564                *pBuf++ = 0;
    565                *pBuf++ = 0;
    566                *pBuf++ = LO_UINT16(nwkAddr);
    567                *pBuf++ = HI_UINT16(nwkAddr);
    568              
    569                *pBuf++ = ZSuccess;
    570          
    571                pBuf = osal_cpyExtAddr( pBuf, pExtAddr );
    572          
    573                *pBuf++ = LO_UINT16( pAssoc->shortAddr );
    574                *pBuf++ = HI_UINT16( pAssoc->shortAddr );
    575                *pBuf = 0;
    576          
    577                MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), 
    578                                            MT_ZDO_MSG_CB_INCOMING, 21, buf );
    579              }
    580            }
    581          #endif  
    582          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   80..         SJMP    ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   7965         MOV     R1,#0x65
   \   000002   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005                REQUIRE ??Subroutine62_0
   \   000005                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine66_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine67_0
   \   000003                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC..         MOV     R4,?XSP + 0
   \   00000A   AD..         MOV     R5,?XSP + 1
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   AA..         MOV     R2,?V0
   \   000010   22           RET
    583          
    584          /***************************************************************************************************
    585           * @fn      MT_ZdoIEEEAddrRequest
    586           *
    587           * @brief   Handle a IEEE address request.
    588           *
    589           * @param   pData  - MT message data
    590           *
    591           * @return  void
    592           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    593          void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
   \                     MT_ZdoIEEEAddrRequest:
    594          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    595            uint8 cmdId;
    596            uint8 retValue;
    597            uint16 shortAddr;
    598            uint8 reqType;
    599            uint8 startIndex;
    600          
    601            /* parse header */
    602            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine26 & 0xFFFF
    603            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_42:
   \   00000D   5001         JNC     ??MT_ZdoIEEEAddrRequest_0
   \   00000F   0B           INC     R3
    604          
    605            /* Dev address */
    606            shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
    607            pBuf += 2;
    608          
    609            /* request type */
    610            reqType = *pBuf++;
    611          
    612            /* start index */
    613            startIndex = *pBuf;
    614          
    615            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
   \                     ??MT_ZdoIEEEAddrRequest_0:
   \   000010                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000010   7D00         MOV     R5,#0x0
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FC           MOV     R4,A
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F9           MOV     R1,A
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FE           MOV     R6,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FB           MOV     R3,A
   \   00002C   EE           MOV     A,R6
   \   00002D   FA           MOV     R2,A
   \   00002E   12....       LCALL   `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   000031   80..         SJMP    ?Subroutine5
    616          
    617            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    618          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0,A
   \   000009   EA           MOV     A,R2
   \   00000A   2403         ADD     A,#0x3
   \   00000C   FA           MOV     R2,A
   \   00000D   22           RET
    619          
    620          /***************************************************************************************************
    621           * @fn      MT_ZdoNodeDescRequest
    622           *
    623           * @brief   Handle a Node Descriptor request.
    624           *
    625           * @param   pData  - MT message data
    626           *
    627           * @return  void
    628           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    629          void MT_ZdoNodeDescRequest (uint8 *pBuf)
   \                     MT_ZdoNodeDescRequest:
    630          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    631            uint8 cmdId;
    632            uint8 retValue;
    633            zAddrType_t destAddr;
    634            uint16 shortAddr;
    635          
    636            /* parse header */
    637            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine63_0 & 0xFFFF
    638            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_119:
   \   00000D   5001         JNC     ??MT_ZdoNodeDescRequest_0
   \   00000F   0B           INC     R3
    639          
    640            /* Destination address */
    641            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoNodeDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    642            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_0:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine39 & 0xFFFF
    643            pBuf += 2;
   \                     ??CrossCallReturnLabel_63:
   \   00001E   5001         JNC     ??MT_ZdoNodeDescRequest_1
   \   000020   0B           INC     R3
    644          
    645            /* Network address of interest */
    646            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    647            pBuf += 2;
    648          
    649            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoNodeDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7902         MOV     R1,#0x2
   \   00002B   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00002E   E9           MOV     A,R1
   \   00002F   02....       LJMP    ??Subroutine64_0 & 0xFFFF
    650          
    651            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    652          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   EA           MOV     A,R2
   \   000004   2402         ADD     A,#0x2
   \   000006   FA           MOV     R2,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   EC           MOV     A,R4
   \   00000D   F8           MOV     R0,A
   \   00000E   7401         MOV     A,#0x1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   EA           MOV     A,R2
   \   000009   2403         ADD     A,#0x3
   \   00000B   FA           MOV     R2,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   12....       LCALL   ?XSTACK_DISP101_8
   \   000003   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000006                REQUIRE ??Subroutine65_0
   \   000006                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000008   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   00000B   740A         MOV     A,#0xa
   \   00000D                REQUIRE ??Subroutine66_0
   \   00000D                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   E4           CLR     A
   \   00000A   CA           XCH     A,R2
   \   00000B   FB           MOV     R3,A
   \   00000C   EC           MOV     A,R4
   \   00000D   2A           ADD     A,R2
   \   00000E   E4           CLR     A
   \   00000F   3B           ADDC    A,R3
   \   000010   FD           MOV     R5,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   7965         MOV     R1,#0x65
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC..         MOV     R4,?XSP + 0
   \   00000A   AD..         MOV     R5,?XSP + 1
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   EE           MOV     A,R6
   \   00000F   FA           MOV     R2,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    653          
    654          /***************************************************************************************************
    655           * @fn      MT_ZdoPowerDescRequest
    656           *
    657           * @brief   Handle a Power Descriptor request.
    658           *
    659           * @param   pData  - MT message data
    660           *
    661           * @return  void
    662           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    663          void MT_ZdoPowerDescRequest(uint8 *pBuf)
   \                     MT_ZdoPowerDescRequest:
    664          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    665            uint8 cmdId;
    666            uint8 retValue;
    667            zAddrType_t destAddr;
    668            uint16 shortAddr;
    669          
    670            /* parse header */
    671            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine63_0 & 0xFFFF
    672            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_120:
   \   00000D   5001         JNC     ??MT_ZdoPowerDescRequest_0
   \   00000F   0B           INC     R3
    673          
    674            /* Dev address */
    675            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoPowerDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    676            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_1:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine39 & 0xFFFF
    677            pBuf += 2;
   \                     ??CrossCallReturnLabel_64:
   \   00001E   5001         JNC     ??MT_ZdoPowerDescRequest_1
   \   000020   0B           INC     R3
    678          
    679            /* Network address of interest */
    680            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    681            pBuf += 2;
    682          
    683            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoPowerDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7903         MOV     R1,#0x3
   \   00002B   02....       LJMP    ?Subroutine0 & 0xFFFF
    684          
    685            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    686          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003                REQUIRE ??Subroutine64_0
   \   000003                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET
    687          
    688          /***************************************************************************************************
    689           * @fn      MT_ZdoSimpleDescRequest
    690           *
    691           * @brief   Handle a Simple Descriptor request.
    692           *
    693           * @param   pBuf  - MT message data
    694           *
    695           * @return  void
    696           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    697          void MT_ZdoSimpleDescRequest(uint8 *pBuf)
   \                     MT_ZdoSimpleDescRequest:
    698          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    699            uint8 cmdId;
    700            uint8 retValue;
    701            uint8 epInt;
    702            zAddrType_t destAddr;
    703            uint16 shortAddr;
    704          
    705            /* parse header */
    706            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine63_0 & 0xFFFF
    707            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_121:
   \   00000D   5001         JNC     ??MT_ZdoSimpleDescRequest_0
   \   00000F   0B           INC     R3
    708          
    709            /* Dev address */
    710            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoSimpleDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    711            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_2:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine39 & 0xFFFF
    712            pBuf += 2;
   \                     ??CrossCallReturnLabel_65:
   \   00001E   5001         JNC     ??MT_ZdoSimpleDescRequest_1
   \   000020   0B           INC     R3
    713          
    714            /* Network address of interest */
    715            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    716            pBuf += 2;
    717          
    718            /* endpoint/interface */
    719            epInt = *pBuf++;
    720          
    721            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
   \                     ??MT_ZdoSimpleDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000034   12....       LCALL   ?XSTACK_DISP101_8
   \   000037   12....       LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   00003A   02....       LJMP    ??Subroutine65_0 & 0xFFFF
    722          
    723            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    724          }
    725          
    726          /***************************************************************************************************
    727           * @fn      MT_ZdoActiveEpRequest
    728           *
    729           * @brief   Handle a Active EP request.
    730           *
    731           * @param   pBuf  - MT message data
    732           *
    733           * @return  void
    734           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    735          void MT_ZdoActiveEpRequest(uint8 *pBuf)
   \                     MT_ZdoActiveEpRequest:
    736          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    737            uint8 cmdId;
    738            uint8 retValue;
    739            zAddrType_t destAddr;
    740            uint16 shortAddr;
    741          
    742            /* parse header */
    743            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine63_0 & 0xFFFF
    744            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_122:
   \   00000D   5001         JNC     ??MT_ZdoActiveEpRequest_0
   \   00000F   0B           INC     R3
    745          
    746            /* Dev address */
    747            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoActiveEpRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    748            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_3:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine39 & 0xFFFF
    749            pBuf += 2;
   \                     ??CrossCallReturnLabel_66:
   \   00001E   5001         JNC     ??MT_ZdoActiveEpRequest_1
   \   000020   0B           INC     R3
    750          
    751            /* Network address of interest */
    752            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    753            pBuf += 2;
    754          
    755            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoActiveEpRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7905         MOV     R1,#0x5
   \   00002B   02....       LJMP    ?Subroutine0 & 0xFFFF
    756          
    757            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    758          }
    759          
    760          /***************************************************************************************************
    761           * @fn      MT_ZdoMatchDescRequest
    762           *
    763           * @brief   Handle a Match Descriptor request.
    764           *
    765           * @param   pBuf  - MT message data
    766           *
    767           * @return  void
    768           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    769          void MT_ZdoMatchDescRequest(uint8 *pBuf)
   \                     MT_ZdoMatchDescRequest:
    770          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 74
   \   000005   74B6         MOV     A,#-0x4a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    771            uint8 cmdId;
    772            uint8 retValue = 0;
   \   00000A   12....       LCALL   ?Subroutine8 & 0xFFFF
    773            uint8 i, numInClusters, numOutClusters;
    774            uint16 profileId;
    775            zAddrType_t destAddr;
    776            uint16 shortAddr;
    777            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    778          
    779            /* parse header */
    780            cmdId = pBuf[MT_RPC_POS_CMD1];
    781            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_117:
   \   00000D   5001         JNC     ??MT_ZdoMatchDescRequest_0
   \   00000F   0B           INC     R3
    782          
    783            /* Dev address */
    784            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMatchDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    785            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_4:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine39 & 0xFFFF
    786            pBuf += 2;
   \                     ??CrossCallReturnLabel_67:
   \   00001E   5001         JNC     ??MT_ZdoMatchDescRequest_1
   \   000020   0B           INC     R3
    787          
    788            /* Network address of interest */
    789            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMatchDescRequest_1:
   \   000021   12....       LCALL   ?Subroutine21 & 0xFFFF
    790            pBuf += 2;
   \                     ??CrossCallReturnLabel_32:
   \   000024   EA           MOV     A,R2
   \   000025   2402         ADD     A,#0x2
   \   000027   FA           MOV     R2,A
   \   000028   5001         JNC     ??MT_ZdoMatchDescRequest_2
   \   00002A   0B           INC     R3
    791          
    792            /* Profile ID */
    793            profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMatchDescRequest_2:
   \   00002B   12....       LCALL   ?Subroutine9 & 0xFFFF
    794            pBuf += 2;
    795          
    796            /* NumInClusters */
    797            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_12:
   \   00002E   5001         JNC     ??MT_ZdoMatchDescRequest_3
   \   000030   0B           INC     R3
    798            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \                     ??MT_ZdoMatchDescRequest_3:
   \   000031   E5..         MOV     A,?V2
   \   000033   C3           CLR     C
   \   000034   9411         SUBB    A,#0x11
   \   000036   5019         JNC     ??MT_ZdoMatchDescRequest_4
    799            {
    800              /* IN clusters */
    801              for ( i = 0; i < numInClusters; i++ )
   \   000038   7F00         MOV     R7,#0x0
   \                     ??MT_ZdoMatchDescRequest_5:
   \   00003A   EF           MOV     A,R7
   \   00003B   C3           CLR     C
   \   00003C   95..         SUBB    A,?V2
   \   00003E   501A         JNC     ??MT_ZdoMatchDescRequest_6
    802              {
    803                inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000040   12....       LCALL   ?Subroutine11 & 0xFFFF
    804                pBuf += 2;
    805              }
   \                     ??CrossCallReturnLabel_16:
   \   000043   742A         MOV     A,#0x2a
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00004B   5001         JNC     ??MT_ZdoMatchDescRequest_7
   \   00004D   0B           INC     R3
   \                     ??MT_ZdoMatchDescRequest_7:
   \   00004E   0F           INC     R7
   \   00004F   80E9         SJMP    ??MT_ZdoMatchDescRequest_5
    806            }
    807            else
    808            {
    809              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_4:
   \   000051   85..82       MOV     DPL,?XSP + 0
   \   000054   85..83       MOV     DPH,?XSP + 1
   \   000057   7480         MOV     A,#-0x80
   \   000059   F0           MOVX    @DPTR,A
    810            }
    811          
    812            /* NumOutClusters */
    813            numOutClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_6:
   \   00005A   8A82         MOV     DPL,R2
   \   00005C   8B83         MOV     DPH,R3
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F5..         MOV     ?V3,A
   \   000061   A3           INC     DPTR
   \   000062   AA82         MOV     R2,DPL
   \   000064   AB83         MOV     R3,DPH
    814            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   000066   C3           CLR     C
   \   000067   9411         SUBB    A,#0x11
   \   000069   5019         JNC     ??MT_ZdoMatchDescRequest_8
    815            {
    816              /* OUT Clusters */
    817              for ( i = 0; i < numOutClusters; i++ )
   \   00006B   7F00         MOV     R7,#0x0
   \                     ??MT_ZdoMatchDescRequest_9:
   \   00006D   EF           MOV     A,R7
   \   00006E   C3           CLR     C
   \   00006F   95..         SUBB    A,?V3
   \   000071   501B         JNC     ??MT_ZdoMatchDescRequest_10
    818              {
    819                outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000073   12....       LCALL   ?Subroutine11 & 0xFFFF
    820                pBuf += 2;
    821              }
   \                     ??CrossCallReturnLabel_17:
   \   000076   740A         MOV     A,#0xa
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00007E   5001         JNC     ??MT_ZdoMatchDescRequest_11
   \   000080   0B           INC     R3
   \                     ??MT_ZdoMatchDescRequest_11:
   \   000081   0F           INC     R7
   \   000082   80E9         SJMP    ??MT_ZdoMatchDescRequest_9
    822            }
    823            else
    824            {
    825              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_8:
   \   000084   85..82       MOV     DPL,?XSP + 0
   \   000087   85..83       MOV     DPH,?XSP + 1
   \   00008A   7480         MOV     A,#-0x80
   \   00008C   804D         SJMP    ??MT_ZdoMatchDescRequest_12
    826            }
    827          
    828            if ( retValue == 0 )
   \                     ??MT_ZdoMatchDescRequest_10:
   \   00008E   85..82       MOV     DPL,?XSP + 0
   \   000091   85..83       MOV     DPH,?XSP + 1
   \   000094   E0           MOVX    A,@DPTR
   \   000095   7045         JNZ     ??MT_ZdoMatchDescRequest_13
    829            {
    830              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    831                                                 inClusters, numOutClusters, outClusters, 0);
   \   000097                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000097   75..00       MOV     ?V4,#0x0
   \   00009A   78..         MOV     R0,#?V4
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009F   740B         MOV     A,#0xb
   \   0000A1   12....       LCALL   ?XSTACK_DISP100_8
   \   0000A4   88..         MOV     ?V4,R0
   \   0000A6   89..         MOV     ?V5,R1
   \   0000A8   78..         MOV     R0,#?V4
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   78..         MOV     R0,#?V3
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   742E         MOV     A,#0x2e
   \   0000B4   12....       LCALL   ?XSTACK_DISP100_8
   \   0000B7   88..         MOV     ?V4,R0
   \   0000B9   89..         MOV     ?V5,R1
   \   0000BB   78..         MOV     R0,#?V4
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   78..         MOV     R0,#?V0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C5   A9..         MOV     R1,?V2
   \   0000C7   7409         MOV     A,#0x9
   \   0000C9   12....       LCALL   ?XSTACK_DISP101_8
   \   0000CC   12....       LCALL   `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   0000CF   7408         MOV     A,#0x8
   \   0000D1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D4   E9           MOV     A,R1
   \   0000D5   85..82       MOV     DPL,?XSP + 0
   \   0000D8   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_ZdoMatchDescRequest_12:
   \   0000DB   F0           MOVX    @DPTR,A
    832            }
    833          
    834            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMatchDescRequest_13:
   \   0000DC                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000DC   AC..         MOV     R4,?XSP + 0
   \   0000DE   AD..         MOV     R5,?XSP + 1
   \   0000E0   7B01         MOV     R3,#0x1
   \   0000E2   EE           MOV     A,R6
   \   0000E3   FA           MOV     R2,A
   \   0000E4   7965         MOV     R1,#0x65
   \   0000E6   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    835          }
   \   0000E9   744A         MOV     A,#0x4a
   \   0000EB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EE   7F06         MOV     R7,#0x6
   \   0000F0   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   EF           MOV     A,R7
   \   000004   25E0         ADD     A,0xE0 /* A   */
   \   000006   F8           MOV     R0,A
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008                REQUIRE ??Subroutine63_0
   \   000008                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   E5..         MOV     A,?V4
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E5..         MOV     A,?V5
   \   000010   F0           MOVX    @DPTR,A
   \   000011   EA           MOV     A,R2
   \   000012   2402         ADD     A,#0x2
   \   000014   FA           MOV     R2,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   E4           CLR     A
   \   000004   39           ADDC    A,R1
   \   000005   FD           MOV     R5,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V4,A
   \   000007   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00000A   E5..         MOV     A,?V4
   \   00000C   28           ADD     A,R0
   \   00000D   E4           CLR     A
   \   00000E   39           ADDC    A,R1
   \   00000F   F5..         MOV     ?V5,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0,A
   \   000007   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00000A   E5..         MOV     A,?V0
   \   00000C   28           ADD     A,R0
   \   00000D   E4           CLR     A
   \   00000E   39           ADDC    A,R1
   \   00000F   F5..         MOV     ?V1,A
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V2,A
   \   00001A   EA           MOV     A,R2
   \   00001B   2403         ADD     A,#0x3
   \   00001D   FA           MOV     R2,A
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine69_0
   \   000001                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   E4           CLR     A
   \   000003   C8           XCH     A,R0
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000009   EC           MOV     A,R4
   \   00000A   28           ADD     A,R0
   \   00000B   22           RET
    836          
    837          /***************************************************************************************************
    838           * @fn      MT_ZdoComplexDescRequest
    839           *
    840           * @brief   Handle a Complex Descriptor request.
    841           *
    842           * @param   pBuf  - MT message data
    843           *
    844           * @return  void
    845           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    846          void MT_ZdoComplexDescRequest(uint8 *pBuf)
   \                     MT_ZdoComplexDescRequest:
    847          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    848            uint8 cmdId;
    849            uint8 retValue;
    850            zAddrType_t destAddr;
    851            uint16 shortAddr;
    852          
    853            /* parse header */
    854            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine63_0 & 0xFFFF
    855            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_123:
   \   00000D   5001         JNC     ??MT_ZdoComplexDescRequest_0
   \   00000F   0B           INC     R3
    856          
    857            /* Dev address */
    858            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoComplexDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    859            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_5:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine39 & 0xFFFF
    860            pBuf += 2;
   \                     ??CrossCallReturnLabel_68:
   \   00001E   5001         JNC     ??MT_ZdoComplexDescRequest_1
   \   000020   0B           INC     R3
    861          
    862            /* Network address of interest */
    863            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    864            pBuf += 2;
    865          
    866            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoComplexDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7910         MOV     R1,#0x10
   \   00002B   02....       LJMP    ?Subroutine0 & 0xFFFF
    867          
    868            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    869          }
    870          
    871          /***************************************************************************************************
    872           * @fn      MT_ZdoUserDescRequest
    873           *
    874           * @brief   Handle a User Descriptor request.
    875           *
    876           * @param   pBuf  - MT message data
    877           *
    878           * @return  void
    879           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    880          void MT_ZdoUserDescRequest(uint8 *pBuf)
   \                     MT_ZdoUserDescRequest:
    881          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    882            uint8 cmdId;
    883            uint8 retValue;
    884            zAddrType_t destAddr;
    885            uint16 shortAddr;
    886          
    887            /* parse header */
    888            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine63_0 & 0xFFFF
    889            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_124:
   \   00000D   5001         JNC     ??MT_ZdoUserDescRequest_0
   \   00000F   0B           INC     R3
    890          
    891            /* Dev address */
    892            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUserDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    893            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_6:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine39 & 0xFFFF
    894            pBuf += 2;
   \                     ??CrossCallReturnLabel_69:
   \   00001E   5001         JNC     ??MT_ZdoUserDescRequest_1
   \   000020   0B           INC     R3
    895          
    896            /* Network address of interest */
    897            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
    898            pBuf += 2;
    899          
    900            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoUserDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7911         MOV     R1,#0x11
   \   00002B   80..         SJMP    ?Subroutine0
    901          
    902            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    903          }
    904          
    905          /***************************************************************************************************
    906           * @fn      MT_ZdoEndDevAnnce
    907           *
    908           * @brief   Handle a End Device Announce Descriptor request.
    909           *
    910           * @param   pBuf  - MT message data
    911           *
    912           * @return  void
    913           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    914          void MT_ZdoEndDevAnnce(uint8 *pBuf)
   \                     MT_ZdoEndDevAnnce:
    915          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
    916            uint8 cmdId;
    917            uint8 retValue;
    918            uint16 shortAddr;
    919            uint8 *pIEEEAddr;
    920          
    921            /* parse header */
    922            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
    923            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000016   EC           MOV     A,R4
   \   000017   2403         ADD     A,#0x3
   \   000019   FC           MOV     R4,A
   \   00001A   5001         JNC     ??MT_ZdoEndDevAnnce_0
   \   00001C   0D           INC     R5
    924          
    925            /* network address */
    926            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevAnnce_0:
   \   00001D   12....       LCALL   ?Subroutine15 & 0xFFFF
    927            pBuf += 2;
   \                     ??CrossCallReturnLabel_24:
   \   000020   5001         JNC     ??MT_ZdoEndDevAnnce_1
   \   000022   0D           INC     R5
    928          
    929            /* extended address */
    930            pIEEEAddr = pBuf;
    931            pBuf += Z_EXTADDR_LEN;
    932          
    933            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
   \                     ??MT_ZdoEndDevAnnce_1:
   \   000023                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000023   88..         MOV     ?V0,R0
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002A   8C82         MOV     DPL,R4
   \   00002C   8D83         MOV     DPH,R5
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00003B   7401         MOV     A,#0x1
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000040   02....       LJMP    ?Subroutine4 & 0xFFFF
    934          
    935            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    936          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000007   E4           CLR     A
   \   000008   39           ADDC    A,R1
   \   000009   FB           MOV     R3,A
   \   00000A   EC           MOV     A,R4
   \   00000B   2402         ADD     A,#0x2
   \   00000D   FC           MOV     R4,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine72_0
   \   000001                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   12....       LCALL   ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000003   EA           MOV     A,R2
   \   000004   28           ADD     A,R0
   \   000005   22           RET
    937          
    938          /***************************************************************************************************
    939           * @fn      MT_ZdoUserDescSet
    940           *
    941           * @brief   Handle a User Descriptor Set.
    942           *
    943           * @param   pBuf  - MT message data
    944           *
    945           * @return  void
    946           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          void MT_ZdoUserDescSet(uint8 *pBuf)
   \                     MT_ZdoUserDescSet:
    948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 27
   \   000005   74E5         MOV     A,#-0x1b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    949            uint8 cmdId;
    950            uint8 retValue;
    951            zAddrType_t destAddr;
    952            uint16 shortAddr;
    953            UserDescriptorFormat_t userDesc;
    954          
    955            /* parse header */
    956            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine26 & 0xFFFF
    957            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_43:
   \   00000D   5001         JNC     ??MT_ZdoUserDescSet_0
   \   00000F   0B           INC     R3
    958          
    959            /* Dev address */
    960            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUserDescSet_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    961            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_7:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine39 & 0xFFFF
    962            pBuf += 2;
   \                     ??CrossCallReturnLabel_70:
   \   00001E   5001         JNC     ??MT_ZdoUserDescSet_1
   \   000020   0B           INC     R3
    963          
    964            /* Network address of interest */
    965            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUserDescSet_1:
   \   000021   12....       LCALL   ?Subroutine12 & 0xFFFF
    966            pBuf += 2;
    967          
    968            /* User descriptor */
    969            userDesc.len = *pBuf++;
   \                     ??CrossCallReturnLabel_18:
   \   000024   C0E0         PUSH    A
   \   000026   740A         MOV     A,#0xa
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   D0E0         POP     A
   \   00002D   F0           MOVX    @DPTR,A
    970            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
   \   00002E                ; Setup parameters for call to function osal_memcpy
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A982         MOV     R1,DPL
   \   000037   AA83         MOV     R2,DPH
   \   000039   89..         MOV     ?V4,R1
   \   00003B   8A..         MOV     ?V5,R2
   \   00003D   88..         MOV     ?V6,R0
   \   00003F   78..         MOV     R0,#?V4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000044   740D         MOV     A,#0xd
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FC           MOV     R4,A
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   740E         MOV     A,#0xe
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   AA82         MOV     R2,DPL
   \   000054   AB83         MOV     R3,DPH
   \   000056   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000059   7403         MOV     A,#0x3
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
    971            pBuf += 16;
    972          
    973            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
   \   00005E                ; Setup parameters for call to function ZDP_UserDescSet
   \   00005E   740A         MOV     A,#0xa
   \   000060   12....       LCALL   ?XSTACK_DISP100_8
   \   000063   88..         MOV     ?V2,R0
   \   000065   89..         MOV     ?V3,R1
   \   000067   78..         MOV     R0,#?V2
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   7900         MOV     R1,#0x0
   \   00006E   EE           MOV     A,R6
   \   00006F   FC           MOV     R4,A
   \   000070   EF           MOV     A,R7
   \   000071   FD           MOV     R5,A
   \   000072   7403         MOV     A,#0x3
   \   000074   12....       LCALL   ?XSTACK_DISP101_8
   \   000077   12....       LCALL   `??ZDP_UserDescSet::?relay`; Banked call to: ZDP_UserDescSet
   \   00007A   7402         MOV     A,#0x2
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007F   12....       LCALL   ?Subroutine41 & 0xFFFF
    974          
    975            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_77:
   \   000082   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    976          }
   \   000085   741B         MOV     A,#0x1b
   \   000087                REQUIRE ?Subroutine1
   \   000087                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine68_0
   \   000003                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   7965         MOV     R1,#0x65
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   FE           MOV     R6,A
   \   000004   E4           CLR     A
   \   000005   39           ADDC    A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET
    977          
    978          /***************************************************************************************************
    979           * @fn      MT_ZdoServiceDiscRequest
    980           *
    981           * @brief   Handle a Server Discovery request.
    982           *
    983           * @param   pBuf  - MT message data
    984           *
    985           * @return  void
    986           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    987          void MT_ZdoServiceDiscRequest(uint8 *pBuf)
   \                     MT_ZdoServiceDiscRequest:
    988          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    989            uint8 cmdId;
    990            uint8 retValue;
    991            uint16 serviceMask;
    992          
    993            /* parse header */
    994            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine63_0 & 0xFFFF
    995            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_125:
   \   00000D   5001         JNC     ??MT_ZdoServiceDiscRequest_0
   \   00000F   0B           INC     R3
    996          
    997            /* Service Mask */
    998            serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
    999            pBuf += 2;
   1000          
   1001            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
   \                     ??MT_ZdoServiceDiscRequest_0:
   \   000010                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   000010   7900         MOV     R1,#0x0
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FC           MOV     R4,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FB           MOV     R3,A
   \   00001B   EC           MOV     A,R4
   \   00001C   FA           MOV     R2,A
   \   00001D   12....       LCALL   `??ZDP_ServerDiscReq::?relay`; Banked call to: ZDP_ServerDiscReq
   \   000020   02....       LJMP    ?Subroutine4 & 0xFFFF
   1002          
   1003            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1004          }
   1005          
   1006          #if defined ( ZIGBEE_CHILD_AGING )
   1007          /***************************************************************************************************
   1008           * @fn      MT_ZdoEndDeviceTimeoutRequest
   1009           *
   1010           * @brief   Handle an End Device Timeout request.
   1011           *
   1012           * @param   pBuf  - MT message data
   1013           *
   1014           * @return  void
   1015           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          void MT_ZdoEndDeviceTimeoutRequest(uint8 *pBuf)
   \                     MT_ZdoEndDeviceTimeoutRequest:
   1017          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
   1018            uint8 cmdId;
   1019            uint8 retValue;
   1020            uint16 parentAddr;
   1021            uint16 reqTimeout;
   1022          
   1023            /* parse header */
   1024            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
   1025            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000016   EC           MOV     A,R4
   \   000017   2403         ADD     A,#0x3
   \   000019   FC           MOV     R4,A
   \   00001A   5001         JNC     ??MT_ZdoEndDeviceTimeoutRequest_0
   \   00001C   0D           INC     R5
   1026          
   1027            /* Parent address */
   1028            parentAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDeviceTimeoutRequest_0:
   \   00001D   12....       LCALL   ?Subroutine15 & 0xFFFF
   1029            pBuf += 2;
   \                     ??CrossCallReturnLabel_25:
   \   000020   5001         JNC     ??MT_ZdoEndDeviceTimeoutRequest_1
   \   000022   0D           INC     R5
   1030          
   1031            /* Requested Timeout */
   1032            reqTimeout = BUILD_UINT16( pBuf[0], pBuf[1] );
   1033            pBuf += 2;
   1034          
   1035            retValue = (uint8)ZDP_EndDeviceTimeoutReq( parentAddr, reqTimeout, 0 );
   \                     ??MT_ZdoEndDeviceTimeoutRequest_1:
   \   000023                ; Setup parameters for call to function ZDP_EndDeviceTimeoutReq
   \   000023   7900         MOV     R1,#0x0
   \   000025   8C82         MOV     DPL,R4
   \   000027   8D83         MOV     DPH,R5
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FD           MOV     R5,A
   \   00002F   AC..         MOV     R4,?V0
   \   000031   12....       LCALL   `??ZDP_EndDeviceTimeoutReq::?relay`; Banked call to: ZDP_EndDeviceTimeoutReq
   \   000034   12....       LCALL   ?Subroutine42 & 0xFFFF
   1036          
   1037            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_129:
   \   000037   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1038          }
   \   00003A   7401         MOV     A,#0x1
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   7F02         MOV     R7,#0x2
   \   000041   02....       LJMP    ?BANKED_LEAVE_XDATA
   1039          #endif // ZIGBEE_CHILD_AGING
   1040          
   1041          /***************************************************************************************************
   1042           * @fn      MT_ZdoEndDevBindRequest
   1043           *
   1044           * @brief   Handle a End Device Bind request.
   1045           *
   1046           * @param   pBuf  - MT message data
   1047           *
   1048           * @return  void
   1049           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1050          void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   \                     MT_ZdoEndDevBindRequest:
   1051          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV     A,#-0x46
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1052            uint8 cmdId;
   1053            uint8 retValue = 0;
   \   00000A   12....       LCALL   ?Subroutine8 & 0xFFFF
   1054            uint8 i, epInt, numInClusters, numOutClusters;
   1055            zAddrType_t destAddr;
   1056            uint16 shortAddr;
   1057            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
   1058          
   1059            /* parse header */
   1060            cmdId = pBuf[MT_RPC_POS_CMD1];
   1061            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_118:
   \   00000D   5001         JNC     ??MT_ZdoEndDevBindRequest_0
   \   00000F   0B           INC     R3
   1062          
   1063            /* Dev address */
   1064            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoEndDevBindRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
   1065            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_8:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine39 & 0xFFFF
   1066            pBuf += 2;
   \                     ??CrossCallReturnLabel_71:
   \   00001E   5001         JNC     ??MT_ZdoEndDevBindRequest_1
   \   000020   0B           INC     R3
   1067          
   1068            /* Local coordinator of the binding */
   1069            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevBindRequest_1:
   \   000021   12....       LCALL   ?Subroutine21 & 0xFFFF
   1070            pBuf += 2;
   1071          
   1072            /* For now, skip past the extended address */
   1073            pBuf += Z_EXTADDR_LEN;
   1074          
   1075            /* Endpoint */
   1076            epInt = *pBuf++;
   \                     ??CrossCallReturnLabel_33:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FF           MOV     R7,A
   \   000034   EA           MOV     A,R2
   \   000035   240B         ADD     A,#0xb
   \   000037   FA           MOV     R2,A
   \   000038   5001         JNC     ??MT_ZdoEndDevBindRequest_2
   \   00003A   0B           INC     R3
   1077          
   1078            /* Profile ID */
   1079            profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevBindRequest_2:
   \   00003B   12....       LCALL   ?Subroutine9 & 0xFFFF
   1080            pBuf += 2;
   1081          
   1082            /* NumInClusters */
   1083            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_13:
   \   00003E   5001         JNC     ??MT_ZdoEndDevBindRequest_3
   \   000040   0B           INC     R3
   1084            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \                     ??MT_ZdoEndDevBindRequest_3:
   \   000041   E5..         MOV     A,?V2
   \   000043   C3           CLR     C
   \   000044   9410         SUBB    A,#0x10
   \   000046   501C         JNC     ??MT_ZdoEndDevBindRequest_4
   1085            {
   1086              for ( i = 0; i < numInClusters; i++ )
   \   000048   75..00       MOV     ?V3,#0x0
   \                     ??MT_ZdoEndDevBindRequest_5:
   \   00004B   E5..         MOV     A,?V3
   \   00004D   C3           CLR     C
   \   00004E   95..         SUBB    A,?V2
   \   000050   501B         JNC     ??MT_ZdoEndDevBindRequest_6
   1087              {
   1088                inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000052   12....       LCALL   ?Subroutine10 & 0xFFFF
   1089                pBuf += 2;
   1090              }
   \                     ??CrossCallReturnLabel_14:
   \   000055   7428         MOV     A,#0x28
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00005D   5001         JNC     ??MT_ZdoEndDevBindRequest_7
   \   00005F   0B           INC     R3
   \                     ??MT_ZdoEndDevBindRequest_7:
   \   000060   05..         INC     ?V3
   \   000062   80E7         SJMP    ??MT_ZdoEndDevBindRequest_5
   1091            }
   1092            else
   1093            {
   1094              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_4:
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   7480         MOV     A,#-0x80
   \   00006C   F0           MOVX    @DPTR,A
   1095            }
   1096          
   1097            /* NumOutClusters */
   1098            numOutClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_6:
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   8B83         MOV     DPH,R3
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F5..         MOV     ?V6,A
   \   000074   A3           INC     DPTR
   \   000075   AA82         MOV     R2,DPL
   \   000077   AB83         MOV     R3,DPH
   1099            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   000079   C3           CLR     C
   \   00007A   9410         SUBB    A,#0x10
   \   00007C   501C         JNC     ??MT_ZdoEndDevBindRequest_8
   1100            {
   1101              for ( i = 0; i < numOutClusters; i++ )
   \   00007E   75..00       MOV     ?V3,#0x0
   \                     ??MT_ZdoEndDevBindRequest_9:
   \   000081   E5..         MOV     A,?V3
   \   000083   C3           CLR     C
   \   000084   95..         SUBB    A,?V6
   \   000086   501C         JNC     ??MT_ZdoEndDevBindRequest_10
   1102              {
   1103                outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000088   12....       LCALL   ?Subroutine10 & 0xFFFF
   1104                pBuf += 2;
   1105              }
   \                     ??CrossCallReturnLabel_15:
   \   00008B   740A         MOV     A,#0xa
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000093   5001         JNC     ??MT_ZdoEndDevBindRequest_11
   \   000095   0B           INC     R3
   \                     ??MT_ZdoEndDevBindRequest_11:
   \   000096   05..         INC     ?V3
   \   000098   80E7         SJMP    ??MT_ZdoEndDevBindRequest_9
   1106            }
   1107            else
   1108            {
   1109              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_8:
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   7480         MOV     A,#-0x80
   \   0000A2   8056         SJMP    ??MT_ZdoEndDevBindRequest_12
   1110            }
   1111          
   1112            if ( retValue == 0 )
   \                     ??MT_ZdoEndDevBindRequest_10:
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   704E         JNZ     ??MT_ZdoEndDevBindRequest_13
   1113            {
   1114              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
   1115                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   \   0000AD                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0000AD   75..00       MOV     ?V3,#0x0
   \   0000B0   78..         MOV     R0,#?V3
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B5   740B         MOV     A,#0xb
   \   0000B7   12....       LCALL   ?XSTACK_DISP100_8
   \   0000BA   88..         MOV     ?V4,R0
   \   0000BC   89..         MOV     ?V5,R1
   \   0000BE   78..         MOV     R0,#?V4
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C3   E5..         MOV     A,?V6
   \   0000C5   F5..         MOV     ?V3,A
   \   0000C7   78..         MOV     R0,#?V3
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CC   742C         MOV     A,#0x2c
   \   0000CE   12....       LCALL   ?XSTACK_DISP100_8
   \   0000D1   88..         MOV     ?V4,R0
   \   0000D3   89..         MOV     ?V5,R1
   \   0000D5   78..         MOV     R0,#?V4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   78..         MOV     R0,#?V2
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DF   78..         MOV     R0,#?V0
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   EF           MOV     A,R7
   \   0000E5   F9           MOV     R1,A
   \   0000E6   740A         MOV     A,#0xa
   \   0000E8   12....       LCALL   ?XSTACK_DISP101_8
   \   0000EB   12....       LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   0000EE   7409         MOV     A,#0x9
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F3   E9           MOV     A,R1
   \   0000F4   85..82       MOV     DPL,?XSP + 0
   \   0000F7   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_ZdoEndDevBindRequest_12:
   \   0000FA   F0           MOVX    @DPTR,A
   1116            }
   1117          
   1118            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoEndDevBindRequest_13:
   \   0000FB                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000FB   AC..         MOV     R4,?XSP + 0
   \   0000FD   AD..         MOV     R5,?XSP + 1
   \   0000FF   7B01         MOV     R3,#0x1
   \   000101   EE           MOV     A,R6
   \   000102   FA           MOV     R2,A
   \   000103   7965         MOV     R1,#0x65
   \   000105   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1119          }
   \   000108   7446         MOV     A,#0x46
   \   00010A   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000003   A8..         MOV     R0,?V3
   \   000005   E8           MOV     A,R0
   \   000006   28           ADD     A,R0
   \   000007   F8           MOV     R0,A
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   F9           MOV     R1,A
   \   00000B   22           RET
   1120          
   1121          /***************************************************************************************************
   1122           * @fn      MT_ZdoBindRequest
   1123           *
   1124           * @brief   Handle a Bind request.
   1125           *
   1126           * @param   pBuf  - MT message data
   1127           *
   1128           * @return  void
   1129           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1130          void MT_ZdoBindRequest(uint8 *pBuf)
   \                     MT_ZdoBindRequest:
   1131          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1132            uint8 cmdId;
   1133            uint8 retValue;
   1134            zAddrType_t destAddr, devAddr;
   1135            uint8 *pSrcAddr, *ptr;
   1136            uint8 srcEPInt, dstEPInt;
   1137            uint16 clusterID;
   1138          
   1139            /* parse header */
   1140            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   12....       LCALL   ??Subroutine73_0 & 0xFFFF
   1141            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_144:
   \   000011   5001         JNC     ??MT_ZdoBindRequest_0
   \   000013   0F           INC     R7
   1142          
   1143            /* Dev address */
   1144            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoBindRequest_0:
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine29 & 0xFFFF
   1145            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_49:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine7 & 0xFFFF
   1146            pBuf += 2;
   1147          
   1148            /* SrcAddress */
   1149            pSrcAddr = pBuf;
   1150            pBuf += Z_EXTADDR_LEN;
   1151          
   1152            /* SrcEPInt */
   1153            srcEPInt = *pBuf++;
   1154          
   1155            /* ClusterID */
   1156            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   1157            pBuf += 2;
   1158          
   1159            /* Destination Address mode */
   1160            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_10:
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E8           MOV     A,R0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   EE           MOV     A,R6
   \   000028   2403         ADD     A,#0x3
   \   00002A   FE           MOV     R6,A
   \   00002B   5001         JNC     ??MT_ZdoBindRequest_1
   \   00002D   0F           INC     R7
   1161          
   1162            /* Destination Address */
   1163            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoBindRequest_1:
   \   00002E   7403         MOV     A,#0x3
   \   000030   68           XRL     A,R0
   \   000031   700E         JNZ     ??MT_ZdoBindRequest_2
   1164            {
   1165              ptr = pBuf;
   1166              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   EE           MOV     A,R6
   \   000034   FC           MOV     R4,A
   \   000035   EF           MOV     A,R7
   \   000036   FD           MOV     R5,A
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP101_8
   \   00003C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003F   8009         SJMP    ??CrossCallReturnLabel_104
   1167            }
   1168            else
   1169            {
   1170              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoBindRequest_2:
   \   000041   12....       LCALL   ?Subroutine30 & 0xFFFF
   1171            }
   \                     ??CrossCallReturnLabel_51:
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   12....       LCALL   ?Subroutine56 & 0xFFFF
   1172            /* The short address occupies LSB two bytes */
   1173            pBuf += Z_EXTADDR_LEN;
   1174          
   1175            /* DstEPInt */
   1176            dstEPInt = *pBuf;
   1177          
   1178            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??CrossCallReturnLabel_104:
   \   00004A                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00004A   75..00       MOV     ?V6,#0x0
   \   00004D   78..         MOV     R0,#?V6
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F5..         MOV     ?V6,A
   \   000061   78..         MOV     R0,#?V6
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000066   7403         MOV     A,#0x3
   \   000068   12....       LCALL   ?XSTACK_DISP100_8
   \   00006B   88..         MOV     ?V6,R0
   \   00006D   89..         MOV     ?V7,R1
   \   00006F   78..         MOV     R0,#?V6
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   78..         MOV     R0,#?V4
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   78..         MOV     R0,#?V2
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   A9..         MOV     R1,?V1
   \   000080   7412         MOV     A,#0x12
   \   000082   12....       LCALL   ?XSTACK_DISP102_8
   \   000085   7A21         MOV     R2,#0x21
   \   000087                REQUIRE ?Subroutine2
   \   000087                ; // Fall through to label ?Subroutine2
   1179          
   1180            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1181          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   000005   7408         MOV     A,#0x8
   \   000007   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00000D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000010   7413         MOV     A,#0x13
   \   000012                REQUIRE ??Subroutine70_0
   \   000012                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine71_0
   \   000004                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000006   740A         MOV     A,#0xa
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003   EE           MOV     A,R6
   \   000004   2402         ADD     A,#0x2
   \   000006   F5..         MOV     ?V2,A
   \   000008   E4           CLR     A
   \   000009   3F           ADDC    A,R7
   \   00000A   F5..         MOV     ?V3,A
   \   00000C   E5..         MOV     A,?V2
   \   00000E   2408         ADD     A,#0x8
   \   000010   FE           MOV     R6,A
   \   000011   E4           CLR     A
   \   000012   35..         ADDC    A,?V3
   \   000014   FF           MOV     R7,A
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V1,A
   \   00001C   A3           INC     DPTR
   \   00001D   AE82         MOV     R6,DPL
   \   00001F   AF83         MOV     R7,DPH
   \   000021   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000024   F5..         MOV     ?V4,A
   \   000026   E4           CLR     A
   \   000027   39           ADDC    A,R1
   \   000028   F5..         MOV     ?V5,A
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7409         MOV     A,#0x9
   \   000034   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0,A
   \   000009   EE           MOV     A,R6
   \   00000A   2403         ADD     A,#0x3
   \   00000C   FE           MOV     R6,A
   \   00000D   22           RET
   1182          
   1183          /***************************************************************************************************
   1184           * @fn      MT_ZdoUnbindRequest
   1185           *
   1186           * @brief   Handle a Unbind request.
   1187           *
   1188           * @param   pBuf  - MT message data
   1189           *
   1190           * @return  void
   1191           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1192          void MT_ZdoUnbindRequest(uint8 *pBuf)
   \                     MT_ZdoUnbindRequest:
   1193          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1194            uint8 cmdId;
   1195            uint8 retValue;
   1196            zAddrType_t destAddr, devAddr;
   1197            uint8 *pSrcAddr, *ptr;
   1198            uint8 srcEPInt, dstEPInt;
   1199            uint16 clusterID;
   1200          
   1201            /* parse header */
   1202            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   12....       LCALL   ??Subroutine73_0 & 0xFFFF
   1203            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_145:
   \   000011   5001         JNC     ??MT_ZdoUnbindRequest_0
   \   000013   0F           INC     R7
   1204          
   1205            /* dev address */
   1206            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUnbindRequest_0:
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine29 & 0xFFFF
   1207            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_50:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine7 & 0xFFFF
   1208            pBuf += 2;
   1209          
   1210            /* SrcAddress */
   1211            pSrcAddr = pBuf;
   1212            pBuf += Z_EXTADDR_LEN;
   1213          
   1214            /* SrcEPInt */
   1215            srcEPInt = *pBuf++;
   1216          
   1217            /* ClusterID */
   1218            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   1219            pBuf += 2;
   1220          
   1221            /* Destination Address mode */
   1222            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_11:
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E8           MOV     A,R0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   EE           MOV     A,R6
   \   000028   2403         ADD     A,#0x3
   \   00002A   FE           MOV     R6,A
   \   00002B   5001         JNC     ??MT_ZdoUnbindRequest_1
   \   00002D   0F           INC     R7
   1223          
   1224            /* Destination Address */
   1225            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoUnbindRequest_1:
   \   00002E   7403         MOV     A,#0x3
   \   000030   68           XRL     A,R0
   \   000031   700E         JNZ     ??MT_ZdoUnbindRequest_2
   1226            {
   1227              ptr = pBuf;
   1228              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   EE           MOV     A,R6
   \   000034   FC           MOV     R4,A
   \   000035   EF           MOV     A,R7
   \   000036   FD           MOV     R5,A
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP101_8
   \   00003C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003F   8009         SJMP    ??CrossCallReturnLabel_105
   1229            }
   1230            else
   1231            {
   1232              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUnbindRequest_2:
   \   000041   12....       LCALL   ?Subroutine30 & 0xFFFF
   1233            }
   \                     ??CrossCallReturnLabel_52:
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   12....       LCALL   ?Subroutine56 & 0xFFFF
   1234            /* The short address occupies LSB two bytes */
   1235            pBuf += Z_EXTADDR_LEN;
   1236          
   1237            /* dstEPInt */
   1238            dstEPInt = *pBuf;
   1239          
   1240            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??CrossCallReturnLabel_105:
   \   00004A                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00004A   75..00       MOV     ?V6,#0x0
   \   00004D   78..         MOV     R0,#?V6
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F5..         MOV     ?V6,A
   \   000061   78..         MOV     R0,#?V6
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000066   7403         MOV     A,#0x3
   \   000068   12....       LCALL   ?XSTACK_DISP100_8
   \   00006B   88..         MOV     ?V6,R0
   \   00006D   89..         MOV     ?V7,R1
   \   00006F   78..         MOV     R0,#?V6
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   78..         MOV     R0,#?V4
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   78..         MOV     R0,#?V2
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   A9..         MOV     R1,?V1
   \   000080   7412         MOV     A,#0x12
   \   000082   12....       LCALL   ?XSTACK_DISP102_8
   \   000085   7A22         MOV     R2,#0x22
   \   000087   02....       LJMP    ?Subroutine2 & 0xFFFF
   1241          
   1242            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1243          }
   1244          
   1245          #if defined (MT_SYS_KEY_MANAGEMENT)
   1246          /***************************************************************************************************
   1247           * @fn      MT_ZdoSetLinkKey
   1248           *
   1249           * @brief   Set an application or trust center link key.
   1250           *
   1251           * @param   pBuf  - MT message data
   1252           *
   1253           * @return  void
   1254           ***************************************************************************************************/
   1255          void MT_ZdoSetLinkKey(uint8 *pBuf)
   1256          {
   1257            uint8 cmdId;
   1258            uint8 retValue;
   1259            uint8 *pExtAddr;
   1260            uint8 *pKey;
   1261            uint16 shortAddr;
   1262          
   1263            /* parse header */
   1264            cmdId = pBuf[MT_RPC_POS_CMD1];
   1265            pBuf += MT_RPC_FRAME_HDR_SZ;
   1266          
   1267            /* ShortAddr */
   1268            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1269            pBuf += 2;
   1270          
   1271            /* Extended Addr */
   1272            pExtAddr = pBuf;
   1273            pBuf += Z_EXTADDR_LEN;
   1274          
   1275            /* Key data */
   1276            pKey = pBuf;
   1277          
   1278            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1279          
   1280            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1281          }
   1282          
   1283          /***************************************************************************************************
   1284           * @fn      MT_ZdoRemoveLinkKey
   1285           *
   1286           * @brief   Remove an application or trust center link key.
   1287           *
   1288           * @param   pBuf  - MT message data
   1289           *
   1290           * @return  void
   1291           ***************************************************************************************************/
   1292          void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1293          {
   1294            uint8 cmdId;
   1295            uint8 retValue;
   1296            uint8 *pExtAddr;
   1297          
   1298            /* parse header */
   1299            cmdId = pBuf[MT_RPC_POS_CMD1];
   1300            pBuf += MT_RPC_FRAME_HDR_SZ;
   1301          
   1302            /* ShortAddr */
   1303            pExtAddr = pBuf;
   1304          
   1305            retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1306          
   1307            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1308          }
   1309          
   1310          /***************************************************************************************************
   1311           * @fn      MT_ZdoGetLinkKey
   1312           *
   1313           * @brief   Get the application link key.
   1314           *
   1315           * @param   pBuf  - MT message data
   1316           *
   1317           * @return  void
   1318           ***************************************************************************************************/
   1319          void MT_ZdoGetLinkKey(uint8 *pBuf)
   1320          {
   1321            uint8 cmdId;
   1322            uint8 retValue;
   1323            uint8 *pExtAddr;
   1324            uint8 *retBuf = NULL;
   1325            uint8 len;
   1326            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1327            uint16 apsLinkKeyNvId;
   1328          
   1329            // parse header
   1330            cmdId = pBuf[MT_RPC_POS_CMD1];
   1331            pBuf += MT_RPC_FRAME_HDR_SZ;
   1332          
   1333            // Extended Address
   1334            pExtAddr = pBuf;
   1335          
   1336            // Fetch the key NV ID
   1337            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1338          
   1339            if (retValue == ZSuccess)
   1340            {
   1341              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1342              {
   1343                // retrieve key from NV
   1344                if (osal_nv_read( apsLinkKeyNvId, 0,
   1345                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1346                {
   1347                  retValue = ZNwkUnknownDevice;
   1348                }
   1349              }
   1350              else
   1351              {
   1352                retValue = ZNwkUnknownDevice;
   1353              }
   1354            }
   1355          
   1356            // Construct the response message
   1357            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1358            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1359            {
   1360              if (retValue == ZSuccess)
   1361              {
   1362                // Extended Address
   1363                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1364          
   1365                // Key data
   1366                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
   1367              }
   1368              else
   1369              {
   1370                // Failed case - set the rest fields to all FF
   1371                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
   1372              }
   1373          
   1374              retBuf[0] = retValue;  // Status
   1375          
   1376              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1377          
   1378              // clear retBuf because it contains key data and free allocated memory
   1379              osal_memset(retBuf, 0x00, len);
   1380          
   1381              osal_mem_free(retBuf);
   1382            }
   1383          
   1384            // clear copy of key in RAM
   1385            if (pApsLinkKey != NULL)
   1386            {
   1387              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1388          
   1389              osal_mem_free(pApsLinkKey);
   1390            }
   1391          
   1392            return;
   1393          }
   1394          #endif // MT_SYS_KEY_MANAGEMENT
   1395          
   1396          #if defined (MT_ZDO_MGMT)
   1397          /***************************************************************************************************
   1398           * @fn      MT_ZdoMgmtNwkDiscRequest
   1399           *
   1400           * @brief   Handle a Mgmt Nwk Discovery request.
   1401           *
   1402           * @param   pBuf  - MT message data
   1403           *
   1404           * @return  void
   1405           ***************************************************************************************************/
   1406          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1407          {
   1408            uint8 cmdId;
   1409            uint8 retValue;
   1410            zAddrType_t destAddr;
   1411            uint32 scanChannels;
   1412            uint8 scanDuration, startIndex;
   1413          
   1414            /* parse header */
   1415            cmdId = pBuf[MT_RPC_POS_CMD1];
   1416            pBuf += MT_RPC_FRAME_HDR_SZ;
   1417          
   1418            /* Dev address */
   1419            destAddr.addrMode = Addr16Bit;
   1420            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1421            pBuf += 2;
   1422          
   1423            /* Scan Channels */
   1424            scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   1425            pBuf += 4;
   1426          
   1427            /* Scan Duration */
   1428            scanDuration = *pBuf++;
   1429          
   1430            /* Start Index */
   1431            startIndex = *pBuf;
   1432          
   1433            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1434          
   1435            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1436          }
   1437          
   1438          /***************************************************************************************************
   1439           * @fn      MT_ZdoMgmtLqiRequest
   1440           *
   1441           * @brief   Handle a Mgmt Lqi request.
   1442           *
   1443           * @param   pBuf  - MT message data
   1444           *
   1445           * @return  void
   1446           ***************************************************************************************************/
   1447          void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1448          {
   1449            uint8 cmdId;
   1450            uint8 retValue;
   1451            zAddrType_t destAddr;
   1452            uint8 startIndex;
   1453          
   1454            /* parse header */
   1455            cmdId = pBuf[MT_RPC_POS_CMD1];
   1456            pBuf += MT_RPC_FRAME_HDR_SZ;
   1457          
   1458            /* Dev address */
   1459            destAddr.addrMode = Addr16Bit;
   1460            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1461            pBuf += 2;
   1462          
   1463            /* Start Index */
   1464            startIndex = *pBuf;
   1465          
   1466            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1467          
   1468            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1469          }
   1470          
   1471          /***************************************************************************************************
   1472           * @fn      MT_ZdoMgmtRtgRequest
   1473           *
   1474           * @brief   Handle a Mgmt Rtg request.
   1475           *
   1476           * @param   pBuf  - MT message data
   1477           *
   1478           * @return  void
   1479           ***************************************************************************************************/
   1480          void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1481          {
   1482            uint8 cmdId;
   1483            uint8 retValue;
   1484            zAddrType_t destAddr;
   1485            uint8 startIndex;
   1486          
   1487            /* parse header */
   1488            cmdId = pBuf[MT_RPC_POS_CMD1];
   1489            pBuf += MT_RPC_FRAME_HDR_SZ;
   1490          
   1491            /* Dev Address */
   1492            destAddr.addrMode = Addr16Bit;
   1493            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   1494            pBuf += 2;
   1495          
   1496            /* Start Index */
   1497            startIndex = *pBuf;
   1498          
   1499            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1500          
   1501            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1502          }
   1503          
   1504          /***************************************************************************************************
   1505           * @fn      MT_ZdoMgmtBindRequest
   1506           *
   1507           * @brief   Handle a Mgmt Bind request.
   1508           *
   1509           * @param   pBuf  - MT message data
   1510           *
   1511           * @return  void
   1512           ***************************************************************************************************/
   1513          void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1514          {
   1515            uint8 cmdId;
   1516            uint8 retValue;
   1517            zAddrType_t destAddr;
   1518            uint8 startIndex;
   1519          
   1520            /* parse header */
   1521            cmdId = pBuf[MT_RPC_POS_CMD1];
   1522            pBuf += MT_RPC_FRAME_HDR_SZ;
   1523          
   1524            /* Dev Address */
   1525            destAddr.addrMode = Addr16Bit;
   1526            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1527            pBuf += 2;
   1528          
   1529            /* Start Index */
   1530            startIndex = *pBuf;
   1531          
   1532            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1533          
   1534            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1535          }
   1536          
   1537          /***************************************************************************************************
   1538           * @fn      MT_ZdoMgmtLeaveRequest
   1539           *
   1540           * @brief   Handle a Mgmt Leave request.
   1541           *
   1542           * @param   pBuf  - MT message data
   1543           *
   1544           * @return  void
   1545           ***************************************************************************************************/
   1546          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1547          {
   1548            uint8 cmdId;
   1549            uint8 retValue;
   1550            zAddrType_t destAddr;
   1551            uint8 *pIEEEAddr;
   1552            uint8 removeChildren;
   1553            uint8 rejoin;
   1554          
   1555            /* parse header */
   1556            cmdId = pBuf[MT_RPC_POS_CMD1];
   1557            pBuf += MT_RPC_FRAME_HDR_SZ;
   1558          
   1559            /* Destination Address */
   1560            destAddr.addrMode = Addr16Bit;
   1561            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1562            pBuf += 2;
   1563          
   1564            /* IEEE address */
   1565            pIEEEAddr = pBuf;
   1566            pBuf += Z_EXTADDR_LEN;
   1567          
   1568            /* Rejoin if bit0 is set */
   1569            rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
   1570          
   1571            /* Remove Children if bit1 is set */
   1572            removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
   1573          
   1574            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1575          
   1576            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1577          }
   1578          
   1579          /***************************************************************************************************
   1580           * @fn      MT_ZdoMgmtDirectJoinRequest
   1581           *
   1582           * @brief   Handle a Mgmt Direct Join request.
   1583           *
   1584           * @param   pBuf  - MT message data
   1585           *
   1586           * @return  void
   1587           ***************************************************************************************************/
   1588          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1589          {
   1590            uint8 cmdId;
   1591            uint8 retValue;
   1592            zAddrType_t destAddr;
   1593            uint8 *deviceAddr;
   1594            uint8 capInfo;
   1595          
   1596            /* parse header */
   1597            cmdId = pBuf[MT_RPC_POS_CMD1];
   1598            pBuf += MT_RPC_FRAME_HDR_SZ;
   1599          
   1600            /* Destination Address */
   1601            destAddr.addrMode = Addr16Bit;
   1602            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1603            pBuf += 2;
   1604          
   1605            /* Device Address */
   1606            deviceAddr = pBuf;
   1607            pBuf += Z_EXTADDR_LEN;
   1608          
   1609            /* Capability information */
   1610            capInfo = *pBuf;
   1611          
   1612            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1613          
   1614            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1615          }
   1616          
   1617          /***************************************************************************************************
   1618           * @fn      MT_ZdoMgmtPermitJoinRequest
   1619           *
   1620           * @brief   Handle a Mgmt Permit Join request.
   1621           *
   1622           * @param   pBuf  - MT message data
   1623           *
   1624           * @return  void
   1625           ***************************************************************************************************/
   1626          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1627          {
   1628            uint8 cmdId;
   1629            uint8 dataLn;
   1630            uint8 retValue;
   1631            uint8 duration;
   1632            uint8 tcSignificance;
   1633            zAddrType_t destAddr;
   1634          
   1635            /* parse header */
   1636            dataLn = pBuf[MT_RPC_POS_LEN];
   1637            cmdId = pBuf[MT_RPC_POS_CMD1];
   1638            pBuf += MT_RPC_FRAME_HDR_SZ;
   1639          
   1640            if ( 4 == dataLn )
   1641            {
   1642              /* addrMode was hardwired up to Z-Stack 2.6.0 */
   1643              destAddr.addrMode = afAddr16Bit; 
   1644            }
   1645            else
   1646            {
   1647              /* addrMode is a parameter after Z-Stack 2.6.0 */
   1648              destAddr.addrMode = *pBuf++;
   1649            }
   1650            
   1651            /* Destination Address */
   1652            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1653            pBuf += 2;
   1654          
   1655            /* Duration */
   1656            duration = *pBuf++;
   1657          
   1658            /* Trust center significance */
   1659            tcSignificance = *pBuf;
   1660          
   1661            ignoreIndication = TRUE;
   1662            retValue = (uint8)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1663            ignoreIndication = FALSE;
   1664            
   1665            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1666          }
   1667          
   1668          /***************************************************************************************************
   1669           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1670           *
   1671           * @brief   Handle a Mgmt Nwk Update request.
   1672           *
   1673           * @param   pBuf  - MT message data
   1674           *
   1675           * @return  void
   1676           ***************************************************************************************************/
   1677          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   1678          {
   1679            uint8 cmdId;
   1680            uint8 retValue;
   1681            zAddrType_t destAddr;
   1682            uint32 channelMask;
   1683            uint8 scanDuration, scanCount;
   1684            uint16 nwkManagerAddr;
   1685          
   1686              /* parse header */
   1687            cmdId = pBuf[MT_RPC_POS_CMD1];
   1688            pBuf += MT_RPC_FRAME_HDR_SZ;
   1689          
   1690            /* Destination address */
   1691            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1692            pBuf += 2;
   1693          
   1694            /* Destination address mode */
   1695            destAddr.addrMode = *pBuf++;
   1696          
   1697            channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   1698            pBuf += 4;
   1699          
   1700            /* Scan duration */
   1701            scanDuration = *pBuf++;
   1702          
   1703            /* Scan count */
   1704            scanCount = *pBuf++;
   1705          
   1706            /* NWK manager address */
   1707            nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1708          
   1709            /* Send the Management Network Update request */
   1710            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1711                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1712          
   1713            /*
   1714              Since we don't recevied our own broadcast messages, we should
   1715              send a unicast copy of the message to ourself.
   1716            */
   1717            if ( destAddr.addrMode == AddrBroadcast )
   1718            {
   1719              destAddr.addrMode = Addr16Bit;
   1720              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1721              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1722                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1723            }
   1724          
   1725            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1726          }
   1727          #endif /* MT_ZDO_MGMT */
   1728          
   1729          /***************************************************************************************************
   1730           * @fn      MT_ZdoSendData
   1731           *
   1732           * @brief   Handle a ZDO Send Data request.
   1733           *
   1734           * @param   pBuf  - MT message data
   1735           *
   1736           * @return  void
   1737           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1738          void MT_ZdoSendData( uint8 *pBuf )
   \                     MT_ZdoSendData:
   1739          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V1,R3
   1740            uint8 cmdId;
   1741            uint8 retValue;
   1742            zAddrType_t destAddr;
   1743            uint8 transSeq;
   1744            uint8 len;
   1745            uint16 cmd;
   1746          
   1747              /* parse header */
   1748            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   1749            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000014   EA           MOV     A,R2
   \   000015   2403         ADD     A,#0x3
   \   000017   F5..         MOV     ?V0,A
   \   000019   5002         JNC     ??MT_ZdoSendData_0
   \   00001B   05..         INC     ?V1
   1750          
   1751            /* Destination address */
   1752            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoSendData_0:
   \   00001D   740A         MOV     A,#0xa
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   7402         MOV     A,#0x2
   \   000024   F0           MOVX    @DPTR,A
   1753            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000025   85..82       MOV     DPL,?V0
   \   000028   85..83       MOV     DPH,?V1
   \   00002B   12....       LCALL   ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   12....       LCALL   ?Subroutine56 & 0xFFFF
   1754            pBuf += 2;
   1755          
   1756            /* Destination address mode */
   1757            transSeq = *pBuf++;
   \                     ??CrossCallReturnLabel_106:
   \   000036   85..82       MOV     DPL,?V0
   \   000039   85..83       MOV     DPH,?V1
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000041   E5..         MOV     A,?V0
   \   000043   2403         ADD     A,#0x3
   \   000045   F5..         MOV     ?V0,A
   \   000047   5002         JNC     ??MT_ZdoSendData_1
   \   000049   05..         INC     ?V1
   1758          
   1759            /* cmd */
   1760            cmd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoSendData_1:
   \   00004B   F582         MOV     DPL,A
   \   00004D   85..83       MOV     DPH,?V1
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FA           MOV     R2,A
   \   000052   A3           INC     DPTR
   \   000053   12....       LCALL   ?Subroutine22 & 0xFFFF
   1761            pBuf += 2;
   1762            len = *pBuf++;
   \                     ??CrossCallReturnLabel_34:
   \   000056   85..82       MOV     DPL,?V0
   \   000059   85..83       MOV     DPH,?V1
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FF           MOV     R7,A
   \   000060   E5..         MOV     A,?V0
   \   000062   2403         ADD     A,#0x3
   \   000064   F5..         MOV     ?V0,A
   \   000066   5002         JNC     ??MT_ZdoSendData_2
   \   000068   05..         INC     ?V1
   1763          
   1764            /* Send the Generic ZDO message request */
   1765            retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \                     ??MT_ZdoSendData_2:
   \   00006A                ; Setup parameters for call to function ZDP_SendData
   \   00006A   88..         MOV     ?V4,R0
   \   00006C   78..         MOV     R0,#?V4
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000071   78..         MOV     R0,#?V0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   78..         MOV     R0,#?V2
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   EF           MOV     A,R7
   \   00007C   F9           MOV     R1,A
   \   00007D   7407         MOV     A,#0x7
   \   00007F   12....       LCALL   ?XSTACK_DISP102_8
   \   000082   7405         MOV     A,#0x5
   \   000084   12....       LCALL   ?XSTACK_DISP101_8
   \   000087   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00008A   7405         MOV     A,#0x5
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008F   7401         MOV     A,#0x1
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   E9           MOV     A,R1
   \   000095   F0           MOVX    @DPTR,A
   1766            /*
   1767              Since we don't recevied our own broadcast messages, we should
   1768              send a unicast copy of the message to ourself.
   1769            */
   1770            if ( destAddr.addrMode == AddrBroadcast )
   \   000096   740A         MOV     A,#0xa
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   640F         XRL     A,#0xf
   \   00009E   7035         JNZ     ??MT_ZdoSendData_3
   1771            {
   1772              destAddr.addrMode = Addr16Bit;
   \   0000A0   12....       LCALL   ?Subroutine43 & 0xFFFF
   1773              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_79:
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL   ?Subroutine56 & 0xFFFF
   1774              retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \                     ??CrossCallReturnLabel_107:
   \   0000AB                ; Setup parameters for call to function ZDP_SendData
   \   0000AB   78..         MOV     R0,#?V4
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   78..         MOV     R0,#?V0
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B5   78..         MOV     R0,#?V2
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BA   EF           MOV     A,R7
   \   0000BB   F9           MOV     R1,A
   \   0000BC   7407         MOV     A,#0x7
   \   0000BE   12....       LCALL   ?XSTACK_DISP102_8
   \   0000C1   7405         MOV     A,#0x5
   \   0000C3   12....       LCALL   ?XSTACK_DISP101_8
   \   0000C6   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000C9   7405         MOV     A,#0x5
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CE   7401         MOV     A,#0x1
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   E9           MOV     A,R1
   \   0000D4   F0           MOVX    @DPTR,A
   1775            }
   1776          
   1777            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoSendData_3:
   \   0000D5                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000D5   7401         MOV     A,#0x1
   \   0000D7   12....       LCALL   ?XSTACK_DISP102_8
   \   0000DA   7B01         MOV     R3,#0x1
   \   0000DC   EE           MOV     A,R6
   \   0000DD   FA           MOV     R2,A
   \   0000DE   7965         MOV     R1,#0x65
   \   0000E0   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1778          }
   \   0000E3   740B         MOV     A,#0xb
   \   0000E5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E8   7F05         MOV     R7,#0x5
   \   0000EA   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   90....       MOV     DPTR,#_NIB + 20
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   F5..         MOV     ?V2,A
   \   000005   E4           CLR     A
   \   000006   39           ADDC    A,R1
   \   000007   F5..         MOV     ?V3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
   1779          
   1780          /***************************************************************************************************
   1781           * @fn      MT_ZdoNwkAddrOfInterestReq
   1782           *
   1783           * @brief   Handle a ZDO Network Address of Interest request.
   1784           *
   1785           * @param   pBuf  - MT message data
   1786           *
   1787           * @return  void
   1788           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1789          void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
   \                     MT_ZdoNwkAddrOfInterestReq:
   1790          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1791            uint8 cmdId;
   1792            uint8 retValue;
   1793            zAddrType_t destAddr;
   1794            uint16 nwkAddr;
   1795            uint8 cmd;
   1796          
   1797              /* parse header */
   1798            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine26 & 0xFFFF
   1799            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_44:
   \   00000D   5001         JNC     ??MT_ZdoNwkAddrOfInterestReq_0
   \   00000F   0B           INC     R3
   1800          
   1801            /* Destination address */
   1802            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoNwkAddrOfInterestReq_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
   1803            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_9:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine39 & 0xFFFF
   1804            pBuf += 2;
   \                     ??CrossCallReturnLabel_72:
   \   00001E   5001         JNC     ??MT_ZdoNwkAddrOfInterestReq_1
   \   000020   0B           INC     R3
   1805          
   1806            /* Network Address of Interest */
   1807            nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoNwkAddrOfInterestReq_1:
   \   000021   12....       LCALL   ?Subroutine12 & 0xFFFF
   1808            pBuf += 2;
   1809          
   1810            cmd = *pBuf++;
   \                     ??CrossCallReturnLabel_19:
   \   000024   F5..         MOV     ?V1,A
   1811          
   1812            /* Send the Generic ZDO message request */
   1813            retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \   000026                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000026   88..         MOV     ?V2,R0
   \   000028   78..         MOV     R0,#?V2
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   A9..         MOV     R1,?V1
   \   00002F   EF           MOV     A,R7
   \   000030   FD           MOV     R5,A
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?XSTACK_DISP101_8
   \   000036   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000039   7401         MOV     A,#0x1
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003E   E9           MOV     A,R1
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   F0           MOVX    @DPTR,A
   1814          
   1815          
   1816            /*
   1817              Since we don't recevied our own broadcast messages, we should
   1818              send a unicast copy of the message to ourself.
   1819            */
   1820            if ( destAddr.addrMode == AddrBroadcast )
   \   000046   7409         MOV     A,#0x9
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   640F         XRL     A,#0xf
   \   00004E   702B         JNZ     ??MT_ZdoNwkAddrOfInterestReq_2
   1821            {
   1822              destAddr.addrMode = Addr16Bit;
   \   000050   12....       LCALL   ?Subroutine43 & 0xFFFF
   1823              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_80:
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine56 & 0xFFFF
   1824              retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \                     ??CrossCallReturnLabel_108:
   \   00005B                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00005B   78..         MOV     R0,#?V2
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   A9..         MOV     R1,?V1
   \   000062   EE           MOV     A,R6
   \   000063   FC           MOV     R4,A
   \   000064   EF           MOV     A,R7
   \   000065   FD           MOV     R5,A
   \   000066   7402         MOV     A,#0x2
   \   000068   12....       LCALL   ?XSTACK_DISP101_8
   \   00006B   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   00006E   7401         MOV     A,#0x1
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   E9           MOV     A,R1
   \   000074   85..82       MOV     DPL,?XSP + 0
   \   000077   85..83       MOV     DPH,?XSP + 1
   \   00007A   F0           MOVX    @DPTR,A
   1825            }
   1826          
   1827            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoNwkAddrOfInterestReq_2:
   \   00007B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00007B   AC..         MOV     R4,?XSP + 0
   \   00007D   AD..         MOV     R5,?XSP + 1
   \   00007F   7B01         MOV     R3,#0x1
   \   000081   AA..         MOV     R2,?V0
   \   000083   7965         MOV     R1,#0x65
   \   000085   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1828          }
   \   000088   740A         MOV     A,#0xa
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008D                REQUIRE ?Subroutine3
   \   00008D                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1829          
   1830          /***************************************************************************************************
   1831           * @fn      MT_ZdoStartupFromApp
   1832           *
   1833           * @brief   Handle a Startup from App request.
   1834           *
   1835           * @param   pBuf  - MT message data
   1836           *
   1837           * @return  void
   1838           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1839          void MT_ZdoStartupFromApp(uint8 *pBuf)
   \                     MT_ZdoStartupFromApp:
   1840          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1841            uint8 cmd0, cmd1, retValue;
   1842          
   1843            /* parse header */
   1844            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   1845            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   1846            pBuf += MT_RPC_FRAME_HDR_SZ;
   1847          
   1848            retValue = ZDOInitDevice(100);
   \   000019                ; Setup parameters for call to function ZDOInitDevice
   \   000019   7A64         MOV     R2,#0x64
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000020   12....       LCALL   ?Subroutine44 & 0xFFFF
   1849          
   1850            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_81:
   \   000023   700D         JNZ     ??MT_ZdoStartupFromApp_0
   1851            {
   1852              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   \   000025                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000025   AC..         MOV     R4,?XSP + 0
   \   000027   AD..         MOV     R5,?XSP + 1
   \   000029   7B01         MOV     R3,#0x1
   \   00002B   EE           MOV     A,R6
   \   00002C   FA           MOV     R2,A
   \   00002D   7965         MOV     R1,#0x65
   \   00002F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1853            }
   1854          }
   \                     ??MT_ZdoStartupFromApp_0:
   \   000032   02....       LJMP    ??Subroutine62_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   74E0         MOV     A,#-0x20
   \   00000A   5F           ANL     A,R7
   \   00000B   6420         XRL     A,#0x20
   \   00000D   22           RET
   1855          
   1856          
   1857          /***************************************************************************************************
   1858           * @fn      MT_ZdoNetworkDiscoveryReq
   1859           *
   1860           * @brief   Handle a ZDO Network Discovery request.
   1861           *
   1862           * @param   pBuf  - MT message data
   1863           *
   1864           * @return  void
   1865           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1866          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
   \                     MT_ZdoNetworkDiscoveryReq:
   1867          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine16 & 0xFFFF
   1868            uint8  retValue = ZFailure;
   1869            uint8  cmdId;
   1870            uint32 scanChannels;
   1871          
   1872            /* parse header */
   1873            cmdId = pBuf[MT_RPC_POS_CMD1];
   1874            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_142:
   \   00000D   5001         JNC     ??MT_ZdoNetworkDiscoveryReq_0
   \   00000F   0F           INC     R7
   1875          
   1876            /* Packet format */
   1877            /* scan channels (4) | scan duration (1) */
   1878          
   1879            /* Scan channels */
   1880            scanChannels = osal_build_uint32(pBuf, 4);
   \                     ??MT_ZdoNetworkDiscoveryReq_0:
   \   000010                ; Setup parameters for call to function osal_build_uint32
   \   000010   7904         MOV     R1,#0x4
   \   000012   FA           MOV     R2,A
   \   000013   EF           MOV     A,R7
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   1881            pBuf += 4;
   1882          
   1883            retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
   \   000018                ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   `??ZDApp_NetworkDiscoveryReq::?relay`; Banked call to: ZDApp_NetworkDiscoveryReq
   \   000025   E9           MOV     A,R1
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   F0           MOVX    @DPTR,A
   1884          
   1885            // Register ZDO callback for MT to handle the network discovery confirm
   1886            // and beacon notification confirm
   1887            ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
   \   00002D                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00002D   7A..         MOV     R2,#`??MT_ZdoNwkDiscoveryCnfCB::?relay` & 0xff
   \   00002F   7B..         MOV     R3,#(`??MT_ZdoNwkDiscoveryCnfCB::?relay` >> 8) & 0xff
   \   000031   7902         MOV     R1,#0x2
   \   000033   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1888            ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
   \   000036                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000036   7A..         MOV     R2,#`??MT_ZdoBeaconIndCB::?relay` & 0xff
   \   000038   7B..         MOV     R3,#(`??MT_ZdoBeaconIndCB::?relay` >> 8) & 0xff
   \   00003A   7903         MOV     R1,#0x3
   \   00003C   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1889          
   1890            /* Build and send back the response */
   1891            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \   00003F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00003F   AC..         MOV     R4,?XSP + 0
   \   000041   AD..         MOV     R5,?XSP + 1
   \   000043   7B01         MOV     R3,#0x1
   \   000045   AA..         MOV     R2,?V0
   \   000047   7965         MOV     R1,#0x65
   \   000049   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1892          }
   \   00004C   7401         MOV     A,#0x1
   \   00004E   02....       LJMP    ??Subroutine70_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D                REQUIRE ??Subroutine73_0
   \   00000D                ; // Fall through to label ??Subroutine73_0
   1893          
   1894          
   1895          /***************************************************************************************************
   1896           * @fn      MT_ZdoJoinReq
   1897           *
   1898           * @brief   Handle a ZDO Join request.
   1899           *
   1900           * @param   pBuf  - MT message data
   1901           *
   1902           * @return  void
   1903           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1904          void MT_ZdoJoinReq(uint8 *pBuf)
   \                     MT_ZdoJoinReq:
   1905          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine16 & 0xFFFF
   1906            uint8  retValue = ZFailure;
   1907            uint8  cmdId;
   1908            uint16 panId;
   1909            uint16 chosenParent;
   1910          
   1911            /* parse header */
   1912            cmdId = pBuf[MT_RPC_POS_CMD1];
   1913            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_143:
   \   00000D   5001         JNC     ??MT_ZdoJoinReq_0
   \   00000F   0F           INC     R7
   1914          
   1915            /* Packet format */
   1916            /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
   1917             * parentDepth (1) | stackProfile  (1)
   1918             */
   1919          
   1920            panId        = BUILD_UINT16(pBuf[1], pBuf[2]);
   1921            chosenParent = BUILD_UINT16(pBuf[11], pBuf[12]);
   1922          
   1923            retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
   \                     ??MT_ZdoJoinReq_0:
   \   000010                ; Setup parameters for call to function ZDApp_JoinReq
   \   000010   240E         ADD     A,#0xe
   \   000012   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000018   EE           MOV     A,R6
   \   000019   240D         ADD     A,#0xd
   \   00001B   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000021   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000024   FA           MOV     R2,A
   \   000025   EE           MOV     A,R6
   \   000026   240C         ADD     A,#0xc
   \   000028   F582         MOV     DPL,A
   \   00002A   E4           CLR     A
   \   00002B   3F           ADDC    A,R7
   \   00002C   F583         MOV     DPH,A
   \   00002E   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000031   78..         MOV     R0,#?V2
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   EE           MOV     A,R6
   \   000037   2403         ADD     A,#0x3
   \   000039   FC           MOV     R4,A
   \   00003A   E4           CLR     A
   \   00003B   3F           ADDC    A,R7
   \   00003C   FD           MOV     R5,A
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00004C   E4           CLR     A
   \   00004D   39           ADDC    A,R1
   \   00004E   FB           MOV     R3,A
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   `??ZDApp_JoinReq::?relay`; Banked call to: ZDApp_JoinReq
   \   000058   7404         MOV     A,#0x4
   \   00005A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005D   E9           MOV     A,R1
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   F0           MOVX    @DPTR,A
   1924          
   1925            /* Register for MT to receive Join Confirm */
   1926            ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
   \   000065                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000065   7A..         MOV     R2,#`??MT_ZdoJoinCnfCB::?relay` & 0xff
   \   000067   7B..         MOV     R3,#(`??MT_ZdoJoinCnfCB::?relay` >> 8) & 0xff
   \   000069   7904         MOV     R1,#0x4
   \   00006B   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1927          
   1928            /* Build and send back the response */
   1929            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \   00006E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00006E   AC..         MOV     R4,?XSP + 0
   \   000070   AD..         MOV     R5,?XSP + 1
   \   000072   7B01         MOV     R3,#0x1
   \   000074   AA..         MOV     R2,?V0
   \   000076   7965         MOV     R1,#0x65
   \   000078   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1930          
   1931          }
   \   00007B   7401         MOV     A,#0x1
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000080   7F04         MOV     R7,#0x4
   \   000082   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V1,A
   \   000009   78..         MOV     R0,#?V1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003                REQUIRE ??Subroutine76_0
   \   000003                ; // Fall through to label ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1932          
   1933          
   1934          /***************************************************************************************************
   1935           * @fn          MT_ZdoNwkDiscoveryCnfCB
   1936           *
   1937           * @brief       Send an indication to inform host device the completion of
   1938           *              network discovery scan
   1939           *
   1940           * @param       pStr - pointer to a parameter and a structure of parameters
   1941           *
   1942           * @return      void
   1943           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1944          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
   \                     MT_ZdoNwkDiscoveryCnfCB:
   1945          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1946            /* pStr: status (uint8) */
   1947            /* Packet Format */
   1948            /* Status (1) */
   1949          
   1950            // Scan completed. De-register the callback with ZDO
   1951            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   \   000009                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000009   7902         MOV     R1,#0x2
   \   00000B   12....       LCALL   `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1952            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7903         MOV     R1,#0x3
   \   000010   12....       LCALL   `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1953          
   1954            // Send the buffered beacon indication
   1955            MT_ZdoBeaconIndCB ( NULL );
   \   000013                ; Setup parameters for call to function MT_ZdoBeaconIndCB
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   12....       LCALL   `??MT_ZdoBeaconIndCB::?relay`; Banked call to: MT_ZdoBeaconIndCB
   1956          
   1957            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1958                                                   MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
   \   00001A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001A   EE           MOV     A,R6
   \   00001B   FC           MOV     R4,A
   \   00001C   EF           MOV     A,R7
   \   00001D   FD           MOV     R5,A
   \   00001E   7B01         MOV     R3,#0x1
   \   000020   7AC7         MOV     R2,#-0x39
   \   000022   7945         MOV     R1,#0x45
   \   000024   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1959            return NULL;
   \   000027   7A00         MOV     R2,#0x0
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   02....       LJMP    ??Subroutine67_0 & 0xFFFF
   1960          }
   1961          
   1962          /***************************************************************************************************
   1963           * @fn          MT_ZdoBeaconIndCB
   1964           *
   1965           * @brief       Send an indication to host device of a beacon notification
   1966           *
   1967           * @param       pStr -  pointer to a parameter and a structure of parameters
   1968           *
   1969           * @return      void
   1970           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1971          void *MT_ZdoBeaconIndCB ( void *pStr )
   \                     MT_ZdoBeaconIndCB:
   1972          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1973            zdoBeaconInd_t *pBeacon = pStr;
   1974            uint8 *pTmp;
   1975          
   1976            /* Packet Format */
   1977            /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
   1978          
   1979            if( pStr != NULL)
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   90....       MOV     DPTR,#pBeaconIndBuf
   \   00000E   7003         JNZ     $+5
   \   000010   02....       LJMP    ??MT_ZdoBeaconIndCB_0 & 0xFFFF
   1980            {
   1981              if( pBeaconIndBuf == NULL )
   \   000013   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000016   701C         JNZ     ??MT_ZdoBeaconIndCB_1
   1982              {
   1983                // If pBeaconIndBuf has not been allocated yet
   1984                // allocate memory now with MAX_UART_TX_BUFF
   1985                if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7AFB         MOV     R2,#-0x5
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   90....       MOV     DPTR,#pBeaconIndBuf
   \   000022   EA           MOV     A,R2
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   EB           MOV     A,R3
   \   000026   F0           MOVX    @DPTR,A
   \   000027   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00002A   7003         JNZ     $+5
   \   00002C   02....       LJMP    ??MT_ZdoBeaconIndCB_2 & 0xFFFF
   1986                {
   1987                  // Memory failure
   1988                  return NULL;
   1989                }
   1990                pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
   \   00002F   12....       LCALL   ??Subroutine74_0 & 0xFFFF
   1991              }
   \                     ??CrossCallReturnLabel_146:
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   1992          
   1993              // Fill in the buffer with the beacon indication
   1994              pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
   \                     ??MT_ZdoBeaconIndCB_1:
   \   000034   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000037   F8           MOV     R0,A
   \   000038   A9F0         MOV     R1,B
   \   00003A   90....       MOV     DPTR,#pBeaconIndBuf
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   28           ADD     A,R0
   \   00003F   FA           MOV     R2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   39           ADDC    A,R1
   \   000043   8A82         MOV     DPL,R2
   \   000045   F583         MOV     DPH,A
   \   000047   A3           INC     DPTR
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   1995              *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000053   F0           MOVX    @DPTR,A
   1996              *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   12....       LCALL   ?Subroutine34 & 0xFFFF
   1997              *pTmp++ = LO_UINT16(pBeacon->panID);
   \                     ??CrossCallReturnLabel_57:
   \   00005B   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00005E   12....       LCALL   ?Subroutine35 & 0xFFFF
   1998              *pTmp++ = HI_UINT16(pBeacon->panID);
   \                     ??CrossCallReturnLabel_59:
   \   000061   8882         MOV     DPL,R0
   \   000063   8983         MOV     DPH,R1
   \   000065   A3           INC     DPTR
   \   000066   12....       LCALL   ?Subroutine32 & 0xFFFF
   1999              *pTmp++ = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_53:
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   12....       LCALL   ?Subroutine28 & 0xFFFF
   2000              *pTmp++ = pBeacon->permitJoining;
   \                     ??CrossCallReturnLabel_47:
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   12....       LCALL   ?Subroutine27 & 0xFFFF
   2001              *pTmp++ = pBeacon->routerCapacity;
   \                     ??CrossCallReturnLabel_45:
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   12....       LCALL   ?Subroutine25 & 0xFFFF
   2002              *pTmp++ = pBeacon->deviceCapacity;
   \                     ??CrossCallReturnLabel_40:
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   12....       LCALL   ?Subroutine24 & 0xFFFF
   2003              *pTmp++ = pBeacon->protocolVersion;
   \                     ??CrossCallReturnLabel_38:
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   12....       LCALL   ?Subroutine19 & 0xFFFF
   2004              *pTmp++ = pBeacon->stackProfile;
   \                     ??CrossCallReturnLabel_28:
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000AF   F0           MOVX    @DPTR,A
   2005              *pTmp++ = pBeacon->LQI;
   \   0000B0   8E82         MOV     DPL,R6
   \   0000B2   8F83         MOV     DPH,R7
   \   0000B4   A3           INC     DPTR
   \   0000B5   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000B8   A3           INC     DPTR
   \   0000B9   F0           MOVX    @DPTR,A
   2006              *pTmp++ = pBeacon->depth;
   \   0000BA   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   0000BD   C0E0         PUSH    A
   \   0000BF   EA           MOV     A,R2
   \   0000C0   240B         ADD     A,#0xb
   \   0000C2   F582         MOV     DPL,A
   \   0000C4   E4           CLR     A
   \   0000C5   3B           ADDC    A,R3
   \   0000C6   F583         MOV     DPH,A
   \   0000C8   D0E0         POP     A
   \   0000CA   F0           MOVX    @DPTR,A
   2007              *pTmp++ = pBeacon->updateID;
   \   0000CB   EE           MOV     A,R6
   \   0000CC   240C         ADD     A,#0xc
   \   0000CE   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   0000D1   C0E0         PUSH    A
   \   0000D3   EA           MOV     A,R2
   \   0000D4   240C         ADD     A,#0xc
   \   0000D6   F582         MOV     DPL,A
   \   0000D8   E4           CLR     A
   \   0000D9   3B           ADDC    A,R3
   \   0000DA   F583         MOV     DPH,A
   \   0000DC   D0E0         POP     A
   \   0000DE   F0           MOVX    @DPTR,A
   2008              osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
   \   0000DF                ; Setup parameters for call to function osal_memcpy
   \   0000DF   EE           MOV     A,R6
   \   0000E0   240D         ADD     A,#0xd
   \   0000E2   F5..         MOV     ?V0,A
   \   0000E4   E4           CLR     A
   \   0000E5   3F           ADDC    A,R7
   \   0000E6   F5..         MOV     ?V1,A
   \   0000E8   75..00       MOV     ?V2,#0x0
   \   0000EB   78..         MOV     R0,#?V0
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F0   7C08         MOV     R4,#0x8
   \   0000F2   7D00         MOV     R5,#0x0
   \   0000F4   EA           MOV     A,R2
   \   0000F5   240D         ADD     A,#0xd
   \   0000F7   FA           MOV     R2,A
   \   0000F8   5001         JNC     ??MT_ZdoBeaconIndCB_3
   \   0000FA   0B           INC     R3
   \                     ??MT_ZdoBeaconIndCB_3:
   \   0000FB   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000FE   7403         MOV     A,#0x3
   \   000100   12....       LCALL   ?DEALLOC_XSTACK8
   2009          
   2010              pBeaconIndBuf[0] += 1; // Increment the devCnt
   \   000103   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000106   E0           MOVX    A,@DPTR
   \   000107   04           INC     A
   \   000108   F0           MOVX    @DPTR,A
   2011          
   2012              // Check if the buffer can fit in another beacon
   2013              if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
   \   000109   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00010C   A9F0         MOV     R1,B
   \   00010E   2416         ADD     A,#0x16
   \   000110   5001         JNC     ??MT_ZdoBeaconIndCB_4
   \   000112   09           INC     R1
   \                     ??MT_ZdoBeaconIndCB_4:
   \   000113   C3           CLR     C
   \   000114   94FC         SUBB    A,#-0x4
   \   000116   E9           MOV     A,R1
   \   000117   9400         SUBB    A,#0x0
   \   000119   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00011B   65D0         XRL     A,PSW
   \   00011D   33           RLC     A
   \   00011E   4034         JC      ??MT_ZdoBeaconIndCB_2
   2014              {
   2015                // Packet full, send the packet over MT
   2016                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2017                                             MT_ZDO_BEACON_NOTIFY_IND,
   2018                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000120                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000120   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000123   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2019                pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
   \   000126   12....       LCALL   ?Subroutine31 & 0xFFFF
   2020              }
   2021            }
   \                     ??CrossCallReturnLabel_149:
   \   000129   E4           CLR     A
   \   00012A   8027         SJMP    ??MT_ZdoBeaconIndCB_5
   2022            else
   2023            {
   2024              if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
   \                     ??MT_ZdoBeaconIndCB_0:
   \   00012C   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00012F   6023         JZ      ??MT_ZdoBeaconIndCB_2
   \   000131   12....       LCALL   ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000134   E0           MOVX    A,@DPTR
   \   000135   600B         JZ      ??MT_ZdoBeaconIndCB_6
   2025              {
   2026                // End of beacon indication, send the packet over MT
   2027                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2028                                             MT_ZDO_BEACON_NOTIFY_IND,
   2029                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000137                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000137   12....       LCALL   ?Subroutine13 & 0xFFFF
   2030              }
   \                     ??CrossCallReturnLabel_21:
   \   00013A   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2031              // Free the allocated memory
   2032              if(pBeaconIndBuf != NULL)
   \   00013D   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000140   6012         JZ      ??MT_ZdoBeaconIndCB_2
   2033              {
   2034                osal_mem_free(pBeaconIndBuf);
   \                     ??MT_ZdoBeaconIndCB_6:
   \   000142                ; Setup parameters for call to function osal_mem_free
   \   000142   90....       MOV     DPTR,#pBeaconIndBuf
   \   000145   E0           MOVX    A,@DPTR
   \   000146   FA           MOV     R2,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   FB           MOV     R3,A
   \   00014A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2035                pBeaconIndBuf = NULL;
   \   00014D   90....       MOV     DPTR,#pBeaconIndBuf
   \   000150   E4           CLR     A
   \   000151   F0           MOVX    @DPTR,A
   \   000152   A3           INC     DPTR
   \                     ??MT_ZdoBeaconIndCB_5:
   \   000153   F0           MOVX    @DPTR,A
   2036              }
   2037            }
   2038          
   2039            return NULL;
   \                     ??MT_ZdoBeaconIndCB_2:
   \   000154   7A00         MOV     R2,#0x0
   \   000156   7B00         MOV     R3,#0x0
   \   000158   02....       LJMP    ?Subroutine3 & 0xFFFF
   2040          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   90....       MOV     DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine74_0
   \   000006                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   90....       MOV     DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   75F015       MOV     B,#0x15
   \   00000F   A4           MUL     AB
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#pBeaconIndBuf
   \   000003                REQUIRE ??Subroutine75_0
   \   000003                ; // Fall through to label ??Subroutine75_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   75F015       MOV     B,#0x15
   \   00000B   F583         MOV     DPH,A
   \   00000D   8882         MOV     DPL,R0
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A4           MUL     AB
   \   000011   04           INC     A
   \   000012   FB           MOV     R3,A
   \   000013   7AC5         MOV     R2,#-0x3b
   \   000015   7945         MOV     R1,#0x45
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   2402         ADD     A,#0x2
   \   000002                REQUIRE ??Subroutine77_0
   \   000002                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   3F           ADDC    A,R7
   \   000003   F9           MOV     R1,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EE           MOV     A,R6
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   2041          
   2042          
   2043          
   2044          /***************************************************************************************************
   2045           * @fn          MT_ZdoJoinCnfCB
   2046           *
   2047           * @brief       Handle the ZDO Join Confirm from ZDO
   2048           *
   2049           * @param       pStr - pointer to a parameter and a structure of parameters
   2050           *
   2051           * @return      void
   2052           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2053          void *MT_ZdoJoinCnfCB ( void *pStr )
   \                     MT_ZdoJoinCnfCB:
   2054          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2055            /* pStr: zdoJoinCnf_t* */
   2056            /* Packet Format */
   2057            /* Status (1) | device addr (2) | parent addr (2) */
   2058          
   2059            uint8 buf[MT_ZDO_JOIN_CNF_LEN];
   2060            zdoJoinCnf_t *joinCnf = pStr;
   2061          
   2062            /* Join Complete. De-register the callback with ZDO */
   2063            ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   2064          
   2065            buf[0] = joinCnf->status;
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   12....       LCALL   ?Subroutine33 & 0xFFFF
   2066            buf[1] = LO_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_56:
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   A882         MOV     R0,DPL
   \   000021   A983         MOV     R1,DPH
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C0E0         PUSH    A
   \   000026   7401         MOV     A,#0x1
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   D0E0         POP     A
   \   00002D   F0           MOVX    @DPTR,A
   2067            buf[2] = HI_UINT16( joinCnf->deviceAddr );
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C0E0         PUSH    A
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   D0E0         POP     A
   \   00003D   F0           MOVX    @DPTR,A
   2068            buf[3] = LO_UINT16( joinCnf->parentAddr );
   \   00003E   EE           MOV     A,R6
   \   00003F   2403         ADD     A,#0x3
   \   000041   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C0E0         PUSH    A
   \   000047   7403         MOV     A,#0x3
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   D0E0         POP     A
   \   00004E   F0           MOVX    @DPTR,A
   2069            buf[4] = HI_UINT16( joinCnf->parentAddr );
   \   00004F   8882         MOV     DPL,R0
   \   000051   8983         MOV     DPH,R1
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   C0E0         PUSH    A
   \   000057   7404         MOV     A,#0x4
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   D0E0         POP     A
   \   00005E   F0           MOVX    @DPTR,A
   2070          
   2071            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2072                                         MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
   \   00005F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00005F   AC..         MOV     R4,?XSP + 0
   \   000061   AD..         MOV     R5,?XSP + 1
   \   000063   7B05         MOV     R3,#0x5
   \   000065   7AC6         MOV     R2,#-0x3a
   \   000067   7945         MOV     R1,#0x45
   \   000069   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2073          
   2074            return NULL;
   \   00006C   7A00         MOV     R2,#0x0
   \   00006E   7B00         MOV     R3,#0x0
   \   000070   7405         MOV     A,#0x5
   \   000072   02....       LJMP    ??Subroutine66_0 & 0xFFFF
   2075          }
   2076          
   2077          /*************************************************************************************************
   2078           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   2079           *
   2080           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   2081           *
   2082           * @param   pBuf  - MT message data
   2083           *
   2084           * @return  void
   2085           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2086          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   \                     MT_ZdoRegisterForZDOMsg:
   2087          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2088            uint8 cmd0, cmd1, tmp;
   2089            uint16 cId;
   2090          
   2091            /* parse header */
   2092            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   2093            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   2094            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_126:
   \   000014   5001         JNC     ??MT_ZdoRegisterForZDOMsg_0
   \   000016   0B           INC     R3
   2095          
   2096            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   2097            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   \                     ??MT_ZdoRegisterForZDOMsg_0:
   \   000017                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000017   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00001A   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   00001D   12....       LCALL   ?Subroutine44 & 0xFFFF
   2098          
   2099            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_82:
   \   000020   700D         JNZ     ??MT_ZdoRegisterForZDOMsg_1
   2100            {
   2101              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   000022                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7B01         MOV     R3,#0x1
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   7965         MOV     R1,#0x65
   \   00002C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2102            }
   2103          }
   \                     ??MT_ZdoRegisterForZDOMsg_1:
   \   00002F   02....       LJMP    ??Subroutine62_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   39           ADDC    A,R1
   \   000006   FB           MOV     R3,A
   \   000007   90....       MOV     DPTR,#MT_TaskID
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET
   2104          
   2105          /*************************************************************************************************
   2106           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   2107           *
   2108           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   2109           *
   2110           * @param   pBuf  - MT message data
   2111           *
   2112           * @return  void
   2113           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2114          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   \                     MT_ZdoRemoveRegisteredCB:
   2115          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2116            uint8 cmd0, cmd1, tmp;
   2117            uint16 cId;
   2118          
   2119            /* parse header */
   2120            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   2121            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   2122            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_127:
   \   000014   5001         JNC     ??MT_ZdoRemoveRegisteredCB_0
   \   000016   0B           INC     R3
   2123          
   2124            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   2125            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   \                     ??MT_ZdoRemoveRegisteredCB_0:
   \   000017                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   000017   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00001A   12....       LCALL   `??ZDO_RemoveRegisteredCB::?relay`; Banked call to: ZDO_RemoveRegisteredCB
   \   00001D   12....       LCALL   ?Subroutine44 & 0xFFFF
   2126          
   2127            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_83:
   \   000020   700D         JNZ     ??MT_ZdoRemoveRegisteredCB_1
   2128            {
   2129              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   000022                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7B01         MOV     R3,#0x1
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   7965         MOV     R1,#0x65
   \   00002C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2130            }
   2131          }
   \                     ??MT_ZdoRemoveRegisteredCB_1:
   \   00002F   02....       LJMP    ??Subroutine62_0 & 0xFFFF
   2132          
   2133          #endif /* MT_ZDO_FUNC */
   2134          
   2135          
   2136          /***************************************************************************************************
   2137           * Callback handling function
   2138           ***************************************************************************************************/
   2139          
   2140          #if defined (MT_ZDO_CB_FUNC)
   2141          
   2142          /***************************************************************************************************
   2143           * @fn      MT_ZdoStateChangeCB
   2144           *
   2145           * @brief   Handle state change OSAL message from ZDO.
   2146           *
   2147           * @param   pMsg  - Message data
   2148           *
   2149           * @return  void
   2150           */
   2151          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   2152          {
   2153            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2154                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   2155          }
   2156          
   2157          /***************************************************************************************************
   2158           * @fn     MT_ZdoDirectCB()
   2159           *
   2160           * @brief  ZDO direct callback.  Build an MT message directly from the
   2161           *         over-the-air ZDO message.
   2162           *
   2163           * @param  pData - Incoming AF frame.
   2164           *
   2165           * @return  none
   2166           ***************************************************************************************************/
   2167          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   2168          {
   2169            uint8 len, *pBuf;
   2170            uint16 origClusterId;
   2171          
   2172            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
   2173            origClusterId = pData->clusterId;
   2174          
   2175            // Is the message an exception or not a response?
   2176            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   2177            {
   2178              return;  // Handled somewhere else or not needed.
   2179            }
   2180          
   2181            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   2182             * two bytes for srcAddr.
   2183             */
   2184            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   2185          
   2186            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2187            {
   2188              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   2189          
   2190              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   2191              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   2192          
   2193              /* copy ZDO data, skipping one-byte sequence number */
   2194              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   2195          
   2196              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   2197              osal_mem_free(pBuf);
   2198            }
   2199          }
   2200          
   2201          /***************************************************************************************************
   2202           * @fn     MT_ZdoHandleExceptions()
   2203           *
   2204           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   2205           *
   2206           * @param  pData - Incoming AF frame.
   2207           *
   2208           * @return  TRUE if handled by this function, FALSE if not
   2209           ***************************************************************************************************/
   2210          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   2211          {
   2212            uint8 ret = TRUE;
   2213            ZDO_NwkIEEEAddrResp_t *nwkRsp;
   2214            ZDO_DeviceAnnce_t devAnnce;
   2215            uint8 doDefault = FALSE;
   2216          
   2217            switch ( inMsg->clusterID )
   2218            {
   2219              case NWK_addr_rsp:
   2220              case IEEE_addr_rsp:
   2221                if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
   2222                {
   2223                  if ( nwkRsp->status == ZDO_SUCCESS )
   2224                  {
   2225                    MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   2226                  }
   2227                  osal_mem_free( nwkRsp );
   2228                }
   2229                break;
   2230          
   2231              case Device_annce:
   2232                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   2233                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   2234                break;
   2235          
   2236              case Simple_Desc_rsp:
   2237                if ( pData->cmd.DataLength > 5 )
   2238                {
   2239                  ret = FALSE;
   2240                }
   2241                else
   2242                {
   2243                  doDefault = TRUE;
   2244                }
   2245                break;
   2246          
   2247              default:
   2248                ret = FALSE;
   2249                break;
   2250            }
   2251          
   2252            if ( doDefault )
   2253            {
   2254              ret = FALSE;
   2255              pData->clusterId = MtZdoDef_rsp;
   2256              pData->cmd.DataLength = 2;
   2257            }
   2258          
   2259            return ( ret );
   2260          }
   2261          
   2262          /***************************************************************************************************
   2263           * @fn      MT_ZdoAddrRspCB
   2264           *
   2265           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   2266           *
   2267           * @param   pMsg  - Message data
   2268           *
   2269           * @return  void
   2270           */
   2271          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   2272          {
   2273            uint8   listLen, len, *pBuf;
   2274          
   2275            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   2276          
   2277            /* get length, sanity check length */
   2278            listLen = pMsg->numAssocDevs;
   2279          
   2280            /* calculate msg length */
   2281            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   2282          
   2283            /* get buffer */
   2284            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2285            {
   2286              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   2287              uint8 *pTmp = pBuf;
   2288          
   2289              *pTmp++ = pMsg->status;
   2290          
   2291              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   2292              pTmp += Z_EXTADDR_LEN;
   2293          
   2294              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   2295              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   2296          
   2297              *pTmp++ = pMsg->startIndex;
   2298              *pTmp++ = listLen;
   2299          
   2300              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   2301          
   2302              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   2303              osal_mem_free(pBuf);
   2304            }
   2305          }
   2306          
   2307          /***************************************************************************************************
   2308           * @fn      MT_ZdoEndDevAnnceCB
   2309           *
   2310           * @brief   Handle end device announce OSAL message from ZDO.
   2311           *
   2312           * @param   pMsg  - Message data
   2313           *
   2314           * @return  void
   2315           */
   2316          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   2317          {
   2318            uint8 *pBuf;
   2319          
   2320            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   2321            {
   2322              uint8 *pTmp = pBuf;
   2323          
   2324              *pTmp++ = LO_UINT16(srcAddr);
   2325              *pTmp++ = HI_UINT16(srcAddr);
   2326          
   2327              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   2328              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   2329          
   2330              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   2331              pTmp += Z_EXTADDR_LEN;
   2332          
   2333              *pTmp = pMsg->capabilities;
   2334          
   2335              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2336                                                   MT_ZDO_END_DEVICE_ANNCE_IND,
   2337                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   2338              osal_mem_free(pBuf);
   2339            }
   2340          }
   2341          
   2342          /***************************************************************************************************
   2343           * @fn      MT_ZdoSrcRtgCB
   2344           *
   2345           * @brief   Handle Src Route from ZDO.
   2346           *
   2347           * @param   pStr  - pointer to the data structure for the src route
   2348           *
   2349           * @return  void*
   2350           */
   2351          void* MT_ZdoSrcRtgCB( void *pStr )
   2352          {
   2353            uint8 len, *pBuf;
   2354            zdoSrcRtg_t *pSrcRtg = pStr;
   2355          
   2356            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   2357            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   2358          
   2359            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2360            {
   2361              uint8 idx, *pTmp = pBuf;
   2362              uint16 *pRelay;
   2363          
   2364              // Packet payload
   2365              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   2366              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   2367              *pTmp++ = pSrcRtg->relayCnt;
   2368          
   2369              // Relay List
   2370              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   2371              {
   2372                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   2373                {
   2374                  *pTmp++ = LO_UINT16(*pRelay);
   2375                  *pTmp++ = HI_UINT16(*pRelay);
   2376                  pRelay++;
   2377                }
   2378              }
   2379              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2380                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   2381              osal_mem_free(pBuf);
   2382            }
   2383          
   2384            return NULL;
   2385          }
   2386          
   2387          /***************************************************************************************************
   2388           * @fn          MT_ZdoConcentratorIndCB
   2389           *
   2390           * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
   2391           *
   2392           * @param       pStr - pointer to a parameter and a structure of parameters
   2393           *
   2394           * @return      NULL
   2395           ***************************************************************************************************/
   2396          static void *MT_ZdoConcentratorIndCB(void *pStr)
   2397          {
   2398            uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
   2399            zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
   2400          
   2401            *pTmp++ = LO_UINT16(pInd->nwkAddr);
   2402            *pTmp++ = HI_UINT16(pInd->nwkAddr);
   2403            pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
   2404            *pTmp = pInd->pktCost;
   2405          
   2406            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2407                                              MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
   2408            return NULL;
   2409          }
   2410          
   2411          /***************************************************************************************************
   2412           * @fn          MT_ZdoLeaveInd
   2413           *
   2414           * @brief       Handle the ZDO Leave Indication callback from the ZDO.
   2415           *
   2416           * @param       vPtr - Pointer to the received Leave Indication message.
   2417           *
   2418           * @return      NULL
   2419           ***************************************************************************************************/
   2420          static void *MT_ZdoLeaveInd(void *vPtr)
   2421          {
   2422            NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
   2423            uint8 buf[sizeof(NLME_LeaveInd_t)];
   2424          
   2425            buf[0] = LO_UINT16(pInd->srcAddr);
   2426            buf[1] = HI_UINT16(pInd->srcAddr);
   2427            (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
   2428            buf[2+Z_EXTADDR_LEN] = pInd->request;
   2429            buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
   2430            buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
   2431          
   2432            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2433                                                 MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
   2434            return NULL;
   2435          }
   2436          
   2437          /***************************************************************************************************
   2438           * @fn          MT_ZdoTcDeviceInd
   2439           *
   2440           * @brief       Handle the ZDO TC Device Indication callback from the ZDO.
   2441           *
   2442           * @param       params - pointer to Trust Center joining device information
   2443           *
   2444           * @return      NULL
   2445           ***************************************************************************************************/
   2446          void *MT_ZdoTcDeviceInd( void *params )
   2447          {
   2448            ZDO_TC_Device_t *pDev = (ZDO_TC_Device_t *)params;
   2449            uint8 buf[12];
   2450          
   2451            buf[0] = LO_UINT16( pDev->nwkAddr );
   2452            buf[1] = HI_UINT16( pDev->nwkAddr );
   2453            (void)osal_memcpy( &buf[2], pDev->extAddr, Z_EXTADDR_LEN);
   2454            buf[2+Z_EXTADDR_LEN] = LO_UINT16( pDev->parentAddr );
   2455            buf[3+Z_EXTADDR_LEN] = HI_UINT16( pDev->parentAddr );
   2456          
   2457            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2458                                                 MT_ZDO_TC_DEVICE_IND, 12, buf );
   2459            
   2460            return ( NULL );
   2461          }
   2462          
   2463          /***************************************************************************************************
   2464           * @fn          MT_ZdoPermitJoinInd
   2465           *
   2466           * @brief       Handle the ZDO Permit Join Indication callback from the ZDO.
   2467           *
   2468           * @param       duration - permit join duration
   2469           *
   2470           * @return      NULL
   2471           ***************************************************************************************************/
   2472          void *MT_ZdoPermitJoinInd( void *duration )
   2473          {
   2474            if ( ignoreIndication == FALSE )
   2475            {
   2476              MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2477                                                 MT_ZDO_PERMIT_JOIN_IND, 1, (uint8 *)duration );
   2478            }
   2479            
   2480            return ( NULL );
   2481          }
   2482          #endif // MT_ZDO_CB_FUNC
   2483          
   2484          /***************************************************************************************************
   2485           * @fn      MT_ZdoSendMsgCB
   2486           *
   2487           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   2488           *
   2489           * @param   pMsg  - Message data
   2490           *
   2491           * @return  void
   2492           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2493          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   \                     MT_ZdoSendMsgCB:
   2494          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2495            uint8 len = pMsg->asduLen + 9;
   \   000009   EE           MOV     A,R6
   \   00000A   2410         ADD     A,#0x10
   \   00000C   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00000F   2409         ADD     A,#0x9
   \   000011   F5..         MOV     ?V2,A
   2496            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   \   000013                ; Setup parameters for call to function osal_mem_alloc
   \   000013   FA           MOV     R2,A
   \   000014   7B00         MOV     R3,#0x0
   \   000016   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000019   8A..         MOV     ?V0,R2
   \   00001B   8B..         MOV     ?V1,R3
   2497          
   2498            if (pBuf != NULL)
   \   00001D   EA           MOV     A,R2
   \   00001E   45..         ORL     A,?V1
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??MT_ZdoSendMsgCB_0 & 0xFFFF
   2499            {
   2500              uint8 *pTmp = pBuf;
   2501          
   2502              // Assuming exclusive use of network short addresses.
   2503              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000025   EE           MOV     A,R6
   \   000026   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000029   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00002C   F0           MOVX    @DPTR,A
   2504              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   12....       LCALL   ?Subroutine34 & 0xFFFF
   2505              *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_58:
   \   000034   240B         ADD     A,#0xb
   \   000036   F582         MOV     DPL,A
   \   000038   E4           CLR     A
   \   000039   3F           ADDC    A,R7
   \   00003A   F583         MOV     DPH,A
   \   00003C   12....       LCALL   ?Subroutine35 & 0xFFFF
   2506              *pTmp++ = LO_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_60:
   \   00003F   EE           MOV     A,R6
   \   000040   240C         ADD     A,#0xc
   \   000042   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000045   12....       LCALL   ?Subroutine32 & 0xFFFF
   2507              *pTmp++ = HI_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_54:
   \   000048   8882         MOV     DPL,R0
   \   00004A   8983         MOV     DPH,R1
   \   00004C   12....       LCALL   ?Subroutine28 & 0xFFFF
   2508              *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_48:
   \   00004F   EE           MOV     A,R6
   \   000050   240E         ADD     A,#0xe
   \   000052   F582         MOV     DPL,A
   \   000054   E4           CLR     A
   \   000055   3F           ADDC    A,R7
   \   000056   F583         MOV     DPH,A
   \   000058   12....       LCALL   ?Subroutine27 & 0xFFFF
   2509              *pTmp++ = pMsg->TransSeq;
   \                     ??CrossCallReturnLabel_46:
   \   00005B   EE           MOV     A,R6
   \   00005C   240F         ADD     A,#0xf
   \   00005E   F582         MOV     DPL,A
   \   000060   E4           CLR     A
   \   000061   3F           ADDC    A,R7
   \   000062   F583         MOV     DPH,A
   \   000064   12....       LCALL   ?Subroutine25 & 0xFFFF
   2510              // Skipping asduLen since it can be deduced from the RPC packet length.
   2511              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_41:
   \   000067   EE           MOV     A,R6
   \   000068   2411         ADD     A,#0x11
   \   00006A   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   00006D   12....       LCALL   ?Subroutine24 & 0xFFFF
   2512              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_39:
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   12....       LCALL   ?Subroutine19 & 0xFFFF
   2513              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   \                     ??CrossCallReturnLabel_29:
   \   000077                ; Setup parameters for call to function osal_memcpy
   \   000077   EE           MOV     A,R6
   \   000078   2413         ADD     A,#0x13
   \   00007A   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00007D   F5..         MOV     ?V4,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F5..         MOV     ?V5,A
   \   000083   75..00       MOV     ?V6,#0x0
   \   000086   78..         MOV     R0,#?V4
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008B   EE           MOV     A,R6
   \   00008C   2410         ADD     A,#0x10
   \   00008E   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000091   FC           MOV     R4,A
   \   000092   7D00         MOV     R5,#0x0
   \   000094   EA           MOV     A,R2
   \   000095   2409         ADD     A,#0x9
   \   000097   FA           MOV     R2,A
   \   000098   E4           CLR     A
   \   000099   35..         ADDC    A,?V1
   \   00009B   FB           MOV     R3,A
   \   00009C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00009F   7403         MOV     A,#0x3
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   2514          
   2515              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2516                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   \   0000A4                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000A4   AC..         MOV     R4,?V0
   \   0000A6   AD..         MOV     R5,?V1
   \   0000A8   AB..         MOV     R3,?V2
   \   0000AA   7AFF         MOV     R2,#-0x1
   \   0000AC   7945         MOV     R1,#0x45
   \   0000AE   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2517          
   2518              osal_mem_free(pBuf);
   \   0000B1                ; Setup parameters for call to function osal_mem_free
   \   0000B1   AA..         MOV     R2,?V0
   \   0000B3   AB..         MOV     R3,?V1
   \   0000B5   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2519            }
   2520          }
   \                     ??MT_ZdoSendMsgCB_0:
   \   0000B8   02....       LJMP    ??Subroutine68_0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNWKAddressRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNWKAddressRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoIEEEAddrRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoIEEEAddrRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNodeDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNodeDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoPowerDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoPowerDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSimpleDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSimpleDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoActiveEpRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoActiveEpRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMatchDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMatchDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoComplexDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoComplexDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUserDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoServiceDiscRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoServiceDiscRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDeviceTimeoutRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDeviceTimeoutRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUnbindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUnbindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNwkAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoStartupFromApp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoStartupFromApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNwkDiscoveryCnfCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkDiscoveryCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBeaconIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBeaconIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoJoinCnfCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSendMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendMsgCB
   2521          
   2522          #if defined ( MT_ZDO_EXTENSIONS )
   2523          /***************************************************************************************************
   2524           * @fn          MT_ZdoSecUpdateNwkKey
   2525           *
   2526           * @brief       Handle the ZDO Security Update Network Key extension message
   2527           *
   2528           * @param       pBuf - Pointer to the received message data.
   2529           *
   2530           * @return      NULL
   2531           ***************************************************************************************************/
   2532          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf )
   2533          {
   2534            uint16 dstAddr;
   2535            uint8 keySeqNum;
   2536            uint8 status;
   2537          
   2538            pBuf += MT_RPC_FRAME_HDR_SZ;
   2539            
   2540            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2541            pBuf += 2;
   2542            keySeqNum = *pBuf++;
   2543          
   2544            status = ZDSecMgrUpdateNwkKey( pBuf, keySeqNum, dstAddr );
   2545          
   2546            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2547                                                 MT_ZDO_EXT_UPDATE_NWK_KEY, 1, &status );
   2548          }
   2549          
   2550          /***************************************************************************************************
   2551           * @fn          MT_ZdoSecSwitchNwkKey
   2552           *
   2553           * @brief       Handle the ZDO Security Switch Network Key extension message
   2554           *
   2555           * @param       pBuf - Pointer to the received message data.
   2556           *
   2557           * @return      NULL
   2558           ***************************************************************************************************/
   2559          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf )
   2560          {
   2561            uint16 dstAddr;
   2562            uint8 keySeqNum;
   2563            uint8 status;
   2564          
   2565            pBuf += MT_RPC_FRAME_HDR_SZ;
   2566            
   2567            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2568            pBuf += 2;
   2569            keySeqNum = *pBuf++;
   2570          
   2571            status = ZDSecMgrSwitchNwkKey( keySeqNum, dstAddr );
   2572          
   2573            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2574                                                 MT_ZDO_EXT_SWITCH_NWK_KEY, 1, &status );
   2575          }
   2576          
   2577          /***************************************************************************************************
   2578           * @fn          MT_ZdoSecAddLinkKey
   2579           *
   2580           * @brief       Handle the ZDO Security Add Link Key extension message
   2581           *
   2582           * @param       pBuf - Pointer to the received message data.
   2583           *
   2584           * @return      NULL
   2585           ***************************************************************************************************/
   2586          static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
   2587          {
   2588            uint16 shortAddr;
   2589            uint8 *pExtAddr;
   2590            uint8 status;
   2591          
   2592            pBuf += MT_RPC_FRAME_HDR_SZ;
   2593            
   2594            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2595            pBuf += 2;
   2596            pExtAddr = pBuf;
   2597            pBuf += Z_EXTADDR_LEN;
   2598          
   2599            status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
   2600          
   2601            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2602                                                 MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
   2603          }
   2604          
   2605          /***************************************************************************************************
   2606           * @fn          MT_ZdoSecEntryLookupExt
   2607           *
   2608           * @brief       Handle the ZDO Security Entry Lookup Extended extension message
   2609           *
   2610           * @param       pBuf - Pointer to the received message data.
   2611           *
   2612           * @return      NULL
   2613           ***************************************************************************************************/
   2614          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
   2615          {
   2616            ZDSecMgrEntry_t *pEntry = NULL;
   2617            uint8 buf[6] = {0};
   2618          
   2619            pBuf += MT_RPC_FRAME_HDR_SZ;
   2620            
   2621            // lookup entry index for specified EXT address
   2622            buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
   2623            if ( pEntry )
   2624            {
   2625              buf[1] = LO_UINT16( pEntry->ami );
   2626              buf[2] = HI_UINT16( pEntry->ami );
   2627              buf[3] = LO_UINT16( pEntry->keyNvId );
   2628              buf[4] = HI_UINT16( pEntry->keyNvId );
   2629              buf[5] = (uint8)pEntry->authenticateOption;
   2630            }
   2631          
   2632            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2633                                                 MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
   2634          }
   2635          
   2636          /***************************************************************************************************
   2637           * @fn          MT_ZdoSecDeviceRemove
   2638           *
   2639           * @brief       Handle the ZDO Security Remove Device extension message
   2640           *
   2641           * @param       pBuf - Pointer to the received message data.
   2642           *
   2643           * @return      NULL
   2644           ***************************************************************************************************/
   2645          static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
   2646          {
   2647            ZStatus_t status;
   2648          
   2649            pBuf += MT_RPC_FRAME_HDR_SZ;
   2650          
   2651            // lookup entry index for specified EXT address
   2652            status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
   2653          
   2654            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2655                                                 MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
   2656          }
   2657          
   2658          /***************************************************************************************************
   2659           * @fn          MT_ZdoExtRouteDisc
   2660           *
   2661           * @brief       Handle the ZDO Route Discovery extension message
   2662           *
   2663           * @param       pBuf - Pointer to the received message data.
   2664           *
   2665           * @return      NULL
   2666           ***************************************************************************************************/
   2667          static void MT_ZdoExtRouteDisc( uint8 *pBuf )
   2668          {
   2669            ZStatus_t status;
   2670            uint16 dstAddr;
   2671          
   2672            pBuf += MT_RPC_FRAME_HDR_SZ;
   2673          
   2674            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2675          
   2676            status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
   2677          
   2678          
   2679            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2680                                                 MT_ZDO_EXT_ROUTE_DISC, 1, &status );
   2681          }
   2682          
   2683          /***************************************************************************************************
   2684           * @fn          MT_ZdoExtRouteCheck
   2685           *
   2686           * @brief       Handle the ZDO Route Check extension message
   2687           *
   2688           * @param       pBuf - Pointer to the received message data.
   2689           *
   2690           * @return      NULL
   2691           ***************************************************************************************************/
   2692          static void MT_ZdoExtRouteCheck( uint8 *pBuf )
   2693          {
   2694            ZStatus_t status;
   2695            uint16 dstAddr;
   2696          
   2697            pBuf += MT_RPC_FRAME_HDR_SZ;
   2698            
   2699            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2700          
   2701            status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
   2702          
   2703            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2704                                                 MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
   2705          }
   2706          
   2707          /***************************************************************************************************
   2708           * @fn          MT_ZdoExtRemoveGroup
   2709           *
   2710           * @brief       Handle the ZDO extension Remove Group message
   2711           *
   2712           * @param       pBuf - Pointer to the received message data.
   2713           *
   2714           * @return      NULL
   2715           ***************************************************************************************************/
   2716          static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
   2717          {
   2718            ZStatus_t status;
   2719            uint8 endpoint;
   2720            uint16 groupID;
   2721          
   2722            pBuf += MT_RPC_FRAME_HDR_SZ;
   2723            
   2724            endpoint = *pBuf++;
   2725            groupID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2726          
   2727            if ( aps_RemoveGroup( endpoint, groupID ) )
   2728            {
   2729              status = ZSuccess;
   2730            }
   2731            else
   2732            {
   2733              status = ZFailure;
   2734            }
   2735          
   2736            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2737                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2738          }
   2739          
   2740          /***************************************************************************************************
   2741           * @fn          MT_ZdoExtRemoveAllGroup
   2742           *
   2743           * @brief       Handle the ZDO extension Remove All Groups message
   2744           *
   2745           * @param       pBuf - Pointer to the received message data.
   2746           *
   2747           * @return      NULL
   2748           ***************************************************************************************************/
   2749          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
   2750          {
   2751            ZStatus_t status = ZSuccess;
   2752          
   2753            pBuf += MT_RPC_FRAME_HDR_SZ;
   2754            
   2755            aps_RemoveAllGroup( *pBuf );
   2756          
   2757            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2758                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2759          }
   2760          
   2761          /***************************************************************************************************
   2762           * @fn          MT_ZdoExtFindAllGroupsEndpoint
   2763           *
   2764           * @brief       Handle the ZDO extension Find All Groups for Endpoint message
   2765           *
   2766           * @param       pBuf - Pointer to the received message data.
   2767           *
   2768           * @return      NULL
   2769           ***************************************************************************************************/
   2770          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
   2771          {
   2772            uint16 groupList[ APS_MAX_GROUPS ];
   2773            uint8 groups;
   2774            uint8 msgLen;
   2775            uint8 *pMsg;
   2776          
   2777            pBuf += MT_RPC_FRAME_HDR_SZ;
   2778            
   2779            groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
   2780          
   2781            msgLen = 1 + (2 * groups);
   2782            pMsg = osal_mem_alloc( msgLen );
   2783            if ( pMsg )
   2784            {
   2785              uint8 x;
   2786              uint8 *pBuf = pMsg;
   2787          
   2788              *pBuf++ = groups;
   2789              for ( x = 0; x < groups; x++ )
   2790              {
   2791                *pBuf++ = LO_UINT16( groupList[x] );
   2792                *pBuf++ = HI_UINT16( groupList[x] );
   2793              }
   2794          
   2795              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2796                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
   2797              osal_mem_free( pMsg );
   2798            }
   2799            else
   2800            {
   2801              groups = 0;
   2802              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2803                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
   2804            }
   2805          }
   2806          
   2807          /***************************************************************************************************
   2808           * @fn          MT_ZdoExtFindGroup
   2809           *
   2810           * @brief       Handle the ZDO extension Find Group message
   2811           *
   2812           * @param       pBuf - Pointer to the received message data.
   2813           *
   2814           * @return      NULL
   2815           ***************************************************************************************************/
   2816          static void MT_ZdoExtFindGroup( uint8 *pBuf )
   2817          {
   2818            uint8 endpoint;
   2819            uint16 groupID;
   2820            aps_Group_t *pGroup;
   2821            uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
   2822          
   2823            pBuf += MT_RPC_FRAME_HDR_SZ;
   2824            
   2825            endpoint = *pBuf++;
   2826            groupID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2827          
   2828            pGroup = aps_FindGroup( endpoint, groupID );
   2829            if ( pGroup  )
   2830            {
   2831              buf[0] = ZSuccess;
   2832              buf[1] = LO_UINT16( pGroup->ID );
   2833              buf[2] = HI_UINT16( pGroup->ID );
   2834              buf[3] = pGroup->name[0];
   2835              osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
   2836            }
   2837            else
   2838            {
   2839              buf[0] = ZFailure;
   2840            }
   2841          
   2842            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2843                                MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
   2844          }
   2845          
   2846          /***************************************************************************************************
   2847           * @fn          MT_ZdoExtAddGroup
   2848           *
   2849           * @brief       Handle the ZDO extension Add Group message
   2850           *
   2851           * @param       pBuf - Pointer to the received message data.
   2852           *
   2853           * @return      NULL
   2854           ***************************************************************************************************/
   2855          static void MT_ZdoExtAddGroup( uint8 *pBuf )
   2856          {
   2857            ZStatus_t status = ZSuccess;
   2858            aps_Group_t group = {0};
   2859            uint8 endpoint;
   2860          
   2861            pBuf += MT_RPC_FRAME_HDR_SZ;
   2862          
   2863            endpoint = *pBuf++;
   2864            group.ID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2865            group.name[0] = pBuf[2];
   2866            if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
   2867            {
   2868              group.name[0] = (APS_GROUP_NAME_LEN-1);
   2869            }
   2870          
   2871            if (group.name[0] > 0 )
   2872            {
   2873              osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
   2874            }
   2875          
   2876            status = aps_AddGroup( endpoint, &group );
   2877          
   2878            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2879                                                 MT_ZDO_EXT_ADD_GROUP, 1, &status );
   2880          }
   2881          
   2882          /***************************************************************************************************
   2883           * @fn          MT_ZdoExtCountAllGroups
   2884           *
   2885           * @brief       Handle the ZDO extension Count All Groups message
   2886           *
   2887           * @param       pBuf - Pointer to the received message data.
   2888           *
   2889           * @return      NULL
   2890           ***************************************************************************************************/
   2891          static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
   2892          {
   2893            ZStatus_t status = 0;
   2894          
   2895            pBuf += MT_RPC_FRAME_HDR_SZ;
   2896          
   2897            status = (ZStatus_t)aps_CountAllGroups();
   2898          
   2899            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2900                                                 MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
   2901          }
   2902          
   2903          
   2904          /***************************************************************************************************
   2905           * @fn          MT_ZdoExtRxIdle
   2906           *
   2907           * @brief       Handle the ZDO extension Get/Set RxOnIdle to ZMac message 
   2908           *
   2909           * @param       pBuf - Pointer to the received message data.
   2910           *
   2911           * @return      NULL
   2912           ***************************************************************************************************/
   2913          static void MT_ZdoExtRxIdle( uint8 *pBuf )
   2914          {
   2915            uint8 setFlag;
   2916            uint8 setValue;
   2917            
   2918            pBuf += MT_RPC_FRAME_HDR_SZ;
   2919          
   2920            setFlag = *pBuf++;
   2921            setValue = *pBuf++;
   2922            
   2923            if ( setFlag )
   2924            {
   2925              ZMacSetReq( ZMacRxOnIdle, &setValue );
   2926            }
   2927            else
   2928            {
   2929              ZMacGetReq( ZMacRxOnIdle, &setValue );
   2930            }
   2931           
   2932            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2933                                                 MT_ZDO_EXT_RX_IDLE, 1, &setValue );
   2934          }
   2935          
   2936          /***************************************************************************************************
   2937           * @fn          MT_ZdoExtNwkInfo
   2938           *
   2939           * @brief       Handle the ZDO extension Network Info Request message 
   2940           *
   2941           * @param       pBuf - Pointer to the received message data.
   2942           *
   2943           * @return      NULL
   2944           ***************************************************************************************************/
   2945          static void MT_ZdoExtNwkInfo( uint8 *pBuf )
   2946          {
   2947            uint8 buf[24];
   2948            uint8 *pMsg;
   2949            
   2950            pMsg = buf;
   2951            
   2952            *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
   2953            *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
   2954            
   2955            *pMsg++ = devState;
   2956            *pMsg++ = LO_UINT16( _NIB.nwkPanId );
   2957            *pMsg++ = HI_UINT16( _NIB.nwkPanId );
   2958            *pMsg++ = LO_UINT16( _NIB.nwkCoordAddress );
   2959            *pMsg++ = HI_UINT16( _NIB.nwkCoordAddress );
   2960            osal_memcpy( pMsg, _NIB.extendedPANID, 8 );
   2961            pMsg += 8;
   2962            osal_memcpy( pMsg, _NIB.nwkCoordExtAddress, 8 );
   2963            pMsg += 8;
   2964            *pMsg++ = _NIB.nwkLogicalChannel;
   2965           
   2966            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2967                                                 MT_ZDO_EXT_NWK_INFO, 24, buf );
   2968          }
   2969          
   2970          /***************************************************************************************************
   2971           * @fn          MT_ZdoExtSecApsRemoveReq
   2972           *
   2973           * @brief       Handle the ZDO extension Security Manager APS Remove Request message
   2974           *
   2975           * @param       pBuf - Pointer to the received message data.
   2976           *
   2977           * @return      NULL
   2978           ***************************************************************************************************/
   2979          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf )
   2980          {
   2981            ZStatus_t status = 0;
   2982            uint16 parentAddr;
   2983            uint16 nwkAddr;
   2984            
   2985            pBuf += MT_RPC_FRAME_HDR_SZ;
   2986          
   2987            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   2988            {
   2989              parentAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2990              pBuf += 2;
   2991              
   2992              nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2993              pBuf += 2;
   2994              
   2995              status = ZDSecMgrAPSRemove( nwkAddr, pBuf, parentAddr );
   2996            }
   2997            else
   2998            {
   2999              status = ZUnsupportedMode;
   3000            }
   3001            
   3002            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3003                                                 MT_ZDO_EXT_SEC_APS_REMOVE_REQ, 1, &status );
   3004          }
   3005          
   3006          /***************************************************************************************************
   3007           * @fn          MT_ZdoExtSetParams
   3008           *
   3009           * @brief       Set Parameters not settable through NV.
   3010           *
   3011           * @param       pBuf - Pointer to the received message data.
   3012           *
   3013           * @return      NULL
   3014           ***************************************************************************************************/
   3015          static void MT_ZdoExtSetParams( uint8 *pBuf )
   3016          {
   3017            ZStatus_t status = ZSuccess;
   3018            uint8 useMultiCast;
   3019            
   3020            pBuf += MT_RPC_FRAME_HDR_SZ;
   3021            
   3022            // Is the useMulticast in this message
   3023            useMultiCast = *pBuf++;
   3024            if ( useMultiCast & 0x80 )
   3025            {
   3026              if ( useMultiCast & 0x7F )
   3027              {
   3028                _NIB.nwkUseMultiCast = TRUE;
   3029              }
   3030              else
   3031              {
   3032                _NIB.nwkUseMultiCast = FALSE;
   3033              }
   3034            }
   3035            
   3036            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3037                                                 MT_ZDO_EXT_SET_PARAMS, 1, &status );
   3038          }
   3039          #endif // MT_ZDO_EXTENSIONS
   3040          
   3041          #endif   /*ZDO Command Processing in MT*/
   3042          /***************************************************************************************************
   3043          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     29   MT_ZdoActiveEpRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     23   MT_ZdoBeaconIndCB
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> osal_mem_alloc
        0     11   -> osal_mem_free
        0     14   -> osal_memcpy
      1     52   MT_ZdoBindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> sAddrExtCpy
      0      9   MT_ZdoCommandProcessing
        0      9   -> MT_ZdoActiveEpRequest
        0      9   -> MT_ZdoBindRequest
        0      9   -> MT_ZdoComplexDescRequest
        0      9   -> MT_ZdoEndDevAnnce
        0      9   -> MT_ZdoEndDevBindRequest
        0      9   -> MT_ZdoEndDeviceTimeoutRequest
        0      9   -> MT_ZdoIEEEAddrRequest
        0      9   -> MT_ZdoJoinReq
        0      9   -> MT_ZdoMatchDescRequest
        0      9   -> MT_ZdoNWKAddressRequest
        0      9   -> MT_ZdoNetworkDiscoveryReq
        0      9   -> MT_ZdoNodeDescRequest
        0      9   -> MT_ZdoNwkAddrOfInterestReq
        0      9   -> MT_ZdoPowerDescRequest
        0      9   -> MT_ZdoRegisterForZDOMsg
        0      9   -> MT_ZdoRemoveRegisteredCB
        0      9   -> MT_ZdoSendData
        0      9   -> MT_ZdoServiceDiscRequest
        0      9   -> MT_ZdoSimpleDescRequest
        0      9   -> MT_ZdoStartupFromApp
        0      9   -> MT_ZdoUnbindRequest
        0      9   -> MT_ZdoUserDescRequest
        0      9   -> MT_ZdoUserDescSet
      1     29   MT_ZdoComplexDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     20   MT_ZdoEndDevAnnce
        0     10   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_DeviceAnnce
      1    103   MT_ZdoEndDevBindRequest
        0     85   -> MT_BuildAndSendZToolResponse
        0     94   -> ZDP_EndDeviceBindReq
      1     20   MT_ZdoEndDeviceTimeoutRequest
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_EndDeviceTimeoutReq
      1     19   MT_ZdoIEEEAddrRequest
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDP_IEEEAddrReq
      0      0   MT_ZdoInit
      1     14   MT_ZdoJoinCnfCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> ZDO_DeregisterForZdoCB
      1     26   MT_ZdoJoinReq
        0     13   -> MT_BuildAndSendZToolResponse
        0     17   -> ZDApp_JoinReq
        0     13   -> ZDO_RegisterForZdoCB
      1    105   MT_ZdoMatchDescRequest
        0     88   -> MT_BuildAndSendZToolResponse
        0     96   -> ZDP_MatchDescReq
      1     19   MT_ZdoNWKAddressRequest
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDP_NwkAddrReq
      1     26   MT_ZdoNetworkDiscoveryReq
        0     17   -> MT_BuildAndSendZToolResponse
        0     17   -> ZDApp_NetworkDiscoveryReq
        0     17   -> ZDO_RegisterForZdoCB
        0     17   -> osal_build_uint32
      1     29   MT_ZdoNodeDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     31   MT_ZdoNwkAddrOfInterestReq
        0     21   -> MT_BuildAndSendZToolResponse
        0     22   -> ZDP_NWKAddrOfInterestReq
      0      9   MT_ZdoNwkDiscoveryCnfCB
        0      9   -> MT_BuildAndSendZToolResponse
        0      9   -> MT_ZdoBeaconIndCB
        0      9   -> ZDO_DeregisterForZdoCB
      1     29   MT_ZdoPowerDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     19   MT_ZdoRegisterForZDOMsg
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDO_RegisterForZDOMsg
      1     19   MT_ZdoRemoveRegisteredCB
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDO_RemoveRegisteredCB
      1     38   MT_ZdoSendData
        0     24   -> MT_BuildAndSendZToolResponse
        0     29   -> ZDP_SendData
      1     18   MT_ZdoSendMsgCB
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      1     19   MT_ZdoServiceDiscRequest
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDP_ServerDiscReq
      1     29   MT_ZdoSimpleDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_SimpleDescReq
      1     19   MT_ZdoStartupFromApp
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDOInitDevice
      1     52   MT_ZdoUnbindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> sAddrExtCpy
      1     29   MT_ZdoUserDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     54   MT_ZdoUserDescSet
        0     42   -> MT_BuildAndSendZToolResponse
        0     44   -> ZDP_UserDescSet
        0     45   -> osal_memcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine61_0
       5  ??Subroutine62_0
      13  ??Subroutine63_0
       6  ??Subroutine64_0
      13  ??Subroutine65_0
       3  ??Subroutine66_0
       5  ??Subroutine67_0
       5  ??Subroutine68_0
       6  ??Subroutine69_0
       8  ??Subroutine70_0
       8  ??Subroutine71_0
       6  ??Subroutine72_0
      14  ??Subroutine73_0
       6  ??Subroutine74_0
       8  ??Subroutine75_0
       8  ??Subroutine76_0
       9  ??Subroutine77_0
       3  ?Subroutine0
       3  ?Subroutine1
      12  ?Subroutine10
      11  ?Subroutine11
      15  ?Subroutine12
      24  ?Subroutine13
      13  ?Subroutine14
      15  ?Subroutine15
      13  ?Subroutine16
       6  ?Subroutine17
       3  ?Subroutine18
       5  ?Subroutine19
      18  ?Subroutine2
      13  ?Subroutine20
       7  ?Subroutine21
      10  ?Subroutine22
      17  ?Subroutine23
       6  ?Subroutine24
       5  ?Subroutine25
      14  ?Subroutine26
       6  ?Subroutine27
       6  ?Subroutine28
       9  ?Subroutine29
       5  ?Subroutine3
       6  ?Subroutine30
       6  ?Subroutine31
       7  ?Subroutine32
       9  ?Subroutine33
       7  ?Subroutine34
       6  ?Subroutine35
       2  ?Subroutine36
      12  ?Subroutine37
       3  ?Subroutine38
       8  ?Subroutine39
       3  ?Subroutine4
      22  ?Subroutine40
       6  ?Subroutine41
       6  ?Subroutine42
      12  ?Subroutine43
      14  ?Subroutine44
      12  ?Subroutine45
      18  ?Subroutine46
      18  ?Subroutine47
       7  ?Subroutine48
       4  ?Subroutine49
       5  ?Subroutine5
       4  ?Subroutine50
       6  ?Subroutine51
       8  ?Subroutine52
       5  ?Subroutine53
      17  ?Subroutine54
      17  ?Subroutine55
       6  ?Subroutine56
       1  ?Subroutine57
      12  ?Subroutine58
       6  ?Subroutine59
      17  ?Subroutine6
       1  ?Subroutine60
      53  ?Subroutine7
       8  ?Subroutine8
      31  ?Subroutine9
      46  MT_ZdoActiveEpRequest
       6  MT_ZdoActiveEpRequest::?relay
     347  MT_ZdoBeaconIndCB
       6  MT_ZdoBeaconIndCB::?relay
     135  MT_ZdoBindRequest
       6  MT_ZdoBindRequest::?relay
     210  MT_ZdoCommandProcessing
       6  MT_ZdoCommandProcessing::?relay
      46  MT_ZdoComplexDescRequest
       6  MT_ZdoComplexDescRequest::?relay
      67  MT_ZdoEndDevAnnce
       6  MT_ZdoEndDevAnnce::?relay
     269  MT_ZdoEndDevBindRequest
       6  MT_ZdoEndDevBindRequest::?relay
      68  MT_ZdoEndDeviceTimeoutRequest
       6  MT_ZdoEndDeviceTimeoutRequest::?relay
      51  MT_ZdoIEEEAddrRequest
       6  MT_ZdoIEEEAddrRequest::?relay
       3  MT_ZdoInit
       6  MT_ZdoInit::?relay
     117  MT_ZdoJoinCnfCB
       6  MT_ZdoJoinCnfCB::?relay
     133  MT_ZdoJoinReq
       6  MT_ZdoJoinReq::?relay
     243  MT_ZdoMatchDescRequest
       6  MT_ZdoMatchDescRequest::?relay
      55  MT_ZdoNWKAddressRequest
       6  MT_ZdoNWKAddressRequest::?relay
      81  MT_ZdoNetworkDiscoveryReq
       6  MT_ZdoNetworkDiscoveryReq::?relay
      50  MT_ZdoNodeDescRequest
       6  MT_ZdoNodeDescRequest::?relay
     141  MT_ZdoNwkAddrOfInterestReq
       6  MT_ZdoNwkAddrOfInterestReq::?relay
      46  MT_ZdoNwkDiscoveryCnfCB
       6  MT_ZdoNwkDiscoveryCnfCB::?relay
      46  MT_ZdoPowerDescRequest
       6  MT_ZdoPowerDescRequest::?relay
      50  MT_ZdoRegisterForZDOMsg
       6  MT_ZdoRegisterForZDOMsg::?relay
      50  MT_ZdoRemoveRegisteredCB
       6  MT_ZdoRemoveRegisteredCB::?relay
     237  MT_ZdoSendData
       6  MT_ZdoSendData::?relay
     187  MT_ZdoSendMsgCB
       6  MT_ZdoSendMsgCB::?relay
      35  MT_ZdoServiceDiscRequest
       6  MT_ZdoServiceDiscRequest::?relay
      61  MT_ZdoSimpleDescRequest
       6  MT_ZdoSimpleDescRequest::?relay
      53  MT_ZdoStartupFromApp
       6  MT_ZdoStartupFromApp::?relay
     138  MT_ZdoUnbindRequest
       6  MT_ZdoUnbindRequest::?relay
      45  MT_ZdoUserDescRequest
       6  MT_ZdoUserDescRequest::?relay
     135  MT_ZdoUserDescSet
       6  MT_ZdoUserDescSet::?relay
       4  _zdoCallbackSub
       1  ignoreIndication
       2  pBeaconIndBuf

 
 3 897 bytes in segment BANKED_CODE
   174 bytes in segment BANK_RELAYS
     7 bytes in segment XDATA_Z
 
 4 071 bytes of CODE  memory
     7 bytes of XDATA memory

Errors: none
Warnings: none
