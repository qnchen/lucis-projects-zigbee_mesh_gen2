###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  13:46:09
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\nwk\nwk_globals.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0100
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\stack\nwk\nwk_globals.c" -D ZTOOL_P1 -D MT_TASK -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE -D
#        NV_INIT -D OPEN_FCS -D PANID_INCREASE -D MAKE_CRC_SHDW -lC "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List"
#        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\Obj" -e
#        --no_code_motion --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List\nwk_globals.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\Obj\nwk_globals.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2014-05-17 12:12:11 -0700 (Sat, 17 May 2014) $
      4            Revision:       $Revision: 38578 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "AddrMgr.h"
     47          #include "AssocList.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          #include "nwk_globals.h"
     51          #include "APS.h"
     52          #include "ssp.h"
     53          #include "rtg.h"
     54          #include "ZDConfig.h"
     55          #include "ZGlobals.h"
     56          #include "ZDApp.h"
     57          
     58          #if defined ( LCD_SUPPORTED )
     59            #include "OnBoard.h"
     60          #endif
     61          
     62          /* HAL */
     63          #include "hal_lcd.h"
     64          
     65          /*********************************************************************
     66           * MACROS
     67           */
     68          
     69          /*********************************************************************
     70           * CONSTANTS
     71           */
     72          // Maximums for the data buffer queue
     73          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     74          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     75          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     76          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     77          
     78          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     79          // A known shortcoming is that when a message is enqueued as "hold" for a
     80          // sleeping device, the timer tick may have counted down to 1, so that msg
     81          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     82          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     83          // So the hold time will vary within this interval:
     84          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     85          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     86          #define NWK_INDIRECT_CNT_RTG_TMR    1
     87          // To hold msg for sleeping end devices for 30 secs:
     88          // #define CNT_RTG_TIMER            1
     89          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     90          // To hold msg for sleeping end devices for 30 mins:
     91          // #define CNT_RTG_TIMER            60
     92          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     93          // To hold msg for sleeping end devices for 30 days:
     94          // #define CNT_RTG_TIMER            60
     95          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     96          // Maximum msgs to hold per associated device.
     97          #define NWK_INDIRECT_MSG_MAX_PER    3
     98          // Maximum total msgs to hold for all associated devices.
     99          #define NWK_INDIRECT_MSG_MAX_ALL    \
    100                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
    101          
    102          /*********************************************************************
    103           * TYPEDEFS
    104           */
    105          
    106          /*********************************************************************
    107           * NWK GLOBAL VARIABLES
    108           */
    109          
    110          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
    111          CONST deviceTableIndex_t gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   15           DB 21
    112          
    113          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
    114          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   0F           DB 15
    115          
    116          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
    117          CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
    118          CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    119          CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    120          CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    121          

   \                                 In  segment CODE_C, align 1
    122          CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
    123          CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    124          CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    125          
    126          // change this if using a different stack profile...
    127          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    129          
    130          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131            uint8 CskipRtrs[1] = {0};
   \                     CskipRtrs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132            uint8 CskipChldrn[1] = {0};
   \                     CskipChldrn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
    134            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
    135            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
    136          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    137            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    138            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    139          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    140            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    141            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    142          #endif // STACK_PROFILE_ID
    143          
    144          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145          uint8 gMIN_TREE_LQI = MIN_LQI_COST_3;
   \                     gMIN_TREE_LQI:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LQI>`
   \   000001                REQUIRE __INIT_XDATA_I
    146          
    147          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 462
   \   0001CE                REQUIRE __INIT_XDATA_Z
    149          
    150          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )

   \                                 In  segment CODE_C, align 1
    151            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = NWK_MIN_ROUTER_CHILDREN;
   \                     gNWK_MIN_ROUTER_CHILDREN:
   \   000000   0000         DW 0

   \                                 In  segment CODE_C, align 1
    152            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = NWK_MIN_ENDDEVICE_CHILDREN;
   \                     gNWK_MIN_ENDDEVICE_CHILDREN:
   \   000000   0000         DW 0
    153          #else
    154            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = 0;
    155            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = 0;
    156          #endif
    157          

   \                                 In  segment CODE_C, align 1
    158          CONFIG_ITEM rtgTableIndex_t gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   28           DB 40

   \                                 In  segment CODE_C, align 1
    159          CONFIG_ITEM srcRtgTableIndex_t gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C           DB 12

   \                                 In  segment CODE_C, align 1
    160          CONFIG_ITEM rreqTableIndex_t gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    161          

   \                                 In  segment CODE_C, align 1
    162          CONFIG_ITEM neighborTableIndex_t gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   10           DB 16
    163          
    164           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 368
   \   000170                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment CODE_C, align 1
    167          CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
   \                     gMAX_SOURCE_ROUTE:
   \   000000   0C           DB 12
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
   \                     gMAX_BROADCAST_QUEUED:
   \   000000   0A           DB 10
    170          

   \                                 In  segment CODE_C, align 1
    171          CONST uint8 gLINK_DOWN_TRIGGER = LINK_DOWN_TRIGGER;
   \                     gLINK_DOWN_TRIGGER:
   \   000000   03           DB 3
    172          

   \                                 In  segment CODE_C, align 1
    173          CONST uint8 gGOOD_LINK_COST = GOOD_LINK_COST;
   \                     gGOOD_LINK_COST:
   \   000000   03           DB 3
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST uint8 gMAX_PASSIVE_ACK_CNT = MAX_PASSIVE_ACK_CNT;
   \                     gMAX_PASSIVE_ACK_CNT:
   \   000000   08           DB 8
    176          
    177          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    179          
    180          #if defined ( ZIGBEE_SOURCE_ROUTING ) || defined ( ZBIT )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
   \                     rtgSrcTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182            uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
   \                     rtgSrcRelayList:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
    183          #endif
    184          
    185          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    187          
    188          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    190          
    191          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    194          

   \                                 In  segment CODE_C, align 1
    195          CONFIG_ITEM bcastTableIndex_t gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    196          
    197          // For tree addressing, this switch allows the allocation of a
    198          // router address to an end device when end device address are
    199          // all used up.  If this option is enabled, address space
    200          // could be limited.

   \                                 In  segment CODE_C, align 1
    201          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    202          
    203          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING ) || defined ( ZBIT )
    204          // number of link status periods after the last received address conflict report
    205          // (network status command)

   \                                 In  segment CODE_C, align 1
    206          CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
   \                     gNWK_CONFLICTED_ADDR_EXPIRY_TIME:
   \   000000   04           DB 4
    207          #endif
    208          
    209          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZBIT )

   \                                 In  segment CODE_C, align 1
    210          CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
   \                     gNWK_FREQ_AGILITY_ALL_MAC_ERRS:
   \   000000   00           DB 0
    211          #endif
    212          
    213          // The time limited to one MTO RReq (Concentrator Announce) in milliseconds.

   \                                 In  segment CODE_C, align 1
    214          CONST uint16 gMTO_RREQ_LIMIT_TIME = MTO_RREQ_LIMIT_TIME;
   \                     gMTO_RREQ_LIMIT_TIME:
   \   000000   E803         DW 1000
    215          
    216          // The number of seconds a MTO routing entry will last.

   \                                 In  segment CODE_C, align 1
    217          CONST uint8 gMTO_ROUTE_EXPIRY_TIME = MTO_ROUTE_EXPIRY_TIME;
   \                     gMTO_ROUTE_EXPIRY_TIME:
   \   000000   FF           DB 255
    218          
    219          // Route Discovery Request Default Radius

   \                                 In  segment CODE_C, align 1
    220          CONST uint8 gDEFAULT_ROUTE_REQUEST_RADIUS = DEFAULT_ROUTE_REQUEST_RADIUS;
   \                     gDEFAULT_ROUTE_REQUEST_RADIUS:
   \   000000   1E           DB 30
    221          
    222          // Network message radius

   \                                 In  segment CODE_C, align 1
    223          CONST uint8 gDEF_NWK_RADIUS = DEF_NWK_RADIUS;
   \                     gDEF_NWK_RADIUS:
   \   000000   1E           DB 30
    224          
    225          #if ( ZSTACK_ROUTER_BUILD ) || defined ( ZBIT )

   \                                 In  segment CODE_C, align 1
    226          CONST uint16 gLINK_STATUS_JITTER_MASK = LINK_STATUS_JITTER_MASK;
   \                     gLINK_STATUS_JITTER_MASK:
   \   000000   7F00         DW 127
    227          #endif
    228          
    229          // Maximum number of devices either aged out or not recognized as child

   \                                 In  segment CODE_C, align 1
    230          CONST uint8 gMAX_NOT_MYCHILD_DEVICES = MAX_NOT_MYCHILD_DEVICES;
   \                     gMAX_NOT_MYCHILD_DEVICES:
   \   000000   05           DB 5
    231          
    232          // Child table Management timeout values

   \                                 In  segment CODE_C, align 1
    233          CONST uint16 gKEEPALIVE_TIMEOUT_MAX = KEEPALIVE_TIMEOUT_MAX;
   \                     gKEEPALIVE_TIMEOUT_MAX:
   \   000000   3C00         DW 60

   \                                 In  segment CODE_C, align 1
    234          CONST uint16 gTIMEOUT_COUNTER_MAX = TIMEOUT_COUNTER_MAX;
   \                     gTIMEOUT_COUNTER_MAX:
   \   000000   3C00         DW 60
    235          
    236          // This table stores devices that have been aged out by the Child Aging Table
    237          // mechanism or have never been a child of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    238          nwkNotMyChild_t notMyChildList[MAX_NOT_MYCHILD_DEVICES];
   \                     notMyChildList:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    239          

   \                                 In  segment CODE_C, align 1
    240          CONST uint32 gMAX_NWK_FRAMECOUNTER_CHANGES = MAX_NWK_FRAMECOUNTER_CHANGES;
   \                     gMAX_NWK_FRAMECOUNTER_CHANGES:
   \   000000   E8030000     DD 1000
    241          
    242          #if defined ( FEATURE_MNP )
    243            uint8 gMAX_MNP_QUEUED = MAX_MNP_QUEUED;
    244          #endif
    245          
    246          /*********************************************************************
    247           * APS GLOBAL VARIABLES
    248           */
    249          
    250          // The Maximum number of binding records
    251          // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    252          CONFIG_ITEM bindTableIndex_t gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   04           DB 4
    253          
    254          #if defined ( REFLECTOR )
    255            // The Maximum number of cluster IDs in a binding record
    256            // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    257            CONFIG_ITEM uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    258          

   \                                 In  segment CODE_C, align 1
    259            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    260          
    261            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    262            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    263          #endif
    264          
    265          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    266          CONFIG_ITEM uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    267          
    268          // APS End Device Broadcast Table
    269          #if ( ZG_BUILD_ENDDEVICE_TYPE )
    270            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
    271            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
    272          #endif
    273          
    274          /*********************************************************************
    275           * SECURITY GLOBAL VARIABLES
    276           */
    277          
    278          // This is the default pre-configured key,
    279          // change this to make a unique key
    280          // SEC_KEY_LEN is defined in ssp.h.
    281          
    282          #if defined ( DEFAULT_KEY )

   \                                 In  segment CODE_C, align 1
    283          CONFIG_ITEM uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;
   \                     defaultKey:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   05           DB 5
   \   000003   07           DB 7
   \   000004   09           DB 9
   \   000005   0B           DB 11
   \   000006   0D           DB 13
   \   000007   0F           DB 15
   \   000008   00           DB 0
   \   000009   02           DB 2
   \   00000A   04           DB 4
   \   00000B   06           DB 6
   \   00000C   08           DB 8
   \   00000D   0A           DB 10
   \   00000E   0C           DB 12
   \   00000F   0D           DB 13
    284          #else
    285          CONST uint8 defaultKey[SEC_KEY_LEN] =
    286          {
    287          #if defined ( APP_TP ) || defined ( APP_TP2 )
    288            // Key for ZigBee Conformance Testing
    289            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    290            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    291          #else
    292            // Key for In-House Testing
    293            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    294            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    295          #endif
    296          };
    297          #endif
    298          
    299          // This is the default pre-configured Trust Center Link key,
    300          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    301          CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] = DEFAULT_TC_LINK_KEY;
   \                     defaultTCLinkKey:
   \   000000   5A           DB 90
   \   000001   69           DB 105
   \   000002   67           DB 103
   \   000003   42           DB 66
   \   000004   65           DB 101
   \   000005   65           DB 101
   \   000006   41           DB 65
   \   000007   6C           DB 108
   \   000008   6C           DB 108
   \   000009   69           DB 105
   \   00000A   61           DB 97
   \   00000B   6E           DB 110
   \   00000C   63           DB 99
   \   00000D   65           DB 101
   \   00000E   30           DB 48
   \   00000F   39           DB 57
    302          
    303          /*********************************************************************
    304           * STATUS STRINGS
    305           */
    306          #if defined ( LCD_SUPPORTED )

   \                                 In  segment XDATA_ROM_C, align 1
    307            const char PingStr[]         = "Ping Rcvd from";
   \                     PingStr:
   \   000000   50696E67     DB "Ping Rcvd from"
   \            20526376
   \            64206672
   \            6F6D00  

   \                                 In  segment XDATA_ROM_C, align 1
    308            const char AssocCnfStr[]     = "Assoc Cnf";
   \                     AssocCnfStr:
   \   000000   4173736F     DB "Assoc Cnf"
   \            6320436E
   \            6600    

   \                                 In  segment XDATA_ROM_C, align 1
    309            const char SuccessStr[]      = "Success";
   \                     SuccessStr:
   \   000000   53756363     DB "Success"
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
    310            const char EndDeviceStr[]    = "EndDevice:";
   \                     EndDeviceStr:
   \   000000   456E6444     DB "EndDevice:"
   \            65766963
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
    311            const char ParentStr[]       = "Parent:";
   \                     ParentStr:
   \   000000   50617265     DB "Parent:"
   \            6E743A00

   \                                 In  segment XDATA_ROM_C, align 1
    312            const char ZigbeeCoordStr[]  = "ZigBee Coord";
   \                     ZigbeeCoordStr:
   \   000000   5A696742     DB "ZigBee Coord"
   \            65652043
   \            6F6F7264
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    313            const char NetworkIDStr[]    = "Network ID:";
   \                     NetworkIDStr:
   \   000000   4E657477     DB "Network ID:"
   \            6F726B20
   \            49443A00

   \                                 In  segment XDATA_ROM_C, align 1
    314            const char RouterStr[]       = "Router:";
   \                     RouterStr:
   \   000000   526F7574     DB "Router:"
   \            65723A00

   \                                 In  segment XDATA_ROM_C, align 1
    315            const char OrphanRspStr[]    = "Orphan Response";
   \                     OrphanRspStr:
   \   000000   4F727068     DB "Orphan Response"
   \            616E2052
   \            6573706F
   \            6E736500

   \                                 In  segment XDATA_ROM_C, align 1
    316            const char SentStr[]         = "Sent";
   \                     SentStr:
   \   000000   53656E74     DB "Sent"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    317            const char FailedStr[]       = "Failed";
   \                     FailedStr:
   \   000000   4661696C     DB "Failed"
   \            656400  

   \                                 In  segment XDATA_ROM_C, align 1
    318            const char AssocRspFailStr[] = "Assoc Rsp fail";
   \                     AssocRspFailStr:
   \   000000   4173736F     DB "Assoc Rsp fail"
   \            63205273
   \            70206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    319            const char AssocIndStr[]     = "Assoc Ind";
   \                     AssocIndStr:
   \   000000   4173736F     DB "Assoc Ind"
   \            6320496E
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
    320            const char AssocCnfFailStr[] = "Assoc Cnf fail";
   \                     AssocCnfFailStr:
   \   000000   4173736F     DB "Assoc Cnf fail"
   \            6320436E
   \            66206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    321            const char EnergyLevelStr[]  = "Energy Level";
   \                     EnergyLevelStr:
   \   000000   456E6572     DB "Energy Level"
   \            6779204C
   \            6576656C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    322            const char ScanFailedStr[]   = "Scan Failed";
   \                     ScanFailedStr:
   \   000000   5363616E     DB "Scan Failed"
   \            20466169
   \            6C656400
    323          #endif
    324          
    325          /*********************************************************************
    326           * @fn       nwk_globals_init()
    327           *
    328           * @brief
    329           *
    330           *   Initialize nwk layer globals.  These are the system defaults and
    331           *   should be changed by the user here.  The default definitions are
    332           *   defined in nwk.h or NLMEDE.h.
    333           *
    334           * @param   none
    335           *
    336           * @return  none
    337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    338          void nwk_globals_init( void )
   \                     nwk_globals_init:
    339          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    340            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A1A         MOV     R2,#0x1a
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??AddrMgrInit::?relay`; Banked call to: AddrMgrInit
    341          
    342          #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    343            if ( ZSTACK_ROUTER_BUILD )
    344            {
    345              // Initialize the Cskip Table
    346              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
    347              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
    348            }
    349          #endif
    350          
    351            // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
    352            // to 0 (compiler flag).
    353            if ( ZSTACK_ROUTER_BUILD && NWK_LINK_STATUS_PERIOD )
    354            {
    355              NLME_InitLinkStatus();
   \   00000B                ; Setup parameters for call to function NLME_InitLinkStatus
   \   00000B   12....       LCALL   `??NLME_InitLinkStatus::?relay`; Banked call to: NLME_InitLinkStatus
    356            }
    357          
    358          #if defined ( ZIGBEE_FREQ_AGILITY )
    359            NwkFreqAgilityInit();
   \   00000E                ; Setup parameters for call to function NwkFreqAgilityInit
   \   00000E   12....       LCALL   `??NwkFreqAgilityInit::?relay`; Banked call to: NwkFreqAgilityInit
    360          #endif
    361          
    362          #if defined ( ZIGBEE_CHILD_AGING )
    363            if ( ( ZSTACK_ROUTER_BUILD ) && ( zgChildAgingEnable == TRUE ) )
   \   000011   90....       MOV     DPTR,#zgChildAgingEnable
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6401         XRL     A,#0x1
   \   000017   7003         JNZ     ??nwk_globals_init_0
    364            {
    365              // Set the function pointers for the Child Aging feature
    366              NwkInitChildAging();
   \   000019                ; Setup parameters for call to function NwkInitChildAging
   \   000019   12....       LCALL   `??NwkInitChildAging::?relay`; Banked call to: NwkInitChildAging
    367            }
    368          #endif  // ZIGBEE_CHILD_AGING
    369          }
   \                     ??nwk_globals_init_0:
   \   00001C                REQUIRE ?Subroutine0
   \   00001C                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    370          
    371          /*********************************************************************
    372           * @fn       NIB_init()
    373           *
    374           * @brief
    375           *
    376           *   Initialize attribute values in NIB
    377           *
    378           * @param   none
    379           *
    380           * @return  none
    381           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    382          void NIB_init()
   \                     NIB_init:
    383          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    384            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000004                ; Setup parameters for call to function osal_rand
   \   000004   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000007   EA           MOV     A,R2
   \   000008   90....       MOV     DPTR,#_NIB
   \   00000B   F0           MOVX    @DPTR,A
    385          
    386            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000C   90....       MOV     DPTR,#_NIB + 17
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    387            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000012   90....       MOV     DPTR,#_NIB + 4
   \   000015   7414         MOV     A,#0x14
   \   000017   F0           MOVX    @DPTR,A
    388          
    389          #if ( NWK_MODE == NWK_MODE_MESH )
    390            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000018   90....       MOV     DPTR,#_NIB + 40
   \   00001B   740F         MOV     A,#0xf
   \   00001D   F0           MOVX    @DPTR,A
    391            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
    392          #endif
    393          
    394            // BROADCAST SETTINGS:
    395            // *******************
    396            //   Broadcast Delivery Time
    397            //     - set to multiples of 100ms
    398            //     - should be 500ms more than the retry time
    399            //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    400            //   Passive Ack Timeout
    401            //     - set to multiples of 100ms
    402            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000020   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   000023   E0           MOVX    A,@DPTR
   \   000024   90....       MOV     DPTR,#_NIB + 7
   \   000027   F0           MOVX    @DPTR,A
    403            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   000028   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   90....       MOV     DPTR,#_NIB + 1
   \   00002F   F0           MOVX    @DPTR,A
    404            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000030   90....       MOV     DPTR,#zgMaxBcastRetires
   \   000033   E0           MOVX    A,@DPTR
   \   000034   90....       MOV     DPTR,#_NIB + 2
   \   000037   F0           MOVX    @DPTR,A
    405          
    406            _NIB.ReportConstantCost = 0;
   \   000038   90....       MOV     DPTR,#_NIB + 8
   \   00003B   E4           CLR     A
   \   00003C   F0           MOVX    @DPTR,A
    407            _NIB.RouteDiscRetries = 0;
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
    408            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   00003F   90....       MOV     DPTR,#_NIB + 11
   \   000042   04           INC     A
   \   000043   F0           MOVX    @DPTR,A
    409            _NIB.nwkAllFresh = NWK_ALL_FRESH;
   \   000044   90....       MOV     DPTR,#_NIB + 104
   \   000047   F0           MOVX    @DPTR,A
    410          
    411            if ( ZG_SECURE_ENABLED )
    412            {
    413              _NIB.SecurityLevel = SECURITY_LEVEL;
   \   000048   90....       MOV     DPTR,#_NIB + 12
   \   00004B   7405         MOV     A,#0x5
   \   00004D   F0           MOVX    @DPTR,A
    414            }
    415            else
    416            {
    417              _NIB.SecurityLevel = 0;
    418            }
    419          
    420            _NIB.SymLink = TRUE;
   \   00004E   A3           INC     DPTR
   \   00004F   7401         MOV     A,#0x1
   \   000051   F0           MOVX    @DPTR,A
    421          
    422            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000052   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000055   E0           MOVX    A,@DPTR
   \   000056   90....       MOV     DPTR,#_NIB + 14
   \   000059   F0           MOVX    @DPTR,A
    423          
    424            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   00005A   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   90....       MOV     DPTR,#_NIB + 15
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   E4           CLR     A
   \   000064   F0           MOVX    @DPTR,A
    425          
    426            _NIB.RouteDiscoveryTime = zgRouteDiscoveryTime;
   \   000065   90....       MOV     DPTR,#zgRouteDiscoveryTime
   \   000068   E0           MOVX    A,@DPTR
   \   000069   90....       MOV     DPTR,#_NIB + 18
   \   00006C   F0           MOVX    @DPTR,A
    427            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   00006D   90....       MOV     DPTR,#zgRouteExpiryTime
   \   000070   E0           MOVX    A,@DPTR
   \   000071   90....       MOV     DPTR,#_NIB + 19
   \   000074   12....       LCALL   ?Subroutine1 & 0xFFFF
    428          
    429            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
    430            _NIB.nwkLogicalChannel = 0;
   \                     ??CrossCallReturnLabel_0:
   \   000077   A3           INC     DPTR
   \   000078   E4           CLR     A
   \   000079   12....       LCALL   ?Subroutine1 & 0xFFFF
    431            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
    432            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_1:
   \   00007C                ; Setup parameters for call to function osal_memset
   \   00007C   7C08         MOV     R4,#0x8
   \   00007E   7D00         MOV     R5,#0x0
   \   000080   7900         MOV     R1,#0x0
   \   000082   7A..         MOV     R2,#(_NIB + 25) & 0xff
   \   000084   7B..         MOV     R3,#((_NIB + 25) >> 8) & 0xff
   \   000086   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    433            //_NIB.nwkPanId = INVALID_NODE_ADDR;
    434            _NIB.nwkPanId = ZDAPP_CONFIG_PAN_ID;   //chaokw panid
   \   000089   90....       MOV     DPTR,#_NIB + 33
   \   00008C   E4           CLR     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   04           INC     A
   \   000090   F0           MOVX    @DPTR,A
    435          
    436            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   000091                ; Setup parameters for call to function sAddrExtCpy
   \   000091   7C..         MOV     R4,#zgExtendedPANID & 0xff
   \   000093   7D..         MOV     R5,#(zgExtendedPANID >> 8) & 0xff
   \   000095   7A..         MOV     R2,#(_NIB + 53) & 0xff
   \   000097   7B..         MOV     R3,#((_NIB + 53) >> 8) & 0xff
   \   000099   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    437          
    438            _NIB.nwkKeyLoaded = FALSE;
   \   00009C   90....       MOV     DPTR,#_NIB + 61
   \   00009F   E4           CLR     A
   \   0000A0   F0           MOVX    @DPTR,A
    439          
    440          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    441            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
   \   0000A1   90....       MOV     DPTR,#_NIB + 96
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   F0           MOVX    @DPTR,A
    442            _NIB.nwkUniqueAddr = FALSE;
   \   0000A7   A3           INC     DPTR
   \   0000A8   E4           CLR     A
   \   0000A9   F0           MOVX    @DPTR,A
    443          #else
    444            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
    445            _NIB.nwkUniqueAddr = TRUE;
    446          #endif
    447          
    448            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD;
   \   0000AA   A3           INC     DPTR
   \   0000AB   740F         MOV     A,#0xf
   \   0000AD   F0           MOVX    @DPTR,A
    449            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000AE   A3           INC     DPTR
   \   0000AF   7403         MOV     A,#0x3
   \   0000B1   F0           MOVX    @DPTR,A
    450          
    451            //MTO and source routing
    452            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000B2   90....       MOV     DPTR,#zgConcentratorDiscoveryTime
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   90....       MOV     DPTR,#_NIB + 102
   \   0000B9   F0           MOVX    @DPTR,A
    453            _NIB.nwkIsConcentrator = zgConcentratorEnable;
   \   0000BA   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   90....       MOV     DPTR,#_NIB + 101
   \   0000C1   F0           MOVX    @DPTR,A
    454            _NIB.nwkConcentratorRadius = zgConcentratorRadius;
   \   0000C2   90....       MOV     DPTR,#zgConcentratorRadius
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   90....       MOV     DPTR,#_NIB + 103
   \   0000C9   F0           MOVX    @DPTR,A
    455          
    456          #if defined ( ZIGBEE_MULTICAST )
    457            _NIB.nwkUseMultiCast = MULTICAST_ENABLED;
   \   0000CA   90....       MOV     DPTR,#_NIB + 100
   \   0000CD   7401         MOV     A,#0x1
   \   0000CF   F0           MOVX    @DPTR,A
    458          #else
    459            _NIB.nwkUseMultiCast = FALSE;
    460          #endif
    461          
    462          #if defined ( NV_RESTORE )
    463            if ( osal_nv_read( ZCD_NV_NWKMGR_ADDR, 0, sizeof( _NIB.nwkManagerAddr ),
    464                               &_NIB.nwkManagerAddr ) != SUCCESS )
    465          #endif
    466            {
    467              _NIB.nwkManagerAddr = 0x0000;
   \   0000D0   90....       MOV     DPTR,#_NIB + 105
   \   0000D3   E4           CLR     A
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   F0           MOVX    @DPTR,A
    468            }
    469          
    470            _NIB.nwkUpdateId = 0;
   \   0000D7   90....       MOV     DPTR,#_NIB + 109
   \   0000DA   F0           MOVX    @DPTR,A
    471            _NIB.nwkTotalTransmissions = 0;
   \   0000DB   90....       MOV     DPTR,#_NIB + 107
   \   0000DE   F0           MOVX    @DPTR,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   F0           MOVX    @DPTR,A
    472          
    473            if ( ZSTACK_ROUTER_BUILD )
    474            {
    475          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    476              NLME_InitStochasticAddressing();
   \   0000E1                ; Setup parameters for call to function NLME_InitStochasticAddressing
   \   0000E1   12....       LCALL   `??NLME_InitStochasticAddressing::?relay`; Banked call to: NLME_InitStochasticAddressing
    477          #else
    478              NLME_InitTreeAddressing();
    479          #endif
    480            }
    481          }
   \   0000E4   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   74FE         MOV     A,#-0x2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   04           INC     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    482          
    483          /*********************************************************************
    484           * @fn       nwk_Status()
    485           *
    486           * @brief
    487           *
    488           *   Status report.
    489           *
    490           * @param   statusCode
    491           * @param   statusValue
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    496          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
    497          #if defined ( LCD_SUPPORTED )
    498            switch ( statusCode )
   \   000009   8A..         MOV     ?V2,R2
   \   00000B   8B..         MOV     ?V3,R3
   \   00000D   78..         MOV     R0,#?V2
   \   00000F   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for nwk_Status>_0`:
   \   000012   0000         DW        0
   \   000014   0800         DW        8
   \   000016   0200         DW        2
   \   000018   ....         DW        ??nwk_Status_0
   \   00001A   0400         DW        4
   \   00001C   ....         DW        ??nwk_Status_1
   \   00001E   0500         DW        5
   \   000020   ....         DW        ??nwk_Status_2
   \   000022   0600         DW        6
   \   000024   ....         DW        ??nwk_Status_3
   \   000026   0700         DW        7
   \   000028   ....         DW        ??nwk_Status_4
   \   00002A   0110         DW        4097
   \   00002C   ....         DW        ??nwk_Status_5
   \   00002E   0310         DW        4099
   \   000030   ....         DW        ??nwk_Status_6
   \   000032   0410         DW        4100
   \   000034   ....         DW        ??nwk_Status_7
   \   000036   ....         DW        ??nwk_Status_8
    499            {
    500              case NWK_STATUS_COORD_ADDR:
    501                if ( ZSTACK_ROUTER_BUILD )
    502                {
    503                  HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_2:
   \   000038                ; Setup parameters for call to function HalLcdWriteString
   \   000038   7901         MOV     R1,#0x1
   \   00003A   7A..         MOV     R2,#ZigbeeCoordStr & 0xff
   \   00003C   7B..         MOV     R3,#(ZigbeeCoordStr >> 8) & 0xff
   \   00003E   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    504                  HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
   \   000041                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000041   75..03       MOV     ?V2,#0x3
   \   000044   78..         MOV     R0,#?V2
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   7910         MOV     R1,#0x10
   \   00004B   AC..         MOV     R4,?V0
   \   00004D   AD..         MOV     R5,?V1
   \   00004F   7A..         MOV     R2,#NetworkIDStr & 0xff
   \   000051   7B..         MOV     R3,#(NetworkIDStr >> 8) & 0xff
   \   000053   12....       LCALL   `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
   \   000056   7401         MOV     A,#0x1
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
    505                  BuzzerControl( BUZZER_BLIP );
   \   00005B                ; Setup parameters for call to function BuzzerControl
   \   00005B   7902         MOV     R1,#0x2
   \   00005D   12....       LCALL   `??BuzzerControl::?relay`; Banked call to: BuzzerControl
    506                }
    507                break;
   \   000060   02....       LJMP    ??nwk_Status_8 & 0xFFFF
    508          
    509              case NWK_STATUS_ROUTER_ADDR:
    510                if ( ZSTACK_ROUTER_BUILD )
    511                {
    512                  HalLcdWriteStringValue( (char*)RouterStr, NLME_GetShortAddr(), 16, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_3:
   \   000063                ; Setup parameters for call to function NLME_GetShortAddr
   \   000063   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000066   8A..         MOV     ?V0,R2
   \   000068   8B..         MOV     ?V1,R3
   \   00006A   AC..         MOV     R4,?V0
   \   00006C   AD..         MOV     R5,?V1
   \   00006E                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00006E   75..01       MOV     ?V0,#0x1
   \   000071   78..         MOV     R0,#?V0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000076   7910         MOV     R1,#0x10
   \   000078   7A..         MOV     R2,#RouterStr & 0xff
   \   00007A   7B..         MOV     R3,#(RouterStr >> 8) & 0xff
   \   00007C   802B         SJMP    ??nwk_Status_9
    513                }
    514                break;
    515          
    516              case NWK_STATUS_ORPHAN_RSP:
    517                if ( ZSTACK_ROUTER_BUILD )
    518                {
    519                  if ( statusValue == ZSuccess )
   \                     ??nwk_Status_4:
   \   00007E   EC           MOV     A,R4
   \   00007F   45..         ORL     A,?V1
   \   000081   7006         JNZ     ??nwk_Status_10
    520                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
   \   000083                ; Setup parameters for call to function HalLcdWriteScreen
   \   000083   7C..         MOV     R4,#SentStr & 0xff
   \   000085   7D..         MOV     R5,#(SentStr >> 8) & 0xff
   \   000087   8004         SJMP    ??nwk_Status_11
    521                  else
    522                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
   \                     ??nwk_Status_10:
   \   000089                ; Setup parameters for call to function HalLcdWriteScreen
   \   000089   7C..         MOV     R4,#FailedStr & 0xff
   \   00008B   7D..         MOV     R5,#(FailedStr >> 8) & 0xff
   \                     ??nwk_Status_11:
   \   00008D   7A..         MOV     R2,#OrphanRspStr & 0xff
   \   00008F   7B..         MOV     R3,#(OrphanRspStr >> 8) & 0xff
   \   000091   8051         SJMP    ??nwk_Status_12
    523                }
    524                break;
    525          
    526              case NWK_ERROR_ASSOC_RSP:
    527                if ( ZSTACK_ROUTER_BUILD )
    528                {
    529                  HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_5:
   \   000093                ; Setup parameters for call to function HalLcdWriteString
   \   000093   7901         MOV     R1,#0x1
   \   000095   7A..         MOV     R2,#AssocRspFailStr & 0xff
   \   000097   7B..         MOV     R3,#(AssocRspFailStr >> 8) & 0xff
   \   000099   8023         SJMP    ??nwk_Status_13
    530                  HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    531                }
    532                break;
    533          
    534              case NWK_STATUS_ED_ADDR:
    535                if ( ZSTACK_END_DEVICE_BUILD )
    536                {
    537                  HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
    538                }
    539                break;
    540          
    541              case NWK_STATUS_PARENT_ADDR:
    542                      HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
   \                     ??nwk_Status_1:
   \   00009B                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00009B   75..03       MOV     ?V2,#0x3
   \   00009E   78..         MOV     R0,#?V2
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A3   7910         MOV     R1,#0x10
   \   0000A5   7A..         MOV     R2,#ParentStr & 0xff
   \   0000A7   7B..         MOV     R3,#(ParentStr >> 8) & 0xff
   \                     ??nwk_Status_9:
   \   0000A9   12....       LCALL   `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
   \   0000AC   8027         SJMP    ??nwk_Status_14
    543                break;
    544          
    545              case NWK_STATUS_ASSOC_CNF:
    546                HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
   \                     ??nwk_Status_0:
   \   0000AE                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000AE   7C..         MOV     R4,#SuccessStr & 0xff
   \   0000B0   7D..         MOV     R5,#(SuccessStr >> 8) & 0xff
   \   0000B2   7A..         MOV     R2,#AssocCnfStr & 0xff
   \   0000B4   7B..         MOV     R3,#(AssocCnfStr >> 8) & 0xff
   \   0000B6   802C         SJMP    ??nwk_Status_12
    547                break;
    548          
    549              case NWK_ERROR_ASSOC_CNF_DENIED:
    550                HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_6:
   \   0000B8                ; Setup parameters for call to function HalLcdWriteString
   \   0000B8   7901         MOV     R1,#0x1
   \   0000BA   7A..         MOV     R2,#AssocCnfFailStr & 0xff
   \   0000BC   7B..         MOV     R3,#(AssocCnfFailStr >> 8) & 0xff
   \                     ??nwk_Status_13:
   \   0000BE   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    551                HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
   \   0000C1                ; Setup parameters for call to function HalLcdWriteValue
   \   0000C1   75..03       MOV     ?V2,#0x3
   \   0000C4   78..         MOV     R0,#?V2
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C9   7910         MOV     R1,#0x10
   \   0000CB   AA..         MOV     R2,?V0
   \   0000CD   AB..         MOV     R3,?V1
   \   0000CF   E4           CLR     A
   \   0000D0   FC           MOV     R4,A
   \   0000D1   FD           MOV     R5,A
   \   0000D2   12....       LCALL   `??HalLcdWriteValue::?relay`; Banked call to: HalLcdWriteValue
   \                     ??nwk_Status_14:
   \   0000D5   7401         MOV     A,#0x1
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
    552                break;
   \   0000DA   800B         SJMP    ??nwk_Status_8
    553          
    554              case NWK_ERROR_ENERGY_SCAN_FAILED:
    555                HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
   \                     ??nwk_Status_7:
   \   0000DC                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000DC   7C..         MOV     R4,#ScanFailedStr & 0xff
   \   0000DE   7D..         MOV     R5,#(ScanFailedStr >> 8) & 0xff
   \   0000E0   7A..         MOV     R2,#EnergyLevelStr & 0xff
   \   0000E2   7B..         MOV     R3,#(EnergyLevelStr >> 8) & 0xff
   \                     ??nwk_Status_12:
   \   0000E4   12....       LCALL   `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    556                break;
    557            }
    558          #endif
    559          }
   \                     ??nwk_Status_8:
   \   0000E7   7F04         MOV     R7,#0x4
   \   0000E9   02....       LJMP    ?BANKED_LEAVE_XDATA
    560          
    561          /*********************************************************************
    562           * @fn      nwk_adjustDelay()
    563           *
    564           * @brief   Adjust the retransmit delay. Modify this function to
    565           *          change the default delay behavior.
    566           *
    567           * @param   existingDelay - default delay
    568           * @param   confirmStatus - data confirm status
    569           * @param   bufOptions - network buffer options
    570           *
    571           * @return  delay value - this number is the number of
    572           *          network event ticks (~2ms).
    573           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    574          uint16 nwk_adjustDelay( uint16 existingDelay, uint8 confirmStatus, uint16 bufOptions )
   \                     nwk_adjustDelay:
    575          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    576            uint16 result = existingDelay;
   \   000007   EA           MOV     A,R2
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   F9           MOV     R1,A
    577            uint16 mask = 0;       // Random mask
    578            uint16 startValue = 0; // Start value
    579          
    580            switch ( confirmStatus )
   \   00000B   EE           MOV     A,R6
   \   00000C   241F         ADD     A,#0x1f
   \   00000E   6004         JZ      ??nwk_adjustDelay_0
   \   000010   24F0         ADD     A,#-0x10
   \   000012   7013         JNZ     ??nwk_adjustDelay_1
    581            {
    582              case ZMacTransactionOverFlow:
    583              case ZMacChannelAccessFailure:
    584                if ( bufOptions & (HANDLE_DELAY | HANDLE_HI_DELAY) )
   \                     ??nwk_adjustDelay_0:
   \   000014   EC           MOV     A,R4
   \   000015   5430         ANL     A,#0x30
   \   000017   600E         JZ      ??nwk_adjustDelay_1
    585                {
    586                  // Delay 4 - 18 ms
    587                  mask = 0x0007;
    588                  startValue = 2;
    589                }
    590                break;
    591          
    592              case ZNwkNoRoute:
    593              case ZMAC_NO_RESOURCES:
    594              case ZMacNoACK:
    595              default:
    596                // leave default delay
    597                mask = 0;
    598                startValue = 0;
    599                break;
    600            }
    601          
    602            if ( (mask > 0) && (startValue > 0) )
    603            {
    604              result = (osal_rand() & mask) + startValue;
   \   000019                ; Setup parameters for call to function osal_rand
   \   000019   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   00001C   EA           MOV     A,R2
   \   00001D   5407         ANL     A,#0x7
   \   00001F   7900         MOV     R1,#0x0
   \   000021   2402         ADD     A,#0x2
   \   000023   F8           MOV     R0,A
   \   000024   5001         JNC     ??nwk_adjustDelay_1
   \   000026   09           INC     R1
    605            }
    606          
    607            return ( result );
   \                     ??nwk_adjustDelay_1:
   \   000027   E8           MOV     A,R0
   \   000028   FA           MOV     R2,A
   \   000029   E9           MOV     A,R1
   \   00002A   FB           MOV     R3,A
   \   00002B   7F02         MOV     R7,#0x2
   \   00002D   02....       LJMP    ?BANKED_LEAVE_XDATA
    608          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LQI>`:
   \   000000   06           DB 6

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??nwk_globals_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NIB_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??nwk_Status::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??nwk_adjustDelay::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_adjustDelay
    609          
    610          /*********************************************************************
    611          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   NIB_init
        2      0   -> NLME_InitStochasticAddressing
        2      0   -> osal_memset
        2      0   -> osal_rand
        2      0   -> sAddrExtCpy
      0     13   nwk_Status
        0     12   -> BuzzerControl
        0     12   -> HalLcdWriteScreen
        0     12   -> HalLcdWriteString
        0     13   -> HalLcdWriteStringValue
        0     13   -> HalLcdWriteValue
        0     12   -> NLME_GetShortAddr
      0     10   nwk_adjustDelay
        0     10   -> osal_rand
      2      0   nwk_globals_init
        2      0   -> AddrMgrInit
        2      0   -> NLME_InitLinkStatus
        2      0   -> NwkFreqAgilityInit
        2      0   -> NwkInitChildAging


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for gMIN_TREE_LQI>
       7  ?Subroutine0
       9  ?Subroutine1
      15  AssocCnfFailStr
      10  AssocCnfStr
      10  AssocIndStr
      15  AssocRspFailStr
     462  AssociatedDevList
      56  BindingTable
       2  Cskip
       1  CskipChldrn
       1  CskipRtrs
      11  EndDeviceStr
      13  EnergyLevelStr
       7  FailedStr
     231  NIB_init
       6  NIB_init::?relay
      12  NetworkIDStr
      16  OrphanRspStr
       8  ParentStr
      15  PingStr
       8  RouterStr
      12  ScanFailedStr
       5  SentStr
       8  SuccessStr
      13  ZigbeeCoordStr
      36  bcastHoldAckMask
       9  bcastHoldHandle
      72  bcastTable
      16  defaultKey
      16  defaultTCLinkKey
       1  gAPS_MAX_GROUPS
       2  gBIND_REC_SIZE
       1  gDEFAULT_ROUTE_REQUEST_RADIUS
       1  gDEF_NWK_RADIUS
       1  gGOOD_LINK_COST
       2  gKEEPALIVE_TIMEOUT_MAX
       1  gLINK_DOWN_TRIGGER
       2  gLINK_STATUS_JITTER_MASK
       1  gMAX_BCAST
       1  gMAX_BINDING_CLUSTER_IDS
       1  gMAX_BROADCAST_QUEUED
       1  gMAX_NEIGHBOR_ENTRIES
       1  gMAX_NOT_MYCHILD_DEVICES
       4  gMAX_NWK_FRAMECOUNTER_CHANGES
       1  gMAX_PASSIVE_ACK_CNT
       1  gMAX_RREQ_ENTRIES
       1  gMAX_RTG_ENTRIES
       1  gMAX_RTG_SRC_ENTRIES
       1  gMAX_SOURCE_ROUTE
       1  gMIN_TREE_LQI
       1  gMTO_ROUTE_EXPIRY_TIME
       2  gMTO_RREQ_LIMIT_TIME
       1  gNWK_CONFLICTED_ADDR_EXPIRY_TIME
       1  gNWK_FREQ_AGILITY_ALL_MAC_ERRS
       1  gNWK_INDIRECT_CNT_RTG_TMR
       1  gNWK_INDIRECT_MSG_MAX_ALL
       1  gNWK_INDIRECT_MSG_MAX_PER
       1  gNWK_MAX_BINDING_ENTRIES
       1  gNWK_MAX_DATABUFS_CONFIRMED
       1  gNWK_MAX_DATABUFS_SCHEDULED
       1  gNWK_MAX_DATABUFS_TOTAL
       1  gNWK_MAX_DATABUFS_WAITING
       1  gNWK_MAX_DEVICE_LIST
       1  gNWK_MAX_SLEEPING_END_DEVICES
       2  gNWK_MIN_ENDDEVICE_CHILDREN
       2  gNWK_MIN_ROUTER_CHILDREN
       1  gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
       2  gTIMEOUT_COUNTER_MAX
     368  neighborTable
      20  notMyChildList
     236  nwk_Status
       6  nwk_Status::?relay
      48  nwk_adjustDelay
       6  nwk_adjustDelay::?relay
      28  nwk_globals_init
       6  nwk_globals_init::?relay
      64  rtDiscTable
      24  rtgSrcRelayList
      72  rtgSrcTable
     280  rtgTable

 
   559 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    79 bytes in segment CODE_C
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
   178 bytes in segment XDATA_ROM_C
 1 467 bytes in segment XDATA_Z
 
   663 bytes of CODE  memory
   178 bytes of CONST memory
 1 468 bytes of XDATA memory

Errors: none
Warnings: none
