///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               21/Apr/2017  13:46:08
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Application\NodeAuth.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0100
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Application\NodeAuth.c" -D ZTOOL_P1 -D MT_TASK
//        -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE
//        -D NV_INIT -D OPEN_FCS -D PANID_INCREASE -D MAKE_CRC_SHDW -lC
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List"
//        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List\NodeAuth.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME NodeAuth

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_X
        EXTERN ?L_AND_X
        EXTERN ?L_EQ
        EXTERN ?L_EQ_X
        EXTERN ?L_IOR_TO_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?L_SUB
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_GE_X
        EXTERN ?UL_GT
        EXTERN ?UL_SHR
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??Authlist_add::?relay`
        FUNCTION `??Authlist_add::?relay`,0203H
        PUBLIC `??Authlist_del::?relay`
        FUNCTION `??Authlist_del::?relay`,0203H
        FUNCTION `??Authlist_delete_entry::?relay`,0203H
        PUBLIC `??Authlist_find_by_key::?relay`
        FUNCTION `??Authlist_find_by_key::?relay`,0203H
        PUBLIC `??Authlist_get::?relay`
        FUNCTION `??Authlist_get::?relay`,0203H
        FUNCTION `??Authlist_init::?relay`,0203H
        PUBLIC `??Authlist_item_cnt::?relay`
        FUNCTION `??Authlist_item_cnt::?relay`,0203H
        FUNCTION `??Authlist_should_insert::?relay`,0203H
        PUBLIC `??Authlist_verify_device::?relay`
        FUNCTION `??Authlist_verify_device::?relay`,0203H
        FUNCTION `??List_cache_force_load::?relay`,0203H
        FUNCTION `??List_cache_load_next::?relay`,0203H
        FUNCTION `??List_cache_load_on_need::?relay`,0203H
        FUNCTION `??List_cache_write_back::?relay`,0203H
        FUNCTION `??Mail_uplink::?relay`,0203H
        FUNCTION `??Mail_uplink_registered_cnt::?relay`,0203H
        PUBLIC `??Node_auth_init::?relay`
        FUNCTION `??Node_auth_init::?relay`,0203H
        PUBLIC `??Node_auth_uart_msg_process::?relay`
        FUNCTION `??Node_auth_uart_msg_process::?relay`,0203H
        PUBLIC `??Node_auth_wipe::?relay`
        FUNCTION `??Node_auth_wipe::?relay`,0203H
        FUNCTION `??Set_registered_num::?relay`,0203H
        PUBLIC Authlist_add
        FUNCTION Authlist_add,0a1203H
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC Authlist_del
        FUNCTION Authlist_del,0a1203H
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION Authlist_delete_entry,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 33, STACK
        PUBLIC Authlist_find_by_key
        FUNCTION Authlist_find_by_key,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC Authlist_get
        FUNCTION Authlist_get,0a1203H
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        FUNCTION Authlist_init,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Authlist_item_cnt
        FUNCTION Authlist_item_cnt,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION Authlist_should_insert,0a1203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC Authlist_verify_device
        FUNCTION Authlist_verify_device,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 32, STACK
        FUNCTION List_cache_force_load,0a1203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION List_cache_load_next,0a1203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION List_cache_load_on_need,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION List_cache_write_back,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION Mail_uplink,0a1203H
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 37, STACK
        FUNCTION Mail_uplink_registered_cnt,0a1203H
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Node_auth_init
        FUNCTION Node_auth_init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC Node_auth_uart_msg_process
        FUNCTION Node_auth_uart_msg_process,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 53, STACK
        PUBLIC Node_auth_wipe
        FUNCTION Node_auth_wipe,021203H
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION Set_registered_num,0a1203H
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBWEAK __Constant_0
        PUBWEAK __Constant_1
        PUBWEAK __Constant_10
        PUBWEAK __Constant_66
        PUBWEAK __Constant_67
        PUBWEAK __Constant_8
        PUBWEAK __Constant_fffffff0
        PUBWEAK __Constant_ffffffff
        PUBLIC gAuthConfig
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
MT_UartCalcFCS      SYMBOL "MT_UartCalcFCS"
`??MT_UartCalcFCS::?relay` SYMBOL "?relay", MT_UartCalcFCS
memcmp              SYMBOL "memcmp"
`??memcmp::?relay`  SYMBOL "?relay", memcmp
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_delete      SYMBOL "osal_nv_delete"
`??osal_nv_delete::?relay` SYMBOL "?relay", osal_nv_delete
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
Authlist_add        SYMBOL "Authlist_add"
`??Authlist_add::?relay` SYMBOL "?relay", Authlist_add
Authlist_del        SYMBOL "Authlist_del"
`??Authlist_del::?relay` SYMBOL "?relay", Authlist_del
Authlist_find_by_key SYMBOL "Authlist_find_by_key"
`??Authlist_find_by_key::?relay` SYMBOL "?relay", Authlist_find_by_key
Authlist_get        SYMBOL "Authlist_get"
`??Authlist_get::?relay` SYMBOL "?relay", Authlist_get
Authlist_item_cnt   SYMBOL "Authlist_item_cnt"
`??Authlist_item_cnt::?relay` SYMBOL "?relay", Authlist_item_cnt
Authlist_verify_device SYMBOL "Authlist_verify_device"
`??Authlist_verify_device::?relay` SYMBOL "?relay", Authlist_verify_device
Node_auth_init      SYMBOL "Node_auth_init"
`??Node_auth_init::?relay` SYMBOL "?relay", Node_auth_init
Node_auth_uart_msg_process SYMBOL "Node_auth_uart_msg_process"
`??Node_auth_uart_msg_process::?relay` SYMBOL "?relay", Node_auth_uart_msg_process
Node_auth_wipe      SYMBOL "Node_auth_wipe"
`??Node_auth_wipe::?relay` SYMBOL "?relay", Node_auth_wipe

        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??MT_UartCalcFCS::?relay`
        FUNCTION `??MT_UartCalcFCS::?relay`,00H
        EXTERN `??memcmp::?relay`
        FUNCTION `??memcmp::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_delete::?relay`
        FUNCTION `??osal_nv_delete::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartCalcFCS
        FUNCTION MT_UartCalcFCS,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcmp
        FUNCTION memcmp,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nodeList
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_delete
        FUNCTION osal_nv_delete,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Projects\zstack\Application\NodeAuth.c
//    1 /**************************************************************************************************
//    2   Filename:       NodeAuth.c
//    3   Revised:        2017-03-19
//    4 
//    5   Description -   Serial Transfer Application node authentication related func.
//    6 
//    7 **************************************************************************************************/
//    8 
//    9 
//   10 /*********************************************************************
//   11  * INCLUDES
//   12  */
//   13 #include "NodeAuth.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1
//   14 #include "OSAL_Nv.h"
//   15 #include "hal_aes.h"
//   16 #include "hal_dma.h"
//   17 
//   18 #include "GenericApp.h"
//   19 #include <string.h>  
//   20 
//   21 /*********************************************************************
//   22  * MACROS
//   23  */
//   24 #define AUTH_LIST_CACHE_SIZE           (1<<4)
//   25 #define AUTH_LIST_CACHE_ALIGN(_offset) (_offset & ~(AUTH_LIST_CACHE_SIZE -1))
//   26 
//   27 /*********************************************************************
//   28  * CONSTANTS
//   29  */
//   30 
//   31 /*********************************************************************
//   32  * TYPEDEFS
//   33  */
//   34 
//   35 /*********************************************************************
//   36  * GLOBAL VARIABLES
//   37  */
//   38 
//   39 struct
//   40 {
//   41     uint32 version;
//   42     uint32 auth_registered_num;

        RSEG XDATA_I:XDATA:NOROOT(0)
//   43 } gAuthConfig = {
gAuthConfig:
        DATA8
        DS 8
        REQUIRE `?<Initializer for gAuthConfig>`
        REQUIRE __INIT_XDATA_I
//   44     .version = 1, // increase this and handle database upgrade if new items added!
//   45     .auth_registered_num = 0
//   46 };
//   47 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   48 static NodeRegisterEntry gListCache[AUTH_LIST_CACHE_SIZE];
gListCache:
        DS 160
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   49 static uint32 gListOffset = 0;
gListOffset:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   50 static uint32 gListNum = 0;
gListNum:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   51 
//   52 //static const uint8 DEFAULT_AES_NONCE[13] = NODE_AUTH_DEFAULT_NONCE;
//   53 //static const char  DEFAULT_AES_KEY[STATE_BLENGTH] = NODE_AUTH_DEFAULT_KEY;
//   54 
//   55 
//   56 /*********************************************************************
//   57  * EXTERNAL VARIABLES
//   58  */
//   59  extern nodeList_t *nodeList;  
//   60 
//   61 /*********************************************************************
//   62  * LOCAL FUNCTION PROTOTYPE
//   63  */
//   64 #define List_cache_get(_o) (List_cache_load_on_need(_o), &gListCache[(_o)-gListOffset])
//   65 #define Is_entry_deleted(_e) (0 != ((_e)->flag & NODE_REG_ENTRY_DELETED))
//   66 #define Increase_registered_num() do { Set_registered_num(gAuthConfig.auth_registered_num + 1); } while(0)
//   67 #define Decrease_registered_num() do { Set_registered_num(gAuthConfig.auth_registered_num - 1); } while(0)
//   68 
//   69 static uint8 Authlist_init( uint8 load );
//   70 static void Authlist_delete_entry(uint32 index);
//   71 static bool Authlist_should_insert(uint8 const* key, uint8 len, uint32 *index);
//   72 
//   73 static inline void List_cache_recreate( void );
//   74 static void List_cache_force_load(uint32 offset);
//   75 static bool List_cache_load_next( void );
//   76 static uint32 List_cache_find_by_key(uint8 const* key, uint8 len);
//   77 static uint32 List_cache_write_back( void );
//   78 static inline bool List_cache_contain(uint32 offset);
//   79 static inline void List_cache_load_on_need(uint32 offset);
//   80 
//   81 static void Set_registered_num(uint32 num);
//   82 
//   83 static uint16 Mail_uplink(uint8 port, uint8 cmd, uint8 len, void* buf);
//   84 static inline uint16 Mail_uplink_registered_cnt(uint8 port);
//   85 static inline uint16 Mail_uplink_key(uint8 port, uint32 index, uint8 const* key);
//   86 static inline uint16 Mail_uplink_notify(uint8 port, uint8 const* extended_addr);
//   87 
//   88 /*********************************************************************
//   89  * EXTERNAL FUNCTIONS
//   90  */
//   91  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   92 uint8 Node_auth_init( void )
Node_auth_init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function Node_auth_init
        CODE
//   93 {
        FUNCALL Node_auth_init, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_init, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_init, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_init, Authlist_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_init, Authlist_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   94     uint8 rc;
//   95     if ( SUCCESS == (rc = osal_nv_item_init(APP_NV_AUTH_GLOBAL_CONFIG, sizeof(gAuthConfig), &gAuthConfig)) ) 
        ; Setup parameters for call to function osal_nv_item_init
        MOV     ?V0,#gAuthConfig & 0xff
        MOV     ?V1,#(gAuthConfig >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R0,A
        JNZ     ??Node_auth_init_0
//   96     {
//   97         osal_nv_read(APP_NV_AUTH_GLOBAL_CONFIG, 0, sizeof(gAuthConfig), &gAuthConfig);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x8
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//   98     }
//   99     else if ( NV_ITEM_UNINIT == rc )
//  100     {
//  101     }
//  102     else
//  103     {
//  104         SystemReset();
//  105     }
//  106     if ( SUCCESS == (rc = osal_nv_item_init(
//  107             APP_NV_AUTH_KEY_LIST, 
//  108             sizeof(NodeRegisterEntry) * AUTH_LIST_MAX_LEN, 
//  109             NULL))) 
??Node_auth_init_1:
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#-0x4
        MOV     R5,#0x3
        MOV     R2,#0x2
        MOV     R3,#0x4
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R0,A
        JNZ     ??Node_auth_init_2
//  110     {
//  111         Authlist_init(TRUE);
        ; Setup parameters for call to function Authlist_init
        MOV     R1,#0x1
??Node_auth_init_3:
        LCALL   `??Authlist_init::?relay`; Banked call to: Authlist_init
//  112     }
//  113     else if ( NV_ITEM_UNINIT == rc )
//  114     {
//  115         Authlist_init(FALSE);
//  116     }
//  117     else
//  118     {
//  119         SystemReset();
//  120     }
//  121     return SUCCESS;
        MOV     R1,#0x0
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
??Node_auth_init_0:
        MOV     A,#0x9
        XRL     A,R0
        JZ      ??Node_auth_init_1
        CLR     0xa8.7
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??Node_auth_init_4:
        SJMP    ??Node_auth_init_4
??Node_auth_init_2:
        MOV     A,#0x9
        XRL     A,R0
        JNZ     ??Node_auth_init_5
        ; Setup parameters for call to function Authlist_init
        MOV     R1,#0x0
        SJMP    ??Node_auth_init_3
??Node_auth_init_5:
        CLR     0xa8.7
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??Node_auth_init_6:
        SJMP    ??Node_auth_init_6
          CFI EndBlock cfiBlock0
        REQUIRE _A_IEN0
        REQUIRE WDCTL
//  122 }
//  123 
//  124 
//  125 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  126 void Node_auth_wipe( void )
Node_auth_wipe:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function Node_auth_wipe
        CODE
//  127 {
        FUNCALL Node_auth_wipe, osal_nv_delete
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_wipe, osal_nv_delete
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_wipe, Node_auth_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  128     osal_nv_delete(APP_NV_AUTH_GLOBAL_CONFIG, sizeof(gAuthConfig));
        ; Setup parameters for call to function osal_nv_delete
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
//  129     osal_nv_delete(APP_NV_AUTH_KEY_LIST, sizeof(NodeRegisterEntry) * AUTH_LIST_MAX_LEN);
        ; Setup parameters for call to function osal_nv_delete
        MOV     R4,#-0x4
        MOV     R5,#0x3
        MOV     R2,#0x2
        MOV     R3,#0x4
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
//  130     Node_auth_init();
        ; Setup parameters for call to function Node_auth_init
        LCALL   `??Node_auth_init::?relay`; Banked call to: Node_auth_init
//  131 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//  132 
//  133 
//  134 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  135 static bool Authlist_should_insert(uint8 const* key, uint8 keylen, uint32 *index)
Authlist_should_insert:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function Authlist_should_insert
        CODE
//  136 {
        FUNCALL Authlist_should_insert, List_cache_force_load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_should_insert, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_should_insert, List_cache_load_next
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV     ?V14,R2
        MOV     ?V15,R3
        MOV     ?V12,R1
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  137     if (keylen != AUTH_LIST_KEY_LEN) {
        MOV     A,#0x8
        XRL     A,?V12
        JZ      ??Authlist_should_insert_0
//  138         *index = AUTH_LIST_INVALID_INDEX;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine5 & 0xFFFF
//  139         return 0;
??CrossCallReturnLabel_11:
        LJMP    ??Authlist_should_insert_1 & 0xFFFF
//  140     }
//  141     uint32 avail = AUTH_LIST_INVALID_INDEX;
??Authlist_should_insert_0:
        MOV     ?V0,#-0x1
        MOV     ?V1,#-0x1
        MOV     ?V2,#-0x1
        MOV     ?V3,#-0x1
//  142     uint32 idx;
//  143     List_cache_force_load(0);
        ; Setup parameters for call to function List_cache_force_load
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        LCALL   `??List_cache_force_load::?relay`; Banked call to: List_cache_force_load
//  144     do {
//  145         for (idx = 0; 
??Authlist_should_insert_2:
        MOV     ?V4,#0x0
        MOV     ?V5,#0x0
        MOV     ?V6,#0x0
        MOV     ?V7,#0x0
        SJMP    ??Authlist_should_insert_3
//  146              idx + gListOffset < AUTH_LIST_MAX_LEN && idx < gListNum ;
//  147              ++idx)
//  148         {
//  149             if (avail == AUTH_LIST_INVALID_INDEX && 
//  150                 Is_entry_deleted(&gListCache[idx]))
??Authlist_should_insert_4:
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        JNC     ??Authlist_should_insert_5
//  151             {
//  152                 avail = idx + gListOffset;
        MOV     ?V0,?V4
        MOV     ?V1,?V5
        MOV     ?V2,?V6
        MOV     ?V3,?V7
        MOV     DPTR,#gListOffset
        MOV     R0,#?V0
        LCALL   ?L_ADD_X
//  153             }
??Authlist_should_insert_6:
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V4
        LCALL   ?L_ADD_X
??Authlist_should_insert_3:
        MOV     ?V8,?V4
        MOV     ?V9,?V5
        MOV     ?V10,?V6
        MOV     ?V11,?V7
        MOV     DPTR,#gListOffset
        MOV     R0,#?V8
        LCALL   ?L_ADD_X
        MOV     DPH,#(__Constant_66 >> 8) & 0xff
        MOV     DPL,#__Constant_66 & 0xff
        MOV     R0,#?V8
        LCALL   ?UL_GE_X
        JC      ??Authlist_should_insert_7
        MOV     DPTR,#gListNum
        MOV     R0,#?V4
        LCALL   ?UL_GE_X
        JC      ??Authlist_should_insert_7
        MOV     DPTR,#__Constant_ffffffff
        MOV     R0,#?V0
        LCALL   ?L_EQ_X
        JZ      ??Authlist_should_insert_4
//  154             else if (!Is_entry_deleted(&gListCache[idx]) &&
//  155                         osal_memcmp(key, gListCache[idx].key, keylen) )
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_8:
        JC      ??Authlist_should_insert_6
??Authlist_should_insert_5:
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#(gListCache + 2) & 0xff
        ADD     A,R0
        MOV     ?V8,A
        MOV     A,#((gListCache + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V9,A
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     DPL,?V14
        MOV     DPH,?V15
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        JZ      ??Authlist_should_insert_6
//  156             {
//  157                 *index = idx + gListOffset;;
        MOV     DPTR,#gListOffset
        MOV     R0,#?V4
        LCALL   ?L_ADD_X
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V4
        LCALL   ?L_MOV_TO_X
//  158                 return FALSE;
        SJMP    ??Authlist_should_insert_1
//  159             }
//  160         }
//  161     } while (List_cache_load_next());
??Authlist_should_insert_7:
        ; Setup parameters for call to function List_cache_load_next
        LCALL   `??List_cache_load_next::?relay`; Banked call to: List_cache_load_next
        MOV     A,R1
        JZ      $+5
        LJMP    ??Authlist_should_insert_2 & 0xFFFF
//  162 
//  163     *index = avail;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
//  164     return avail != AUTH_LIST_INVALID_INDEX;
        MOV     DPTR,#__Constant_ffffffff
        MOV     R0,#?V0
        LCALL   ?L_EQ_X
        JZ      ??Authlist_should_insert_1
        MOV     R1,#0x1
        SJMP    ??Authlist_should_insert_8
??Authlist_should_insert_1:
        MOV     R1,#0x0
??Authlist_should_insert_8:
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
//  165 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function Authlist_should_insert
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function Authlist_should_insert
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond4) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond4) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond4) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV     A,?V4
        MOV     B,#0xa
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0xa
        MOV     A,?V5
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine8_0
        ; // Fall through to label ??Subroutine8_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine8_0:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function Authlist_find_by_key
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function Authlist_should_insert
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function Authlist_should_insert
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#gListCache & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(gListCache >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9
//  166 
//  167 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  168 uint8 Authlist_add(uint8 const* buf, uint8 len, uint32 *index)
Authlist_add:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function Authlist_add
        CODE
//  169 {
        FUNCALL Authlist_add, List_cache_force_load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_add, Authlist_should_insert
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_add, List_cache_load_on_need
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_add, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_add, Set_registered_num
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_add, List_cache_write_back
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R1
        MOV     R6,A
        MOV     ?V2,R4
        MOV     ?V3,R5
//  170     uint32 avail;
//  171     NodeRegisterEntry* e;
//  172 
//  173     if (len != AUTH_LIST_KEY_LEN) return 0;
        MOV     A,#0x8
        XRL     A,R6
        JZ      $+5
        LJMP    ??Authlist_add_0 & 0xFFFF
//  174 
//  175     List_cache_force_load(0);
        ; Setup parameters for call to function List_cache_force_load
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        LCALL   `??List_cache_force_load::?relay`; Banked call to: List_cache_force_load
//  176 
//  177     if (Authlist_should_insert(buf, len, &avail))
        ; Setup parameters for call to function Authlist_should_insert
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R1,#0x8
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??Authlist_should_insert::?relay`; Banked call to: Authlist_should_insert
        MOV     A,R1
        JNZ     $+5
        LJMP    ??Authlist_add_1 & 0xFFFF
//  178     {
//  179         e = List_cache_get(avail);
        ; Setup parameters for call to function List_cache_load_on_need
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XLOAD_R2345
        LCALL   `??List_cache_load_on_need::?relay`; Banked call to: List_cache_load_on_need
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     ?V8,?V4
        MOV     ?V9,?V5
        MOV     DPTR,#gListOffset
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,?V8
        CLR     C
        SUBB    A,?V4
        MOV     R0,A
        MOV     A,?V9
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
//  180         e->flag &= ~NODE_REG_ENTRY_DELETED;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ANL     A,#0xfe
        MOVX    @DPTR,A
//  181         osal_memcpy(e->key, buf, len);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V0
        MOV     ?V5,?V1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        JNC     ??Authlist_add_2
        INC     R3
??Authlist_add_2:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  182         
//  183         Increase_registered_num();
        ; Setup parameters for call to function Set_registered_num
        MOV     DPTR,#gAuthConfig + 4
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V4
        LCALL   ?L_ADD_X
        MOV     R2,?V4
        MOV     R3,?V5
        MOV     R4,?V6
        MOV     R5,?V7
        LCALL   `??Set_registered_num::?relay`; Banked call to: Set_registered_num
//  184         List_cache_write_back();
        ; Setup parameters for call to function List_cache_write_back
        LCALL   `??List_cache_write_back::?relay`; Banked call to: List_cache_write_back
//  185         if(index) *index = avail;
        MOV     A,?V2
        ORL     A,?V3
        JZ      ??Authlist_add_3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XLOAD_R0123
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?XSTORE_R0123
//  186         return Authlist_item_cnt();
//  187     }
        SJMP    ??Authlist_add_3
//  188     else if (avail == AUTH_LIST_INVALID_INDEX)
??Authlist_add_1:
        MOV     DPTR,#__Constant_ffffffff
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_EQ_X
        JNZ     ??Authlist_add_3
//  189     {    
//  190         return 0;
??Authlist_add_0:
        MOV     R1,#0x0
        SJMP    ??Authlist_add_4
//  191     }
//  192     else
//  193     {
//  194         return Authlist_item_cnt(); 
??Authlist_add_3:
        MOV     DPTR,#gAuthConfig + 4
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R1,?V0
??Authlist_add_4:
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
//  195     }
//  196 }
          CFI EndBlock cfiBlock10
//  197 
//  198 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  199 uint8 Authlist_get(uint32 index, uint8* buf, uint8* len)
Authlist_get:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function Authlist_get
        CODE
//  200 {
        FUNCALL Authlist_get, List_cache_load_on_need
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_get, List_cache_load_on_need
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_get, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
//  201     NodeRegisterEntry const* e;
//  202 
//  203     if (*len < AUTH_LIST_KEY_LEN) return 0;
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x8
        JC      ??Authlist_get_0
//  204     else *len = AUTH_LIST_KEY_LEN;
        MOV     A,#0x8
        MOVX    @DPTR,A
//  205 
//  206     List_cache_load_on_need(index);
        ; Setup parameters for call to function List_cache_load_on_need
        LCALL   `??List_cache_load_on_need::?relay`; Banked call to: List_cache_load_on_need
//  207 
//  208     e = List_cache_get(index);
        ; Setup parameters for call to function List_cache_load_on_need
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R4,?V2
        MOV     R5,?V3
        LCALL   `??List_cache_load_on_need::?relay`; Banked call to: List_cache_load_on_need
        MOV     DPTR,#gListOffset
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,?V0
        CLR     C
        SUBB    A,?V4
        MOV     R0,A
        MOV     A,?V1
        LCALL   ?Subroutine4 & 0xFFFF
//  209     if (NULL == e || Is_entry_deleted(e))
??CrossCallReturnLabel_1:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??Authlist_get_1
//  210     {
//  211         return 0;
??Authlist_get_0:
        MOV     R1,#0x0
        SJMP    ??Authlist_get_2
//  212     }
//  213     
//  214     osal_memcpy(buf, e->key, AUTH_LIST_KEY_LEN);
??Authlist_get_1:
        ; Setup parameters for call to function osal_memcpy
        INC     DPTR
        INC     DPTR
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0,R1
        MOV     ?V1,R2
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  215     return Authlist_item_cnt();
        MOV     DPTR,#gAuthConfig + 4
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R1,?V0
??Authlist_get_2:
          CFI EndBlock cfiBlock11
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  216 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function Authlist_add
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function Authlist_get
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        SUBB    A,?V5
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0xa
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0xa
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#gListCache & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(gListCache >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
//  217 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  218 static void Authlist_delete_entry(uint32 index)
Authlist_delete_entry:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function Authlist_delete_entry
        CODE
//  219 {
        FUNCALL Authlist_delete_entry, List_cache_load_on_need
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_delete_entry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_delete_entry, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_delete_entry, List_cache_write_back
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_delete_entry, List_cache_load_on_need
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_delete_entry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_delete_entry, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_delete_entry, Set_registered_num
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_delete_entry, List_cache_write_back
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
//  220     NodeRegisterEntry *last_entry_p, *to_del;
//  221     NodeRegisterEntry last_entry_copy;
//  222     uint32 last_index = Authlist_item_cnt() - 1;
        MOV     DPTR,#gAuthConfig + 4
        MOV     R0,#?V8
        LCALL   ?L_MOV_X
        MOV     ?V0,?V8
        MOV     A,?V0
        ADD     A,#-0x1
        MOV     ?V0,A
        CLR     A
        ADDC    A,#-0x1
        MOV     ?V1,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V2,A
        MOV     ?V3,A
//  223 
//  224     if (index >= Authlist_item_cnt() || 
//  225         index >= AUTH_LIST_MAX_LEN)
        CLR     A
        MOV     ?V9,A
        MOV     ?V10,A
        MOV     ?V11,A
        MOV     R0,#?V8
        MOV     R1,#?V4
        LCALL   ?UL_GT
        JNC     ??Authlist_delete_entry_0
        MOV     DPTR,#__Constant_66
        MOV     R0,#?V4
        LCALL   ?UL_GE_X
        JNC     ??Authlist_delete_entry_1
//  226     {
//  227         return;
??Authlist_delete_entry_0:
        LJMP    ??Authlist_delete_entry_2 & 0xFFFF
//  228     }
//  229     if (index != last_index) {
??Authlist_delete_entry_1:
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?L_EQ
        JZ      ??Authlist_delete_entry_3
//  230         // not last entry, need to fill the blank
//  231         last_entry_p = List_cache_get(last_index);
        ; Setup parameters for call to function List_cache_load_on_need
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R4,?V2
        MOV     R5,?V3
        LCALL   `??List_cache_load_on_need::?relay`; Banked call to: List_cache_load_on_need
        MOV     DPTR,#gListOffset
        MOV     R0,#?V8
        LCALL   ?L_MOV_X
        MOV     A,?V0
        CLR     C
        SUBB    A,?V8
        MOV     R0,A
        MOV     A,?V1
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     ?V0,A
        MOV     A,#(gListCache >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V1,A
//  232         osal_memcpy(&last_entry_copy, last_entry_p, sizeof(NodeRegisterEntry));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V8,?V0
        MOV     ?V9,A
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  233         last_entry_p->flag |= NODE_REG_ENTRY_DELETED;
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine6 & 0xFFFF
//  234         osal_memset(last_entry_p->key, 0xff, AUTH_LIST_KEY_LEN);
??CrossCallReturnLabel_2:
        MOV     A,?V0
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  235         List_cache_write_back();
        ; Setup parameters for call to function List_cache_write_back
        LCALL   `??List_cache_write_back::?relay`; Banked call to: List_cache_write_back
        SJMP    ??Authlist_delete_entry_4
//  236     } else {
//  237         last_entry_p = NULL;
??Authlist_delete_entry_3:
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
//  238     }
//  239 
//  240     to_del = List_cache_get(index);
??Authlist_delete_entry_4:
        ; Setup parameters for call to function List_cache_load_on_need
        MOV     R2,?V4
        MOV     R3,?V5
        MOV     R4,?V6
        MOV     R5,?V7
        LCALL   `??List_cache_load_on_need::?relay`; Banked call to: List_cache_load_on_need
        MOV     DPTR,#gListOffset
        MOV     R0,#?V8
        LCALL   ?L_MOV_X
        MOV     A,?V4
        CLR     C
        SUBB    A,?V8
        MOV     R0,A
        MOV     A,?V5
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     R2,A
        MOV     A,#(gListCache >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
//  241     if (last_entry_p != NULL) {
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??Authlist_delete_entry_5
//  242         osal_memcpy(to_del, &last_entry_copy, sizeof(NodeRegisterEntry));
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0xa
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        SJMP    ??Authlist_delete_entry_6
//  243     } else {
//  244         to_del->flag |= NODE_REG_ENTRY_DELETED;
??Authlist_delete_entry_5:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine6 & 0xFFFF
//  245         osal_memset(to_del->key, 0xff, AUTH_LIST_KEY_LEN);
//  246     }
??CrossCallReturnLabel_3:
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        JNC     ??Authlist_delete_entry_7
        INC     R3
??Authlist_delete_entry_7:
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  247     Decrease_registered_num();
??Authlist_delete_entry_6:
        ; Setup parameters for call to function Set_registered_num
        MOV     DPTR,#gAuthConfig + 4
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_ffffffff
        MOV     R0,#?V0
        LCALL   ?L_ADD_X
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R4,?V2
        MOV     R5,?V3
        LCALL   `??Set_registered_num::?relay`; Banked call to: Set_registered_num
//  248     List_cache_write_back();
        ; Setup parameters for call to function List_cache_write_back
        LCALL   `??List_cache_write_back::?relay`; Banked call to: List_cache_write_back
//  249 }
??Authlist_delete_entry_2:
        MOV     A,#0xa
          CFI EndBlock cfiBlock16
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock17
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function Authlist_delete_entry
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function Authlist_delete_entry
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        SUBB    A,?V9
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0xa
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0xa
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#gListCache & 0xff
        ADD     A,R0
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function Authlist_delete_entry
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function Authlist_delete_entry
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOVX    A,@DPTR
        ORL     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memset
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24
//  250 
//  251 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  252 void Authlist_del(uint8 const* key, uint8 keylen, uint32* index)
Authlist_del:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function Authlist_del
        CODE
//  253 {
        FUNCALL Authlist_del, Authlist_find_by_key
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_del, Authlist_delete_entry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  254     uint32 to_del;
//  255     if(AUTH_LIST_INVALID_INDEX != (to_del = Authlist_find_by_key(key, keylen)))
        ; Setup parameters for call to function Authlist_find_by_key
        MOV     ?V0,R6
        CLR     A
        MOV     ?V1,A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        LCALL   `??Authlist_find_by_key::?relay`; Banked call to: Authlist_find_by_key
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     DPTR,#__Constant_ffffffff
        MOV     R0,#?V0
        LCALL   ?L_EQ_X
        JZ      ??Authlist_del_0
//  256     {
//  257         Authlist_delete_entry(to_del);
        ; Setup parameters for call to function Authlist_delete_entry
        LCALL   `??Authlist_delete_entry::?relay`; Banked call to: Authlist_delete_entry
//  258     }
//  259 }
??Authlist_del_0:
        SJMP    ??Subroutine11_0
          CFI EndBlock cfiBlock25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
          CFI EndBlock cfiBlock26
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 28)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock27
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock28
//  260 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  261 uint8 Authlist_item_cnt( void )
Authlist_item_cnt:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function Authlist_item_cnt
        CODE
//  262 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  263     return gAuthConfig.auth_registered_num;
        MOV     DPTR,#gAuthConfig + 4
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R1,?V0
        SJMP    ??Subroutine11_0
//  264 }
          CFI EndBlock cfiBlock29
//  265 
//  266 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  267 uint32 Authlist_find_by_key(uint8 const * key, uint32 keylen)
Authlist_find_by_key:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function Authlist_find_by_key
        CODE
//  268 {
        FUNCALL Authlist_find_by_key, List_cache_force_load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_find_by_key, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_find_by_key, List_cache_load_next
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  269     uint32 rc = AUTH_LIST_INVALID_INDEX;
//  270     if (keylen != AUTH_LIST_KEY_LEN) return rc;
        MOV     DPTR,#__Constant_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_EQ_X
        JZ      ??Authlist_find_by_key_0
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        MOV     R4,#-0x1
        MOV     R5,#-0x1
        LJMP    ??Authlist_find_by_key_1 & 0xFFFF
//  271     
//  272     List_cache_force_load(0);
??Authlist_find_by_key_0:
        ; Setup parameters for call to function List_cache_force_load
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        LCALL   `??List_cache_force_load::?relay`; Banked call to: List_cache_force_load
//  273     
//  274     do {
//  275         if(AUTH_LIST_INVALID_INDEX != (rc = List_cache_find_by_key(key, keylen)))
??Authlist_find_by_key_2:
        MOV     ?V4,#-0x1
        MOV     ?V5,#-0x1
        MOV     ?V6,#-0x1
        MOV     ?V7,#-0x1
        MOV     ?V8,#0x0
        MOV     ?V9,#0x0
        MOV     ?V10,#0x0
        MOV     ?V11,#0x0
        SJMP    ??Authlist_find_by_key_3
??Authlist_find_by_key_4:
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V8
        LCALL   ?L_ADD_X
??Authlist_find_by_key_3:
        MOV     ?V0,?V8
        MOV     ?V1,?V9
        MOV     ?V2,?V10
        MOV     ?V3,?V11
        MOV     DPTR,#gListOffset
        MOV     R0,#?V0
        LCALL   ?L_ADD_X
        MOV     DPH,#(__Constant_66 >> 8) & 0xff
        MOV     DPL,#__Constant_66 & 0xff
        MOV     R0,#?V0
        LCALL   ?UL_GE_X
        JC      ??Authlist_find_by_key_5
        MOV     DPTR,#gListNum
        MOV     R0,#?V8
        LCALL   ?UL_GE_X
        JC      ??Authlist_find_by_key_5
        MOV     A,?V8
        MOV     B,#0xa
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0xa
        MOV     A,?V9
        LCALL   ??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_6:
        JC      ??Authlist_find_by_key_4
        ; Setup parameters for call to function osal_memcmp
        MOV     ?V1,?V9
        MOV     B,#0xa
        MOV     A,?V1
        MUL     AB
        ADD     A,R2
        MOV     ?V1,A
        MOV     A,#(gListCache + 2) & 0xff
        ADD     A,R0
        MOV     ?V0,A
        MOV     A,#((gListCache + 2) >> 8) & 0xff
        ADDC    A,?V1
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        JZ      ??Authlist_find_by_key_4
        MOV     ?V4,?V8
        MOV     ?V5,?V9
        MOV     ?V6,?V10
        MOV     ?V7,?V11
        MOV     DPTR,#gListOffset
        MOV     R0,#?V4
        LCALL   ?L_ADD_X
//  276         {
//  277             break;
//  278         }
//  279     } while (List_cache_load_next());
        MOV     DPTR,#__Constant_ffffffff
        MOV     R0,#?V4
        LCALL   ?L_EQ_X
        JNZ     ??Authlist_find_by_key_6
??Authlist_find_by_key_5:
        ; Setup parameters for call to function List_cache_load_next
        LCALL   `??List_cache_load_next::?relay`; Banked call to: List_cache_load_next
        MOV     A,R1
        JZ      $+5
        LJMP    ??Authlist_find_by_key_2 & 0xFFFF
//  280     return rc;
??Authlist_find_by_key_6:
        MOV     R2,?V4
        MOV     R3,?V5
        MOV     R4,?V6
        MOV     R5,?V7
??Authlist_find_by_key_1:
        LJMP    ??Subroutine9_0 & 0xFFFF
//  281 }
          CFI EndBlock cfiBlock30
//  282 
//  283 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  284 void Node_auth_uart_msg_process(uint8 port, uint8 cmd0, uint8 cmd1, uint8 const* buf, uint8 len)  //chaokw
Node_auth_uart_msg_process:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function Node_auth_uart_msg_process
        CODE
//  285 {
        FUNCALL Node_auth_uart_msg_process, Mail_uplink_registered_cnt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Authlist_get
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Mail_uplink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Set_registered_num
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Node_auth_wipe
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Mail_uplink_registered_cnt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Authlist_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Mail_uplink_registered_cnt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Authlist_del
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Mail_uplink_registered_cnt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Set_registered_num
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Node_auth_wipe
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Mail_uplink_registered_cnt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Node_auth_uart_msg_process, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV     ?V4,R1
        MOV     ?V6,R2
        MOV     ?V5,R3
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
//  286     if (cmd0 != NODE_AUTH_MSG_DIR_DOWNLINK) return;
        MOV     A,#0x1
        XRL     A,?V6
        JZ      $+5
        LJMP    ??Node_auth_uart_msg_process_0 & 0xFFFF
//  287 
//  288     uint32 idx;
//  289     uint8 i;
//  290     uint8 key[AUTH_LIST_KEY_LEN+2] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>`
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  291     uint8 keylen = AUTH_LIST_KEY_LEN;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x8
        MOVX    @DPTR,A
        MOV     A,#0x31
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
//  292     nodeList_t *nodeSearch;
//  293     uint8 deltype;
//  294 
//  295 
//  296     switch (cmd1) 
        MOV     A,?V5
        ADD     A,#-0x30
        JNZ     $+5
        LJMP    ??Node_auth_uart_msg_process_1 & 0xFFFF
        DEC     A
        JZ      ??Node_auth_uart_msg_process_2
        DEC     A
        JZ      ??Node_auth_uart_msg_process_3
        DEC     A
        JNZ     $+5
        LJMP    ??Node_auth_uart_msg_process_4 & 0xFFFF
        ADD     A,#-0x5
        JNZ     $+5
        LJMP    ??Node_auth_uart_msg_process_5 & 0xFFFF
        ADD     A,#-0x8
        JNZ     $+5
        LJMP    ??Node_auth_uart_msg_process_6 & 0xFFFF
        LJMP    ??Node_auth_uart_msg_process_0 & 0xFFFF
//  297     {
//  298         case NODE_AUTH_MSG_CMD_COUNT: 
//  299             Mail_uplink_registered_cnt(port);
??Node_auth_uart_msg_process_2:
        ; Setup parameters for call to function Mail_uplink_registered_cnt
        LJMP    ??Node_auth_uart_msg_process_7 & 0xFFFF
//  300             break;
//  301         case NODE_AUTH_MSG_CMD_GET:
//  302             if (len != 4) break;
??Node_auth_uart_msg_process_3:
        MOV     A,#0x4
        XRL     A,R1
        JZ      $+5
        LJMP    ??Node_auth_uart_msg_process_0 & 0xFFFF
//  303             for (idx = i = 0; i < sizeof(idx); ++i)
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        LCALL   ??Subroutine12_0 & 0xFFFF
//  304             {
//  305                 idx <<= 8;
??CrossCallReturnLabel_9:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,#0x8
        MOV     R0,#?V0
        LCALL   ?L_SHL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
//  306                 idx |= buf[i];
        MOV     A,R1
        MOV     R4,A
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        CLR     A
        MOV     ?V1,A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_IOR_TO_X
//  307             }
        INC     R1
        MOV     A,R1
        CLR     C
        SUBB    A,#0x4
        JC      ??CrossCallReturnLabel_9
//  308             if (Authlist_get(idx, key, &keylen) > 0)
        ; Setup parameters for call to function Authlist_get
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 53)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R2345
        LCALL   `??Authlist_get::?relay`; Banked call to: Authlist_get
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??Node_auth_uart_msg_process_0 & 0xFFFF
//  309             {
//  310                 for (nodeSearch = nodeList; (nodeSearch != NULL);nodeSearch = nodeSearch->nextDesc)
        MOV     DPTR,#nodeList
        SJMP    ??Node_auth_uart_msg_process_8
//  311                 {
//  312                     if (memcmp(key, &nodeSearch->devAddr64, 8) == 0)
??Node_auth_uart_msg_process_9:
        ; Setup parameters for call to function memcmp
        MOV     ?V0,#0x8
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??memcmp::?relay`   ; Banked call to: memcmp
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??Node_auth_uart_msg_process_10
//  313                     {
//  314 				key[AUTH_LIST_KEY_LEN] = BREAK_UINT16(nodeSearch->devAddr16.addr.shortAddr, 1); 
        MOV     A,R6
        ADD     A,#0xe
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  315 				key[AUTH_LIST_KEY_LEN+1] = BREAK_UINT16(nodeSearch->devAddr16.addr.shortAddr, 0);
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  316                     }	
//  317                 }		
??Node_auth_uart_msg_process_10:
        MOV     DPL,R6
        MOV     DPH,R7
??Node_auth_uart_msg_process_8:
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JNZ     ??Node_auth_uart_msg_process_9
//  318                 Mail_uplink_key(port, idx, key);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R2,#0x0
??Node_auth_uart_msg_process_11:
        MOV     ?V8,?V0
        MOV     ?V9,?V1
        MOV     ?V10,?V2
        MOV     ?V11,?V3
        MOV     A,#0x3
        CLR     C
        SUBB    A,R2
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        MOV     R0,#?V8
        LCALL   ?UL_SHR
        MOV     A,R2
        MOV     R0,A
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,DPH
        MOV     DPH,A
        MOV     A,?V8
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x4
        JC      ??Node_auth_uart_msg_process_11
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R2
        MOV     R2,A
        CLR     A
        ADDC    A,DPH
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        ; Setup parameters for call to function Mail_uplink
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP102_8
        MOV     R3,#0xe
        MOV     R2,#0x32
        MOV     R1,?V4
        LCALL   `??Mail_uplink::?relay`; Banked call to: Mail_uplink
//  319             }				
        SJMP    ??Node_auth_uart_msg_process_0
//  320             break;
//  321         case NODE_AUTH_MSG_CMD_WIPE:
//  322             Set_registered_num(0);
//  323             Node_auth_wipe();
//  324             Mail_uplink_registered_cnt(port);
//  325             break;
//  326         case NODE_AUTH_MSG_CMD_ADD:
//  327             if (Authlist_add(buf, len, &idx) > 0) {
??Node_auth_uart_msg_process_1:
        ; Setup parameters for call to function Authlist_add
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??Authlist_add::?relay`; Banked call to: Authlist_add
        MOV     A,R1
        JZ      ??Node_auth_uart_msg_process_0
//  328                 Mail_uplink_registered_cnt(port);
        ; Setup parameters for call to function Mail_uplink_registered_cnt
        SJMP    ??Node_auth_uart_msg_process_7
//  329             }
//  330             break;
//  331         case NODE_AUTH_MSG_CMD_DEL:
//  332             deltype = *buf++;
??Node_auth_uart_msg_process_4:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  333 	     if (0x01 == deltype)
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??Node_auth_uart_msg_process_12
//  334 	     {
//  335 	     	Authlist_del(buf, len-1, &idx);
        ; Setup parameters for call to function Authlist_del
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        DEC     R1
        LCALL   `??Authlist_del::?relay`; Banked call to: Authlist_del
//  336               Mail_uplink_registered_cnt(port);
        ; Setup parameters for call to function Mail_uplink_registered_cnt
        SJMP    ??Node_auth_uart_msg_process_7
//  337 	     }
//  338 	     else if (0xff == deltype)
??Node_auth_uart_msg_process_12:
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??Node_auth_uart_msg_process_0
//  339 	     {
//  340 	       Set_registered_num(0);
        ; Setup parameters for call to function Set_registered_num
??Node_auth_uart_msg_process_5:
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        LCALL   `??Set_registered_num::?relay`; Banked call to: Set_registered_num
//  341               Node_auth_wipe();
        ; Setup parameters for call to function Node_auth_wipe
        LCALL   `??Node_auth_wipe::?relay`; Banked call to: Node_auth_wipe
//  342               Mail_uplink_registered_cnt(port);
        ; Setup parameters for call to function Mail_uplink_registered_cnt
??Node_auth_uart_msg_process_7:
        MOV     R1,?V4
        LCALL   `??Mail_uplink_registered_cnt::?relay`; Banked call to: Mail_uplink_registered_cnt
        SJMP    ??Node_auth_uart_msg_process_0
//  343 	     }
//  344             break;
//  345         case NODE_AUTH_MSG_CMD_RESET_NET:
//  346             SystemResetSoft();
??Node_auth_uart_msg_process_6:
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  347             break;
//  348         default:
//  349             break;
//  350     }
//  351     return;
??Node_auth_uart_msg_process_0:
        MOV     A,#0x1d
        LJMP    ?Subroutine1 & 0xFFFF
//  352 }
          CFI EndBlock cfiBlock31
//  353 
//  354 /*********************************************************************
//  355  * LOCAL VARIABLES
//  356  */
//  357 
//  358 /*********************************************************************
//  359  * LOCAL FUNCTIONS
//  360  */
//  361 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  362 static void Set_registered_num(uint32 num)
Set_registered_num:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function Set_registered_num
        CODE
//  363 {
        FUNCALL Set_registered_num, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
//  364     gAuthConfig.auth_registered_num = num;
        MOV     DPTR,#gAuthConfig + 4
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
//  365     osal_nv_write(APP_NV_AUTH_GLOBAL_CONFIG, 0, sizeof(gAuthConfig), (void*)&gAuthConfig);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0,#gAuthConfig & 0xff
        MOV     ?V1,#(gAuthConfig >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x8
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        LJMP    ?Subroutine2 & 0xFFFF
//  366 }
          CFI EndBlock cfiBlock32
//  367 
//  368 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  369 static uint16 Mail_uplink(uint8 port, uint8 cmd, uint8 len, void* buf)
Mail_uplink:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function Mail_uplink
        CODE
//  370 {
        FUNCALL Mail_uplink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Mail_uplink, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Mail_uplink, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V3,R1
        MOV     ?V5,R3
//  371     uint8 uartpbuf[20];
//  372     uint16 rc;
//  373     
//  374     if (uartpbuf == NULL || buf == NULL || len == 0)
        MOV     A,R4
        ORL     A,R5
        JZ      ??Mail_uplink_0
        MOV     A,R3
        JNZ     ??Mail_uplink_1
//  375         return 0;
??Mail_uplink_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??Mail_uplink_2
//  376 
//  377     uartpbuf[0] = 0xFE;
??Mail_uplink_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  378     uartpbuf[1] = len;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  379     uartpbuf[2] = NODE_AUTH_MSG_DIR_UPLINK;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  380     uartpbuf[3] = cmd;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  381     osal_memcpy(&uartpbuf[4], buf, len);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,?V5
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  382 
//  383 #ifdef OPEN_FCS
//  384     uartpbuf[len+4] = MT_UartCalcFCS(&uartpbuf[1], len+3);
        MOV     R6,?V5
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     A,#0x3
        ADD     A,R6
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R6
        MOV     DPL,A
        CLR     A
        ADDC    A,DPH
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  385 #else
//  386     uartpbuf[len+4] = DEFAULTFCS;  
//  387 #endif
//  388     rc = HalUARTWrite(port, uartpbuf, len+5);    
//  389     return rc;
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R6
        ADD     A,#0x5
        MOV     R4,A
        CLR     A
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,?V3
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
??Mail_uplink_2:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  390 
//  391 }
          CFI EndBlock cfiBlock33
//  392 
//  393 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  394 static inline uint16 Mail_uplink_registered_cnt(uint8 port)
Mail_uplink_registered_cnt:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function Mail_uplink_registered_cnt
        CODE
//  395 {
        FUNCALL Mail_uplink_registered_cnt, Mail_uplink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  396     uint32 n = Authlist_item_cnt();
//  397     uint32 n_be =
//  398         ((n >> 24) & 0xff) |
//  399         ((n >>  8) & 0xff00) |
//  400         ((n <<  8) & 0xff0000) |
//  401         ((n << 24) & 0xff000000);
        MOV     DPTR,#gAuthConfig + 4
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        CLR     A
        MOV     ?V1,A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     A,#0x18
        MOV     R0,#?V0
        LCALL   ?L_SHL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
//  402     return Mail_uplink(port, NODE_AUTH_MSG_CMD_COUNT, 4, &n_be);
        ; Setup parameters for call to function Mail_uplink
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x4
        MOV     R2,#0x31
        LCALL   `??Mail_uplink::?relay`; Banked call to: Mail_uplink
        LJMP    ?Subroutine2 & 0xFFFF
//  403 }
          CFI EndBlock cfiBlock34
//  404 
//  405 
//  406 static inline uint16 Mail_uplink_key(uint8 port, uint32 index, uint8 const* key)  //chaokw
//  407 {
//  408     uint8 buf[sizeof(index) + AUTH_LIST_KEY_LEN+2];
//  409     uint8 i;
//  410 
//  411     for (i = 0; i < sizeof(index); i++) {
//  412         buf[i] = (uint8)((index >> (8 * (sizeof(index) - i - 1))) & 0xff);
//  413     }
//  414 
//  415     osal_memcpy(&buf[i], key, AUTH_LIST_KEY_LEN+2);
//  416     return Mail_uplink(port, NODE_AUTH_MSG_CMD_GET, sizeof(buf), buf);
//  417 }
//  418 
//  419 
//  420 static inline uint16 Mail_uplink_notify(uint8 port, uint8 const* extended_addr)
//  421 {
//  422     uint8 buf[8];
//  423     osal_memcpy(buf, extended_addr, 8);
//  424     return Mail_uplink(port, NODE_AUTH_MSG_CMD_REFUSE, sizeof(buf), buf);
//  425 }
//  426 
//  427 
//  428 
//  429 static inline void List_cache_recreate( void ) {
//  430     osal_memset(gListCache, 0xff, AUTH_LIST_CACHE_SIZE*sizeof(NodeRegisterEntry));
//  431 }
//  432 
//  433 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  434 static inline void List_cache_load_on_need(uint32 offset) 
List_cache_load_on_need:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function List_cache_load_on_need
        CODE
//  435 {
        FUNCALL List_cache_load_on_need, List_cache_force_load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
//  436     if (!List_cache_contain(offset))
        MOV     DPTR,#gListOffset
        MOV     R0,#?V0
        LCALL   ?UL_GE_X
        JNC     ??List_cache_load_on_need_0
        MOV     DPTR,#gListOffset
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     DPTR,#gListNum
        MOV     R0,#?V4
        LCALL   ?L_ADD_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?UL_GT
        JC      ??List_cache_load_on_need_1
//  437         List_cache_force_load(AUTH_LIST_CACHE_ALIGN(offset));
??List_cache_load_on_need_0:
        ; Setup parameters for call to function List_cache_force_load
        MOV     DPTR,#__Constant_fffffff0
        MOV     R0,#?V0
        LCALL   ?L_AND_X
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R4,?V2
        MOV     R5,?V3
        LCALL   `??List_cache_force_load::?relay`; Banked call to: List_cache_force_load
//  438 }
??List_cache_load_on_need_1:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock35
//  439 
//  440 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  441 static uint32 List_cache_write_back()
List_cache_write_back:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function List_cache_write_back
        CODE
//  442 {
        FUNCALL List_cache_write_back, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  443     return osal_nv_write(
//  444         APP_NV_AUTH_KEY_LIST, 
//  445         gListOffset * sizeof(NodeRegisterEntry), 
//  446         gListNum * sizeof(NodeRegisterEntry), 
//  447         gListCache);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0,#gListCache & 0xff
        MOV     ?V1,#(gListCache >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPTR,#gListNum
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,?V0
        MOV     B,#0xa
        MUL     AB
        MOV     ?V0,A
        MOV     R0,B
        MOV     B,#0xa
        MOV     A,?V1
        MUL     AB
        ADD     A,R0
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPTR,#gListOffset
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,?V0
        MOV     B,#0xa
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,#0xa
        MOV     A,?V1
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     R2,#0x2
        MOV     R3,#0x4
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,R1
        MOV     R2,?V0
        CLR     A
        MOV     R3,A
        MOV     R4,A
        MOV     R5,A
        LJMP    ??Subroutine11_0 & 0xFFFF
//  448 }
          CFI EndBlock cfiBlock36
//  449 
//  450 static inline bool List_cache_contain(uint32 index)
//  451 {
//  452     return (gListCache != NULL) && 
//  453             (index >= gListOffset) && 
//  454             (index < gListOffset + gListNum);
//  455 }
//  456 
//  457 static uint32 List_cache_find_by_key(uint8 const* key, uint8 keylen)
//  458 {
//  459     uint32 idx;
//  460     uint32 rc = AUTH_LIST_INVALID_INDEX;
//  461     if (gListCache == NULL) return rc;
//  462     for (idx = 0; 
//  463          idx + gListOffset < AUTH_LIST_MAX_LEN && idx < gListNum ;
//  464          ++idx)
//  465     {
//  466         if ( !Is_entry_deleted(&gListCache[idx]) &&
//  467              osal_memcmp(key, gListCache[idx].key, keylen) 
//  468            )
//  469         {
//  470             rc = idx + gListOffset;
//  471             break;
//  472         }
//  473     }
//  474     return rc;
//  475 }
//  476 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  477 static bool List_cache_load_next( void )
List_cache_load_next:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function List_cache_load_next
        CODE
//  478 {
        FUNCALL List_cache_load_next, List_cache_force_load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  479     if (gListOffset + gListNum >= AUTH_LIST_MAX_LEN)
        MOV     DPTR,#gListOffset
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#gListNum
        MOV     R0,#?V0
        LCALL   ?L_ADD_X
        MOV     DPH,#(__Constant_66 >> 8) & 0xff
        MOV     DPL,#__Constant_66 & 0xff
        MOV     R0,#?V0
        LCALL   ?UL_GE_X
        JNC     ??List_cache_load_next_0
//  480         return FALSE;
        MOV     R1,#0x0
        SJMP    ??List_cache_load_next_1
//  481     List_cache_force_load(gListOffset + gListNum);
??List_cache_load_next_0:
        ; Setup parameters for call to function List_cache_force_load
        MOV     DPTR,#gListOffset
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#gListNum
        MOV     R0,#?V0
        LCALL   ?L_ADD_X
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R4,?V2
        MOV     R5,?V3
        LCALL   `??List_cache_force_load::?relay`; Banked call to: List_cache_force_load
//  482     return TRUE;
        MOV     R1,#0x1
??List_cache_load_next_1:
        LJMP    ??Subroutine11_0 & 0xFFFF
//  483 }
          CFI EndBlock cfiBlock37
//  484 
//  485 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  486 static void List_cache_force_load(uint32 index) {
List_cache_force_load:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function List_cache_force_load
        CODE
        FUNCALL List_cache_force_load, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL List_cache_force_load, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL List_cache_force_load, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
//  487     gListNum = (
//  488         index + AUTH_LIST_CACHE_SIZE > AUTH_LIST_MAX_LEN ?
//  489         AUTH_LIST_MAX_LEN - index :
//  490         AUTH_LIST_CACHE_SIZE
//  491     );
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     DPTR,#__Constant_10
        MOV     R0,#?V0
        LCALL   ?L_ADD_X
        MOV     DPH,#(__Constant_67 >> 8) & 0xff
        MOV     DPL,#__Constant_67 & 0xff
        MOV     R0,#?V0
        LCALL   ?UL_GE_X
        JNC     ??List_cache_force_load_0
        MOV     ?V0,#0x66
        MOV     ?V1,#0x0
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_SUB
        MOV     DPTR,#gListNum
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
        SJMP    ??List_cache_force_load_1
??List_cache_force_load_0:
        MOV     DPTR,#gListNum
        MOV     A,#0x10
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  492     gListOffset = index;
??List_cache_force_load_1:
        MOV     DPTR,#gListOffset
        MOV     R0,#?V4
        LCALL   ?L_MOV_TO_X
//  493     if ( SUCCESS != osal_nv_read(
//  494             APP_NV_AUTH_KEY_LIST, 
//  495             index * sizeof(NodeRegisterEntry), 
//  496             gListNum * sizeof(NodeRegisterEntry),
//  497             gListCache))
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,#gListCache & 0xff
        MOV     ?V1,#(gListCache >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     DPTR,#gListNum
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,?V0
        MOV     B,#0xa
        MUL     AB
        MOV     ?V0,A
        MOV     R0,B
        MOV     B,#0xa
        MOV     A,?V1
        MUL     AB
        ADD     A,R0
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     B,#0xa
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,#0xa
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     R2,#0x2
        MOV     R3,#0x4
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JZ      ??List_cache_force_load_2
//  498     {
//  499         List_cache_recreate();
        ; Setup parameters for call to function osal_memset
        MOV     R4,#-0x60
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     R2,#gListCache & 0xff
        MOV     R3,#(gListCache >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  500         gListNum = 0;
        MOV     DPTR,#gListNum
        CLR     A
        LCALL   ??Subroutine12_0 & 0xFFFF
//  501         gListOffset = AUTH_LIST_INVALID_INDEX;
??CrossCallReturnLabel_10:
        MOV     DPTR,#gListOffset
        LCALL   ?Subroutine5 & 0xFFFF
//  502     }
??CrossCallReturnLabel_12:
        SJMP    ??List_cache_force_load_3
//  503     else if ( gListNum != AUTH_LIST_CACHE_SIZE ) {
??List_cache_force_load_2:
        MOV     DPTR,#__Constant_10
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#gListNum
        MOV     R0,#?V0
        LCALL   ?L_EQ_X
        JZ      ??List_cache_force_load_3
//  504         osal_memset(&gListCache[gListNum], 0xff, (AUTH_LIST_CACHE_SIZE - gListNum) * sizeof(gListCache[0]));
        ; Setup parameters for call to function osal_memset
        MOV     DPTR,#gListNum
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        CLR     C
        SUBB    A,?V0
        MOV     R4,A
        CLR     A
        SUBB    A,?V1
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0xa
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,#0xa
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     R1,#-0x1
        MOV     DPTR,#gListNum
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,?V0
        MOV     B,#0xa
        MUL     AB
        MOV     ?V0,A
        MOV     R0,B
        MOV     B,#0xa
        MOV     A,?V1
        MUL     AB
        ADD     A,R0
        MOV     ?V1,A
        MOV     A,#gListCache & 0xff
        ADD     A,?V0
        MOV     R2,A
        MOV     A,#(gListCache >> 8) & 0xff
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  505     }
//  506 }
??List_cache_force_load_3:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function Authlist_should_insert
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function List_cache_force_load
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOV     A,#-0x1
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function Node_auth_uart_msg_process
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function List_cache_force_load
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function Authlist_should_insert
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function List_cache_force_load
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46
//  507 
//  508 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  509 static uint8 Authlist_init( uint8 load )
Authlist_init:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function Authlist_init
        CODE
//  510 {
        FUNCALL Authlist_init, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_init, List_cache_force_load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  511     List_cache_recreate();
        ; Setup parameters for call to function osal_memset
        MOV     R4,#-0x60
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     R2,#gListCache & 0xff
        MOV     R3,#(gListCache >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  512     if (load) List_cache_force_load(0);
        MOV     A,R6
        JZ      ??Authlist_init_0
        ; Setup parameters for call to function List_cache_force_load
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        LCALL   `??List_cache_force_load::?relay`; Banked call to: List_cache_force_load
//  513     return SUCCESS;
??Authlist_init_0:
        MOV     R1,#0x0
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  514 }
          CFI EndBlock cfiBlock47
//  515 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  516 bool Authlist_verify_device(uint16 ShortAddress, uint8 *ExtendedAddress,
Authlist_verify_device:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function Authlist_verify_device
        CODE
//  517                                 uint8 CapabilityFlags, uint8 type)
//  518 {
        FUNCALL Authlist_verify_device, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_verify_device, Authlist_find_by_key
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_verify_device, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authlist_verify_device, Mail_uplink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  519     uint8 sig[AUTH_LIST_KEY_LEN];
//  520 	
//  521     osal_memcpy(sig, ExtendedAddress, AUTH_LIST_KEY_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R6
        MOV     ?V1,R7
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  522     if (AUTH_LIST_INVALID_INDEX != 
//  523             Authlist_find_by_key(sig, AUTH_LIST_KEY_LEN))
        MOV     DPTR,#__Constant_ffffffff
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        ; Setup parameters for call to function Authlist_find_by_key
        MOV     DPTR,#__Constant_8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??Authlist_find_by_key::?relay`; Banked call to: Authlist_find_by_key
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        MOV     R0,#?V0
        LCALL   ?L_EQ_X
        JZ      ??Authlist_verify_device_0
//  524         return TRUE;
        MOV     R1,#0x1
        SJMP    ??Authlist_verify_device_1
//  525 
//  526     Mail_uplink_notify(0, ExtendedAddress);
??Authlist_verify_device_0:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R6
        MOV     ?V1,R7
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        ; Setup parameters for call to function Mail_uplink
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x8
        MOV     R2,#0x39
        MOV     R1,#0x0
        LCALL   `??Mail_uplink::?relay`; Banked call to: Mail_uplink
//  527     return FALSE;
        MOV     R1,#0x0
??Authlist_verify_device_1:
        MOV     A,#0x10
        LJMP    ??Subroutine10_0 & 0xFFFF
//  528 }
          CFI EndBlock cfiBlock48

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for gAuthConfig>`:
        DATA32
        DD 1
        DD 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Node_auth_init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Node_auth_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Node_auth_wipe::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Node_auth_wipe

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Authlist_should_insert::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Authlist_should_insert

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Authlist_add::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Authlist_add

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Authlist_get::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Authlist_get

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Authlist_delete_entry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Authlist_delete_entry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Authlist_del::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Authlist_del

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Authlist_item_cnt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Authlist_item_cnt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Authlist_find_by_key::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Authlist_find_by_key

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Node_auth_uart_msg_process::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Node_auth_uart_msg_process

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Set_registered_num::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Set_registered_num

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Mail_uplink::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Mail_uplink

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Mail_uplink_registered_cnt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Mail_uplink_registered_cnt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??List_cache_load_on_need::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    List_cache_load_on_need

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??List_cache_write_back::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    List_cache_write_back

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??List_cache_load_next::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    List_cache_load_next

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??List_cache_force_load::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    List_cache_force_load

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Authlist_init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Authlist_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Authlist_verify_device::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Authlist_verify_device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_66:
        DD 102

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ffffffff:
        DD 4294967295

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_8:
        DD 8

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_fffffff0:
        DD 4294967280

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_10:
        DD 16

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_67:
        DD 103

        END
// 
// 3 074 bytes in segment BANKED_CODE
//   114 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//     8 bytes in segment XDATA_I
//     8 bytes in segment XDATA_ID
//    42 bytes in segment XDATA_ROM_C
//   168 bytes in segment XDATA_Z
// 
// 3 196 bytes of CODE  memory
//    10 bytes of CONST memory (+ 32 bytes shared)
//     0 bytes of DATA  memory (+  2 bytes shared)
//   176 bytes of XDATA memory
//
//Errors: none
//Warnings: none
