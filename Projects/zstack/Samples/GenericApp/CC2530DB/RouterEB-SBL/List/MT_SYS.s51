///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               21/Apr/2017  13:46:06
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\mt\MT_SYS.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0100
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\mt\MT_SYS.c" -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC
//        -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE -D NV_INIT -D
//        OPEN_FCS -D PANID_INCREASE -D MAKE_CRC_SHDW -lC "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List"
//        -lA "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB-SBL\List\MT_SYS.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_SYS

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V3
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_DIV_MOD
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8

        PUBLIC `??MT_SysAdcRead::?relay`
        FUNCTION `??MT_SysAdcRead::?relay`,0203H
        PUBLIC `??MT_SysBroadCastTransfer::?relay`
        FUNCTION `??MT_SysBroadCastTransfer::?relay`,0203H
        PUBLIC `??MT_SysCommandProcessing::?relay`
        FUNCTION `??MT_SysCommandProcessing::?relay`,0203H
        PUBLIC `??MT_SysGetExtAddr::?relay`
        FUNCTION `??MT_SysGetExtAddr::?relay`,0203H
        PUBLIC `??MT_SysGetUtcTime::?relay`
        FUNCTION `??MT_SysGetUtcTime::?relay`,0203H
        PUBLIC `??MT_SysGpio::?relay`
        FUNCTION `??MT_SysGpio::?relay`,0203H
        PUBLIC `??MT_SysGroupTransfer::?relay`
        FUNCTION `??MT_SysGroupTransfer::?relay`,0203H
        PUBLIC `??MT_SysOsalNVDelete::?relay`
        FUNCTION `??MT_SysOsalNVDelete::?relay`,0203H
        PUBLIC `??MT_SysOsalNVItemInit::?relay`
        FUNCTION `??MT_SysOsalNVItemInit::?relay`,0203H
        PUBLIC `??MT_SysOsalNVLength::?relay`
        FUNCTION `??MT_SysOsalNVLength::?relay`,0203H
        PUBLIC `??MT_SysOsalNVRead::?relay`
        FUNCTION `??MT_SysOsalNVRead::?relay`,0203H
        PUBLIC `??MT_SysOsalNVWrite::?relay`
        FUNCTION `??MT_SysOsalNVWrite::?relay`,0203H
        PUBLIC `??MT_SysOsalStartTimer::?relay`
        FUNCTION `??MT_SysOsalStartTimer::?relay`,0203H
        PUBLIC `??MT_SysOsalStopTimer::?relay`
        FUNCTION `??MT_SysOsalStopTimer::?relay`,0203H
        PUBLIC `??MT_SysOsalTimerExpired::?relay`
        FUNCTION `??MT_SysOsalTimerExpired::?relay`,0203H
        PUBLIC `??MT_SysP2PTransfer::?relay`
        FUNCTION `??MT_SysP2PTransfer::?relay`,0203H
        PUBLIC `??MT_SysPing::?relay`
        FUNCTION `??MT_SysPing::?relay`,0203H
        FUNCTION `??MT_SysPkgSendMsg::?relay`,0203H
        PUBLIC `??MT_SysRandom::?relay`
        FUNCTION `??MT_SysRandom::?relay`,0203H
        PUBLIC `??MT_SysReset::?relay`
        FUNCTION `??MT_SysReset::?relay`,0203H
        PUBLIC `??MT_SysResetInd::?relay`
        FUNCTION `??MT_SysResetInd::?relay`,0203H
        PUBLIC `??MT_SysSetExtAddr::?relay`
        FUNCTION `??MT_SysSetExtAddr::?relay`,0203H
        PUBLIC `??MT_SysSetTxPower::?relay`
        FUNCTION `??MT_SysSetTxPower::?relay`,0203H
        PUBLIC `??MT_SysSetUtcTime::?relay`
        FUNCTION `??MT_SysSetUtcTime::?relay`,0203H
        PUBLIC `??MT_SysStackTune::?relay`
        FUNCTION `??MT_SysStackTune::?relay`,0203H
        PUBLIC `??MT_SysVersion::?relay`
        FUNCTION `??MT_SysVersion::?relay`,0203H
        PUBLIC `??powerOffSoc::?relay`
        FUNCTION `??powerOffSoc::?relay`,0203H
        PUBLIC MT_SysAdcRead
        FUNCTION MT_SysAdcRead,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_SysBroadCastTransfer
        FUNCTION MT_SysBroadCastTransfer,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC MT_SysCommandProcessing
        FUNCTION MT_SysCommandProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC MT_SysGetExtAddr
        FUNCTION MT_SysGetExtAddr,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC MT_SysGetUtcTime
        FUNCTION MT_SysGetUtcTime,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC MT_SysGpio
        FUNCTION MT_SysGpio,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_SysGroupTransfer
        FUNCTION MT_SysGroupTransfer,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC MT_SysOsalEventId
        PUBLIC MT_SysOsalNVDelete
        FUNCTION MT_SysOsalNVDelete,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysOsalNVItemInit
        FUNCTION MT_SysOsalNVItemInit,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC MT_SysOsalNVLength
        FUNCTION MT_SysOsalNVLength,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_SysOsalNVRead
        FUNCTION MT_SysOsalNVRead,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC MT_SysOsalNVWrite
        FUNCTION MT_SysOsalNVWrite,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC MT_SysOsalStartTimer
        FUNCTION MT_SysOsalStartTimer,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC MT_SysOsalStopTimer
        FUNCTION MT_SysOsalStopTimer,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysOsalTimerExpired
        FUNCTION MT_SysOsalTimerExpired,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysP2PTransfer
        FUNCTION MT_SysP2PTransfer,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC MT_SysPing
        FUNCTION MT_SysPing,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        FUNCTION MT_SysPkgSendMsg,0a1203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC MT_SysRandom
        FUNCTION MT_SysRandom,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_SysReset
        FUNCTION MT_SysReset,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MT_SysResetInd
        FUNCTION MT_SysResetInd,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MT_SysSetExtAddr
        FUNCTION MT_SysSetExtAddr,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC MT_SysSetTxPower
        FUNCTION MT_SysSetTxPower,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC MT_SysSetUtcTime
        FUNCTION MT_SysSetUtcTime,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC MT_SysStackTune
        FUNCTION MT_SysStackTune,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysVersion
        FUNCTION MT_SysVersion,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBLIC powerOffSoc
        FUNCTION powerOffSoc,0203H
        ARGFRAME XSTACK, 0, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalAdcRead          SYMBOL "HalAdcRead"
`??HalAdcRead::?relay` SYMBOL "?relay", HalAdcRead
MAC_MlmeSetReq      SYMBOL "MAC_MlmeSetReq"
`??MAC_MlmeSetReq::?relay` SYMBOL "?relay", MAC_MlmeSetReq
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
`??MT_BuildAndSendZToolResponse::?relay` SYMBOL "?relay", MT_BuildAndSendZToolResponse
Node_auth_uart_msg_process SYMBOL "Node_auth_uart_msg_process"
`??Node_auth_uart_msg_process::?relay` SYMBOL "?relay", Node_auth_uart_msg_process
Onboard_rand        SYMBOL "Onboard_rand"
`??Onboard_rand::?relay` SYMBOL "?relay", Onboard_rand
ZMacGetReq          SYMBOL "ZMacGetReq"
`??ZMacGetReq::?relay` SYMBOL "?relay", ZMacGetReq
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
macRadioSetTxPower  SYMBOL "macRadioSetTxPower"
`??macRadioSetTxPower::?relay` SYMBOL "?relay", macRadioSetTxPower
osal_ConvertUTCSecs SYMBOL "osal_ConvertUTCSecs"
`??osal_ConvertUTCSecs::?relay` SYMBOL "?relay", osal_ConvertUTCSecs
osal_ConvertUTCTime SYMBOL "osal_ConvertUTCTime"
`??osal_ConvertUTCTime::?relay` SYMBOL "?relay", osal_ConvertUTCTime
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
`??osal_build_uint32::?relay` SYMBOL "?relay", osal_build_uint32
osal_getClock       SYMBOL "osal_getClock"
`??osal_getClock::?relay` SYMBOL "?relay", osal_getClock
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_delete      SYMBOL "osal_nv_delete"
`??osal_nv_delete::?relay` SYMBOL "?relay", osal_nv_delete
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_setClock       SYMBOL "osal_setClock"
`??osal_setClock::?relay` SYMBOL "?relay", osal_setClock
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zgSetItem           SYMBOL "zgSetItem"
`??zgSetItem::?relay` SYMBOL "?relay", zgSetItem
MT_SysAdcRead       SYMBOL "MT_SysAdcRead"
`??MT_SysAdcRead::?relay` SYMBOL "?relay", MT_SysAdcRead
MT_SysBroadCastTransfer SYMBOL "MT_SysBroadCastTransfer"
`??MT_SysBroadCastTransfer::?relay` SYMBOL "?relay", MT_SysBroadCastTransfer
MT_SysCommandProcessing SYMBOL "MT_SysCommandProcessing"
`??MT_SysCommandProcessing::?relay` SYMBOL "?relay", MT_SysCommandProcessing
MT_SysGetExtAddr    SYMBOL "MT_SysGetExtAddr"
`??MT_SysGetExtAddr::?relay` SYMBOL "?relay", MT_SysGetExtAddr
MT_SysGetUtcTime    SYMBOL "MT_SysGetUtcTime"
`??MT_SysGetUtcTime::?relay` SYMBOL "?relay", MT_SysGetUtcTime
MT_SysGpio          SYMBOL "MT_SysGpio"
`??MT_SysGpio::?relay` SYMBOL "?relay", MT_SysGpio
MT_SysGroupTransfer SYMBOL "MT_SysGroupTransfer"
`??MT_SysGroupTransfer::?relay` SYMBOL "?relay", MT_SysGroupTransfer
MT_SysOsalNVDelete  SYMBOL "MT_SysOsalNVDelete"
`??MT_SysOsalNVDelete::?relay` SYMBOL "?relay", MT_SysOsalNVDelete
MT_SysOsalNVItemInit SYMBOL "MT_SysOsalNVItemInit"
`??MT_SysOsalNVItemInit::?relay` SYMBOL "?relay", MT_SysOsalNVItemInit
MT_SysOsalNVLength  SYMBOL "MT_SysOsalNVLength"
`??MT_SysOsalNVLength::?relay` SYMBOL "?relay", MT_SysOsalNVLength
MT_SysOsalNVRead    SYMBOL "MT_SysOsalNVRead"
`??MT_SysOsalNVRead::?relay` SYMBOL "?relay", MT_SysOsalNVRead
MT_SysOsalNVWrite   SYMBOL "MT_SysOsalNVWrite"
`??MT_SysOsalNVWrite::?relay` SYMBOL "?relay", MT_SysOsalNVWrite
MT_SysOsalStartTimer SYMBOL "MT_SysOsalStartTimer"
`??MT_SysOsalStartTimer::?relay` SYMBOL "?relay", MT_SysOsalStartTimer
MT_SysOsalStopTimer SYMBOL "MT_SysOsalStopTimer"
`??MT_SysOsalStopTimer::?relay` SYMBOL "?relay", MT_SysOsalStopTimer
MT_SysOsalTimerExpired SYMBOL "MT_SysOsalTimerExpired"
`??MT_SysOsalTimerExpired::?relay` SYMBOL "?relay", MT_SysOsalTimerExpired
MT_SysP2PTransfer   SYMBOL "MT_SysP2PTransfer"
`??MT_SysP2PTransfer::?relay` SYMBOL "?relay", MT_SysP2PTransfer
MT_SysPing          SYMBOL "MT_SysPing"
`??MT_SysPing::?relay` SYMBOL "?relay", MT_SysPing
MT_SysRandom        SYMBOL "MT_SysRandom"
`??MT_SysRandom::?relay` SYMBOL "?relay", MT_SysRandom
MT_SysReset         SYMBOL "MT_SysReset"
`??MT_SysReset::?relay` SYMBOL "?relay", MT_SysReset
MT_SysResetInd      SYMBOL "MT_SysResetInd"
`??MT_SysResetInd::?relay` SYMBOL "?relay", MT_SysResetInd
MT_SysSetExtAddr    SYMBOL "MT_SysSetExtAddr"
`??MT_SysSetExtAddr::?relay` SYMBOL "?relay", MT_SysSetExtAddr
MT_SysSetTxPower    SYMBOL "MT_SysSetTxPower"
`??MT_SysSetTxPower::?relay` SYMBOL "?relay", MT_SysSetTxPower
MT_SysSetUtcTime    SYMBOL "MT_SysSetUtcTime"
`??MT_SysSetUtcTime::?relay` SYMBOL "?relay", MT_SysSetUtcTime
MT_SysStackTune     SYMBOL "MT_SysStackTune"
`??MT_SysStackTune::?relay` SYMBOL "?relay", MT_SysStackTune
MT_SysVersion       SYMBOL "MT_SysVersion"
`??MT_SysVersion::?relay` SYMBOL "?relay", MT_SysVersion
powerOffSoc         SYMBOL "powerOffSoc"
`??powerOffSoc::?relay` SYMBOL "?relay", powerOffSoc

        EXTERN `??HalAdcRead::?relay`
        FUNCTION `??HalAdcRead::?relay`,00H
        EXTERN `??MAC_MlmeSetReq::?relay`
        FUNCTION `??MAC_MlmeSetReq::?relay`,00H
        EXTERN `??MT_BuildAndSendZToolResponse::?relay`
        FUNCTION `??MT_BuildAndSendZToolResponse::?relay`,00H
        EXTERN `??Node_auth_uart_msg_process::?relay`
        FUNCTION `??Node_auth_uart_msg_process::?relay`,00H
        EXTERN `??Onboard_rand::?relay`
        FUNCTION `??Onboard_rand::?relay`,00H
        EXTERN `??ZMacGetReq::?relay`
        FUNCTION `??ZMacGetReq::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??macRadioSetTxPower::?relay`
        FUNCTION `??macRadioSetTxPower::?relay`,00H
        EXTERN `??osal_ConvertUTCSecs::?relay`
        FUNCTION `??osal_ConvertUTCSecs::?relay`,00H
        EXTERN `??osal_ConvertUTCTime::?relay`
        FUNCTION `??osal_ConvertUTCTime::?relay`,00H
        EXTERN `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_build_uint32::?relay`
        FUNCTION `??osal_build_uint32::?relay`,00H
        EXTERN `??osal_getClock::?relay`
        FUNCTION `??osal_getClock::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_delete::?relay`
        FUNCTION `??osal_nv_delete::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_setClock::?relay`
        FUNCTION `??osal_setClock::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zgSetItem::?relay`
        FUNCTION `??zgSetItem::?relay`,00H
        EXTERN GenericApp_TaskID
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeSetReq
        FUNCTION MAC_MlmeSetReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MTVersionString
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_TaskID
        EXTERN Node_auth_uart_msg_process
        FUNCTION Node_auth_uart_msg_process,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_rand
        FUNCTION Onboard_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRadioSetTxPower
        FUNCTION macRadioSetTxPower,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_ConvertUTCSecs
        FUNCTION osal_ConvertUTCSecs,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_ConvertUTCTime
        FUNCTION osal_ConvertUTCTime,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_getClock
        FUNCTION osal_getClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_delete
        FUNCTION osal_nv_delete,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_setClock
        FUNCTION osal_setClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgSetItem
        FUNCTION zgSetItem,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\mt\MT_SYS.c
//    1 /******************************************************************************
//    2   Filename:       MT_SYS.c
//    3   Revised:        $Date: 2014-08-04 15:38:03 -0700 (Mon, 04 Aug 2014) $
//    4   Revision:       $Revision: 39653 $
//    5 
//    6   Description:   MonitorTest functions for SYS commands.
//    7 
//    8   Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  *****************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 #include "MT.h"
//   45 #include "MT_SYS.h"
//   46 #include "MT_VERSION.h"
//   47 #include "OSAL.h"
//   48 #include "OSAL_NV.h"
//   49 #include "Onboard.h"  /* This is here because RAM read/write macros need it */

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1
//   50 #include "hal_adc.h"
//   51 #include "OSAL_Clock.h"
//   52 #include "mac_low_level.h"
//   53 #include "ZMAC.h"
//   54 #include "mac_radio_defs.h"
//   55 #if defined ( MT_SYS_JAMMER_FEATURE )
//   56   #include "mac_rx.h"
//   57 #endif
//   58 #if !defined(CC253X_MACNP)
//   59   #include "ZGlobals.h"
//   60 #endif
//   61 #if (defined INCLUDE_REVISION_INFORMATION) && ((defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)) //built for bootloader
//   62   #include "hal_flash.h"
//   63   #include "sb_shared.h"
//   64 #endif
//   65 #include "ZDiags.h"
//   66 #include "MT_UART.h"
//   67 //chaokw
//   68 #include "AF.h"
//   69 #include "GenericApp.h"
//   70 #include "NodeAuth.h"
//   71 #include "ZDSecMgr.h"
//   72 
//   73 
//   74 /***************************************************************************************************
//   75  * MACROS
//   76  ***************************************************************************************************/
//   77 
//   78 /* Max possible MT response length, limited by TX buffer size and sizeof uint8 */
//   79 #define MT_MAX_RSP_LEN  ( MIN( MT_UART_DEFAULT_MAX_TX_BUFF, 255 ) )
//   80 
//   81 /* Max possible MT response data length, MT protocol overhead */
//   82 #define MT_MAX_RSP_DATA_LEN  ( (MT_MAX_RSP_LEN - 1) - SPI_0DATA_MSG_LEN )
//   83   
//   84 #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
//   85 
//   86 #if !defined HAL_GPIO || !HAL_GPIO
//   87 #define GPIO_DIR_IN(IDX)
//   88 #define GPIO_DIR_OUT(IDX)
//   89 #define GPIO_TRI(IDX)
//   90 #define GPIO_PULL_UP(IDX)
//   91 #define GPIO_PULL_DN(IDX)
//   92 #define GPIO_SET(IDX)
//   93 #define GPIO_CLR(IDX)
//   94 #define GPIO_TOG(IDX)
//   95 #define GPIO_GET(IDX) 0
//   96 #define GPIO_HiD_SET() (val = 0)
//   97 #define GPIO_HiD_CLR() (val = 0)
//   98 #endif
//   99 
//  100 #if defined ( MT_SYS_SNIFFER_FEATURE )
//  101 #if defined ( HAL_MCU_CC2530 ) && !defined ( HAL_BOARD_CC2530USB )
//  102   // This only work with the CC253x chips
//  103   #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() st         \ 
//  104   (                                                                                                                                                                                                                                   \ 
//  105     OBSSEL3 = 0xFD;                                        \ 
//  106     OBSSEL4 = 0xFC;                                        \ 
//  107     RFC_OBS_CTRL1 = 0x09; /* 9 - sniff clk */              \ 
//  108     RFC_OBS_CTRL2 = 0x08; /* 8 - sniff data */             \ 
//  109     MDMTEST1 |= 0x04;                                      \ 
//  110   )
//  111 
//  112   // This only work with the CC253x chips
//  113   #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() st        \ 
//  114   (                                                                                                                                                                                                                                   \ 
//  115     OBSSEL3 &= ~0x80;                                                                                                                                                                             \ 
//  116     OBSSEL4 &= ~0x80;                                                                                                                                                                             \ 
//  117     RFC_OBS_CTRL1 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[1] */                                                                                   \ 
//  118     RFC_OBS_CTRL2 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[2] */                                                                                   \ 
//  119     MDMTEST1 &= ~0x04;                                                                                                                                                         \ 
//  120   )
//  121 #else
//  122   #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
//  123   #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
//  124 #endif
//  125 #endif // MT_SYS_SNIFFER_FEATURE
//  126 
//  127 #define RESET_HARD     0
//  128 #define RESET_SOFT     1
//  129 #define RESET_SHUTDOWN 2
//  130 
//  131 /***************************************************************************************************
//  132  * CONSTANTS
//  133  ***************************************************************************************************/
//  134 
//  135 #if !defined MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
//  136 #define MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA  FALSE
//  137 #endif
//  138 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  139 const uint16 MT_SysOsalEventId [] = {
MT_SysOsalEventId:
        DATA16
        DW 2048
        DW 1024
        DW 512
        DW 256
//  140                                       MT_SYS_OSAL_EVENT_0,
//  141                                       MT_SYS_OSAL_EVENT_1,
//  142                                       MT_SYS_OSAL_EVENT_2,
//  143                                       MT_SYS_OSAL_EVENT_3
//  144                                     };
//  145 
//  146 typedef enum {
//  147   GPIO_DIR,
//  148   GPIO_TRI,
//  149   GPIO_SET,
//  150   GPIO_CLR,
//  151   GPIO_TOG,
//  152   GPIO_GET,
//  153   GPIO_HiD = 0x12
//  154 } GPIO_Op_t;
//  155 
//  156 #if defined ( MT_SYS_JAMMER_FEATURE )
//  157   #define JAMMER_CHECK_EVT                           0x0001
//  158 
//  159   #if !defined ( JAMMER_DETECT_CONTINUOUS_EVENTS )
//  160     #define JAMMER_DETECT_CONTINUOUS_EVENTS          150
//  161   #endif
//  162   #if !defined ( JAMMER_DETECT_PERIOD_TIME )
//  163     #define JAMMER_DETECT_PERIOD_TIME                100  // In milliseconds
//  164   #endif
//  165   #if !defined ( JAMMER_HIGH_NOISE_LEVEL )
//  166     #define JAMMER_HIGH_NOISE_LEVEL                  -65
//  167   #endif
//  168 #endif // MT_SYS_JAMMER_FEATURE
//  169 
//  170 /***************************************************************************************************
//  171  * LOCAL VARIABLES
//  172  ***************************************************************************************************/
//  173 #if defined ( MT_SYS_JAMMER_FEATURE )
//  174   static uint8 jammerTaskID;
//  175   static uint16 jammerContinuousEvents = JAMMER_DETECT_CONTINUOUS_EVENTS;
//  176   static uint16 jammerDetections = JAMMER_DETECT_CONTINUOUS_EVENTS;
//  177   static int8 jammerHighNoiseLevel = JAMMER_HIGH_NOISE_LEVEL;
//  178   static uint32 jammerDetectPeriodTime = JAMMER_DETECT_PERIOD_TIME;
//  179 #endif 
//  180   
//  181 #if defined ( MT_SYS_SNIFFER_FEATURE )
//  182 static uint8 sniffer = FALSE;
//  183 #endif
//  184 
//  185 /***************************************************************************************************
//  186  * LOCAL FUNCTIONS
//  187  ***************************************************************************************************/
//  188 #if defined (MT_SYS_FUNC)
//  189 void MT_SysReset(uint8 *pBuf);
//  190 void MT_SysPing(void);
//  191 void MT_SysVersion(void);
//  192 void MT_SysSetExtAddr(uint8 *pBuf);
//  193 void MT_SysGetExtAddr(void);
//  194 void MT_SysOsalNVItemInit(uint8 *pBuf);
//  195 void MT_SysOsalNVDelete(uint8 *pBuf);
//  196 void MT_SysOsalNVLength(uint8 *pBuf);
//  197 void MT_SysOsalNVRead(uint8 *pBuf);
//  198 void MT_SysOsalNVWrite(uint8 *pBuf);
//  199 void MT_SysOsalStartTimer(uint8 *pBuf);
//  200 void MT_SysOsalStopTimer(uint8 *pBuf);
//  201 void MT_SysRandom(void);
//  202 void MT_SysAdcRead(uint8 *pBuf);
//  203 void MT_SysGpio(uint8 *pBuf);
//  204 void MT_SysStackTune(uint8 *pBuf);
//  205 void MT_SysSetUtcTime(uint8 *pBuf);
//  206 void MT_SysGetUtcTime(void);
//  207 void MT_SysSetTxPower(uint8 *pBuf);
//  208 #if defined ( MT_SYS_JAMMER_FEATURE )
//  209   void MT_SysJammerParameters( uint8 *pBuf );
//  210 #endif /* MT_SYS_JAMMER_FEATURE */
//  211 #if defined ( MT_SYS_SNIFFER_FEATURE )
//  212 void MT_SysSnifferParameters( uint8 *pBuf );
//  213 #endif /* MT_SYS_SNIFFER_FEATURE */
//  214 #if defined ( FEATURE_SYSTEM_STATS )
//  215 void MT_SysZDiagsInitStats(void);
//  216 void MT_SysZDiagsClearStats(uint8 *pBuf);
//  217 void MT_SysZDiagsGetStatsAttr(uint8 *pBuf);
//  218 void MT_SysZDiagsRestoreStatsFromNV(void);
//  219 void MT_SysZDiagsSaveStatsToNV(void);
//  220 #endif /* FEATURE_SYSTEM_STATS */
//  221 #endif /* MT_SYS_FUNC */
//  222 void powerOffSoc(void);
//  223 //chaokw
//  224 void MT_SysP2PTransfer(uint8 *pBuf);
//  225 void MT_SysGroupTransfer(uint8 *pBuf);
//  226 void MT_SysBroadCastTransfer(uint8 *pBuf);
//  227 
//  228 static void MT_SysPkgSendMsg( byte taskID, uint8 event, uint8 *pBuf, uint8 len, uint8 offset );
//  229 static void MT_SysChannelUpdate( uint8 *pBuf );
//  230 static void MT_SysMACReq( uint8 *pBuf );
//  231 static void MT_SysNWKInfoReq( uint8 *pBuf );
//  232 static void MT_SysActiveCntReq( uint8 *pBuf );
//  233 static void MT_SysGetFWVersionReq( uint8 *pBuf );
//  234 static void MT_SysFWUpdateReq( uint8 *pBuf );
//  235 static void MT_SysMultiwaySetReq( uint8 *pBuf );
//  236 static void MT_SysMultiwaySendReq( uint8 *pBuf );
//  237 
//  238 
//  239 #if defined (MT_SYS_FUNC)
//  240 /***************************************************************************************************
//  241  * @fn      MT_SysProcessing
//  242  *
//  243  * @brief   Process all the SYS commands that are issued by test tool
//  244  *
//  245  * @param   pBuf - pointer to the msg buffer
//  246  *
//  247  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  248  *          |  1   |   1   |   1   |  0-255 |
//  249  *
//  250  * @return  status
//  251  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  252 uint8 MT_SysCommandProcessing(uint8 *pBuf)
MT_SysCommandProcessing:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
        CODE
//  253 {
        FUNCALL MT_SysCommandProcessing, MT_SysReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysPing
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysVersion
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysSetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVDelete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVItemInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalStartTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalStopTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysRandom
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGpio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysStackTune
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysSetUtcTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGetUtcTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysSetTxPower
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysP2PTransfer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGroupTransfer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysBroadCastTransfer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysPkgSendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysPkgSendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGroupTransfer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, Node_auth_uart_msg_process
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  254   uint8 status = MT_RPC_SUCCESS;
        MOV     ?V2,#0x0
//  255 
//  256   switch (pBuf[MT_RPC_POS_CMD1])
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_0 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_1 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_2 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_3 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_4 & 0xFFFF
        ADD     A,#-0x3
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_5 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_6 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_7 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_8 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_9 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_10 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_11 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_12 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_13 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_14 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_15 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_16 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_17 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_18 & 0xFFFF
        ADD     A,#-0x8
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_6 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_7 & 0xFFFF
        ADD     A,#-0x3
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_19 & 0xFFFF
        ADD     A,#-0x2
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_20 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_21 & 0xFFFF
        ADD     A,#-0xd
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_23 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_24 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_25 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_26 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
        ADD     A,#-0x8
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_27 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_28 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_20 & 0xFFFF
        ADD     A,#-0x4d
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_29 & 0xFFFF
        LJMP    ??MT_SysCommandProcessing_30 & 0xFFFF
//  257   {
//  258     case MT_SYS_RESET_REQ:
//  259       MT_SysReset(pBuf);
??MT_SysCommandProcessing_0:
        ; Setup parameters for call to function MT_SysReset
        LCALL   `??MT_SysReset::?relay`; Banked call to: MT_SysReset
//  260       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  261 
//  262     case MT_SYS_PING:
//  263       MT_SysPing();
??MT_SysCommandProcessing_1:
        ; Setup parameters for call to function MT_SysPing
        LCALL   `??MT_SysPing::?relay`; Banked call to: MT_SysPing
//  264       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  265 
//  266     case MT_SYS_VERSION:
//  267       MT_SysVersion();
??MT_SysCommandProcessing_2:
        ; Setup parameters for call to function MT_SysVersion
        LCALL   `??MT_SysVersion::?relay`; Banked call to: MT_SysVersion
//  268       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  269 
//  270     case MT_SYS_SET_EXTADDR:
//  271       MT_SysSetExtAddr(pBuf);
??MT_SysCommandProcessing_3:
        ; Setup parameters for call to function MT_SysSetExtAddr
        LCALL   `??MT_SysSetExtAddr::?relay`; Banked call to: MT_SysSetExtAddr
//  272       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  273 
//  274     case MT_SYS_GET_EXTADDR:
//  275       MT_SysGetExtAddr();
??MT_SysCommandProcessing_4:
        ; Setup parameters for call to function MT_SysGetExtAddr
        LCALL   `??MT_SysGetExtAddr::?relay`; Banked call to: MT_SysGetExtAddr
//  276       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  277 
//  278 // CC253X MAC Network Processor does not have NV support
//  279 #if !defined(CC253X_MACNP)
//  280     case MT_SYS_OSAL_NV_DELETE:
//  281       MT_SysOsalNVDelete(pBuf);
??MT_SysCommandProcessing_16:
        ; Setup parameters for call to function MT_SysOsalNVDelete
        LCALL   `??MT_SysOsalNVDelete::?relay`; Banked call to: MT_SysOsalNVDelete
//  282       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  283 
//  284     case MT_SYS_OSAL_NV_ITEM_INIT:
//  285       MT_SysOsalNVItemInit(pBuf);
??MT_SysCommandProcessing_5:
        ; Setup parameters for call to function MT_SysOsalNVItemInit
        LCALL   `??MT_SysOsalNVItemInit::?relay`; Banked call to: MT_SysOsalNVItemInit
//  286       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  287 
//  288     case MT_SYS_OSAL_NV_LENGTH:
//  289       MT_SysOsalNVLength(pBuf);
??MT_SysCommandProcessing_17:
        ; Setup parameters for call to function MT_SysOsalNVLength
        LCALL   `??MT_SysOsalNVLength::?relay`; Banked call to: MT_SysOsalNVLength
//  290       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  291 
//  292     case MT_SYS_OSAL_NV_READ:
//  293       MT_SysOsalNVRead(pBuf);
//  294       break;
//  295 
//  296     case MT_SYS_OSAL_NV_WRITE:
//  297       MT_SysOsalNVWrite(pBuf);
//  298       break;
//  299 
//  300     case MT_SYS_OSAL_NV_READ_EXT:
//  301       MT_SysOsalNVRead(pBuf);
??MT_SysCommandProcessing_6:
        ; Setup parameters for call to function MT_SysOsalNVRead
        LCALL   `??MT_SysOsalNVRead::?relay`; Banked call to: MT_SysOsalNVRead
//  302       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  303       
//  304     case MT_SYS_OSAL_NV_WRITE_EXT:
//  305       MT_SysOsalNVWrite(pBuf);
??MT_SysCommandProcessing_7:
        ; Setup parameters for call to function MT_SysOsalNVWrite
        LCALL   `??MT_SysOsalNVWrite::?relay`; Banked call to: MT_SysOsalNVWrite
//  306       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  307 #endif
//  308 
//  309     case MT_SYS_OSAL_START_TIMER:
//  310       MT_SysOsalStartTimer(pBuf);
??MT_SysCommandProcessing_8:
        ; Setup parameters for call to function MT_SysOsalStartTimer
        LCALL   `??MT_SysOsalStartTimer::?relay`; Banked call to: MT_SysOsalStartTimer
//  311       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  312 
//  313     case MT_SYS_OSAL_STOP_TIMER:
//  314       MT_SysOsalStopTimer(pBuf);
??MT_SysCommandProcessing_9:
        ; Setup parameters for call to function MT_SysOsalStopTimer
        LCALL   `??MT_SysOsalStopTimer::?relay`; Banked call to: MT_SysOsalStopTimer
//  315       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  316 
//  317     case MT_SYS_RANDOM:
//  318       MT_SysRandom();
??MT_SysCommandProcessing_10:
        ; Setup parameters for call to function MT_SysRandom
        LCALL   `??MT_SysRandom::?relay`; Banked call to: MT_SysRandom
//  319       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  320 
//  321     case MT_SYS_ADC_READ:
//  322       MT_SysAdcRead(pBuf);
??MT_SysCommandProcessing_11:
        ; Setup parameters for call to function MT_SysAdcRead
        LCALL   `??MT_SysAdcRead::?relay`; Banked call to: MT_SysAdcRead
//  323       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  324 
//  325     case MT_SYS_GPIO:
//  326       MT_SysGpio(pBuf);
??MT_SysCommandProcessing_12:
        ; Setup parameters for call to function MT_SysGpio
        LCALL   `??MT_SysGpio::?relay`; Banked call to: MT_SysGpio
//  327       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  328 
//  329     case MT_SYS_STACK_TUNE:
//  330       MT_SysStackTune(pBuf);
??MT_SysCommandProcessing_13:
        ; Setup parameters for call to function MT_SysStackTune
        LCALL   `??MT_SysStackTune::?relay`; Banked call to: MT_SysStackTune
//  331       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  332 
//  333     case MT_SYS_SET_TIME:
//  334       MT_SysSetUtcTime(pBuf);
??MT_SysCommandProcessing_14:
        ; Setup parameters for call to function MT_SysSetUtcTime
        LCALL   `??MT_SysSetUtcTime::?relay`; Banked call to: MT_SysSetUtcTime
//  335       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  336 
//  337     case MT_SYS_GET_TIME:
//  338       MT_SysGetUtcTime();
??MT_SysCommandProcessing_15:
        ; Setup parameters for call to function MT_SysGetUtcTime
        LCALL   `??MT_SysGetUtcTime::?relay`; Banked call to: MT_SysGetUtcTime
//  339       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  340 
//  341     case MT_SYS_SET_TX_POWER:
//  342       MT_SysSetTxPower(pBuf);
??MT_SysCommandProcessing_18:
        ; Setup parameters for call to function MT_SysSetTxPower
        LCALL   `??MT_SysSetTxPower::?relay`; Banked call to: MT_SysSetTxPower
//  343       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  344       
//  345 #if defined ( MT_SYS_JAMMER_FEATURE )
//  346     case MT_SYS_JAMMER_PARAMETERS:
//  347       MT_SysJammerParameters( pBuf );
//  348       break;
//  349 #endif      
//  350 
//  351 #if defined ( MT_SYS_SNIFFER_FEATURE )
//  352     case MT_SYS_SNIFFER_PARAMETERS:
//  353       MT_SysSnifferParameters( pBuf );
//  354       break;
//  355 #endif      
//  356 
//  357 #if defined ( FEATURE_SYSTEM_STATS )
//  358     case MT_SYS_ZDIAGS_INIT_STATS:
//  359       MT_SysZDiagsInitStats();
//  360       break;
//  361 
//  362     case MT_SYS_ZDIAGS_CLEAR_STATS:
//  363       MT_SysZDiagsClearStats(pBuf);
//  364       break;
//  365 
//  366     case MT_SYS_ZDIAGS_GET_STATS:
//  367       MT_SysZDiagsGetStatsAttr(pBuf);
//  368        break;
//  369 
//  370     case MT_SYS_ZDIAGS_RESTORE_STATS_NV:
//  371       MT_SysZDiagsRestoreStatsFromNV();
//  372       break;
//  373 
//  374     case MT_SYS_ZDIAGS_SAVE_STATS_TO_NV:
//  375       MT_SysZDiagsSaveStatsToNV();
//  376       break;
//  377 #endif /* FEATURE_SYSTEM_STATS */
//  378 
//  379 //chaokw
//  380     case MT_SYS_P2P_TRANSFER:
//  381       MT_SysP2PTransfer(pBuf);
??MT_SysCommandProcessing_19:
        ; Setup parameters for call to function MT_SysP2PTransfer
        LCALL   `??MT_SysP2PTransfer::?relay`; Banked call to: MT_SysP2PTransfer
//  382       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  383     case MT_SYS_GROUP_TRANSFER:
//  384       MT_SysGroupTransfer(pBuf);
//  385       break;
//  386     case MT_SYS_BROADCAST_TRANSFER:
//  387       MT_SysBroadCastTransfer(pBuf);
??MT_SysCommandProcessing_21:
        ; Setup parameters for call to function MT_SysBroadCastTransfer
        LCALL   `??MT_SysBroadCastTransfer::?relay`; Banked call to: MT_SysBroadCastTransfer
//  388       break;
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
//  389 
//  390     case MT_SYS_CHANNEL_UPDATE:
//  391       MT_SysChannelUpdate( pBuf );
??MT_SysCommandProcessing_23:
        ; Setup parameters for call to function osal_msg_allocate
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x1a
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        JZ      ??MT_SysCommandProcessing_32
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        SJMP    ??CrossCallReturnLabel_56
??MT_SysCommandProcessing_32:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_56:
        ; Setup parameters for call to function osal_msg_send
        LJMP    ??CrossCallReturnLabel_60 & 0xFFFF
//  392       break;
//  393 
//  394     case MT_SYS_MAC_REQ:
//  395       MT_SysMACReq( pBuf );
??MT_SysCommandProcessing_24:
        ; Setup parameters for call to function osal_msg_allocate
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x19
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ      ??MT_SysCommandProcessing_33
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        SJMP    ??CrossCallReturnLabel_57
??MT_SysCommandProcessing_33:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_57:
        ; Setup parameters for call to function osal_msg_send
        LJMP    ??CrossCallReturnLabel_60 & 0xFFFF
//  396       break;
//  397 
//  398     case MT_SYS_ACTIVE_CNT_REQ:
//  399       MT_SysActiveCntReq( pBuf );
??MT_SysCommandProcessing_27:
        ; Setup parameters for call to function osal_msg_allocate
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x13
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ      ??MT_SysCommandProcessing_34
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        SJMP    ??CrossCallReturnLabel_58
??MT_SysCommandProcessing_34:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_58:
        ; Setup parameters for call to function osal_msg_send
        LJMP    ??CrossCallReturnLabel_60 & 0xFFFF
//  400       break;
//  401 
//  402     case MT_SYS_FW_VERSION_REQ:
//  403       MT_SysGetFWVersionReq( pBuf );
??MT_SysCommandProcessing_25:
        ; Setup parameters for call to function MT_SysPkgSendMsg
        MOV     ?V0,#0x3
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R3,#0x0
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#-0x18
        SJMP    ??MT_SysCommandProcessing_35
          CFI CFA_XSP16 add(XSP16, 19)
//  404       break;
//  405 
//  406     case MT_SYS_FW_UPDATE_REQ:
//  407       MT_SysFWUpdateReq( pBuf );
??MT_SysCommandProcessing_26:
        ; Setup parameters for call to function MT_SysPkgSendMsg
        MOV     ?V0,#0x3
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R3,#0x0
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#-0x17
??MT_SysCommandProcessing_35:
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??MT_SysPkgSendMsg::?relay`; Banked call to: MT_SysPkgSendMsg
        SJMP    ??MT_SysCommandProcessing_36
          CFI CFA_XSP16 add(XSP16, 19)
//  408       break;
//  409 
//  410     case MT_SYS_MULTIWAY_SET_REQ:
//  411       MT_SysMultiwaySetReq( pBuf );
??MT_SysCommandProcessing_28:
        ; Setup parameters for call to function osal_msg_allocate
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x14
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        JZ      ??MT_SysCommandProcessing_37
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        SJMP    ??CrossCallReturnLabel_60
??MT_SysCommandProcessing_37:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_59:
        ; Setup parameters for call to function osal_msg_send
        SJMP    ??CrossCallReturnLabel_60
//  412       break;
//  413 
//  414     case MT_SYS_MULTIWAY_SEND_REQ:
//  415       MT_SysMultiwaySendReq( pBuf );
??MT_SysCommandProcessing_20:
        ; Setup parameters for call to function MT_SysGroupTransfer
        LCALL   `??MT_SysGroupTransfer::?relay`; Banked call to: MT_SysGroupTransfer
//  416       break;		
        SJMP    ??MT_SysCommandProcessing_31
//  417 
//  418     case NODE_AUTH_MSG_CMD_ADD:
//  419     case NODE_AUTH_MSG_CMD_COUNT:
//  420     case NODE_AUTH_MSG_CMD_GET:
//  421     case NODE_AUTH_MSG_CMD_DEL:
//  422     case NODE_AUTH_MSG_CMD_WIPE:
//  423     case NODE_AUTH_MSG_CMD_RESET_NET:
//  424       Node_auth_uart_msg_process(0, 
//  425             pBuf[MT_RPC_POS_CMD0], 
//  426             pBuf[MT_RPC_POS_CMD1], 
//  427             &pBuf[MT_RPC_POS_DAT0],
//  428             pBuf[MT_RPC_POS_LEN]);
??MT_SysCommandProcessing_22:
        ; Setup parameters for call to function Node_auth_uart_msg_process
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R6
        ADD     A,#0x3
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x0
        LCALL   `??Node_auth_uart_msg_process::?relay`; Banked call to: Node_auth_uart_msg_process
??MT_SysCommandProcessing_36:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  429       break;
        SJMP    ??MT_SysCommandProcessing_31
//  430 
//  431     case MT_SYS_NWKINFO_REQ:
//  432       MT_SysNWKInfoReq( pBuf );
??MT_SysCommandProcessing_29:
        ; Setup parameters for call to function osal_msg_allocate
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??MT_SysCommandProcessing_31
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x12
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ      ??MT_SysCommandProcessing_38
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        SJMP    ??CrossCallReturnLabel_60
??MT_SysCommandProcessing_38:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_60:
        ; Setup parameters for call to function osal_msg_send
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        SJMP    ??MT_SysCommandProcessing_31
//  433       break;
//  434 
//  435     default:
//  436       status = MT_RPC_ERR_COMMAND_ID;
??MT_SysCommandProcessing_30:
        MOV     ?V2,#0x2
//  437       break;
//  438   }
//  439 
//  440   return status;
??MT_SysCommandProcessing_31:
        MOV     R1,?V2
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
//  441 }
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function MT_SysCommandProcessing
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function MT_SysCommandProcessing
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function MT_SysCommandProcessing
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function MT_SysCommandProcessing
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_73:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function MT_SysCommandProcessing
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function MT_SysCommandProcessing
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function MT_SysCommandProcessing
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function MT_SysCommandProcessing
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV     A,R2
        ADD     A,#0x27
        MOV     ?V4,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V5,A
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     A,?V4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V5
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function MT_SysCommandProcessing
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_57
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-4
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function MT_SysCommandProcessing
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_58
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-4
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function MT_SysCommandProcessing
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_59
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-4
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function MT_SysCommandProcessing
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_60
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-4
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function MT_SysCommandProcessing
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_39
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-4
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function MT_SysCommandProcessing
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_40
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-4
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function MT_SysCommandProcessing
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_41
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-4
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function MT_SysCommandProcessing
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_42
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-4
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function MT_SysCommandProcessing
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_43
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-4
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function MT_SysCommandProcessing
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function MT_SysCommandProcessing
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function MT_SysCommandProcessing
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function MT_SysCommandProcessing
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x27
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function MT_SysCommandProcessing
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function MT_SysCommandProcessing
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function MT_SysCommandProcessing
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function MT_SysCommandProcessing
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        MOV     A,?V0
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_75:
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,?V4
        MOV     R3,?V5
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function MT_SysCommandProcessing
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function MT_SysCommandProcessing
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function MT_SysCommandProcessing
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function MT_SysCommandProcessing
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R2
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     A,R0
        RET
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function MT_SysCommandProcessing
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_6
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-4
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function MT_SysCommandProcessing
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_7
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-4
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function MT_SysCommandProcessing
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_8
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-4
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function MT_SysCommandProcessing
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_9
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-4
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function MT_SysCommandProcessing
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_0
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-4
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function MT_SysCommandProcessing
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_1
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-4
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function MT_SysCommandProcessing
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_2
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-4
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function MT_SysCommandProcessing
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_3
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-4
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function MT_SysCommandProcessing
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_4
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-4
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52
//  442 
//  443 /**************************************************************************************************
//  444  * @fn      MT_SysReset
//  445  *
//  446  * @brief   Reset the device.
//  447  * @param   typID: 0=reset, 1=serial bootloader, 
//  448  *
//  449  * @return  None
//  450  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  451 void MT_SysReset( uint8 *pBuf )
MT_SysReset:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function MT_SysReset
        CODE
//  452 {
        FUNCALL MT_SysReset, Onboard_soft_reset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  453   switch( pBuf[MT_RPC_POS_DAT0] )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??MT_SysReset_0
        DEC     A
        JZ      ??MT_SysReset_1
        ADD     A,#-0x2
        JZ      ??MT_SysReset_1
        SJMP    ??MT_SysReset_2
//  454   {
//  455     case MT_SYS_RESET_HARD:
//  456       SystemReset();
??MT_SysReset_0:
        CLR     0xa8.7
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??MT_SysReset_3:
        SJMP    ??MT_SysReset_3
//  457       break;
//  458       
//  459     case MT_SYS_RESET_SOFT:
//  460 #if !(defined(HAL_BOARD_F2618) || defined(HAL_BOARD_F5438) || defined(HAL_BOARD_LM3S))
//  461       SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
//  462 #endif
//  463       break;
//  464       
//  465     case MT_SYS_RESET_SHUTDOWN:
//  466       {
//  467         // Disable interrupts and put into deep sleep, use hardware reset to wakeup
//  468         powerOffSoc();
//  469       }
//  470       break;
//  471 
//  472     case MT_SYS_RESET_CLEAR_NV:
//  473 #if defined ( NV_RESTORE )		
//  474       NLME_InitNV();
//  475       NLME_SetDefaultNV();
//  476       ZDSecMgrClearNVKeyValues();
//  477 #endif	  
//  478       Onboard_soft_reset();
??MT_SysReset_1:
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  479       break;  
//  480   }
//  481 
//  482 }
??MT_SysReset_2:
        LJMP    ??Subroutine44_0 & 0xFFFF
          CFI EndBlock cfiBlock53
        REQUIRE _A_IEN0
        REQUIRE WDCTL
//  483 
//  484 /***************************************************************************************************
//  485  * @fn      MT_SysPing
//  486  *
//  487  * @brief   Process the Ping command
//  488  *
//  489  * @param   None
//  490  *
//  491  * @return  None
//  492  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  493 void MT_SysPing(void)
MT_SysPing:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function MT_SysPing
        CODE
//  494 {
        FUNCALL MT_SysPing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
//  495   uint16 tmp16;
//  496   uint8 retArray[2];
//  497 
//  498   /* Build Capabilities */
//  499   tmp16 = MT_CAP_SYS | MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF | MT_CAP_ZDO |
//  500           MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG | MT_CAP_APP | MT_CAP_GP | MT_CAP_ZOAD;
//  501 
//  502   /* Convert to high byte first into temp buffer */
//  503   retArray[0] = LO_UINT16( tmp16 );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x11
        MOVX    @DPTR,A
//  504   retArray[1] = HI_UINT16( tmp16 );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine42_0 & 0xFFFF
//  505 
//  506   /* Build and send back the response */
//  507   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_PING,
//  508                                 sizeof (tmp16), retArray );
??CrossCallReturnLabel_89:
        MOV     R2,#0x1
        LJMP    ?Subroutine0 & 0xFFFF
//  509 }
          CFI EndBlock cfiBlock54
//  510 
//  511 /***************************************************************************************************
//  512  * @fn      MT_SysVersion
//  513  *
//  514  * @brief   Process the Version command
//  515  *
//  516  * @param   None
//  517  *
//  518  * @return  None
//  519  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  520 void MT_SysVersion(void)
MT_SysVersion:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function MT_SysVersion
        CODE
//  521 {
        FUNCALL MT_SysVersion, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  522 #if !defined INCLUDE_REVISION_INFORMATION
//  523   /* Build and send back the response */
//  524   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
//  525                                sizeof(MTVersionString), (uint8 *)MTVersionString);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,#MTVersionString & 0xff
        MOV     R5,#(MTVersionString >> 8) & 0xff
        MOV     R3,#0x5
        MOV     R2,#0x2
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  526 
//  527 #else
//  528   uint8 verStr[sizeof(MTVersionString) + 4];
//  529   uint8 *pBuf = &verStr[sizeof(MTVersionString)];
//  530   
//  531 #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
//  532   uint32 sblSig;
//  533   uint32 sblRev;
//  534 #endif
//  535 
//  536   osal_memcpy(verStr, (uint8 *)MTVersionString, sizeof(MTVersionString));
//  537 
//  538 #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
//  539   HalFlashRead(SBL_SIG_ADDR / HAL_FLASH_PAGE_SIZE,
//  540                SBL_SIG_ADDR % HAL_FLASH_PAGE_SIZE,
//  541                (uint8 *)&sblSig, sizeof(sblSig));
//  542 
//  543   if (sblSig == SBL_SIGNATURE)
//  544   {
//  545     // SBL is supported and its revision is provided (in a known flash location)
//  546     HalFlashRead(SBL_REV_ADDR / HAL_FLASH_PAGE_SIZE,
//  547                  SBL_REV_ADDR % HAL_FLASH_PAGE_SIZE,
//  548                  (uint8 *)&sblRev, sizeof(sblRev));
//  549   }
//  550   else
//  551   {
//  552     //  SBL is supported but its revision is not provided
//  553     sblRev = 0x00000000;
//  554   }
//  555 #else
//  556   // SBL is NOT supported
//  557   sblRev = 0xFFFFFFFF;
//  558 #endif
//  559 
//  560   // Plug the SBL revision indication
//  561   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,sblRev);
//  562 
//  563   /* Build and send back the response */
//  564   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
//  565                                sizeof(verStr), verStr);
//  566 
//  567 #endif
//  568 }
        LJMP    ??Subroutine44_0 & 0xFFFF
          CFI EndBlock cfiBlock55
//  569 
//  570 /***************************************************************************************************
//  571  * @fn      MT_SysSetExtAddr
//  572  *
//  573  * @brief   Set the Extended Address
//  574  *
//  575  * @param   pBuf
//  576  *
//  577  * @return  None
//  578  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  579 void MT_SysSetExtAddr(uint8 *pBuf)
MT_SysSetExtAddr:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function MT_SysSetExtAddr
        CODE
//  580 {
        FUNCALL MT_SysSetExtAddr, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetExtAddr, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetExtAddr, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V1,R3
//  581   uint8 retValue = ZFailure;
        LCALL   ?Subroutine24 & 0xFFFF
//  582   uint8 cmdId;
//  583 
//  584   /* parse header */
//  585   cmdId = pBuf[MT_RPC_POS_CMD1];
//  586   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_50:
        MOV     ?V0,A
        JNC     ??MT_SysSetExtAddr_0
        INC     ?V1
//  587 
//  588   if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
??MT_SysSetExtAddr_0:
        ; Setup parameters for call to function ZMacSetReq
        INC     R2
        INC     R2
        INC     R2
        MOV     R3,?V1
        MOV     R1,#-0x1e
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV     A,R1
        JNZ     ??MT_SysSetExtAddr_1
//  589   {
//  590 // CC253X MAC Network Processor does not have NV support
//  591 #if !defined(CC253X_MACNP)
//  592     retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0,#0x8
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  593 #endif
//  594   }
//  595 
//  596   /* Build and send back the response */
//  597   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
??MT_SysSetExtAddr_1:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  598 
//  599 }
        MOV     A,#0x1
        LJMP    ??Subroutine41_0 & 0xFFFF
          CFI EndBlock cfiBlock56
//  600 
//  601 /***************************************************************************************************
//  602  * @fn      MT_SysGetExtAddr
//  603  *
//  604  * @brief   Get the Extended Address
//  605  *
//  606  * @param   None
//  607  *
//  608  * @return  None
//  609  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  610 void MT_SysGetExtAddr(void)
MT_SysGetExtAddr:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI Function MT_SysGetExtAddr
        CODE
//  611 {
        FUNCALL MT_SysGetExtAddr, ZMacGetReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetExtAddr, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 8)
//  612   uint8 extAddr[Z_EXTADDR_LEN];
//  613 
//  614   ZMacGetReq( ZMacExtAddr, extAddr );
        ; Setup parameters for call to function ZMacGetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#-0x1e
        LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
//  615 
//  616   /* Build and send back the response */
//  617   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_GET_EXTADDR,
//  618                                Z_EXTADDR_LEN, extAddr);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x8
        MOV     R2,#0x4
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  619 }
        MOV     A,#0x8
        LJMP    ??Subroutine43_0 & 0xFFFF
          CFI EndBlock cfiBlock57
//  620 
//  621 #if !defined(CC253X_MACNP)
//  622 /***************************************************************************************************
//  623  * @fn      MT_SysOsalNVRead
//  624  *
//  625  * @brief   Attempt to read an NV value
//  626  *
//  627  * @param   pBuf - pointer to the data
//  628  *
//  629  * @return  None
//  630  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  631 void MT_SysOsalNVRead(uint8 *pBuf)
MT_SysOsalNVRead:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI Function MT_SysOsalNVRead
        CODE
//  632 {
        FUNCALL MT_SysOsalNVRead, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  633   uint8 cmdId;
//  634   uint16 nvId;
//  635   uint16 dataLen;
//  636   uint16 dataOfs;
//  637   uint16 nvItemLen;
//  638   uint8 error = ZSuccess;
        MOV     ?V2,#0x0
//  639 
//  640   /* MT command ID */
//  641   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
//  642   /* Skip over RPC header */
//  643   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R6
        ADD     A,#0x3
        MOV     R6,A
        JNC     ??MT_SysOsalNVRead_0
        INC     R7
//  644 
//  645   /* NV item ID */
//  646   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
??MT_SysOsalNVRead_0:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine9 & 0xFFFF
//  647   /* Length of entire NV item data */
//  648   nvItemLen = osal_nv_item_len(nvId);
??CrossCallReturnLabel_17:
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R3,A
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R4,?V4
        MOV     R5,?V5
//  649 
//  650 #if !MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
//  651   if ((ZCD_NV_IMPLICIT_CERTIFICATE == nvId) ||
//  652       (ZCD_NV_CA_PUBLIC_KEY == nvId)        ||
//  653       (ZCD_NV_DEVICE_PRIVATE_KEY == nvId))
        MOV     A,#0x69
        XRL     A,?V0
        JNZ     ??MT_SysOsalNVRead_1
        MOV     A,?V1
??MT_SysOsalNVRead_1:
        JZ      ??MT_SysOsalNVRead_2
        MOV     A,#0x6b
        XRL     A,?V0
        JNZ     ??MT_SysOsalNVRead_3
        MOV     A,?V1
??MT_SysOsalNVRead_3:
        JZ      ??MT_SysOsalNVRead_2
        MOV     A,#0x6a
        XRL     A,?V0
        ORL     A,?V1
        JNZ     ??MT_SysOsalNVRead_4
//  654   {
//  655     /* Access to Security Certificate Data is denied */
//  656     error = ZInvalidParameter;
??MT_SysOsalNVRead_2:
        MOV     ?V2,#0x2
//  657   }
//  658 #endif
//  659 
//  660 #if !MT_SYS_KEY_MANAGEMENT
//  661   if ( (nvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
//  662        (nvId == ZCD_NV_NWK_ALTERN_KEY_INFO) ||
//  663       ((nvId >= ZCD_NV_TCLK_TABLE_START) && (nvId <= ZCD_NV_TCLK_TABLE_END)) ||
//  664       ((nvId >= ZCD_NV_APS_LINK_KEY_DATA_START) && (nvId <= ZCD_NV_APS_LINK_KEY_DATA_END)) ||
//  665        (nvId == ZCD_NV_PRECFGKEY) )
??MT_SysOsalNVRead_4:
        MOV     A,#0x3a
        XRL     A,?V0
        JNZ     ??MT_SysOsalNVRead_5
        MOV     A,?V1
??MT_SysOsalNVRead_5:
        JZ      ??MT_SysOsalNVRead_6
        MOV     A,#0x3b
        XRL     A,?V0
        JNZ     ??MT_SysOsalNVRead_7
        MOV     A,?V1
??MT_SysOsalNVRead_7:
        JZ      ??MT_SysOsalNVRead_6
        MOV     A,?V0
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,?V1
        ADDC    A,#-0x2
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??MT_SysOsalNVRead_6
        DEC     R1
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??MT_SysOsalNVRead_6
        MOV     A,#0x62
        XRL     A,?V0
        ORL     A,?V1
        JNZ     ??MT_SysOsalNVRead_8
//  666   {
//  667     /* Access to Security Key Data is denied */
//  668     error = ZInvalidParameter;
??MT_SysOsalNVRead_6:
        MOV     ?V2,#0x2
//  669   }
//  670 #endif //!MT_SYS_KEY_MANAGEMENT
//  671   
//  672   /* Get NV data offset */
//  673   if (cmdId == MT_SYS_OSAL_NV_READ)
??MT_SysOsalNVRead_8:
        MOV     A,#0x8
        XRL     A,?V3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        JNZ     ??MT_SysOsalNVRead_9
//  674   {
//  675     /* MT_SYS_OSAL_NV_READ has 1-byte offset */
//  676     dataOfs = (uint16)pBuf[2];
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
        SJMP    ??CrossCallReturnLabel_24
//  677   }
//  678   else
//  679   {
//  680     /* MT_SYS_OSAL_NV_READ_EXT has 2-byte offset */
//  681     dataOfs = BUILD_UINT16(pBuf[2], pBuf[3]);
??MT_SysOsalNVRead_9:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine12 & 0xFFFF
//  682   }
//  683   if (nvItemLen <= dataOfs)
??CrossCallReturnLabel_24:
        CLR     C
        MOV     A,R6
        SUBB    A,R4
        MOV     A,R7
        SUBB    A,R5
        JC      ??MT_SysOsalNVRead_10
//  684   {
//  685     /* Offset is past end of data */
//  686     error = ZInvalidParameter;
        MOV     ?V2,#0x2
        LJMP    ??MT_SysOsalNVRead_11 & 0xFFFF
//  687   }
//  688 
//  689   if (error == ZSuccess)
??MT_SysOsalNVRead_10:
        MOV     A,?V2
        JZ      $+5
        LJMP    ??MT_SysOsalNVRead_12 & 0xFFFF
//  690   {
//  691     uint8 *pRetBuf;
//  692     uint8 respLen = 2;  /* Response header: [0]=status,[1]=length */
//  693 
//  694     dataLen = nvItemLen - dataOfs;
        MOV     A,R4
        CLR     C
        SUBB    A,R6
        MOV     ?V8,A
        MOV     A,R5
        SUBB    A,R7
        MOV     ?V9,A
//  695     if (dataLen > (uint16)(MT_MAX_RSP_DATA_LEN - respLen))
        CLR     C
        MOV     A,?V8
        SUBB    A,#-0x8
        MOV     A,?V9
        SUBB    A,#0x0
        JC      ??MT_SysOsalNVRead_13
//  696     {
//  697       /* Data length is limited by TX buffer size and MT protocol */
//  698       dataLen = (MT_MAX_RSP_DATA_LEN - respLen);
        MOV     ?V8,#-0x9
        MOV     ?V9,#0x0
//  699     }
//  700     respLen += dataLen;
??MT_SysOsalNVRead_13:
        MOV     A,?V8
        ADD     A,#0x2
        MOV     ?V4,A
//  701 
//  702     pRetBuf = osal_mem_alloc(respLen);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V6,R2
        MOV     ?V7,R3
//  703     if (pRetBuf != NULL)
        MOV     A,R2
        ORL     A,?V7
        JNZ     $+5
        LJMP    ??MT_SysOsalNVRead_14 & 0xFFFF
//  704     {
//  705       osal_memset(&pRetBuf[2], 0, dataLen);
        MOV     A,R2
        ADD     A,#0x2
        MOV     ?V10,A
        CLR     A
        ADDC    A,?V7
        MOV     ?V11,A
        ; Setup parameters for call to function osal_memset
        MOV     R4,?V8
        MOV     R5,?V9
        MOV     R1,#0x0
        INC     R2
        INC     R2
        MOV     R3,A
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  706       if (((osal_nv_read( nvId, dataOfs, dataLen, &pRetBuf[2])) == ZSUCCESS))
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        JNZ     ??MT_SysOsalNVRead_15
//  707       {
//  708         pRetBuf[0] = ZSuccess;
        MOV     DPL,?V6
        MOV     DPH,?V7
        CLR     A
        MOVX    @DPTR,A
//  709         pRetBuf[1] = dataLen;
        INC     DPTR
        MOV     A,?V8
        MOVX    @DPTR,A
//  710         MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  711                                        cmdId, respLen, pRetBuf );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?V6
        MOV     R5,?V7
        MOV     R3,?V4
        MOV     R2,?V3
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        SJMP    ??MT_SysOsalNVRead_16
//  712       }
//  713       else
//  714       {
//  715         error = NV_OPER_FAILED;
??MT_SysOsalNVRead_15:
        MOV     ?V2,#0xa
//  716       }
//  717       osal_mem_free(pRetBuf);
??MT_SysOsalNVRead_16:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V6
        MOV     R3,?V7
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  718     }
//  719     else
//  720     {
//  721       /* Could not get buffer for NV data */
//  722       error = ZMemError;
//  723     }
//  724   }
//  725   
//  726   if (error != ZSuccess)
??MT_SysOsalNVRead_12:
        MOV     A,?V2
        JZ      ??MT_SysOsalNVRead_17
//  727   {
//  728     uint8 tmp[2] = { error, 0 };
??MT_SysOsalNVRead_11:
        MOV     DPTR,#`?<Constant {0, 0}>`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x2
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V2
        LCALL   ??Subroutine42_0 & 0xFFFF
//  729     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  730                                    cmdId, 2, tmp);
//  731   }
??CrossCallReturnLabel_90:
        MOV     R2,?V3
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  732 }
??MT_SysOsalNVRead_17:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_XSP16 add(XSP16, 22)
??MT_SysOsalNVRead_14:
        MOV     ?V2,#0x10
        SJMP    ??MT_SysOsalNVRead_11
          CFI EndBlock cfiBlock58

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {0, 0}>`:
        DATA8
        DB 0
        DB 0
//  733 
//  734 /***************************************************************************************************
//  735  * @fn      MT_SysOsalNVWrite
//  736  *
//  737  * @brief   Attempt to write an NV item
//  738  *
//  739  * @param   pBuf - pointer to the data
//  740  *
//  741  * @return  None
//  742  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  743 void MT_SysOsalNVWrite(uint8 *pBuf)
MT_SysOsalNVWrite:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI Function MT_SysOsalNVWrite
        CODE
//  744 {
        FUNCALL MT_SysOsalNVWrite, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, zgSetItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V5,R3
//  745   uint8 cmdId;
//  746   uint16 nvId;
//  747   uint16 dataLen;
//  748   uint16 dataOfs;
//  749   uint16 nvItemLen;
//  750   uint8 rtrn = ZSuccess;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        LCALL   ?Subroutine34 & 0xFFFF
//  751 
//  752   /* MT command ID */
//  753   cmdId = pBuf[MT_RPC_POS_CMD1];
??CrossCallReturnLabel_76:
        MOV     ?V2,A
//  754   /* Skip over RPC header */
//  755   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V4,A
        JNC     ??MT_SysOsalNVWrite_0
        INC     ?V5
//  756 
//  757   /* NV item ID */
//  758   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
??MT_SysOsalNVWrite_0:
        MOV     DPL,A
        MOV     DPH,?V5
        LCALL   ?Subroutine9 & 0xFFFF
//  759   
//  760   /* Get NV data offset & length */
//  761   if ( cmdId == MT_SYS_OSAL_NV_WRITE )
??CrossCallReturnLabel_18:
        MOV     A,#0x9
        XRL     A,?V2
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        JNZ     ??MT_SysOsalNVWrite_1
//  762   {
//  763     /* MT_SYS_OSAL_NV_WRITE has 1-byte offset & length */
//  764     dataOfs = (uint16)pBuf[2];
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
//  765     dataLen = (uint16)pBuf[3];
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V6,A
        MOV     ?V7,R0
//  766     pBuf += 4;
        MOV     A,?V4
        ADD     A,#0x4
        SJMP    ??MT_SysOsalNVWrite_2
//  767   }
//  768   else
//  769   {
//  770     /* MT_SYS_OSAL_NV_WRITE_EXT has 2-byte offset & length */
//  771     dataOfs = BUILD_UINT16(pBuf[2], pBuf[3]);
??MT_SysOsalNVWrite_1:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_22:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  772     dataLen = BUILD_UINT16(pBuf[4], pBuf[5]);
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_23:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     ?V6,A
        CLR     A
        ADDC    A,R1
        MOV     ?V7,A
//  773     pBuf += 6;
        MOV     A,?V4
        ADD     A,#0x6
??MT_SysOsalNVWrite_2:
        MOV     ?V4,A
        JNC     ??MT_SysOsalNVWrite_3
        INC     ?V5
//  774   }
//  775 
//  776   /* Length of entire NV item data */
//  777   nvItemLen = osal_nv_item_len(nvId);
//  778   if ((dataOfs + dataLen) <= nvItemLen)
??MT_SysOsalNVWrite_3:
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     A,R6
        ADD     A,?V6
        MOV     R0,A
        MOV     A,R7
        ADDC    A,?V7
        MOV     R1,A
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        JC      ??MT_SysOsalNVWrite_4
//  779   {
//  780     if (dataOfs == 0)
        MOV     A,R6
        ORL     A,R7
        JNZ     ??MT_SysOsalNVWrite_5
//  781     {
//  782       /* Set the Z-Globals value of this NV item */
//  783       zgSetItem( nvId, dataLen, pBuf );
        ; Setup parameters for call to function zgSetItem
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,?V6
        MOV     R5,?V7
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??zgSetItem::?relay`; Banked call to: zgSetItem
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  784     }
//  785     
//  786     if ((osal_nv_write(nvId, dataOfs, dataLen, pBuf)) == ZSUCCESS)
??MT_SysOsalNVWrite_5:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     ??MT_SysOsalNVWrite_6
//  787     {
//  788       if (nvId == ZCD_NV_EXTADDR)
        MOV     A,#0x1
        XRL     A,?V0
        ORL     A,?V1
        JNZ     ??MT_SysOsalNVWrite_7
//  789       {
//  790         rtrn = ZMacSetReq(ZMacExtAddr, pBuf);
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,?V4
        MOV     R3,?V5
        MOV     R1,#-0x1e
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??MT_SysOsalNVWrite_8
//  791       }
//  792     }
//  793     else
//  794     {
//  795       rtrn = NV_OPER_FAILED;
??MT_SysOsalNVWrite_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0xa
        SJMP    ??MT_SysOsalNVWrite_8
//  796     }
//  797   }
//  798   else
//  799   {
//  800     /* Bad length or/and offset */
//  801     rtrn = ZInvalidParameter;
??MT_SysOsalNVWrite_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
??MT_SysOsalNVWrite_8:
        MOVX    @DPTR,A
//  802   }
//  803 
//  804   /* Build and send back the response */
//  805   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  806                                  cmdId, 1, &rtrn);
??MT_SysOsalNVWrite_7:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     R2,?V2
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  807 }
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock59

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function MT_SysOsalNVWrite
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function MT_SysOsalNVWrite
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function MT_SysOsalNVRead
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function MT_SysOsalNVWrite
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker65 Using cfiCommon1
          CFI (cfiPicker65) NoFunction
          CFI (cfiPicker65) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     ?V0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V1,A
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiPicker65
//  808 
//  809 /***************************************************************************************************
//  810  * @fn      MT_SysOsalNVItemInit
//  811  *
//  812  * @brief   Attempt to create an NV item
//  813  *
//  814  * @param   pBuf - pointer to the data
//  815  *
//  816  * @return  None
//  817  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  818 void MT_SysOsalNVItemInit(uint8 *pBuf)
MT_SysOsalNVItemInit:
          CFI Block cfiBlock66 Using cfiCommon0
          CFI Function MT_SysOsalNVItemInit
        CODE
//  819 {
        FUNCALL MT_SysOsalNVItemInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V1,R3
//  820   uint8 ret;
//  821   uint8 idLen;
//  822   uint16 nvId;
//  823   uint16 nvLen;
//  824 
//  825   /* Skip over RPC header */
//  826   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V0,A
        JNC     ??MT_SysOsalNVItemInit_0
        INC     ?V1
//  827 
//  828   /* NV item ID */
//  829   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
??MT_SysOsalNVItemInit_0:
        MOV     DPL,A
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?Subroutine12 & 0xFFFF
//  830   /* NV item length */
//  831   nvLen = BUILD_UINT16(pBuf[2], pBuf[3]);
??CrossCallReturnLabel_25:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
//  832   /* Initialization data length */
//  833   idLen = pBuf[4];
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
//  834   pBuf += 5;
        MOV     A,?V0
        ADD     A,#0x5
        MOV     ?V0,A
        JNC     ??MT_SysOsalNVItemInit_1
        INC     ?V1
//  835 
//  836   if ( idLen < nvLen )
??MT_SysOsalNVItemInit_1:
        CLR     C
        MOV     A,?V2
        SUBB    A,R4
        CLR     A
        SUBB    A,R5
        JNC     ??MT_SysOsalNVItemInit_2
//  837   {
//  838     /* Attempt to create a new NV item */
//  839     ret = osal_nv_item_init( nvId, nvLen, NULL );
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V4,A
        MOV     ?V5,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  840     if ( (ret == NV_ITEM_UNINIT) && (idLen > 0) )
        XRL     A,#0x9
        JNZ     ??MT_SysOsalNVItemInit_3
        MOV     A,?V2
        JZ      ??MT_SysOsalNVItemInit_3
//  841     {
//  842       /* Write initialization data to first part of new item */
//  843       (void) osal_nv_write( nvId, 0, (uint16)idLen, pBuf );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        SJMP    ??MT_SysOsalNVItemInit_3
//  844     }
//  845   }
//  846   else
//  847   {
//  848     /* Attempt to create/initialize a new NV item */
//  849     ret = osal_nv_item_init( nvId, nvLen, pBuf );
??MT_SysOsalNVItemInit_2:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  850   }
//  851 
//  852   /* Build and send back the response */
//  853   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  854                                  MT_SYS_OSAL_NV_ITEM_INIT, 1, &ret);
??MT_SysOsalNVItemInit_3:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     R2,#0x7
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  855 }
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function MT_SysOsalNVRead
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function MT_SysOsalNVItemInit
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker69 Using cfiCommon1
          CFI (cfiPicker69) NoFunction
          CFI (cfiPicker69) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
        RET
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiPicker69
//  856 
//  857 /***************************************************************************************************
//  858  * @fn      MT_SysOsalNVDelete
//  859  *
//  860  * @brief   Attempt to delete an NV item
//  861  *
//  862  * @param   pBuf - pointer to the data
//  863  *
//  864  * @return  None
//  865  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  866 void MT_SysOsalNVDelete(uint8 *pBuf)
MT_SysOsalNVDelete:
          CFI Block cfiBlock70 Using cfiCommon0
          CFI Function MT_SysOsalNVDelete
        CODE
//  867 {
        FUNCALL MT_SysOsalNVDelete, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVDelete, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  868   uint16 nvId;
//  869   uint16 nvLen;
//  870   uint8 ret;
//  871 
//  872   /* Skip over RPC header */
//  873   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     R2,A
        JNC     ??MT_SysOsalNVDelete_0
        INC     R3
//  874 
//  875   /* Get the ID */
//  876   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
//  877   /* Get the length */
//  878   nvLen = BUILD_UINT16(pBuf[2], pBuf[3]);
//  879 
//  880   /* Attempt to delete the NV item */
//  881   ret = osal_nv_delete( nvId, nvLen );
??MT_SysOsalNVDelete_0:
        ; Setup parameters for call to function osal_nv_delete
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_85:
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
        LCALL   ?Subroutine23 & 0xFFFF
//  882 
//  883   /* Build and send back the response */
//  884   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  885                                  MT_SYS_OSAL_NV_DELETE, 1, &ret);
??CrossCallReturnLabel_92:
        MOV     R2,#0x12
        SJMP    ??Subroutine39_0
//  886 }
          CFI EndBlock cfiBlock70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond71 Using cfiCommon0
          CFI Function MT_SysOsalNVDelete
          CFI Conditional ??CrossCallReturnLabel_85
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function MT_SysOsalStartTimer
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker73 Using cfiCommon1
          CFI (cfiPicker73) NoFunction
          CFI (cfiPicker73) Picker
        INC     DPTR
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiPicker73
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond74 Using cfiCommon0
          CFI Function MT_SysOsalNVLength
          CFI Conditional ??CrossCallReturnLabel_84
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function MT_SysOsalNVDelete
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function MT_SysOsalStartTimer
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        RET
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock78 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
          CFI EndBlock cfiBlock78
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiBlock79 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x61
          CFI EndBlock cfiBlock79
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiBlock80 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock80
//  887 
//  888 /***************************************************************************************************
//  889  * @fn      MT_SysOsalNVLength
//  890  *
//  891  * @brief   Attempt to get the length to an NV item
//  892  *
//  893  * @param   pBuf - pointer to the data
//  894  *
//  895  * @return  None
//  896  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  897 void MT_SysOsalNVLength(uint8 *pBuf)
MT_SysOsalNVLength:
          CFI Block cfiBlock81 Using cfiCommon0
          CFI Function MT_SysOsalNVLength
        CODE
//  898 {
        FUNCALL MT_SysOsalNVLength, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVLength, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  899   uint16 nvId;
//  900   uint16 nvLen;
//  901   uint8 rsp[2];
//  902 
//  903   /* Skip over RPC header */
//  904   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     R2,A
        JNC     ??MT_SysOsalNVLength_0
        INC     R3
//  905 
//  906   /* Get the ID */
//  907   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
//  908 
//  909   /* Attempt to get NV item length */
//  910   nvLen = osal_nv_item_len( nvId );
??MT_SysOsalNVLength_0:
        ; Setup parameters for call to function osal_nv_item_len
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
//  911   rsp[0] = LO_UINT16( nvLen );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
//  912   rsp[1] = HI_UINT16( nvLen );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
//  913 
//  914   /* Build and send back the response */
//  915   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  916                                  MT_SYS_OSAL_NV_LENGTH, 2, rsp);
??CrossCallReturnLabel_87:
        MOV     R2,#0x13
        LJMP    ?Subroutine1 & 0xFFFF
//  917 }
          CFI EndBlock cfiBlock81
//  918 #endif // !defined(CC253X_MACNP)
//  919 
//  920 /***************************************************************************************************
//  921  * @fn      MT_SysOsalStartTimer
//  922  *
//  923  * @brief
//  924  *
//  925  * @param   uint8 pBuf - pointer to the data
//  926  *
//  927  * @return  None
//  928  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  929 void MT_SysOsalStartTimer(uint8 *pBuf)
MT_SysOsalStartTimer:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI Function MT_SysOsalStartTimer
        CODE
//  930 {
        FUNCALL MT_SysOsalStartTimer, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalStartTimer, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  931   uint16 eventId;
//  932   uint8 retValue = ZFailure;
        LCALL   ?Subroutine24 & 0xFFFF
//  933   uint8 cmdId;
//  934 
//  935   /* parse header */
//  936   cmdId = pBuf[MT_RPC_POS_CMD1];
//  937   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_51:
        MOV     R2,A
        JNC     ??MT_SysOsalStartTimer_0
        INC     R3
//  938 
//  939   if (*pBuf <= 3)
??MT_SysOsalStartTimer_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        JNC     ??MT_SysOsalStartTimer_1
//  940   {
//  941     eventId = (uint16) MT_SysOsalEventId[*pBuf];
//  942     retValue = osal_start_timerEx(MT_TaskID, eventId, BUILD_UINT16(pBuf[1], pBuf[2]));
        ; Setup parameters for call to function osal_start_timerEx
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine13 & 0xFFFF
//  943   }
??CrossCallReturnLabel_86:
        MOV     ?V0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V1,A
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??MT_SysOsalStartTimer_2
//  944   else
//  945   {
//  946     retValue = ZInvalidParameter;
??MT_SysOsalStartTimer_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
//  947   }
??MT_SysOsalStartTimer_2:
        LCALL   ??Subroutine45_0 & 0xFFFF
//  948 
//  949   /* Build and send back the response */
//  950   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
??CrossCallReturnLabel_94:
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  951 }
        MOV     A,#0x1
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function MT_SysSetExtAddr
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function MT_SysOsalStartTimer
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker85 Using cfiCommon1
          CFI (cfiPicker85) NoFunction
          CFI (cfiPicker85) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV     R6,A
        MOV     A,R2
        ADD     A,#0x3
        RET
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond86 Using cfiCommon0
          CFI Function MT_SysOsalNVWrite
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function MT_SysSetExtAddr
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_50
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-4
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function MT_SysOsalStartTimer
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_51
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-4
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker89 Using cfiCommon1
          CFI (cfiPicker89) NoFunction
          CFI (cfiPicker89) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiPicker89
//  952 
//  953 /***************************************************************************************************
//  954  * @fn      MT_SysOsalStopTimer
//  955  *
//  956  * @brief
//  957  *
//  958  * @param   uint8 pBuf - pointer to the data
//  959  *
//  960  * @return  None
//  961  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  962 void MT_SysOsalStopTimer(uint8 *pBuf)
MT_SysOsalStopTimer:
          CFI Block cfiBlock90 Using cfiCommon0
          CFI Function MT_SysOsalStopTimer
        CODE
//  963 {
        FUNCALL MT_SysOsalStopTimer, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalStopTimer, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  964   uint16 eventId;
//  965   uint8 retValue = ZFailure;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  966   uint8 cmdId;
//  967 
//  968   /* parse header */
//  969   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine15 & 0xFFFF
//  970   pBuf += MT_RPC_FRAME_HDR_SZ;
//  971 
//  972   if (*pBuf <= 3)
??CrossCallReturnLabel_29:
        CLR     C
        SUBB    A,#0x4
        JNC     ??MT_SysOsalStopTimer_0
//  973   {
//  974     eventId = (uint16) MT_SysOsalEventId[*pBuf];
//  975     retValue = osal_stop_timerEx(MT_TaskID, eventId);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine7 & 0xFFFF
//  976   }
??CrossCallReturnLabel_11:
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??MT_SysOsalStopTimer_1
//  977   else
//  978   {
//  979     retValue = ZInvalidParameter;
??MT_SysOsalStopTimer_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
??MT_SysOsalStopTimer_1:
        MOVX    @DPTR,A
//  980   }
//  981 
//  982   /* Build and send back the response */
//  983   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LJMP    ?Subroutine2 & 0xFFFF
//  984 }
          CFI EndBlock cfiBlock90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function MT_SysOsalStartTimer
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function MT_SysOsalStopTimer
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker93 Using cfiCommon1
          CFI (cfiPicker93) NoFunction
          CFI (cfiPicker93) Picker
        MOVX    A,@DPTR
        ADD     A,0xE0 /* A   */
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#MT_SysOsalEventId & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(MT_SysOsalEventId >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#MT_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiPicker93
//  985 
//  986 /***************************************************************************************************
//  987  * @fn      MT_SysRandom
//  988  *
//  989  * @brief
//  990  *
//  991  * @param   uint8 pData - pointer to the data
//  992  *
//  993  * @return  None
//  994  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  995 void MT_SysRandom()
MT_SysRandom:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI Function MT_SysRandom
        CODE
//  996 {
        FUNCALL MT_SysRandom, Onboard_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysRandom, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  997   uint16 randValue = Onboard_rand();
        ; Setup parameters for call to function Onboard_rand
        LCALL   `??Onboard_rand::?relay`; Banked call to: Onboard_rand
//  998   uint8 retArray[2];
//  999 
// 1000   retArray[0] = LO_UINT16(randValue);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
// 1001   retArray[1] = HI_UINT16(randValue);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
// 1002 
// 1003   /* Build and send back the response */
// 1004   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_RANDOM, 2, retArray );
??CrossCallReturnLabel_88:
        MOV     R2,#0xc
        SJMP    ?Subroutine1
// 1005 }
          CFI EndBlock cfiBlock94
// 1006 
// 1007 /***************************************************************************************************
// 1008  * @fn      MT_SysAdcRead
// 1009  *
// 1010  * @brief   Reading ADC value, temperature sensor and voltage
// 1011  *
// 1012  * @param   uint8 pBuf - pointer to the data
// 1013  *
// 1014  * @return  None
// 1015  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1016 void MT_SysAdcRead(uint8 *pBuf)
MT_SysAdcRead:
          CFI Block cfiBlock95 Using cfiCommon0
          CFI Function MT_SysAdcRead
        CODE
// 1017 {
        FUNCALL MT_SysAdcRead, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysAdcRead, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysAdcRead, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysAdcRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1018 #ifndef HAL_BOARD_LM3S
// 1019   uint8 channel, resolution;
// 1020   uint16 tempValue;
// 1021   uint8 retArray[2];
// 1022   uint8 cmdId;
// 1023 
// 1024   /* parse header */
// 1025   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine15 & 0xFFFF
// 1026   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1027 
// 1028   /* Channel */
// 1029   channel = *pBuf++;
??CrossCallReturnLabel_30:
        MOV     R1,A
// 1030 
// 1031   /* Resolution */
// 1032   resolution = *pBuf++;
// 1033 
// 1034   /* Voltage reading */
// 1035   switch (channel)
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for MT_SysAdcRead>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysAdcRead_0
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        14
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysAdcRead_1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        15
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysAdcRead_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysAdcRead_3
        CODE
// 1036   {
// 1037     /* Analog input channel */
// 1038     case HAL_ADC_CHANNEL_0:
// 1039     case HAL_ADC_CHANNEL_1:
// 1040     case HAL_ADC_CHANNEL_2:
// 1041     case HAL_ADC_CHANNEL_3:
// 1042     case HAL_ADC_CHANNEL_4:
// 1043     case HAL_ADC_CHANNEL_5:
// 1044     case HAL_ADC_CHANNEL_6:
// 1045     case HAL_ADC_CHANNEL_7:
// 1046       tempValue = HalAdcRead(channel, resolution);
??MT_SysAdcRead_0:
        ; Setup parameters for call to function HalAdcRead
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        SJMP    ??MT_SysAdcRead_4
// 1047       break;
// 1048 
// 1049     /* Temperature sensor */
// 1050     case(HAL_ADC_CHANNEL_TEMP):
// 1051       tempValue = HalAdcRead(HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
??MT_SysAdcRead_1:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0xe
        SJMP    ??MT_SysAdcRead_4
// 1052       break;
// 1053 
// 1054     /* Voltage reading */
// 1055     case(HAL_ADC_CHANNEL_VDD):
// 1056       tempValue = HalAdcRead(HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
??MT_SysAdcRead_2:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0xf
??MT_SysAdcRead_4:
        LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
// 1057       break;
        SJMP    ??MT_SysAdcRead_5
// 1058 
// 1059     /* Undefined channels */
// 1060     default:
// 1061       tempValue = 0x00;
??MT_SysAdcRead_3:
        MOV     R0,#0x0
        MOV     R1,#0x0
// 1062       break;
// 1063   }
// 1064 
// 1065   retArray[0] = LO_UINT16(tempValue);
??MT_SysAdcRead_5:
        MOV     A,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1066   retArray[1] = HI_UINT16(tempValue);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        LCALL   ??Subroutine42_0 & 0xFFFF
// 1067 
// 1068   /* Build and send back the response */
// 1069   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, retArray);
??CrossCallReturnLabel_91:
        MOV     A,R6
        MOV     R2,A
          CFI EndBlock cfiBlock95
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
// 1070 #endif /* #ifndef HAL_BOARD_LM3S */
// 1071 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV     A,#0x2
          CFI EndBlock cfiBlock96
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock97

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond98 Using cfiCommon0
          CFI Function MT_SysOsalNVLength
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function MT_SysRandom
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker100 Using cfiCommon1
          CFI (cfiPicker100) NoFunction
          CFI (cfiPicker100) Picker
        MOV     A,R3
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiPicker100
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond101 Using cfiCommon0
          CFI Function MT_SysPing
          CFI Conditional ??CrossCallReturnLabel_89
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function MT_SysOsalNVRead
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function MT_SysAdcRead
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function MT_SysOsalNVLength
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function MT_SysRandom
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker106 Using cfiCommon1
          CFI (cfiPicker106) NoFunction
          CFI (cfiPicker106) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x2
        RET
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function MT_SysOsalStopTimer
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function MT_SysAdcRead
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109
// 1072 
// 1073 /**************************************************************************************************
// 1074  * @fn      MT_SysGpio
// 1075  *
// 1076  * @brief   ZAccel RPC interface for controlling the available GPIO pins.
// 1077  *
// 1078  * @param   uint8 pBuf - pointer to the data
// 1079  *
// 1080  * @return  None
// 1081  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1082 void MT_SysGpio(uint8 *pBuf)
MT_SysGpio:
          CFI Block cfiBlock110 Using cfiCommon0
          CFI Function MT_SysGpio
        CODE
// 1083 {
        FUNCALL MT_SysGpio, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
// 1084   uint8 cmd, val;
// 1085   GPIO_Op_t op;
// 1086 
// 1087   cmd = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
// 1088   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1089 
// 1090   op = (GPIO_Op_t)(*pBuf++);
// 1091   val = *pBuf;
// 1092 
// 1093   switch (op)
// 1094   {
// 1095     case GPIO_DIR:
// 1096       if (val & BV(0)) {GPIO_DIR_OUT(0);} else {GPIO_DIR_IN(0);}
// 1097       if (val & BV(1)) {GPIO_DIR_OUT(1);} else {GPIO_DIR_IN(1);}
// 1098       if (val & BV(2)) {GPIO_DIR_OUT(2);} else {GPIO_DIR_IN(2);}
// 1099       if (val & BV(3)) {GPIO_DIR_OUT(3);} else {GPIO_DIR_IN(3);}
// 1100       break;
// 1101 
// 1102     case GPIO_TRI:
// 1103       if(val & BV(0)) {GPIO_TRI(0);} else if(val & BV(4)) {GPIO_PULL_DN(0);} else {GPIO_PULL_UP(0);}
// 1104       if(val & BV(1)) {GPIO_TRI(1);} else if(val & BV(5)) {GPIO_PULL_DN(1);} else {GPIO_PULL_UP(1);}
// 1105       if(val & BV(2)) {GPIO_TRI(2);} else if(val & BV(6)) {GPIO_PULL_DN(2);} else {GPIO_PULL_UP(2);}
// 1106       if(val & BV(3)) {GPIO_TRI(3);} else if(val & BV(7)) {GPIO_PULL_DN(3);} else {GPIO_PULL_UP(3);}
// 1107       break;
// 1108 
// 1109     case GPIO_SET:
// 1110       if (val & BV(0)) {GPIO_SET(0);}
// 1111       if (val & BV(1)) {GPIO_SET(1);}
// 1112       if (val & BV(2)) {GPIO_SET(2);}
// 1113       if (val & BV(3)) {GPIO_SET(3);}
// 1114       break;
// 1115 
// 1116     case GPIO_CLR:
// 1117       if (val & BV(0)) {GPIO_CLR(0);}
// 1118       if (val & BV(1)) {GPIO_CLR(1);}
// 1119       if (val & BV(2)) {GPIO_CLR(2);}
// 1120       if (val & BV(3)) {GPIO_CLR(3);}
// 1121       break;
// 1122 
// 1123     case GPIO_TOG:
// 1124       if (val & BV(0)) {GPIO_TOG(0);}
// 1125       if (val & BV(1)) {GPIO_TOG(1);}
// 1126       if (val & BV(2)) {GPIO_TOG(2);}
// 1127       if (val & BV(3)) {GPIO_TOG(3);}
// 1128       break;
// 1129 
// 1130     case GPIO_GET:
// 1131       break;
// 1132 
// 1133     case GPIO_HiD:
// 1134       (val) ? GPIO_HiD_SET() :  GPIO_HiD_CLR();
// 1135       break;
// 1136 
// 1137     default:
// 1138       break;
// 1139   }
// 1140 
// 1141   val  = (GPIO_GET(0)) ? BV(0) : 0;
// 1142   val |= (GPIO_GET(1)) ? BV(1) : 0;
// 1143   val |= (GPIO_GET(2)) ? BV(2) : 0;
// 1144   val |= (GPIO_GET(3)) ? BV(3) : 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        LCALL   ??Subroutine45_0 & 0xFFFF
// 1145 
// 1146   /* Build and send back the response */
// 1147   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &val);
??CrossCallReturnLabel_95:
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1148 }
        MOV     A,#0x1
        SJMP    ??Subroutine43_0
          CFI EndBlock cfiBlock110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock111 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 2)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV     A,#0x2
          CFI EndBlock cfiBlock111
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiBlock112 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 8)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock112
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiBlock113 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock113
// 1149 
// 1150 /**************************************************************************************************
// 1151  * @fn      MT_SysStackTune
// 1152  *
// 1153  * @brief   ZAccel RPC interface for tuning the stack parameters to adjust performance
// 1154  *
// 1155  * @param   uint8 pBuf - pointer to the data
// 1156  *
// 1157  * @return  None
// 1158  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1159 void MT_SysStackTune(uint8 *pBuf)
MT_SysStackTune:
          CFI Block cfiBlock114 Using cfiCommon0
          CFI Function MT_SysStackTune
        CODE
// 1160 {
        FUNCALL MT_SysStackTune, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysStackTune, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysStackTune, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysStackTune, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1161   uint8 cmd, rtrn;
// 1162 
// 1163   cmd = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
// 1164   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1165 
// 1166   switch (*pBuf++)
        MOV     A,R2
        ADD     A,#0x3
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JZ      ??MT_SysStackTune_0
        DEC     A
        JZ      ??MT_SysStackTune_1
        SJMP    ??MT_SysStackTune_2
// 1167   {
// 1168   case STK_TX_PWR:
// 1169     rtrn = ZMacSetReq(ZMacPhyTransmitPowerSigned, pBuf);
??MT_SysStackTune_0:
        ; Setup parameters for call to function ZMacSetReq
        MOV     R1,#-0x20
        SJMP    ??MT_SysStackTune_3
// 1170     break;
// 1171 
// 1172   case STK_RX_ON_IDLE:
// 1173     if ((*pBuf != TRUE) && (*pBuf != FALSE))
??MT_SysStackTune_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??MT_SysStackTune_4
        MOVX    A,@DPTR
        JZ      ??MT_SysStackTune_4
// 1174     {
// 1175       (void)ZMacGetReq(ZMacRxOnIdle, &rtrn);
        ; Setup parameters for call to function ZMacGetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x52
        LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
        SJMP    ??MT_SysStackTune_5
// 1176     }
// 1177     else
// 1178     {
// 1179       rtrn = ZMacSetReq(ZMacRxOnIdle, pBuf);
??MT_SysStackTune_4:
        ; Setup parameters for call to function ZMacSetReq
        MOV     R1,#0x52
??MT_SysStackTune_3:
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??MT_SysStackTune_6
// 1180     }
// 1181     break;
// 1182 
// 1183   default:
// 1184     rtrn = ZInvalidParameter;
??MT_SysStackTune_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
??MT_SysStackTune_6:
        MOVX    @DPTR,A
// 1185     break;
// 1186   }
// 1187 
// 1188   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
??MT_SysStackTune_5:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LJMP    ?Subroutine2 & 0xFFFF
// 1189 }
          CFI EndBlock cfiBlock114
// 1190 
// 1191 /***************************************************************************************************
// 1192  * @fn      MT_SysSetUtcTime
// 1193  *
// 1194  * @brief   Set the OSAL UTC Time. UTC rollover is: 06:28:16 02/07/2136
// 1195  *
// 1196  * @param   pBuf - pointer to time parameters
// 1197  *
// 1198  * @return  None
// 1199  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1200 void MT_SysSetUtcTime(uint8 *pBuf)
MT_SysSetUtcTime:
          CFI Block cfiBlock115 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
        CODE
// 1201 {
        FUNCALL MT_SysSetUtcTime, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, osal_ConvertUTCSecs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, osal_setClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1202   uint8 cmdId;
// 1203   uint8 retStat;
// 1204   UTCTime utcSecs;
// 1205 
// 1206   /* Parse header */
// 1207   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
// 1208   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R6
        ADD     A,#0x3
        MOV     R6,A
        JNC     ??MT_SysSetUtcTime_0
        INC     R7
// 1209 
// 1210   utcSecs = osal_build_uint32( pBuf, 4 );
??MT_SysSetUtcTime_0:
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x4
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
// 1211   if ( utcSecs == 0 )
        MOV     A,R2
        ORL     A,?V5
        ORL     A,?V6
        ORL     A,?V7
        JZ      $+5
        LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
// 1212   {
// 1213     UTCTimeStruct utc;
// 1214 
// 1215     /* Skip past UTC time */
// 1216     pBuf += 4;
// 1217 
// 1218     /* Get time and date parameters */
// 1219     utc.hour = *pBuf++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine26 & 0xFFFF
// 1220     utc.minutes = *pBuf++;
??CrossCallReturnLabel_54:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine26 & 0xFFFF
// 1221     utc.seconds = *pBuf++;
??CrossCallReturnLabel_55:
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine25 & 0xFFFF
// 1222     utc.month = (*pBuf++) - 1;
??CrossCallReturnLabel_52:
        MOVX    A,@DPTR
        DEC     A
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine25 & 0xFFFF
// 1223     utc.day = (*pBuf++) - 1;
??CrossCallReturnLabel_53:
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1224     utc.year = osal_build_uint16 ( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        MOV     A,R6
        ADD     A,#0x9
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1225 
// 1226     if ((utc.hour < 24) && (utc.minutes < 60) && (utc.seconds < 60) &&
// 1227         (utc.month < 12) && (utc.day < 31) && (utc.year > 1999) && (utc.year < 2136))
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x18
        JC      $+5
        LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3c
        JC      $+5
        LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3c
        JC      $+5
        LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xc
        JC      $+5
        LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x1f
        JC      $+5
        LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x30
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x8
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x78
        MOV     A,R1
        SUBB    A,#0x0
        JNC     ??MT_SysSetUtcTime_2
// 1228     {
// 1229       /* Got past the course filter, now check for leap year */
// 1230       if ((utc.month != 1) || (utc.day < (IsLeapYear( utc.year ) ? 29 : 28)))
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??MT_SysSetUtcTime_3
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#-0x70
        MOV     R3,#0x1
        LCALL   ?US_DIV_MOD
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JZ      ??MT_SysSetUtcTime_4
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JZ      ??MT_SysSetUtcTime_5
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x3
        JNZ     ??MT_SysSetUtcTime_5
??MT_SysSetUtcTime_4:
        MOV     R2,#0x1d
        SJMP    ??MT_SysSetUtcTime_6
??MT_SysSetUtcTime_5:
        MOV     R2,#0x1c
??MT_SysSetUtcTime_6:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        SUBB    A,0xE0 /* A   */
        CLR     C
        XRL     A,PSW
        RLC     A
        JNC     ??MT_SysSetUtcTime_2
// 1231       {
// 1232         /* Numbers look reasonable, convert to UTC */
// 1233         utcSecs = osal_ConvertUTCSecs( &utc );
??MT_SysSetUtcTime_3:
        ; Setup parameters for call to function osal_ConvertUTCSecs
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_ConvertUTCSecs::?relay`; Banked call to: osal_ConvertUTCSecs
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
// 1234       }
// 1235     }
// 1236   }
// 1237 
// 1238   if ( utcSecs == 0 )
??MT_SysSetUtcTime_1:
        MOV     A,?V4
        ORL     A,?V5
        ORL     A,?V6
        ORL     A,?V7
        JNZ     ??MT_SysSetUtcTime_7
// 1239   {
// 1240     /* Bad parameter(s) */
// 1241     retStat = ZInvalidParameter;
??MT_SysSetUtcTime_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        SJMP    ??MT_SysSetUtcTime_8
// 1242   }
// 1243   else
// 1244   {
// 1245     /* Parameters accepted, set the time */
// 1246     osal_setClock( utcSecs );
??MT_SysSetUtcTime_7:
        ; Setup parameters for call to function osal_setClock
        MOV     R2,?V4
        MOV     R3,?V5
        MOV     R4,?V6
        MOV     R5,?V7
        LCALL   `??osal_setClock::?relay`; Banked call to: osal_setClock
// 1247     retStat = ZSuccess;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
// 1248   }
??MT_SysSetUtcTime_8:
        LCALL   ??Subroutine45_0 & 0xFFFF
// 1249 
// 1250   /* Build and send back the response */
// 1251   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1252                                  cmdId, 1, &retStat);
??CrossCallReturnLabel_96:
        MOV     R2,?V0
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1253 }
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock115
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock116 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock116

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond117 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function MT_SysSetUtcTime
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker119 Using cfiCommon1
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_70:
        RET
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond120 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
          CFI Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function MT_SysSetUtcTime
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_55
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-4
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function MT_SysSetUtcTime
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_52
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-4
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function MT_SysSetUtcTime
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_53
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_80:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function MT_SysCommandProcessing
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_40
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-4
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function MT_SysCommandProcessing
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_41
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-4
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function MT_SysCommandProcessing
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_42
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function MT_SysCommandProcessing
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_43
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function MT_SysSetUtcTime
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_54
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-6
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function MT_SysSetUtcTime
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_55
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-6
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function MT_SysSetUtcTime
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_52
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-6
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function MT_SysSetUtcTime
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_53
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-6
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker134 Using cfiCommon1
          CFI (cfiPicker134) NoFunction
          CFI (cfiPicker134) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiPicker134

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond135 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function MT_SysSetUtcTime
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker137 Using cfiCommon1
          CFI (cfiPicker137) NoFunction
          CFI (cfiPicker137) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_71:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiPicker137

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond138 Using cfiCommon0
          CFI Function MT_SysOsalNVDelete
          CFI Conditional ??CrossCallReturnLabel_92
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function MT_SysOsalTimerExpired
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond141 Using cfiCommon0
          CFI Function MT_SysOsalStartTimer
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function MT_SysGpio
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond142) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond142) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond142) CFA_SP SP+-7
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function MT_SysSetUtcTime
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function MT_SysOsalNVDelete
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function MT_SysOsalTimerExpired
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        RET
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146
// 1254 
// 1255 /***************************************************************************************************
// 1256  * @fn      MT_SysGetUtcTime
// 1257  *
// 1258  * @brief   Get the OSAL UTC time
// 1259  *
// 1260  * @param   None
// 1261  *
// 1262  * @return  32-bit and Parsed UTC time
// 1263  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1264 void MT_SysGetUtcTime(void)
MT_SysGetUtcTime:
          CFI Block cfiBlock147 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
        CODE
// 1265 {
        FUNCALL MT_SysGetUtcTime, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_getClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_ConvertUTCTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1266   uint8 len;
// 1267   uint8 *buf;
// 1268 
// 1269   len = sizeof( UTCTime ) + sizeof( UTCTimeStruct );
// 1270 
// 1271   buf = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xb
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 1272   if ( buf )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??MT_SysGetUtcTime_0 & 0xFFFF
// 1273   {
// 1274     uint8 *pBuf;
// 1275     UTCTime utcSecs;
// 1276     UTCTimeStruct utcTime;
// 1277 
// 1278     // Get current 32-bit UTC time and parse it
// 1279     utcSecs = osal_getClock();
        ; Setup parameters for call to function osal_getClock
        LCALL   `??osal_getClock::?relay`; Banked call to: osal_getClock
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
// 1280     osal_ConvertUTCTime( &utcTime, utcSecs );
        ; Setup parameters for call to function osal_ConvertUTCTime
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_ConvertUTCTime::?relay`; Banked call to: osal_ConvertUTCTime
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1281 
// 1282     // Start with 32-bit UTC time
// 1283     pBuf = osal_buffer_uint32( buf, utcSecs );
        ; Setup parameters for call to function osal_buffer_uint32
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1284 
// 1285     // Concatenate parsed UTC time fields
// 1286     *pBuf++ = utcTime.hour;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
// 1287     *pBuf++ = utcTime.minutes;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_65:
        MOVX    @DPTR,A
// 1288     *pBuf++ = utcTime.seconds;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_66:
        INC     DPTR
        MOVX    @DPTR,A
// 1289     *pBuf++ = utcTime.month + 1;  // Convert to human numbers
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_37:
        MOVX    @DPTR,A
// 1290     *pBuf++ = utcTime.day + 1;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_38:
        INC     DPTR
        MOVX    @DPTR,A
// 1291     *pBuf++ = LO_UINT16( utcTime.year );
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_31:
        MOVX    @DPTR,A
// 1292     *pBuf++ = HI_UINT16( utcTime.year );
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        INC     DPTR
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_32:
        INC     DPTR
        MOVX    @DPTR,A
// 1293 
// 1294     /* Build and send back the response */
// 1295     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1296                                    MT_SYS_GET_TIME, (uint8)(pBuf-buf), buf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,R6
        MOV     R0,A
        MOV     A,R2
        ADD     A,#0x7
        CLR     C
        SUBB    A,R0
        MOV     R3,A
        MOV     R2,#0x11
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1297 
// 1298     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1299   }
// 1300 }
??MT_SysGetUtcTime_0:
        MOV     A,#0x7
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock147

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond148 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function MT_SysGetUtcTime
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker150 Using cfiCommon1
          CFI (cfiPicker150) NoFunction
          CFI (cfiPicker150) Picker
        MOVX    A,@DPTR
        INC     A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiPicker150

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond151 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function MT_SysGetUtcTime
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker153 Using cfiCommon1
          CFI (cfiPicker153) NoFunction
          CFI (cfiPicker153) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_67:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiPicker153

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond154 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function MT_SysGetUtcTime
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function MT_SysGetUtcTime
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_31
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function MT_SysGetUtcTime
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_32
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-4
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker158 Using cfiCommon1
          CFI (cfiPicker158) NoFunction
          CFI (cfiPicker158) Picker
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        RET
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiPicker158
// 1301 
// 1302 /***************************************************************************************************
// 1303  * @fn      MT_SysSetTxPower
// 1304  *
// 1305  * @brief   Set the transmit power.
// 1306  *
// 1307  * @param   pBuf - MT message containing the ZMacTransmitPower_t power level to set.
// 1308  *
// 1309  * @return  None
// 1310  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1311 void MT_SysSetTxPower(uint8 *pBuf)
MT_SysSetTxPower:
          CFI Block cfiBlock159 Using cfiCommon0
          CFI Function MT_SysSetTxPower
        CODE
// 1312 {
        FUNCALL MT_SysSetTxPower, macRadioSetTxPower
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetTxPower, MAC_MlmeSetReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetTxPower, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 1313   /* A local variable to hold the signed dBm value of TxPower that is being requested. */
// 1314   uint8 signed_dBm_of_TxPower_requeseted;
// 1315 
// 1316   /*
// 1317    * A local variable to hold the signed dBm value of TxPower that can be set which is closest to
// 1318    * the requested dBm value of TxPower, but which is also valid according to a complex set of
// 1319    * compile-time and run-time configuration which is interpreted by the macRadioSetTxPower()
// 1320    * function.
// 1321    */
// 1322   uint8 signed_dBm_of_TxPower_range_corrected;
// 1323 
// 1324   /* Parse the requested dBm from the RPC message. */
// 1325   signed_dBm_of_TxPower_requeseted = pBuf[MT_RPC_POS_DAT0];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1326 
// 1327   /*
// 1328    * MAC_MlmeSetReq() will store an out-of-range dBm parameter value into the NIB. So it is not
// 1329    * possible to learn the actual dBm value that will be set by invoking MACMlmeGetReq().
// 1330    * But this actual dBm value is a required return value in the SRSP to this SREQ. Therefore,
// 1331    * it is necessary to make this redundant pre-call to macRadioSetTxPower() here in order to run
// 1332    * the code that will properly constrain the requested dBm to a valid range based on both the
// 1333    * compile-time and the run-time configurations that affect the available valid ranges
// 1334    * (i.e. MAC_MlmeSetReq() itself will invoke for a second time the macRadioSetTxPower() function).
// 1335    */
// 1336   signed_dBm_of_TxPower_range_corrected = macRadioSetTxPower(signed_dBm_of_TxPower_requeseted);
        ; Setup parameters for call to function macRadioSetTxPower
        MOV     R1,A
        LCALL   `??macRadioSetTxPower::?relay`; Banked call to: macRadioSetTxPower
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 1337 
// 1338   /*
// 1339    * Call the function to store the requested dBm in the MAC PIB and to set the TxPower as closely
// 1340    * as possible within the TxPower range that is valid for the compile-time and run-time
// 1341    * configuration.
// 1342    */
// 1343   (void)MAC_MlmeSetReq(MAC_PHY_TRANSMIT_POWER_SIGNED, &signed_dBm_of_TxPower_requeseted);
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#-0x20
        LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
// 1344 
// 1345   /* Build and send back the response that includes the actual dBm TxPower that can be set. */
// 1346   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1347                                        MT_SYS_SET_TX_POWER, 1,
// 1348                                        &signed_dBm_of_TxPower_range_corrected);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP102_8
        MOV     R3,#0x1
        MOV     R2,#0x14
        LJMP    ?Subroutine0 & 0xFFFF
// 1349 }
          CFI EndBlock cfiBlock159
// 1350 
// 1351 #if defined ( FEATURE_SYSTEM_STATS )
// 1352 /***************************************************************************************************
// 1353  * @fn      MT_SysZDiagsInitStats
// 1354  *
// 1355  * @brief   Initialize the statistics table in NV or restore values from
// 1356  *          NV into the Statistics table in RAM
// 1357  *
// 1358  * @param   None
// 1359  *
// 1360  * @return  None
// 1361  ***************************************************************************************************/
// 1362 void MT_SysZDiagsInitStats(void)
// 1363 {
// 1364   uint8 retValue;
// 1365 
// 1366   retValue = ZDiagsInitStats();
// 1367 
// 1368   /* Build and send back the response */
// 1369   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1370                                 MT_SYS_ZDIAGS_INIT_STATS, 1, &retValue);
// 1371 }
// 1372 
// 1373 /***************************************************************************************************
// 1374  * @fn      MT_SysZDiagsClearStats
// 1375  *
// 1376  * @brief   Clears the statistics table in RAM and NV if option flag set.
// 1377  *
// 1378  * @param   uint8 pBuf - pointer to the data
// 1379  *
// 1380  * @return  None
// 1381  ***************************************************************************************************/
// 1382 void MT_SysZDiagsClearStats(uint8 *pBuf)
// 1383 {
// 1384   uint8 cmdId;
// 1385   uint8 clearNV;
// 1386   uint32 sysClock;
// 1387   uint8 retBuf[4];
// 1388 
// 1389   /* parse header */
// 1390   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1391   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1392 
// 1393   clearNV = *pBuf;
// 1394 
// 1395   /* returns the system clock of the time when the statistics were cleared */
// 1396   sysClock = ZDiagsClearStats( clearNV );
// 1397 
// 1398   retBuf[0] = BREAK_UINT32( sysClock, 0);
// 1399   retBuf[1] = BREAK_UINT32( sysClock, 1);
// 1400   retBuf[2] = BREAK_UINT32( sysClock, 2);
// 1401   retBuf[3] = BREAK_UINT32( sysClock, 3);
// 1402 
// 1403   /* Build and send back the response */
// 1404   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1405                                cmdId, 4, retBuf);
// 1406 }
// 1407 
// 1408 /***************************************************************************************************
// 1409  * @fn      MT_SysZDiagsGetStatsAttr
// 1410  *
// 1411  * @brief   Reads specific system (attribute) ID statistics and/or metrics.
// 1412  *
// 1413  * @param   uint8 pBuf - pointer to the data
// 1414  *
// 1415  * @return  None
// 1416  ***************************************************************************************************/
// 1417 void MT_SysZDiagsGetStatsAttr(uint8 *pBuf)
// 1418 {
// 1419   uint8 cmdId;
// 1420   uint16 attributeId;
// 1421   uint32 attrValue;
// 1422   uint8 retBuf[4];
// 1423 
// 1424   /* parse header */
// 1425   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1426   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1427 
// 1428   /* Get the Attribute ID */
// 1429   attributeId = BUILD_UINT16(pBuf[0], pBuf[1]);
// 1430 
// 1431   attrValue = ZDiagsGetStatsAttr( attributeId );
// 1432 
// 1433   retBuf[0] = BREAK_UINT32( attrValue, 0);
// 1434   retBuf[1] = BREAK_UINT32( attrValue, 1);
// 1435   retBuf[2] = BREAK_UINT32( attrValue, 2);
// 1436   retBuf[3] = BREAK_UINT32( attrValue, 3);
// 1437 
// 1438   /* Build and send back the response */
// 1439   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1440                                cmdId, 4, retBuf);
// 1441 }
// 1442 
// 1443 /***************************************************************************************************
// 1444  * @fn      MT_SysZDiagsRestoreStatsFromNV
// 1445  *
// 1446  * @brief   Restores the statistics table from NV into the RAM table.
// 1447  *
// 1448  * @param   None
// 1449  *
// 1450  * @return  None
// 1451  ***************************************************************************************************/
// 1452 void MT_SysZDiagsRestoreStatsFromNV(void)
// 1453 {
// 1454   uint8 retValue;
// 1455 
// 1456   retValue = ZDiagsRestoreStatsFromNV();
// 1457 
// 1458   /* Build and send back the response */
// 1459   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1460                                 MT_SYS_ZDIAGS_RESTORE_STATS_NV, 1, &retValue);
// 1461 }
// 1462 
// 1463 /***************************************************************************************************
// 1464  * @fn      MT_SysZDiagsSaveStatsToNV
// 1465  *
// 1466  * @brief   Saves the statistics table from RAM to NV.
// 1467  *
// 1468  * @param   None
// 1469  *
// 1470  * @return  None
// 1471  ***************************************************************************************************/
// 1472 void MT_SysZDiagsSaveStatsToNV(void)
// 1473 {
// 1474   uint32 sysClock;
// 1475   uint8 retBuf[4];
// 1476 
// 1477   /* returns the system clock of the time when the statistics were saved to NV */
// 1478   sysClock = ZDiagsSaveStatsToNV();
// 1479 
// 1480   retBuf[0] = BREAK_UINT32( sysClock, 0);
// 1481   retBuf[1] = BREAK_UINT32( sysClock, 1);
// 1482   retBuf[2] = BREAK_UINT32( sysClock, 2);
// 1483   retBuf[3] = BREAK_UINT32( sysClock, 3);
// 1484 
// 1485   /* Build and send back the response */
// 1486   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1487                                MT_SYS_ZDIAGS_SAVE_STATS_TO_NV, 4, retBuf);
// 1488 }
// 1489 #endif /* FEATURE_SYSTEM_STATS */
// 1490 
// 1491 #endif /* MT_SYS_FUNC */
// 1492 
// 1493 /***************************************************************************************************
// 1494  * SUPPORT
// 1495  ***************************************************************************************************/
// 1496 
// 1497 /***************************************************************************************************
// 1498  * @fn      MT_SysResetInd()
// 1499  *
// 1500  * @brief   Sends a ZTOOL "reset response" message.
// 1501  *
// 1502  * @param   None
// 1503  *
// 1504  * @return  None
// 1505  *
// 1506  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1507 void MT_SysResetInd(void)
MT_SysResetInd:
          CFI Block cfiBlock160 Using cfiCommon0
          CFI Function MT_SysResetInd
        CODE
// 1508 {
        ; Saved register size: 0
        ; Auto size: 0
// 1509 #if 0   //chaokw
// 1510   uint8 retArray[6];
// 1511 
// 1512   retArray[0] = ResetReason();   /* Reason */
// 1513   osal_memcpy( &retArray[1], MTVersionString, 5 );   /* Revision info */
// 1514   /* Send out Reset Response message */
// 1515   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_RESET_IND,
// 1516                                 sizeof(retArray), retArray);
// 1517 #endif
// 1518 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock160
// 1519 
// 1520 /***************************************************************************************************
// 1521  * @fn      MT_SysOsalTimerExpired()
// 1522  *
// 1523  * @brief   Sends a SYS Osal Timer Expired
// 1524  *
// 1525  * @param   None
// 1526  *
// 1527  * @return  None
// 1528  *
// 1529  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1530 void MT_SysOsalTimerExpired(uint8 Id)
MT_SysOsalTimerExpired:
          CFI Block cfiBlock161 Using cfiCommon0
          CFI Function MT_SysOsalTimerExpired
        CODE
// 1531 {
        FUNCALL MT_SysOsalTimerExpired, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LCALL   ?Subroutine23 & 0xFFFF
// 1532   uint8 retValue;
// 1533   retValue = Id;
// 1534   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_OSAL_TIMER_EXPIRED, 1, &retValue);
??CrossCallReturnLabel_93:
        MOV     R2,#-0x7f
        MOV     R1,#0x41
        LJMP    ??Subroutine40_0 & 0xFFFF
          CFI EndBlock cfiBlock161
// 1535 }
// 1536 
// 1537 #if defined ( MT_SYS_JAMMER_FEATURE )
// 1538 /***************************************************************************************************
// 1539  * @fn      MT_SysJammerParameters
// 1540  *
// 1541  * @brief   Set the Jammer detection parameters.
// 1542  *
// 1543  * @param   pBuf - MT message containing the parameters.
// 1544  *
// 1545  * @return  None
// 1546  ***************************************************************************************************/
// 1547 void MT_SysJammerParameters( uint8 *pBuf )
// 1548 {
// 1549   uint8 status = SUCCESS;
// 1550   
// 1551   // Adjust for the data
// 1552   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1553   
// 1554   // Number of continuous events needed to detect Jam
// 1555   jammerContinuousEvents = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1556   jammerDetections = jammerContinuousEvents;
// 1557   pBuf += 2;
// 1558   
// 1559   // Noise Level need to be a Jam
// 1560   jammerHighNoiseLevel = *pBuf++;
// 1561   
// 1562   // The time between each noise level reading
// 1563   jammerDetectPeriodTime = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
// 1564   
// 1565   // Update the timer
// 1566   osal_start_reload_timer( jammerTaskID, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
// 1567   
// 1568   /* Build and send back the response that includes the actual dBm TxPower that can be set. */
// 1569   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1570                                        MT_SYS_JAMMER_PARAMETERS, 1, &status );
// 1571 }
// 1572 
// 1573 /***************************************************************************************************
// 1574  * @fn      MT_SysJammerInd()
// 1575  *
// 1576  * @brief   Sends a jammer indication message.
// 1577  *
// 1578  * @param   jammerInd - TRUE if jammer detected, FALSE if changed to undetected
// 1579  *
// 1580  * @return  None
// 1581  *
// 1582  ***************************************************************************************************/
// 1583 void MT_SysJammerInd( uint8 jammerInd )
// 1584 {
// 1585   /* Send out Reset Response message */
// 1586   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_JAMMER_IND,
// 1587                                 1, &jammerInd );
// 1588 }
// 1589 
// 1590 /***************************************************************************************************
// 1591  * @fn      jammerInit()
// 1592  *
// 1593  * @brief   Jammer Detection task initialization function
// 1594  *
// 1595  * @param   taskId - task ID 
// 1596  *
// 1597  * @return  None
// 1598  *
// 1599  ***************************************************************************************************/
// 1600 void jammerInit( uint8 taskId )
// 1601 {
// 1602   jammerTaskID = taskId; 
// 1603   
// 1604   // Start the jammer check timer
// 1605   osal_start_reload_timer( taskId, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
// 1606 }
// 1607 
// 1608 /***************************************************************************************************
// 1609  * @fn      jammerEventLoop()
// 1610  *
// 1611  * @brief   Jammer Detection task event processing function
// 1612  *
// 1613  * @param   taskId - task ID 
// 1614  * @param   events - task events 
// 1615  *
// 1616  * @return  remaining events
// 1617  *
// 1618  ***************************************************************************************************/
// 1619 uint16 jammerEventLoop( uint8 taskId, uint16 events )
// 1620 {
// 1621   osal_event_hdr_t  *pMsg;
// 1622 
// 1623   if (events & SYS_EVENT_MSG)
// 1624   {
// 1625     if ( (pMsg = (osal_event_hdr_t *) osal_msg_receive( taskId )) != NULL )
// 1626     {
// 1627       switch ( pMsg->event )
// 1628       {
// 1629         default:
// 1630           break;
// 1631       }
// 1632 
// 1633       osal_msg_deallocate( (byte *)pMsg );
// 1634     }
// 1635 
// 1636     events ^= SYS_EVENT_MSG;
// 1637   }
// 1638   else if ( events & JAMMER_CHECK_EVT )
// 1639   {
// 1640     // Make sure we aren't currently receiving a message
// 1641     // and the radio is active.
// 1642     if ( MAC_RX_IS_PHYSICALLY_ACTIVE() == MAC_RX_ACTIVE_NO_ACTIVITY )
// 1643     {
// 1644       int8 rssiDbm = -128;
// 1645       
// 1646       // Read the noise level
// 1647       if ( RSSISTAT & 0x01 )
// 1648       {
// 1649         /* Add the RSSI offset */  
// 1650         rssiDbm = RSSI + MAC_RADIO_RSSI_OFFSET;
// 1651 
// 1652         /* Adjust for external PA/LNA, if any */
// 1653         MAC_RADIO_RSSI_LNA_OFFSET( rssiDbm );
// 1654       
// 1655         // Check for a noise level that's high
// 1656         if ( jammerDetections && (rssiDbm  > jammerHighNoiseLevel) )
// 1657         {
// 1658           jammerDetections--;
// 1659           if ( jammerDetections == 0 )
// 1660           {
// 1661             // Jam detected
// 1662             MT_SysJammerInd( TRUE );
// 1663           }
// 1664         }
// 1665         else if ( rssiDbm <= jammerHighNoiseLevel )
// 1666         {
// 1667           if ( jammerDetections == 0 )
// 1668           {
// 1669             // Jam cleared
// 1670             MT_SysJammerInd( FALSE );
// 1671           }
// 1672           jammerDetections = jammerContinuousEvents;
// 1673         }
// 1674       }
// 1675     }
// 1676     events ^= JAMMER_CHECK_EVT;
// 1677   }
// 1678   else
// 1679   {
// 1680     events = 0;  /* Discard unknown events. */
// 1681   }
// 1682 
// 1683   return ( events );
// 1684 }
// 1685 #endif // MT_SYS_JAMMER_FEATURE
// 1686 
// 1687 #if defined ( MT_SYS_SNIFFER_FEATURE )
// 1688 /***************************************************************************************************
// 1689  * @fn      MT_SysSnifferParameters
// 1690  *
// 1691  * @brief   Set the sniffer parameters.
// 1692  *
// 1693  * @param   pBuf - MT message containing the parameters.
// 1694  *
// 1695  * @return  None
// 1696  ***************************************************************************************************/
// 1697 void MT_SysSnifferParameters( uint8 *pBuf )
// 1698 {
// 1699   uint8 status = SUCCESS;
// 1700   uint8 param;
// 1701   
// 1702   // Adjust for the data
// 1703   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1704   
// 1705   // Noise Level need to be a Jam
// 1706   param = *pBuf++;
// 1707   
// 1708   if ( param == MT_SYS_SNIFFER_DISABLE )
// 1709   {
// 1710     // Disable Sniffer
// 1711     HAL_BOARD_DISABLE_INTEGRATED_SNIFFER();
// 1712     sniffer = FALSE;
// 1713   }
// 1714   else if ( param == MT_SYS_SNIFFER_ENABLE )
// 1715   {
// 1716     // Enable the Sniffer
// 1717     HAL_BOARD_ENABLE_INTEGRATED_SNIFFER();
// 1718     sniffer = TRUE;
// 1719   }
// 1720   else if ( param == MT_SYS_SNIFFER_GET_SETTING )
// 1721   {
// 1722     status = sniffer; // sniffer setting
// 1723   }
// 1724   else 
// 1725   {
// 1726     status = INVALIDPARAMETER;
// 1727   }
// 1728   
// 1729   /* Build and send back the response that includes the actual dBm TxPower that can be set. */
// 1730   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1731                                        MT_SYS_SNIFFER_PARAMETERS, 1, &status );
// 1732 }
// 1733 #endif // MT_SYS_SNIFFER_FEATURE
// 1734 
// 1735 /**************************************************************************************************
// 1736  * @fn          powerOffSoc
// 1737  *
// 1738  * @brief       put the device in lowest power mode infinitely.
// 1739  *
// 1740  * input parameters
// 1741  *
// 1742  * None.
// 1743  *
// 1744  * output parameters
// 1745  *
// 1746  * None.
// 1747  *
// 1748  * @return      None.
// 1749  **************************************************************************************************
// 1750  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1751 void powerOffSoc(void)
powerOffSoc:
          CFI Block cfiBlock162 Using cfiCommon0
          CFI Function powerOffSoc
        CODE
// 1752 {
        ; Saved register size: 0
        ; Auto size: 0
// 1753 #ifdef ENABLE_MT_SYS_RESET_SHUTDOWN
// 1754   HAL_DISABLE_INTERRUPTS();
// 1755 
// 1756   /* turn off the RF front end device */
// 1757   //TBD, based on the rf-front-end being used
// 1758 
// 1759   /* turn off the receiver */
// 1760   MAC_RADIO_RXTX_OFF();
// 1761   
// 1762   /* just in case a receive was about to start, flush the receive FIFO */
// 1763   MAC_RADIO_FLUSH_RX_FIFO();
// 1764   
// 1765   /* clear any receive interrupt that happened to squeak through */
// 1766   MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
// 1767   
// 1768   /* put MAC timer to sleep */
// 1769   MAC_RADIO_TIMER_SLEEP();
// 1770   
// 1771   /* power of radio */
// 1772   MAC_RADIO_TURN_OFF_POWER();
// 1773   
// 1774   STIF = 0; //HAL_SLEEP_TIMER_CLEAR_INT;
// 1775   
// 1776   if (ZNP_CFG1_UART == znpCfg1)
// 1777   {
// 1778     HalUARTSuspend();
// 1779   }
// 1780   
// 1781   /* Prep CC2530 power mode */
// 1782   //HAL_SLEEP_PREP_POWER_MODE(3);
// 1783   SLEEPCMD &= ~PMODE; /* clear mode bits */
// 1784   SLEEPCMD |= 3;      /* set mode bits  to PM3 */
// 1785   while (!(STLOAD & LDRDY));
// 1786   
// 1787   while (1) //just in case we wake up for some unknown reason
// 1788   {
// 1789     PCON = halSleepPconValue; //execution is suppose to halt with this command. Interrupts are disabled, so the only way to exit this state is using a hardware reset.
// 1790     asm("NOP");
// 1791   }
// 1792 #endif
// 1793 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock162
// 1794 
// 1795 
// 1796 //chaokw

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1797 void MT_SysP2PTransfer(uint8 *pBuf)
MT_SysP2PTransfer:
          CFI Block cfiBlock163 Using cfiCommon0
          CFI Function MT_SysP2PTransfer
        CODE
// 1798 {
        FUNCALL MT_SysP2PTransfer, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysP2PTransfer, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysP2PTransfer, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        LCALL   ?Subroutine10 & 0xFFFF
// 1799     afIncomingMSGPacket_t *MSGpkt;
// 1800     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN); 
??CrossCallReturnLabel_19:
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 1801     if(MSGpkt == NULL)
        MOV     A,R6
        ORL     A,R7
        JZ      ??MT_SysP2PTransfer_0
// 1802     {
// 1803         return;
// 1804     }	
// 1805 	
// 1806     MSGpkt->hdr.event = ZDO_P2P_REQ;	
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x1f
        LCALL   ?Subroutine21 & 0xFFFF
// 1807     MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN ;   //cmd+len,  no 0xfe
??CrossCallReturnLabel_47:
        JNC     ??MT_SysP2PTransfer_1
        INC     R3
??MT_SysP2PTransfer_1:
        LCALL   ?Subroutine14 & 0xFFFF
// 1808     if ( MSGpkt->cmd.DataLength )
??CrossCallReturnLabel_26:
        JZ      ??MT_SysP2PTransfer_2
// 1809     {
// 1810         MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
        LCALL   ?Subroutine20 & 0xFFFF
// 1811         osal_memcpy(MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_LEN], MSGpkt->cmd.DataLength);  
// 1812     }
??CrossCallReturnLabel_44:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP    ??CrossCallReturnLabel_61
// 1813     else
// 1814     {
// 1815         MSGpkt->cmd.Data = NULL;
??MT_SysP2PTransfer_2:
        LCALL   ?Subroutine28 & 0xFFFF
// 1816     }	
// 1817     osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
??CrossCallReturnLabel_61:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 1818 }
??MT_SysP2PTransfer_0:
        SJMP    ??Subroutine46_0
          CFI EndBlock cfiBlock163

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock164 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock164
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiBlock165 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock165
// 1819 
// 1820 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1821 void MT_SysBroadCastTransfer(uint8 *pBuf)
MT_SysBroadCastTransfer:
          CFI Block cfiBlock166 Using cfiCommon0
          CFI Function MT_SysBroadCastTransfer
        CODE
// 1822 {
        FUNCALL MT_SysBroadCastTransfer, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysBroadCastTransfer, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysBroadCastTransfer, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        LCALL   ?Subroutine10 & 0xFFFF
// 1823       afIncomingMSGPacket_t *MSGpkt;
// 1824       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN); 
??CrossCallReturnLabel_20:
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 1825       if(MSGpkt == NULL)
        MOV     A,R6
        ORL     A,R7
        JZ      ??MT_SysBroadCastTransfer_0
// 1826       {
// 1827 	  return;
// 1828       }
// 1829 
// 1830       MSGpkt->hdr.event = ZDO_BROADCAST_REQ;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x16
        LCALL   ?Subroutine21 & 0xFFFF
// 1831       MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN; 
??CrossCallReturnLabel_48:
        JNC     ??MT_SysBroadCastTransfer_1
        INC     R3
??MT_SysBroadCastTransfer_1:
        LCALL   ?Subroutine14 & 0xFFFF
// 1832       if ( MSGpkt->cmd.DataLength )
??CrossCallReturnLabel_27:
        JZ      ??MT_SysBroadCastTransfer_2
// 1833       {
// 1834 	   MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
        LCALL   ?Subroutine20 & 0xFFFF
// 1835 	   osal_memcpy(MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_LEN], MSGpkt->cmd.DataLength);  
// 1836       }
??CrossCallReturnLabel_45:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP    ??CrossCallReturnLabel_62
// 1837       else
// 1838       {
// 1839  	   MSGpkt->cmd.Data = NULL;
??MT_SysBroadCastTransfer_2:
        LCALL   ?Subroutine28 & 0xFFFF
// 1840       }	
// 1841       osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
??CrossCallReturnLabel_62:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 1842 }
??MT_SysBroadCastTransfer_0:
        SJMP    ??Subroutine46_0
          CFI EndBlock cfiBlock166

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond167 Using cfiCommon0
          CFI Function MT_SysP2PTransfer
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function MT_SysBroadCastTransfer
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function MT_SysGroupTransfer
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-2
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker170 Using cfiCommon1
          CFI (cfiPicker170) NoFunction
          CFI (cfiPicker170) Picker
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x20
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R3,#0x0
        ADD     A,#0x3
        RET
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiPicker170

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond171 Using cfiCommon0
          CFI Function MT_SysP2PTransfer
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function MT_SysBroadCastTransfer
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function MT_SysGroupTransfer
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker174 Using cfiCommon1
          CFI (cfiPicker174) NoFunction
          CFI (cfiPicker174) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_69:
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiPicker174

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond175 Using cfiCommon0
          CFI Function MT_SysP2PTransfer
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function MT_SysBroadCastTransfer
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function MT_SysGroupTransfer
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker178 Using cfiCommon1
          CFI (cfiPicker178) NoFunction
          CFI (cfiPicker178) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiPicker178

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond179 Using cfiCommon0
          CFI Function MT_SysP2PTransfer
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function MT_SysBroadCastTransfer
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function MT_SysGroupTransfer
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker182 Using cfiCommon1
          CFI (cfiPicker182) NoFunction
          CFI (cfiPicker182) Picker
        MOV     ?V0,R2
        MOV     ?V1,R3
        ; Setup parameters for call to function osal_msg_allocate
        ; Setup parameters for call to function osal_msg_allocate
        ; Setup parameters for call to function osal_msg_allocate
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#0x2a
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        RET
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiPicker182
// 1843 
// 1844 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1845 void MT_SysGroupTransfer(uint8 *pBuf)  //chaokw
MT_SysGroupTransfer:
          CFI Block cfiBlock183 Using cfiCommon0
          CFI Function MT_SysGroupTransfer
        CODE
// 1846 {
        FUNCALL MT_SysGroupTransfer, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGroupTransfer, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGroupTransfer, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        LCALL   ?Subroutine10 & 0xFFFF
// 1847     afIncomingMSGPacket_t *MSGpkt;
// 1848     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN); 
??CrossCallReturnLabel_21:
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 1849     if(MSGpkt == NULL)
        MOV     A,R6
        ORL     A,R7
        JZ      ??MT_SysGroupTransfer_0
// 1850     {
// 1851         return;
// 1852     }
// 1853 	
// 1854     MSGpkt->hdr.event = ZDO_GROUP_REQ;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x1d
        LCALL   ?Subroutine21 & 0xFFFF
// 1855     MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN;
??CrossCallReturnLabel_49:
        JNC     ??MT_SysGroupTransfer_1
        INC     R3
??MT_SysGroupTransfer_1:
        LCALL   ?Subroutine14 & 0xFFFF
// 1856     if ( MSGpkt->cmd.DataLength )
??CrossCallReturnLabel_28:
        JZ      ??MT_SysGroupTransfer_2
// 1857     {
// 1858         MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
        LCALL   ?Subroutine20 & 0xFFFF
// 1859         osal_memcpy(MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_LEN], MSGpkt->cmd.DataLength);  
// 1860     }
??CrossCallReturnLabel_46:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP    ??CrossCallReturnLabel_63
// 1861     else
// 1862     {
// 1863         MSGpkt->cmd.Data = NULL;
??MT_SysGroupTransfer_2:
        LCALL   ?Subroutine28 & 0xFFFF
// 1864     }	
// 1865     osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
??CrossCallReturnLabel_63:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 1866 }
??MT_SysGroupTransfer_0:
        LJMP    ??Subroutine46_0 & 0xFFFF
          CFI EndBlock cfiBlock183

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond184 Using cfiCommon0
          CFI Function MT_SysP2PTransfer
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function MT_SysBroadCastTransfer
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function MT_SysGroupTransfer
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function MT_SysPkgSendMsg
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker188 Using cfiCommon1
          CFI (cfiPicker188) NoFunction
          CFI (cfiPicker188) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_82:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiPicker188

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function MT_SysP2PTransfer
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function MT_SysBroadCastTransfer
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function MT_SysGroupTransfer
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function MT_SysPkgSendMsg
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker193 Using cfiCommon1
          CFI (cfiPicker193) NoFunction
          CFI (cfiPicker193) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_79:
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiPicker193
// 1867 
// 1868 
// 1869 
// 1870 static void MT_SysChannelUpdate( uint8 *pBuf )
// 1871 {
// 1872 	afIncomingMSGPacket_t *MSGpkt;
// 1873 	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t )  + pBuf[MT_RPC_POS_LEN] );
// 1874 	if ( MSGpkt == NULL )
// 1875 	{
// 1876 		return;
// 1877 	}
// 1878 	MSGpkt->hdr.event = ZDO_CHANNEL_UPDATE;
// 1879 	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
// 1880 	if ( MSGpkt->cmd.DataLength )
// 1881 	{
// 1882 		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
// 1883 		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
// 1884 	}
// 1885 	else
// 1886 	{
// 1887 		MSGpkt->cmd.Data = NULL;
// 1888 	}
// 1889 	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
// 1890 }
// 1891 
// 1892 
// 1893 
// 1894 static void MT_SysMACReq( uint8 *pBuf )
// 1895 {
// 1896 	afIncomingMSGPacket_t *MSGpkt;
// 1897 	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] );
// 1898 	if ( MSGpkt == NULL )
// 1899 	{
// 1900 		return;
// 1901 	}
// 1902 	MSGpkt->hdr.event = ZDO_MAC_REQ;
// 1903 	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
// 1904 	if ( MSGpkt->cmd.DataLength )
// 1905 	{
// 1906 		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
// 1907 		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
// 1908 	}
// 1909 	else
// 1910 	{
// 1911 		MSGpkt->cmd.Data = NULL;
// 1912 	}
// 1913 	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
// 1914 }
// 1915 
// 1916 
// 1917 
// 1918 static void MT_SysActiveCntReq( uint8 *pBuf )
// 1919 {
// 1920 	afIncomingMSGPacket_t *MSGpkt;
// 1921 	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] );
// 1922 	if ( MSGpkt == NULL )
// 1923 	{
// 1924 		return;
// 1925 	}
// 1926 	MSGpkt->hdr.event = ZDO_ACTIVE_CNT_REQ;
// 1927 	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
// 1928 	if ( MSGpkt->cmd.DataLength )
// 1929 	{
// 1930 		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
// 1931 		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
// 1932 	}
// 1933 	else
// 1934 	{
// 1935 		MSGpkt->cmd.Data = NULL;
// 1936 	}
// 1937 	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
// 1938 }
// 1939 
// 1940 
// 1941 
// 1942 static void MT_SysGetFWVersionReq( uint8 *pBuf )
// 1943 {
// 1944 	MT_SysPkgSendMsg( GenericApp_TaskID, ZDO_FW_VERSION_REQ, pBuf, 0, MT_RPC_POS_DAT0 );
// 1945 }
// 1946 
// 1947 static void MT_SysFWUpdateReq( uint8 *pBuf )
// 1948 {
// 1949 	MT_SysPkgSendMsg( GenericApp_TaskID, ZDO_FW_UPDATE_REQ, pBuf, 0, MT_RPC_POS_DAT0 );
// 1950 }
// 1951 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1952 static void MT_SysPkgSendMsg( byte taskID, uint8 event, uint8 *pBuf, uint8 len, uint8 offset )
MT_SysPkgSendMsg:
          CFI Block cfiBlock194 Using cfiCommon0
          CFI Function MT_SysPkgSendMsg
        CODE
// 1953 {
        FUNCALL MT_SysPkgSendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysPkgSendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysPkgSendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     ?V3,R2
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V7,R3
// 1954 	afIncomingMSGPacket_t *MSGpkt;
// 1955 	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) + len );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,R3
        ADD     A,#0x27
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 1956 	if ( MSGpkt == NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??MT_SysPkgSendMsg_0
// 1957 	{
// 1958 		return;
// 1959 	}
// 1960 	MSGpkt->hdr.event = event;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V3
        MOVX    @DPTR,A
// 1961 	MSGpkt->cmd.DataLength = len;
        MOV     R0,?V7
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 1962 	if ( MSGpkt->cmd.DataLength )
        MOV     A,R0
        JZ      ??MT_SysPkgSendMsg_1
// 1963 	{
// 1964 		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
        LCALL   ?Subroutine30 & 0xFFFF
// 1965 		osal_memcpy( MSGpkt->cmd.Data, &pBuf[offset], MSGpkt->cmd.DataLength );
??CrossCallReturnLabel_68:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0
        ADD     A,R0
        MOV     ?V4,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL   ?Subroutine17 & 0xFFFF
// 1966 	}
??CrossCallReturnLabel_36:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        SJMP    ??CrossCallReturnLabel_64
// 1967 	else
// 1968 	{
// 1969 		MSGpkt->cmd.Data = NULL;
??MT_SysPkgSendMsg_1:
        LCALL   ?Subroutine28 & 0xFFFF
// 1970 	}
// 1971 	osal_msg_send( taskID, (uint8 *)MSGpkt );
??CrossCallReturnLabel_64:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V2
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 1972 }
??MT_SysPkgSendMsg_0:
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock194

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond195 Using cfiCommon0
          CFI Function MT_SysP2PTransfer
          CFI Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function MT_SysBroadCastTransfer
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_34
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-4
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function MT_SysGroupTransfer
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_35
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-4
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function MT_SysPkgSendMsg
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_36
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-4
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function MT_SysPkgSendMsg
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker200 Using cfiCommon1
          CFI (cfiPicker200) NoFunction
          CFI (cfiPicker200) Picker
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiPicker200

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function MT_SysP2PTransfer
          CFI Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function MT_SysBroadCastTransfer
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_45
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-4
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function MT_SysGroupTransfer
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_46
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-4
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function MT_SysPkgSendMsg
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker205 Using cfiCommon1
          CFI (cfiPicker205) NoFunction
          CFI (cfiPicker205) Picker
        MOV     A,R6
        ADD     A,#0x27
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiPicker205

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond206 Using cfiCommon0
          CFI Function MT_SysP2PTransfer
          CFI Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function MT_SysBroadCastTransfer
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_62
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-4
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function MT_SysGroupTransfer
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_63
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-4
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function MT_SysPkgSendMsg
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_64
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-4
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function MT_SysP2PTransfer
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_44
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-6
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function MT_SysBroadCastTransfer
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_45
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-6
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function MT_SysGroupTransfer
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_46
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-6
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function MT_SysPkgSendMsg
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_68
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-4
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker214 Using cfiCommon1
          CFI (cfiPicker214) NoFunction
          CFI (cfiPicker214) Picker
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiPicker214

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysCommandProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysPing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysPing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysVersion::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysVersion

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysSetExtAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysSetExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysGetExtAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysGetExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVRead::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVWrite::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVItemInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVItemInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVDelete::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVDelete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVLength::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalStartTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalStartTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalStopTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalStopTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysRandom::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysRandom

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysAdcRead::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysAdcRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysGpio::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysGpio

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysStackTune::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysStackTune

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysSetUtcTime::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysSetUtcTime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysGetUtcTime::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysGetUtcTime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysSetTxPower::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysSetTxPower

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysResetInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysResetInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalTimerExpired::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalTimerExpired

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??powerOffSoc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    powerOffSoc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysP2PTransfer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysP2PTransfer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysBroadCastTransfer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysBroadCastTransfer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysGroupTransfer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysGroupTransfer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysPkgSendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysPkgSendMsg

        END
// 1973 
// 1974 
// 1975 static void MT_SysMultiwaySetReq( uint8 *pBuf )
// 1976 {
// 1977 	afIncomingMSGPacket_t *MSGpkt;
// 1978 	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] );
// 1979 	if ( MSGpkt == NULL )
// 1980 	{
// 1981 		return;
// 1982 	}
// 1983 	MSGpkt->hdr.event = ZDO_MULTIWAY_SET_REQ;
// 1984 	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
// 1985 	if ( MSGpkt->cmd.DataLength )
// 1986 	{
// 1987 		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
// 1988 		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
// 1989 	}
// 1990 	else
// 1991 	{
// 1992 		MSGpkt->cmd.Data = NULL;
// 1993 	}
// 1994 	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
// 1995 }
// 1996 
// 1997 
// 1998 static void MT_SysMultiwaySendReq( uint8 *pBuf )
// 1999 {
// 2000 	MT_SysGroupTransfer(pBuf);
// 2001 }
// 2002 
// 2003 
// 2004 static void MT_SysNWKInfoReq( uint8 *pBuf )
// 2005 {
// 2006 	afIncomingMSGPacket_t *MSGpkt;
// 2007 	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] );
// 2008 	if ( MSGpkt == NULL )
// 2009 	{
// 2010 		return;
// 2011 	}
// 2012 	MSGpkt->hdr.event = ZDO_NWKINFO_REQ;
// 2013 	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
// 2014 	if ( MSGpkt->cmd.DataLength )
// 2015 	{
// 2016 		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
// 2017 		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
// 2018 	}
// 2019 	else
// 2020 	{
// 2021 		MSGpkt->cmd.Data = NULL;
// 2022 	}
// 2023 	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
// 2024 }
// 2025 
// 2026 /***************************************************************************************************
// 2027  ***************************************************************************************************/
// 
// 3 871 bytes in segment BANKED_CODE
//   162 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//    10 bytes in segment XDATA_ROM_C
// 
// 4 033 bytes of CODE  memory
//    10 bytes of CONST memory
//     0 bytes of DATA  memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: none
