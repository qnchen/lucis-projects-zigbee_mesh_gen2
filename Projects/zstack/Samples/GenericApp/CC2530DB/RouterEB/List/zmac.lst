###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  17:48:55
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\zmac\f8w\zmac.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\zmac\f8w\zmac.c" -D ZTOOL_P1 -D MT_TASK -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE -D
#        NV_INIT -D OPEN_FCS -D PANID_INCREASE -lC "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List" -lA
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj" -e
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\zmac.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj\zmac.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\zmac\f8w\zmac.c
      1          /**************************************************************************************************
      2            Filename:       zmac.c
      3            Revised:        $Date: 2014-07-22 11:05:31 -0700 (Tue, 22 Jul 2014) $
      4            Revision:       $Revision: 39478 $
      5          
      6          
      7            Description:    This file contains the ZStack MAC Porting Layer
      8          
      9          
     10            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /********************************************************************************************************
     42           *                                               INCLUDES
     43           ********************************************************************************************************/
     44          
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "ZMAC.h"
     48          #include "mac_main.h"
     49          
     50          #if !defined NONWK
     51            #include "ZGlobals.h"
     52          #endif
     53          
     54          #if defined( ZCL_KEY_ESTABLISH )
     55            #include "ssp.h"
     56          #endif
     57          
     58          /********************************************************************************************************
     59           *                                                 MACROS
     60           ********************************************************************************************************/
     61          
     62          /********************************************************************************************************
     63           *                                               CONSTANTS
     64           ********************************************************************************************************/
     65          #define MAX_SECURITY_PIB_SET_ENTRY  sizeof(deviceDescriptor_t)
     66          

   \                                 In  segment XDATA_ROM_C, align 1
     67          const uint8 UsePrimaryExtAddr[Z_EXTADDR_LEN] = {0};
   \                     UsePrimaryExtAddr:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
     68          const uint8 UseSecondaryExtAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \                     UseSecondaryExtAddr:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
     69          
     70          /********************************************************************************************************
     71           *                                               GLOBALS
     72           ********************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          uint32 _ScanChannels;
   \                     _ScanChannels:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     74          
     75          extern uint8 aExtendedAddress[Z_EXTADDR_LEN];
     76          
     77          /**************************************************************************************************
     78           * @fn          MAC_SetRandomSeedCB
     79           *
     80           * @brief       MAC function: Set the function pointer for the random seed callback.
     81           *
     82           * input parameters
     83           *
     84           * @param       pCBFcn - function pointer of the random seed callback
     85           *
     86           * output parameters
     87           *
     88           * None.
     89           *
     90           * @return      none
     91           **************************************************************************************************
     92           */
     93          extern void MAC_SetRandomSeedCB(macRNGFcn_t pCBFcn);
     94          /********************************************************************************************************
     95           *                                               LOCALS
     96           ********************************************************************************************************/
     97          
     98          /* Pointer to scan result buffer */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          void *ZMac_ScanBuf = NULL;
   \                     ZMac_ScanBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    100          
    101          /********************************************************************************************************
    102           * LOCAL FUNCTION PROTOTYPES
    103           ********************************************************************************************************/
    104          
    105          /********************************************************************************************************
    106           *                                                TYPEDEFS
    107           ********************************************************************************************************/
    108          
    109          
    110          /********************************************************************************************************
    111           *                                                FUNCTIONS
    112           ********************************************************************************************************/
    113          
    114          /********************************************************************************************************
    115           * @fn      ZMacInit
    116           *
    117           * @brief   Initialize MAC.
    118           *
    119           * @param   none.
    120           *
    121           * @return  status.
    122           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          uint8 ZMacInit( void )
   \                     ZMacInit:
    124          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    125            uint8 stat;
    126          
    127          #if defined( ZCL_KEY_ESTABLISH )
    128            /* Set the callback function for 16 byte random seed */
    129            MAC_SetRandomSeedCB( SSP_StoreRandomSeedNV);
    130          #endif
    131          
    132            MAC_Init();
   \   000005                ; Setup parameters for call to function MAC_Init
   \   000005   12....       LCALL   `??MAC_Init::?relay` ; Banked call to: MAC_Init
    133            MAC_InitDevice();
   \   000008                ; Setup parameters for call to function MAC_InitDevice
   \   000008   12....       LCALL   `??MAC_InitDevice::?relay`; Banked call to: MAC_InitDevice
    134          
    135          #if !defined NONWK
    136            if ( ZG_BUILD_RTR_TYPE )
    137            {
    138              MAC_InitCoord();
   \   00000B                ; Setup parameters for call to function MAC_InitCoord
   \   00000B   12....       LCALL   `??MAC_InitCoord::?relay`; Banked call to: MAC_InitCoord
    139            }
    140          #endif
    141          
    142            // If OK, initialize the MAC
    143            stat = ZMacReset( TRUE );
   \   00000E                ; Setup parameters for call to function ZMacReset
   \   00000E   7901         MOV     R1,#0x1
   \   000010   12....       LCALL   `??ZMacReset::?relay`; Banked call to: ZMacReset
   \   000013   E9           MOV     A,R1
   \   000014   FE           MOV     R6,A
    144          
    145            // Turn off interrupts
    146            osal_int_disable( INTS_ALL );
   \   000015                ; Setup parameters for call to function osal_int_disable
   \   000015   79FF         MOV     R1,#-0x1
   \   000017   12....       LCALL   `??osal_int_disable::?relay`; Banked call to: osal_int_disable
   \   00001A   E9           MOV     A,R1
    147          
    148            return ( stat );
   \   00001B   EE           MOV     A,R6
   \   00001C   F9           MOV     R1,A
   \   00001D   7F01         MOV     R7,#0x1
   \   00001F   02....       LJMP    ?BANKED_LEAVE_XDATA
    149          }
    150          
    151          /********************************************************************************************************
    152           * @fn      ZMacReset
    153           *
    154           * @brief   Reset the MAC.
    155           *
    156           * @param   Default to PIB defaults.
    157           *
    158           * @return  status.
    159           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    160          uint8 ZMacReset( uint8 SetDefaultPIB )
   \                     ZMacReset:
    161          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
    162            byte stat;
    163            byte value;
    164          
    165            stat = MAC_MlmeResetReq( SetDefaultPIB );
   \   00000C                ; Setup parameters for call to function MAC_MlmeResetReq
   \   00000C   EF           MOV     A,R7
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   `??MAC_MlmeResetReq::?relay`; Banked call to: MAC_MlmeResetReq
   \   000011   E9           MOV     A,R1
   \   000012   FE           MOV     R6,A
    166          
    167            // Don't send PAN ID conflict
    168            value = FALSE;
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   7400         MOV     A,#0x0
   \   00001B   F0           MOVX    @DPTR,A
    169            MAC_MlmeSetReq( MAC_ASSOCIATED_PAN_COORD, &value );
   \   00001C                ; Setup parameters for call to function MAC_MlmeSetReq
   \   00001C   AA..         MOV     R2,?XSP + 0
   \   00001E   AB..         MOV     R3,?XSP + 1
   \   000020   7956         MOV     R1,#0x56
   \   000022   12....       LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   \   000025   E9           MOV     A,R1
    170            MAC_MlmeSetReq( MAC_EXTENDED_ADDRESS, &aExtendedAddress );
   \   000026                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000026   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000028   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   00002A   79E2         MOV     R1,#-0x1e
   \   00002C   12....       LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   \   00002F   E9           MOV     A,R1
    171          
    172            if (ZMac_ScanBuf)
   \   000030   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   E8           MOV     A,R0
   \   000039   49           ORL     A,R1
   \   00003A   6015         JZ      ??ZMacReset_0
    173            {
    174              osal_mem_free(ZMac_ScanBuf);
   \   00003C                ; Setup parameters for call to function osal_mem_free
   \   00003C   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FA           MOV     R2,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FB           MOV     R3,A
   \   000044   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    175              ZMac_ScanBuf = NULL;
   \   000047   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00004A   7400         MOV     A,#0x0
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   7400         MOV     A,#0x0
   \   000050   F0           MOVX    @DPTR,A
    176            }
    177          
    178            return ( stat );
   \                     ??ZMacReset_0:
   \   000051   EE           MOV     A,R6
   \   000052   F9           MOV     R1,A
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   7F01         MOV     R7,#0x1
   \   00005A   02....       LJMP    ?BANKED_LEAVE_XDATA
    179          }
    180          
    181          
    182          /********************************************************************************************************
    183           * @fn      ZMacGetReq
    184           *
    185           * @brief   Read a MAC PIB attribute.
    186           *
    187           * @param   attr - PIB attribute to get
    188           * @param   value - pointer to the buffer to store the attribute
    189           *
    190           * @return  status
    191           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          uint8 ZMacGetReq( uint8 attr, uint8 *value )
   \                     ZMacGetReq:
    193          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    194            if ( attr == ZMacExtAddr )
   \   00000B   74E2         MOV     A,#-0x1e
   \   00000D   65..         XRL     A,?V0
   \   00000F   700F         JNZ     ??ZMacGetReq_0
    195            {
    196              osal_cpyExtAddr( value, &aExtendedAddress );
   \   000011                ; Setup parameters for call to function sAddrExtCpy
   \   000011   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   000013   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    197              return ZMacSuccess;
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   8009         SJMP    ??ZMacGetReq_1
    198            }
    199          
    200            return (ZMacStatus_t) MAC_MlmeGetReq( attr, value );
   \                     ??ZMacGetReq_0:
   \   000020                ; Setup parameters for call to function MAC_MlmeGetReq
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   A9..         MOV     R1,?V0
   \   000026   12....       LCALL   `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
   \                     ??ZMacGetReq_1:
   \   000029   7F01         MOV     R7,#0x1
   \   00002B   02....       LJMP    ?BANKED_LEAVE_XDATA
    201          }
    202          
    203          
    204          /********************************************************************************************************
    205           * @fn      ZMacSetReq
    206           *
    207           * @brief   Write a MAC PIB attribute.
    208           *
    209           * @param   attr - PIB attribute to Set
    210           * @param   value - pointer to the data
    211           *
    212           * @return  status
    213           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    214          uint8 ZMacSetReq( uint8 attr, byte *value )
   \                     ZMacSetReq:
    215          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    216            if ( attr == ZMacExtAddr )
   \   00000B   74E2         MOV     A,#-0x1e
   \   00000D   65..         XRL     A,?V0
   \   00000F   7016         JNZ     ??ZMacSetReq_0
    217            {
    218          #if defined ( HAL_INFOP_IEEE_OSET )
    219              if (!memcmp(value, (void *)UsePrimaryExtAddr, Z_EXTADDR_LEN))
    220              {
    221                // Read the extended address from the designated location in the Info-A Page.
    222                osal_cpyExtAddr(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET));
    223              }
    224              else if (!memcmp(value, (void *)UseSecondaryExtAddr, Z_EXTADDR_LEN))
    225              {
    226                // Read the extended address from the location on the lock bits page where
    227                // the programming tools know how to program and preserve it during download.
    228                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
    229              }
    230              else  // Use this valid extended address value.
    231          #endif
    232              {
    233                osal_cpyExtAddr(aExtendedAddress, value);
   \   000011                ; Setup parameters for call to function sAddrExtCpy
   \   000011   EE           MOV     A,R6
   \   000012   FC           MOV     R4,A
   \   000013   EF           MOV     A,R7
   \   000014   FD           MOV     R5,A
   \   000015   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000017   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000019   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    234              }
    235              return (ZMacStatus_t) MAC_MlmeSetReq( attr, aExtendedAddress );
   \   00001C                ; Setup parameters for call to function MAC_MlmeSetReq
   \   00001C   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   00001E   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000020   A9..         MOV     R1,?V0
   \   000022   12....       LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   \   000025   8009         SJMP    ??ZMacSetReq_1
    236            }
    237            else
    238            {
    239              return (ZMacStatus_t) MAC_MlmeSetReq( attr, value );
   \                     ??ZMacSetReq_0:
   \   000027                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   A9..         MOV     R1,?V0
   \   00002D   12....       LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   \                     ??ZMacSetReq_1:
   \   000030   7F01         MOV     R7,#0x1
   \   000032   02....       LJMP    ?BANKED_LEAVE_XDATA
    240            }
    241          }
    242          
    243          #ifdef FEATURE_MAC_SECURITY
    244          /********************************************************************************************************
    245           * @fn      ZMacSecurityGetReq
    246           *
    247           * @brief   Read a MAC Security PIB attribute.
    248           *
    249           * @param   attr - PIB attribute to get
    250           * @param   value - pointer to the buffer to store the attribute
    251           *
    252           * @return  status
    253           ********************************************************************************************************/
    254          uint8 ZMacSecurityGetReq( uint8 attr, uint8 *value )
    255          {
    256            uint8         keyIndex, entry, status;
    257            uint8        *ptr;
    258          
    259            ptr = (uint8 *) value;
    260            switch (attr)
    261            {
    262              case ZMacKeyIdLookupEntry:
    263                keyIndex = *ptr++; /* key_index */
    264                entry    = *ptr++; /* key_id_lookup_index */
    265                
    266                /* Transform byte array to propriety PIB struct */
    267                ((macSecurityPibKeyIdLookupEntry_t *)value)->key_id_lookup_index = entry;
    268                ((macSecurityPibKeyIdLookupEntry_t *)value)->key_index = keyIndex;
    269                break;
    270                
    271              case ZMacKeyDeviceEntry:
    272                keyIndex = *ptr++; /* key_index */
    273                entry    = *ptr++; /* key_device_index */
    274                
    275                /* Transform byte array to propriety PIB struct */
    276                ((macSecurityPibKeyDeviceEntry_t *)value)->key_device_index = entry;
    277                ((macSecurityPibKeyDeviceEntry_t *)value)->key_index = keyIndex;
    278                break;
    279                
    280              case ZMacKeyUsageEntry:
    281                keyIndex = *ptr++; /* key_index */
    282                entry    = *ptr++; /* key_key_usage_index */
    283                
    284                /* Transform byte array to propriety PIB struct */
    285                ((macSecurityPibKeyUsageEntry_t *)value)->key_key_usage_index = entry;
    286                ((macSecurityPibKeyUsageEntry_t *)value)->key_index = keyIndex;
    287                break;
    288                
    289              case ZMacKeyEntry:
    290                keyIndex = *ptr++; /* key_index */
    291                
    292                /* Transform byte array to propriety PIB struct */
    293                ((macSecurityPibKeyEntry_t *)value)->key_index = keyIndex;
    294                break;
    295                
    296              case ZMacDeviceEntry:
    297                entry = *ptr++; /* device_index */
    298                
    299                /* Transform byte array to propriety PIB struct */
    300                ((macSecurityPibDeviceEntry_t *)value)->device_index = entry;
    301                break;
    302          
    303              case ZMacSecurityLevelEntry:
    304                entry = *ptr++; /* security_level_index */
    305                
    306                /* Transform byte array to propriety PIB struct */
    307                ((macSecurityPibSecurityLevelEntry_t *)value)->security_level_index = entry;
    308                break;
    309            }
    310          
    311            status = (ZMacStatus_t) MAC_MlmeGetSecurityReq( attr, value );
    312            
    313            ptr = (uint8 *) value;
    314            switch (attr)
    315            {
    316              case ZMacKeyIdLookupEntry:
    317                *ptr++ = keyIndex; /* key_index */
    318                *ptr++ = entry;    /* key_id_lookup_index */
    319                
    320                /* Transform propriety PIB struct to byte array */
    321                osal_memcpy(ptr, &((macSecurityPibKeyIdLookupEntry_t *)value)->macKeyIdLookupEntry, sizeof(keyIdLookupDescriptor_t));
    322                break;
    323                
    324              case ZMacKeyDeviceEntry:
    325                *ptr++ = keyIndex; /* key_index */
    326                *ptr++ = entry;    /* key_device_index */
    327                
    328                /* Transform propriety PIB struct to byte array */
    329                osal_memcpy(ptr, &((macSecurityPibKeyDeviceEntry_t *)value)->macKeyDeviceEntry, sizeof(keyDeviceDescriptor_t));
    330                break;
    331                
    332              case ZMacKeyUsageEntry:
    333                *ptr++ = keyIndex; /* key_index */
    334                *ptr++ = entry;    /* key_key_usage_index */
    335                
    336                /* Transform propriety PIB struct to byte array */
    337                osal_memcpy(ptr, &((macSecurityPibKeyUsageEntry_t *)value)->macKeyUsageEntry, sizeof(keyUsageDescriptor_t));
    338                break;
    339                
    340              case ZMacKeyEntry:
    341                *ptr++ = keyIndex; /* key_index */
    342                
    343                /* Transform propriety PIB struct to byte array */
    344                osal_memcpy(ptr, &((macSecurityPibKeyEntry_t *)value)->keyEntry, MAC_KEY_MAX_LEN);
    345                break;
    346                
    347              case ZMacDeviceEntry:
    348                *ptr++ = entry; /* device_index */
    349                
    350                /* Transform propriety PIB struct to byte array */
    351                osal_memcpy(ptr, &((macSecurityPibDeviceEntry_t *)value)->macDeviceEntry, sizeof(deviceDescriptor_t));
    352                break;
    353          
    354              case ZMacSecurityLevelEntry:
    355                *ptr++ = entry; /* security_level_index */
    356                
    357                /* Transform propriety PIB struct to byte array */
    358                osal_memcpy(ptr, &((macSecurityPibSecurityLevelEntry_t *)value)->macSecurityLevelEntry, sizeof(securityLevelDescriptor_t));
    359                break;
    360            }
    361            
    362            return status;
    363          }
    364          
    365          
    366          /********************************************************************************************************
    367           * @fn      ZMacSecuritySetReq
    368           *
    369           * @brief   Write a MAC Security PIB attribute.
    370           *
    371           * @param   attr - PIB attribute to Set
    372           * @param   value - pointer to the data
    373           *
    374           * @return  status
    375           ********************************************************************************************************/
    376          uint8 ZMacSecuritySetReq( uint8 attr, byte *value )
    377          {
    378            uint8         keyIndex, entry;
    379            uint32        frameCounter;
    380            uint8        *ptr;
    381            uint8         tmp[MAX_SECURITY_PIB_SET_ENTRY]; /* This must cover the largest single PIB entry */
    382            uint8         temp[MAX_SECURITY_PIB_SET_ENTRY]; /* This must cover the largest single PIB entry */
    383          
    384            /* Note that the Transform byte array to propriety PIB struct below works 
    385             * because the members of the structures are all defined manually in a way, 
    386             * where memcpy would work, without usage of explicit 'pack', they fit 
    387             * such that memcpy would work
    388             */
    389            ptr = (uint8 *) value;
    390            switch (attr)
    391            {
    392              case ZMacKeyIdLookupEntry:
    393                keyIndex = *ptr++; /* key_index */
    394                entry    = *ptr++; /* key_id_lookup_index */
    395                
    396                /* Transform byte array to propriety PIB struct */
    397                osal_memcpy(tmp, ptr, sizeof(keyIdLookupDescriptor_t));
    398                osal_memcpy(&((macSecurityPibKeyIdLookupEntry_t *)temp)->macKeyIdLookupEntry, tmp, sizeof(keyIdLookupDescriptor_t));
    399                ((macSecurityPibKeyIdLookupEntry_t *)temp)->key_id_lookup_index = entry;
    400                ((macSecurityPibKeyIdLookupEntry_t *)temp)->key_index = keyIndex;
    401                return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
    402                break;
    403                
    404              case ZMacKeyDeviceEntry:
    405                keyIndex = *ptr++; /* key_index */
    406                entry    = *ptr++; /* key_device_index */
    407                
    408                /* Transform byte array to propriety PIB struct */
    409                osal_memcpy(tmp, ptr, sizeof(keyDeviceDescriptor_t));
    410                osal_memcpy(&((macSecurityPibKeyDeviceEntry_t *)temp)->macKeyDeviceEntry, tmp, sizeof(keyDeviceDescriptor_t));
    411                ((macSecurityPibKeyDeviceEntry_t *)temp)->key_device_index = entry;
    412                ((macSecurityPibKeyDeviceEntry_t *)temp)->key_index = keyIndex;
    413                return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
    414                break;
    415                
    416              case ZMacKeyUsageEntry:
    417                keyIndex = *ptr++; /* key_index */
    418                entry    = *ptr++; /* key_key_usage_index */
    419                
    420                /* Transform byte array to propriety PIB struct */
    421                osal_memcpy(tmp, ptr, sizeof(keyUsageDescriptor_t));
    422                osal_memcpy(&((macSecurityPibKeyUsageEntry_t *)temp)->macKeyUsageEntry, tmp, sizeof(keyUsageDescriptor_t));
    423                ((macSecurityPibKeyUsageEntry_t *)temp)->key_key_usage_index = entry;
    424                ((macSecurityPibKeyUsageEntry_t *)temp)->key_index = keyIndex;
    425                return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
    426                break;
    427                
    428              case ZMacKeyEntry:
    429                keyIndex = *ptr++; /* key_index */
    430                
    431                /* Transform byte array to propriety PIB struct */
    432                osal_memcpy(tmp, ptr, MAC_KEY_MAX_LEN);
    433                osal_memcpy(&((macSecurityPibKeyEntry_t *)temp)->keyEntry, tmp, MAC_KEY_MAX_LEN);
    434                ptr+=MAC_KEY_MAX_LEN;
    435                
    436                osal_memcpy(&frameCounter, ptr, sizeof(frameCounter));
    437                
    438                ((macSecurityPibKeyEntry_t *)temp)->frameCounter = frameCounter;
    439                ((macSecurityPibKeyEntry_t *)temp)->key_index = keyIndex;
    440                return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
    441                break;
    442                
    443              case ZMacDeviceEntry:
    444                 entry = *ptr++;
    445                 
    446                 /* Transform byte array to propriety PIB struct */
    447                 osal_memcpy(tmp, ptr, sizeof(deviceDescriptor_t));
    448                 osal_memcpy(&((macSecurityPibDeviceEntry_t *)temp)->macDeviceEntry, tmp, sizeof(deviceDescriptor_t));
    449             
    450                ((macSecurityPibDeviceEntry_t *)temp)->device_index = entry;
    451                return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
    452                break;
    453          
    454              case ZMacSecurityLevelEntry:
    455                entry = *ptr++; /* security_level_index */
    456                
    457                /* Transform byte array to propriety PIB struct */
    458                osal_memcpy(tmp, ptr, sizeof(securityLevelDescriptor_t));
    459                osal_memcpy(&((macSecurityPibSecurityLevelEntry_t *)temp)->macSecurityLevelEntry, tmp, sizeof(securityLevelDescriptor_t));
    460                
    461                ((macSecurityPibSecurityLevelEntry_t *)temp)->security_level_index = entry;
    462                return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
    463                break;
    464            }
    465          
    466            return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, value );
    467          }
    468          #endif /* FEATURE_MAC_SECURITY */
    469          
    470          /********************************************************************************************************
    471           * @fn      ZMacAssociateReq
    472           *
    473           * @brief   Request an association with a coordinator.
    474           *
    475           * @param   structure with info need to associate.
    476           *
    477           * @return  status
    478           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    479          uint8 ZMacAssociateReq( ZMacAssociateReq_t *pData )
   \                     ZMacAssociateReq:
    480          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    481            /* Right now, set security to zero */
    482            pData->Sec.SecurityLevel = false;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
    483          
    484            MAC_MlmeAssociateReq ( (macMlmeAssociateReq_t *)pData);
   \   000018                ; Setup parameters for call to function MAC_MlmeAssociateReq
   \   000018   EE           MOV     A,R6
   \   000019   FA           MOV     R2,A
   \   00001A   EF           MOV     A,R7
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   `??MAC_MlmeAssociateReq::?relay`; Banked call to: MAC_MlmeAssociateReq
    485            return ( ZMacSuccess );
   \   00001F   7900         MOV     R1,#0x0
   \   000021   7F01         MOV     R7,#0x1
   \   000023   02....       LJMP    ?BANKED_LEAVE_XDATA
    486          }
    487          
    488          /********************************************************************************************************
    489           * @fn      ZMacAssociateRsp
    490           *
    491           * @brief   Request to send an association response message.
    492           *
    493           * @param   structure with associate response and info needed to send it.
    494           *
    495           * @return  MAC_SUCCESS or MAC error code
    496           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          uint8 ZMacAssociateRsp( ZMacAssociateRsp_t *pData )
   \                     ZMacAssociateRsp:
    498          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    499            /* TBD: set security to zero for now. Require Ztool change */
    500            pData->Sec.SecurityLevel = false;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
    501          
    502            return ( MAC_MlmeAssociateRsp( (macMlmeAssociateRsp_t *) pData ) );
   \   000018                ; Setup parameters for call to function MAC_MlmeAssociateRsp
   \   000018   EE           MOV     A,R6
   \   000019   FA           MOV     R2,A
   \   00001A   EF           MOV     A,R7
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   `??MAC_MlmeAssociateRsp::?relay`; Banked call to: MAC_MlmeAssociateRsp
   \   00001F   7F01         MOV     R7,#0x1
   \   000021   02....       LJMP    ?BANKED_LEAVE_XDATA
    503          }
    504          
    505          /********************************************************************************************************
    506           * @fn      ZMacDisassociateReq
    507           *
    508           * @brief   Request to send a disassociate request message.
    509           *
    510           * @param   structure with info need send it.
    511           *
    512           * @return  status
    513           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    514          uint8 ZMacDisassociateReq( ZMacDisassociateReq_t *pData )
   \                     ZMacDisassociateReq:
    515          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    516            /* Right now, set security to zero */
    517            pData->Sec.SecurityLevel = false;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
    518          
    519            MAC_MlmeDisassociateReq( (macMlmeDisassociateReq_t *)pData);
   \   000018                ; Setup parameters for call to function MAC_MlmeDisassociateReq
   \   000018   EE           MOV     A,R6
   \   000019   FA           MOV     R2,A
   \   00001A   EF           MOV     A,R7
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   `??MAC_MlmeDisassociateReq::?relay`; Banked call to: MAC_MlmeDisassociateReq
    520            return ( ZMacSuccess );
   \   00001F   7900         MOV     R1,#0x0
   \   000021   7F01         MOV     R7,#0x1
   \   000023   02....       LJMP    ?BANKED_LEAVE_XDATA
    521          }
    522          
    523          /********************************************************************************************************
    524           * @fn      ZMacOrphanRsp
    525           *
    526           * @brief   Allows next higher layer to respond to an orphan indication message.
    527           *
    528           * @param   structure with info need send it.
    529           *
    530           * @return  status
    531           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    532          uint8 ZMacOrphanRsp( ZMacOrphanRsp_t *pData )
   \                     ZMacOrphanRsp:
    533          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    534            /* Right now, set security to zero */
    535            pData->Sec.SecurityLevel = false;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
    536          
    537            MAC_MlmeOrphanRsp( (macMlmeOrphanRsp_t *)pData);
   \   000018                ; Setup parameters for call to function MAC_MlmeOrphanRsp
   \   000018   EE           MOV     A,R6
   \   000019   FA           MOV     R2,A
   \   00001A   EF           MOV     A,R7
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   `??MAC_MlmeOrphanRsp::?relay`; Banked call to: MAC_MlmeOrphanRsp
    538            return ( ZMacSuccess );
   \   00001F   7900         MOV     R1,#0x0
   \   000021   7F01         MOV     R7,#0x1
   \   000023   02....       LJMP    ?BANKED_LEAVE_XDATA
    539          }
    540          
    541          /********************************************************************************************************
    542           * @fn      ZMacScanReq
    543           *
    544           * @brief   This function is called to perform a network scan.
    545           *
    546           * @param   param - structure with info need send it.
    547           *
    548           * @return  status
    549           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          uint8 ZMacScanReq( ZMacScanReq_t *pData )
   \                     ZMacScanReq:
    551          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    552            _ScanChannels = pData->ScanChannels;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   12....       LCALL   ?XLOAD_R0123
   \   000010   90....       MOV     DPTR,#_ScanChannels
   \   000013   12....       LCALL   ?XSTORE_R0123
    553          
    554            /* scan in progress */
    555            if (ZMac_ScanBuf != NULL)
   \   000016   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   49           ORL     A,R1
   \   000020   6005         JZ      ??ZMacScanReq_0
    556            {
    557              return MAC_SCAN_IN_PROGRESS;
   \   000022   79FC         MOV     R1,#-0x4
   \   000024   02....       LJMP    ??ZMacScanReq_1 & 0xFFFF
    558            }
    559          
    560            if (pData->ScanType != ZMAC_ORPHAN_SCAN)
   \                     ??ZMacScanReq_0:
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6403         XRL     A,#0x3
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??ZMacScanReq_2 & 0xFFFF
    561            {
    562              /* Allocate memory depends on the scan type */
    563              if (pData->ScanType == ZMAC_ED_SCAN)
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   704D         JNZ     ??ZMacScanReq_3
    564              {
    565                if ((ZMac_ScanBuf = osal_mem_alloc(ZMAC_ED_SCAN_MAXCHANNELS)) == NULL)
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   7A1B         MOV     R2,#0x1b
   \   000044   7B00         MOV     R3,#0x0
   \   000046   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000049   8A..         MOV     ?V0,R2
   \   00004B   8B..         MOV     ?V1,R3
   \   00004D   A8..         MOV     R0,?V0
   \   00004F   A9..         MOV     R1,?V1
   \   000051   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000054   E8           MOV     A,R0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E9           MOV     A,R1
   \   000058   F0           MOVX    @DPTR,A
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   7005         JNZ     ??ZMacScanReq_4
    566                {
    567                  return MAC_NO_RESOURCES;
   \   00005D   791A         MOV     R1,#0x1a
   \   00005F   02....       LJMP    ??ZMacScanReq_1 & 0xFFFF
    568                }
    569                osal_memset(ZMac_ScanBuf, 0, ZMAC_ED_SCAN_MAXCHANNELS);
   \                     ??ZMacScanReq_4:
   \   000062                ; Setup parameters for call to function osal_memset
   \   000062   7C1B         MOV     R4,#0x1b
   \   000064   7D00         MOV     R5,#0x0
   \   000066   7900         MOV     R1,#0x0
   \   000068   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FA           MOV     R2,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    570                pData->Result.pEnergyDetect = ((uint8*)ZMac_ScanBuf) + MAC_CHAN_11;
   \   000073   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000076   E0           MOVX    A,@DPTR
   \   000077   240B         ADD     A,#0xb
   \   000079   F8           MOV     R0,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F9           MOV     R1,A
   \   00007F   EE           MOV     A,R6
   \   000080   2416         ADD     A,#0x16
   \   000082   F582         MOV     DPL,A
   \   000084   E4           CLR     A
   \   000085   3F           ADDC    A,R7
   \   000086   F583         MOV     DPH,A
   \   000088   E8           MOV     A,R0
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   E9           MOV     A,R1
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   8069         SJMP    ??ZMacScanReq_2
    571              }
    572              else if (pData->MaxResults > 0)
   \                     ??ZMacScanReq_3:
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   605B         JZ      ??ZMacScanReq_2
    573              {
    574                if ((ZMac_ScanBuf = pData->Result.pPanDescriptor =
    575                     osal_mem_alloc( sizeof( ZMacPanDesc_t ) * pData->MaxResults )) == NULL)
   \   00009D                ; Setup parameters for call to function osal_mem_alloc
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FA           MOV     R2,A
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   EA           MOV     A,R2
   \   0000AD   75F021       MOV     B,#0x21
   \   0000B0   A4           MUL     AB
   \   0000B1   CA           XCH     A,R2
   \   0000B2   A8F0         MOV     R0,B
   \   0000B4   75F000       MOV     B,#0x0
   \   0000B7   A4           MUL     AB
   \   0000B8   28           ADD     A,R0
   \   0000B9   F8           MOV     R0,A
   \   0000BA   75F021       MOV     B,#0x21
   \   0000BD   EB           MOV     A,R3
   \   0000BE   A4           MUL     AB
   \   0000BF   28           ADD     A,R0
   \   0000C0   FB           MOV     R3,A
   \   0000C1   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C4   EE           MOV     A,R6
   \   0000C5   2416         ADD     A,#0x16
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   E4           CLR     A
   \   0000CA   3F           ADDC    A,R7
   \   0000CB   F583         MOV     DPH,A
   \   0000CD   EA           MOV     A,R2
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   EB           MOV     A,R3
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   EE           MOV     A,R6
   \   0000D3   2416         ADD     A,#0x16
   \   0000D5   F582         MOV     DPL,A
   \   0000D7   E4           CLR     A
   \   0000D8   3F           ADDC    A,R7
   \   0000D9   F583         MOV     DPH,A
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0000E3   E8           MOV     A,R0
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   E9           MOV     A,R1
   \   0000E7   F0           MOVX    @DPTR,A
   \   0000E8   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F8           MOV     R0,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F9           MOV     R1,A
   \   0000F0   E8           MOV     A,R0
   \   0000F1   49           ORL     A,R1
   \   0000F2   7004         JNZ     ??ZMacScanReq_2
    576                {
    577                  return MAC_NO_RESOURCES;
   \   0000F4   791A         MOV     R1,#0x1a
   \   0000F6   8016         SJMP    ??ZMacScanReq_1
    578                }
    579              }
    580            }
    581          
    582            /* Channel Page */
    583            pData->ChannelPage = 0x00;
   \                     ??ZMacScanReq_2:
   \   0000F8   8E82         MOV     DPL,R6
   \   0000FA   8F83         MOV     DPH,R7
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   7400         MOV     A,#0x0
   \   000104   F0           MOVX    @DPTR,A
    584          
    585            MAC_MlmeScanReq ((macMlmeScanReq_t *)pData);
   \   000105                ; Setup parameters for call to function MAC_MlmeScanReq
   \   000105   EE           MOV     A,R6
   \   000106   FA           MOV     R2,A
   \   000107   EF           MOV     A,R7
   \   000108   FB           MOV     R3,A
   \   000109   12....       LCALL   `??MAC_MlmeScanReq::?relay`; Banked call to: MAC_MlmeScanReq
    586          
    587            return ZMacSuccess;
   \   00010C   7900         MOV     R1,#0x0
   \                     ??ZMacScanReq_1:
   \   00010E   7F02         MOV     R7,#0x2
   \   000110   02....       LJMP    ?BANKED_LEAVE_XDATA
    588          }
    589          
    590          
    591          /********************************************************************************************************
    592           * @fn      ZMacStartReq
    593           *
    594           * @brief   This function is called to tell the MAC to transmit beacons
    595           *          and become a coordinator.
    596           *
    597           * @param   structure with info need send it.
    598           *
    599           * @return  status
    600           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          uint8 ZMacStartReq( ZMacStartReq_t *pData )
   \                     ZMacStartReq:
    602          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    603            uint8 stat;
    604          
    605            // Probably want to keep the receiver on
    606            stat = true;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    607            MAC_MlmeSetReq( MAC_RX_ON_WHEN_IDLE, &stat );
   \   000017                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000017   AA..         MOV     R2,?XSP + 0
   \   000019   AB..         MOV     R3,?XSP + 1
   \   00001B   7952         MOV     R1,#0x52
   \   00001D   12....       LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   \   000020   E9           MOV     A,R1
    608          
    609            /* Right now, set security to zero */
    610            pData->RealignSec.SecurityLevel = false;
   \   000021   EE           MOV     A,R6
   \   000022   2415         ADD     A,#0x15
   \   000024   F582         MOV     DPL,A
   \   000026   E4           CLR     A
   \   000027   3F           ADDC    A,R7
   \   000028   F583         MOV     DPH,A
   \   00002A   7400         MOV     A,#0x0
   \   00002C   F0           MOVX    @DPTR,A
    611            pData->BeaconSec.SecurityLevel = false;
   \   00002D   EE           MOV     A,R6
   \   00002E   2420         ADD     A,#0x20
   \   000030   F582         MOV     DPL,A
   \   000032   E4           CLR     A
   \   000033   3F           ADDC    A,R7
   \   000034   F583         MOV     DPH,A
   \   000036   7400         MOV     A,#0x0
   \   000038   F0           MOVX    @DPTR,A
    612          
    613          
    614            MAC_MlmeStartReq((macMlmeStartReq_t *) pData);
   \   000039                ; Setup parameters for call to function MAC_MlmeStartReq
   \   000039   EE           MOV     A,R6
   \   00003A   FA           MOV     R2,A
   \   00003B   EF           MOV     A,R7
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   `??MAC_MlmeStartReq::?relay`; Banked call to: MAC_MlmeStartReq
    615          
    616            // MAC does not issue mlmeStartConfirm(), so we have to
    617            // mlmeStartConfirm( stat );  This needs to be addressed some how
    618          
    619            return ZMacSuccess;
   \   000040   7900         MOV     R1,#0x0
   \   000042   7401         MOV     A,#0x1
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   7F01         MOV     R7,#0x1
   \   000049   02....       LJMP    ?BANKED_LEAVE_XDATA
    620          }
    621          
    622          /********************************************************************************************************
    623           * @fn      ZMacSyncReq
    624           *
    625           * @brief   This function is called to request a sync to the current
    626           *          networks beacons.
    627           *
    628           * @param   LogicalChannel -
    629           * @param   TrackBeacon - true/false
    630           *
    631           * @return  status
    632           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          uint8 ZMacSyncReq( ZMacSyncReq_t *pData )
   \                     ZMacSyncReq:
    634          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    635            MAC_MlmeSyncReq( (macMlmeSyncReq_t *)pData);
   \   000009                ; Setup parameters for call to function MAC_MlmeSyncReq
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   `??MAC_MlmeSyncReq::?relay`; Banked call to: MAC_MlmeSyncReq
    636            return ZMacSuccess;
   \   000010   7900         MOV     R1,#0x0
   \   000012   7F01         MOV     R7,#0x1
   \   000014   02....       LJMP    ?BANKED_LEAVE_XDATA
    637          }
    638          
    639          /********************************************************************************************************
    640           * @fn      ZMacPollReq
    641           *
    642           * @brief   This function is called to request MAC data request poll.
    643           *
    644           * @param   coordAddr -
    645           * @param   coordPanId -
    646           * @param   SecurityEnable - true or false.
    647           *
    648           * @return  status
    649           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          uint8 ZMacPollReq( ZMacPollReq_t *pData )
   \                     ZMacPollReq:
    651          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    652            /* Right now, set security to zero */
    653            pData->Sec.SecurityLevel = false;
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
    654          
    655            MAC_MlmePollReq ((macMlmePollReq_t *)pData);
   \   000015                ; Setup parameters for call to function MAC_MlmePollReq
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??MAC_MlmePollReq::?relay`; Banked call to: MAC_MlmePollReq
    656            return ( ZMacSuccess );
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   7F01         MOV     R7,#0x1
   \   000020   02....       LJMP    ?BANKED_LEAVE_XDATA
    657          }
    658          
    659          /********************************************************************************************************
    660           * @fn      ZMacDataReqSec
    661           *
    662           * @brief   Send a MAC Data Frame packet, calls the passed in function to apply non-MAC security
    663           *          on the MAC data field after the MAC buffer allocation.
    664           *
    665           * @param   pData - structure containing data and where to send it.
    666           * @param   secCB - callback function to apply security, NULL indicates no security
    667           *
    668           * @return  status
    669           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    670          uint8 ZMacDataReqSec( ZMacDataReq_t *pData, applySecCB_t secCB )
   \                     ZMacDataReqSec:
    671          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
    672            macMcpsDataReq_t *pBuf;
    673          
    674            /* Allocate memory */
    675            pBuf = MAC_McpsDataAlloc( pData->msduLength, pData->Sec.SecurityLevel, pData->Sec.KeyIdMode );
   \   00000D                ; Setup parameters for call to function MAC_McpsDataAlloc
   \   00000D   E5..         MOV     A,?V0
   \   00000F   241C         ADD     A,#0x1c
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V1
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FB           MOV     R3,A
   \   00001A   E5..         MOV     A,?V0
   \   00001C   241B         ADD     A,#0x1b
   \   00001E   F582         MOV     DPL,A
   \   000020   E4           CLR     A
   \   000021   35..         ADDC    A,?V1
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   E5..         MOV     A,?V0
   \   000029   241E         ADD     A,#0x1e
   \   00002B   F582         MOV     DPL,A
   \   00002D   E4           CLR     A
   \   00002E   35..         ADDC    A,?V1
   \   000030   F583         MOV     DPH,A
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   `??MAC_McpsDataAlloc::?relay`; Banked call to: MAC_McpsDataAlloc
   \   000037   8A..         MOV     ?V4,R2
   \   000039   8B..         MOV     ?V5,R3
   \   00003B   AE..         MOV     R6,?V4
   \   00003D   AF..         MOV     R7,?V5
    676          
    677            if ( pBuf )
   \   00003F   EE           MOV     A,R6
   \   000040   4F           ORL     A,R7
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??ZMacDataReqSec_0 & 0xFFFF
    678            {
    679              /* Copy the addresses */
    680              osal_memcpy( &pBuf->mac, pData, sizeof (macDataReq_t) );
   \   000046                ; Setup parameters for call to function osal_memcpy
   \   000046   85....       MOV     ?V4,?V0
   \   000049   85....       MOV     ?V5,?V1
   \   00004C   75..00       MOV     ?V6,#0x0
   \   00004F   78..         MOV     R0,#?V4
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000054   7C11         MOV     R4,#0x11
   \   000056   7D00         MOV     R5,#0x0
   \   000058   EE           MOV     A,R6
   \   000059   2423         ADD     A,#0x23
   \   00005B   FA           MOV     R2,A
   \   00005C   E4           CLR     A
   \   00005D   3F           ADDC    A,R7
   \   00005E   FB           MOV     R3,A
   \   00005F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000062   7403         MOV     A,#0x3
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    681          
    682              /* Copy data */
    683              osal_memcpy( pBuf->msdu.p, pData->msdu, pData->msduLength );
   \   000067                ; Setup parameters for call to function osal_memcpy
   \   000067   E5..         MOV     A,?V0
   \   000069   241F         ADD     A,#0x1f
   \   00006B   F582         MOV     DPL,A
   \   00006D   E4           CLR     A
   \   00006E   35..         ADDC    A,?V1
   \   000070   F583         MOV     DPH,A
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F5..         MOV     ?V4,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F5..         MOV     ?V5,A
   \   000079   75..00       MOV     ?V6,#0x0
   \   00007C   78..         MOV     R0,#?V4
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000081   E5..         MOV     A,?V0
   \   000083   241E         ADD     A,#0x1e
   \   000085   F582         MOV     DPL,A
   \   000087   E4           CLR     A
   \   000088   35..         ADDC    A,?V1
   \   00008A   F583         MOV     DPH,A
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FC           MOV     R4,A
   \   00008E   7D00         MOV     R5,#0x0
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FA           MOV     R2,A
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FB           MOV     R3,A
   \   00009B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00009E   7403         MOV     A,#0x3
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
    684          
    685              /* Copy Security parameters */
    686              osal_memcpy( &pBuf->sec, &pData->Sec, sizeof (macSec_t));
   \   0000A3                ; Setup parameters for call to function osal_memcpy
   \   0000A3   E5..         MOV     A,?V0
   \   0000A5   2413         ADD     A,#0x13
   \   0000A7   F5..         MOV     ?V4,A
   \   0000A9   E4           CLR     A
   \   0000AA   35..         ADDC    A,?V1
   \   0000AC   F5..         MOV     ?V5,A
   \   0000AE   75..00       MOV     ?V6,#0x0
   \   0000B1   78..         MOV     R0,#?V4
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B6   7C0B         MOV     R4,#0xb
   \   0000B8   7D00         MOV     R5,#0x0
   \   0000BA   EE           MOV     A,R6
   \   0000BB   2418         ADD     A,#0x18
   \   0000BD   FA           MOV     R2,A
   \   0000BE   E4           CLR     A
   \   0000BF   3F           ADDC    A,R7
   \   0000C0   FB           MOV     R3,A
   \   0000C1   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C4   7403         MOV     A,#0x3
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
    687          
    688              /* Encrypt in place */
    689              if ( secCB && pBuf->msdu.len && pBuf->msdu.p )
   \   0000C9   E5..         MOV     A,?V2
   \   0000CB   45..         ORL     A,?V3
   \   0000CD   6047         JZ      ??ZMacDataReqSec_1
   \   0000CF   8E82         MOV     DPL,R6
   \   0000D1   8F83         MOV     DPH,R7
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   603C         JZ      ??ZMacDataReqSec_1
   \   0000DA   8E82         MOV     DPL,R6
   \   0000DC   8F83         MOV     DPH,R7
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F8           MOV     R0,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F9           MOV     R1,A
   \   0000E5   E8           MOV     A,R0
   \   0000E6   49           ORL     A,R1
   \   0000E7   602D         JZ      ??ZMacDataReqSec_1
    690              {
    691                if ( secCB( pBuf->msdu.len, pBuf->msdu.p ) != ZSuccess )
   \   0000E9                ; Setup parameters for indirect call
   \   0000E9   8E82         MOV     DPL,R6
   \   0000EB   8F83         MOV     DPH,R7
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   FA           MOV     R2,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   FB           MOV     R3,A
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F9           MOV     R1,A
   \   0000FE   85..82       MOV     DPL,?V2
   \   000101   85..83       MOV     DPH,?V3
   \   000104   12....       LCALL   ?CALL_IND
   \   000107   E9           MOV     A,R1
   \   000108   600C         JZ      ??ZMacDataReqSec_1
    692                {
    693                  // Deallocate the buffer.  MAC_McpsDataAlloc() calls osal_msg_allocate() and
    694                  // returns the same pointer.
    695                  osal_msg_deallocate( (uint8 *)pBuf );
   \   00010A                ; Setup parameters for call to function osal_msg_deallocate
   \   00010A   EE           MOV     A,R6
   \   00010B   FA           MOV     R2,A
   \   00010C   EF           MOV     A,R7
   \   00010D   FB           MOV     R3,A
   \   00010E   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   000111   E9           MOV     A,R1
    696          
    697                  return ( MAC_NO_RESOURCES );
   \   000112   791A         MOV     R1,#0x1a
   \   000114   800D         SJMP    ??ZMacDataReqSec_2
    698                }
    699              }
    700          
    701              /* Call Mac Data Request */
    702              MAC_McpsDataReq( pBuf );
   \                     ??ZMacDataReqSec_1:
   \   000116                ; Setup parameters for call to function MAC_McpsDataReq
   \   000116   EE           MOV     A,R6
   \   000117   FA           MOV     R2,A
   \   000118   EF           MOV     A,R7
   \   000119   FB           MOV     R3,A
   \   00011A   12....       LCALL   `??MAC_McpsDataReq::?relay`; Banked call to: MAC_McpsDataReq
    703          
    704              return ( ZMacSuccess );
   \   00011D   7900         MOV     R1,#0x0
   \   00011F   8002         SJMP    ??ZMacDataReqSec_2
    705            }
    706          
    707            return ( MAC_NO_RESOURCES );
   \                     ??ZMacDataReqSec_0:
   \   000121   791A         MOV     R1,#0x1a
   \                     ??ZMacDataReqSec_2:
   \   000123   7F07         MOV     R7,#0x7
   \   000125   02....       LJMP    ?BANKED_LEAVE_XDATA
    708          }
    709          
    710          /********************************************************************************************************
    711           * @fn      ZMacDataReq
    712           *
    713           * @brief   Send a MAC Data Frame packet.
    714           *
    715           * @param   structure containing data and where to send it.
    716           *
    717           * @return  status
    718           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    719          uint8 ZMacDataReq( ZMacDataReq_t *pData )
   \                     ZMacDataReq:
    720          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    721            return ZMacDataReqSec( pData, NULL );
   \   000009                ; Setup parameters for call to function ZMacDataReqSec
   \   000009   7C00         MOV     R4,#0x0
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `??ZMacDataReqSec::?relay`; Banked call to: ZMacDataReqSec
   \   000014   7F01         MOV     R7,#0x1
   \   000016   02....       LJMP    ?BANKED_LEAVE_XDATA
    722          }
    723          
    724          /********************************************************************************************************
    725           * @fn      ZMacPurgeReq
    726           *
    727           * @brief   Purge a MAC Data Frame packet.
    728           *
    729           * @param   MSDU data handle.
    730           *
    731           * @return  status
    732           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    733          uint8 ZMacPurgeReq( byte Handle )
   \                     ZMacPurgeReq:
    734          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    735            MAC_McpsPurgeReq( Handle );
   \   000007                ; Setup parameters for call to function MAC_McpsPurgeReq
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??MAC_McpsPurgeReq::?relay`; Banked call to: MAC_McpsPurgeReq
    736            return ZMacSuccess;
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   7F01         MOV     R7,#0x1
   \   000010   02....       LJMP    ?BANKED_LEAVE_XDATA
    737          }
    738          
    739          /********************************************************************************************************
    740           * @fn      ZMacSrcMatchEnable
    741           *
    742           * @brief   This function is call to enable AUTOPEND and source address matching.
    743           *
    744           * @param   addressType - address type that the application uses
    745           *                        SADDR_MODE_SHORT or SADDR_MODE_EXT.
    746           *          numEntries  - number of source address table entries to be used
    747           *
    748           * @return  status
    749           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    750          ZMacStatus_t ZMacSrcMatchEnable (void)
   \                     ZMacSrcMatchEnable:
    751          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    752            MAC_SrcMatchEnable();
   \   000004                ; Setup parameters for call to function MAC_SrcMatchEnable
   \   000004   12....       LCALL   `??MAC_SrcMatchEnable::?relay`; Banked call to: MAC_SrcMatchEnable
    753            return ZMacSuccess;
   \   000007   7900         MOV     R1,#0x0
   \   000009   D083         POP     DPH
   \   00000B   D082         POP     DPL
   \   00000D   02....       LJMP    ?BRET
    754          }
    755          
    756          /********************************************************************************************************
    757           * @fn      ZMacSrcMatchAddEntry
    758           *
    759           * @brief   This function is called to add a short or extended address to source address table.
    760           *
    761           * @param   addr - a pointer to sAddr_t which contains addrMode
    762           *                     and a union of a short 16-bit MAC address or an extended
    763           *                     64-bit MAC address to be added to the source address table.
    764           *          panID - the device PAN ID. It is only used when the addr is
    765           *                      using short address
    766           *
    767           * @return  status
    768           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    769          ZMacStatus_t ZMacSrcMatchAddEntry (zAddrType_t *addr, uint16 panID)
   \                     ZMacSrcMatchAddEntry:
    770          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    771            return (MAC_SrcMatchAddEntry ((sAddr_t*)addr, panID));
   \   00000D                ; Setup parameters for call to function MAC_SrcMatchAddEntry
   \   00000D   EE           MOV     A,R6
   \   00000E   FC           MOV     R4,A
   \   00000F   EF           MOV     A,R7
   \   000010   FD           MOV     R5,A
   \   000011   AA..         MOV     R2,?V0
   \   000013   AB..         MOV     R3,?V1
   \   000015   12....       LCALL   `??MAC_SrcMatchAddEntry::?relay`; Banked call to: MAC_SrcMatchAddEntry
   \   000018   7F02         MOV     R7,#0x2
   \   00001A   02....       LJMP    ?BANKED_LEAVE_XDATA
    772          }
    773          
    774          /********************************************************************************************************
    775           * @fn      ZMacSrcMatchDeleteEntry
    776           *
    777           * @brief   This function is called to delete a short or extended address from source address table.
    778           *
    779           * @param   addr - a pointer to sAddr_t which contains addrMode
    780           *                     and a union of a short 16-bit MAC address or an extended
    781           *                     64-bit MAC address to be added to the source address table.
    782           *          panID - the device PAN ID. It is only used when the addr is
    783           *                      using short address
    784           *
    785           * @return  status
    786           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    787          ZMacStatus_t ZMacSrcMatchDeleteEntry (zAddrType_t *addr, uint16 panID)
   \                     ZMacSrcMatchDeleteEntry:
    788          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    789            return (MAC_SrcMatchDeleteEntry ((sAddr_t*)addr, panID));
   \   00000D                ; Setup parameters for call to function MAC_SrcMatchDeleteEntry
   \   00000D   EE           MOV     A,R6
   \   00000E   FC           MOV     R4,A
   \   00000F   EF           MOV     A,R7
   \   000010   FD           MOV     R5,A
   \   000011   AA..         MOV     R2,?V0
   \   000013   AB..         MOV     R3,?V1
   \   000015   12....       LCALL   `??MAC_SrcMatchDeleteEntry::?relay`; Banked call to: MAC_SrcMatchDeleteEntry
   \   000018   7F02         MOV     R7,#0x2
   \   00001A   02....       LJMP    ?BANKED_LEAVE_XDATA
    790          }
    791          
    792          /********************************************************************************************************
    793           * @fn       ZMacSrcMatchAckAllPending
    794           *
    795           * @brief    Enabled/disable acknowledging all packets with pending bit set
    796           *           It is normally enabled when adding new entries to
    797           *           the source address table fails due to the table is full, or
    798           *           disabled when more entries are deleted and the table has
    799           *           empty slots.
    800           *
    801           * @param    option - true (acknowledging all packets with pending field set)
    802           *                    false (acknowledging all packets with pending field cleared)
    803           *
    804           * @return   status
    805           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    806          ZMacStatus_t ZMacSrcMatchAckAllPending (uint8 option)
   \                     ZMacSrcMatchAckAllPending:
    807          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    808            MAC_SrcMatchAckAllPending (option);
   \   000007                ; Setup parameters for call to function MAC_SrcMatchAckAllPending
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??MAC_SrcMatchAckAllPending::?relay`; Banked call to: MAC_SrcMatchAckAllPending
    809          
    810            return ZMacSuccess;
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   7F01         MOV     R7,#0x1
   \   000010   02....       LJMP    ?BANKED_LEAVE_XDATA
    811          }
    812          
    813          /********************************************************************************************************
    814           * @fn       ZMacSrcMatchCheckAllPending
    815           *
    816           * @brief    This function is called to check if acknowledging all packets with pending bit set is enabled.
    817           *
    818           * @param    none
    819           *
    820           * @return   status
    821           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    822          ZMacStatus_t ZMacSrcMatchCheckAllPending (void)
   \                     ZMacSrcMatchCheckAllPending:
    823          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    824            return (MAC_SrcMatchCheckAllPending ());
   \   000004                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   000004   12....       LCALL   `??MAC_SrcMatchCheckAllPending::?relay`; Banked call to: MAC_SrcMatchCheckAllPending
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    825          }
    826          
    827          /********************************************************************************************************
    828           * @fn      - ZMACPwrOnReq
    829           *
    830           * @brief   - This function requests the MAC to power on the radio hardware
    831           *            and wake up.  When the power on procedure is complete the MAC
    832           *            will send a MAC_PWR_ON_CNF to the application.
    833           *
    834           * @input   - None.
    835           *
    836           * @output  - None.
    837           *
    838           * @return  - None.
    839           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    840          void ZMacPwrOnReq ( void )
   \                     ZMacPwrOnReq:
    841          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    842            MAC_PwrOnReq();
   \   000004                ; Setup parameters for call to function MAC_PwrOnReq
   \   000004   12....       LCALL   `??MAC_PwrOnReq::?relay`; Banked call to: MAC_PwrOnReq
    843          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    844          
    845          /********************************************************************************************************
    846           * @fn          MAC_PwrMode
    847           *
    848           * @brief       This function returns the current power mode of the MAC.
    849           *
    850           * input parameters
    851           *
    852           * None.
    853           *
    854           * output parameters
    855           *
    856           * None.
    857           *
    858           * @return      The current power mode of the MAC.
    859           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          uint8 ZMac_PwrMode(void)
   \                     ZMac_PwrMode:
    861          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    862            return (MAC_PwrMode());
   \   000004                ; Setup parameters for call to function MAC_PwrMode
   \   000004   12....       LCALL   `??MAC_PwrMode::?relay`; Banked call to: MAC_PwrMode
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    863          }
    864          
    865          /********************************************************************************************************
    866           * @fn      ZMacSetTransmitPower
    867           *
    868           * @brief   Set the transmitter power according to the level setting param.
    869           *
    870           * @param   Valid power level setting as defined in ZMAC.h.
    871           *
    872           * @return  ZMacSuccess if PHY_TRANSMIT_POWER found or ZMacUnsupportedAttribute.
    873           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    874          uint8 ZMacSetTransmitPower( ZMacTransmitPower_t level )
   \                     ZMacSetTransmitPower:
    875          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   C0E0         PUSH    A
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
    876            return MAC_MlmeSetReq( ZMacPhyTransmitPowerSigned, &level );
   \   000015                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000015   AA..         MOV     R2,?XSP + 0
   \   000017   AB..         MOV     R3,?XSP + 1
   \   000019   79E0         MOV     R1,#-0x20
   \   00001B   12....       LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
   \   000023   D083         POP     DPH
   \   000025   D082         POP     DPL
   \   000027   02....       LJMP    ?BRET
    877          }
    878          
    879          /********************************************************************************************************
    880           * @fn      ZMacSendNoData
    881           *
    882           * @brief   This function sends an empty msg
    883           *
    884           * @param   DstAddr   - destination short address
    885           *          DstPANId  - destination pan id
    886           *
    887           * @return  None
    888           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    889          void ZMacSendNoData ( uint16 DstAddr, uint16 DstPANId )
   \                     ZMacSendNoData:
    890          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    891            macMcpsDataReq_t *pBuf;
    892          
    893            /* Allocate memory */
    894            pBuf = MAC_McpsDataAlloc(0, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE);
   \   00000D                ; Setup parameters for call to function MAC_McpsDataAlloc
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   12....       LCALL   `??MAC_McpsDataAlloc::?relay`; Banked call to: MAC_McpsDataAlloc
   \   000016   8A..         MOV     ?V4,R2
   \   000018   8B..         MOV     ?V5,R3
   \   00001A   AE..         MOV     R6,?V4
   \   00001C   AF..         MOV     R7,?V5
    895          
    896            if (pBuf)
   \   00001E   EE           MOV     A,R6
   \   00001F   4F           ORL     A,R7
   \   000020   6067         JZ      ??ZMacSendNoData_0
    897            {
    898              /* Fill in src information */
    899              pBuf->mac.srcAddrMode              = SADDR_MODE_SHORT;
   \   000022   EE           MOV     A,R6
   \   000023   242E         ADD     A,#0x2e
   \   000025   F582         MOV     DPL,A
   \   000027   E4           CLR     A
   \   000028   3F           ADDC    A,R7
   \   000029   F583         MOV     DPH,A
   \   00002B   7402         MOV     A,#0x2
   \   00002D   F0           MOVX    @DPTR,A
    900          
    901              /* Fill in dst information */
    902              pBuf->mac.dstAddr.addr.shortAddr   = DstAddr;
   \   00002E   EE           MOV     A,R6
   \   00002F   2423         ADD     A,#0x23
   \   000031   F582         MOV     DPL,A
   \   000033   E4           CLR     A
   \   000034   3F           ADDC    A,R7
   \   000035   F583         MOV     DPH,A
   \   000037   E5..         MOV     A,?V2
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   E5..         MOV     A,?V3
   \   00003D   F0           MOVX    @DPTR,A
    903              pBuf->mac.dstAddr.addrMode         = SADDR_MODE_SHORT;
   \   00003E   EE           MOV     A,R6
   \   00003F   242B         ADD     A,#0x2b
   \   000041   F582         MOV     DPL,A
   \   000043   E4           CLR     A
   \   000044   3F           ADDC    A,R7
   \   000045   F583         MOV     DPH,A
   \   000047   7402         MOV     A,#0x2
   \   000049   F0           MOVX    @DPTR,A
    904              pBuf->mac.dstPanId                 = DstPANId;
   \   00004A   EE           MOV     A,R6
   \   00004B   242C         ADD     A,#0x2c
   \   00004D   F582         MOV     DPL,A
   \   00004F   E4           CLR     A
   \   000050   3F           ADDC    A,R7
   \   000051   F583         MOV     DPH,A
   \   000053   E5..         MOV     A,?V0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E5..         MOV     A,?V1
   \   000059   F0           MOVX    @DPTR,A
    905          
    906              /* Misc information */
    907              pBuf->mac.msduHandle               = 0;
   \   00005A   EE           MOV     A,R6
   \   00005B   242F         ADD     A,#0x2f
   \   00005D   F582         MOV     DPL,A
   \   00005F   E4           CLR     A
   \   000060   3F           ADDC    A,R7
   \   000061   F583         MOV     DPH,A
   \   000063   7400         MOV     A,#0x0
   \   000065   F0           MOVX    @DPTR,A
    908              pBuf->mac.txOptions                = ZMAC_TXOPTION_ACK | ZMAC_TXOPTION_NO_RETRANS | ZMAC_TXOPTION_NO_CNF;
   \   000066   EE           MOV     A,R6
   \   000067   2430         ADD     A,#0x30
   \   000069   F582         MOV     DPL,A
   \   00006B   E4           CLR     A
   \   00006C   3F           ADDC    A,R7
   \   00006D   F583         MOV     DPH,A
   \   00006F   7431         MOV     A,#0x31
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   7400         MOV     A,#0x0
   \   000075   F0           MOVX    @DPTR,A
    909          
    910              /* Right now, set security to zero */
    911              pBuf->sec.securityLevel = false;
   \   000076   EE           MOV     A,R6
   \   000077   2420         ADD     A,#0x20
   \   000079   F582         MOV     DPL,A
   \   00007B   E4           CLR     A
   \   00007C   3F           ADDC    A,R7
   \   00007D   F583         MOV     DPH,A
   \   00007F   7400         MOV     A,#0x0
   \   000081   F0           MOVX    @DPTR,A
    912          
    913              /* Call Mac Data Request */
    914              MAC_McpsDataReq(pBuf);
   \   000082                ; Setup parameters for call to function MAC_McpsDataReq
   \   000082   EE           MOV     A,R6
   \   000083   FA           MOV     R2,A
   \   000084   EF           MOV     A,R7
   \   000085   FB           MOV     R3,A
   \   000086   12....       LCALL   `??MAC_McpsDataReq::?relay`; Banked call to: MAC_McpsDataReq
    915            }
    916          
    917          }
   \                     ??ZMacSendNoData_0:
   \   000089   7F06         MOV     R7,#0x6
   \   00008B   02....       LJMP    ?BANKED_LEAVE_XDATA
    918          
    919          /********************************************************************************************************
    920           * @fn      ZMacStateIdle
    921           *
    922           * @brief   This function returns true if the MAC state is idle.
    923           *
    924           * @param   none
    925           *
    926           * @return  TRUE if the MAC state is idle, FALSE otherwise.
    927           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    928          uint8 ZMacStateIdle( void )
   \                     ZMacStateIdle:
    929          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    930            return macStateIdle();
   \   000004                ; Setup parameters for call to function macStateIdle
   \   000004   12....       LCALL   `??macStateIdle::?relay`; Banked call to: macStateIdle
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    931          }
    932          
    933          /********************************************************************************************************
    934           * @fn      ZMacEnhancedActiveScanReq
    935           *
    936           * @brief   This function is called to perform a network scan.
    937           *
    938           * @param   param - structure with info need send it.
    939           *
    940           * @return  status
    941           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    942          uint8 ZMacEnhancedActiveScanReq( ZMacScanReq_t *pData )
   \                     ZMacEnhancedActiveScanReq:
    943          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    944            _ScanChannels = pData->ScanChannels;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   12....       LCALL   ?XLOAD_R0123
   \   000010   90....       MOV     DPTR,#_ScanChannels
   \   000013   12....       LCALL   ?XSTORE_R0123
    945          
    946            /* scan in progress */
    947            if (ZMac_ScanBuf != NULL)
   \   000016   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   49           ORL     A,R1
   \   000020   6005         JZ      ??ZMacEnhancedActiveScanReq_0
    948            {
    949              return MAC_SCAN_IN_PROGRESS;
   \   000022   79FC         MOV     R1,#-0x4
   \   000024   02....       LJMP    ??ZMacEnhancedActiveScanReq_1 & 0xFFFF
    950            }
    951          
    952            if (pData->ScanType != ZMAC_ORPHAN_SCAN)
   \                     ??ZMacEnhancedActiveScanReq_0:
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6403         XRL     A,#0x3
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??ZMacEnhancedActiveScanReq_2 & 0xFFFF
    953            {
    954              /* Allocate memory depends on the scan type */
    955              if (pData->ScanType == ZMAC_ED_SCAN)
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   704D         JNZ     ??ZMacEnhancedActiveScanReq_3
    956              {
    957                if ((ZMac_ScanBuf = osal_mem_alloc(ZMAC_ED_SCAN_MAXCHANNELS)) == NULL)
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   7A1B         MOV     R2,#0x1b
   \   000044   7B00         MOV     R3,#0x0
   \   000046   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000049   8A..         MOV     ?V0,R2
   \   00004B   8B..         MOV     ?V1,R3
   \   00004D   A8..         MOV     R0,?V0
   \   00004F   A9..         MOV     R1,?V1
   \   000051   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000054   E8           MOV     A,R0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E9           MOV     A,R1
   \   000058   F0           MOVX    @DPTR,A
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   7005         JNZ     ??ZMacEnhancedActiveScanReq_4
    958                {
    959                  return MAC_NO_RESOURCES;
   \   00005D   791A         MOV     R1,#0x1a
   \   00005F   02....       LJMP    ??ZMacEnhancedActiveScanReq_1 & 0xFFFF
    960                }
    961                osal_memset(ZMac_ScanBuf, 0, ZMAC_ED_SCAN_MAXCHANNELS);
   \                     ??ZMacEnhancedActiveScanReq_4:
   \   000062                ; Setup parameters for call to function osal_memset
   \   000062   7C1B         MOV     R4,#0x1b
   \   000064   7D00         MOV     R5,#0x0
   \   000066   7900         MOV     R1,#0x0
   \   000068   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FA           MOV     R2,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    962                pData->Result.pEnergyDetect = ((uint8*)ZMac_ScanBuf) + MAC_CHAN_11;
   \   000073   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000076   E0           MOVX    A,@DPTR
   \   000077   240B         ADD     A,#0xb
   \   000079   F8           MOV     R0,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F9           MOV     R1,A
   \   00007F   EE           MOV     A,R6
   \   000080   2416         ADD     A,#0x16
   \   000082   F582         MOV     DPL,A
   \   000084   E4           CLR     A
   \   000085   3F           ADDC    A,R7
   \   000086   F583         MOV     DPH,A
   \   000088   E8           MOV     A,R0
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   E9           MOV     A,R1
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   8069         SJMP    ??ZMacEnhancedActiveScanReq_2
    963              }
    964              else if (pData->MaxResults > 0)
   \                     ??ZMacEnhancedActiveScanReq_3:
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   605B         JZ      ??ZMacEnhancedActiveScanReq_2
    965              {
    966                if ((ZMac_ScanBuf = pData->Result.pPanDescriptor =
    967                     osal_mem_alloc( sizeof( ZMacPanDesc_t ) * pData->MaxResults )) == NULL)
   \   00009D                ; Setup parameters for call to function osal_mem_alloc
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FA           MOV     R2,A
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   EA           MOV     A,R2
   \   0000AD   75F021       MOV     B,#0x21
   \   0000B0   A4           MUL     AB
   \   0000B1   CA           XCH     A,R2
   \   0000B2   A8F0         MOV     R0,B
   \   0000B4   75F000       MOV     B,#0x0
   \   0000B7   A4           MUL     AB
   \   0000B8   28           ADD     A,R0
   \   0000B9   F8           MOV     R0,A
   \   0000BA   75F021       MOV     B,#0x21
   \   0000BD   EB           MOV     A,R3
   \   0000BE   A4           MUL     AB
   \   0000BF   28           ADD     A,R0
   \   0000C0   FB           MOV     R3,A
   \   0000C1   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C4   EE           MOV     A,R6
   \   0000C5   2416         ADD     A,#0x16
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   E4           CLR     A
   \   0000CA   3F           ADDC    A,R7
   \   0000CB   F583         MOV     DPH,A
   \   0000CD   EA           MOV     A,R2
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   EB           MOV     A,R3
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   EE           MOV     A,R6
   \   0000D3   2416         ADD     A,#0x16
   \   0000D5   F582         MOV     DPL,A
   \   0000D7   E4           CLR     A
   \   0000D8   3F           ADDC    A,R7
   \   0000D9   F583         MOV     DPH,A
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0000E3   E8           MOV     A,R0
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   E9           MOV     A,R1
   \   0000E7   F0           MOVX    @DPTR,A
   \   0000E8   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F8           MOV     R0,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F9           MOV     R1,A
   \   0000F0   E8           MOV     A,R0
   \   0000F1   49           ORL     A,R1
   \   0000F2   7004         JNZ     ??ZMacEnhancedActiveScanReq_2
    968                {
    969                  return MAC_NO_RESOURCES;
   \   0000F4   791A         MOV     R1,#0x1a
   \   0000F6   8016         SJMP    ??ZMacEnhancedActiveScanReq_1
    970                }
    971              }
    972            }
    973          
    974            /* Channel Page */
    975            pData->ChannelPage = 0x00; 
   \                     ??ZMacEnhancedActiveScanReq_2:
   \   0000F8   8E82         MOV     DPL,R6
   \   0000FA   8F83         MOV     DPH,R7
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   7400         MOV     A,#0x0
   \   000104   F0           MOVX    @DPTR,A
    976          
    977            MAC_MlmeScanReq ((macMlmeScanReq_t *)pData);
   \   000105                ; Setup parameters for call to function MAC_MlmeScanReq
   \   000105   EE           MOV     A,R6
   \   000106   FA           MOV     R2,A
   \   000107   EF           MOV     A,R7
   \   000108   FB           MOV     R3,A
   \   000109   12....       LCALL   `??MAC_MlmeScanReq::?relay`; Banked call to: MAC_MlmeScanReq
    978          
    979            return ZMacSuccess;
   \   00010C   7900         MOV     R1,#0x0
   \                     ??ZMacEnhancedActiveScanReq_1:
   \   00010E   7F02         MOV     R7,#0x2
   \   000110   02....       LJMP    ?BANKED_LEAVE_XDATA
    980          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacGetReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacGetReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSetReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSetReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacAssociateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacAssociateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacAssociateRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacAssociateRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacDisassociateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacDisassociateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacOrphanRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacOrphanRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacScanReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacScanReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacStartReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacStartReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSyncReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSyncReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacPollReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacPollReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacDataReqSec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacDataReqSec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacDataReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacDataReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacPurgeReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacPurgeReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchEnable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchAddEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchDeleteEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchDeleteEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchAckAllPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchAckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchCheckAllPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchCheckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacPwrOnReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacPwrOnReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMac_PwrMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMac_PwrMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSetTransmitPower::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSetTransmitPower

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSendNoData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSendNoData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacStateIdle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacStateIdle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacEnhancedActiveScanReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacEnhancedActiveScanReq

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   ZMacAssociateReq
        0      9   -> MAC_MlmeAssociateReq
      0      9   ZMacAssociateRsp
        0      9   -> MAC_MlmeAssociateRsp
      0      9   ZMacDataReq
        0      9   -> ZMacDataReqSec
      0     27   ZMacDataReqSec
        0     15   -> MAC_McpsDataAlloc
        0     15   -> MAC_McpsDataReq
        0     18   -> osal_memcpy
        0     15   -> osal_msg_deallocate
      0      9   ZMacDisassociateReq
        0      9   -> MAC_MlmeDisassociateReq
      0     10   ZMacEnhancedActiveScanReq
        0     10   -> MAC_MlmeScanReq
        0     10   -> osal_mem_alloc
        0     10   -> osal_memset
      0      9   ZMacGetReq
        0      9   -> MAC_MlmeGetReq
        0      9   -> sAddrExtCpy
      0      9   ZMacInit
        0      9   -> MAC_Init
        0      9   -> MAC_InitCoord
        0      9   -> MAC_InitDevice
        0      9   -> ZMacReset
        0      9   -> osal_int_disable
      0      9   ZMacOrphanRsp
        0      9   -> MAC_MlmeOrphanRsp
      0      9   ZMacPollReq
        0      9   -> MAC_MlmePollReq
      0      9   ZMacPurgeReq
        0      9   -> MAC_McpsPurgeReq
      2      0   ZMacPwrOnReq
        2      0   -> MAC_PwrOnReq
      0     19   ZMacReset
        0     10   -> MAC_MlmeResetReq
        0     10   -> MAC_MlmeSetReq
        0     10   -> osal_mem_free
      0     10   ZMacScanReq
        0     10   -> MAC_MlmeScanReq
        0     10   -> osal_mem_alloc
        0     10   -> osal_memset
      0     14   ZMacSendNoData
        0     14   -> MAC_McpsDataAlloc
        0     14   -> MAC_McpsDataReq
      0      9   ZMacSetReq
        0      9   -> MAC_MlmeSetReq
        0      9   -> sAddrExtCpy
      3      1   ZMacSetTransmitPower
        2      1   -> MAC_MlmeSetReq
      0      9   ZMacSrcMatchAckAllPending
        0      9   -> MAC_SrcMatchAckAllPending
      0     10   ZMacSrcMatchAddEntry
        0     10   -> MAC_SrcMatchAddEntry
      2      0   ZMacSrcMatchCheckAllPending
        2      0   -> MAC_SrcMatchCheckAllPending
      0     10   ZMacSrcMatchDeleteEntry
        0     10   -> MAC_SrcMatchDeleteEntry
      2      0   ZMacSrcMatchEnable
        2      0   -> MAC_SrcMatchEnable
      0     10   ZMacStartReq
        0     10   -> MAC_MlmeSetReq
        0     10   -> MAC_MlmeStartReq
      2      0   ZMacStateIdle
        2      0   -> macStateIdle
      0      9   ZMacSyncReq
        0      9   -> MAC_MlmeSyncReq
      2      0   ZMac_PwrMode
        2      0   -> MAC_PwrMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  UsePrimaryExtAddr
       8  UseSecondaryExtAddr
      38  ZMacAssociateReq
       6  ZMacAssociateReq::?relay
      36  ZMacAssociateRsp
       6  ZMacAssociateRsp::?relay
      25  ZMacDataReq
       6  ZMacDataReq::?relay
     296  ZMacDataReqSec
       6  ZMacDataReqSec::?relay
      38  ZMacDisassociateReq
       6  ZMacDisassociateReq::?relay
     275  ZMacEnhancedActiveScanReq
       6  ZMacEnhancedActiveScanReq::?relay
      46  ZMacGetReq
       6  ZMacGetReq::?relay
      34  ZMacInit
       6  ZMacInit::?relay
      38  ZMacOrphanRsp
       6  ZMacOrphanRsp::?relay
      35  ZMacPollReq
       6  ZMacPollReq::?relay
      19  ZMacPurgeReq
       6  ZMacPurgeReq::?relay
      14  ZMacPwrOnReq
       6  ZMacPwrOnReq::?relay
      93  ZMacReset
       6  ZMacReset::?relay
     275  ZMacScanReq
       6  ZMacScanReq::?relay
     142  ZMacSendNoData
       6  ZMacSendNoData::?relay
      53  ZMacSetReq
       6  ZMacSetReq::?relay
      42  ZMacSetTransmitPower
       6  ZMacSetTransmitPower::?relay
      19  ZMacSrcMatchAckAllPending
       6  ZMacSrcMatchAckAllPending::?relay
      29  ZMacSrcMatchAddEntry
       6  ZMacSrcMatchAddEntry::?relay
      14  ZMacSrcMatchCheckAllPending
       6  ZMacSrcMatchCheckAllPending::?relay
      29  ZMacSrcMatchDeleteEntry
       6  ZMacSrcMatchDeleteEntry::?relay
      16  ZMacSrcMatchEnable
       6  ZMacSrcMatchEnable::?relay
      76  ZMacStartReq
       6  ZMacStartReq::?relay
      14  ZMacStateIdle
       6  ZMacStateIdle::?relay
      23  ZMacSyncReq
       6  ZMacSyncReq::?relay
      14  ZMac_PwrMode
       6  ZMac_PwrMode::?relay
       2  ZMac_ScanBuf
       4  _ScanChannels

 
 1 733 bytes in segment BANKED_CODE
   156 bytes in segment BANK_RELAYS
    16 bytes in segment XDATA_ROM_C
     6 bytes in segment XDATA_Z
 
 1 889 bytes of CODE  memory
    16 bytes of CONST memory
     6 bytes of XDATA memory

Errors: none
Warnings: none
