###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  17:48:55
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\zmac\f8w\zmac_cb.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\zmac\f8w\zmac_cb.c" -D ZTOOL_P1 -D MT_TASK -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE -D
#        NV_INIT -D OPEN_FCS -D PANID_INCREASE -lC "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List" -lA
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj" -e
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\zmac_cb.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj\zmac_cb.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2014-06-04 08:52:26 -0700 (Wed, 04 Jun 2014) $
      4            Revision:       $Revision: 38796 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          
     50          #if !defined NONWK
     51          #include "nwk.h"
     52          #include "nwk_bufs.h"
     53          #include "ZGlobals.h"
     54          #endif
     55          
     56          #if defined( MACSIM )
     57            #include "mac_sim.h"
     58          #endif
     59          
     60          #include "mac_security.h"
     61          
     62          #include "mac_main.h"
     63          extern void *ZMac_ScanBuf;
     64          
     65          /********************************************************************************************************
     66           *                                               CONSTANTS
     67           ********************************************************************************************************/
     68          
     69          #if !defined NONWK
     70          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     71          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   33           DB 51
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   0E           DB 14
     72            0,
     73            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     74            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     75            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     76            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     77            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     78            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     79            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     80            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     81            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     82            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     83            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     84            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     85            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     86            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     87            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     88            sizeof(ZMacPollInd_t)             // MAC_MLME_POLL_IND           16  Poll indication
     89          };
     90          #endif /* !defined NONWK */
     91          
     92          /********************************************************************************************************
     93           *                                               LOCALS
     94           ********************************************************************************************************/
     95          
     96          /* LQI Adjustment Mode */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
   \                     lqiAdjMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     98          
     99          #if !defined NONWK
    100          /* LQI Adjustment Function */
    101          static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
    102          #endif
    103          
    104          /*********************************************************************
    105           * ZMAC Function Pointers
    106           */
    107          
    108          /*
    109           * ZMac Application callback function. This function will be called
    110           * for every MAC message that is received over-the-air or generated
    111           * locally by MAC for the application.
    112           *
    113           * The callback function should return TRUE if it has handled the
    114           * MAC message and no further action should be taken with it. It
    115           * should return FALSE if it has not handled the MAC message and
    116           * normal processing should take place.
    117           *
    118           * NOTE: The processing in this function should be kept to the
    119           *       minimum.
    120           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    122          
    123          
    124          /*********************************************************************
    125           * ZMAC Functions
    126           */
    127          
    128          /**************************************************************************************************
    129           * @fn       MAC_CbackEvent()
    130           *
    131           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    132           *
    133           * @param    pData - pointer to macCbackEvent_t
    134           *
    135           * @return   none
    136           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    138          #ifndef MT_MAC_CB_FUNC
    139          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    140          #if !defined NONWK
    141            uint8 event = pData->hdr.event;
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F583         MOV     DPH,A
   \   000021   8882         MOV     DPL,R0
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V2,A
    142            uint16 tmp = zmacCBSizeTable[event];
   \   000026   A8..         MOV     R0,?V2
   \   000028   7900         MOV     R1,#0x0
   \   00002A   74..         MOV     A,#zmacCBSizeTable & 0xff
   \   00002C   28           ADD     A,R0
   \   00002D   F582         MOV     DPL,A
   \   00002F   74..         MOV     A,#(zmacCBSizeTable >> 8) & 0xff
   \   000031   39           ADDC    A,R1
   \   000032   F583         MOV     DPH,A
   \   000034   E4           CLR     A
   \   000035   93           MOVC    A,@A+DPTR
   \   000036   F8           MOV     R0,A
   \   000037   7900         MOV     R1,#0x0
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E8           MOV     A,R0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E9           MOV     A,R1
   \   000042   F0           MOVX    @DPTR,A
    143            macCbackEvent_t *msgPtr;
    144          
    145            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    146             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    147             */
    148            if (tmp == 0)
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   E8           MOV     A,R0
   \   00004E   49           ORL     A,R1
   \   00004F   7003         JNZ     $+5
   \   000051   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    149            {
    150              return;
    151            }
    152          
    153            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    154            if ( event == MAC_MCPS_DATA_IND )
   \   000054   740D         MOV     A,#0xd
   \   000056   65..         XRL     A,?V2
   \   000058   705C         JNZ     ??MAC_CbackEvent_1
    155            {
    156          #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
    157              // This feature limits the number of unprocessed MAC Data Indications that can be queued
    158              // into the Network Task's OSAL message queue. To enable ZMAC_MAX_DATA_IND filtering, the
    159              // command-line option specifies the threshold setting where MAC_MCPS_DATD_IND callback
    160              // messages will be dropped. For example, adding ZMAC_MAX_DATA_IND=5 to the commnad-line
    161              // options allows up to five messages to be passed up and queued in the NWK layer buffer.
    162              uint8 diCount = osal_msg_count( NWK_TaskID, MAC_MCPS_DATA_IND );
    163          #endif // ZMAC_MAX_DATA_IND
    164              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   00005A                ; Setup parameters for call to function MAC_MlmeGetReq
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?XSTACK_DISP101_8
   \   00005F   7953         MOV     R1,#0x53
   \   000061   12....       LCALL   `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
   \   000064   E9           MOV     A,R1
    165              if ( (tmp == INVALID_NODE_ADDR) ||
    166                   (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    167          #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
    168                   (diCount > ZMAC_MAX_DATA_IND) ||
    169          #endif // ZMAC_MAX_DATA_IND
    170                   (pData->dataInd.msdu.len == 0) )
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   64FE         XRL     A,#0xfe
   \   00006D   7004         JNZ     ??MAC_CbackEvent_2
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   64FF         XRL     A,#0xff
   \                     ??MAC_CbackEvent_2:
   \   000073   6025         JZ      ??MAC_CbackEvent_3
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   64FF         XRL     A,#0xff
   \   00007D   7004         JNZ     ??MAC_CbackEvent_4
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   64FF         XRL     A,#0xff
   \                     ??MAC_CbackEvent_4:
   \   000083   6015         JZ      ??MAC_CbackEvent_3
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F8           MOV     R0,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F583         MOV     DPH,A
   \   000091   8882         MOV     DPL,R0
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   700A         JNZ     ??MAC_CbackEvent_5
    171              {
    172                mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_3:
   \   00009A                ; Setup parameters for call to function mac_msg_deallocate
   \   00009A   AA..         MOV     R2,?XSP + 0
   \   00009C   AB..         MOV     R3,?XSP + 1
   \   00009E   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    173                return;
   \   0000A1   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    174              }
    175              msgPtr = pData;
   \                     ??MAC_CbackEvent_5:
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F8           MOV     R0,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F9           MOV     R1,A
   \   0000AF   E8           MOV     A,R0
   \   0000B0   FE           MOV     R6,A
   \   0000B1   E9           MOV     A,R1
   \   0000B2   FF           MOV     R7,A
   \   0000B3   02....       LJMP    ??MAC_CbackEvent_6 & 0xFFFF
    176            }
    177            else
    178            {
    179              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   0000B6   7405         MOV     A,#0x5
   \   0000B8   65..         XRL     A,?V2
   \   0000BA   702D         JNZ     ??MAC_CbackEvent_7
    180              {
    181                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   0000BC   85..82       MOV     DPL,?XSP + 0
   \   0000BF   85..83       MOV     DPH,?XSP + 1
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F8           MOV     R0,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   C8           XCH     A,R0
   \   0000C7   2408         ADD     A,#0x8
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   C8           XCH     A,R0
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F583         MOV     DPH,A
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F8           MOV     R0,A
   \   0000D2   7900         MOV     R1,#0x0
   \   0000D4   E8           MOV     A,R0
   \   0000D5   2421         ADD     A,#0x21
   \   0000D7   F8           MOV     R0,A
   \   0000D8   5001         JNC     ??MAC_CbackEvent_8
   \   0000DA   09           INC     R1
   \                     ??MAC_CbackEvent_8:
   \   0000DB   7402         MOV     A,#0x2
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   28           ADD     A,R0
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   39           ADDC    A,R1
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   8062         SJMP    ??MAC_CbackEvent_9
    182              }
    183              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_7:
   \   0000E9   7407         MOV     A,#0x7
   \   0000EB   65..         XRL     A,?V2
   \   0000ED   705C         JNZ     ??MAC_CbackEvent_9
    184              {
    185                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000EF   85..82       MOV     DPL,?XSP + 0
   \   0000F2   85..83       MOV     DPH,?XSP + 1
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F8           MOV     R0,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F583         MOV     DPH,A
   \   0000FB   8882         MOV     DPL,R0
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   7010         JNZ     ??MAC_CbackEvent_10
    186                {
    187                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   000102   7402         MOV     A,#0x2
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   E0           MOVX    A,@DPTR
   \   000108   241B         ADD     A,#0x1b
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   3400         ADDC    A,#0x0
   \   00010F   F0           MOVX    @DPTR,A
   \   000110   8039         SJMP    ??MAC_CbackEvent_9
    188                }
    189                else
    190                {
    191                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_10:
   \   000112   85..82       MOV     DPL,?XSP + 0
   \   000115   85..83       MOV     DPH,?XSP + 1
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F8           MOV     R0,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   C8           XCH     A,R0
   \   00011D   2408         ADD     A,#0x8
   \   00011F   F582         MOV     DPL,A
   \   000121   C8           XCH     A,R0
   \   000122   3400         ADDC    A,#0x0
   \   000124   F583         MOV     DPH,A
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F8           MOV     R0,A
   \   000128   7900         MOV     R1,#0x0
   \   00012A   E8           MOV     A,R0
   \   00012B   75F021       MOV     B,#0x21
   \   00012E   A4           MUL     AB
   \   00012F   C8           XCH     A,R0
   \   000130   AAF0         MOV     R2,B
   \   000132   75F000       MOV     B,#0x0
   \   000135   A4           MUL     AB
   \   000136   2A           ADD     A,R2
   \   000137   FA           MOV     R2,A
   \   000138   75F021       MOV     B,#0x21
   \   00013B   E9           MOV     A,R1
   \   00013C   A4           MUL     AB
   \   00013D   2A           ADD     A,R2
   \   00013E   F9           MOV     R1,A
   \   00013F   7402         MOV     A,#0x2
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   E0           MOVX    A,@DPTR
   \   000145   28           ADD     A,R0
   \   000146   F0           MOVX    @DPTR,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   39           ADDC    A,R1
   \   00014A   F0           MOVX    @DPTR,A
    192                }
    193              }
    194          
    195              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_9:
   \   00014B                ; Setup parameters for call to function osal_msg_allocate
   \   00014B   7402         MOV     A,#0x2
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   E0           MOVX    A,@DPTR
   \   000151   FA           MOV     R2,A
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   FB           MOV     R3,A
   \   000155   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000158   8A..         MOV     ?V0,R2
   \   00015A   8B..         MOV     ?V1,R3
   \   00015C   AE..         MOV     R6,?V0
   \   00015E   AF..         MOV     R7,?V1
   \   000160   EE           MOV     A,R6
   \   000161   4F           ORL     A,R7
   \   000162   706D         JNZ     ??MAC_CbackEvent_11
    196              {
    197                // Not enough memory. If data confirm - try again
    198                if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \   000164   740C         MOV     A,#0xc
   \   000166   65..         XRL     A,?V2
   \   000168   7064         JNZ     ??MAC_CbackEvent_12
   \   00016A   85..82       MOV     DPL,?XSP + 0
   \   00016D   85..83       MOV     DPH,?XSP + 1
   \   000170   E0           MOVX    A,@DPTR
   \   000171   F8           MOV     R0,A
   \   000172   A3           INC     DPTR
   \   000173   E0           MOVX    A,@DPTR
   \   000174   F583         MOV     DPH,A
   \   000176   8882         MOV     DPL,R0
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F8           MOV     R0,A
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   F9           MOV     R1,A
   \   000180   E8           MOV     A,R0
   \   000181   49           ORL     A,R1
   \   000182   604A         JZ      ??MAC_CbackEvent_12
    199                {
    200                  halIntState_t intState;
    201          
    202                  // This is not normally deallocated here because the pZMac_AppCallback()
    203                  // application may need it.
    204                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000184   A2AF         MOV     C,0xa8.7
   \   000186   E4           CLR     A
   \   000187   33           RLC     A
   \   000188   F5..         MOV     ?V0,A
   \   00018A   C2AF         CLR     0xa8.7
    205          
    206                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   00018C                ; Setup parameters for call to function mac_msg_deallocate
   \   00018C   85..82       MOV     DPL,?XSP + 0
   \   00018F   85..83       MOV     DPH,?XSP + 1
   \   000192   E0           MOVX    A,@DPTR
   \   000193   2403         ADD     A,#0x3
   \   000195   FA           MOV     R2,A
   \   000196   A3           INC     DPTR
   \   000197   E0           MOVX    A,@DPTR
   \   000198   3400         ADDC    A,#0x0
   \   00019A   FB           MOV     R3,A
   \   00019B   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    207                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   00019E                ; Setup parameters for call to function osal_msg_allocate
   \   00019E   7402         MOV     A,#0x2
   \   0001A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   FA           MOV     R2,A
   \   0001A5   A3           INC     DPTR
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   FB           MOV     R3,A
   \   0001A8   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0001AB   8A..         MOV     ?V4,R2
   \   0001AD   8B..         MOV     ?V5,R3
   \   0001AF   AE..         MOV     R6,?V4
   \   0001B1   AF..         MOV     R7,?V5
   \   0001B3   EE           MOV     A,R6
   \   0001B4   4F           ORL     A,R7
   \   0001B5   700C         JNZ     ??MAC_CbackEvent_13
    208                  {
    209                    // Still no allocation, something is wrong
    210                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   0001B7   85....       MOV     ?V7,?V0
   \   0001BA   E5..         MOV     A,?V0
   \   0001BC   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001BE   92AF         MOV     0xa8.7,C
    211                    return;
   \   0001C0   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    212                  }
    213                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_13:
   \   0001C3   85....       MOV     ?V3,?V0
   \   0001C6   E5..         MOV     A,?V0
   \   0001C8   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001CA   92AF         MOV     0xa8.7,C
   \   0001CC   8003         SJMP    ??MAC_CbackEvent_11
    214                }
    215                else
    216                {
    217                  // This message is dropped
    218                  return;
   \                     ??MAC_CbackEvent_12:
   \   0001CE   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    219                }
    220              }
    221              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_11:
   \   0001D1                ; Setup parameters for call to function osal_memcpy
   \   0001D1   85..82       MOV     DPL,?XSP + 0
   \   0001D4   85..83       MOV     DPH,?XSP + 1
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F5..         MOV     ?V4,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   F5..         MOV     ?V5,A
   \   0001DE   75..00       MOV     ?V6,#0x0
   \   0001E1   78..         MOV     R0,#?V4
   \   0001E3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001E6   A8..         MOV     R0,?V2
   \   0001E8   7900         MOV     R1,#0x0
   \   0001EA   74..         MOV     A,#zmacCBSizeTable & 0xff
   \   0001EC   28           ADD     A,R0
   \   0001ED   F582         MOV     DPL,A
   \   0001EF   74..         MOV     A,#(zmacCBSizeTable >> 8) & 0xff
   \   0001F1   39           ADDC    A,R1
   \   0001F2   F583         MOV     DPH,A
   \   0001F4   E4           CLR     A
   \   0001F5   93           MOVC    A,@A+DPTR
   \   0001F6   FC           MOV     R4,A
   \   0001F7   7D00         MOV     R5,#0x0
   \   0001F9   EE           MOV     A,R6
   \   0001FA   FA           MOV     R2,A
   \   0001FB   EF           MOV     A,R7
   \   0001FC   FB           MOV     R3,A
   \   0001FD   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000200   7403         MOV     A,#0x3
   \   000202   12....       LCALL   ?DEALLOC_XSTACK8
    222            }
    223          
    224            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_6:
   \   000205   7405         MOV     A,#0x5
   \   000207   65..         XRL     A,?V2
   \   000209   6003         JZ      $+5
   \   00020B   02....       LJMP    ??MAC_CbackEvent_14 & 0xFFFF
    225            {
    226              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
   \   00020E   8E..         MOV     ?V0,R6
   \   000210   8F..         MOV     ?V1,R7
    227          
    228              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   000212                ; Setup parameters for call to function osal_memcpy
   \   000212   85..82       MOV     DPL,?V0
   \   000215   85..83       MOV     DPH,?V1
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   E0           MOVX    A,@DPTR
   \   00021C   F5..         MOV     ?V4,A
   \   00021E   A3           INC     DPTR
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   F5..         MOV     ?V5,A
   \   000222   75..00       MOV     ?V6,#0x0
   \   000225   78..         MOV     R0,#?V4
   \   000227   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00022A   7C21         MOV     R4,#0x21
   \   00022C   7D00         MOV     R5,#0x0
   \   00022E   E5..         MOV     A,?V0
   \   000230   240B         ADD     A,#0xb
   \   000232   FA           MOV     R2,A
   \   000233   E4           CLR     A
   \   000234   35..         ADDC    A,?V1
   \   000236   FB           MOV     R3,A
   \   000237   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00023A   7403         MOV     A,#0x3
   \   00023C   12....       LCALL   ?DEALLOC_XSTACK8
    229              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   00023F   E5..         MOV     A,?V0
   \   000241   240B         ADD     A,#0xb
   \   000243   F8           MOV     R0,A
   \   000244   E4           CLR     A
   \   000245   35..         ADDC    A,?V1
   \   000247   F9           MOV     R1,A
   \   000248   85..82       MOV     DPL,?V0
   \   00024B   85..83       MOV     DPH,?V1
   \   00024E   A3           INC     DPTR
   \   00024F   A3           INC     DPTR
   \   000250   A3           INC     DPTR
   \   000251   E8           MOV     A,R0
   \   000252   F0           MOVX    @DPTR,A
   \   000253   A3           INC     DPTR
   \   000254   E9           MOV     A,R1
   \   000255   F0           MOVX    @DPTR,A
    230              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000256                ; Setup parameters for call to function osal_memcpy
   \   000256   85..82       MOV     DPL,?V0
   \   000259   85..83       MOV     DPH,?V1
   \   00025C   A3           INC     DPTR
   \   00025D   A3           INC     DPTR
   \   00025E   A3           INC     DPTR
   \   00025F   A3           INC     DPTR
   \   000260   A3           INC     DPTR
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   A3           INC     DPTR
   \   000264   A3           INC     DPTR
   \   000265   E0           MOVX    A,@DPTR
   \   000266   F5..         MOV     ?V4,A
   \   000268   A3           INC     DPTR
   \   000269   E0           MOVX    A,@DPTR
   \   00026A   F5..         MOV     ?V5,A
   \   00026C   75..00       MOV     ?V6,#0x0
   \   00026F   78..         MOV     R0,#?V4
   \   000271   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000274   85..82       MOV     DPL,?V0
   \   000277   85..83       MOV     DPH,?V1
   \   00027A   A3           INC     DPTR
   \   00027B   A3           INC     DPTR
   \   00027C   A3           INC     DPTR
   \   00027D   A3           INC     DPTR
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   A3           INC     DPTR
   \   000281   A3           INC     DPTR
   \   000282   E0           MOVX    A,@DPTR
   \   000283   FC           MOV     R4,A
   \   000284   7D00         MOV     R5,#0x0
   \   000286   85..82       MOV     DPL,?V0
   \   000289   85..83       MOV     DPH,?V1
   \   00028C   A3           INC     DPTR
   \   00028D   A3           INC     DPTR
   \   00028E   A3           INC     DPTR
   \   00028F   E0           MOVX    A,@DPTR
   \   000290   2421         ADD     A,#0x21
   \   000292   FA           MOV     R2,A
   \   000293   A3           INC     DPTR
   \   000294   E0           MOVX    A,@DPTR
   \   000295   3400         ADDC    A,#0x0
   \   000297   FB           MOV     R3,A
   \   000298   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00029B   7403         MOV     A,#0x3
   \   00029D   12....       LCALL   ?DEALLOC_XSTACK8
    231              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0002A0   85..82       MOV     DPL,?V0
   \   0002A3   85..83       MOV     DPH,?V1
   \   0002A6   A3           INC     DPTR
   \   0002A7   A3           INC     DPTR
   \   0002A8   A3           INC     DPTR
   \   0002A9   E0           MOVX    A,@DPTR
   \   0002AA   2421         ADD     A,#0x21
   \   0002AC   F8           MOV     R0,A
   \   0002AD   A3           INC     DPTR
   \   0002AE   E0           MOVX    A,@DPTR
   \   0002AF   3400         ADDC    A,#0x0
   \   0002B1   F9           MOV     R1,A
   \   0002B2   85..82       MOV     DPL,?V0
   \   0002B5   85..83       MOV     DPH,?V1
   \   0002B8   A3           INC     DPTR
   \   0002B9   A3           INC     DPTR
   \   0002BA   A3           INC     DPTR
   \   0002BB   A3           INC     DPTR
   \   0002BC   A3           INC     DPTR
   \   0002BD   A3           INC     DPTR
   \   0002BE   A3           INC     DPTR
   \   0002BF   A3           INC     DPTR
   \   0002C0   A3           INC     DPTR
   \   0002C1   E8           MOV     A,R0
   \   0002C2   F0           MOVX    @DPTR,A
   \   0002C3   A3           INC     DPTR
   \   0002C4   E9           MOV     A,R1
   \   0002C5   F0           MOVX    @DPTR,A
   \   0002C6   02....       LJMP    ??MAC_CbackEvent_15 & 0xFFFF
    232            }
    233            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_14:
   \   0002C9   7407         MOV     A,#0x7
   \   0002CB   65..         XRL     A,?V2
   \   0002CD   6003         JZ      $+5
   \   0002CF   02....       LJMP    ??MAC_CbackEvent_15 & 0xFFFF
    234            {
    235              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
   \   0002D2   8E..         MOV     ?V0,R6
   \   0002D4   8F..         MOV     ?V1,R7
    236          
    237              if (ZMac_ScanBuf != NULL)
   \   0002D6   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0002D9   E0           MOVX    A,@DPTR
   \   0002DA   F8           MOV     R0,A
   \   0002DB   A3           INC     DPTR
   \   0002DC   E0           MOVX    A,@DPTR
   \   0002DD   F9           MOV     R1,A
   \   0002DE   E8           MOV     A,R0
   \   0002DF   49           ORL     A,R1
   \   0002E0   7003         JNZ     $+5
   \   0002E2   02....       LJMP    ??MAC_CbackEvent_15 & 0xFFFF
    238              {
    239                void *pTmp = ZMac_ScanBuf;
   \   0002E5   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0002E8   E0           MOVX    A,@DPTR
   \   0002E9   F5..         MOV     ?V8,A
   \   0002EB   A3           INC     DPTR
   \   0002EC   E0           MOVX    A,@DPTR
   \   0002ED   F5..         MOV     ?V9,A
    240                ZMac_ScanBuf = NULL;
   \   0002EF   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0002F2   7400         MOV     A,#0x0
   \   0002F4   F0           MOVX    @DPTR,A
   \   0002F5   A3           INC     DPTR
   \   0002F6   7400         MOV     A,#0x0
   \   0002F8   F0           MOVX    @DPTR,A
    241          
    242                if (pScan->scanType == ZMAC_ED_SCAN)
   \   0002F9   85..82       MOV     DPL,?V0
   \   0002FC   85..83       MOV     DPH,?V1
   \   0002FF   A3           INC     DPTR
   \   000300   A3           INC     DPTR
   \   000301   E0           MOVX    A,@DPTR
   \   000302   704D         JNZ     ??MAC_CbackEvent_16
    243                {
    244                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   000304   E5..         MOV     A,?V0
   \   000306   240B         ADD     A,#0xb
   \   000308   F8           MOV     R0,A
   \   000309   E4           CLR     A
   \   00030A   35..         ADDC    A,?V1
   \   00030C   F9           MOV     R1,A
   \   00030D   85..82       MOV     DPL,?V0
   \   000310   85..83       MOV     DPH,?V1
   \   000313   A3           INC     DPTR
   \   000314   A3           INC     DPTR
   \   000315   A3           INC     DPTR
   \   000316   A3           INC     DPTR
   \   000317   A3           INC     DPTR
   \   000318   A3           INC     DPTR
   \   000319   A3           INC     DPTR
   \   00031A   A3           INC     DPTR
   \   00031B   A3           INC     DPTR
   \   00031C   E8           MOV     A,R0
   \   00031D   F0           MOVX    @DPTR,A
   \   00031E   A3           INC     DPTR
   \   00031F   E9           MOV     A,R1
   \   000320   F0           MOVX    @DPTR,A
    245                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \   000321                ; Setup parameters for call to function osal_memcpy
   \   000321   85....       MOV     ?V4,?V8
   \   000324   85....       MOV     ?V5,?V9
   \   000327   75..00       MOV     ?V6,#0x0
   \   00032A   78..         MOV     R0,#?V4
   \   00032C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00032F   7C1B         MOV     R4,#0x1b
   \   000331   7D00         MOV     R5,#0x0
   \   000333   85..82       MOV     DPL,?V0
   \   000336   85..83       MOV     DPH,?V1
   \   000339   A3           INC     DPTR
   \   00033A   A3           INC     DPTR
   \   00033B   A3           INC     DPTR
   \   00033C   A3           INC     DPTR
   \   00033D   A3           INC     DPTR
   \   00033E   A3           INC     DPTR
   \   00033F   A3           INC     DPTR
   \   000340   A3           INC     DPTR
   \   000341   A3           INC     DPTR
   \   000342   E0           MOVX    A,@DPTR
   \   000343   FA           MOV     R2,A
   \   000344   A3           INC     DPTR
   \   000345   E0           MOVX    A,@DPTR
   \   000346   FB           MOV     R3,A
   \   000347   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00034A   7403         MOV     A,#0x3
   \   00034C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00034F   8063         SJMP    ??MAC_CbackEvent_17
    246                }
    247                else
    248                {
    249                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_16:
   \   000351   E5..         MOV     A,?V0
   \   000353   240B         ADD     A,#0xb
   \   000355   F8           MOV     R0,A
   \   000356   E4           CLR     A
   \   000357   35..         ADDC    A,?V1
   \   000359   F9           MOV     R1,A
   \   00035A   85..82       MOV     DPL,?V0
   \   00035D   85..83       MOV     DPH,?V1
   \   000360   A3           INC     DPTR
   \   000361   A3           INC     DPTR
   \   000362   A3           INC     DPTR
   \   000363   A3           INC     DPTR
   \   000364   A3           INC     DPTR
   \   000365   A3           INC     DPTR
   \   000366   A3           INC     DPTR
   \   000367   A3           INC     DPTR
   \   000368   A3           INC     DPTR
   \   000369   E8           MOV     A,R0
   \   00036A   F0           MOVX    @DPTR,A
   \   00036B   A3           INC     DPTR
   \   00036C   E9           MOV     A,R1
   \   00036D   F0           MOVX    @DPTR,A
    250                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   00036E                ; Setup parameters for call to function osal_memcpy
   \   00036E   85....       MOV     ?V4,?V8
   \   000371   85....       MOV     ?V5,?V9
   \   000374   75..00       MOV     ?V6,#0x0
   \   000377   78..         MOV     R0,#?V4
   \   000379   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00037C   85..82       MOV     DPL,?V0
   \   00037F   85..83       MOV     DPH,?V1
   \   000382   A3           INC     DPTR
   \   000383   A3           INC     DPTR
   \   000384   A3           INC     DPTR
   \   000385   A3           INC     DPTR
   \   000386   A3           INC     DPTR
   \   000387   A3           INC     DPTR
   \   000388   A3           INC     DPTR
   \   000389   A3           INC     DPTR
   \   00038A   E0           MOVX    A,@DPTR
   \   00038B   FC           MOV     R4,A
   \   00038C   7D00         MOV     R5,#0x0
   \   00038E   EC           MOV     A,R4
   \   00038F   75F021       MOV     B,#0x21
   \   000392   A4           MUL     AB
   \   000393   CC           XCH     A,R4
   \   000394   A8F0         MOV     R0,B
   \   000396   75F000       MOV     B,#0x0
   \   000399   A4           MUL     AB
   \   00039A   28           ADD     A,R0
   \   00039B   F8           MOV     R0,A
   \   00039C   75F021       MOV     B,#0x21
   \   00039F   ED           MOV     A,R5
   \   0003A0   A4           MUL     AB
   \   0003A1   28           ADD     A,R0
   \   0003A2   FD           MOV     R5,A
   \   0003A3   E5..         MOV     A,?V0
   \   0003A5   240B         ADD     A,#0xb
   \   0003A7   FA           MOV     R2,A
   \   0003A8   E4           CLR     A
   \   0003A9   35..         ADDC    A,?V1
   \   0003AB   FB           MOV     R3,A
   \   0003AC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003AF   7403         MOV     A,#0x3
   \   0003B1   12....       LCALL   ?DEALLOC_XSTACK8
    251                }
    252          
    253                osal_mem_free(pTmp);
   \                     ??MAC_CbackEvent_17:
   \   0003B4                ; Setup parameters for call to function osal_mem_free
   \   0003B4   AA..         MOV     R2,?V8
   \   0003B6   AB..         MOV     R3,?V9
   \   0003B8   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    254              }
    255            }
    256          
    257            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_15:
   \   0003BB   90....       MOV     DPTR,#pZMac_AppCallback
   \   0003BE   E0           MOVX    A,@DPTR
   \   0003BF   F8           MOV     R0,A
   \   0003C0   A3           INC     DPTR
   \   0003C1   E0           MOVX    A,@DPTR
   \   0003C2   F9           MOV     R1,A
   \   0003C3   E8           MOV     A,R0
   \   0003C4   49           ORL     A,R1
   \   0003C5   6018         JZ      ??MAC_CbackEvent_18
   \   0003C7                ; Setup parameters for indirect call
   \   0003C7   EE           MOV     A,R6
   \   0003C8   FA           MOV     R2,A
   \   0003C9   EF           MOV     A,R7
   \   0003CA   FB           MOV     R3,A
   \   0003CB   90....       MOV     DPTR,#pZMac_AppCallback
   \   0003CE   E0           MOVX    A,@DPTR
   \   0003CF   F8           MOV     R0,A
   \   0003D0   A3           INC     DPTR
   \   0003D1   E0           MOVX    A,@DPTR
   \   0003D2   F583         MOV     DPH,A
   \   0003D4   8882         MOV     DPL,R0
   \   0003D6   12....       LCALL   ?CALL_IND
   \   0003D9   E9           MOV     A,R1
   \   0003DA   6003         JZ      $+5
   \   0003DC   02....       LJMP    ??MAC_CbackEvent_19 & 0xFFFF
    258            {
    259              // Filter out non-zigbee packets
    260              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_18:
   \   0003DF   740D         MOV     A,#0xd
   \   0003E1   65..         XRL     A,?V2
   \   0003E3   6003         JZ      $+5
   \   0003E5   02....       LJMP    ??MAC_CbackEvent_20 & 0xFFFF
    261              {
    262                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
   \   0003E8   85..82       MOV     DPL,?XSP + 0
   \   0003EB   85..83       MOV     DPH,?XSP + 1
   \   0003EE   E0           MOVX    A,@DPTR
   \   0003EF   F8           MOV     R0,A
   \   0003F0   A3           INC     DPTR
   \   0003F1   E0           MOVX    A,@DPTR
   \   0003F2   F583         MOV     DPH,A
   \   0003F4   8882         MOV     DPL,R0
   \   0003F6   A3           INC     DPTR
   \   0003F7   A3           INC     DPTR
   \   0003F8   E0           MOVX    A,@DPTR
   \   0003F9   F8           MOV     R0,A
   \   0003FA   A3           INC     DPTR
   \   0003FB   E0           MOVX    A,@DPTR
   \   0003FC   F583         MOV     DPH,A
   \   0003FE   8882         MOV     DPL,R0
   \   000400   E0           MOVX    A,@DPTR
   \   000401   5403         ANL     A,#0x3
   \   000403   F5..         MOV     ?V4,A
    263                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
   \   000405   85..82       MOV     DPL,?XSP + 0
   \   000408   85..83       MOV     DPH,?XSP + 1
   \   00040B   E0           MOVX    A,@DPTR
   \   00040C   F8           MOV     R0,A
   \   00040D   A3           INC     DPTR
   \   00040E   E0           MOVX    A,@DPTR
   \   00040F   F583         MOV     DPH,A
   \   000411   8882         MOV     DPL,R0
   \   000413   A3           INC     DPTR
   \   000414   A3           INC     DPTR
   \   000415   E0           MOVX    A,@DPTR
   \   000416   F8           MOV     R0,A
   \   000417   A3           INC     DPTR
   \   000418   E0           MOVX    A,@DPTR
   \   000419   F583         MOV     DPH,A
   \   00041B   8882         MOV     DPL,R0
   \   00041D   E0           MOVX    A,@DPTR
   \   00041E   13           RRC     A
   \   00041F   13           RRC     A
   \   000420   543F         ANL     A,#0x3f
   \   000422   540F         ANL     A,#0xf
   \   000424   F5..         MOV     ?V5,A
    264                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xE0);
   \   000426   85..82       MOV     DPL,?XSP + 0
   \   000429   85..83       MOV     DPH,?XSP + 1
   \   00042C   E0           MOVX    A,@DPTR
   \   00042D   F8           MOV     R0,A
   \   00042E   A3           INC     DPTR
   \   00042F   E0           MOVX    A,@DPTR
   \   000430   F583         MOV     DPH,A
   \   000432   8882         MOV     DPL,R0
   \   000434   A3           INC     DPTR
   \   000435   A3           INC     DPTR
   \   000436   E0           MOVX    A,@DPTR
   \   000437   F8           MOV     R0,A
   \   000438   A3           INC     DPTR
   \   000439   E0           MOVX    A,@DPTR
   \   00043A   F583         MOV     DPH,A
   \   00043C   8882         MOV     DPL,R0
   \   00043E   A3           INC     DPTR
   \   00043F   E0           MOVX    A,@DPTR
   \   000440   54E0         ANL     A,#0xe0
   \   000442   F5..         MOV     ?V6,A
    265                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
    266                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   000444   E5..         MOV     A,?V4
   \   000446   C3           CLR     C
   \   000447   9402         SUBB    A,#0x2
   \   000449   5025         JNC     ??MAC_CbackEvent_21
   \   00044B   90....       MOV     DPTR,#_NIB + 17
   \   00044E   E0           MOVX    A,@DPTR
   \   00044F   65..         XRL     A,?V5
   \   000451   701D         JNZ     ??MAC_CbackEvent_21
   \   000453   E5..         MOV     A,?V6
   \   000455   7019         JNZ     ??MAC_CbackEvent_21
   \   000457   85..82       MOV     DPL,?XSP + 0
   \   00045A   85..83       MOV     DPH,?XSP + 1
   \   00045D   E0           MOVX    A,@DPTR
   \   00045E   F8           MOV     R0,A
   \   00045F   A3           INC     DPTR
   \   000460   E0           MOVX    A,@DPTR
   \   000461   C8           XCH     A,R0
   \   000462   241B         ADD     A,#0x1b
   \   000464   F582         MOV     DPL,A
   \   000466   C8           XCH     A,R0
   \   000467   3400         ADDC    A,#0x0
   \   000469   F583         MOV     DPH,A
   \   00046B   E0           MOVX    A,@DPTR
   \   00046C   6402         XRL     A,#0x2
   \   00046E   600A         JZ      ??MAC_CbackEvent_22
    267                {
    268                  // Drop the message
    269                  mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_21:
   \   000470                ; Setup parameters for call to function mac_msg_deallocate
   \   000470   AA..         MOV     R2,?XSP + 0
   \   000472   AB..         MOV     R3,?XSP + 1
   \   000474   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    270                  return;
   \   000477   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    271                }
    272                else
    273                {
    274                  macDataInd_t *pInd = &msgPtr->dataInd.mac;
   \                     ??MAC_CbackEvent_22:
   \   00047A   EE           MOV     A,R6
   \   00047B   2413         ADD     A,#0x13
   \   00047D   F5..         MOV     ?V0,A
   \   00047F   E4           CLR     A
   \   000480   3F           ADDC    A,R7
   \   000481   F5..         MOV     ?V1,A
    275                  // See if LQI needs adjustment due to frame correlation
    276                  ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
   \   000483                ; Setup parameters for call to function ZMacLqiAdjust
   \   000483   E5..         MOV     A,?V0
   \   000485   241C         ADD     A,#0x1c
   \   000487   FA           MOV     R2,A
   \   000488   E4           CLR     A
   \   000489   35..         ADDC    A,?V1
   \   00048B   FB           MOV     R3,A
   \   00048C   E5..         MOV     A,?V0
   \   00048E   241D         ADD     A,#0x1d
   \   000490   F582         MOV     DPL,A
   \   000492   E4           CLR     A
   \   000493   35..         ADDC    A,?V1
   \   000495   F583         MOV     DPH,A
   \   000497   E0           MOVX    A,@DPTR
   \   000498   F9           MOV     R1,A
   \   000499   12....       LCALL   `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    277          
    278                  // Look for broadcast message that has a radius of greater 1
    279                  if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
    280                         && (pData->dataInd.msdu.p[6] > 1) )
   \   00049C   85..82       MOV     DPL,?XSP + 0
   \   00049F   85..83       MOV     DPH,?XSP + 1
   \   0004A2   E0           MOVX    A,@DPTR
   \   0004A3   F8           MOV     R0,A
   \   0004A4   A3           INC     DPTR
   \   0004A5   E0           MOVX    A,@DPTR
   \   0004A6   C8           XCH     A,R0
   \   0004A7   241C         ADD     A,#0x1c
   \   0004A9   F582         MOV     DPL,A
   \   0004AB   C8           XCH     A,R0
   \   0004AC   3400         ADDC    A,#0x0
   \   0004AE   F583         MOV     DPH,A
   \   0004B0   E0           MOVX    A,@DPTR
   \   0004B1   64FF         XRL     A,#0xff
   \   0004B3   7004         JNZ     ??MAC_CbackEvent_23
   \   0004B5   A3           INC     DPTR
   \   0004B6   E0           MOVX    A,@DPTR
   \   0004B7   64FF         XRL     A,#0xff
   \                     ??MAC_CbackEvent_23:
   \   0004B9   6003         JZ      $+5
   \   0004BB   02....       LJMP    ??MAC_CbackEvent_24 & 0xFFFF
   \   0004BE   85..82       MOV     DPL,?XSP + 0
   \   0004C1   85..83       MOV     DPH,?XSP + 1
   \   0004C4   E0           MOVX    A,@DPTR
   \   0004C5   F8           MOV     R0,A
   \   0004C6   A3           INC     DPTR
   \   0004C7   E0           MOVX    A,@DPTR
   \   0004C8   F583         MOV     DPH,A
   \   0004CA   8882         MOV     DPL,R0
   \   0004CC   A3           INC     DPTR
   \   0004CD   A3           INC     DPTR
   \   0004CE   E0           MOVX    A,@DPTR
   \   0004CF   F8           MOV     R0,A
   \   0004D0   A3           INC     DPTR
   \   0004D1   E0           MOVX    A,@DPTR
   \   0004D2   C8           XCH     A,R0
   \   0004D3   2406         ADD     A,#0x6
   \   0004D5   F582         MOV     DPL,A
   \   0004D7   C8           XCH     A,R0
   \   0004D8   3400         ADDC    A,#0x0
   \   0004DA   F583         MOV     DPH,A
   \   0004DC   E0           MOVX    A,@DPTR
   \   0004DD   C3           CLR     C
   \   0004DE   9402         SUBB    A,#0x2
   \   0004E0   407E         JC      ??MAC_CbackEvent_24
    281                  {
    282                    // Send the messsage to a special broadcast queue
    283                    if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
   \   0004E2                ; Setup parameters for call to function nwk_broadcastSend
   \   0004E2   EE           MOV     A,R6
   \   0004E3   FA           MOV     R2,A
   \   0004E4   EF           MOV     A,R7
   \   0004E5   FB           MOV     R3,A
   \   0004E6   12....       LCALL   `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
   \   0004E9   E9           MOV     A,R1
   \   0004EA   6007         JZ      ??MAC_CbackEvent_25
    284                    {
    285                      // Drop the message, too many broadcast messages to process
    286                      mac_msg_deallocate( (uint8 **)&pData );
   \   0004EC                ; Setup parameters for call to function mac_msg_deallocate
   \   0004EC   AA..         MOV     R2,?XSP + 0
   \   0004EE   AB..         MOV     R3,?XSP + 1
   \   0004F0   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    287                    }
    288                    return;
   \                     ??MAC_CbackEvent_25:
   \   0004F3   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    289                  }
    290                }
    291              }
    292              else if ((event == MAC_MCPS_DATA_CNF) && (pData->hdr.status != MAC_NO_RESOURCES))
   \                     ??MAC_CbackEvent_20:
   \   0004F6   740C         MOV     A,#0xc
   \   0004F8   65..         XRL     A,?V2
   \   0004FA   7064         JNZ     ??MAC_CbackEvent_24
   \   0004FC   85..82       MOV     DPL,?XSP + 0
   \   0004FF   85..83       MOV     DPH,?XSP + 1
   \   000502   E0           MOVX    A,@DPTR
   \   000503   F8           MOV     R0,A
   \   000504   A3           INC     DPTR
   \   000505   E0           MOVX    A,@DPTR
   \   000506   F583         MOV     DPH,A
   \   000508   8882         MOV     DPL,R0
   \   00050A   A3           INC     DPTR
   \   00050B   E0           MOVX    A,@DPTR
   \   00050C   641A         XRL     A,#0x1a
   \   00050E   6050         JZ      ??MAC_CbackEvent_24
    293              {
    294                macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
   \   000510   8E..         MOV     ?V0,R6
   \   000512   8F..         MOV     ?V1,R7
    295                
    296                if ( pCnf->pDataReq && (pCnf->pDataReq->internal.txOptions & MAC_TXOPTION_ACK) )
   \   000514   85..82       MOV     DPL,?V0
   \   000517   85..83       MOV     DPH,?V1
   \   00051A   A3           INC     DPTR
   \   00051B   A3           INC     DPTR
   \   00051C   A3           INC     DPTR
   \   00051D   E0           MOVX    A,@DPTR
   \   00051E   F8           MOV     R0,A
   \   00051F   A3           INC     DPTR
   \   000520   E0           MOVX    A,@DPTR
   \   000521   F9           MOV     R1,A
   \   000522   E8           MOV     A,R0
   \   000523   49           ORL     A,R1
   \   000524   603A         JZ      ??MAC_CbackEvent_24
   \   000526   85..82       MOV     DPL,?V0
   \   000529   85..83       MOV     DPH,?V1
   \   00052C   A3           INC     DPTR
   \   00052D   A3           INC     DPTR
   \   00052E   A3           INC     DPTR
   \   00052F   E0           MOVX    A,@DPTR
   \   000530   F8           MOV     R0,A
   \   000531   A3           INC     DPTR
   \   000532   E0           MOVX    A,@DPTR
   \   000533   C8           XCH     A,R0
   \   000534   240E         ADD     A,#0xe
   \   000536   F582         MOV     DPL,A
   \   000538   C8           XCH     A,R0
   \   000539   3400         ADDC    A,#0x0
   \   00053B   F583         MOV     DPH,A
   \   00053D   E0           MOVX    A,@DPTR
   \   00053E   F8           MOV     R0,A
   \   00053F   A3           INC     DPTR
   \   000540   E0           MOVX    A,@DPTR
   \   000541   F9           MOV     R1,A
   \   000542   E8           MOV     A,R0
   \   000543   A2E0         MOV     C,0xE0 /* A   */.0
   \   000545   5019         JNC     ??MAC_CbackEvent_24
    297                {
    298                  // See if LQI needs adjustment due to frame correlation
    299                  ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
   \   000547                ; Setup parameters for call to function ZMacLqiAdjust
   \   000547   E5..         MOV     A,?V0
   \   000549   240C         ADD     A,#0xc
   \   00054B   FA           MOV     R2,A
   \   00054C   E4           CLR     A
   \   00054D   35..         ADDC    A,?V1
   \   00054F   FB           MOV     R3,A
   \   000550   E5..         MOV     A,?V0
   \   000552   240D         ADD     A,#0xd
   \   000554   F582         MOV     DPL,A
   \   000556   E4           CLR     A
   \   000557   35..         ADDC    A,?V1
   \   000559   F583         MOV     DPH,A
   \   00055B   E0           MOVX    A,@DPTR
   \   00055C   F9           MOV     R1,A
   \   00055D   12....       LCALL   `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    300                }
    301              }
    302          
    303              // Application hasn't already processed this message. Send it to NWK task.
    304              osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_24:
   \   000560                ; Setup parameters for call to function osal_msg_send
   \   000560   EE           MOV     A,R6
   \   000561   FA           MOV     R2,A
   \   000562   EF           MOV     A,R7
   \   000563   FB           MOV     R3,A
   \   000564   90....       MOV     DPTR,#NWK_TaskID
   \   000567   E0           MOVX    A,@DPTR
   \   000568   F9           MOV     R1,A
   \   000569   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00056C   E9           MOV     A,R1
    305            }
    306          
    307            if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \                     ??MAC_CbackEvent_19:
   \   00056D   740C         MOV     A,#0xc
   \   00056F   65..         XRL     A,?V2
   \   000571   702C         JNZ     ??MAC_CbackEvent_0
   \   000573   85..82       MOV     DPL,?XSP + 0
   \   000576   85..83       MOV     DPH,?XSP + 1
   \   000579   E0           MOVX    A,@DPTR
   \   00057A   F8           MOV     R0,A
   \   00057B   A3           INC     DPTR
   \   00057C   E0           MOVX    A,@DPTR
   \   00057D   F583         MOV     DPH,A
   \   00057F   8882         MOV     DPL,R0
   \   000581   A3           INC     DPTR
   \   000582   A3           INC     DPTR
   \   000583   A3           INC     DPTR
   \   000584   E0           MOVX    A,@DPTR
   \   000585   F8           MOV     R0,A
   \   000586   A3           INC     DPTR
   \   000587   E0           MOVX    A,@DPTR
   \   000588   F9           MOV     R1,A
   \   000589   E8           MOV     A,R0
   \   00058A   49           ORL     A,R1
   \   00058B   6012         JZ      ??MAC_CbackEvent_0
    308            {
    309              // If the application needs 'pDataReq' then we cannot free it here.
    310              // The application must free it after using it. Note that 'pDataReq'
    311              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    312          
    313              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   00058D                ; Setup parameters for call to function mac_msg_deallocate
   \   00058D   85..82       MOV     DPL,?XSP + 0
   \   000590   85..83       MOV     DPH,?XSP + 1
   \   000593   E0           MOVX    A,@DPTR
   \   000594   2403         ADD     A,#0x3
   \   000596   FA           MOV     R2,A
   \   000597   A3           INC     DPTR
   \   000598   E0           MOVX    A,@DPTR
   \   000599   3400         ADDC    A,#0x0
   \   00059B   FB           MOV     R3,A
   \   00059C   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    314            }
    315          #endif
    316          }
   \                     ??MAC_CbackEvent_0:
   \   00059F   7404         MOV     A,#0x4
   \   0005A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0005A4   7F0A         MOV     R7,#0xa
   \   0005A6   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0005A9                REQUIRE _A_IEN0
    317          #else  // ifdef MT_MAC_CB_FUNC
    318          {
    319            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    320            switch (pData->hdr.event)
    321            {
    322              case MAC_MLME_ASSOCIATE_IND:
    323                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    324                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    325                break;
    326          
    327              case MAC_MLME_ASSOCIATE_CNF:
    328                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    329                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    330                break;
    331          
    332              case MAC_MLME_DISASSOCIATE_IND:
    333                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    334                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    335                break;
    336          
    337              case MAC_MLME_DISASSOCIATE_CNF:
    338                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    339                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    340                break;
    341          
    342              case MAC_MLME_BEACON_NOTIFY_IND:
    343                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    344                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    345                break;
    346          
    347              case MAC_MLME_ORPHAN_IND:
    348                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    349                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    350                break;
    351          
    352              case MAC_MLME_SCAN_CNF:
    353                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    354                {
    355                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    356                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    357                }
    358          
    359                if (ZMac_ScanBuf != NULL)
    360                {
    361                  void *pTmp = ZMac_ScanBuf;
    362                  ZMac_ScanBuf = NULL;
    363                  osal_mem_free(pTmp);
    364                }
    365                break;
    366          
    367              case MAC_MLME_START_CNF:
    368                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    369                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    370                break;
    371          
    372              case MAC_MLME_SYNC_LOSS_IND:
    373                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    374                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    375                break;
    376          
    377              case MAC_MLME_POLL_CNF:
    378                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    379                   nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    380                break;
    381          
    382              case MAC_MLME_COMM_STATUS_IND:
    383                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    384                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    385                break;
    386          
    387              case MAC_MCPS_DATA_CNF:
    388                if (pData->dataCnf.pDataReq != NULL)
    389                  mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    390          
    391                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    392                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    393                break;
    394          
    395              case MAC_MCPS_DATA_IND:
    396                {
    397                  /*
    398                     Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    399                     buffer and re-organize the contents into ZMAC format.
    400                  */
    401                  ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    402                  uint8 event, status, len, *msdu;
    403          
    404                  /* Store parameters */
    405                  event = pData->hdr.event;
    406                  status = pData->hdr.status;
    407                  len = pData->dataInd.msdu.len;
    408                  msdu = pData->dataInd.msdu.p;
    409          
    410                  /* Copy security fields */
    411                  osal_memcpy(&pDataInd->Sec, &pData->dataInd.sec, sizeof(ZMacSec_t));
    412                  
    413                  /* Copy mac fields one by one since the two buffers overlap. */
    414                  osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac.srcAddr, sizeof(zAddrType_t));
    415                  osal_memcpy(&pDataInd->DstAddr, &pData->dataInd.mac.dstAddr, sizeof(zAddrType_t));
    416                  pDataInd->Timestamp = pData->dataInd.mac.timestamp;
    417                  pDataInd->Timestamp2 = pData->dataInd.mac.timestamp2;
    418                  pDataInd->SrcPANId = pData->dataInd.mac.srcPanId;
    419                  pDataInd->DstPANId = pData->dataInd.mac.dstPanId;
    420                  pDataInd->mpduLinkQuality = pData->dataInd.mac.mpduLinkQuality;
    421                  pDataInd->Correlation = pData->dataInd.mac.correlation;
    422                  pDataInd->Rssi = pData->dataInd.mac.rssi;
    423                  pDataInd->Dsn = pData->dataInd.mac.dsn;
    424          
    425                  /* Restore parameters */
    426                  pDataInd->hdr.Status = status;
    427                  pDataInd->hdr.Event = event;
    428                  pDataInd->msduLength = len;
    429          
    430                  if (len)
    431                    pDataInd->msdu = msdu;
    432                  else
    433                    pDataInd->msdu = NULL;
    434          
    435                  if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    436                    nwk_MTCallbackSubNwkDataInd ( pDataInd );
    437                }
    438          
    439                /* free buffer */
    440                mac_msg_deallocate( (uint8 **)&pData );
    441                break;
    442          
    443              case MAC_MCPS_PURGE_CNF:
    444                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    445                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    446                break;
    447          
    448              case MAC_MLME_POLL_IND:
    449                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    450                   nwk_MTCallbackSubNwkPollInd( (ZMacPollInd_t *)pData );
    451                break;
    452          
    453              default:
    454                break;
    455            }
    456          }
    457          #endif
    458          
    459          /********************************************************************************************************
    460           * @fn      MAC_CbackCheckPending
    461           *
    462           * @brief   Return number of pending indirect msg
    463           *
    464           * @param   None
    465           *
    466           * @return  Number of indirect msg holding
    467           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    468          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    469          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    470          #if !defined (NONWK)
    471            if ( ZSTACK_ROUTER_BUILD )
    472            {
    473              return (nwkDB_ReturnIndirectHoldingCnt());
   \   000004                ; Setup parameters for call to function nwkDB_ReturnIndirectHoldingCnt
   \   000004   12....       LCALL   `??nwkDB_ReturnIndirectHoldingCnt::?relay`; Banked call to: nwkDB_ReturnIndirectHoldingCnt
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    474            }
    475            else
    476            {
    477              return (0);
    478            }
    479          #else
    480            return (0);
    481          #endif
    482          }
    483          
    484          /**************************************************************************************************
    485           * @fn          MAC_CbackQueryRetransmit
    486           *
    487           * @brief       This function callback function returns whether or not to continue MAC
    488           *              retransmission.
    489           *              A return value '0x00' will indicate no continuation of retry and a return value
    490           *              '0x01' will indicate to continue retransmission. This callback function shall be
    491           *              used to stop continuing retransmission for RF4CE.
    492           *              MAC shall call this callback function whenever it finishes transmitting a packet
    493           *              for macMaxFrameRetries times.
    494           *
    495           * input parameters
    496           *
    497           * None.
    498           *
    499           * output parameters
    500           *
    501           * None.
    502           *
    503           * @return      0x00 to stop retransmission, 0x01 to continue retransmission.
    504           **************************************************************************************************
    505          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    506          uint8 MAC_CbackQueryRetransmit(void)
   \                     MAC_CbackQueryRetransmit:
    507          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    508            return(0);
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
    509          }
    510          
    511          /********************************************************************************************************
    512           * @fn      ZMacLqiAdjustMode
    513           *
    514           * @brief   Sets/return LQI adjust mode
    515           *
    516           * @param   mode - LQI_ADJ_GET = return current mode only
    517           *                 LQI_ADJ_OFF = disable LQI adjusts
    518           *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
    519           *
    520           * @return  current LQI adjust mode
    521           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    522          ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
   \                     ZMacLqiAdjustMode:
    523          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    524            if ( mode != LQI_ADJ_GET )
   \   000006   74FF         MOV     A,#-0x1
   \   000008   68           XRL     A,R0
   \   000009   6005         JZ      ??ZMacLqiAdjustMode_0
    525            {
    526              lqiAdjMode = mode;
   \   00000B   E8           MOV     A,R0
   \   00000C   90....       MOV     DPTR,#lqiAdjMode
   \   00000F   F0           MOVX    @DPTR,A
    527            }
    528            return ( lqiAdjMode );
   \                     ??ZMacLqiAdjustMode_0:
   \   000010   90....       MOV     DPTR,#lqiAdjMode
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   D083         POP     DPH
   \   000017   D082         POP     DPL
   \   000019   02....       LJMP    ?BRET
    529          }
    530          
    531          #if !defined NONWK
    532          /********************************************************************************************************
    533           * @fn      ZMacLqiAdjust
    534           *
    535           * @brief   Adjust LQI according to correlation value
    536           *
    537           * @notes - the IEEE 802.15.4 specification provides some general statements on
    538           *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
    539           *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
    540           *          802.15.4 signals detectable by the receiver, and LQ values should be
    541           *          uniformly distributed between these two limits." Section E.2.3: "The
    542           *          LQI (see 6.7.8) measures the received energy and/or SNR for each
    543           *          received packet. When energy level and SNR information are combined,
    544           *          they can indicate whether a corrupt packet resulted from low signal
    545           *          strength or from high signal strength plus interference."
    546           *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
    547           *          packet correlation value (related to SNR) to scale incoming LQI value
    548           *          (related to signal strength) to 'derate' noisy packets.
    549           *        - LQI Adjustment Mode2 provided below is a location for a developer to
    550           *          implement their own proprietary LQI adjustment algorithm.
    551           *
    552           * @param   corr - packet correlation value
    553           * @param   lqi  - ptr to link quality (scaled rssi)
    554           *
    555           * @return  *lqi - adjusted link quality
    556           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    557          static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
   \                     ZMacLqiAdjust:
    558          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FC           MOV     R4,A
   \   000009   EB           MOV     A,R3
   \   00000A   FD           MOV     R5,A
    559            if ( lqiAdjMode != LQI_ADJ_OFF )
   \   00000B   90....       MOV     DPTR,#lqiAdjMode
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   606B         JZ      ??ZMacLqiAdjust_0
    560            {
    561              uint16 adjLqi = *lqi;
   \   000011   8C82         MOV     DPL,R4
   \   000013   8D83         MOV     DPH,R5
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   7900         MOV     R1,#0x0
    562          
    563              // Keep correlation within theoretical limits
    564              if ( corr < LQI_CORR_MIN )
   \   000019   EE           MOV     A,R6
   \   00001A   C3           CLR     C
   \   00001B   9432         SUBB    A,#0x32
   \   00001D   5004         JNC     ??ZMacLqiAdjust_1
    565              {
    566                 corr = LQI_CORR_MIN;
   \   00001F   7E32         MOV     R6,#0x32
   \   000021   8008         SJMP    ??ZMacLqiAdjust_2
    567              }
    568              else if ( corr > LQI_CORR_MAX )
   \                     ??ZMacLqiAdjust_1:
   \   000023   EE           MOV     A,R6
   \   000024   C3           CLR     C
   \   000025   946F         SUBB    A,#0x6f
   \   000027   4002         JC      ??ZMacLqiAdjust_2
    569              {
    570                 corr = LQI_CORR_MAX;
   \   000029   7E6E         MOV     R6,#0x6e
    571              }
    572          
    573              if ( lqiAdjMode == LQI_ADJ_MODE1 )
   \                     ??ZMacLqiAdjust_2:
   \   00002B   90....       MOV     DPTR,#lqiAdjMode
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6401         XRL     A,#0x1
   \   000031   7032         JNZ     ??ZMacLqiAdjust_3
    574              {
    575                /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
    576                           which is computed from the incoming correlation value between
    577                           theorectical minimum/maximum values. This is a very simple way
    578                           of 'derating' the incoming LQI as correlation value drops. */
    579                adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
   \   000033   EE           MOV     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   7B00         MOV     R3,#0x0
   \   000037   EA           MOV     A,R2
   \   000038   24CE         ADD     A,#-0x32
   \   00003A   F5..         MOV     ?V0,A
   \   00003C   EB           MOV     A,R3
   \   00003D   34FF         ADDC    A,#-0x1
   \   00003F   F5..         MOV     ?V1,A
   \   000041   E8           MOV     A,R0
   \   000042   85..F0       MOV     B,?V0
   \   000045   A4           MUL     AB
   \   000046   C8           XCH     A,R0
   \   000047   AAF0         MOV     R2,B
   \   000049   85..F0       MOV     B,?V1
   \   00004C   A4           MUL     AB
   \   00004D   2A           ADD     A,R2
   \   00004E   FA           MOV     R2,A
   \   00004F   85..F0       MOV     B,?V0
   \   000052   E9           MOV     A,R1
   \   000053   A4           MUL     AB
   \   000054   2A           ADD     A,R2
   \   000055   F9           MOV     R1,A
   \   000056   7A3C         MOV     R2,#0x3c
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   12....       LCALL   ?US_DIV_MOD
   \   00005D   88..         MOV     ?V0,R0
   \   00005F   89..         MOV     ?V1,R1
   \   000061   A8..         MOV     R0,?V0
   \   000063   A9..         MOV     R1,?V1
    580              }
    581              else if ( lqiAdjMode == LQI_ADJ_MODE2 )
    582              {
    583                /* MODE2 - location for developer to implement a proprietary algorithm */
    584              }
    585          
    586              // Replace incoming LQI with scaled value
    587              *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
   \                     ??ZMacLqiAdjust_3:
   \   000065   C3           CLR     C
   \   000066   E8           MOV     A,R0
   \   000067   9400         SUBB    A,#0x0
   \   000069   E9           MOV     A,R1
   \   00006A   9401         SUBB    A,#0x1
   \   00006C   4004         JC      ??ZMacLqiAdjust_4
   \   00006E   74FF         MOV     A,#-0x1
   \   000070   8001         SJMP    ??ZMacLqiAdjust_5
   \                     ??ZMacLqiAdjust_4:
   \   000072   E8           MOV     A,R0
   \                     ??ZMacLqiAdjust_5:
   \   000073   C0E0         PUSH    A
   \   000075   8C82         MOV     DPL,R4
   \   000077   8D83         MOV     DPH,R5
   \   000079   D0E0         POP     A
   \   00007B   F0           MOVX    @DPTR,A
    588            }
    589          }
   \                     ??ZMacLqiAdjust_0:
   \   00007C   7F02         MOV     R7,#0x2
   \   00007E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackCheckPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackCheckPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackQueryRetransmit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackQueryRetransmit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacLqiAdjustMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjustMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacLqiAdjust::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjust
    590          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MAC_CbackCheckPending
        2      0   -> nwkDB_ReturnIndirectHoldingCnt
      0     25   MAC_CbackEvent
        0     22   -> MAC_MlmeGetReq
        0     22   -> ZMacLqiAdjust
        0     22   -> mac_msg_deallocate
        0     22   -> nwk_broadcastSend
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     22   -> osal_msg_allocate
        0     22   -> osal_msg_send
      0      0   MAC_CbackQueryRetransmit
      1     32   ZMacLqiAdjust
      2      0   ZMacLqiAdjustMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  MAC_CbackCheckPending
       6  MAC_CbackCheckPending::?relay
    1449  MAC_CbackEvent
       6  MAC_CbackEvent::?relay
       5  MAC_CbackQueryRetransmit
       6  MAC_CbackQueryRetransmit::?relay
     129  ZMacLqiAdjust
       6  ZMacLqiAdjust::?relay
      28  ZMacLqiAdjustMode
       6  ZMacLqiAdjustMode::?relay
       1  _A_IEN0
       1  lqiAdjMode
       2  pZMac_AppCallback
      17  zmacCBSizeTable

 
 1 625 bytes in segment BANKED_CODE
    30 bytes in segment BANK_RELAYS
    17 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_Z
 
 1 672 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
     3 bytes of XDATA memory

Errors: none
Warnings: none
