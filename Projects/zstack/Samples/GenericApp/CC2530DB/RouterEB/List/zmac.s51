///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               21/Apr/2017  17:48:55
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\zmac\f8w\zmac.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\zmac\f8w\zmac.c" -D ZTOOL_P1 -D MT_TASK -D
//        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE -D
//        NV_INIT -D OPEN_FCS -D PANID_INCREASE -lC "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List" -lA
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj" -e
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        --core=plain --dptr=16,1 --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -On --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\zmac.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zmac

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_Z

        PUBLIC `??ZMacAssociateReq::?relay`
        FUNCTION `??ZMacAssociateReq::?relay`,0203H
        PUBLIC `??ZMacAssociateRsp::?relay`
        FUNCTION `??ZMacAssociateRsp::?relay`,0203H
        PUBLIC `??ZMacDataReq::?relay`
        FUNCTION `??ZMacDataReq::?relay`,0203H
        PUBLIC `??ZMacDataReqSec::?relay`
        FUNCTION `??ZMacDataReqSec::?relay`,0203H
        PUBLIC `??ZMacDisassociateReq::?relay`
        FUNCTION `??ZMacDisassociateReq::?relay`,0203H
        PUBLIC `??ZMacEnhancedActiveScanReq::?relay`
        FUNCTION `??ZMacEnhancedActiveScanReq::?relay`,0203H
        PUBLIC `??ZMacGetReq::?relay`
        FUNCTION `??ZMacGetReq::?relay`,0203H
        PUBLIC `??ZMacInit::?relay`
        FUNCTION `??ZMacInit::?relay`,0203H
        PUBLIC `??ZMacOrphanRsp::?relay`
        FUNCTION `??ZMacOrphanRsp::?relay`,0203H
        PUBLIC `??ZMacPollReq::?relay`
        FUNCTION `??ZMacPollReq::?relay`,0203H
        PUBLIC `??ZMacPurgeReq::?relay`
        FUNCTION `??ZMacPurgeReq::?relay`,0203H
        PUBLIC `??ZMacPwrOnReq::?relay`
        FUNCTION `??ZMacPwrOnReq::?relay`,0203H
        PUBLIC `??ZMacReset::?relay`
        FUNCTION `??ZMacReset::?relay`,0203H
        PUBLIC `??ZMacScanReq::?relay`
        FUNCTION `??ZMacScanReq::?relay`,0203H
        PUBLIC `??ZMacSendNoData::?relay`
        FUNCTION `??ZMacSendNoData::?relay`,0203H
        PUBLIC `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,0203H
        PUBLIC `??ZMacSetTransmitPower::?relay`
        FUNCTION `??ZMacSetTransmitPower::?relay`,0203H
        PUBLIC `??ZMacSrcMatchAckAllPending::?relay`
        FUNCTION `??ZMacSrcMatchAckAllPending::?relay`,0203H
        PUBLIC `??ZMacSrcMatchAddEntry::?relay`
        FUNCTION `??ZMacSrcMatchAddEntry::?relay`,0203H
        PUBLIC `??ZMacSrcMatchCheckAllPending::?relay`
        FUNCTION `??ZMacSrcMatchCheckAllPending::?relay`,0203H
        PUBLIC `??ZMacSrcMatchDeleteEntry::?relay`
        FUNCTION `??ZMacSrcMatchDeleteEntry::?relay`,0203H
        PUBLIC `??ZMacSrcMatchEnable::?relay`
        FUNCTION `??ZMacSrcMatchEnable::?relay`,0203H
        PUBLIC `??ZMacStartReq::?relay`
        FUNCTION `??ZMacStartReq::?relay`,0203H
        PUBLIC `??ZMacStateIdle::?relay`
        FUNCTION `??ZMacStateIdle::?relay`,0203H
        PUBLIC `??ZMacSyncReq::?relay`
        FUNCTION `??ZMacSyncReq::?relay`,0203H
        PUBLIC `??ZMac_PwrMode::?relay`
        FUNCTION `??ZMac_PwrMode::?relay`,0203H
        PUBLIC UsePrimaryExtAddr
        PUBLIC UseSecondaryExtAddr
        PUBLIC ZMacAssociateReq
        FUNCTION ZMacAssociateReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacAssociateRsp
        FUNCTION ZMacAssociateRsp,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacDataReq
        FUNCTION ZMacDataReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacDataReqSec
        FUNCTION ZMacDataReqSec,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZMacDisassociateReq
        FUNCTION ZMacDisassociateReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacEnhancedActiveScanReq
        FUNCTION ZMacEnhancedActiveScanReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZMacGetReq
        FUNCTION ZMacGetReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacInit
        FUNCTION ZMacInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacOrphanRsp
        FUNCTION ZMacOrphanRsp,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacPollReq
        FUNCTION ZMacPollReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacPurgeReq
        FUNCTION ZMacPurgeReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacPwrOnReq
        FUNCTION ZMacPwrOnReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacReset
        FUNCTION ZMacReset,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZMacScanReq
        FUNCTION ZMacScanReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZMacSendNoData
        FUNCTION ZMacSendNoData,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZMacSetReq
        FUNCTION ZMacSetReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacSetTransmitPower
        FUNCTION ZMacSetTransmitPower,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC ZMacSrcMatchAckAllPending
        FUNCTION ZMacSrcMatchAckAllPending,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacSrcMatchAddEntry
        FUNCTION ZMacSrcMatchAddEntry,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZMacSrcMatchCheckAllPending
        FUNCTION ZMacSrcMatchCheckAllPending,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacSrcMatchDeleteEntry
        FUNCTION ZMacSrcMatchDeleteEntry,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZMacSrcMatchEnable
        FUNCTION ZMacSrcMatchEnable,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacStartReq
        FUNCTION ZMacStartReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZMacStateIdle
        FUNCTION ZMacStateIdle,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacSyncReq
        FUNCTION ZMacSyncReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMac_PwrMode
        FUNCTION ZMac_PwrMode,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMac_ScanBuf
        PUBLIC _ScanChannels
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
MAC_Init            SYMBOL "MAC_Init"
`??MAC_Init::?relay` SYMBOL "?relay", MAC_Init
MAC_InitCoord       SYMBOL "MAC_InitCoord"
`??MAC_InitCoord::?relay` SYMBOL "?relay", MAC_InitCoord
MAC_InitDevice      SYMBOL "MAC_InitDevice"
`??MAC_InitDevice::?relay` SYMBOL "?relay", MAC_InitDevice
MAC_McpsDataAlloc   SYMBOL "MAC_McpsDataAlloc"
`??MAC_McpsDataAlloc::?relay` SYMBOL "?relay", MAC_McpsDataAlloc
MAC_McpsDataReq     SYMBOL "MAC_McpsDataReq"
`??MAC_McpsDataReq::?relay` SYMBOL "?relay", MAC_McpsDataReq
MAC_McpsPurgeReq    SYMBOL "MAC_McpsPurgeReq"
`??MAC_McpsPurgeReq::?relay` SYMBOL "?relay", MAC_McpsPurgeReq
MAC_MlmeAssociateReq SYMBOL "MAC_MlmeAssociateReq"
`??MAC_MlmeAssociateReq::?relay` SYMBOL "?relay", MAC_MlmeAssociateReq
MAC_MlmeAssociateRsp SYMBOL "MAC_MlmeAssociateRsp"
`??MAC_MlmeAssociateRsp::?relay` SYMBOL "?relay", MAC_MlmeAssociateRsp
MAC_MlmeDisassociateReq SYMBOL "MAC_MlmeDisassociateReq"
`??MAC_MlmeDisassociateReq::?relay` SYMBOL "?relay", MAC_MlmeDisassociateReq
MAC_MlmeGetReq      SYMBOL "MAC_MlmeGetReq"
`??MAC_MlmeGetReq::?relay` SYMBOL "?relay", MAC_MlmeGetReq
MAC_MlmeOrphanRsp   SYMBOL "MAC_MlmeOrphanRsp"
`??MAC_MlmeOrphanRsp::?relay` SYMBOL "?relay", MAC_MlmeOrphanRsp
MAC_MlmePollReq     SYMBOL "MAC_MlmePollReq"
`??MAC_MlmePollReq::?relay` SYMBOL "?relay", MAC_MlmePollReq
MAC_MlmeResetReq    SYMBOL "MAC_MlmeResetReq"
`??MAC_MlmeResetReq::?relay` SYMBOL "?relay", MAC_MlmeResetReq
MAC_MlmeScanReq     SYMBOL "MAC_MlmeScanReq"
`??MAC_MlmeScanReq::?relay` SYMBOL "?relay", MAC_MlmeScanReq
MAC_MlmeSetReq      SYMBOL "MAC_MlmeSetReq"
`??MAC_MlmeSetReq::?relay` SYMBOL "?relay", MAC_MlmeSetReq
MAC_MlmeStartReq    SYMBOL "MAC_MlmeStartReq"
`??MAC_MlmeStartReq::?relay` SYMBOL "?relay", MAC_MlmeStartReq
MAC_MlmeSyncReq     SYMBOL "MAC_MlmeSyncReq"
`??MAC_MlmeSyncReq::?relay` SYMBOL "?relay", MAC_MlmeSyncReq
MAC_PwrMode         SYMBOL "MAC_PwrMode"
`??MAC_PwrMode::?relay` SYMBOL "?relay", MAC_PwrMode
MAC_PwrOnReq        SYMBOL "MAC_PwrOnReq"
`??MAC_PwrOnReq::?relay` SYMBOL "?relay", MAC_PwrOnReq
MAC_SrcMatchAckAllPending SYMBOL "MAC_SrcMatchAckAllPending"
`??MAC_SrcMatchAckAllPending::?relay` SYMBOL "?relay", MAC_SrcMatchAckAllPending
MAC_SrcMatchAddEntry SYMBOL "MAC_SrcMatchAddEntry"
`??MAC_SrcMatchAddEntry::?relay` SYMBOL "?relay", MAC_SrcMatchAddEntry
MAC_SrcMatchCheckAllPending SYMBOL "MAC_SrcMatchCheckAllPending"
`??MAC_SrcMatchCheckAllPending::?relay` SYMBOL "?relay", MAC_SrcMatchCheckAllPending
MAC_SrcMatchDeleteEntry SYMBOL "MAC_SrcMatchDeleteEntry"
`??MAC_SrcMatchDeleteEntry::?relay` SYMBOL "?relay", MAC_SrcMatchDeleteEntry
MAC_SrcMatchEnable  SYMBOL "MAC_SrcMatchEnable"
`??MAC_SrcMatchEnable::?relay` SYMBOL "?relay", MAC_SrcMatchEnable
macStateIdle        SYMBOL "macStateIdle"
`??macStateIdle::?relay` SYMBOL "?relay", macStateIdle
osal_int_disable    SYMBOL "osal_int_disable"
`??osal_int_disable::?relay` SYMBOL "?relay", osal_int_disable
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
ZMacAssociateReq    SYMBOL "ZMacAssociateReq"
`??ZMacAssociateReq::?relay` SYMBOL "?relay", ZMacAssociateReq
ZMacAssociateRsp    SYMBOL "ZMacAssociateRsp"
`??ZMacAssociateRsp::?relay` SYMBOL "?relay", ZMacAssociateRsp
ZMacDataReq         SYMBOL "ZMacDataReq"
`??ZMacDataReq::?relay` SYMBOL "?relay", ZMacDataReq
ZMacDataReqSec      SYMBOL "ZMacDataReqSec"
`??ZMacDataReqSec::?relay` SYMBOL "?relay", ZMacDataReqSec
ZMacDisassociateReq SYMBOL "ZMacDisassociateReq"
`??ZMacDisassociateReq::?relay` SYMBOL "?relay", ZMacDisassociateReq
ZMacEnhancedActiveScanReq SYMBOL "ZMacEnhancedActiveScanReq"
`??ZMacEnhancedActiveScanReq::?relay` SYMBOL "?relay", ZMacEnhancedActiveScanReq
ZMacGetReq          SYMBOL "ZMacGetReq"
`??ZMacGetReq::?relay` SYMBOL "?relay", ZMacGetReq
ZMacInit            SYMBOL "ZMacInit"
`??ZMacInit::?relay` SYMBOL "?relay", ZMacInit
ZMacOrphanRsp       SYMBOL "ZMacOrphanRsp"
`??ZMacOrphanRsp::?relay` SYMBOL "?relay", ZMacOrphanRsp
ZMacPollReq         SYMBOL "ZMacPollReq"
`??ZMacPollReq::?relay` SYMBOL "?relay", ZMacPollReq
ZMacPurgeReq        SYMBOL "ZMacPurgeReq"
`??ZMacPurgeReq::?relay` SYMBOL "?relay", ZMacPurgeReq
ZMacPwrOnReq        SYMBOL "ZMacPwrOnReq"
`??ZMacPwrOnReq::?relay` SYMBOL "?relay", ZMacPwrOnReq
ZMacReset           SYMBOL "ZMacReset"
`??ZMacReset::?relay` SYMBOL "?relay", ZMacReset
ZMacScanReq         SYMBOL "ZMacScanReq"
`??ZMacScanReq::?relay` SYMBOL "?relay", ZMacScanReq
ZMacSendNoData      SYMBOL "ZMacSendNoData"
`??ZMacSendNoData::?relay` SYMBOL "?relay", ZMacSendNoData
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
ZMacSetTransmitPower SYMBOL "ZMacSetTransmitPower"
`??ZMacSetTransmitPower::?relay` SYMBOL "?relay", ZMacSetTransmitPower
ZMacSrcMatchAckAllPending SYMBOL "ZMacSrcMatchAckAllPending"
`??ZMacSrcMatchAckAllPending::?relay` SYMBOL "?relay", ZMacSrcMatchAckAllPending
ZMacSrcMatchAddEntry SYMBOL "ZMacSrcMatchAddEntry"
`??ZMacSrcMatchAddEntry::?relay` SYMBOL "?relay", ZMacSrcMatchAddEntry
ZMacSrcMatchCheckAllPending SYMBOL "ZMacSrcMatchCheckAllPending"
`??ZMacSrcMatchCheckAllPending::?relay` SYMBOL "?relay", ZMacSrcMatchCheckAllPending
ZMacSrcMatchDeleteEntry SYMBOL "ZMacSrcMatchDeleteEntry"
`??ZMacSrcMatchDeleteEntry::?relay` SYMBOL "?relay", ZMacSrcMatchDeleteEntry
ZMacSrcMatchEnable  SYMBOL "ZMacSrcMatchEnable"
`??ZMacSrcMatchEnable::?relay` SYMBOL "?relay", ZMacSrcMatchEnable
ZMacStartReq        SYMBOL "ZMacStartReq"
`??ZMacStartReq::?relay` SYMBOL "?relay", ZMacStartReq
ZMacStateIdle       SYMBOL "ZMacStateIdle"
`??ZMacStateIdle::?relay` SYMBOL "?relay", ZMacStateIdle
ZMacSyncReq         SYMBOL "ZMacSyncReq"
`??ZMacSyncReq::?relay` SYMBOL "?relay", ZMacSyncReq
ZMac_PwrMode        SYMBOL "ZMac_PwrMode"
`??ZMac_PwrMode::?relay` SYMBOL "?relay", ZMac_PwrMode

        EXTERN `??MAC_Init::?relay`
        FUNCTION `??MAC_Init::?relay`,00H
        EXTERN `??MAC_InitCoord::?relay`
        FUNCTION `??MAC_InitCoord::?relay`,00H
        EXTERN `??MAC_InitDevice::?relay`
        FUNCTION `??MAC_InitDevice::?relay`,00H
        EXTERN `??MAC_McpsDataAlloc::?relay`
        FUNCTION `??MAC_McpsDataAlloc::?relay`,00H
        EXTERN `??MAC_McpsDataReq::?relay`
        FUNCTION `??MAC_McpsDataReq::?relay`,00H
        EXTERN `??MAC_McpsPurgeReq::?relay`
        FUNCTION `??MAC_McpsPurgeReq::?relay`,00H
        EXTERN `??MAC_MlmeAssociateReq::?relay`
        FUNCTION `??MAC_MlmeAssociateReq::?relay`,00H
        EXTERN `??MAC_MlmeAssociateRsp::?relay`
        FUNCTION `??MAC_MlmeAssociateRsp::?relay`,00H
        EXTERN `??MAC_MlmeDisassociateReq::?relay`
        FUNCTION `??MAC_MlmeDisassociateReq::?relay`,00H
        EXTERN `??MAC_MlmeGetReq::?relay`
        FUNCTION `??MAC_MlmeGetReq::?relay`,00H
        EXTERN `??MAC_MlmeOrphanRsp::?relay`
        FUNCTION `??MAC_MlmeOrphanRsp::?relay`,00H
        EXTERN `??MAC_MlmePollReq::?relay`
        FUNCTION `??MAC_MlmePollReq::?relay`,00H
        EXTERN `??MAC_MlmeResetReq::?relay`
        FUNCTION `??MAC_MlmeResetReq::?relay`,00H
        EXTERN `??MAC_MlmeScanReq::?relay`
        FUNCTION `??MAC_MlmeScanReq::?relay`,00H
        EXTERN `??MAC_MlmeSetReq::?relay`
        FUNCTION `??MAC_MlmeSetReq::?relay`,00H
        EXTERN `??MAC_MlmeStartReq::?relay`
        FUNCTION `??MAC_MlmeStartReq::?relay`,00H
        EXTERN `??MAC_MlmeSyncReq::?relay`
        FUNCTION `??MAC_MlmeSyncReq::?relay`,00H
        EXTERN `??MAC_PwrMode::?relay`
        FUNCTION `??MAC_PwrMode::?relay`,00H
        EXTERN `??MAC_PwrOnReq::?relay`
        FUNCTION `??MAC_PwrOnReq::?relay`,00H
        EXTERN `??MAC_SrcMatchAckAllPending::?relay`
        FUNCTION `??MAC_SrcMatchAckAllPending::?relay`,00H
        EXTERN `??MAC_SrcMatchAddEntry::?relay`
        FUNCTION `??MAC_SrcMatchAddEntry::?relay`,00H
        EXTERN `??MAC_SrcMatchCheckAllPending::?relay`
        FUNCTION `??MAC_SrcMatchCheckAllPending::?relay`,00H
        EXTERN `??MAC_SrcMatchDeleteEntry::?relay`
        FUNCTION `??MAC_SrcMatchDeleteEntry::?relay`,00H
        EXTERN `??MAC_SrcMatchEnable::?relay`
        FUNCTION `??MAC_SrcMatchEnable::?relay`,00H
        EXTERN `??macStateIdle::?relay`
        FUNCTION `??macStateIdle::?relay`,00H
        EXTERN `??osal_int_disable::?relay`
        FUNCTION `??osal_int_disable::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN MAC_Init
        FUNCTION MAC_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_InitCoord
        FUNCTION MAC_InitCoord,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_InitDevice
        FUNCTION MAC_InitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_McpsDataAlloc
        FUNCTION MAC_McpsDataAlloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_McpsDataReq
        FUNCTION MAC_McpsDataReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_McpsPurgeReq
        FUNCTION MAC_McpsPurgeReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeAssociateReq
        FUNCTION MAC_MlmeAssociateReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeAssociateRsp
        FUNCTION MAC_MlmeAssociateRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeDisassociateReq
        FUNCTION MAC_MlmeDisassociateReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeGetReq
        FUNCTION MAC_MlmeGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeOrphanRsp
        FUNCTION MAC_MlmeOrphanRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmePollReq
        FUNCTION MAC_MlmePollReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeResetReq
        FUNCTION MAC_MlmeResetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeScanReq
        FUNCTION MAC_MlmeScanReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeSetReq
        FUNCTION MAC_MlmeSetReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeStartReq
        FUNCTION MAC_MlmeStartReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeSyncReq
        FUNCTION MAC_MlmeSyncReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_PwrMode
        FUNCTION MAC_PwrMode,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_PwrOnReq
        FUNCTION MAC_PwrOnReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchAckAllPending
        FUNCTION MAC_SrcMatchAckAllPending,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchAddEntry
        FUNCTION MAC_SrcMatchAddEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchCheckAllPending
        FUNCTION MAC_SrcMatchCheckAllPending,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchDeleteEntry
        FUNCTION MAC_SrcMatchDeleteEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchEnable
        FUNCTION MAC_SrcMatchEnable,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aExtendedAddress
        EXTERN macStateIdle
        FUNCTION macStateIdle,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_int_disable
        FUNCTION osal_int_disable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\zmac\f8w\zmac.c
//    1 /**************************************************************************************************
//    2   Filename:       zmac.c
//    3   Revised:        $Date: 2014-07-22 11:05:31 -0700 (Tue, 22 Jul 2014) $
//    4   Revision:       $Revision: 39478 $
//    5 
//    6 
//    7   Description:    This file contains the ZStack MAC Porting Layer
//    8 
//    9 
//   10   Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /********************************************************************************************************
//   42  *                                               INCLUDES
//   43  ********************************************************************************************************/
//   44 
//   45 #include "ZComDef.h"
//   46 #include "OSAL.h"
//   47 #include "ZMAC.h"
//   48 #include "mac_main.h"
//   49 
//   50 #if !defined NONWK
//   51   #include "ZGlobals.h"
//   52 #endif
//   53 
//   54 #if defined( ZCL_KEY_ESTABLISH )
//   55   #include "ssp.h"
//   56 #endif
//   57 
//   58 /********************************************************************************************************
//   59  *                                                 MACROS
//   60  ********************************************************************************************************/
//   61 
//   62 /********************************************************************************************************
//   63  *                                               CONSTANTS
//   64  ********************************************************************************************************/
//   65 #define MAX_SECURITY_PIB_SET_ENTRY  sizeof(deviceDescriptor_t)
//   66 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   67 const uint8 UsePrimaryExtAddr[Z_EXTADDR_LEN] = {0};
UsePrimaryExtAddr:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   68 const uint8 UseSecondaryExtAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
UseSecondaryExtAddr:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
//   69 
//   70 /********************************************************************************************************
//   71  *                                               GLOBALS
//   72  ********************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   73 uint32 _ScanChannels;
_ScanChannels:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   74 
//   75 extern uint8 aExtendedAddress[Z_EXTADDR_LEN];
//   76 
//   77 /**************************************************************************************************
//   78  * @fn          MAC_SetRandomSeedCB
//   79  *
//   80  * @brief       MAC function: Set the function pointer for the random seed callback.
//   81  *
//   82  * input parameters
//   83  *
//   84  * @param       pCBFcn - function pointer of the random seed callback
//   85  *
//   86  * output parameters
//   87  *
//   88  * None.
//   89  *
//   90  * @return      none
//   91  **************************************************************************************************
//   92  */
//   93 extern void MAC_SetRandomSeedCB(macRNGFcn_t pCBFcn);
//   94 /********************************************************************************************************
//   95  *                                               LOCALS
//   96  ********************************************************************************************************/
//   97 
//   98 /* Pointer to scan result buffer */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   99 void *ZMac_ScanBuf = NULL;
ZMac_ScanBuf:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  100 
//  101 /********************************************************************************************************
//  102  * LOCAL FUNCTION PROTOTYPES
//  103  ********************************************************************************************************/
//  104 
//  105 /********************************************************************************************************
//  106  *                                                TYPEDEFS
//  107  ********************************************************************************************************/
//  108 
//  109 
//  110 /********************************************************************************************************
//  111  *                                                FUNCTIONS
//  112  ********************************************************************************************************/
//  113 
//  114 /********************************************************************************************************
//  115  * @fn      ZMacInit
//  116  *
//  117  * @brief   Initialize MAC.
//  118  *
//  119  * @param   none.
//  120  *
//  121  * @return  status.
//  122  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  123 uint8 ZMacInit( void )
ZMacInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZMacInit
        CODE
//  124 {
        FUNCALL ZMacInit, MAC_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacInit, MAC_InitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacInit, MAC_InitCoord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacInit, ZMacReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacInit, osal_int_disable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  125   uint8 stat;
//  126 
//  127 #if defined( ZCL_KEY_ESTABLISH )
//  128   /* Set the callback function for 16 byte random seed */
//  129   MAC_SetRandomSeedCB( SSP_StoreRandomSeedNV);
//  130 #endif
//  131 
//  132   MAC_Init();
        ; Setup parameters for call to function MAC_Init
        LCALL   `??MAC_Init::?relay` ; Banked call to: MAC_Init
//  133   MAC_InitDevice();
        ; Setup parameters for call to function MAC_InitDevice
        LCALL   `??MAC_InitDevice::?relay`; Banked call to: MAC_InitDevice
//  134 
//  135 #if !defined NONWK
//  136   if ( ZG_BUILD_RTR_TYPE )
//  137   {
//  138     MAC_InitCoord();
        ; Setup parameters for call to function MAC_InitCoord
        LCALL   `??MAC_InitCoord::?relay`; Banked call to: MAC_InitCoord
//  139   }
//  140 #endif
//  141 
//  142   // If OK, initialize the MAC
//  143   stat = ZMacReset( TRUE );
        ; Setup parameters for call to function ZMacReset
        MOV     R1,#0x1
        LCALL   `??ZMacReset::?relay`; Banked call to: ZMacReset
        MOV     A,R1
        MOV     R6,A
//  144 
//  145   // Turn off interrupts
//  146   osal_int_disable( INTS_ALL );
        ; Setup parameters for call to function osal_int_disable
        MOV     R1,#-0x1
        LCALL   `??osal_int_disable::?relay`; Banked call to: osal_int_disable
        MOV     A,R1
//  147 
//  148   return ( stat );
        MOV     A,R6
        MOV     R1,A
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  149 }
          CFI EndBlock cfiBlock0
//  150 
//  151 /********************************************************************************************************
//  152  * @fn      ZMacReset
//  153  *
//  154  * @brief   Reset the MAC.
//  155  *
//  156  * @param   Default to PIB defaults.
//  157  *
//  158  * @return  status.
//  159  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  160 uint8 ZMacReset( uint8 SetDefaultPIB )
ZMacReset:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZMacReset
        CODE
//  161 {
        FUNCALL ZMacReset, MAC_MlmeResetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacReset, MAC_MlmeSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacReset, MAC_MlmeSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacReset, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R7,A
//  162   byte stat;
//  163   byte value;
//  164 
//  165   stat = MAC_MlmeResetReq( SetDefaultPIB );
        ; Setup parameters for call to function MAC_MlmeResetReq
        MOV     A,R7
        MOV     R1,A
        LCALL   `??MAC_MlmeResetReq::?relay`; Banked call to: MAC_MlmeResetReq
        MOV     A,R1
        MOV     R6,A
//  166 
//  167   // Don't send PAN ID conflict
//  168   value = FALSE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
//  169   MAC_MlmeSetReq( MAC_ASSOCIATED_PAN_COORD, &value );
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x56
        LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
        MOV     A,R1
//  170   MAC_MlmeSetReq( MAC_EXTENDED_ADDRESS, &aExtendedAddress );
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     R2,#aExtendedAddress & 0xff
        MOV     R3,#(aExtendedAddress >> 8) & 0xff
        MOV     R1,#-0x1e
        LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
        MOV     A,R1
//  171 
//  172   if (ZMac_ScanBuf)
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZMacReset_0
//  173   {
//  174     osal_mem_free(ZMac_ScanBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  175     ZMac_ScanBuf = NULL;
        MOV     DPTR,#ZMac_ScanBuf
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  176   }
//  177 
//  178   return ( stat );
??ZMacReset_0:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  179 }
          CFI EndBlock cfiBlock1
//  180 
//  181 
//  182 /********************************************************************************************************
//  183  * @fn      ZMacGetReq
//  184  *
//  185  * @brief   Read a MAC PIB attribute.
//  186  *
//  187  * @param   attr - PIB attribute to get
//  188  * @param   value - pointer to the buffer to store the attribute
//  189  *
//  190  * @return  status
//  191  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  192 uint8 ZMacGetReq( uint8 attr, uint8 *value )
ZMacGetReq:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ZMacGetReq
        CODE
//  193 {
        FUNCALL ZMacGetReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacGetReq, MAC_MlmeGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  194   if ( attr == ZMacExtAddr )
        MOV     A,#-0x1e
        XRL     A,?V0
        JNZ     ??ZMacGetReq_0
//  195   {
//  196     osal_cpyExtAddr( value, &aExtendedAddress );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#aExtendedAddress & 0xff
        MOV     R5,#(aExtendedAddress >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
//  197     return ZMacSuccess;
        MOV     R1,#0x0
        SJMP    ??ZMacGetReq_1
//  198   }
//  199 
//  200   return (ZMacStatus_t) MAC_MlmeGetReq( attr, value );
??ZMacGetReq_0:
        ; Setup parameters for call to function MAC_MlmeGetReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0
        LCALL   `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
??ZMacGetReq_1:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  201 }
          CFI EndBlock cfiBlock2
//  202 
//  203 
//  204 /********************************************************************************************************
//  205  * @fn      ZMacSetReq
//  206  *
//  207  * @brief   Write a MAC PIB attribute.
//  208  *
//  209  * @param   attr - PIB attribute to Set
//  210  * @param   value - pointer to the data
//  211  *
//  212  * @return  status
//  213  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  214 uint8 ZMacSetReq( uint8 attr, byte *value )
ZMacSetReq:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ZMacSetReq
        CODE
//  215 {
        FUNCALL ZMacSetReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacSetReq, MAC_MlmeSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacSetReq, MAC_MlmeSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  216   if ( attr == ZMacExtAddr )
        MOV     A,#-0x1e
        XRL     A,?V0
        JNZ     ??ZMacSetReq_0
//  217   {
//  218 #if defined ( HAL_INFOP_IEEE_OSET )
//  219     if (!memcmp(value, (void *)UsePrimaryExtAddr, Z_EXTADDR_LEN))
//  220     {
//  221       // Read the extended address from the designated location in the Info-A Page.
//  222       osal_cpyExtAddr(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET));
//  223     }
//  224     else if (!memcmp(value, (void *)UseSecondaryExtAddr, Z_EXTADDR_LEN))
//  225     {
//  226       // Read the extended address from the location on the lock bits page where
//  227       // the programming tools know how to program and preserve it during download.
//  228       HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
//  229     }
//  230     else  // Use this valid extended address value.
//  231 #endif
//  232     {
//  233       osal_cpyExtAddr(aExtendedAddress, value);
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#aExtendedAddress & 0xff
        MOV     R3,#(aExtendedAddress >> 8) & 0xff
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
//  234     }
//  235     return (ZMacStatus_t) MAC_MlmeSetReq( attr, aExtendedAddress );
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     R2,#aExtendedAddress & 0xff
        MOV     R3,#(aExtendedAddress >> 8) & 0xff
        MOV     R1,?V0
        LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
        SJMP    ??ZMacSetReq_1
//  236   }
//  237   else
//  238   {
//  239     return (ZMacStatus_t) MAC_MlmeSetReq( attr, value );
??ZMacSetReq_0:
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0
        LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
??ZMacSetReq_1:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  240   }
//  241 }
          CFI EndBlock cfiBlock3
//  242 
//  243 #ifdef FEATURE_MAC_SECURITY
//  244 /********************************************************************************************************
//  245  * @fn      ZMacSecurityGetReq
//  246  *
//  247  * @brief   Read a MAC Security PIB attribute.
//  248  *
//  249  * @param   attr - PIB attribute to get
//  250  * @param   value - pointer to the buffer to store the attribute
//  251  *
//  252  * @return  status
//  253  ********************************************************************************************************/
//  254 uint8 ZMacSecurityGetReq( uint8 attr, uint8 *value )
//  255 {
//  256   uint8         keyIndex, entry, status;
//  257   uint8        *ptr;
//  258 
//  259   ptr = (uint8 *) value;
//  260   switch (attr)
//  261   {
//  262     case ZMacKeyIdLookupEntry:
//  263       keyIndex = *ptr++; /* key_index */
//  264       entry    = *ptr++; /* key_id_lookup_index */
//  265       
//  266       /* Transform byte array to propriety PIB struct */
//  267       ((macSecurityPibKeyIdLookupEntry_t *)value)->key_id_lookup_index = entry;
//  268       ((macSecurityPibKeyIdLookupEntry_t *)value)->key_index = keyIndex;
//  269       break;
//  270       
//  271     case ZMacKeyDeviceEntry:
//  272       keyIndex = *ptr++; /* key_index */
//  273       entry    = *ptr++; /* key_device_index */
//  274       
//  275       /* Transform byte array to propriety PIB struct */
//  276       ((macSecurityPibKeyDeviceEntry_t *)value)->key_device_index = entry;
//  277       ((macSecurityPibKeyDeviceEntry_t *)value)->key_index = keyIndex;
//  278       break;
//  279       
//  280     case ZMacKeyUsageEntry:
//  281       keyIndex = *ptr++; /* key_index */
//  282       entry    = *ptr++; /* key_key_usage_index */
//  283       
//  284       /* Transform byte array to propriety PIB struct */
//  285       ((macSecurityPibKeyUsageEntry_t *)value)->key_key_usage_index = entry;
//  286       ((macSecurityPibKeyUsageEntry_t *)value)->key_index = keyIndex;
//  287       break;
//  288       
//  289     case ZMacKeyEntry:
//  290       keyIndex = *ptr++; /* key_index */
//  291       
//  292       /* Transform byte array to propriety PIB struct */
//  293       ((macSecurityPibKeyEntry_t *)value)->key_index = keyIndex;
//  294       break;
//  295       
//  296     case ZMacDeviceEntry:
//  297       entry = *ptr++; /* device_index */
//  298       
//  299       /* Transform byte array to propriety PIB struct */
//  300       ((macSecurityPibDeviceEntry_t *)value)->device_index = entry;
//  301       break;
//  302 
//  303     case ZMacSecurityLevelEntry:
//  304       entry = *ptr++; /* security_level_index */
//  305       
//  306       /* Transform byte array to propriety PIB struct */
//  307       ((macSecurityPibSecurityLevelEntry_t *)value)->security_level_index = entry;
//  308       break;
//  309   }
//  310 
//  311   status = (ZMacStatus_t) MAC_MlmeGetSecurityReq( attr, value );
//  312   
//  313   ptr = (uint8 *) value;
//  314   switch (attr)
//  315   {
//  316     case ZMacKeyIdLookupEntry:
//  317       *ptr++ = keyIndex; /* key_index */
//  318       *ptr++ = entry;    /* key_id_lookup_index */
//  319       
//  320       /* Transform propriety PIB struct to byte array */
//  321       osal_memcpy(ptr, &((macSecurityPibKeyIdLookupEntry_t *)value)->macKeyIdLookupEntry, sizeof(keyIdLookupDescriptor_t));
//  322       break;
//  323       
//  324     case ZMacKeyDeviceEntry:
//  325       *ptr++ = keyIndex; /* key_index */
//  326       *ptr++ = entry;    /* key_device_index */
//  327       
//  328       /* Transform propriety PIB struct to byte array */
//  329       osal_memcpy(ptr, &((macSecurityPibKeyDeviceEntry_t *)value)->macKeyDeviceEntry, sizeof(keyDeviceDescriptor_t));
//  330       break;
//  331       
//  332     case ZMacKeyUsageEntry:
//  333       *ptr++ = keyIndex; /* key_index */
//  334       *ptr++ = entry;    /* key_key_usage_index */
//  335       
//  336       /* Transform propriety PIB struct to byte array */
//  337       osal_memcpy(ptr, &((macSecurityPibKeyUsageEntry_t *)value)->macKeyUsageEntry, sizeof(keyUsageDescriptor_t));
//  338       break;
//  339       
//  340     case ZMacKeyEntry:
//  341       *ptr++ = keyIndex; /* key_index */
//  342       
//  343       /* Transform propriety PIB struct to byte array */
//  344       osal_memcpy(ptr, &((macSecurityPibKeyEntry_t *)value)->keyEntry, MAC_KEY_MAX_LEN);
//  345       break;
//  346       
//  347     case ZMacDeviceEntry:
//  348       *ptr++ = entry; /* device_index */
//  349       
//  350       /* Transform propriety PIB struct to byte array */
//  351       osal_memcpy(ptr, &((macSecurityPibDeviceEntry_t *)value)->macDeviceEntry, sizeof(deviceDescriptor_t));
//  352       break;
//  353 
//  354     case ZMacSecurityLevelEntry:
//  355       *ptr++ = entry; /* security_level_index */
//  356       
//  357       /* Transform propriety PIB struct to byte array */
//  358       osal_memcpy(ptr, &((macSecurityPibSecurityLevelEntry_t *)value)->macSecurityLevelEntry, sizeof(securityLevelDescriptor_t));
//  359       break;
//  360   }
//  361   
//  362   return status;
//  363 }
//  364 
//  365 
//  366 /********************************************************************************************************
//  367  * @fn      ZMacSecuritySetReq
//  368  *
//  369  * @brief   Write a MAC Security PIB attribute.
//  370  *
//  371  * @param   attr - PIB attribute to Set
//  372  * @param   value - pointer to the data
//  373  *
//  374  * @return  status
//  375  ********************************************************************************************************/
//  376 uint8 ZMacSecuritySetReq( uint8 attr, byte *value )
//  377 {
//  378   uint8         keyIndex, entry;
//  379   uint32        frameCounter;
//  380   uint8        *ptr;
//  381   uint8         tmp[MAX_SECURITY_PIB_SET_ENTRY]; /* This must cover the largest single PIB entry */
//  382   uint8         temp[MAX_SECURITY_PIB_SET_ENTRY]; /* This must cover the largest single PIB entry */
//  383 
//  384   /* Note that the Transform byte array to propriety PIB struct below works 
//  385    * because the members of the structures are all defined manually in a way, 
//  386    * where memcpy would work, without usage of explicit 'pack', they fit 
//  387    * such that memcpy would work
//  388    */
//  389   ptr = (uint8 *) value;
//  390   switch (attr)
//  391   {
//  392     case ZMacKeyIdLookupEntry:
//  393       keyIndex = *ptr++; /* key_index */
//  394       entry    = *ptr++; /* key_id_lookup_index */
//  395       
//  396       /* Transform byte array to propriety PIB struct */
//  397       osal_memcpy(tmp, ptr, sizeof(keyIdLookupDescriptor_t));
//  398       osal_memcpy(&((macSecurityPibKeyIdLookupEntry_t *)temp)->macKeyIdLookupEntry, tmp, sizeof(keyIdLookupDescriptor_t));
//  399       ((macSecurityPibKeyIdLookupEntry_t *)temp)->key_id_lookup_index = entry;
//  400       ((macSecurityPibKeyIdLookupEntry_t *)temp)->key_index = keyIndex;
//  401       return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
//  402       break;
//  403       
//  404     case ZMacKeyDeviceEntry:
//  405       keyIndex = *ptr++; /* key_index */
//  406       entry    = *ptr++; /* key_device_index */
//  407       
//  408       /* Transform byte array to propriety PIB struct */
//  409       osal_memcpy(tmp, ptr, sizeof(keyDeviceDescriptor_t));
//  410       osal_memcpy(&((macSecurityPibKeyDeviceEntry_t *)temp)->macKeyDeviceEntry, tmp, sizeof(keyDeviceDescriptor_t));
//  411       ((macSecurityPibKeyDeviceEntry_t *)temp)->key_device_index = entry;
//  412       ((macSecurityPibKeyDeviceEntry_t *)temp)->key_index = keyIndex;
//  413       return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
//  414       break;
//  415       
//  416     case ZMacKeyUsageEntry:
//  417       keyIndex = *ptr++; /* key_index */
//  418       entry    = *ptr++; /* key_key_usage_index */
//  419       
//  420       /* Transform byte array to propriety PIB struct */
//  421       osal_memcpy(tmp, ptr, sizeof(keyUsageDescriptor_t));
//  422       osal_memcpy(&((macSecurityPibKeyUsageEntry_t *)temp)->macKeyUsageEntry, tmp, sizeof(keyUsageDescriptor_t));
//  423       ((macSecurityPibKeyUsageEntry_t *)temp)->key_key_usage_index = entry;
//  424       ((macSecurityPibKeyUsageEntry_t *)temp)->key_index = keyIndex;
//  425       return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
//  426       break;
//  427       
//  428     case ZMacKeyEntry:
//  429       keyIndex = *ptr++; /* key_index */
//  430       
//  431       /* Transform byte array to propriety PIB struct */
//  432       osal_memcpy(tmp, ptr, MAC_KEY_MAX_LEN);
//  433       osal_memcpy(&((macSecurityPibKeyEntry_t *)temp)->keyEntry, tmp, MAC_KEY_MAX_LEN);
//  434       ptr+=MAC_KEY_MAX_LEN;
//  435       
//  436       osal_memcpy(&frameCounter, ptr, sizeof(frameCounter));
//  437       
//  438       ((macSecurityPibKeyEntry_t *)temp)->frameCounter = frameCounter;
//  439       ((macSecurityPibKeyEntry_t *)temp)->key_index = keyIndex;
//  440       return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
//  441       break;
//  442       
//  443     case ZMacDeviceEntry:
//  444        entry = *ptr++;
//  445        
//  446        /* Transform byte array to propriety PIB struct */
//  447        osal_memcpy(tmp, ptr, sizeof(deviceDescriptor_t));
//  448        osal_memcpy(&((macSecurityPibDeviceEntry_t *)temp)->macDeviceEntry, tmp, sizeof(deviceDescriptor_t));
//  449    
//  450       ((macSecurityPibDeviceEntry_t *)temp)->device_index = entry;
//  451       return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
//  452       break;
//  453 
//  454     case ZMacSecurityLevelEntry:
//  455       entry = *ptr++; /* security_level_index */
//  456       
//  457       /* Transform byte array to propriety PIB struct */
//  458       osal_memcpy(tmp, ptr, sizeof(securityLevelDescriptor_t));
//  459       osal_memcpy(&((macSecurityPibSecurityLevelEntry_t *)temp)->macSecurityLevelEntry, tmp, sizeof(securityLevelDescriptor_t));
//  460       
//  461       ((macSecurityPibSecurityLevelEntry_t *)temp)->security_level_index = entry;
//  462       return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
//  463       break;
//  464   }
//  465 
//  466   return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, value );
//  467 }
//  468 #endif /* FEATURE_MAC_SECURITY */
//  469 
//  470 /********************************************************************************************************
//  471  * @fn      ZMacAssociateReq
//  472  *
//  473  * @brief   Request an association with a coordinator.
//  474  *
//  475  * @param   structure with info need to associate.
//  476  *
//  477  * @return  status
//  478  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  479 uint8 ZMacAssociateReq( ZMacAssociateReq_t *pData )
ZMacAssociateReq:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ZMacAssociateReq
        CODE
//  480 {
        FUNCALL ZMacAssociateReq, MAC_MlmeAssociateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  481   /* Right now, set security to zero */
//  482   pData->Sec.SecurityLevel = false;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  483 
//  484   MAC_MlmeAssociateReq ( (macMlmeAssociateReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmeAssociateReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??MAC_MlmeAssociateReq::?relay`; Banked call to: MAC_MlmeAssociateReq
//  485   return ( ZMacSuccess );
        MOV     R1,#0x0
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  486 }
          CFI EndBlock cfiBlock4
//  487 
//  488 /********************************************************************************************************
//  489  * @fn      ZMacAssociateRsp
//  490  *
//  491  * @brief   Request to send an association response message.
//  492  *
//  493  * @param   structure with associate response and info needed to send it.
//  494  *
//  495  * @return  MAC_SUCCESS or MAC error code
//  496  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  497 uint8 ZMacAssociateRsp( ZMacAssociateRsp_t *pData )
ZMacAssociateRsp:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ZMacAssociateRsp
        CODE
//  498 {
        FUNCALL ZMacAssociateRsp, MAC_MlmeAssociateRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  499   /* TBD: set security to zero for now. Require Ztool change */
//  500   pData->Sec.SecurityLevel = false;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  501 
//  502   return ( MAC_MlmeAssociateRsp( (macMlmeAssociateRsp_t *) pData ) );
        ; Setup parameters for call to function MAC_MlmeAssociateRsp
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??MAC_MlmeAssociateRsp::?relay`; Banked call to: MAC_MlmeAssociateRsp
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  503 }
          CFI EndBlock cfiBlock5
//  504 
//  505 /********************************************************************************************************
//  506  * @fn      ZMacDisassociateReq
//  507  *
//  508  * @brief   Request to send a disassociate request message.
//  509  *
//  510  * @param   structure with info need send it.
//  511  *
//  512  * @return  status
//  513  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  514 uint8 ZMacDisassociateReq( ZMacDisassociateReq_t *pData )
ZMacDisassociateReq:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ZMacDisassociateReq
        CODE
//  515 {
        FUNCALL ZMacDisassociateReq, MAC_MlmeDisassociateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  516   /* Right now, set security to zero */
//  517   pData->Sec.SecurityLevel = false;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  518 
//  519   MAC_MlmeDisassociateReq( (macMlmeDisassociateReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmeDisassociateReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??MAC_MlmeDisassociateReq::?relay`; Banked call to: MAC_MlmeDisassociateReq
//  520   return ( ZMacSuccess );
        MOV     R1,#0x0
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  521 }
          CFI EndBlock cfiBlock6
//  522 
//  523 /********************************************************************************************************
//  524  * @fn      ZMacOrphanRsp
//  525  *
//  526  * @brief   Allows next higher layer to respond to an orphan indication message.
//  527  *
//  528  * @param   structure with info need send it.
//  529  *
//  530  * @return  status
//  531  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  532 uint8 ZMacOrphanRsp( ZMacOrphanRsp_t *pData )
ZMacOrphanRsp:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function ZMacOrphanRsp
        CODE
//  533 {
        FUNCALL ZMacOrphanRsp, MAC_MlmeOrphanRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  534   /* Right now, set security to zero */
//  535   pData->Sec.SecurityLevel = false;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  536 
//  537   MAC_MlmeOrphanRsp( (macMlmeOrphanRsp_t *)pData);
        ; Setup parameters for call to function MAC_MlmeOrphanRsp
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??MAC_MlmeOrphanRsp::?relay`; Banked call to: MAC_MlmeOrphanRsp
//  538   return ( ZMacSuccess );
        MOV     R1,#0x0
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  539 }
          CFI EndBlock cfiBlock7
//  540 
//  541 /********************************************************************************************************
//  542  * @fn      ZMacScanReq
//  543  *
//  544  * @brief   This function is called to perform a network scan.
//  545  *
//  546  * @param   param - structure with info need send it.
//  547  *
//  548  * @return  status
//  549  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  550 uint8 ZMacScanReq( ZMacScanReq_t *pData )
ZMacScanReq:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function ZMacScanReq
        CODE
//  551 {
        FUNCALL ZMacScanReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacScanReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacScanReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacScanReq, MAC_MlmeScanReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  552   _ScanChannels = pData->ScanChannels;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#_ScanChannels
        LCALL   ?XSTORE_R0123
//  553 
//  554   /* scan in progress */
//  555   if (ZMac_ScanBuf != NULL)
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZMacScanReq_0
//  556   {
//  557     return MAC_SCAN_IN_PROGRESS;
        MOV     R1,#-0x4
        LJMP    ??ZMacScanReq_1 & 0xFFFF
//  558   }
//  559 
//  560   if (pData->ScanType != ZMAC_ORPHAN_SCAN)
??ZMacScanReq_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     $+5
        LJMP    ??ZMacScanReq_2 & 0xFFFF
//  561   {
//  562     /* Allocate memory depends on the scan type */
//  563     if (pData->ScanType == ZMAC_ED_SCAN)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZMacScanReq_3
//  564     {
//  565       if ((ZMac_ScanBuf = osal_mem_alloc(ZMAC_ED_SCAN_MAXCHANNELS)) == NULL)
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x1b
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPTR,#ZMac_ScanBuf
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZMacScanReq_4
//  566       {
//  567         return MAC_NO_RESOURCES;
        MOV     R1,#0x1a
        LJMP    ??ZMacScanReq_1 & 0xFFFF
//  568       }
//  569       osal_memset(ZMac_ScanBuf, 0, ZMAC_ED_SCAN_MAXCHANNELS);
??ZMacScanReq_4:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x1b
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  570       pData->Result.pEnergyDetect = ((uint8*)ZMac_ScanBuf) + MAC_CHAN_11;
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        ADD     A,#0xb
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        SJMP    ??ZMacScanReq_2
//  571     }
//  572     else if (pData->MaxResults > 0)
??ZMacScanReq_3:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZMacScanReq_2
//  573     {
//  574       if ((ZMac_ScanBuf = pData->Result.pPanDescriptor =
//  575            osal_mem_alloc( sizeof( ZMacPanDesc_t ) * pData->MaxResults )) == NULL)
        ; Setup parameters for call to function osal_mem_alloc
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x21
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x21
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#ZMac_ScanBuf
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZMacScanReq_2
//  576       {
//  577         return MAC_NO_RESOURCES;
        MOV     R1,#0x1a
        SJMP    ??ZMacScanReq_1
//  578       }
//  579     }
//  580   }
//  581 
//  582   /* Channel Page */
//  583   pData->ChannelPage = 0x00;
??ZMacScanReq_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  584 
//  585   MAC_MlmeScanReq ((macMlmeScanReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmeScanReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??MAC_MlmeScanReq::?relay`; Banked call to: MAC_MlmeScanReq
//  586 
//  587   return ZMacSuccess;
        MOV     R1,#0x0
??ZMacScanReq_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
//  588 }
          CFI EndBlock cfiBlock8
//  589 
//  590 
//  591 /********************************************************************************************************
//  592  * @fn      ZMacStartReq
//  593  *
//  594  * @brief   This function is called to tell the MAC to transmit beacons
//  595  *          and become a coordinator.
//  596  *
//  597  * @param   structure with info need send it.
//  598  *
//  599  * @return  status
//  600  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  601 uint8 ZMacStartReq( ZMacStartReq_t *pData )
ZMacStartReq:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function ZMacStartReq
        CODE
//  602 {
        FUNCALL ZMacStartReq, MAC_MlmeSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacStartReq, MAC_MlmeStartReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  603   uint8 stat;
//  604 
//  605   // Probably want to keep the receiver on
//  606   stat = true;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  607   MAC_MlmeSetReq( MAC_RX_ON_WHEN_IDLE, &stat );
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x52
        LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
        MOV     A,R1
//  608 
//  609   /* Right now, set security to zero */
//  610   pData->RealignSec.SecurityLevel = false;
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  611   pData->BeaconSec.SecurityLevel = false;
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  612 
//  613 
//  614   MAC_MlmeStartReq((macMlmeStartReq_t *) pData);
        ; Setup parameters for call to function MAC_MlmeStartReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??MAC_MlmeStartReq::?relay`; Banked call to: MAC_MlmeStartReq
//  615 
//  616   // MAC does not issue mlmeStartConfirm(), so we have to
//  617   // mlmeStartConfirm( stat );  This needs to be addressed some how
//  618 
//  619   return ZMacSuccess;
        MOV     R1,#0x0
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  620 }
          CFI EndBlock cfiBlock9
//  621 
//  622 /********************************************************************************************************
//  623  * @fn      ZMacSyncReq
//  624  *
//  625  * @brief   This function is called to request a sync to the current
//  626  *          networks beacons.
//  627  *
//  628  * @param   LogicalChannel -
//  629  * @param   TrackBeacon - true/false
//  630  *
//  631  * @return  status
//  632  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  633 uint8 ZMacSyncReq( ZMacSyncReq_t *pData )
ZMacSyncReq:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ZMacSyncReq
        CODE
//  634 {
        FUNCALL ZMacSyncReq, MAC_MlmeSyncReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  635   MAC_MlmeSyncReq( (macMlmeSyncReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmeSyncReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??MAC_MlmeSyncReq::?relay`; Banked call to: MAC_MlmeSyncReq
//  636   return ZMacSuccess;
        MOV     R1,#0x0
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  637 }
          CFI EndBlock cfiBlock10
//  638 
//  639 /********************************************************************************************************
//  640  * @fn      ZMacPollReq
//  641  *
//  642  * @brief   This function is called to request MAC data request poll.
//  643  *
//  644  * @param   coordAddr -
//  645  * @param   coordPanId -
//  646  * @param   SecurityEnable - true or false.
//  647  *
//  648  * @return  status
//  649  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  650 uint8 ZMacPollReq( ZMacPollReq_t *pData )
ZMacPollReq:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function ZMacPollReq
        CODE
//  651 {
        FUNCALL ZMacPollReq, MAC_MlmePollReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  652   /* Right now, set security to zero */
//  653   pData->Sec.SecurityLevel = false;
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  654 
//  655   MAC_MlmePollReq ((macMlmePollReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmePollReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??MAC_MlmePollReq::?relay`; Banked call to: MAC_MlmePollReq
//  656   return ( ZMacSuccess );
        MOV     R1,#0x0
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  657 }
          CFI EndBlock cfiBlock11
//  658 
//  659 /********************************************************************************************************
//  660  * @fn      ZMacDataReqSec
//  661  *
//  662  * @brief   Send a MAC Data Frame packet, calls the passed in function to apply non-MAC security
//  663  *          on the MAC data field after the MAC buffer allocation.
//  664  *
//  665  * @param   pData - structure containing data and where to send it.
//  666  * @param   secCB - callback function to apply security, NULL indicates no security
//  667  *
//  668  * @return  status
//  669  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  670 uint8 ZMacDataReqSec( ZMacDataReq_t *pData, applySecCB_t secCB )
ZMacDataReqSec:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function ZMacDataReqSec
        CODE
//  671 {
        FUNCALL ZMacDataReqSec, MAC_McpsDataAlloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacDataReqSec, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacDataReqSec, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacDataReqSec, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacDataReqSec, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacDataReqSec, MAC_McpsDataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
//  672   macMcpsDataReq_t *pBuf;
//  673 
//  674   /* Allocate memory */
//  675   pBuf = MAC_McpsDataAlloc( pData->msduLength, pData->Sec.SecurityLevel, pData->Sec.KeyIdMode );
        ; Setup parameters for call to function MAC_McpsDataAlloc
        MOV     A,?V0
        ADD     A,#0x1c
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,?V0
        ADD     A,#0x1b
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0
        ADD     A,#0x1e
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??MAC_McpsDataAlloc::?relay`; Banked call to: MAC_McpsDataAlloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
//  676 
//  677   if ( pBuf )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZMacDataReqSec_0 & 0xFFFF
//  678   {
//  679     /* Copy the addresses */
//  680     osal_memcpy( &pBuf->mac, pData, sizeof (macDataReq_t) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V0
        MOV     ?V5,?V1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x23
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  681 
//  682     /* Copy data */
//  683     osal_memcpy( pBuf->msdu.p, pData->msdu, pData->msduLength );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0
        ADD     A,#0x1f
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,?V0
        ADD     A,#0x1e
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  684 
//  685     /* Copy Security parameters */
//  686     osal_memcpy( &pBuf->sec, &pData->Sec, sizeof (macSec_t));
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0
        ADD     A,#0x13
        MOV     ?V4,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0xb
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x18
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  687 
//  688     /* Encrypt in place */
//  689     if ( secCB && pBuf->msdu.len && pBuf->msdu.p )
        MOV     A,?V2
        ORL     A,?V3
        JZ      ??ZMacDataReqSec_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZMacDataReqSec_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZMacDataReqSec_1
//  690     {
//  691       if ( secCB( pBuf->msdu.len, pBuf->msdu.p ) != ZSuccess )
        ; Setup parameters for indirect call
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?CALL_IND
        MOV     A,R1
        JZ      ??ZMacDataReqSec_1
//  692       {
//  693         // Deallocate the buffer.  MAC_McpsDataAlloc() calls osal_msg_allocate() and
//  694         // returns the same pointer.
//  695         osal_msg_deallocate( (uint8 *)pBuf );
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
        MOV     A,R1
//  696 
//  697         return ( MAC_NO_RESOURCES );
        MOV     R1,#0x1a
        SJMP    ??ZMacDataReqSec_2
//  698       }
//  699     }
//  700 
//  701     /* Call Mac Data Request */
//  702     MAC_McpsDataReq( pBuf );
??ZMacDataReqSec_1:
        ; Setup parameters for call to function MAC_McpsDataReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??MAC_McpsDataReq::?relay`; Banked call to: MAC_McpsDataReq
//  703 
//  704     return ( ZMacSuccess );
        MOV     R1,#0x0
        SJMP    ??ZMacDataReqSec_2
//  705   }
//  706 
//  707   return ( MAC_NO_RESOURCES );
??ZMacDataReqSec_0:
        MOV     R1,#0x1a
??ZMacDataReqSec_2:
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
//  708 }
          CFI EndBlock cfiBlock12
//  709 
//  710 /********************************************************************************************************
//  711  * @fn      ZMacDataReq
//  712  *
//  713  * @brief   Send a MAC Data Frame packet.
//  714  *
//  715  * @param   structure containing data and where to send it.
//  716  *
//  717  * @return  status
//  718  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  719 uint8 ZMacDataReq( ZMacDataReq_t *pData )
ZMacDataReq:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function ZMacDataReq
        CODE
//  720 {
        FUNCALL ZMacDataReq, ZMacDataReqSec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  721   return ZMacDataReqSec( pData, NULL );
        ; Setup parameters for call to function ZMacDataReqSec
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZMacDataReqSec::?relay`; Banked call to: ZMacDataReqSec
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  722 }
          CFI EndBlock cfiBlock13
//  723 
//  724 /********************************************************************************************************
//  725  * @fn      ZMacPurgeReq
//  726  *
//  727  * @brief   Purge a MAC Data Frame packet.
//  728  *
//  729  * @param   MSDU data handle.
//  730  *
//  731  * @return  status
//  732  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  733 uint8 ZMacPurgeReq( byte Handle )
ZMacPurgeReq:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function ZMacPurgeReq
        CODE
//  734 {
        FUNCALL ZMacPurgeReq, MAC_McpsPurgeReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  735   MAC_McpsPurgeReq( Handle );
        ; Setup parameters for call to function MAC_McpsPurgeReq
        MOV     A,R6
        MOV     R1,A
        LCALL   `??MAC_McpsPurgeReq::?relay`; Banked call to: MAC_McpsPurgeReq
//  736   return ZMacSuccess;
        MOV     R1,#0x0
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  737 }
          CFI EndBlock cfiBlock14
//  738 
//  739 /********************************************************************************************************
//  740  * @fn      ZMacSrcMatchEnable
//  741  *
//  742  * @brief   This function is call to enable AUTOPEND and source address matching.
//  743  *
//  744  * @param   addressType - address type that the application uses
//  745  *                        SADDR_MODE_SHORT or SADDR_MODE_EXT.
//  746  *          numEntries  - number of source address table entries to be used
//  747  *
//  748  * @return  status
//  749  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  750 ZMacStatus_t ZMacSrcMatchEnable (void)
ZMacSrcMatchEnable:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function ZMacSrcMatchEnable
        CODE
//  751 {
        FUNCALL ZMacSrcMatchEnable, MAC_SrcMatchEnable
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  752   MAC_SrcMatchEnable();
        ; Setup parameters for call to function MAC_SrcMatchEnable
        LCALL   `??MAC_SrcMatchEnable::?relay`; Banked call to: MAC_SrcMatchEnable
//  753   return ZMacSuccess;
        MOV     R1,#0x0
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  754 }
          CFI EndBlock cfiBlock15
//  755 
//  756 /********************************************************************************************************
//  757  * @fn      ZMacSrcMatchAddEntry
//  758  *
//  759  * @brief   This function is called to add a short or extended address to source address table.
//  760  *
//  761  * @param   addr - a pointer to sAddr_t which contains addrMode
//  762  *                     and a union of a short 16-bit MAC address or an extended
//  763  *                     64-bit MAC address to be added to the source address table.
//  764  *          panID - the device PAN ID. It is only used when the addr is
//  765  *                      using short address
//  766  *
//  767  * @return  status
//  768  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  769 ZMacStatus_t ZMacSrcMatchAddEntry (zAddrType_t *addr, uint16 panID)
ZMacSrcMatchAddEntry:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function ZMacSrcMatchAddEntry
        CODE
//  770 {
        FUNCALL ZMacSrcMatchAddEntry, MAC_SrcMatchAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  771   return (MAC_SrcMatchAddEntry ((sAddr_t*)addr, panID));
        ; Setup parameters for call to function MAC_SrcMatchAddEntry
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??MAC_SrcMatchAddEntry::?relay`; Banked call to: MAC_SrcMatchAddEntry
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
//  772 }
          CFI EndBlock cfiBlock16
//  773 
//  774 /********************************************************************************************************
//  775  * @fn      ZMacSrcMatchDeleteEntry
//  776  *
//  777  * @brief   This function is called to delete a short or extended address from source address table.
//  778  *
//  779  * @param   addr - a pointer to sAddr_t which contains addrMode
//  780  *                     and a union of a short 16-bit MAC address or an extended
//  781  *                     64-bit MAC address to be added to the source address table.
//  782  *          panID - the device PAN ID. It is only used when the addr is
//  783  *                      using short address
//  784  *
//  785  * @return  status
//  786  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  787 ZMacStatus_t ZMacSrcMatchDeleteEntry (zAddrType_t *addr, uint16 panID)
ZMacSrcMatchDeleteEntry:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function ZMacSrcMatchDeleteEntry
        CODE
//  788 {
        FUNCALL ZMacSrcMatchDeleteEntry, MAC_SrcMatchDeleteEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  789   return (MAC_SrcMatchDeleteEntry ((sAddr_t*)addr, panID));
        ; Setup parameters for call to function MAC_SrcMatchDeleteEntry
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??MAC_SrcMatchDeleteEntry::?relay`; Banked call to: MAC_SrcMatchDeleteEntry
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
//  790 }
          CFI EndBlock cfiBlock17
//  791 
//  792 /********************************************************************************************************
//  793  * @fn       ZMacSrcMatchAckAllPending
//  794  *
//  795  * @brief    Enabled/disable acknowledging all packets with pending bit set
//  796  *           It is normally enabled when adding new entries to
//  797  *           the source address table fails due to the table is full, or
//  798  *           disabled when more entries are deleted and the table has
//  799  *           empty slots.
//  800  *
//  801  * @param    option - true (acknowledging all packets with pending field set)
//  802  *                    false (acknowledging all packets with pending field cleared)
//  803  *
//  804  * @return   status
//  805  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  806 ZMacStatus_t ZMacSrcMatchAckAllPending (uint8 option)
ZMacSrcMatchAckAllPending:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function ZMacSrcMatchAckAllPending
        CODE
//  807 {
        FUNCALL ZMacSrcMatchAckAllPending, MAC_SrcMatchAckAllPending
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  808   MAC_SrcMatchAckAllPending (option);
        ; Setup parameters for call to function MAC_SrcMatchAckAllPending
        MOV     A,R6
        MOV     R1,A
        LCALL   `??MAC_SrcMatchAckAllPending::?relay`; Banked call to: MAC_SrcMatchAckAllPending
//  809 
//  810   return ZMacSuccess;
        MOV     R1,#0x0
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  811 }
          CFI EndBlock cfiBlock18
//  812 
//  813 /********************************************************************************************************
//  814  * @fn       ZMacSrcMatchCheckAllPending
//  815  *
//  816  * @brief    This function is called to check if acknowledging all packets with pending bit set is enabled.
//  817  *
//  818  * @param    none
//  819  *
//  820  * @return   status
//  821  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  822 ZMacStatus_t ZMacSrcMatchCheckAllPending (void)
ZMacSrcMatchCheckAllPending:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function ZMacSrcMatchCheckAllPending
        CODE
//  823 {
        FUNCALL ZMacSrcMatchCheckAllPending, MAC_SrcMatchCheckAllPending
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  824   return (MAC_SrcMatchCheckAllPending ());
        ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
        LCALL   `??MAC_SrcMatchCheckAllPending::?relay`; Banked call to: MAC_SrcMatchCheckAllPending
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  825 }
          CFI EndBlock cfiBlock19
//  826 
//  827 /********************************************************************************************************
//  828  * @fn      - ZMACPwrOnReq
//  829  *
//  830  * @brief   - This function requests the MAC to power on the radio hardware
//  831  *            and wake up.  When the power on procedure is complete the MAC
//  832  *            will send a MAC_PWR_ON_CNF to the application.
//  833  *
//  834  * @input   - None.
//  835  *
//  836  * @output  - None.
//  837  *
//  838  * @return  - None.
//  839  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  840 void ZMacPwrOnReq ( void )
ZMacPwrOnReq:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function ZMacPwrOnReq
        CODE
//  841 {
        FUNCALL ZMacPwrOnReq, MAC_PwrOnReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  842   MAC_PwrOnReq();
        ; Setup parameters for call to function MAC_PwrOnReq
        LCALL   `??MAC_PwrOnReq::?relay`; Banked call to: MAC_PwrOnReq
//  843 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock20
//  844 
//  845 /********************************************************************************************************
//  846  * @fn          MAC_PwrMode
//  847  *
//  848  * @brief       This function returns the current power mode of the MAC.
//  849  *
//  850  * input parameters
//  851  *
//  852  * None.
//  853  *
//  854  * output parameters
//  855  *
//  856  * None.
//  857  *
//  858  * @return      The current power mode of the MAC.
//  859  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  860 uint8 ZMac_PwrMode(void)
ZMac_PwrMode:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function ZMac_PwrMode
        CODE
//  861 {
        FUNCALL ZMac_PwrMode, MAC_PwrMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  862   return (MAC_PwrMode());
        ; Setup parameters for call to function MAC_PwrMode
        LCALL   `??MAC_PwrMode::?relay`; Banked call to: MAC_PwrMode
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  863 }
          CFI EndBlock cfiBlock21
//  864 
//  865 /********************************************************************************************************
//  866  * @fn      ZMacSetTransmitPower
//  867  *
//  868  * @brief   Set the transmitter power according to the level setting param.
//  869  *
//  870  * @param   Valid power level setting as defined in ZMAC.h.
//  871  *
//  872  * @return  ZMacSuccess if PHY_TRANSMIT_POWER found or ZMacUnsupportedAttribute.
//  873  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  874 uint8 ZMacSetTransmitPower( ZMacTransmitPower_t level )
ZMacSetTransmitPower:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function ZMacSetTransmitPower
        CODE
//  875 {
        FUNCALL ZMacSetTransmitPower, MAC_MlmeSetReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+-5
        MOVX    @DPTR,A
//  876   return MAC_MlmeSetReq( ZMacPhyTransmitPowerSigned, &level );
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#-0x20
        LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  877 }
          CFI EndBlock cfiBlock22
//  878 
//  879 /********************************************************************************************************
//  880  * @fn      ZMacSendNoData
//  881  *
//  882  * @brief   This function sends an empty msg
//  883  *
//  884  * @param   DstAddr   - destination short address
//  885  *          DstPANId  - destination pan id
//  886  *
//  887  * @return  None
//  888  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  889 void ZMacSendNoData ( uint16 DstAddr, uint16 DstPANId )
ZMacSendNoData:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function ZMacSendNoData
        CODE
//  890 {
        FUNCALL ZMacSendNoData, MAC_McpsDataAlloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacSendNoData, MAC_McpsDataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     ?V0,R4
        MOV     ?V1,R5
//  891   macMcpsDataReq_t *pBuf;
//  892 
//  893   /* Allocate memory */
//  894   pBuf = MAC_McpsDataAlloc(0, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE);
        ; Setup parameters for call to function MAC_McpsDataAlloc
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   `??MAC_McpsDataAlloc::?relay`; Banked call to: MAC_McpsDataAlloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
//  895 
//  896   if (pBuf)
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZMacSendNoData_0
//  897   {
//  898     /* Fill in src information */
//  899     pBuf->mac.srcAddrMode              = SADDR_MODE_SHORT;
        MOV     A,R6
        ADD     A,#0x2e
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
//  900 
//  901     /* Fill in dst information */
//  902     pBuf->mac.dstAddr.addr.shortAddr   = DstAddr;
        MOV     A,R6
        ADD     A,#0x23
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,?V2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V3
        MOVX    @DPTR,A
//  903     pBuf->mac.dstAddr.addrMode         = SADDR_MODE_SHORT;
        MOV     A,R6
        ADD     A,#0x2b
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
//  904     pBuf->mac.dstPanId                 = DstPANId;
        MOV     A,R6
        ADD     A,#0x2c
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//  905 
//  906     /* Misc information */
//  907     pBuf->mac.msduHandle               = 0;
        MOV     A,R6
        ADD     A,#0x2f
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  908     pBuf->mac.txOptions                = ZMAC_TXOPTION_ACK | ZMAC_TXOPTION_NO_RETRANS | ZMAC_TXOPTION_NO_CNF;
        MOV     A,R6
        ADD     A,#0x30
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x31
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  909 
//  910     /* Right now, set security to zero */
//  911     pBuf->sec.securityLevel = false;
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  912 
//  913     /* Call Mac Data Request */
//  914     MAC_McpsDataReq(pBuf);
        ; Setup parameters for call to function MAC_McpsDataReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??MAC_McpsDataReq::?relay`; Banked call to: MAC_McpsDataReq
//  915   }
//  916 
//  917 }
??ZMacSendNoData_0:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock23
//  918 
//  919 /********************************************************************************************************
//  920  * @fn      ZMacStateIdle
//  921  *
//  922  * @brief   This function returns true if the MAC state is idle.
//  923  *
//  924  * @param   none
//  925  *
//  926  * @return  TRUE if the MAC state is idle, FALSE otherwise.
//  927  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  928 uint8 ZMacStateIdle( void )
ZMacStateIdle:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function ZMacStateIdle
        CODE
//  929 {
        FUNCALL ZMacStateIdle, macStateIdle
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  930   return macStateIdle();
        ; Setup parameters for call to function macStateIdle
        LCALL   `??macStateIdle::?relay`; Banked call to: macStateIdle
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  931 }
          CFI EndBlock cfiBlock24
//  932 
//  933 /********************************************************************************************************
//  934  * @fn      ZMacEnhancedActiveScanReq
//  935  *
//  936  * @brief   This function is called to perform a network scan.
//  937  *
//  938  * @param   param - structure with info need send it.
//  939  *
//  940  * @return  status
//  941  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  942 uint8 ZMacEnhancedActiveScanReq( ZMacScanReq_t *pData )
ZMacEnhancedActiveScanReq:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function ZMacEnhancedActiveScanReq
        CODE
//  943 {
        FUNCALL ZMacEnhancedActiveScanReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacEnhancedActiveScanReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacEnhancedActiveScanReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacEnhancedActiveScanReq, MAC_MlmeScanReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  944   _ScanChannels = pData->ScanChannels;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#_ScanChannels
        LCALL   ?XSTORE_R0123
//  945 
//  946   /* scan in progress */
//  947   if (ZMac_ScanBuf != NULL)
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZMacEnhancedActiveScanReq_0
//  948   {
//  949     return MAC_SCAN_IN_PROGRESS;
        MOV     R1,#-0x4
        LJMP    ??ZMacEnhancedActiveScanReq_1 & 0xFFFF
//  950   }
//  951 
//  952   if (pData->ScanType != ZMAC_ORPHAN_SCAN)
??ZMacEnhancedActiveScanReq_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     $+5
        LJMP    ??ZMacEnhancedActiveScanReq_2 & 0xFFFF
//  953   {
//  954     /* Allocate memory depends on the scan type */
//  955     if (pData->ScanType == ZMAC_ED_SCAN)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZMacEnhancedActiveScanReq_3
//  956     {
//  957       if ((ZMac_ScanBuf = osal_mem_alloc(ZMAC_ED_SCAN_MAXCHANNELS)) == NULL)
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x1b
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPTR,#ZMac_ScanBuf
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZMacEnhancedActiveScanReq_4
//  958       {
//  959         return MAC_NO_RESOURCES;
        MOV     R1,#0x1a
        LJMP    ??ZMacEnhancedActiveScanReq_1 & 0xFFFF
//  960       }
//  961       osal_memset(ZMac_ScanBuf, 0, ZMAC_ED_SCAN_MAXCHANNELS);
??ZMacEnhancedActiveScanReq_4:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x1b
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  962       pData->Result.pEnergyDetect = ((uint8*)ZMac_ScanBuf) + MAC_CHAN_11;
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        ADD     A,#0xb
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        SJMP    ??ZMacEnhancedActiveScanReq_2
//  963     }
//  964     else if (pData->MaxResults > 0)
??ZMacEnhancedActiveScanReq_3:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZMacEnhancedActiveScanReq_2
//  965     {
//  966       if ((ZMac_ScanBuf = pData->Result.pPanDescriptor =
//  967            osal_mem_alloc( sizeof( ZMacPanDesc_t ) * pData->MaxResults )) == NULL)
        ; Setup parameters for call to function osal_mem_alloc
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x21
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x21
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#ZMac_ScanBuf
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZMacEnhancedActiveScanReq_2
//  968       {
//  969         return MAC_NO_RESOURCES;
        MOV     R1,#0x1a
        SJMP    ??ZMacEnhancedActiveScanReq_1
//  970       }
//  971     }
//  972   }
//  973 
//  974   /* Channel Page */
//  975   pData->ChannelPage = 0x00; 
??ZMacEnhancedActiveScanReq_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  976 
//  977   MAC_MlmeScanReq ((macMlmeScanReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmeScanReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??MAC_MlmeScanReq::?relay`; Banked call to: MAC_MlmeScanReq
//  978 
//  979   return ZMacSuccess;
        MOV     R1,#0x0
??ZMacEnhancedActiveScanReq_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
//  980 }
          CFI EndBlock cfiBlock25

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacGetReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacGetReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacSetReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSetReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacAssociateReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacAssociateReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacAssociateRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacAssociateRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacDisassociateReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacDisassociateReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacOrphanRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacOrphanRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacScanReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacScanReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacStartReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacStartReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacSyncReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSyncReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacPollReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacPollReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacDataReqSec::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacDataReqSec

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacDataReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacDataReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacPurgeReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacPurgeReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacSrcMatchEnable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSrcMatchEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacSrcMatchAddEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSrcMatchAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacSrcMatchDeleteEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSrcMatchDeleteEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacSrcMatchAckAllPending::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSrcMatchAckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacSrcMatchCheckAllPending::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSrcMatchCheckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacPwrOnReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacPwrOnReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMac_PwrMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMac_PwrMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacSetTransmitPower::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSetTransmitPower

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacSendNoData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSendNoData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacStateIdle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacStateIdle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacEnhancedActiveScanReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacEnhancedActiveScanReq

        END
// 
// 1 733 bytes in segment BANKED_CODE
//   156 bytes in segment BANK_RELAYS
//    16 bytes in segment XDATA_ROM_C
//     6 bytes in segment XDATA_Z
// 
// 1 889 bytes of CODE  memory
//    16 bytes of CONST memory
//     6 bytes of XDATA memory
//
//Errors: none
//Warnings: none
