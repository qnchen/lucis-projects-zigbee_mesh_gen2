###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  17:48:47
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\mt\MT_ZDO.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\mt\MT_ZDO.c" -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D
#        MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE -D NV_INIT -D
#        OPEN_FCS -D PANID_INCREASE -lC "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List" -lA
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj" -e
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\MT_ZDO.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj\MT_ZDO.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2014-05-16 18:14:48 -0700 (Fri, 16 May 2014) $
      4            Revision:       $Revision: 38577 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef MT_ZDO_FUNC
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "MT.h"
     49          #include "MT_ZDO.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          #include "OnBoard.h"
     56          #include "aps_groups.h"
     57          
     58          #if defined ( MT_ZDO_EXTENSIONS )
     59            #include "rtg.h"
     60          #endif
     61          #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
     62            #include "ZDSecMgr.h"
     63          #endif
     64          
     65          #include "nwk_util.h"
     66          
     67          /**************************************************************************************************
     68           * CONSTANTS
     69           **************************************************************************************************/
     70          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     71          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     72          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     73          #define MT_ZDO_BEACON_IND_LEN             21
     74          #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
     75          #define MT_ZDO_JOIN_CNF_LEN               5
     76          
     77          // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
     78          // sizeof(zdoConcentratorInd_t) is not usable.
     79          #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
     80          
     81          #define MTZDO_RESPONSE_BUFFER_LEN   100
     82          
     83          #define MTZDO_MAX_MATCH_CLUSTERS    16
     84          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     85          
     86          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     87          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     88          
     89          #define MT_ZDO_STATUS_LEN   1
     90          
     91          #if defined ( MT_ZDO_EXTENSIONS )
     92          typedef struct
     93          {
     94            uint16            ami;
     95            uint16            keyNvId;   // index to the Link Key table in NV
     96            ZDSecMgr_Authentication_Option authenticateOption;
     97          } ZDSecMgrEntry_t;
     98          #endif  // MT_ZDO_EXTENSIONS
     99          
    100          /**************************************************************************************************
    101           * GLOBAL VARIABLES
    102           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 *pBeaconIndBuf = NULL;
   \                     pBeaconIndBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /**************************************************************************************************
    107           * LOCAL VARIABLES
    108           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          bool ignoreIndication = FALSE;
   \                     ignoreIndication:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    110          
    111          /**************************************************************************************************
    112           * LOCAL FUNCTIONS
    113           **************************************************************************************************/
    114          #if defined (MT_ZDO_FUNC)
    115          void MT_ZdoNWKAddressRequest(uint8 *pBuf);
    116          void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
    117          void MT_ZdoNodeDescRequest(uint8 *pBuf);
    118          void MT_ZdoPowerDescRequest(uint8 *pBuf);
    119          void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    120          void MT_ZdoActiveEpRequest(uint8 *pBuf);
    121          void MT_ZdoMatchDescRequest(uint8 *pBuf);
    122          void MT_ZdoComplexDescRequest(uint8 *pBuf);
    123          void MT_ZdoUserDescRequest(uint8 *pBuf);
    124          void MT_ZdoEndDevAnnce(uint8 *pBuf);
    125          void MT_ZdoUserDescSet(uint8 *pBuf);
    126          void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    127          #if defined ( ZIGBEE_CHILD_AGING )
    128          void MT_ZdoEndDeviceTimeoutRequest(uint8 *pBuf);
    129          #endif // ZIGBEE_CHILD_AGING
    130          void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    131          void MT_ZdoBindRequest(uint8 *pBuf);
    132          void MT_ZdoUnbindRequest(uint8 *pBuf);
    133          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    134          #if defined ( MT_SYS_KEY_MANAGEMENT )
    135          void MT_ZdoSetLinkKey(uint8 *pBuf);
    136          void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    137          void MT_ZdoGetLinkKey(uint8 *pBuf);
    138          #endif /* MT_SYS_KEY_MANAGEMENT */
    139          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
    140          void MT_ZdoJoinReq(uint8 *pBuf);
    141          /* Call back function */
    142          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
    143          void *MT_ZdoBeaconIndCB ( void *pStr );
    144          void *MT_ZdoJoinCnfCB ( void *pStr );
    145          #if defined (MT_ZDO_MGMT)
    146          void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    147          void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    148          void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    149          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    150          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    151          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    152          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    153          #endif /* MT_ZDO_MGMT */
    154          void MT_ZdoSendData( uint8 *pBuf );
    155          void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
    156          void MT_ZdoStartupFromApp(uint8 *pBuf);
    157          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    158          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    159          #endif /* MT_ZDO_FUNC */
    160          
    161          #if defined (MT_ZDO_CB_FUNC)
    162          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    163          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    164          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    165          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    166          void* MT_ZdoSrcRtgCB( void *pStr );
    167          static void *MT_ZdoConcentratorIndCB(void *pStr);
    168          static void *MT_ZdoLeaveInd(void *vPtr);
    169          void *MT_ZdoTcDeviceInd( void *params );
    170          void *MT_ZdoPermitJoinInd( void *duration );
    171          #endif /* MT_ZDO_CB_FUNC */
    172          
    173          #if defined ( MT_ZDO_EXTENSIONS )
    174          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf );
    175          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf );
    176          void MT_ZdoSecAddLinkKey( uint8 *pBuf );
    177          void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
    178          void MT_ZdoSecDeviceRemove( uint8 *pBuf );
    179          void MT_ZdoExtRouteDisc( uint8 *pBuf );
    180          void MT_ZdoExtRouteCheck( uint8 *pBuf );
    181          static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
    182          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
    183          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
    184          static void MT_ZdoExtFindGroup( uint8 *pBuf );
    185          static void MT_ZdoExtAddGroup( uint8 *pBuf );
    186          static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
    187          static void MT_ZdoExtRxIdle( uint8 *pBuf );
    188          static void MT_ZdoExtNwkInfo( uint8 *pBuf );
    189          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf );
    190          static void MT_ZdoExtSetParams( uint8 *pBuf );
    191          extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    192          #endif // MT_ZDO_EXTENSIONS
    193          
    194          #if defined (MT_ZDO_FUNC)
    195          /***************************************************************************************************
    196           * @fn      MT_ZdoInit
    197           *
    198           * @brief   MT ZDO initialization
    199           *
    200           * @param   none
    201           *
    202           * @return  none
    203           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          void MT_ZdoInit(void)
   \                     MT_ZdoInit:
    205          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    206          #ifdef MT_ZDO_CB_FUNC
    207            /* Register with ZDO for indication callbacks */
    208            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
    209            ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
    210            ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
    211            ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &MT_ZdoPermitJoinInd);
    212            ZDO_RegisterForZdoCB(ZDO_TC_DEVICE_CBID, &MT_ZdoTcDeviceInd);
    213          #endif
    214          }
   \   000000   02....       LJMP    ?BRET
    215          
    216          /***************************************************************************************************
    217           * @fn      MT_ZdoCommandProcessing
    218           *
    219           * @brief
    220           *
    221           *   Process all the ZDO commands that are issued by test tool
    222           *
    223           * @param   pBuf - pointer to the msg buffer
    224           *
    225           *          | LEN  | CMD0  | CMD1  |  DATA  |
    226           *          |  1   |   1   |   1   |  0-255 |
    227           *
    228           * @return  status
    229           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    230          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
   \                     MT_ZdoCommandProcessing:
    231          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    232            uint8 status = MT_RPC_SUCCESS;
   \   000009   75..00       MOV     ?V0,#0x0
    233          
    234            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??MT_ZdoCommandProcessing_0 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??MT_ZdoCommandProcessing_1 & 0xFFFF
   \   00001E   14           DEC     A
   \   00001F   7003         JNZ     $+5
   \   000021   02....       LJMP    ??MT_ZdoCommandProcessing_2 & 0xFFFF
   \   000024   14           DEC     A
   \   000025   7003         JNZ     $+5
   \   000027   02....       LJMP    ??MT_ZdoCommandProcessing_3 & 0xFFFF
   \   00002A   14           DEC     A
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??MT_ZdoCommandProcessing_4 & 0xFFFF
   \   000030   14           DEC     A
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??MT_ZdoCommandProcessing_5 & 0xFFFF
   \   000036   14           DEC     A
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??MT_ZdoCommandProcessing_6 & 0xFFFF
   \   00003C   14           DEC     A
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??MT_ZdoCommandProcessing_7 & 0xFFFF
   \   000042   14           DEC     A
   \   000043   7003         JNZ     $+5
   \   000045   02....       LJMP    ??MT_ZdoCommandProcessing_8 & 0xFFFF
   \   000048   24FE         ADD     A,#-0x2
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??MT_ZdoCommandProcessing_9 & 0xFFFF
   \   00004F   14           DEC     A
   \   000050   7003         JNZ     $+5
   \   000052   02....       LJMP    ??MT_ZdoCommandProcessing_10 & 0xFFFF
   \   000055   14           DEC     A
   \   000056   7003         JNZ     $+5
   \   000058   02....       LJMP    ??MT_ZdoCommandProcessing_11 & 0xFFFF
   \   00005B   14           DEC     A
   \   00005C   7003         JNZ     $+5
   \   00005E   02....       LJMP    ??MT_ZdoCommandProcessing_12 & 0xFFFF
   \   000061   24ED         ADD     A,#-0x13
   \   000063   7003         JNZ     $+5
   \   000065   02....       LJMP    ??MT_ZdoCommandProcessing_13 & 0xFFFF
   \   000068   14           DEC     A
   \   000069   7003         JNZ     $+5
   \   00006B   02....       LJMP    ??MT_ZdoCommandProcessing_14 & 0xFFFF
   \   00006E   14           DEC     A
   \   00006F   7003         JNZ     $+5
   \   000071   02....       LJMP    ??MT_ZdoCommandProcessing_15 & 0xFFFF
   \   000074   24FC         ADD     A,#-0x4
   \   000076   7003         JNZ     $+5
   \   000078   02....       LJMP    ??MT_ZdoCommandProcessing_16 & 0xFFFF
   \   00007B   14           DEC     A
   \   00007C   7003         JNZ     $+5
   \   00007E   02....       LJMP    ??MT_ZdoCommandProcessing_17 & 0xFFFF
   \   000081   14           DEC     A
   \   000082   7003         JNZ     $+5
   \   000084   02....       LJMP    ??MT_ZdoCommandProcessing_18 & 0xFFFF
   \   000087   14           DEC     A
   \   000088   7003         JNZ     $+5
   \   00008A   02....       LJMP    ??MT_ZdoCommandProcessing_19 & 0xFFFF
   \   00008D   24EB         ADD     A,#-0x15
   \   00008F   7003         JNZ     $+5
   \   000091   02....       LJMP    ??MT_ZdoCommandProcessing_20 & 0xFFFF
   \   000094   14           DEC     A
   \   000095   7003         JNZ     $+5
   \   000097   02....       LJMP    ??MT_ZdoCommandProcessing_21 & 0xFFFF
   \   00009A   14           DEC     A
   \   00009B   7003         JNZ     $+5
   \   00009D   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
   \   0000A0   02....       LJMP    ??MT_ZdoCommandProcessing_23 & 0xFFFF
    235            {
    236          #if defined ( ZDO_NWKADDR_REQUEST )
    237              case MT_ZDO_NWK_ADDR_REQ:
    238                MT_ZdoNWKAddressRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_0:
   \   0000A3                ; Setup parameters for call to function MT_ZdoNWKAddressRequest
   \   0000A3   EE           MOV     A,R6
   \   0000A4   FA           MOV     R2,A
   \   0000A5   EF           MOV     A,R7
   \   0000A6   FB           MOV     R3,A
   \   0000A7   12....       LCALL   `??MT_ZdoNWKAddressRequest::?relay`; Banked call to: MT_ZdoNWKAddressRequest
    239                break;
   \   0000AA   02....       LJMP    ??MT_ZdoCommandProcessing_24 & 0xFFFF
    240          #endif
    241          
    242          #if defined ( ZDO_IEEEADDR_REQUEST )
    243              case MT_ZDO_IEEE_ADDR_REQ:
    244                MT_ZdoIEEEAddrRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_1:
   \   0000AD                ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
   \   0000AD   EE           MOV     A,R6
   \   0000AE   FA           MOV     R2,A
   \   0000AF   EF           MOV     A,R7
   \   0000B0   FB           MOV     R3,A
   \   0000B1   12....       LCALL   `??MT_ZdoIEEEAddrRequest::?relay`; Banked call to: MT_ZdoIEEEAddrRequest
    245                break;
   \   0000B4   02....       LJMP    ??MT_ZdoCommandProcessing_24 & 0xFFFF
    246          #endif
    247          
    248          #if defined ( ZDO_NODEDESC_REQUEST )
    249              case MT_ZDO_NODE_DESC_REQ:
    250                MT_ZdoNodeDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_2:
   \   0000B7                ; Setup parameters for call to function MT_ZdoNodeDescRequest
   \   0000B7   EE           MOV     A,R6
   \   0000B8   FA           MOV     R2,A
   \   0000B9   EF           MOV     A,R7
   \   0000BA   FB           MOV     R3,A
   \   0000BB   12....       LCALL   `??MT_ZdoNodeDescRequest::?relay`; Banked call to: MT_ZdoNodeDescRequest
    251                break;
   \   0000BE   02....       LJMP    ??MT_ZdoCommandProcessing_24 & 0xFFFF
    252          #endif
    253          
    254          #if defined ( ZDO_POWERDESC_REQUEST )
    255              case MT_ZDO_POWER_DESC_REQ:
    256                MT_ZdoPowerDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_3:
   \   0000C1                ; Setup parameters for call to function MT_ZdoPowerDescRequest
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   FB           MOV     R3,A
   \   0000C5   12....       LCALL   `??MT_ZdoPowerDescRequest::?relay`; Banked call to: MT_ZdoPowerDescRequest
    257                break;
   \   0000C8   02....       LJMP    ??MT_ZdoCommandProcessing_24 & 0xFFFF
    258          #endif
    259          
    260          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    261              case MT_ZDO_SIMPLE_DESC_REQ:
    262                MT_ZdoSimpleDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_4:
   \   0000CB                ; Setup parameters for call to function MT_ZdoSimpleDescRequest
   \   0000CB   EE           MOV     A,R6
   \   0000CC   FA           MOV     R2,A
   \   0000CD   EF           MOV     A,R7
   \   0000CE   FB           MOV     R3,A
   \   0000CF   12....       LCALL   `??MT_ZdoSimpleDescRequest::?relay`; Banked call to: MT_ZdoSimpleDescRequest
    263                break;
   \   0000D2   02....       LJMP    ??MT_ZdoCommandProcessing_24 & 0xFFFF
    264          #endif
    265          
    266          #if defined ( ZDO_ACTIVEEP_REQUEST )
    267              case MT_ZDO_ACTIVE_EP_REQ:
    268                MT_ZdoActiveEpRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_5:
   \   0000D5                ; Setup parameters for call to function MT_ZdoActiveEpRequest
   \   0000D5   EE           MOV     A,R6
   \   0000D6   FA           MOV     R2,A
   \   0000D7   EF           MOV     A,R7
   \   0000D8   FB           MOV     R3,A
   \   0000D9   12....       LCALL   `??MT_ZdoActiveEpRequest::?relay`; Banked call to: MT_ZdoActiveEpRequest
    269                break;
   \   0000DC   02....       LJMP    ??MT_ZdoCommandProcessing_24 & 0xFFFF
    270          #endif
    271          
    272          #if defined ( ZDO_MATCH_REQUEST )
    273              case MT_ZDO_MATCH_DESC_REQ:
    274                MT_ZdoMatchDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_6:
   \   0000DF                ; Setup parameters for call to function MT_ZdoMatchDescRequest
   \   0000DF   EE           MOV     A,R6
   \   0000E0   FA           MOV     R2,A
   \   0000E1   EF           MOV     A,R7
   \   0000E2   FB           MOV     R3,A
   \   0000E3   12....       LCALL   `??MT_ZdoMatchDescRequest::?relay`; Banked call to: MT_ZdoMatchDescRequest
    275                break;
   \   0000E6   02....       LJMP    ??MT_ZdoCommandProcessing_24 & 0xFFFF
    276          #endif
    277          
    278          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    279              case MT_ZDO_COMPLEX_DESC_REQ:
    280                MT_ZdoComplexDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_7:
   \   0000E9                ; Setup parameters for call to function MT_ZdoComplexDescRequest
   \   0000E9   EE           MOV     A,R6
   \   0000EA   FA           MOV     R2,A
   \   0000EB   EF           MOV     A,R7
   \   0000EC   FB           MOV     R3,A
   \   0000ED   12....       LCALL   `??MT_ZdoComplexDescRequest::?relay`; Banked call to: MT_ZdoComplexDescRequest
    281                break;
   \   0000F0   02....       LJMP    ??MT_ZdoCommandProcessing_24 & 0xFFFF
    282          #endif
    283          
    284          #if defined ( ZDO_USERDESC_REQUEST )
    285              case MT_ZDO_USER_DESC_REQ:
    286                MT_ZdoUserDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_8:
   \   0000F3                ; Setup parameters for call to function MT_ZdoUserDescRequest
   \   0000F3   EE           MOV     A,R6
   \   0000F4   FA           MOV     R2,A
   \   0000F5   EF           MOV     A,R7
   \   0000F6   FB           MOV     R3,A
   \   0000F7   12....       LCALL   `??MT_ZdoUserDescRequest::?relay`; Banked call to: MT_ZdoUserDescRequest
    287                break;
   \   0000FA   02....       LJMP    ??MT_ZdoCommandProcessing_24 & 0xFFFF
    288          #endif
    289          
    290          #if defined ( ZDO_ENDDEVICE_ANNCE )
    291              case MT_ZDO_END_DEV_ANNCE:
    292                MT_ZdoEndDevAnnce(pBuf);
   \                     ??MT_ZdoCommandProcessing_9:
   \   0000FD                ; Setup parameters for call to function MT_ZdoEndDevAnnce
   \   0000FD   EE           MOV     A,R6
   \   0000FE   FA           MOV     R2,A
   \   0000FF   EF           MOV     A,R7
   \   000100   FB           MOV     R3,A
   \   000101   12....       LCALL   `??MT_ZdoEndDevAnnce::?relay`; Banked call to: MT_ZdoEndDevAnnce
    293                break;
   \   000104   8078         SJMP    ??MT_ZdoCommandProcessing_24
    294          #endif
    295          
    296          #if defined ( ZDO_USERDESCSET_REQUEST )
    297              case MT_ZDO_USER_DESC_SET:
    298                MT_ZdoUserDescSet(pBuf);
   \                     ??MT_ZdoCommandProcessing_10:
   \   000106                ; Setup parameters for call to function MT_ZdoUserDescSet
   \   000106   EE           MOV     A,R6
   \   000107   FA           MOV     R2,A
   \   000108   EF           MOV     A,R7
   \   000109   FB           MOV     R3,A
   \   00010A   12....       LCALL   `??MT_ZdoUserDescSet::?relay`; Banked call to: MT_ZdoUserDescSet
    299                break;
   \   00010D   806F         SJMP    ??MT_ZdoCommandProcessing_24
    300          #endif
    301          
    302          #if defined ( ZDO_SERVERDISC_REQUEST )
    303              case MT_ZDO_SERVICE_DISC_REQ:
    304                MT_ZdoServiceDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_11:
   \   00010F                ; Setup parameters for call to function MT_ZdoServiceDiscRequest
   \   00010F   EE           MOV     A,R6
   \   000110   FA           MOV     R2,A
   \   000111   EF           MOV     A,R7
   \   000112   FB           MOV     R3,A
   \   000113   12....       LCALL   `??MT_ZdoServiceDiscRequest::?relay`; Banked call to: MT_ZdoServiceDiscRequest
    305                break;
   \   000116   8066         SJMP    ??MT_ZdoCommandProcessing_24
    306          #endif
    307          
    308          #if defined ( ZIGBEE_CHILD_AGING )
    309          #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
    310              case MT_ZDO_END_DEVICE_TIMEOUT_REQ:
    311                MT_ZdoEndDeviceTimeoutRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_12:
   \   000118                ; Setup parameters for call to function MT_ZdoEndDeviceTimeoutRequest
   \   000118   EE           MOV     A,R6
   \   000119   FA           MOV     R2,A
   \   00011A   EF           MOV     A,R7
   \   00011B   FB           MOV     R3,A
   \   00011C   12....       LCALL   `??MT_ZdoEndDeviceTimeoutRequest::?relay`; Banked call to: MT_ZdoEndDeviceTimeoutRequest
    312                break;
   \   00011F   805D         SJMP    ??MT_ZdoCommandProcessing_24
    313          #endif
    314          #endif // ZIGBEE_CHILD_AGING
    315          
    316          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    317              case MT_ZDO_END_DEV_BIND_REQ:
    318                MT_ZdoEndDevBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_13:
   \   000121                ; Setup parameters for call to function MT_ZdoEndDevBindRequest
   \   000121   EE           MOV     A,R6
   \   000122   FA           MOV     R2,A
   \   000123   EF           MOV     A,R7
   \   000124   FB           MOV     R3,A
   \   000125   12....       LCALL   `??MT_ZdoEndDevBindRequest::?relay`; Banked call to: MT_ZdoEndDevBindRequest
    319                break;
   \   000128   8054         SJMP    ??MT_ZdoCommandProcessing_24
    320          #endif
    321          
    322          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    323              case MT_ZDO_BIND_REQ:
    324                MT_ZdoBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_14:
   \   00012A                ; Setup parameters for call to function MT_ZdoBindRequest
   \   00012A   EE           MOV     A,R6
   \   00012B   FA           MOV     R2,A
   \   00012C   EF           MOV     A,R7
   \   00012D   FB           MOV     R3,A
   \   00012E   12....       LCALL   `??MT_ZdoBindRequest::?relay`; Banked call to: MT_ZdoBindRequest
    325                break;
   \   000131   804B         SJMP    ??MT_ZdoCommandProcessing_24
    326          #endif
    327          
    328          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    329              case MT_ZDO_UNBIND_REQ:
    330                MT_ZdoUnbindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_15:
   \   000133                ; Setup parameters for call to function MT_ZdoUnbindRequest
   \   000133   EE           MOV     A,R6
   \   000134   FA           MOV     R2,A
   \   000135   EF           MOV     A,R7
   \   000136   FB           MOV     R3,A
   \   000137   12....       LCALL   `??MT_ZdoUnbindRequest::?relay`; Banked call to: MT_ZdoUnbindRequest
    331                break;
   \   00013A   8042         SJMP    ??MT_ZdoCommandProcessing_24
    332          #endif
    333          
    334          #if defined ( MT_SYS_KEY_MANAGEMENT )
    335              case MT_ZDO_SET_LINK_KEY:
    336                MT_ZdoSetLinkKey(pBuf);
    337                break;
    338          
    339              case MT_ZDO_REMOVE_LINK_KEY:
    340                MT_ZdoRemoveLinkKey(pBuf);
    341                break;
    342          
    343              case MT_ZDO_GET_LINK_KEY:
    344                MT_ZdoGetLinkKey(pBuf);
    345                break;
    346          #endif // MT_SYS_KEY_MANAGEMENT
    347          
    348          #if defined ( ZDO_MANUAL_JOIN )
    349              case MT_ZDO_NWK_DISCOVERY_REQ:
    350                MT_ZdoNetworkDiscoveryReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_16:
   \   00013C                ; Setup parameters for call to function MT_ZdoNetworkDiscoveryReq
   \   00013C   EE           MOV     A,R6
   \   00013D   FA           MOV     R2,A
   \   00013E   EF           MOV     A,R7
   \   00013F   FB           MOV     R3,A
   \   000140   12....       LCALL   `??MT_ZdoNetworkDiscoveryReq::?relay`; Banked call to: MT_ZdoNetworkDiscoveryReq
    351                break;
   \   000143   8039         SJMP    ??MT_ZdoCommandProcessing_24
    352          
    353              case MT_ZDO_JOIN_REQ:
    354                MT_ZdoJoinReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_17:
   \   000145                ; Setup parameters for call to function MT_ZdoJoinReq
   \   000145   EE           MOV     A,R6
   \   000146   FA           MOV     R2,A
   \   000147   EF           MOV     A,R7
   \   000148   FB           MOV     R3,A
   \   000149   12....       LCALL   `??MT_ZdoJoinReq::?relay`; Banked call to: MT_ZdoJoinReq
    355                break;
   \   00014C   8030         SJMP    ??MT_ZdoCommandProcessing_24
    356          #endif
    357          
    358          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    359              case MT_ZDO_MGMT_NWKDISC_REQ:
    360                MT_ZdoMgmtNwkDiscRequest(pBuf);
    361                break;
    362          #endif
    363          
    364          #if defined ( ZDO_MGMT_LQI_REQUEST )
    365              case MT_ZDO_MGMT_LQI_REQ:
    366                MT_ZdoMgmtLqiRequest(pBuf);
    367                break;
    368          #endif
    369          
    370          #if defined ( ZDO_MGMT_RTG_REQUEST )
    371              case MT_ZDO_MGMT_RTG_REQ:
    372                MT_ZdoMgmtRtgRequest(pBuf);
    373                break;
    374          #endif
    375          
    376          #if defined ( ZDO_MGMT_BIND_REQUEST )
    377              case MT_ZDO_MGMT_BIND_REQ:
    378                MT_ZdoMgmtBindRequest(pBuf);
    379                break;
    380          #endif
    381          
    382          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    383              case MT_ZDO_MGMT_LEAVE_REQ:
    384                MT_ZdoMgmtLeaveRequest(pBuf);
    385                break;
    386          #endif
    387          
    388          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    389              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    390                MT_ZdoMgmtDirectJoinRequest(pBuf);
    391                break;
    392          #endif
    393          
    394          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    395              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    396                MT_ZdoMgmtPermitJoinRequest(pBuf);
    397                break;
    398          #endif
    399          
    400          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    401              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    402                MT_ZdoMgmtNwkUpdateRequest(pBuf);
    403                break;
    404          #endif
    405          
    406          #if defined ( ZDO_NETWORKSTART_REQUEST )
    407              case MT_ZDO_STARTUP_FROM_APP:
    408                MT_ZdoStartupFromApp(pBuf);
   \                     ??MT_ZdoCommandProcessing_22:
   \   00014E                ; Setup parameters for call to function MT_ZdoStartupFromApp
   \   00014E   EE           MOV     A,R6
   \   00014F   FA           MOV     R2,A
   \   000150   EF           MOV     A,R7
   \   000151   FB           MOV     R3,A
   \   000152   12....       LCALL   `??MT_ZdoStartupFromApp::?relay`; Banked call to: MT_ZdoStartupFromApp
    409                break;
   \   000155   8027         SJMP    ??MT_ZdoCommandProcessing_24
    410          #endif
    411          
    412              case MT_ZDO_SEND_DATA:
    413                MT_ZdoSendData( pBuf );
   \                     ??MT_ZdoCommandProcessing_18:
   \   000157                ; Setup parameters for call to function MT_ZdoSendData
   \   000157   EE           MOV     A,R6
   \   000158   FA           MOV     R2,A
   \   000159   EF           MOV     A,R7
   \   00015A   FB           MOV     R3,A
   \   00015B   12....       LCALL   `??MT_ZdoSendData::?relay`; Banked call to: MT_ZdoSendData
    414                break;
   \   00015E   801E         SJMP    ??MT_ZdoCommandProcessing_24
    415          
    416              case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
    417                MT_ZdoNwkAddrOfInterestReq( pBuf );
   \                     ??MT_ZdoCommandProcessing_19:
   \   000160                ; Setup parameters for call to function MT_ZdoNwkAddrOfInterestReq
   \   000160   EE           MOV     A,R6
   \   000161   FA           MOV     R2,A
   \   000162   EF           MOV     A,R7
   \   000163   FB           MOV     R3,A
   \   000164   12....       LCALL   `??MT_ZdoNwkAddrOfInterestReq::?relay`; Banked call to: MT_ZdoNwkAddrOfInterestReq
    418                break;
   \   000167   8015         SJMP    ??MT_ZdoCommandProcessing_24
    419          
    420              case MT_ZDO_MSG_CB_REGISTER:
    421                MT_ZdoRegisterForZDOMsg(pBuf);
   \                     ??MT_ZdoCommandProcessing_20:
   \   000169                ; Setup parameters for call to function MT_ZdoRegisterForZDOMsg
   \   000169   EE           MOV     A,R6
   \   00016A   FA           MOV     R2,A
   \   00016B   EF           MOV     A,R7
   \   00016C   FB           MOV     R3,A
   \   00016D   12....       LCALL   `??MT_ZdoRegisterForZDOMsg::?relay`; Banked call to: MT_ZdoRegisterForZDOMsg
    422                break;
   \   000170   800C         SJMP    ??MT_ZdoCommandProcessing_24
    423          
    424              case MT_ZDO_MSG_CB_REMOVE:
    425                MT_ZdoRemoveRegisteredCB(pBuf);
   \                     ??MT_ZdoCommandProcessing_21:
   \   000172                ; Setup parameters for call to function MT_ZdoRemoveRegisteredCB
   \   000172   EE           MOV     A,R6
   \   000173   FA           MOV     R2,A
   \   000174   EF           MOV     A,R7
   \   000175   FB           MOV     R3,A
   \   000176   12....       LCALL   `??MT_ZdoRemoveRegisteredCB::?relay`; Banked call to: MT_ZdoRemoveRegisteredCB
    426                break;
   \   000179   8003         SJMP    ??MT_ZdoCommandProcessing_24
    427          
    428          #if defined ( MT_ZDO_EXTENSIONS )
    429              case MT_ZDO_EXT_UPDATE_NWK_KEY:
    430                MT_ZdoSecUpdateNwkKey( pBuf );
    431                break;
    432          
    433              case MT_ZDO_EXT_SWITCH_NWK_KEY:
    434                MT_ZdoSecSwitchNwkKey( pBuf );
    435                break;
    436          
    437              case MT_ZDO_SEC_ADD_LINK_KEY:
    438                MT_ZdoSecAddLinkKey( pBuf );
    439                break;
    440          
    441              case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
    442                MT_ZdoSecEntryLookupExt( pBuf );
    443                break;
    444          
    445              case MT_ZDO_SEC_DEVICE_REMOVE:
    446                 MT_ZdoSecDeviceRemove( pBuf );
    447                 break;
    448          
    449              case MT_ZDO_EXT_ROUTE_DISC:
    450                 MT_ZdoExtRouteDisc( pBuf );
    451                 break;
    452          
    453              case MT_ZDO_EXT_ROUTE_CHECK:
    454                 MT_ZdoExtRouteCheck( pBuf );
    455                 break;
    456          
    457              case MT_ZDO_EXT_REMOVE_GROUP:
    458                MT_ZdoExtRemoveGroup( pBuf );
    459                break;
    460          
    461              case MT_ZDO_EXT_REMOVE_ALL_GROUP:
    462                MT_ZdoExtRemoveAllGroup( pBuf );
    463                break;
    464          
    465              case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
    466                MT_ZdoExtFindAllGroupsEndpoint( pBuf );
    467                break;
    468          
    469              case MT_ZDO_EXT_FIND_GROUP:
    470                MT_ZdoExtFindGroup( pBuf );
    471                break;
    472          
    473              case MT_ZDO_EXT_ADD_GROUP:
    474                MT_ZdoExtAddGroup( pBuf );
    475                break;
    476          
    477              case MT_ZDO_EXT_COUNT_ALL_GROUPS:
    478                MT_ZdoExtCountAllGroups( pBuf );
    479                break;
    480          
    481              case MT_ZDO_EXT_RX_IDLE:
    482                MT_ZdoExtRxIdle( pBuf );
    483                break;
    484                
    485              case MT_ZDO_EXT_NWK_INFO:
    486                MT_ZdoExtNwkInfo( pBuf );
    487                break;
    488                
    489              case MT_ZDO_EXT_SEC_APS_REMOVE_REQ:
    490                MT_ZdoExtSecApsRemoveReq( pBuf );
    491                break;
    492                
    493              case MT_ZDO_FORCE_CONCENTRATOR_CHANGE:
    494                ZDApp_ForceConcentratorChange();
    495                break;
    496                
    497              case MT_ZDO_EXT_SET_PARAMS:
    498                MT_ZdoExtSetParams( pBuf );
    499                break;
    500          #endif  // MT_ZDO_EXTENSIONS
    501          
    502              default:
    503                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_ZdoCommandProcessing_23:
   \   00017B   75..02       MOV     ?V0,#0x2
    504                break;
    505            }
    506          
    507            return status;
   \                     ??MT_ZdoCommandProcessing_24:
   \   00017E   A9..         MOV     R1,?V0
   \   000180   7F01         MOV     R7,#0x1
   \   000182   02....       LJMP    ?BANKED_LEAVE_XDATA
    508          }
    509          
    510          /***************************************************************************************************
    511           * @fn      MT_ZdoNwkAddrReq
    512           *
    513           * @brief   Handle a nwk address request.
    514           *
    515           * @param   pData  - MT message data
    516           *
    517           * @return  void
    518           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    519          void MT_ZdoNWKAddressRequest(uint8 *pBuf)
   \                     MT_ZdoNWKAddressRequest:
    520          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    521            uint8 cmdId;
    522            uint8 retValue;
    523            uint8 reqType;
    524            uint8 startIndex;
    525            uint8 *pExtAddr;
    526          
    527            /* parse header */
    528            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V4,A
    529            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoNWKAddressRequest_0
   \   00001D   0F           INC     R7
    530          
    531            /* parse parameters */
    532            pExtAddr = pBuf;
   \                     ??MT_ZdoNWKAddressRequest_0:
   \   00001E   8E..         MOV     ?V2,R6
   \   000020   8F..         MOV     ?V3,R7
    533            pBuf += Z_EXTADDR_LEN;
   \   000022   EE           MOV     A,R6
   \   000023   2408         ADD     A,#0x8
   \   000025   FE           MOV     R6,A
   \   000026   5001         JNC     ??MT_ZdoNWKAddressRequest_1
   \   000028   0F           INC     R7
    534          
    535            /* Request type */
    536            reqType = *pBuf++;
   \                     ??MT_ZdoNWKAddressRequest_1:
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0,A
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   A3           INC     DPTR
   \   000035   AE82         MOV     R6,DPL
   \   000037   AF83         MOV     R7,DPH
    537          
    538            /* Start index */
    539            startIndex = *pBuf;
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V1,A
    540          
    541            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
   \   000040                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000040   7D00         MOV     R5,#0x0
   \   000042   AC..         MOV     R4,?V1
   \   000044   A9..         MOV     R1,?V0
   \   000046   AA..         MOV     R2,?V2
   \   000048   AB..         MOV     R3,?V3
   \   00004A   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   00004D   E9           MOV     A,R1
   \   00004E   C0E0         PUSH    A
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   D0E0         POP     A
   \   000058   F0           MOVX    @DPTR,A
    542          
    543            /* Build and send back the response */
    544            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   000059                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000059   AC..         MOV     R4,?XSP + 0
   \   00005B   AD..         MOV     R5,?XSP + 1
   \   00005D   7B01         MOV     R3,#0x1
   \   00005F   AA..         MOV     R2,?V4
   \   000061   7965         MOV     R1,#0x65
   \   000063   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    545            
    546          #if defined ( MT_ZDO_EXTENSIONS )
    547            {
    548              // Force a response message if the ext address matches a child of this device
    549              associated_devices_t *pAssoc;
    550              uint8 buf[21];
    551              uint8 *pBuf = buf;
    552              
    553              if ( (ZSTACK_ROUTER_BUILD)
    554                && (((pAssoc = AssocGetWithExt( pExtAddr )) != NULL)
    555                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    556              {
    557                uint16 nwkAddr = NLME_GetShortAddr();
    558                
    559                *pBuf++ = LO_UINT16(nwkAddr);
    560                *pBuf++ = HI_UINT16(nwkAddr);
    561                *pBuf++ = 0;
    562                *pBuf++ = LO_UINT16(NWK_addr_rsp);
    563                *pBuf++ = HI_UINT16(NWK_addr_rsp);
    564                *pBuf++ = 0;
    565                *pBuf++ = 0;
    566                *pBuf++ = LO_UINT16(nwkAddr);
    567                *pBuf++ = HI_UINT16(nwkAddr);
    568              
    569                *pBuf++ = ZSuccess;
    570          
    571                pBuf = osal_cpyExtAddr( pBuf, pExtAddr );
    572          
    573                *pBuf++ = LO_UINT16( pAssoc->shortAddr );
    574                *pBuf++ = HI_UINT16( pAssoc->shortAddr );
    575                *pBuf = 0;
    576          
    577                MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), 
    578                                            MT_ZDO_MSG_CB_INCOMING, 21, buf );
    579              }
    580            }
    581          #endif  
    582          }
   \   000066   7401         MOV     A,#0x1
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006B   7F05         MOV     R7,#0x5
   \   00006D   02....       LJMP    ?BANKED_LEAVE_XDATA
    583          
    584          /***************************************************************************************************
    585           * @fn      MT_ZdoIEEEAddrRequest
    586           *
    587           * @brief   Handle a IEEE address request.
    588           *
    589           * @param   pData  - MT message data
    590           *
    591           * @return  void
    592           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    593          void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
   \                     MT_ZdoIEEEAddrRequest:
    594          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    595            uint8 cmdId;
    596            uint8 retValue;
    597            uint16 shortAddr;
    598            uint8 reqType;
    599            uint8 startIndex;
    600          
    601            /* parse header */
    602            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V4,A
    603            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoIEEEAddrRequest_0
   \   00001D   0F           INC     R7
    604          
    605            /* Dev address */
    606            shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_ZdoIEEEAddrRequest_0:
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7B00         MOV     R3,#0x0
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   E4           CLR     A
   \   000030   C8           XCH     A,R0
   \   000031   F9           MOV     R1,A
   \   000032   EA           MOV     A,R2
   \   000033   28           ADD     A,R0
   \   000034   F8           MOV     R0,A
   \   000035   EB           MOV     A,R3
   \   000036   39           ADDC    A,R1
   \   000037   F9           MOV     R1,A
   \   000038   88..         MOV     ?V2,R0
   \   00003A   89..         MOV     ?V3,R1
    607            pBuf += 2;
   \   00003C   EE           MOV     A,R6
   \   00003D   2402         ADD     A,#0x2
   \   00003F   FE           MOV     R6,A
   \   000040   5001         JNC     ??MT_ZdoIEEEAddrRequest_1
   \   000042   0F           INC     R7
    608          
    609            /* request type */
    610            reqType = *pBuf++;
   \                     ??MT_ZdoIEEEAddrRequest_1:
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V0,A
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   A3           INC     DPTR
   \   00004F   AE82         MOV     R6,DPL
   \   000051   AF83         MOV     R7,DPH
    611          
    612            /* start index */
    613            startIndex = *pBuf;
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F5..         MOV     ?V1,A
    614          
    615            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
   \   00005A                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   00005A   7D00         MOV     R5,#0x0
   \   00005C   AC..         MOV     R4,?V1
   \   00005E   A9..         MOV     R1,?V0
   \   000060   AA..         MOV     R2,?V2
   \   000062   AB..         MOV     R3,?V3
   \   000064   12....       LCALL   `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   000067   E9           MOV     A,R1
   \   000068   C0E0         PUSH    A
   \   00006A   85..82       MOV     DPL,?XSP + 0
   \   00006D   85..83       MOV     DPH,?XSP + 1
   \   000070   D0E0         POP     A
   \   000072   F0           MOVX    @DPTR,A
    616          
    617            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   000073                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000073   AC..         MOV     R4,?XSP + 0
   \   000075   AD..         MOV     R5,?XSP + 1
   \   000077   7B01         MOV     R3,#0x1
   \   000079   AA..         MOV     R2,?V4
   \   00007B   7965         MOV     R1,#0x65
   \   00007D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    618          }
   \   000080   7401         MOV     A,#0x1
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
   \   000085   7F05         MOV     R7,#0x5
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
    619          
    620          /***************************************************************************************************
    621           * @fn      MT_ZdoNodeDescRequest
    622           *
    623           * @brief   Handle a Node Descriptor request.
    624           *
    625           * @param   pData  - MT message data
    626           *
    627           * @return  void
    628           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    629          void MT_ZdoNodeDescRequest (uint8 *pBuf)
   \                     MT_ZdoNodeDescRequest:
    630          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    631            uint8 cmdId;
    632            uint8 retValue;
    633            zAddrType_t destAddr;
    634            uint16 shortAddr;
    635          
    636            /* parse header */
    637            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V2,A
    638            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoNodeDescRequest_0
   \   00001D   0F           INC     R7
    639          
    640            /* Destination address */
    641            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoNodeDescRequest_0:
   \   00001E   7409         MOV     A,#0x9
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7402         MOV     A,#0x2
   \   000025   F0           MOVX    @DPTR,A
    642            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   7401         MOV     A,#0x1
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    643            pBuf += 2;
   \   00004A   EE           MOV     A,R6
   \   00004B   2402         ADD     A,#0x2
   \   00004D   FE           MOV     R6,A
   \   00004E   5001         JNC     ??MT_ZdoNodeDescRequest_1
   \   000050   0F           INC     R7
    644          
    645            /* Network address of interest */
    646            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoNodeDescRequest_1:
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FA           MOV     R2,A
   \   000057   7B00         MOV     R3,#0x0
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   7900         MOV     R1,#0x0
   \   000062   E4           CLR     A
   \   000063   C8           XCH     A,R0
   \   000064   F9           MOV     R1,A
   \   000065   EA           MOV     A,R2
   \   000066   28           ADD     A,R0
   \   000067   F8           MOV     R0,A
   \   000068   EB           MOV     A,R3
   \   000069   39           ADDC    A,R1
   \   00006A   F9           MOV     R1,A
   \   00006B   88..         MOV     ?V0,R0
   \   00006D   89..         MOV     ?V1,R1
    647            pBuf += 2;
   \   00006F   EE           MOV     A,R6
   \   000070   2402         ADD     A,#0x2
   \   000072   FE           MOV     R6,A
   \   000073   5001         JNC     ??MT_ZdoNodeDescRequest_2
   \   000075   0F           INC     R7
    648          
    649            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoNodeDescRequest_2:
   \   000076                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000076   75..00       MOV     ?V3,#0x0
   \   000079   78..         MOV     R0,#?V3
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   7902         MOV     R1,#0x2
   \   000080   AC..         MOV     R4,?V0
   \   000082   AD..         MOV     R5,?V1
   \   000084   7402         MOV     A,#0x2
   \   000086   12....       LCALL   ?XSTACK_DISP101_8
   \   000089   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   00008C   7401         MOV     A,#0x1
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000091   E9           MOV     A,R1
   \   000092   C0E0         PUSH    A
   \   000094   85..82       MOV     DPL,?XSP + 0
   \   000097   85..83       MOV     DPH,?XSP + 1
   \   00009A   D0E0         POP     A
   \   00009C   F0           MOVX    @DPTR,A
    650          
    651            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   00009D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00009D   AC..         MOV     R4,?XSP + 0
   \   00009F   AD..         MOV     R5,?XSP + 1
   \   0000A1   7B01         MOV     R3,#0x1
   \   0000A3   AA..         MOV     R2,?V2
   \   0000A5   7965         MOV     R1,#0x65
   \   0000A7   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    652          }
   \   0000AA   740A         MOV     A,#0xa
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AF   7F04         MOV     R7,#0x4
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    653          
    654          /***************************************************************************************************
    655           * @fn      MT_ZdoPowerDescRequest
    656           *
    657           * @brief   Handle a Power Descriptor request.
    658           *
    659           * @param   pData  - MT message data
    660           *
    661           * @return  void
    662           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    663          void MT_ZdoPowerDescRequest(uint8 *pBuf)
   \                     MT_ZdoPowerDescRequest:
    664          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    665            uint8 cmdId;
    666            uint8 retValue;
    667            zAddrType_t destAddr;
    668            uint16 shortAddr;
    669          
    670            /* parse header */
    671            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V2,A
    672            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoPowerDescRequest_0
   \   00001D   0F           INC     R7
    673          
    674            /* Dev address */
    675            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoPowerDescRequest_0:
   \   00001E   7409         MOV     A,#0x9
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7402         MOV     A,#0x2
   \   000025   F0           MOVX    @DPTR,A
    676            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   7401         MOV     A,#0x1
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    677            pBuf += 2;
   \   00004A   EE           MOV     A,R6
   \   00004B   2402         ADD     A,#0x2
   \   00004D   FE           MOV     R6,A
   \   00004E   5001         JNC     ??MT_ZdoPowerDescRequest_1
   \   000050   0F           INC     R7
    678          
    679            /* Network address of interest */
    680            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoPowerDescRequest_1:
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FA           MOV     R2,A
   \   000057   7B00         MOV     R3,#0x0
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   7900         MOV     R1,#0x0
   \   000062   E4           CLR     A
   \   000063   C8           XCH     A,R0
   \   000064   F9           MOV     R1,A
   \   000065   EA           MOV     A,R2
   \   000066   28           ADD     A,R0
   \   000067   F8           MOV     R0,A
   \   000068   EB           MOV     A,R3
   \   000069   39           ADDC    A,R1
   \   00006A   F9           MOV     R1,A
   \   00006B   88..         MOV     ?V0,R0
   \   00006D   89..         MOV     ?V1,R1
    681            pBuf += 2;
   \   00006F   EE           MOV     A,R6
   \   000070   2402         ADD     A,#0x2
   \   000072   FE           MOV     R6,A
   \   000073   5001         JNC     ??MT_ZdoPowerDescRequest_2
   \   000075   0F           INC     R7
    682          
    683            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoPowerDescRequest_2:
   \   000076                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000076   75..00       MOV     ?V3,#0x0
   \   000079   78..         MOV     R0,#?V3
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   7903         MOV     R1,#0x3
   \   000080   AC..         MOV     R4,?V0
   \   000082   AD..         MOV     R5,?V1
   \   000084   7402         MOV     A,#0x2
   \   000086   12....       LCALL   ?XSTACK_DISP101_8
   \   000089   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   00008C   7401         MOV     A,#0x1
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000091   E9           MOV     A,R1
   \   000092   C0E0         PUSH    A
   \   000094   85..82       MOV     DPL,?XSP + 0
   \   000097   85..83       MOV     DPH,?XSP + 1
   \   00009A   D0E0         POP     A
   \   00009C   F0           MOVX    @DPTR,A
    684          
    685            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   00009D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00009D   AC..         MOV     R4,?XSP + 0
   \   00009F   AD..         MOV     R5,?XSP + 1
   \   0000A1   7B01         MOV     R3,#0x1
   \   0000A3   AA..         MOV     R2,?V2
   \   0000A5   7965         MOV     R1,#0x65
   \   0000A7   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    686          }
   \   0000AA   740A         MOV     A,#0xa
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AF   7F04         MOV     R7,#0x4
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    687          
    688          /***************************************************************************************************
    689           * @fn      MT_ZdoSimpleDescRequest
    690           *
    691           * @brief   Handle a Simple Descriptor request.
    692           *
    693           * @param   pBuf  - MT message data
    694           *
    695           * @return  void
    696           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    697          void MT_ZdoSimpleDescRequest(uint8 *pBuf)
   \                     MT_ZdoSimpleDescRequest:
    698          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    699            uint8 cmdId;
    700            uint8 retValue;
    701            uint8 epInt;
    702            zAddrType_t destAddr;
    703            uint16 shortAddr;
    704          
    705            /* parse header */
    706            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V3,A
    707            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoSimpleDescRequest_0
   \   00001D   0F           INC     R7
    708          
    709            /* Dev address */
    710            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoSimpleDescRequest_0:
   \   00001E   7409         MOV     A,#0x9
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7402         MOV     A,#0x2
   \   000025   F0           MOVX    @DPTR,A
    711            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   7401         MOV     A,#0x1
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    712            pBuf += 2;
   \   00004A   EE           MOV     A,R6
   \   00004B   2402         ADD     A,#0x2
   \   00004D   FE           MOV     R6,A
   \   00004E   5001         JNC     ??MT_ZdoSimpleDescRequest_1
   \   000050   0F           INC     R7
    713          
    714            /* Network address of interest */
    715            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoSimpleDescRequest_1:
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FA           MOV     R2,A
   \   000057   7B00         MOV     R3,#0x0
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   7900         MOV     R1,#0x0
   \   000062   E4           CLR     A
   \   000063   C8           XCH     A,R0
   \   000064   F9           MOV     R1,A
   \   000065   EA           MOV     A,R2
   \   000066   28           ADD     A,R0
   \   000067   F8           MOV     R0,A
   \   000068   EB           MOV     A,R3
   \   000069   39           ADDC    A,R1
   \   00006A   F9           MOV     R1,A
   \   00006B   88..         MOV     ?V0,R0
   \   00006D   89..         MOV     ?V1,R1
    716            pBuf += 2;
   \   00006F   EE           MOV     A,R6
   \   000070   2402         ADD     A,#0x2
   \   000072   FE           MOV     R6,A
   \   000073   5001         JNC     ??MT_ZdoSimpleDescRequest_2
   \   000075   0F           INC     R7
    717          
    718            /* endpoint/interface */
    719            epInt = *pBuf++;
   \                     ??MT_ZdoSimpleDescRequest_2:
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F5..         MOV     ?V2,A
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   A3           INC     DPTR
   \   000082   AE82         MOV     R6,DPL
   \   000084   AF83         MOV     R7,DPH
    720          
    721            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
   \   000086                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000086   75..00       MOV     ?V4,#0x0
   \   000089   78..         MOV     R0,#?V4
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008E   A9..         MOV     R1,?V2
   \   000090   AC..         MOV     R4,?V0
   \   000092   AD..         MOV     R5,?V1
   \   000094   7402         MOV     A,#0x2
   \   000096   12....       LCALL   ?XSTACK_DISP101_8
   \   000099   12....       LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   00009C   7401         MOV     A,#0x1
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A1   E9           MOV     A,R1
   \   0000A2   C0E0         PUSH    A
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   D0E0         POP     A
   \   0000AC   F0           MOVX    @DPTR,A
    722          
    723            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   0000AD                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000AD   AC..         MOV     R4,?XSP + 0
   \   0000AF   AD..         MOV     R5,?XSP + 1
   \   0000B1   7B01         MOV     R3,#0x1
   \   0000B3   AA..         MOV     R2,?V3
   \   0000B5   7965         MOV     R1,#0x65
   \   0000B7   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    724          }
   \   0000BA   740A         MOV     A,#0xa
   \   0000BC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BF   7F05         MOV     R7,#0x5
   \   0000C1   02....       LJMP    ?BANKED_LEAVE_XDATA
    725          
    726          /***************************************************************************************************
    727           * @fn      MT_ZdoActiveEpRequest
    728           *
    729           * @brief   Handle a Active EP request.
    730           *
    731           * @param   pBuf  - MT message data
    732           *
    733           * @return  void
    734           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    735          void MT_ZdoActiveEpRequest(uint8 *pBuf)
   \                     MT_ZdoActiveEpRequest:
    736          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    737            uint8 cmdId;
    738            uint8 retValue;
    739            zAddrType_t destAddr;
    740            uint16 shortAddr;
    741          
    742            /* parse header */
    743            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V2,A
    744            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoActiveEpRequest_0
   \   00001D   0F           INC     R7
    745          
    746            /* Dev address */
    747            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoActiveEpRequest_0:
   \   00001E   7409         MOV     A,#0x9
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7402         MOV     A,#0x2
   \   000025   F0           MOVX    @DPTR,A
    748            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   7401         MOV     A,#0x1
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    749            pBuf += 2;
   \   00004A   EE           MOV     A,R6
   \   00004B   2402         ADD     A,#0x2
   \   00004D   FE           MOV     R6,A
   \   00004E   5001         JNC     ??MT_ZdoActiveEpRequest_1
   \   000050   0F           INC     R7
    750          
    751            /* Network address of interest */
    752            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoActiveEpRequest_1:
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FA           MOV     R2,A
   \   000057   7B00         MOV     R3,#0x0
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   7900         MOV     R1,#0x0
   \   000062   E4           CLR     A
   \   000063   C8           XCH     A,R0
   \   000064   F9           MOV     R1,A
   \   000065   EA           MOV     A,R2
   \   000066   28           ADD     A,R0
   \   000067   F8           MOV     R0,A
   \   000068   EB           MOV     A,R3
   \   000069   39           ADDC    A,R1
   \   00006A   F9           MOV     R1,A
   \   00006B   88..         MOV     ?V0,R0
   \   00006D   89..         MOV     ?V1,R1
    753            pBuf += 2;
   \   00006F   EE           MOV     A,R6
   \   000070   2402         ADD     A,#0x2
   \   000072   FE           MOV     R6,A
   \   000073   5001         JNC     ??MT_ZdoActiveEpRequest_2
   \   000075   0F           INC     R7
    754          
    755            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoActiveEpRequest_2:
   \   000076                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000076   75..00       MOV     ?V3,#0x0
   \   000079   78..         MOV     R0,#?V3
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   7905         MOV     R1,#0x5
   \   000080   AC..         MOV     R4,?V0
   \   000082   AD..         MOV     R5,?V1
   \   000084   7402         MOV     A,#0x2
   \   000086   12....       LCALL   ?XSTACK_DISP101_8
   \   000089   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   00008C   7401         MOV     A,#0x1
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000091   E9           MOV     A,R1
   \   000092   C0E0         PUSH    A
   \   000094   85..82       MOV     DPL,?XSP + 0
   \   000097   85..83       MOV     DPH,?XSP + 1
   \   00009A   D0E0         POP     A
   \   00009C   F0           MOVX    @DPTR,A
    756          
    757            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   00009D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00009D   AC..         MOV     R4,?XSP + 0
   \   00009F   AD..         MOV     R5,?XSP + 1
   \   0000A1   7B01         MOV     R3,#0x1
   \   0000A3   AA..         MOV     R2,?V2
   \   0000A5   7965         MOV     R1,#0x65
   \   0000A7   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    758          }
   \   0000AA   740A         MOV     A,#0xa
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AF   7F04         MOV     R7,#0x4
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    759          
    760          /***************************************************************************************************
    761           * @fn      MT_ZdoMatchDescRequest
    762           *
    763           * @brief   Handle a Match Descriptor request.
    764           *
    765           * @param   pBuf  - MT message data
    766           *
    767           * @return  void
    768           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    769          void MT_ZdoMatchDescRequest(uint8 *pBuf)
   \                     MT_ZdoMatchDescRequest:
    770          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 74
   \   000005   74B6         MOV     A,#-0x4a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    771            uint8 cmdId;
    772            uint8 retValue = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    773            uint8 i, numInClusters, numOutClusters;
    774            uint16 profileId;
    775            zAddrType_t destAddr;
    776            uint16 shortAddr;
    777            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    778          
    779            /* parse header */
    780            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V5,A
    781            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000020   EE           MOV     A,R6
   \   000021   2403         ADD     A,#0x3
   \   000023   FE           MOV     R6,A
   \   000024   5001         JNC     ??MT_ZdoMatchDescRequest_0
   \   000026   0F           INC     R7
    782          
    783            /* Dev address */
    784            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMatchDescRequest_0:
   \   000027   7409         MOV     A,#0x9
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   7402         MOV     A,#0x2
   \   00002E   F0           MOVX    @DPTR,A
    785            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FA           MOV     R2,A
   \   000035   7B00         MOV     R3,#0x0
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   7900         MOV     R1,#0x0
   \   000040   E4           CLR     A
   \   000041   C8           XCH     A,R0
   \   000042   F9           MOV     R1,A
   \   000043   EA           MOV     A,R2
   \   000044   28           ADD     A,R0
   \   000045   F8           MOV     R0,A
   \   000046   EB           MOV     A,R3
   \   000047   39           ADDC    A,R1
   \   000048   F9           MOV     R1,A
   \   000049   7401         MOV     A,#0x1
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E8           MOV     A,R0
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E9           MOV     A,R1
   \   000052   F0           MOVX    @DPTR,A
    786            pBuf += 2;
   \   000053   EE           MOV     A,R6
   \   000054   2402         ADD     A,#0x2
   \   000056   FE           MOV     R6,A
   \   000057   5001         JNC     ??MT_ZdoMatchDescRequest_1
   \   000059   0F           INC     R7
    787          
    788            /* Network address of interest */
    789            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMatchDescRequest_1:
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FA           MOV     R2,A
   \   000060   7B00         MOV     R3,#0x0
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F8           MOV     R0,A
   \   000069   7900         MOV     R1,#0x0
   \   00006B   E4           CLR     A
   \   00006C   C8           XCH     A,R0
   \   00006D   F9           MOV     R1,A
   \   00006E   EA           MOV     A,R2
   \   00006F   28           ADD     A,R0
   \   000070   F8           MOV     R0,A
   \   000071   EB           MOV     A,R3
   \   000072   39           ADDC    A,R1
   \   000073   F9           MOV     R1,A
   \   000074   88..         MOV     ?V0,R0
   \   000076   89..         MOV     ?V1,R1
    790            pBuf += 2;
   \   000078   EE           MOV     A,R6
   \   000079   2402         ADD     A,#0x2
   \   00007B   FE           MOV     R6,A
   \   00007C   5001         JNC     ??MT_ZdoMatchDescRequest_2
   \   00007E   0F           INC     R7
    791          
    792            /* Profile ID */
    793            profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMatchDescRequest_2:
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   E0           MOVX    A,@DPTR
   \   000084   FA           MOV     R2,A
   \   000085   7B00         MOV     R3,#0x0
   \   000087   8E82         MOV     DPL,R6
   \   000089   8F83         MOV     DPH,R7
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F8           MOV     R0,A
   \   00008E   7900         MOV     R1,#0x0
   \   000090   E4           CLR     A
   \   000091   C8           XCH     A,R0
   \   000092   F9           MOV     R1,A
   \   000093   EA           MOV     A,R2
   \   000094   28           ADD     A,R0
   \   000095   F8           MOV     R0,A
   \   000096   EB           MOV     A,R3
   \   000097   39           ADDC    A,R1
   \   000098   F9           MOV     R1,A
   \   000099   88..         MOV     ?V6,R0
   \   00009B   89..         MOV     ?V7,R1
    794            pBuf += 2;
   \   00009D   EE           MOV     A,R6
   \   00009E   2402         ADD     A,#0x2
   \   0000A0   FE           MOV     R6,A
   \   0000A1   5001         JNC     ??MT_ZdoMatchDescRequest_3
   \   0000A3   0F           INC     R7
    795          
    796            /* NumInClusters */
    797            numInClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_3:
   \   0000A4   8E82         MOV     DPL,R6
   \   0000A6   8F83         MOV     DPH,R7
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F5..         MOV     ?V3,A
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   A3           INC     DPTR
   \   0000B0   AE82         MOV     R6,DPL
   \   0000B2   AF83         MOV     R7,DPH
    798            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   0000B4   E5..         MOV     A,?V3
   \   0000B6   C3           CLR     C
   \   0000B7   9411         SUBB    A,#0x11
   \   0000B9   505C         JNC     ??MT_ZdoMatchDescRequest_4
    799            {
    800              /* IN clusters */
    801              for ( i = 0; i < numInClusters; i++ )
   \   0000BB   75..00       MOV     ?V2,#0x0
   \                     ??MT_ZdoMatchDescRequest_5:
   \   0000BE   E5..         MOV     A,?V2
   \   0000C0   C3           CLR     C
   \   0000C1   95..         SUBB    A,?V3
   \   0000C3   505B         JNC     ??MT_ZdoMatchDescRequest_6
    802              {
    803                inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   FA           MOV     R2,A
   \   0000CB   7B00         MOV     R3,#0x0
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F8           MOV     R0,A
   \   0000D4   7900         MOV     R1,#0x0
   \   0000D6   E4           CLR     A
   \   0000D7   C8           XCH     A,R0
   \   0000D8   F9           MOV     R1,A
   \   0000D9   EA           MOV     A,R2
   \   0000DA   28           ADD     A,R0
   \   0000DB   FA           MOV     R2,A
   \   0000DC   EB           MOV     A,R3
   \   0000DD   39           ADDC    A,R1
   \   0000DE   FB           MOV     R3,A
   \   0000DF   A8..         MOV     R0,?V2
   \   0000E1   7900         MOV     R1,#0x0
   \   0000E3   E8           MOV     A,R0
   \   0000E4   75F002       MOV     B,#0x2
   \   0000E7   A4           MUL     AB
   \   0000E8   C8           XCH     A,R0
   \   0000E9   ACF0         MOV     R4,B
   \   0000EB   75F000       MOV     B,#0x0
   \   0000EE   A4           MUL     AB
   \   0000EF   2C           ADD     A,R4
   \   0000F0   FC           MOV     R4,A
   \   0000F1   75F002       MOV     B,#0x2
   \   0000F4   E9           MOV     A,R1
   \   0000F5   A4           MUL     AB
   \   0000F6   2C           ADD     A,R4
   \   0000F7   F9           MOV     R1,A
   \   0000F8   742A         MOV     A,#0x2a
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   E582         MOV     A,DPL
   \   0000FF   28           ADD     A,R0
   \   000100   F582         MOV     DPL,A
   \   000102   E583         MOV     A,DPH
   \   000104   39           ADDC    A,R1
   \   000105   F583         MOV     DPH,A
   \   000107   EA           MOV     A,R2
   \   000108   F0           MOVX    @DPTR,A
   \   000109   A3           INC     DPTR
   \   00010A   EB           MOV     A,R3
   \   00010B   F0           MOVX    @DPTR,A
    804                pBuf += 2;
   \   00010C   EE           MOV     A,R6
   \   00010D   2402         ADD     A,#0x2
   \   00010F   FE           MOV     R6,A
   \   000110   5001         JNC     ??MT_ZdoMatchDescRequest_7
   \   000112   0F           INC     R7
    805              }
   \                     ??MT_ZdoMatchDescRequest_7:
   \   000113   05..         INC     ?V2
   \   000115   80A7         SJMP    ??MT_ZdoMatchDescRequest_5
    806            }
    807            else
    808            {
    809              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_4:
   \   000117   85..82       MOV     DPL,?XSP + 0
   \   00011A   85..83       MOV     DPH,?XSP + 1
   \   00011D   7480         MOV     A,#-0x80
   \   00011F   F0           MOVX    @DPTR,A
    810            }
    811          
    812            /* NumOutClusters */
    813            numOutClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_6:
   \   000120   8E82         MOV     DPL,R6
   \   000122   8F83         MOV     DPH,R7
   \   000124   E0           MOVX    A,@DPTR
   \   000125   F5..         MOV     ?V4,A
   \   000127   8E82         MOV     DPL,R6
   \   000129   8F83         MOV     DPH,R7
   \   00012B   A3           INC     DPTR
   \   00012C   AE82         MOV     R6,DPL
   \   00012E   AF83         MOV     R7,DPH
    814            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   000130   E5..         MOV     A,?V4
   \   000132   C3           CLR     C
   \   000133   9411         SUBB    A,#0x11
   \   000135   505C         JNC     ??MT_ZdoMatchDescRequest_8
    815            {
    816              /* OUT Clusters */
    817              for ( i = 0; i < numOutClusters; i++ )
   \   000137   75..00       MOV     ?V2,#0x0
   \                     ??MT_ZdoMatchDescRequest_9:
   \   00013A   E5..         MOV     A,?V2
   \   00013C   C3           CLR     C
   \   00013D   95..         SUBB    A,?V4
   \   00013F   505B         JNC     ??MT_ZdoMatchDescRequest_10
    818              {
    819                outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000141   8E82         MOV     DPL,R6
   \   000143   8F83         MOV     DPH,R7
   \   000145   E0           MOVX    A,@DPTR
   \   000146   FA           MOV     R2,A
   \   000147   7B00         MOV     R3,#0x0
   \   000149   8E82         MOV     DPL,R6
   \   00014B   8F83         MOV     DPH,R7
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F8           MOV     R0,A
   \   000150   7900         MOV     R1,#0x0
   \   000152   E4           CLR     A
   \   000153   C8           XCH     A,R0
   \   000154   F9           MOV     R1,A
   \   000155   EA           MOV     A,R2
   \   000156   28           ADD     A,R0
   \   000157   FA           MOV     R2,A
   \   000158   EB           MOV     A,R3
   \   000159   39           ADDC    A,R1
   \   00015A   FB           MOV     R3,A
   \   00015B   A8..         MOV     R0,?V2
   \   00015D   7900         MOV     R1,#0x0
   \   00015F   E8           MOV     A,R0
   \   000160   75F002       MOV     B,#0x2
   \   000163   A4           MUL     AB
   \   000164   C8           XCH     A,R0
   \   000165   ACF0         MOV     R4,B
   \   000167   75F000       MOV     B,#0x0
   \   00016A   A4           MUL     AB
   \   00016B   2C           ADD     A,R4
   \   00016C   FC           MOV     R4,A
   \   00016D   75F002       MOV     B,#0x2
   \   000170   E9           MOV     A,R1
   \   000171   A4           MUL     AB
   \   000172   2C           ADD     A,R4
   \   000173   F9           MOV     R1,A
   \   000174   740A         MOV     A,#0xa
   \   000176   12....       LCALL   ?XSTACK_DISP0_8
   \   000179   E582         MOV     A,DPL
   \   00017B   28           ADD     A,R0
   \   00017C   F582         MOV     DPL,A
   \   00017E   E583         MOV     A,DPH
   \   000180   39           ADDC    A,R1
   \   000181   F583         MOV     DPH,A
   \   000183   EA           MOV     A,R2
   \   000184   F0           MOVX    @DPTR,A
   \   000185   A3           INC     DPTR
   \   000186   EB           MOV     A,R3
   \   000187   F0           MOVX    @DPTR,A
    820                pBuf += 2;
   \   000188   EE           MOV     A,R6
   \   000189   2402         ADD     A,#0x2
   \   00018B   FE           MOV     R6,A
   \   00018C   5001         JNC     ??MT_ZdoMatchDescRequest_11
   \   00018E   0F           INC     R7
    821              }
   \                     ??MT_ZdoMatchDescRequest_11:
   \   00018F   05..         INC     ?V2
   \   000191   80A7         SJMP    ??MT_ZdoMatchDescRequest_9
    822            }
    823            else
    824            {
    825              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_8:
   \   000193   85..82       MOV     DPL,?XSP + 0
   \   000196   85..83       MOV     DPH,?XSP + 1
   \   000199   7480         MOV     A,#-0x80
   \   00019B   F0           MOVX    @DPTR,A
    826            }
    827          
    828            if ( retValue == 0 )
   \                     ??MT_ZdoMatchDescRequest_10:
   \   00019C   85..82       MOV     DPL,?XSP + 0
   \   00019F   85..83       MOV     DPH,?XSP + 1
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   7051         JNZ     ??MT_ZdoMatchDescRequest_12
    829            {
    830              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    831                                                 inClusters, numOutClusters, outClusters, 0);
   \   0001A5                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0001A5   75..00       MOV     ?V8,#0x0
   \   0001A8   78..         MOV     R0,#?V8
   \   0001AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AD   740B         MOV     A,#0xb
   \   0001AF   12....       LCALL   ?XSTACK_DISP100_8
   \   0001B2   88..         MOV     ?V8,R0
   \   0001B4   89..         MOV     ?V9,R1
   \   0001B6   78..         MOV     R0,#?V8
   \   0001B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BB   E5..         MOV     A,?V4
   \   0001BD   F5..         MOV     ?V8,A
   \   0001BF   78..         MOV     R0,#?V8
   \   0001C1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C4   742E         MOV     A,#0x2e
   \   0001C6   12....       LCALL   ?XSTACK_DISP100_8
   \   0001C9   88..         MOV     ?V8,R0
   \   0001CB   89..         MOV     ?V9,R1
   \   0001CD   78..         MOV     R0,#?V8
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D2   78..         MOV     R0,#?V6
   \   0001D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D7   A9..         MOV     R1,?V3
   \   0001D9   AC..         MOV     R4,?V0
   \   0001DB   AD..         MOV     R5,?V1
   \   0001DD   7409         MOV     A,#0x9
   \   0001DF   12....       LCALL   ?XSTACK_DISP101_8
   \   0001E2   12....       LCALL   `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   0001E5   7408         MOV     A,#0x8
   \   0001E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001EA   E9           MOV     A,R1
   \   0001EB   C0E0         PUSH    A
   \   0001ED   85..82       MOV     DPL,?XSP + 0
   \   0001F0   85..83       MOV     DPH,?XSP + 1
   \   0001F3   D0E0         POP     A
   \   0001F5   F0           MOVX    @DPTR,A
    832            }
    833          
    834            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMatchDescRequest_12:
   \   0001F6                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001F6   AC..         MOV     R4,?XSP + 0
   \   0001F8   AD..         MOV     R5,?XSP + 1
   \   0001FA   7B01         MOV     R3,#0x1
   \   0001FC   AA..         MOV     R2,?V5
   \   0001FE   7965         MOV     R1,#0x65
   \   000200   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    835          }
   \   000203   744A         MOV     A,#0x4a
   \   000205   12....       LCALL   ?DEALLOC_XSTACK8
   \   000208   7F0A         MOV     R7,#0xa
   \   00020A   02....       LJMP    ?BANKED_LEAVE_XDATA
    836          
    837          /***************************************************************************************************
    838           * @fn      MT_ZdoComplexDescRequest
    839           *
    840           * @brief   Handle a Complex Descriptor request.
    841           *
    842           * @param   pBuf  - MT message data
    843           *
    844           * @return  void
    845           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    846          void MT_ZdoComplexDescRequest(uint8 *pBuf)
   \                     MT_ZdoComplexDescRequest:
    847          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    848            uint8 cmdId;
    849            uint8 retValue;
    850            zAddrType_t destAddr;
    851            uint16 shortAddr;
    852          
    853            /* parse header */
    854            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V2,A
    855            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoComplexDescRequest_0
   \   00001D   0F           INC     R7
    856          
    857            /* Dev address */
    858            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoComplexDescRequest_0:
   \   00001E   7409         MOV     A,#0x9
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7402         MOV     A,#0x2
   \   000025   F0           MOVX    @DPTR,A
    859            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   7401         MOV     A,#0x1
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    860            pBuf += 2;
   \   00004A   EE           MOV     A,R6
   \   00004B   2402         ADD     A,#0x2
   \   00004D   FE           MOV     R6,A
   \   00004E   5001         JNC     ??MT_ZdoComplexDescRequest_1
   \   000050   0F           INC     R7
    861          
    862            /* Network address of interest */
    863            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoComplexDescRequest_1:
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FA           MOV     R2,A
   \   000057   7B00         MOV     R3,#0x0
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   7900         MOV     R1,#0x0
   \   000062   E4           CLR     A
   \   000063   C8           XCH     A,R0
   \   000064   F9           MOV     R1,A
   \   000065   EA           MOV     A,R2
   \   000066   28           ADD     A,R0
   \   000067   F8           MOV     R0,A
   \   000068   EB           MOV     A,R3
   \   000069   39           ADDC    A,R1
   \   00006A   F9           MOV     R1,A
   \   00006B   88..         MOV     ?V0,R0
   \   00006D   89..         MOV     ?V1,R1
    864            pBuf += 2;
   \   00006F   EE           MOV     A,R6
   \   000070   2402         ADD     A,#0x2
   \   000072   FE           MOV     R6,A
   \   000073   5001         JNC     ??MT_ZdoComplexDescRequest_2
   \   000075   0F           INC     R7
    865          
    866            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoComplexDescRequest_2:
   \   000076                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000076   75..00       MOV     ?V3,#0x0
   \   000079   78..         MOV     R0,#?V3
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   7910         MOV     R1,#0x10
   \   000080   AC..         MOV     R4,?V0
   \   000082   AD..         MOV     R5,?V1
   \   000084   7402         MOV     A,#0x2
   \   000086   12....       LCALL   ?XSTACK_DISP101_8
   \   000089   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   00008C   7401         MOV     A,#0x1
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000091   E9           MOV     A,R1
   \   000092   C0E0         PUSH    A
   \   000094   85..82       MOV     DPL,?XSP + 0
   \   000097   85..83       MOV     DPH,?XSP + 1
   \   00009A   D0E0         POP     A
   \   00009C   F0           MOVX    @DPTR,A
    867          
    868            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   00009D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00009D   AC..         MOV     R4,?XSP + 0
   \   00009F   AD..         MOV     R5,?XSP + 1
   \   0000A1   7B01         MOV     R3,#0x1
   \   0000A3   AA..         MOV     R2,?V2
   \   0000A5   7965         MOV     R1,#0x65
   \   0000A7   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    869          }
   \   0000AA   740A         MOV     A,#0xa
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AF   7F04         MOV     R7,#0x4
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    870          
    871          /***************************************************************************************************
    872           * @fn      MT_ZdoUserDescRequest
    873           *
    874           * @brief   Handle a User Descriptor request.
    875           *
    876           * @param   pBuf  - MT message data
    877           *
    878           * @return  void
    879           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    880          void MT_ZdoUserDescRequest(uint8 *pBuf)
   \                     MT_ZdoUserDescRequest:
    881          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    882            uint8 cmdId;
    883            uint8 retValue;
    884            zAddrType_t destAddr;
    885            uint16 shortAddr;
    886          
    887            /* parse header */
    888            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V2,A
    889            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoUserDescRequest_0
   \   00001D   0F           INC     R7
    890          
    891            /* Dev address */
    892            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUserDescRequest_0:
   \   00001E   7409         MOV     A,#0x9
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7402         MOV     A,#0x2
   \   000025   F0           MOVX    @DPTR,A
    893            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   7401         MOV     A,#0x1
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    894            pBuf += 2;
   \   00004A   EE           MOV     A,R6
   \   00004B   2402         ADD     A,#0x2
   \   00004D   FE           MOV     R6,A
   \   00004E   5001         JNC     ??MT_ZdoUserDescRequest_1
   \   000050   0F           INC     R7
    895          
    896            /* Network address of interest */
    897            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??MT_ZdoUserDescRequest_1:
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FA           MOV     R2,A
   \   000057   7B00         MOV     R3,#0x0
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   7900         MOV     R1,#0x0
   \   000062   E4           CLR     A
   \   000063   C8           XCH     A,R0
   \   000064   F9           MOV     R1,A
   \   000065   EA           MOV     A,R2
   \   000066   28           ADD     A,R0
   \   000067   F8           MOV     R0,A
   \   000068   EB           MOV     A,R3
   \   000069   39           ADDC    A,R1
   \   00006A   F9           MOV     R1,A
   \   00006B   88..         MOV     ?V0,R0
   \   00006D   89..         MOV     ?V1,R1
    898            pBuf += 2;
   \   00006F   EE           MOV     A,R6
   \   000070   2402         ADD     A,#0x2
   \   000072   FE           MOV     R6,A
   \   000073   5001         JNC     ??MT_ZdoUserDescRequest_2
   \   000075   0F           INC     R7
    899          
    900            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoUserDescRequest_2:
   \   000076                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000076   75..00       MOV     ?V3,#0x0
   \   000079   78..         MOV     R0,#?V3
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   7911         MOV     R1,#0x11
   \   000080   AC..         MOV     R4,?V0
   \   000082   AD..         MOV     R5,?V1
   \   000084   7402         MOV     A,#0x2
   \   000086   12....       LCALL   ?XSTACK_DISP101_8
   \   000089   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   00008C   7401         MOV     A,#0x1
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000091   E9           MOV     A,R1
   \   000092   C0E0         PUSH    A
   \   000094   85..82       MOV     DPL,?XSP + 0
   \   000097   85..83       MOV     DPH,?XSP + 1
   \   00009A   D0E0         POP     A
   \   00009C   F0           MOVX    @DPTR,A
    901          
    902            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   00009D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00009D   AC..         MOV     R4,?XSP + 0
   \   00009F   AD..         MOV     R5,?XSP + 1
   \   0000A1   7B01         MOV     R3,#0x1
   \   0000A3   AA..         MOV     R2,?V2
   \   0000A5   7965         MOV     R1,#0x65
   \   0000A7   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    903          }
   \   0000AA   740A         MOV     A,#0xa
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AF   7F04         MOV     R7,#0x4
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    904          
    905          /***************************************************************************************************
    906           * @fn      MT_ZdoEndDevAnnce
    907           *
    908           * @brief   Handle a End Device Announce Descriptor request.
    909           *
    910           * @param   pBuf  - MT message data
    911           *
    912           * @return  void
    913           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    914          void MT_ZdoEndDevAnnce(uint8 *pBuf)
   \                     MT_ZdoEndDevAnnce:
    915          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    916            uint8 cmdId;
    917            uint8 retValue;
    918            uint16 shortAddr;
    919            uint8 *pIEEEAddr;
    920          
    921            /* parse header */
    922            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V4,A
    923            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoEndDevAnnce_0
   \   00001D   0F           INC     R7
    924          
    925            /* network address */
    926            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevAnnce_0:
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7B00         MOV     R3,#0x0
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   E4           CLR     A
   \   000030   C8           XCH     A,R0
   \   000031   F9           MOV     R1,A
   \   000032   EA           MOV     A,R2
   \   000033   28           ADD     A,R0
   \   000034   F8           MOV     R0,A
   \   000035   EB           MOV     A,R3
   \   000036   39           ADDC    A,R1
   \   000037   F9           MOV     R1,A
   \   000038   88..         MOV     ?V0,R0
   \   00003A   89..         MOV     ?V1,R1
    927            pBuf += 2;
   \   00003C   EE           MOV     A,R6
   \   00003D   2402         ADD     A,#0x2
   \   00003F   FE           MOV     R6,A
   \   000040   5001         JNC     ??MT_ZdoEndDevAnnce_1
   \   000042   0F           INC     R7
    928          
    929            /* extended address */
    930            pIEEEAddr = pBuf;
   \                     ??MT_ZdoEndDevAnnce_1:
   \   000043   8E..         MOV     ?V2,R6
   \   000045   8F..         MOV     ?V3,R7
    931            pBuf += Z_EXTADDR_LEN;
   \   000047   EE           MOV     A,R6
   \   000048   2408         ADD     A,#0x8
   \   00004A   FE           MOV     R6,A
   \   00004B   5001         JNC     ??MT_ZdoEndDevAnnce_2
   \   00004D   0F           INC     R7
    932          
    933            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
   \                     ??MT_ZdoEndDevAnnce_2:
   \   00004E                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00004E   75..00       MOV     ?V5,#0x0
   \   000051   78..         MOV     R0,#?V5
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   AC..         MOV     R4,?V2
   \   00005E   AD..         MOV     R5,?V3
   \   000060   AA..         MOV     R2,?V0
   \   000062   AB..         MOV     R3,?V1
   \   000064   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000067   7401         MOV     A,#0x1
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   E9           MOV     A,R1
   \   00006D   C0E0         PUSH    A
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   D0E0         POP     A
   \   000077   F0           MOVX    @DPTR,A
    934          
    935            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   000078                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000078   AC..         MOV     R4,?XSP + 0
   \   00007A   AD..         MOV     R5,?XSP + 1
   \   00007C   7B01         MOV     R3,#0x1
   \   00007E   AA..         MOV     R2,?V4
   \   000080   7965         MOV     R1,#0x65
   \   000082   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    936          }
   \   000085   7401         MOV     A,#0x1
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008A   7F06         MOV     R7,#0x6
   \   00008C   02....       LJMP    ?BANKED_LEAVE_XDATA
    937          
    938          /***************************************************************************************************
    939           * @fn      MT_ZdoUserDescSet
    940           *
    941           * @brief   Handle a User Descriptor Set.
    942           *
    943           * @param   pBuf  - MT message data
    944           *
    945           * @return  void
    946           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          void MT_ZdoUserDescSet(uint8 *pBuf)
   \                     MT_ZdoUserDescSet:
    948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 27
   \   000005   74E5         MOV     A,#-0x1b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    949            uint8 cmdId;
    950            uint8 retValue;
    951            zAddrType_t destAddr;
    952            uint16 shortAddr;
    953            UserDescriptorFormat_t userDesc;
    954          
    955            /* parse header */
    956            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V2,A
    957            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoUserDescSet_0
   \   00001D   0F           INC     R7
    958          
    959            /* Dev address */
    960            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUserDescSet_0:
   \   00001E   7409         MOV     A,#0x9
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7402         MOV     A,#0x2
   \   000025   F0           MOVX    @DPTR,A
    961            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   7401         MOV     A,#0x1
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    962            pBuf += 2;
   \   00004A   EE           MOV     A,R6
   \   00004B   2402         ADD     A,#0x2
   \   00004D   FE           MOV     R6,A
   \   00004E   5001         JNC     ??MT_ZdoUserDescSet_1
   \   000050   0F           INC     R7
    963          
    964            /* Network address of interest */
    965            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUserDescSet_1:
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FA           MOV     R2,A
   \   000057   7B00         MOV     R3,#0x0
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   7900         MOV     R1,#0x0
   \   000062   E4           CLR     A
   \   000063   C8           XCH     A,R0
   \   000064   F9           MOV     R1,A
   \   000065   EA           MOV     A,R2
   \   000066   28           ADD     A,R0
   \   000067   F8           MOV     R0,A
   \   000068   EB           MOV     A,R3
   \   000069   39           ADDC    A,R1
   \   00006A   F9           MOV     R1,A
   \   00006B   88..         MOV     ?V0,R0
   \   00006D   89..         MOV     ?V1,R1
    966            pBuf += 2;
   \   00006F   EE           MOV     A,R6
   \   000070   2402         ADD     A,#0x2
   \   000072   FE           MOV     R6,A
   \   000073   5001         JNC     ??MT_ZdoUserDescSet_2
   \   000075   0F           INC     R7
    967          
    968            /* User descriptor */
    969            userDesc.len = *pBuf++;
   \                     ??MT_ZdoUserDescSet_2:
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   C0E0         PUSH    A
   \   00007D   740A         MOV     A,#0xa
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   D0E0         POP     A
   \   000084   F0           MOVX    @DPTR,A
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   A3           INC     DPTR
   \   00008A   AE82         MOV     R6,DPL
   \   00008C   AF83         MOV     R7,DPH
    970            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
   \   00008E                ; Setup parameters for call to function osal_memcpy
   \   00008E   8E..         MOV     ?V4,R6
   \   000090   8F..         MOV     ?V5,R7
   \   000092   75..00       MOV     ?V6,#0x0
   \   000095   78..         MOV     R0,#?V4
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009A   740D         MOV     A,#0xd
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   FC           MOV     R4,A
   \   0000A1   7D00         MOV     R5,#0x0
   \   0000A3   740E         MOV     A,#0xe
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   AA82         MOV     R2,DPL
   \   0000AA   AB83         MOV     R3,DPH
   \   0000AC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AF   7403         MOV     A,#0x3
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
    971            pBuf += 16;
   \   0000B4   EE           MOV     A,R6
   \   0000B5   2410         ADD     A,#0x10
   \   0000B7   FE           MOV     R6,A
   \   0000B8   5001         JNC     ??MT_ZdoUserDescSet_3
   \   0000BA   0F           INC     R7
    972          
    973            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
   \                     ??MT_ZdoUserDescSet_3:
   \   0000BB                ; Setup parameters for call to function ZDP_UserDescSet
   \   0000BB   740A         MOV     A,#0xa
   \   0000BD   12....       LCALL   ?XSTACK_DISP100_8
   \   0000C0   88..         MOV     ?V4,R0
   \   0000C2   89..         MOV     ?V5,R1
   \   0000C4   78..         MOV     R0,#?V4
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9   7900         MOV     R1,#0x0
   \   0000CB   AC..         MOV     R4,?V0
   \   0000CD   AD..         MOV     R5,?V1
   \   0000CF   7403         MOV     A,#0x3
   \   0000D1   12....       LCALL   ?XSTACK_DISP101_8
   \   0000D4   12....       LCALL   `??ZDP_UserDescSet::?relay`; Banked call to: ZDP_UserDescSet
   \   0000D7   7402         MOV     A,#0x2
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV     A,R1
   \   0000DD   C0E0         PUSH    A
   \   0000DF   85..82       MOV     DPL,?XSP + 0
   \   0000E2   85..83       MOV     DPH,?XSP + 1
   \   0000E5   D0E0         POP     A
   \   0000E7   F0           MOVX    @DPTR,A
    974          
    975            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   0000E8                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000E8   AC..         MOV     R4,?XSP + 0
   \   0000EA   AD..         MOV     R5,?XSP + 1
   \   0000EC   7B01         MOV     R3,#0x1
   \   0000EE   AA..         MOV     R2,?V2
   \   0000F0   7965         MOV     R1,#0x65
   \   0000F2   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    976          }
   \   0000F5   741B         MOV     A,#0x1b
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   7F07         MOV     R7,#0x7
   \   0000FC   02....       LJMP    ?BANKED_LEAVE_XDATA
    977          
    978          /***************************************************************************************************
    979           * @fn      MT_ZdoServiceDiscRequest
    980           *
    981           * @brief   Handle a Server Discovery request.
    982           *
    983           * @param   pBuf  - MT message data
    984           *
    985           * @return  void
    986           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    987          void MT_ZdoServiceDiscRequest(uint8 *pBuf)
   \                     MT_ZdoServiceDiscRequest:
    988          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    989            uint8 cmdId;
    990            uint8 retValue;
    991            uint16 serviceMask;
    992          
    993            /* parse header */
    994            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V2,A
    995            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoServiceDiscRequest_0
   \   00001D   0F           INC     R7
    996          
    997            /* Service Mask */
    998            serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??MT_ZdoServiceDiscRequest_0:
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7B00         MOV     R3,#0x0
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   E4           CLR     A
   \   000030   C8           XCH     A,R0
   \   000031   F9           MOV     R1,A
   \   000032   EA           MOV     A,R2
   \   000033   28           ADD     A,R0
   \   000034   F8           MOV     R0,A
   \   000035   EB           MOV     A,R3
   \   000036   39           ADDC    A,R1
   \   000037   F9           MOV     R1,A
   \   000038   88..         MOV     ?V0,R0
   \   00003A   89..         MOV     ?V1,R1
    999            pBuf += 2;
   \   00003C   EE           MOV     A,R6
   \   00003D   2402         ADD     A,#0x2
   \   00003F   FE           MOV     R6,A
   \   000040   5001         JNC     ??MT_ZdoServiceDiscRequest_1
   \   000042   0F           INC     R7
   1000          
   1001            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
   \                     ??MT_ZdoServiceDiscRequest_1:
   \   000043                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   000043   7900         MOV     R1,#0x0
   \   000045   AA..         MOV     R2,?V0
   \   000047   AB..         MOV     R3,?V1
   \   000049   12....       LCALL   `??ZDP_ServerDiscReq::?relay`; Banked call to: ZDP_ServerDiscReq
   \   00004C   E9           MOV     A,R1
   \   00004D   C0E0         PUSH    A
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
   1002          
   1003            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   000058                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000058   AC..         MOV     R4,?XSP + 0
   \   00005A   AD..         MOV     R5,?XSP + 1
   \   00005C   7B01         MOV     R3,#0x1
   \   00005E   AA..         MOV     R2,?V2
   \   000060   7965         MOV     R1,#0x65
   \   000062   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1004          }
   \   000065   7401         MOV     A,#0x1
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   7F03         MOV     R7,#0x3
   \   00006C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1005          
   1006          #if defined ( ZIGBEE_CHILD_AGING )
   1007          /***************************************************************************************************
   1008           * @fn      MT_ZdoEndDeviceTimeoutRequest
   1009           *
   1010           * @brief   Handle an End Device Timeout request.
   1011           *
   1012           * @param   pBuf  - MT message data
   1013           *
   1014           * @return  void
   1015           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          void MT_ZdoEndDeviceTimeoutRequest(uint8 *pBuf)
   \                     MT_ZdoEndDeviceTimeoutRequest:
   1017          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1018            uint8 cmdId;
   1019            uint8 retValue;
   1020            uint16 parentAddr;
   1021            uint16 reqTimeout;
   1022          
   1023            /* parse header */
   1024            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V4,A
   1025            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoEndDeviceTimeoutRequest_0
   \   00001D   0F           INC     R7
   1026          
   1027            /* Parent address */
   1028            parentAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDeviceTimeoutRequest_0:
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7B00         MOV     R3,#0x0
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   E4           CLR     A
   \   000030   C8           XCH     A,R0
   \   000031   F9           MOV     R1,A
   \   000032   EA           MOV     A,R2
   \   000033   28           ADD     A,R0
   \   000034   F8           MOV     R0,A
   \   000035   EB           MOV     A,R3
   \   000036   39           ADDC    A,R1
   \   000037   F9           MOV     R1,A
   \   000038   88..         MOV     ?V2,R0
   \   00003A   89..         MOV     ?V3,R1
   1029            pBuf += 2;
   \   00003C   EE           MOV     A,R6
   \   00003D   2402         ADD     A,#0x2
   \   00003F   FE           MOV     R6,A
   \   000040   5001         JNC     ??MT_ZdoEndDeviceTimeoutRequest_1
   \   000042   0F           INC     R7
   1030          
   1031            /* Requested Timeout */
   1032            reqTimeout = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDeviceTimeoutRequest_1:
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FA           MOV     R2,A
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F8           MOV     R0,A
   \   000052   7900         MOV     R1,#0x0
   \   000054   E4           CLR     A
   \   000055   C8           XCH     A,R0
   \   000056   F9           MOV     R1,A
   \   000057   EA           MOV     A,R2
   \   000058   28           ADD     A,R0
   \   000059   F8           MOV     R0,A
   \   00005A   EB           MOV     A,R3
   \   00005B   39           ADDC    A,R1
   \   00005C   F9           MOV     R1,A
   \   00005D   88..         MOV     ?V0,R0
   \   00005F   89..         MOV     ?V1,R1
   1033            pBuf += 2;
   \   000061   EE           MOV     A,R6
   \   000062   2402         ADD     A,#0x2
   \   000064   FE           MOV     R6,A
   \   000065   5001         JNC     ??MT_ZdoEndDeviceTimeoutRequest_2
   \   000067   0F           INC     R7
   1034          
   1035            retValue = (uint8)ZDP_EndDeviceTimeoutReq( parentAddr, reqTimeout, 0 );
   \                     ??MT_ZdoEndDeviceTimeoutRequest_2:
   \   000068                ; Setup parameters for call to function ZDP_EndDeviceTimeoutReq
   \   000068   7900         MOV     R1,#0x0
   \   00006A   AC..         MOV     R4,?V0
   \   00006C   AD..         MOV     R5,?V1
   \   00006E   AA..         MOV     R2,?V2
   \   000070   AB..         MOV     R3,?V3
   \   000072   12....       LCALL   `??ZDP_EndDeviceTimeoutReq::?relay`; Banked call to: ZDP_EndDeviceTimeoutReq
   \   000075   E9           MOV     A,R1
   \   000076   C0E0         PUSH    A
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   D0E0         POP     A
   \   000080   F0           MOVX    @DPTR,A
   1036          
   1037            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   000081                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000081   AC..         MOV     R4,?XSP + 0
   \   000083   AD..         MOV     R5,?XSP + 1
   \   000085   7B01         MOV     R3,#0x1
   \   000087   AA..         MOV     R2,?V4
   \   000089   7965         MOV     R1,#0x65
   \   00008B   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1038          }
   \   00008E   7401         MOV     A,#0x1
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   7F05         MOV     R7,#0x5
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
   1039          #endif // ZIGBEE_CHILD_AGING
   1040          
   1041          /***************************************************************************************************
   1042           * @fn      MT_ZdoEndDevBindRequest
   1043           *
   1044           * @brief   Handle a End Device Bind request.
   1045           *
   1046           * @param   pBuf  - MT message data
   1047           *
   1048           * @return  void
   1049           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1050          void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   \                     MT_ZdoEndDevBindRequest:
   1051          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV     A,#-0x46
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1052            uint8 cmdId;
   1053            uint8 retValue = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   1054            uint8 i, epInt, numInClusters, numOutClusters;
   1055            zAddrType_t destAddr;
   1056            uint16 shortAddr;
   1057            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
   1058          
   1059            /* parse header */
   1060            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V7,A
   1061            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000020   EE           MOV     A,R6
   \   000021   2403         ADD     A,#0x3
   \   000023   FE           MOV     R6,A
   \   000024   5001         JNC     ??MT_ZdoEndDevBindRequest_0
   \   000026   0F           INC     R7
   1062          
   1063            /* Dev address */
   1064            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoEndDevBindRequest_0:
   \   000027   7409         MOV     A,#0x9
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   7402         MOV     A,#0x2
   \   00002E   F0           MOVX    @DPTR,A
   1065            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FA           MOV     R2,A
   \   000035   7B00         MOV     R3,#0x0
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   7900         MOV     R1,#0x0
   \   000040   E4           CLR     A
   \   000041   C8           XCH     A,R0
   \   000042   F9           MOV     R1,A
   \   000043   EA           MOV     A,R2
   \   000044   28           ADD     A,R0
   \   000045   F8           MOV     R0,A
   \   000046   EB           MOV     A,R3
   \   000047   39           ADDC    A,R1
   \   000048   F9           MOV     R1,A
   \   000049   7401         MOV     A,#0x1
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E8           MOV     A,R0
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E9           MOV     A,R1
   \   000052   F0           MOVX    @DPTR,A
   1066            pBuf += 2;
   \   000053   EE           MOV     A,R6
   \   000054   2402         ADD     A,#0x2
   \   000056   FE           MOV     R6,A
   \   000057   5001         JNC     ??MT_ZdoEndDevBindRequest_1
   \   000059   0F           INC     R7
   1067          
   1068            /* Local coordinator of the binding */
   1069            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevBindRequest_1:
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FA           MOV     R2,A
   \   000060   7B00         MOV     R3,#0x0
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F8           MOV     R0,A
   \   000069   7900         MOV     R1,#0x0
   \   00006B   E4           CLR     A
   \   00006C   C8           XCH     A,R0
   \   00006D   F9           MOV     R1,A
   \   00006E   EA           MOV     A,R2
   \   00006F   28           ADD     A,R0
   \   000070   F8           MOV     R0,A
   \   000071   EB           MOV     A,R3
   \   000072   39           ADDC    A,R1
   \   000073   F9           MOV     R1,A
   \   000074   88..         MOV     ?V4,R0
   \   000076   89..         MOV     ?V5,R1
   1070            pBuf += 2;
   \   000078   EE           MOV     A,R6
   \   000079   2402         ADD     A,#0x2
   \   00007B   FE           MOV     R6,A
   \   00007C   5001         JNC     ??MT_ZdoEndDevBindRequest_2
   \   00007E   0F           INC     R7
   1071          
   1072            /* For now, skip past the extended address */
   1073            pBuf += Z_EXTADDR_LEN;
   \                     ??MT_ZdoEndDevBindRequest_2:
   \   00007F   EE           MOV     A,R6
   \   000080   2408         ADD     A,#0x8
   \   000082   FE           MOV     R6,A
   \   000083   5001         JNC     ??MT_ZdoEndDevBindRequest_3
   \   000085   0F           INC     R7
   1074          
   1075            /* Endpoint */
   1076            epInt = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_3:
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F5..         MOV     ?V10,A
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   A3           INC     DPTR
   \   000092   AE82         MOV     R6,DPL
   \   000094   AF83         MOV     R7,DPH
   1077          
   1078            /* Profile ID */
   1079            profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FA           MOV     R2,A
   \   00009C   7B00         MOV     R3,#0x0
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F8           MOV     R0,A
   \   0000A5   7900         MOV     R1,#0x0
   \   0000A7   E4           CLR     A
   \   0000A8   C8           XCH     A,R0
   \   0000A9   F9           MOV     R1,A
   \   0000AA   EA           MOV     A,R2
   \   0000AB   28           ADD     A,R0
   \   0000AC   F8           MOV     R0,A
   \   0000AD   EB           MOV     A,R3
   \   0000AE   39           ADDC    A,R1
   \   0000AF   F9           MOV     R1,A
   \   0000B0   88..         MOV     ?V0,R0
   \   0000B2   89..         MOV     ?V1,R1
   1080            pBuf += 2;
   \   0000B4   EE           MOV     A,R6
   \   0000B5   2402         ADD     A,#0x2
   \   0000B7   FE           MOV     R6,A
   \   0000B8   5001         JNC     ??MT_ZdoEndDevBindRequest_4
   \   0000BA   0F           INC     R7
   1081          
   1082            /* NumInClusters */
   1083            numInClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_4:
   \   0000BB   8E82         MOV     DPL,R6
   \   0000BD   8F83         MOV     DPH,R7
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F5..         MOV     ?V6,A
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   A3           INC     DPTR
   \   0000C7   AE82         MOV     R6,DPL
   \   0000C9   AF83         MOV     R7,DPH
   1084            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   0000CB   E5..         MOV     A,?V6
   \   0000CD   C3           CLR     C
   \   0000CE   9410         SUBB    A,#0x10
   \   0000D0   505C         JNC     ??MT_ZdoEndDevBindRequest_5
   1085            {
   1086              for ( i = 0; i < numInClusters; i++ )
   \   0000D2   75..00       MOV     ?V2,#0x0
   \                     ??MT_ZdoEndDevBindRequest_6:
   \   0000D5   E5..         MOV     A,?V2
   \   0000D7   C3           CLR     C
   \   0000D8   95..         SUBB    A,?V6
   \   0000DA   505B         JNC     ??MT_ZdoEndDevBindRequest_7
   1087              {
   1088                inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000DC   8E82         MOV     DPL,R6
   \   0000DE   8F83         MOV     DPH,R7
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   FA           MOV     R2,A
   \   0000E2   7B00         MOV     R3,#0x0
   \   0000E4   8E82         MOV     DPL,R6
   \   0000E6   8F83         MOV     DPH,R7
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F8           MOV     R0,A
   \   0000EB   7900         MOV     R1,#0x0
   \   0000ED   E4           CLR     A
   \   0000EE   C8           XCH     A,R0
   \   0000EF   F9           MOV     R1,A
   \   0000F0   EA           MOV     A,R2
   \   0000F1   28           ADD     A,R0
   \   0000F2   FA           MOV     R2,A
   \   0000F3   EB           MOV     A,R3
   \   0000F4   39           ADDC    A,R1
   \   0000F5   FB           MOV     R3,A
   \   0000F6   A8..         MOV     R0,?V2
   \   0000F8   7900         MOV     R1,#0x0
   \   0000FA   E8           MOV     A,R0
   \   0000FB   75F002       MOV     B,#0x2
   \   0000FE   A4           MUL     AB
   \   0000FF   C8           XCH     A,R0
   \   000100   ACF0         MOV     R4,B
   \   000102   75F000       MOV     B,#0x0
   \   000105   A4           MUL     AB
   \   000106   2C           ADD     A,R4
   \   000107   FC           MOV     R4,A
   \   000108   75F002       MOV     B,#0x2
   \   00010B   E9           MOV     A,R1
   \   00010C   A4           MUL     AB
   \   00010D   2C           ADD     A,R4
   \   00010E   F9           MOV     R1,A
   \   00010F   7428         MOV     A,#0x28
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   E582         MOV     A,DPL
   \   000116   28           ADD     A,R0
   \   000117   F582         MOV     DPL,A
   \   000119   E583         MOV     A,DPH
   \   00011B   39           ADDC    A,R1
   \   00011C   F583         MOV     DPH,A
   \   00011E   EA           MOV     A,R2
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   EB           MOV     A,R3
   \   000122   F0           MOVX    @DPTR,A
   1089                pBuf += 2;
   \   000123   EE           MOV     A,R6
   \   000124   2402         ADD     A,#0x2
   \   000126   FE           MOV     R6,A
   \   000127   5001         JNC     ??MT_ZdoEndDevBindRequest_8
   \   000129   0F           INC     R7
   1090              }
   \                     ??MT_ZdoEndDevBindRequest_8:
   \   00012A   05..         INC     ?V2
   \   00012C   80A7         SJMP    ??MT_ZdoEndDevBindRequest_6
   1091            }
   1092            else
   1093            {
   1094              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_5:
   \   00012E   85..82       MOV     DPL,?XSP + 0
   \   000131   85..83       MOV     DPH,?XSP + 1
   \   000134   7480         MOV     A,#-0x80
   \   000136   F0           MOVX    @DPTR,A
   1095            }
   1096          
   1097            /* NumOutClusters */
   1098            numOutClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_7:
   \   000137   8E82         MOV     DPL,R6
   \   000139   8F83         MOV     DPH,R7
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F5..         MOV     ?V3,A
   \   00013E   8E82         MOV     DPL,R6
   \   000140   8F83         MOV     DPH,R7
   \   000142   A3           INC     DPTR
   \   000143   AE82         MOV     R6,DPL
   \   000145   AF83         MOV     R7,DPH
   1099            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   000147   E5..         MOV     A,?V3
   \   000149   C3           CLR     C
   \   00014A   9410         SUBB    A,#0x10
   \   00014C   505C         JNC     ??MT_ZdoEndDevBindRequest_9
   1100            {
   1101              for ( i = 0; i < numOutClusters; i++ )
   \   00014E   75..00       MOV     ?V2,#0x0
   \                     ??MT_ZdoEndDevBindRequest_10:
   \   000151   E5..         MOV     A,?V2
   \   000153   C3           CLR     C
   \   000154   95..         SUBB    A,?V3
   \   000156   505B         JNC     ??MT_ZdoEndDevBindRequest_11
   1102              {
   1103                outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000158   8E82         MOV     DPL,R6
   \   00015A   8F83         MOV     DPH,R7
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   FA           MOV     R2,A
   \   00015E   7B00         MOV     R3,#0x0
   \   000160   8E82         MOV     DPL,R6
   \   000162   8F83         MOV     DPH,R7
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   F8           MOV     R0,A
   \   000167   7900         MOV     R1,#0x0
   \   000169   E4           CLR     A
   \   00016A   C8           XCH     A,R0
   \   00016B   F9           MOV     R1,A
   \   00016C   EA           MOV     A,R2
   \   00016D   28           ADD     A,R0
   \   00016E   FA           MOV     R2,A
   \   00016F   EB           MOV     A,R3
   \   000170   39           ADDC    A,R1
   \   000171   FB           MOV     R3,A
   \   000172   A8..         MOV     R0,?V2
   \   000174   7900         MOV     R1,#0x0
   \   000176   E8           MOV     A,R0
   \   000177   75F002       MOV     B,#0x2
   \   00017A   A4           MUL     AB
   \   00017B   C8           XCH     A,R0
   \   00017C   ACF0         MOV     R4,B
   \   00017E   75F000       MOV     B,#0x0
   \   000181   A4           MUL     AB
   \   000182   2C           ADD     A,R4
   \   000183   FC           MOV     R4,A
   \   000184   75F002       MOV     B,#0x2
   \   000187   E9           MOV     A,R1
   \   000188   A4           MUL     AB
   \   000189   2C           ADD     A,R4
   \   00018A   F9           MOV     R1,A
   \   00018B   740A         MOV     A,#0xa
   \   00018D   12....       LCALL   ?XSTACK_DISP0_8
   \   000190   E582         MOV     A,DPL
   \   000192   28           ADD     A,R0
   \   000193   F582         MOV     DPL,A
   \   000195   E583         MOV     A,DPH
   \   000197   39           ADDC    A,R1
   \   000198   F583         MOV     DPH,A
   \   00019A   EA           MOV     A,R2
   \   00019B   F0           MOVX    @DPTR,A
   \   00019C   A3           INC     DPTR
   \   00019D   EB           MOV     A,R3
   \   00019E   F0           MOVX    @DPTR,A
   1104                pBuf += 2;
   \   00019F   EE           MOV     A,R6
   \   0001A0   2402         ADD     A,#0x2
   \   0001A2   FE           MOV     R6,A
   \   0001A3   5001         JNC     ??MT_ZdoEndDevBindRequest_12
   \   0001A5   0F           INC     R7
   1105              }
   \                     ??MT_ZdoEndDevBindRequest_12:
   \   0001A6   05..         INC     ?V2
   \   0001A8   80A7         SJMP    ??MT_ZdoEndDevBindRequest_10
   1106            }
   1107            else
   1108            {
   1109              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_9:
   \   0001AA   85..82       MOV     DPL,?XSP + 0
   \   0001AD   85..83       MOV     DPH,?XSP + 1
   \   0001B0   7480         MOV     A,#-0x80
   \   0001B2   F0           MOVX    @DPTR,A
   1110            }
   1111          
   1112            if ( retValue == 0 )
   \                     ??MT_ZdoEndDevBindRequest_11:
   \   0001B3   85..82       MOV     DPL,?XSP + 0
   \   0001B6   85..83       MOV     DPH,?XSP + 1
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   705A         JNZ     ??MT_ZdoEndDevBindRequest_13
   1113            {
   1114              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
   1115                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   \   0001BC                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0001BC   75..00       MOV     ?V8,#0x0
   \   0001BF   78..         MOV     R0,#?V8
   \   0001C1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C4   740B         MOV     A,#0xb
   \   0001C6   12....       LCALL   ?XSTACK_DISP100_8
   \   0001C9   88..         MOV     ?V8,R0
   \   0001CB   89..         MOV     ?V9,R1
   \   0001CD   78..         MOV     R0,#?V8
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D2   E5..         MOV     A,?V3
   \   0001D4   F5..         MOV     ?V8,A
   \   0001D6   78..         MOV     R0,#?V8
   \   0001D8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001DB   742C         MOV     A,#0x2c
   \   0001DD   12....       LCALL   ?XSTACK_DISP100_8
   \   0001E0   88..         MOV     ?V8,R0
   \   0001E2   89..         MOV     ?V9,R1
   \   0001E4   78..         MOV     R0,#?V8
   \   0001E6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E9   E5..         MOV     A,?V6
   \   0001EB   F5..         MOV     ?V8,A
   \   0001ED   78..         MOV     R0,#?V8
   \   0001EF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001F2   78..         MOV     R0,#?V0
   \   0001F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F7   A9..         MOV     R1,?V10
   \   0001F9   AC..         MOV     R4,?V4
   \   0001FB   AD..         MOV     R5,?V5
   \   0001FD   740A         MOV     A,#0xa
   \   0001FF   12....       LCALL   ?XSTACK_DISP101_8
   \   000202   12....       LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   000205   7409         MOV     A,#0x9
   \   000207   12....       LCALL   ?DEALLOC_XSTACK8
   \   00020A   E9           MOV     A,R1
   \   00020B   C0E0         PUSH    A
   \   00020D   85..82       MOV     DPL,?XSP + 0
   \   000210   85..83       MOV     DPH,?XSP + 1
   \   000213   D0E0         POP     A
   \   000215   F0           MOVX    @DPTR,A
   1116            }
   1117          
   1118            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoEndDevBindRequest_13:
   \   000216                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000216   AC..         MOV     R4,?XSP + 0
   \   000218   AD..         MOV     R5,?XSP + 1
   \   00021A   7B01         MOV     R3,#0x1
   \   00021C   AA..         MOV     R2,?V7
   \   00021E   7965         MOV     R1,#0x65
   \   000220   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1119          }
   \   000223   7446         MOV     A,#0x46
   \   000225   12....       LCALL   ?DEALLOC_XSTACK8
   \   000228   7F0B         MOV     R7,#0xb
   \   00022A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1120          
   1121          /***************************************************************************************************
   1122           * @fn      MT_ZdoBindRequest
   1123           *
   1124           * @brief   Handle a Bind request.
   1125           *
   1126           * @param   pBuf  - MT message data
   1127           *
   1128           * @return  void
   1129           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1130          void MT_ZdoBindRequest(uint8 *pBuf)
   \                     MT_ZdoBindRequest:
   1131          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1132            uint8 cmdId;
   1133            uint8 retValue;
   1134            zAddrType_t destAddr, devAddr;
   1135            uint8 *pSrcAddr, *ptr;
   1136            uint8 srcEPInt, dstEPInt;
   1137            uint16 clusterID;
   1138          
   1139            /* parse header */
   1140            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V1,A
   1141            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoBindRequest_0
   \   00001D   0F           INC     R7
   1142          
   1143            /* Dev address */
   1144            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoBindRequest_0:
   \   00001E   7412         MOV     A,#0x12
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7402         MOV     A,#0x2
   \   000025   F0           MOVX    @DPTR,A
   1145            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   740A         MOV     A,#0xa
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
   1146            pBuf += 2;
   \   00004A   EE           MOV     A,R6
   \   00004B   2402         ADD     A,#0x2
   \   00004D   FE           MOV     R6,A
   \   00004E   5001         JNC     ??MT_ZdoBindRequest_1
   \   000050   0F           INC     R7
   1147          
   1148            /* SrcAddress */
   1149            pSrcAddr = pBuf;
   \                     ??MT_ZdoBindRequest_1:
   \   000051   8E..         MOV     ?V8,R6
   \   000053   8F..         MOV     ?V9,R7
   1150            pBuf += Z_EXTADDR_LEN;
   \   000055   EE           MOV     A,R6
   \   000056   2408         ADD     A,#0x8
   \   000058   FE           MOV     R6,A
   \   000059   5001         JNC     ??MT_ZdoBindRequest_2
   \   00005B   0F           INC     R7
   1151          
   1152            /* SrcEPInt */
   1153            srcEPInt = *pBuf++;
   \                     ??MT_ZdoBindRequest_2:
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F5..         MOV     ?V2,A
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   A3           INC     DPTR
   \   000068   AE82         MOV     R6,DPL
   \   00006A   AF83         MOV     R7,DPH
   1154          
   1155            /* ClusterID */
   1156            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FA           MOV     R2,A
   \   000072   7B00         MOV     R3,#0x0
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F8           MOV     R0,A
   \   00007B   7900         MOV     R1,#0x0
   \   00007D   E4           CLR     A
   \   00007E   C8           XCH     A,R0
   \   00007F   F9           MOV     R1,A
   \   000080   EA           MOV     A,R2
   \   000081   28           ADD     A,R0
   \   000082   F8           MOV     R0,A
   \   000083   EB           MOV     A,R3
   \   000084   39           ADDC    A,R1
   \   000085   F9           MOV     R1,A
   \   000086   88..         MOV     ?V6,R0
   \   000088   89..         MOV     ?V7,R1
   1157            pBuf += 2;
   \   00008A   EE           MOV     A,R6
   \   00008B   2402         ADD     A,#0x2
   \   00008D   FE           MOV     R6,A
   \   00008E   5001         JNC     ??MT_ZdoBindRequest_3
   \   000090   0F           INC     R7
   1158          
   1159            /* Destination Address mode */
   1160            devAddr.addrMode = *pBuf++;
   \                     ??MT_ZdoBindRequest_3:
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   E0           MOVX    A,@DPTR
   \   000096   C0E0         PUSH    A
   \   000098   7409         MOV     A,#0x9
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   D0E0         POP     A
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   A3           INC     DPTR
   \   0000A5   AE82         MOV     R6,DPL
   \   0000A7   AF83         MOV     R7,DPH
   1161          
   1162            /* Destination Address */
   1163            if ( devAddr.addrMode == Addr64Bit )
   \   0000A9   7409         MOV     A,#0x9
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   6403         XRL     A,#0x3
   \   0000B1   7012         JNZ     ??MT_ZdoBindRequest_4
   1164            {
   1165              ptr = pBuf;
   \   0000B3   8E..         MOV     ?V4,R6
   \   0000B5   8F..         MOV     ?V5,R7
   1166              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   0000B7                ; Setup parameters for call to function sAddrExtCpy
   \   0000B7   AC..         MOV     R4,?V4
   \   0000B9   AD..         MOV     R5,?V5
   \   0000BB   7401         MOV     A,#0x1
   \   0000BD   12....       LCALL   ?XSTACK_DISP101_8
   \   0000C0   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000C3   8024         SJMP    ??MT_ZdoBindRequest_5
   1167            }
   1168            else
   1169            {
   1170              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoBindRequest_4:
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   FA           MOV     R2,A
   \   0000CB   7B00         MOV     R3,#0x0
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F8           MOV     R0,A
   \   0000D4   7900         MOV     R1,#0x0
   \   0000D6   E4           CLR     A
   \   0000D7   C8           XCH     A,R0
   \   0000D8   F9           MOV     R1,A
   \   0000D9   EA           MOV     A,R2
   \   0000DA   28           ADD     A,R0
   \   0000DB   F8           MOV     R0,A
   \   0000DC   EB           MOV     A,R3
   \   0000DD   39           ADDC    A,R1
   \   0000DE   F9           MOV     R1,A
   \   0000DF   7401         MOV     A,#0x1
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   E8           MOV     A,R0
   \   0000E5   F0           MOVX    @DPTR,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E9           MOV     A,R1
   \   0000E8   F0           MOVX    @DPTR,A
   1171            }
   1172            /* The short address occupies LSB two bytes */
   1173            pBuf += Z_EXTADDR_LEN;
   \                     ??MT_ZdoBindRequest_5:
   \   0000E9   EE           MOV     A,R6
   \   0000EA   2408         ADD     A,#0x8
   \   0000EC   FE           MOV     R6,A
   \   0000ED   5001         JNC     ??MT_ZdoBindRequest_6
   \   0000EF   0F           INC     R7
   1174          
   1175            /* DstEPInt */
   1176            dstEPInt = *pBuf;
   \                     ??MT_ZdoBindRequest_6:
   \   0000F0   8E82         MOV     DPL,R6
   \   0000F2   8F83         MOV     DPH,R7
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F5..         MOV     ?V0,A
   1177          
   1178            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \   0000F7                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   0000F7   75..00       MOV     ?V3,#0x0
   \   0000FA   78..         MOV     R0,#?V3
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FF   E5..         MOV     A,?V0
   \   000101   F5..         MOV     ?V3,A
   \   000103   78..         MOV     R0,#?V3
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000108   7403         MOV     A,#0x3
   \   00010A   12....       LCALL   ?XSTACK_DISP100_8
   \   00010D   88..         MOV     ?V10,R0
   \   00010F   89..         MOV     ?V11,R1
   \   000111   78..         MOV     R0,#?V10
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000116   78..         MOV     R0,#?V6
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   78..         MOV     R0,#?V8
   \   00011D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000120   A9..         MOV     R1,?V2
   \   000122   7412         MOV     A,#0x12
   \   000124   12....       LCALL   ?XSTACK_DISP102_8
   \   000127   7A21         MOV     R2,#0x21
   \   000129   7B00         MOV     R3,#0x0
   \   00012B   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   00012E   7408         MOV     A,#0x8
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   \   000133   E9           MOV     A,R1
   \   000134   C0E0         PUSH    A
   \   000136   85..82       MOV     DPL,?XSP + 0
   \   000139   85..83       MOV     DPH,?XSP + 1
   \   00013C   D0E0         POP     A
   \   00013E   F0           MOVX    @DPTR,A
   1179          
   1180            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   00013F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00013F   AC..         MOV     R4,?XSP + 0
   \   000141   AD..         MOV     R5,?XSP + 1
   \   000143   7B01         MOV     R3,#0x1
   \   000145   AA..         MOV     R2,?V1
   \   000147   7965         MOV     R1,#0x65
   \   000149   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1181          }
   \   00014C   7413         MOV     A,#0x13
   \   00014E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000151   7F0C         MOV     R7,#0xc
   \   000153   02....       LJMP    ?BANKED_LEAVE_XDATA
   1182          
   1183          /***************************************************************************************************
   1184           * @fn      MT_ZdoUnbindRequest
   1185           *
   1186           * @brief   Handle a Unbind request.
   1187           *
   1188           * @param   pBuf  - MT message data
   1189           *
   1190           * @return  void
   1191           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1192          void MT_ZdoUnbindRequest(uint8 *pBuf)
   \                     MT_ZdoUnbindRequest:
   1193          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1194            uint8 cmdId;
   1195            uint8 retValue;
   1196            zAddrType_t destAddr, devAddr;
   1197            uint8 *pSrcAddr, *ptr;
   1198            uint8 srcEPInt, dstEPInt;
   1199            uint16 clusterID;
   1200          
   1201            /* parse header */
   1202            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V1,A
   1203            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_ZdoUnbindRequest_0
   \   00001D   0F           INC     R7
   1204          
   1205            /* dev address */
   1206            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUnbindRequest_0:
   \   00001E   7412         MOV     A,#0x12
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7402         MOV     A,#0x2
   \   000025   F0           MOVX    @DPTR,A
   1207            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   740A         MOV     A,#0xa
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
   1208            pBuf += 2;
   \   00004A   EE           MOV     A,R6
   \   00004B   2402         ADD     A,#0x2
   \   00004D   FE           MOV     R6,A
   \   00004E   5001         JNC     ??MT_ZdoUnbindRequest_1
   \   000050   0F           INC     R7
   1209          
   1210            /* SrcAddress */
   1211            pSrcAddr = pBuf;
   \                     ??MT_ZdoUnbindRequest_1:
   \   000051   8E..         MOV     ?V8,R6
   \   000053   8F..         MOV     ?V9,R7
   1212            pBuf += Z_EXTADDR_LEN;
   \   000055   EE           MOV     A,R6
   \   000056   2408         ADD     A,#0x8
   \   000058   FE           MOV     R6,A
   \   000059   5001         JNC     ??MT_ZdoUnbindRequest_2
   \   00005B   0F           INC     R7
   1213          
   1214            /* SrcEPInt */
   1215            srcEPInt = *pBuf++;
   \                     ??MT_ZdoUnbindRequest_2:
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F5..         MOV     ?V2,A
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   A3           INC     DPTR
   \   000068   AE82         MOV     R6,DPL
   \   00006A   AF83         MOV     R7,DPH
   1216          
   1217            /* ClusterID */
   1218            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FA           MOV     R2,A
   \   000072   7B00         MOV     R3,#0x0
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F8           MOV     R0,A
   \   00007B   7900         MOV     R1,#0x0
   \   00007D   E4           CLR     A
   \   00007E   C8           XCH     A,R0
   \   00007F   F9           MOV     R1,A
   \   000080   EA           MOV     A,R2
   \   000081   28           ADD     A,R0
   \   000082   F8           MOV     R0,A
   \   000083   EB           MOV     A,R3
   \   000084   39           ADDC    A,R1
   \   000085   F9           MOV     R1,A
   \   000086   88..         MOV     ?V6,R0
   \   000088   89..         MOV     ?V7,R1
   1219            pBuf += 2;
   \   00008A   EE           MOV     A,R6
   \   00008B   2402         ADD     A,#0x2
   \   00008D   FE           MOV     R6,A
   \   00008E   5001         JNC     ??MT_ZdoUnbindRequest_3
   \   000090   0F           INC     R7
   1220          
   1221            /* Destination Address mode */
   1222            devAddr.addrMode = *pBuf++;
   \                     ??MT_ZdoUnbindRequest_3:
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   E0           MOVX    A,@DPTR
   \   000096   C0E0         PUSH    A
   \   000098   7409         MOV     A,#0x9
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   D0E0         POP     A
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   A3           INC     DPTR
   \   0000A5   AE82         MOV     R6,DPL
   \   0000A7   AF83         MOV     R7,DPH
   1223          
   1224            /* Destination Address */
   1225            if ( devAddr.addrMode == Addr64Bit )
   \   0000A9   7409         MOV     A,#0x9
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   6403         XRL     A,#0x3
   \   0000B1   7012         JNZ     ??MT_ZdoUnbindRequest_4
   1226            {
   1227              ptr = pBuf;
   \   0000B3   8E..         MOV     ?V4,R6
   \   0000B5   8F..         MOV     ?V5,R7
   1228              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   0000B7                ; Setup parameters for call to function sAddrExtCpy
   \   0000B7   AC..         MOV     R4,?V4
   \   0000B9   AD..         MOV     R5,?V5
   \   0000BB   7401         MOV     A,#0x1
   \   0000BD   12....       LCALL   ?XSTACK_DISP101_8
   \   0000C0   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000C3   8024         SJMP    ??MT_ZdoUnbindRequest_5
   1229            }
   1230            else
   1231            {
   1232              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUnbindRequest_4:
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   FA           MOV     R2,A
   \   0000CB   7B00         MOV     R3,#0x0
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F8           MOV     R0,A
   \   0000D4   7900         MOV     R1,#0x0
   \   0000D6   E4           CLR     A
   \   0000D7   C8           XCH     A,R0
   \   0000D8   F9           MOV     R1,A
   \   0000D9   EA           MOV     A,R2
   \   0000DA   28           ADD     A,R0
   \   0000DB   F8           MOV     R0,A
   \   0000DC   EB           MOV     A,R3
   \   0000DD   39           ADDC    A,R1
   \   0000DE   F9           MOV     R1,A
   \   0000DF   7401         MOV     A,#0x1
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   E8           MOV     A,R0
   \   0000E5   F0           MOVX    @DPTR,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E9           MOV     A,R1
   \   0000E8   F0           MOVX    @DPTR,A
   1233            }
   1234            /* The short address occupies LSB two bytes */
   1235            pBuf += Z_EXTADDR_LEN;
   \                     ??MT_ZdoUnbindRequest_5:
   \   0000E9   EE           MOV     A,R6
   \   0000EA   2408         ADD     A,#0x8
   \   0000EC   FE           MOV     R6,A
   \   0000ED   5001         JNC     ??MT_ZdoUnbindRequest_6
   \   0000EF   0F           INC     R7
   1236          
   1237            /* dstEPInt */
   1238            dstEPInt = *pBuf;
   \                     ??MT_ZdoUnbindRequest_6:
   \   0000F0   8E82         MOV     DPL,R6
   \   0000F2   8F83         MOV     DPH,R7
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F5..         MOV     ?V0,A
   1239          
   1240            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \   0000F7                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   0000F7   75..00       MOV     ?V3,#0x0
   \   0000FA   78..         MOV     R0,#?V3
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FF   E5..         MOV     A,?V0
   \   000101   F5..         MOV     ?V3,A
   \   000103   78..         MOV     R0,#?V3
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000108   7403         MOV     A,#0x3
   \   00010A   12....       LCALL   ?XSTACK_DISP100_8
   \   00010D   88..         MOV     ?V10,R0
   \   00010F   89..         MOV     ?V11,R1
   \   000111   78..         MOV     R0,#?V10
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000116   78..         MOV     R0,#?V6
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   78..         MOV     R0,#?V8
   \   00011D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000120   A9..         MOV     R1,?V2
   \   000122   7412         MOV     A,#0x12
   \   000124   12....       LCALL   ?XSTACK_DISP102_8
   \   000127   7A22         MOV     R2,#0x22
   \   000129   7B00         MOV     R3,#0x0
   \   00012B   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   00012E   7408         MOV     A,#0x8
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   \   000133   E9           MOV     A,R1
   \   000134   C0E0         PUSH    A
   \   000136   85..82       MOV     DPL,?XSP + 0
   \   000139   85..83       MOV     DPH,?XSP + 1
   \   00013C   D0E0         POP     A
   \   00013E   F0           MOVX    @DPTR,A
   1241          
   1242            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   00013F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00013F   AC..         MOV     R4,?XSP + 0
   \   000141   AD..         MOV     R5,?XSP + 1
   \   000143   7B01         MOV     R3,#0x1
   \   000145   AA..         MOV     R2,?V1
   \   000147   7965         MOV     R1,#0x65
   \   000149   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1243          }
   \   00014C   7413         MOV     A,#0x13
   \   00014E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000151   7F0C         MOV     R7,#0xc
   \   000153   02....       LJMP    ?BANKED_LEAVE_XDATA
   1244          
   1245          #if defined (MT_SYS_KEY_MANAGEMENT)
   1246          /***************************************************************************************************
   1247           * @fn      MT_ZdoSetLinkKey
   1248           *
   1249           * @brief   Set an application or trust center link key.
   1250           *
   1251           * @param   pBuf  - MT message data
   1252           *
   1253           * @return  void
   1254           ***************************************************************************************************/
   1255          void MT_ZdoSetLinkKey(uint8 *pBuf)
   1256          {
   1257            uint8 cmdId;
   1258            uint8 retValue;
   1259            uint8 *pExtAddr;
   1260            uint8 *pKey;
   1261            uint16 shortAddr;
   1262          
   1263            /* parse header */
   1264            cmdId = pBuf[MT_RPC_POS_CMD1];
   1265            pBuf += MT_RPC_FRAME_HDR_SZ;
   1266          
   1267            /* ShortAddr */
   1268            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1269            pBuf += 2;
   1270          
   1271            /* Extended Addr */
   1272            pExtAddr = pBuf;
   1273            pBuf += Z_EXTADDR_LEN;
   1274          
   1275            /* Key data */
   1276            pKey = pBuf;
   1277          
   1278            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1279          
   1280            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1281          }
   1282          
   1283          /***************************************************************************************************
   1284           * @fn      MT_ZdoRemoveLinkKey
   1285           *
   1286           * @brief   Remove an application or trust center link key.
   1287           *
   1288           * @param   pBuf  - MT message data
   1289           *
   1290           * @return  void
   1291           ***************************************************************************************************/
   1292          void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1293          {
   1294            uint8 cmdId;
   1295            uint8 retValue;
   1296            uint8 *pExtAddr;
   1297          
   1298            /* parse header */
   1299            cmdId = pBuf[MT_RPC_POS_CMD1];
   1300            pBuf += MT_RPC_FRAME_HDR_SZ;
   1301          
   1302            /* ShortAddr */
   1303            pExtAddr = pBuf;
   1304          
   1305            retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1306          
   1307            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1308          }
   1309          
   1310          /***************************************************************************************************
   1311           * @fn      MT_ZdoGetLinkKey
   1312           *
   1313           * @brief   Get the application link key.
   1314           *
   1315           * @param   pBuf  - MT message data
   1316           *
   1317           * @return  void
   1318           ***************************************************************************************************/
   1319          void MT_ZdoGetLinkKey(uint8 *pBuf)
   1320          {
   1321            uint8 cmdId;
   1322            uint8 retValue;
   1323            uint8 *pExtAddr;
   1324            uint8 *retBuf = NULL;
   1325            uint8 len;
   1326            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1327            uint16 apsLinkKeyNvId;
   1328          
   1329            // parse header
   1330            cmdId = pBuf[MT_RPC_POS_CMD1];
   1331            pBuf += MT_RPC_FRAME_HDR_SZ;
   1332          
   1333            // Extended Address
   1334            pExtAddr = pBuf;
   1335          
   1336            // Fetch the key NV ID
   1337            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1338          
   1339            if (retValue == ZSuccess)
   1340            {
   1341              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1342              {
   1343                // retrieve key from NV
   1344                if (osal_nv_read( apsLinkKeyNvId, 0,
   1345                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1346                {
   1347                  retValue = ZNwkUnknownDevice;
   1348                }
   1349              }
   1350              else
   1351              {
   1352                retValue = ZNwkUnknownDevice;
   1353              }
   1354            }
   1355          
   1356            // Construct the response message
   1357            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1358            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1359            {
   1360              if (retValue == ZSuccess)
   1361              {
   1362                // Extended Address
   1363                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1364          
   1365                // Key data
   1366                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
   1367              }
   1368              else
   1369              {
   1370                // Failed case - set the rest fields to all FF
   1371                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
   1372              }
   1373          
   1374              retBuf[0] = retValue;  // Status
   1375          
   1376              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1377          
   1378              // clear retBuf because it contains key data and free allocated memory
   1379              osal_memset(retBuf, 0x00, len);
   1380          
   1381              osal_mem_free(retBuf);
   1382            }
   1383          
   1384            // clear copy of key in RAM
   1385            if (pApsLinkKey != NULL)
   1386            {
   1387              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1388          
   1389              osal_mem_free(pApsLinkKey);
   1390            }
   1391          
   1392            return;
   1393          }
   1394          #endif // MT_SYS_KEY_MANAGEMENT
   1395          
   1396          #if defined (MT_ZDO_MGMT)
   1397          /***************************************************************************************************
   1398           * @fn      MT_ZdoMgmtNwkDiscRequest
   1399           *
   1400           * @brief   Handle a Mgmt Nwk Discovery request.
   1401           *
   1402           * @param   pBuf  - MT message data
   1403           *
   1404           * @return  void
   1405           ***************************************************************************************************/
   1406          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1407          {
   1408            uint8 cmdId;
   1409            uint8 retValue;
   1410            zAddrType_t destAddr;
   1411            uint32 scanChannels;
   1412            uint8 scanDuration, startIndex;
   1413          
   1414            /* parse header */
   1415            cmdId = pBuf[MT_RPC_POS_CMD1];
   1416            pBuf += MT_RPC_FRAME_HDR_SZ;
   1417          
   1418            /* Dev address */
   1419            destAddr.addrMode = Addr16Bit;
   1420            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1421            pBuf += 2;
   1422          
   1423            /* Scan Channels */
   1424            scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   1425            pBuf += 4;
   1426          
   1427            /* Scan Duration */
   1428            scanDuration = *pBuf++;
   1429          
   1430            /* Start Index */
   1431            startIndex = *pBuf;
   1432          
   1433            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1434          
   1435            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1436          }
   1437          
   1438          /***************************************************************************************************
   1439           * @fn      MT_ZdoMgmtLqiRequest
   1440           *
   1441           * @brief   Handle a Mgmt Lqi request.
   1442           *
   1443           * @param   pBuf  - MT message data
   1444           *
   1445           * @return  void
   1446           ***************************************************************************************************/
   1447          void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1448          {
   1449            uint8 cmdId;
   1450            uint8 retValue;
   1451            zAddrType_t destAddr;
   1452            uint8 startIndex;
   1453          
   1454            /* parse header */
   1455            cmdId = pBuf[MT_RPC_POS_CMD1];
   1456            pBuf += MT_RPC_FRAME_HDR_SZ;
   1457          
   1458            /* Dev address */
   1459            destAddr.addrMode = Addr16Bit;
   1460            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1461            pBuf += 2;
   1462          
   1463            /* Start Index */
   1464            startIndex = *pBuf;
   1465          
   1466            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1467          
   1468            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1469          }
   1470          
   1471          /***************************************************************************************************
   1472           * @fn      MT_ZdoMgmtRtgRequest
   1473           *
   1474           * @brief   Handle a Mgmt Rtg request.
   1475           *
   1476           * @param   pBuf  - MT message data
   1477           *
   1478           * @return  void
   1479           ***************************************************************************************************/
   1480          void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1481          {
   1482            uint8 cmdId;
   1483            uint8 retValue;
   1484            zAddrType_t destAddr;
   1485            uint8 startIndex;
   1486          
   1487            /* parse header */
   1488            cmdId = pBuf[MT_RPC_POS_CMD1];
   1489            pBuf += MT_RPC_FRAME_HDR_SZ;
   1490          
   1491            /* Dev Address */
   1492            destAddr.addrMode = Addr16Bit;
   1493            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   1494            pBuf += 2;
   1495          
   1496            /* Start Index */
   1497            startIndex = *pBuf;
   1498          
   1499            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1500          
   1501            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1502          }
   1503          
   1504          /***************************************************************************************************
   1505           * @fn      MT_ZdoMgmtBindRequest
   1506           *
   1507           * @brief   Handle a Mgmt Bind request.
   1508           *
   1509           * @param   pBuf  - MT message data
   1510           *
   1511           * @return  void
   1512           ***************************************************************************************************/
   1513          void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1514          {
   1515            uint8 cmdId;
   1516            uint8 retValue;
   1517            zAddrType_t destAddr;
   1518            uint8 startIndex;
   1519          
   1520            /* parse header */
   1521            cmdId = pBuf[MT_RPC_POS_CMD1];
   1522            pBuf += MT_RPC_FRAME_HDR_SZ;
   1523          
   1524            /* Dev Address */
   1525            destAddr.addrMode = Addr16Bit;
   1526            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1527            pBuf += 2;
   1528          
   1529            /* Start Index */
   1530            startIndex = *pBuf;
   1531          
   1532            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1533          
   1534            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1535          }
   1536          
   1537          /***************************************************************************************************
   1538           * @fn      MT_ZdoMgmtLeaveRequest
   1539           *
   1540           * @brief   Handle a Mgmt Leave request.
   1541           *
   1542           * @param   pBuf  - MT message data
   1543           *
   1544           * @return  void
   1545           ***************************************************************************************************/
   1546          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1547          {
   1548            uint8 cmdId;
   1549            uint8 retValue;
   1550            zAddrType_t destAddr;
   1551            uint8 *pIEEEAddr;
   1552            uint8 removeChildren;
   1553            uint8 rejoin;
   1554          
   1555            /* parse header */
   1556            cmdId = pBuf[MT_RPC_POS_CMD1];
   1557            pBuf += MT_RPC_FRAME_HDR_SZ;
   1558          
   1559            /* Destination Address */
   1560            destAddr.addrMode = Addr16Bit;
   1561            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1562            pBuf += 2;
   1563          
   1564            /* IEEE address */
   1565            pIEEEAddr = pBuf;
   1566            pBuf += Z_EXTADDR_LEN;
   1567          
   1568            /* Rejoin if bit0 is set */
   1569            rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
   1570          
   1571            /* Remove Children if bit1 is set */
   1572            removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
   1573          
   1574            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1575          
   1576            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1577          }
   1578          
   1579          /***************************************************************************************************
   1580           * @fn      MT_ZdoMgmtDirectJoinRequest
   1581           *
   1582           * @brief   Handle a Mgmt Direct Join request.
   1583           *
   1584           * @param   pBuf  - MT message data
   1585           *
   1586           * @return  void
   1587           ***************************************************************************************************/
   1588          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1589          {
   1590            uint8 cmdId;
   1591            uint8 retValue;
   1592            zAddrType_t destAddr;
   1593            uint8 *deviceAddr;
   1594            uint8 capInfo;
   1595          
   1596            /* parse header */
   1597            cmdId = pBuf[MT_RPC_POS_CMD1];
   1598            pBuf += MT_RPC_FRAME_HDR_SZ;
   1599          
   1600            /* Destination Address */
   1601            destAddr.addrMode = Addr16Bit;
   1602            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1603            pBuf += 2;
   1604          
   1605            /* Device Address */
   1606            deviceAddr = pBuf;
   1607            pBuf += Z_EXTADDR_LEN;
   1608          
   1609            /* Capability information */
   1610            capInfo = *pBuf;
   1611          
   1612            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1613          
   1614            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1615          }
   1616          
   1617          /***************************************************************************************************
   1618           * @fn      MT_ZdoMgmtPermitJoinRequest
   1619           *
   1620           * @brief   Handle a Mgmt Permit Join request.
   1621           *
   1622           * @param   pBuf  - MT message data
   1623           *
   1624           * @return  void
   1625           ***************************************************************************************************/
   1626          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1627          {
   1628            uint8 cmdId;
   1629            uint8 dataLn;
   1630            uint8 retValue;
   1631            uint8 duration;
   1632            uint8 tcSignificance;
   1633            zAddrType_t destAddr;
   1634          
   1635            /* parse header */
   1636            dataLn = pBuf[MT_RPC_POS_LEN];
   1637            cmdId = pBuf[MT_RPC_POS_CMD1];
   1638            pBuf += MT_RPC_FRAME_HDR_SZ;
   1639          
   1640            if ( 4 == dataLn )
   1641            {
   1642              /* addrMode was hardwired up to Z-Stack 2.6.0 */
   1643              destAddr.addrMode = afAddr16Bit; 
   1644            }
   1645            else
   1646            {
   1647              /* addrMode is a parameter after Z-Stack 2.6.0 */
   1648              destAddr.addrMode = *pBuf++;
   1649            }
   1650            
   1651            /* Destination Address */
   1652            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1653            pBuf += 2;
   1654          
   1655            /* Duration */
   1656            duration = *pBuf++;
   1657          
   1658            /* Trust center significance */
   1659            tcSignificance = *pBuf;
   1660          
   1661            ignoreIndication = TRUE;
   1662            retValue = (uint8)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1663            ignoreIndication = FALSE;
   1664            
   1665            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1666          }
   1667          
   1668          /***************************************************************************************************
   1669           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1670           *
   1671           * @brief   Handle a Mgmt Nwk Update request.
   1672           *
   1673           * @param   pBuf  - MT message data
   1674           *
   1675           * @return  void
   1676           ***************************************************************************************************/
   1677          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   1678          {
   1679            uint8 cmdId;
   1680            uint8 retValue;
   1681            zAddrType_t destAddr;
   1682            uint32 channelMask;
   1683            uint8 scanDuration, scanCount;
   1684            uint16 nwkManagerAddr;
   1685          
   1686              /* parse header */
   1687            cmdId = pBuf[MT_RPC_POS_CMD1];
   1688            pBuf += MT_RPC_FRAME_HDR_SZ;
   1689          
   1690            /* Destination address */
   1691            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1692            pBuf += 2;
   1693          
   1694            /* Destination address mode */
   1695            destAddr.addrMode = *pBuf++;
   1696          
   1697            channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   1698            pBuf += 4;
   1699          
   1700            /* Scan duration */
   1701            scanDuration = *pBuf++;
   1702          
   1703            /* Scan count */
   1704            scanCount = *pBuf++;
   1705          
   1706            /* NWK manager address */
   1707            nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1708          
   1709            /* Send the Management Network Update request */
   1710            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1711                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1712          
   1713            /*
   1714              Since we don't recevied our own broadcast messages, we should
   1715              send a unicast copy of the message to ourself.
   1716            */
   1717            if ( destAddr.addrMode == AddrBroadcast )
   1718            {
   1719              destAddr.addrMode = Addr16Bit;
   1720              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1721              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1722                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1723            }
   1724          
   1725            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1726          }
   1727          #endif /* MT_ZDO_MGMT */
   1728          
   1729          /***************************************************************************************************
   1730           * @fn      MT_ZdoSendData
   1731           *
   1732           * @brief   Handle a ZDO Send Data request.
   1733           *
   1734           * @param   pBuf  - MT message data
   1735           *
   1736           * @return  void
   1737           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1738          void MT_ZdoSendData( uint8 *pBuf )
   \                     MT_ZdoSendData:
   1739          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1740            uint8 cmdId;
   1741            uint8 retValue;
   1742            zAddrType_t destAddr;
   1743            uint8 transSeq;
   1744            uint8 len;
   1745            uint16 cmd;
   1746          
   1747              /* parse header */
   1748            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   85..82       MOV     DPL,?V0
   \   000011   85..83       MOV     DPH,?V1
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FF           MOV     R7,A
   1749            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000018   E5..         MOV     A,?V0
   \   00001A   2403         ADD     A,#0x3
   \   00001C   F5..         MOV     ?V0,A
   \   00001E   5002         JNC     ??MT_ZdoSendData_0
   \   000020   05..         INC     ?V1
   1750          
   1751            /* Destination address */
   1752            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoSendData_0:
   \   000022   740A         MOV     A,#0xa
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7402         MOV     A,#0x2
   \   000029   F0           MOVX    @DPTR,A
   1753            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00002A   85..82       MOV     DPL,?V0
   \   00002D   85..83       MOV     DPH,?V1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FA           MOV     R2,A
   \   000032   7B00         MOV     R3,#0x0
   \   000034   85..82       MOV     DPL,?V0
   \   000037   85..83       MOV     DPH,?V1
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F8           MOV     R0,A
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   E4           CLR     A
   \   000040   C8           XCH     A,R0
   \   000041   F9           MOV     R1,A
   \   000042   EA           MOV     A,R2
   \   000043   28           ADD     A,R0
   \   000044   F8           MOV     R0,A
   \   000045   EB           MOV     A,R3
   \   000046   39           ADDC    A,R1
   \   000047   F9           MOV     R1,A
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E8           MOV     A,R0
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   E9           MOV     A,R1
   \   000051   F0           MOVX    @DPTR,A
   1754            pBuf += 2;
   \   000052   E5..         MOV     A,?V0
   \   000054   2402         ADD     A,#0x2
   \   000056   F5..         MOV     ?V0,A
   \   000058   5002         JNC     ??MT_ZdoSendData_1
   \   00005A   05..         INC     ?V1
   1755          
   1756            /* Destination address mode */
   1757            transSeq = *pBuf++;
   \                     ??MT_ZdoSendData_1:
   \   00005C   85..82       MOV     DPL,?V0
   \   00005F   85..83       MOV     DPH,?V1
   \   000062   E0           MOVX    A,@DPTR
   \   000063   C0E0         PUSH    A
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   D0E0         POP     A
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   85..82       MOV     DPL,?V0
   \   000071   85..83       MOV     DPH,?V1
   \   000074   A3           INC     DPTR
   \   000075   8582..       MOV     ?V0,DPL
   \   000078   8583..       MOV     ?V1,DPH
   1758          
   1759            /* cmd */
   1760            cmd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00007B   85..82       MOV     DPL,?V0
   \   00007E   85..83       MOV     DPH,?V1
   \   000081   E0           MOVX    A,@DPTR
   \   000082   FA           MOV     R2,A
   \   000083   7B00         MOV     R3,#0x0
   \   000085   85..82       MOV     DPL,?V0
   \   000088   85..83       MOV     DPH,?V1
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F8           MOV     R0,A
   \   00008E   7900         MOV     R1,#0x0
   \   000090   E4           CLR     A
   \   000091   C8           XCH     A,R0
   \   000092   F9           MOV     R1,A
   \   000093   EA           MOV     A,R2
   \   000094   28           ADD     A,R0
   \   000095   F8           MOV     R0,A
   \   000096   EB           MOV     A,R3
   \   000097   39           ADDC    A,R1
   \   000098   F9           MOV     R1,A
   \   000099   88..         MOV     ?V2,R0
   \   00009B   89..         MOV     ?V3,R1
   1761            pBuf += 2;
   \   00009D   E5..         MOV     A,?V0
   \   00009F   2402         ADD     A,#0x2
   \   0000A1   F5..         MOV     ?V0,A
   \   0000A3   5002         JNC     ??MT_ZdoSendData_2
   \   0000A5   05..         INC     ?V1
   1762            len = *pBuf++;
   \                     ??MT_ZdoSendData_2:
   \   0000A7   85..82       MOV     DPL,?V0
   \   0000AA   85..83       MOV     DPH,?V1
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   FE           MOV     R6,A
   \   0000AF   85..82       MOV     DPL,?V0
   \   0000B2   85..83       MOV     DPH,?V1
   \   0000B5   A3           INC     DPTR
   \   0000B6   8582..       MOV     ?V0,DPL
   \   0000B9   8583..       MOV     ?V1,DPH
   1763          
   1764            /* Send the Generic ZDO message request */
   1765            retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \   0000BC                ; Setup parameters for call to function ZDP_SendData
   \   0000BC   75..00       MOV     ?V4,#0x0
   \   0000BF   78..         MOV     R0,#?V4
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C4   78..         MOV     R0,#?V0
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9   78..         MOV     R0,#?V2
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CE   EE           MOV     A,R6
   \   0000CF   F9           MOV     R1,A
   \   0000D0   7407         MOV     A,#0x7
   \   0000D2   12....       LCALL   ?XSTACK_DISP102_8
   \   0000D5   7405         MOV     A,#0x5
   \   0000D7   12....       LCALL   ?XSTACK_DISP101_8
   \   0000DA   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000DD   7405         MOV     A,#0x5
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E2   E9           MOV     A,R1
   \   0000E3   C0E0         PUSH    A
   \   0000E5   7401         MOV     A,#0x1
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   D0E0         POP     A
   \   0000EC   F0           MOVX    @DPTR,A
   1766            /*
   1767              Since we don't recevied our own broadcast messages, we should
   1768              send a unicast copy of the message to ourself.
   1769            */
   1770            if ( destAddr.addrMode == AddrBroadcast )
   \   0000ED   740A         MOV     A,#0xa
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   640F         XRL     A,#0xf
   \   0000F5   704B         JNZ     ??MT_ZdoSendData_3
   1771            {
   1772              destAddr.addrMode = Addr16Bit;
   \   0000F7   740A         MOV     A,#0xa
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   7402         MOV     A,#0x2
   \   0000FE   F0           MOVX    @DPTR,A
   1773              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \   0000FF   90....       MOV     DPTR,#_NIB + 20
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F8           MOV     R0,A
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F9           MOV     R1,A
   \   000107   7402         MOV     A,#0x2
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   E8           MOV     A,R0
   \   00010D   F0           MOVX    @DPTR,A
   \   00010E   A3           INC     DPTR
   \   00010F   E9           MOV     A,R1
   \   000110   F0           MOVX    @DPTR,A
   1774              retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \   000111                ; Setup parameters for call to function ZDP_SendData
   \   000111   75..00       MOV     ?V4,#0x0
   \   000114   78..         MOV     R0,#?V4
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000119   78..         MOV     R0,#?V0
   \   00011B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011E   78..         MOV     R0,#?V2
   \   000120   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000123   EE           MOV     A,R6
   \   000124   F9           MOV     R1,A
   \   000125   7407         MOV     A,#0x7
   \   000127   12....       LCALL   ?XSTACK_DISP102_8
   \   00012A   7405         MOV     A,#0x5
   \   00012C   12....       LCALL   ?XSTACK_DISP101_8
   \   00012F   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000132   7405         MOV     A,#0x5
   \   000134   12....       LCALL   ?DEALLOC_XSTACK8
   \   000137   E9           MOV     A,R1
   \   000138   C0E0         PUSH    A
   \   00013A   7401         MOV     A,#0x1
   \   00013C   12....       LCALL   ?XSTACK_DISP0_8
   \   00013F   D0E0         POP     A
   \   000141   F0           MOVX    @DPTR,A
   1775            }
   1776          
   1777            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoSendData_3:
   \   000142                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000142   7401         MOV     A,#0x1
   \   000144   12....       LCALL   ?XSTACK_DISP102_8
   \   000147   7B01         MOV     R3,#0x1
   \   000149   EF           MOV     A,R7
   \   00014A   FA           MOV     R2,A
   \   00014B   7965         MOV     R1,#0x65
   \   00014D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1778          }
   \   000150   740B         MOV     A,#0xb
   \   000152   12....       LCALL   ?DEALLOC_XSTACK8
   \   000155   7F05         MOV     R7,#0x5
   \   000157   02....       LJMP    ?BANKED_LEAVE_XDATA
   1779          
   1780          /***************************************************************************************************
   1781           * @fn      MT_ZdoNwkAddrOfInterestReq
   1782           *
   1783           * @brief   Handle a ZDO Network Address of Interest request.
   1784           *
   1785           * @param   pBuf  - MT message data
   1786           *
   1787           * @return  void
   1788           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1789          void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
   \                     MT_ZdoNwkAddrOfInterestReq:
   1790          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1791            uint8 cmdId;
   1792            uint8 retValue;
   1793            zAddrType_t destAddr;
   1794            uint16 nwkAddr;
   1795            uint8 cmd;
   1796          
   1797              /* parse header */
   1798            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   85..82       MOV     DPL,?V0
   \   000011   85..83       MOV     DPH,?V1
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V3,A
   1799            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000019   E5..         MOV     A,?V0
   \   00001B   2403         ADD     A,#0x3
   \   00001D   F5..         MOV     ?V0,A
   \   00001F   5002         JNC     ??MT_ZdoNwkAddrOfInterestReq_0
   \   000021   05..         INC     ?V1
   1800          
   1801            /* Destination address */
   1802            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoNwkAddrOfInterestReq_0:
   \   000023   7409         MOV     A,#0x9
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   7402         MOV     A,#0x2
   \   00002A   F0           MOVX    @DPTR,A
   1803            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00002B   85..82       MOV     DPL,?V0
   \   00002E   85..83       MOV     DPH,?V1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FA           MOV     R2,A
   \   000033   7B00         MOV     R3,#0x0
   \   000035   85..82       MOV     DPL,?V0
   \   000038   85..83       MOV     DPH,?V1
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   7900         MOV     R1,#0x0
   \   000040   E4           CLR     A
   \   000041   C8           XCH     A,R0
   \   000042   F9           MOV     R1,A
   \   000043   EA           MOV     A,R2
   \   000044   28           ADD     A,R0
   \   000045   F8           MOV     R0,A
   \   000046   EB           MOV     A,R3
   \   000047   39           ADDC    A,R1
   \   000048   F9           MOV     R1,A
   \   000049   7401         MOV     A,#0x1
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E8           MOV     A,R0
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E9           MOV     A,R1
   \   000052   F0           MOVX    @DPTR,A
   1804            pBuf += 2;
   \   000053   E5..         MOV     A,?V0
   \   000055   2402         ADD     A,#0x2
   \   000057   F5..         MOV     ?V0,A
   \   000059   5002         JNC     ??MT_ZdoNwkAddrOfInterestReq_1
   \   00005B   05..         INC     ?V1
   1805          
   1806            /* Network Address of Interest */
   1807            nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoNwkAddrOfInterestReq_1:
   \   00005D   85..82       MOV     DPL,?V0
   \   000060   85..83       MOV     DPH,?V1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   FA           MOV     R2,A
   \   000065   7B00         MOV     R3,#0x0
   \   000067   85..82       MOV     DPL,?V0
   \   00006A   85..83       MOV     DPH,?V1
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   7900         MOV     R1,#0x0
   \   000072   E4           CLR     A
   \   000073   C8           XCH     A,R0
   \   000074   F9           MOV     R1,A
   \   000075   EA           MOV     A,R2
   \   000076   28           ADD     A,R0
   \   000077   F8           MOV     R0,A
   \   000078   EB           MOV     A,R3
   \   000079   39           ADDC    A,R1
   \   00007A   F9           MOV     R1,A
   \   00007B   E8           MOV     A,R0
   \   00007C   FE           MOV     R6,A
   \   00007D   E9           MOV     A,R1
   \   00007E   FF           MOV     R7,A
   1808            pBuf += 2;
   \   00007F   E5..         MOV     A,?V0
   \   000081   2402         ADD     A,#0x2
   \   000083   F5..         MOV     ?V0,A
   \   000085   5002         JNC     ??MT_ZdoNwkAddrOfInterestReq_2
   \   000087   05..         INC     ?V1
   1809          
   1810            cmd = *pBuf++;
   \                     ??MT_ZdoNwkAddrOfInterestReq_2:
   \   000089   85..82       MOV     DPL,?V0
   \   00008C   85..83       MOV     DPH,?V1
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F5..         MOV     ?V2,A
   \   000092   85..82       MOV     DPL,?V0
   \   000095   85..83       MOV     DPH,?V1
   \   000098   A3           INC     DPTR
   \   000099   8582..       MOV     ?V0,DPL
   \   00009C   8583..       MOV     ?V1,DPH
   1811          
   1812            /* Send the Generic ZDO message request */
   1813            retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \   00009F                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00009F   75..00       MOV     ?V4,#0x0
   \   0000A2   78..         MOV     R0,#?V4
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A7   A9..         MOV     R1,?V2
   \   0000A9   EE           MOV     A,R6
   \   0000AA   FC           MOV     R4,A
   \   0000AB   EF           MOV     A,R7
   \   0000AC   FD           MOV     R5,A
   \   0000AD   7402         MOV     A,#0x2
   \   0000AF   12....       LCALL   ?XSTACK_DISP101_8
   \   0000B2   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA   E9           MOV     A,R1
   \   0000BB   C0E0         PUSH    A
   \   0000BD   85..82       MOV     DPL,?XSP + 0
   \   0000C0   85..83       MOV     DPH,?XSP + 1
   \   0000C3   D0E0         POP     A
   \   0000C5   F0           MOVX    @DPTR,A
   1814          
   1815          
   1816            /*
   1817              Since we don't recevied our own broadcast messages, we should
   1818              send a unicast copy of the message to ourself.
   1819            */
   1820            if ( destAddr.addrMode == AddrBroadcast )
   \   0000C6   7409         MOV     A,#0x9
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   640F         XRL     A,#0xf
   \   0000CE   7041         JNZ     ??MT_ZdoNwkAddrOfInterestReq_3
   1821            {
   1822              destAddr.addrMode = Addr16Bit;
   \   0000D0   7409         MOV     A,#0x9
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   F0           MOVX    @DPTR,A
   1823              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \   0000D8   90....       MOV     DPTR,#_NIB + 20
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   7401         MOV     A,#0x1
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   E8           MOV     A,R0
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   E9           MOV     A,R1
   \   0000E9   F0           MOVX    @DPTR,A
   1824              retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \   0000EA                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   0000EA   75..00       MOV     ?V4,#0x0
   \   0000ED   78..         MOV     R0,#?V4
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F2   A9..         MOV     R1,?V2
   \   0000F4   EE           MOV     A,R6
   \   0000F5   FC           MOV     R4,A
   \   0000F6   EF           MOV     A,R7
   \   0000F7   FD           MOV     R5,A
   \   0000F8   7402         MOV     A,#0x2
   \   0000FA   12....       LCALL   ?XSTACK_DISP101_8
   \   0000FD   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000100   7401         MOV     A,#0x1
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   E9           MOV     A,R1
   \   000106   C0E0         PUSH    A
   \   000108   85..82       MOV     DPL,?XSP + 0
   \   00010B   85..83       MOV     DPH,?XSP + 1
   \   00010E   D0E0         POP     A
   \   000110   F0           MOVX    @DPTR,A
   1825            }
   1826          
   1827            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoNwkAddrOfInterestReq_3:
   \   000111                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000111   AC..         MOV     R4,?XSP + 0
   \   000113   AD..         MOV     R5,?XSP + 1
   \   000115   7B01         MOV     R3,#0x1
   \   000117   AA..         MOV     R2,?V3
   \   000119   7965         MOV     R1,#0x65
   \   00011B   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1828          }
   \   00011E   740A         MOV     A,#0xa
   \   000120   12....       LCALL   ?DEALLOC_XSTACK8
   \   000123   7F05         MOV     R7,#0x5
   \   000125   02....       LJMP    ?BANKED_LEAVE_XDATA
   1829          
   1830          /***************************************************************************************************
   1831           * @fn      MT_ZdoStartupFromApp
   1832           *
   1833           * @brief   Handle a Startup from App request.
   1834           *
   1835           * @param   pBuf  - MT message data
   1836           *
   1837           * @return  void
   1838           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1839          void MT_ZdoStartupFromApp(uint8 *pBuf)
   \                     MT_ZdoStartupFromApp:
   1840          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1841            uint8 cmd0, cmd1, retValue;
   1842          
   1843            /* parse header */
   1844            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V1,A
   1845            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0,A
   1846            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001F   EE           MOV     A,R6
   \   000020   2403         ADD     A,#0x3
   \   000022   FE           MOV     R6,A
   \   000023   5001         JNC     ??MT_ZdoStartupFromApp_0
   \   000025   0F           INC     R7
   1847          
   1848            retValue = ZDOInitDevice(100);
   \                     ??MT_ZdoStartupFromApp_0:
   \   000026                ; Setup parameters for call to function ZDOInitDevice
   \   000026   7A64         MOV     R2,#0x64
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   00002D   E9           MOV     A,R1
   \   00002E   C0E0         PUSH    A
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   D0E0         POP     A
   \   000038   F0           MOVX    @DPTR,A
   1849          
   1850            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \   000039   74E0         MOV     A,#-0x20
   \   00003B   55..         ANL     A,?V1
   \   00003D   6420         XRL     A,#0x20
   \   00003F   700D         JNZ     ??MT_ZdoStartupFromApp_1
   1851            {
   1852              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   \   000041                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000041   AC..         MOV     R4,?XSP + 0
   \   000043   AD..         MOV     R5,?XSP + 1
   \   000045   7B01         MOV     R3,#0x1
   \   000047   AA..         MOV     R2,?V0
   \   000049   7965         MOV     R1,#0x65
   \   00004B   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1853            }
   1854          }
   \                     ??MT_ZdoStartupFromApp_1:
   \   00004E   7401         MOV     A,#0x1
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   \   000053   7F02         MOV     R7,#0x2
   \   000055   02....       LJMP    ?BANKED_LEAVE_XDATA
   1855          
   1856          
   1857          /***************************************************************************************************
   1858           * @fn      MT_ZdoNetworkDiscoveryReq
   1859           *
   1860           * @brief   Handle a ZDO Network Discovery request.
   1861           *
   1862           * @param   pBuf  - MT message data
   1863           *
   1864           * @return  void
   1865           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1866          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
   \                     MT_ZdoNetworkDiscoveryReq:
   1867          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1868            uint8  retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   1869            uint8  cmdId;
   1870            uint32 scanChannels;
   1871          
   1872            /* parse header */
   1873            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0,A
   1874            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000020   EE           MOV     A,R6
   \   000021   2403         ADD     A,#0x3
   \   000023   FE           MOV     R6,A
   \   000024   5001         JNC     ??MT_ZdoNetworkDiscoveryReq_0
   \   000026   0F           INC     R7
   1875          
   1876            /* Packet format */
   1877            /* scan channels (4) | scan duration (1) */
   1878          
   1879            /* Scan channels */
   1880            scanChannels = osal_build_uint32(pBuf, 4);
   \                     ??MT_ZdoNetworkDiscoveryReq_0:
   \   000027                ; Setup parameters for call to function osal_build_uint32
   \   000027   7904         MOV     R1,#0x4
   \   000029   EE           MOV     A,R6
   \   00002A   FA           MOV     R2,A
   \   00002B   EF           MOV     A,R7
   \   00002C   FB           MOV     R3,A
   \   00002D   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000030   8A..         MOV     ?V8,R2
   \   000032   8B..         MOV     ?V9,R3
   \   000034   8C..         MOV     ?V10,R4
   \   000036   8D..         MOV     ?V11,R5
   \   000038   85....       MOV     ?V4,?V8
   \   00003B   85....       MOV     ?V5,?V9
   \   00003E   85....       MOV     ?V6,?V10
   \   000041   85....       MOV     ?V7,?V11
   1881            pBuf += 4;
   \   000044   EE           MOV     A,R6
   \   000045   2404         ADD     A,#0x4
   \   000047   FE           MOV     R6,A
   \   000048   5001         JNC     ??MT_ZdoNetworkDiscoveryReq_1
   \   00004A   0F           INC     R7
   1882          
   1883            retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
   \                     ??MT_ZdoNetworkDiscoveryReq_1:
   \   00004B                ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   AA..         MOV     R2,?V4
   \   000053   AB..         MOV     R3,?V5
   \   000055   AC..         MOV     R4,?V6
   \   000057   AD..         MOV     R5,?V7
   \   000059   12....       LCALL   `??ZDApp_NetworkDiscoveryReq::?relay`; Banked call to: ZDApp_NetworkDiscoveryReq
   \   00005C   E9           MOV     A,R1
   \   00005D   C0E0         PUSH    A
   \   00005F   85..82       MOV     DPL,?XSP + 0
   \   000062   85..83       MOV     DPH,?XSP + 1
   \   000065   D0E0         POP     A
   \   000067   F0           MOVX    @DPTR,A
   1884          
   1885            // Register ZDO callback for MT to handle the network discovery confirm
   1886            // and beacon notification confirm
   1887            ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
   \   000068                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000068   7A..         MOV     R2,#`??MT_ZdoNwkDiscoveryCnfCB::?relay` & 0xff
   \   00006A   7B..         MOV     R3,#(`??MT_ZdoNwkDiscoveryCnfCB::?relay` >> 8) & 0xff
   \   00006C   7902         MOV     R1,#0x2
   \   00006E   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   000071   E9           MOV     A,R1
   1888            ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
   \   000072                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000072   7A..         MOV     R2,#`??MT_ZdoBeaconIndCB::?relay` & 0xff
   \   000074   7B..         MOV     R3,#(`??MT_ZdoBeaconIndCB::?relay` >> 8) & 0xff
   \   000076   7903         MOV     R1,#0x3
   \   000078   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   00007B   E9           MOV     A,R1
   1889          
   1890            /* Build and send back the response */
   1891            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \   00007C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00007C   AC..         MOV     R4,?XSP + 0
   \   00007E   AD..         MOV     R5,?XSP + 1
   \   000080   7B01         MOV     R3,#0x1
   \   000082   AA..         MOV     R2,?V0
   \   000084   7965         MOV     R1,#0x65
   \   000086   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1892          }
   \   000089   7401         MOV     A,#0x1
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   7F0C         MOV     R7,#0xc
   \   000090   02....       LJMP    ?BANKED_LEAVE_XDATA
   1893          
   1894          
   1895          /***************************************************************************************************
   1896           * @fn      MT_ZdoJoinReq
   1897           *
   1898           * @brief   Handle a ZDO Join request.
   1899           *
   1900           * @param   pBuf  - MT message data
   1901           *
   1902           * @return  void
   1903           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1904          void MT_ZdoJoinReq(uint8 *pBuf)
   \                     MT_ZdoJoinReq:
   1905          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1906            uint8  retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   1907            uint8  cmdId;
   1908            uint16 panId;
   1909            uint16 chosenParent;
   1910          
   1911            /* parse header */
   1912            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V2,A
   1913            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000020   EE           MOV     A,R6
   \   000021   2403         ADD     A,#0x3
   \   000023   FE           MOV     R6,A
   \   000024   5001         JNC     ??MT_ZdoJoinReq_0
   \   000026   0F           INC     R7
   1914          
   1915            /* Packet format */
   1916            /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
   1917             * parentDepth (1) | stackProfile  (1)
   1918             */
   1919          
   1920            panId        = BUILD_UINT16(pBuf[1], pBuf[2]);
   \                     ??MT_ZdoJoinReq_0:
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FA           MOV     R2,A
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   7900         MOV     R1,#0x0
   \   00003A   E4           CLR     A
   \   00003B   C8           XCH     A,R0
   \   00003C   F9           MOV     R1,A
   \   00003D   EA           MOV     A,R2
   \   00003E   28           ADD     A,R0
   \   00003F   F8           MOV     R0,A
   \   000040   EB           MOV     A,R3
   \   000041   39           ADDC    A,R1
   \   000042   F9           MOV     R1,A
   \   000043   88..         MOV     ?V0,R0
   \   000045   89..         MOV     ?V1,R1
   1921            chosenParent = BUILD_UINT16(pBuf[11], pBuf[12]);
   \   000047   EE           MOV     A,R6
   \   000048   240B         ADD     A,#0xb
   \   00004A   F582         MOV     DPL,A
   \   00004C   E4           CLR     A
   \   00004D   3F           ADDC    A,R7
   \   00004E   F583         MOV     DPH,A
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FA           MOV     R2,A
   \   000052   7B00         MOV     R3,#0x0
   \   000054   EE           MOV     A,R6
   \   000055   240C         ADD     A,#0xc
   \   000057   F582         MOV     DPL,A
   \   000059   E4           CLR     A
   \   00005A   3F           ADDC    A,R7
   \   00005B   F583         MOV     DPH,A
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F8           MOV     R0,A
   \   00005F   7900         MOV     R1,#0x0
   \   000061   E4           CLR     A
   \   000062   C8           XCH     A,R0
   \   000063   F9           MOV     R1,A
   \   000064   EA           MOV     A,R2
   \   000065   28           ADD     A,R0
   \   000066   F8           MOV     R0,A
   \   000067   EB           MOV     A,R3
   \   000068   39           ADDC    A,R1
   \   000069   F9           MOV     R1,A
   \   00006A   88..         MOV     ?V4,R0
   \   00006C   89..         MOV     ?V5,R1
   1922          
   1923            retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
   \   00006E                ; Setup parameters for call to function ZDApp_JoinReq
   \   00006E   EE           MOV     A,R6
   \   00006F   240E         ADD     A,#0xe
   \   000071   F582         MOV     DPL,A
   \   000073   E4           CLR     A
   \   000074   3F           ADDC    A,R7
   \   000075   F583         MOV     DPH,A
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F5..         MOV     ?V3,A
   \   00007A   78..         MOV     R0,#?V3
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   EE           MOV     A,R6
   \   000080   240D         ADD     A,#0xd
   \   000082   F582         MOV     DPL,A
   \   000084   E4           CLR     A
   \   000085   3F           ADDC    A,R7
   \   000086   F583         MOV     DPH,A
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F5..         MOV     ?V3,A
   \   00008B   78..         MOV     R0,#?V3
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   78..         MOV     R0,#?V4
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   EE           MOV     A,R6
   \   000096   2403         ADD     A,#0x3
   \   000098   FC           MOV     R4,A
   \   000099   E4           CLR     A
   \   00009A   3F           ADDC    A,R7
   \   00009B   FD           MOV     R5,A
   \   00009C   AA..         MOV     R2,?V0
   \   00009E   AB..         MOV     R3,?V1
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   12....       LCALL   `??ZDApp_JoinReq::?relay`; Banked call to: ZDApp_JoinReq
   \   0000A9   7404         MOV     A,#0x4
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
   \   0000AF   C0E0         PUSH    A
   \   0000B1   85..82       MOV     DPL,?XSP + 0
   \   0000B4   85..83       MOV     DPH,?XSP + 1
   \   0000B7   D0E0         POP     A
   \   0000B9   F0           MOVX    @DPTR,A
   1924          
   1925            /* Register for MT to receive Join Confirm */
   1926            ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
   \   0000BA                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   0000BA   7A..         MOV     R2,#`??MT_ZdoJoinCnfCB::?relay` & 0xff
   \   0000BC   7B..         MOV     R3,#(`??MT_ZdoJoinCnfCB::?relay` >> 8) & 0xff
   \   0000BE   7904         MOV     R1,#0x4
   \   0000C0   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   0000C3   E9           MOV     A,R1
   1927          
   1928            /* Build and send back the response */
   1929            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \   0000C4                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000C4   AC..         MOV     R4,?XSP + 0
   \   0000C6   AD..         MOV     R5,?XSP + 1
   \   0000C8   7B01         MOV     R3,#0x1
   \   0000CA   AA..         MOV     R2,?V2
   \   0000CC   7965         MOV     R1,#0x65
   \   0000CE   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1930          
   1931          }
   \   0000D1   7401         MOV     A,#0x1
   \   0000D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D6   7F06         MOV     R7,#0x6
   \   0000D8   02....       LJMP    ?BANKED_LEAVE_XDATA
   1932          
   1933          
   1934          /***************************************************************************************************
   1935           * @fn          MT_ZdoNwkDiscoveryCnfCB
   1936           *
   1937           * @brief       Send an indication to inform host device the completion of
   1938           *              network discovery scan
   1939           *
   1940           * @param       pStr - pointer to a parameter and a structure of parameters
   1941           *
   1942           * @return      void
   1943           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1944          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
   \                     MT_ZdoNwkDiscoveryCnfCB:
   1945          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1946            /* pStr: status (uint8) */
   1947            /* Packet Format */
   1948            /* Status (1) */
   1949          
   1950            // Scan completed. De-register the callback with ZDO
   1951            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   \   000009                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000009   7902         MOV     R1,#0x2
   \   00000B   12....       LCALL   `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   \   00000E   E9           MOV     A,R1
   1952            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   \   00000F                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000F   7903         MOV     R1,#0x3
   \   000011   12....       LCALL   `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   \   000014   E9           MOV     A,R1
   1953          
   1954            // Send the buffered beacon indication
   1955            MT_ZdoBeaconIndCB ( NULL );
   \   000015                ; Setup parameters for call to function MT_ZdoBeaconIndCB
   \   000015   7A00         MOV     R2,#0x0
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   `??MT_ZdoBeaconIndCB::?relay`; Banked call to: MT_ZdoBeaconIndCB
   1956          
   1957            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1958                                                   MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
   \   00001C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001C   EE           MOV     A,R6
   \   00001D   FC           MOV     R4,A
   \   00001E   EF           MOV     A,R7
   \   00001F   FD           MOV     R5,A
   \   000020   7B01         MOV     R3,#0x1
   \   000022   7AC7         MOV     R2,#-0x39
   \   000024   7945         MOV     R1,#0x45
   \   000026   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1959            return NULL;
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   7F01         MOV     R7,#0x1
   \   00002F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1960          }
   1961          
   1962          /***************************************************************************************************
   1963           * @fn          MT_ZdoBeaconIndCB
   1964           *
   1965           * @brief       Send an indication to host device of a beacon notification
   1966           *
   1967           * @param       pStr -  pointer to a parameter and a structure of parameters
   1968           *
   1969           * @return      void
   1970           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1971          void *MT_ZdoBeaconIndCB ( void *pStr )
   \                     MT_ZdoBeaconIndCB:
   1972          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   1973            zdoBeaconInd_t *pBeacon = pStr;
   \   000009   85....       MOV     ?V0,?V2
   \   00000C   85....       MOV     ?V1,?V3
   1974            uint8 *pTmp;
   1975          
   1976            /* Packet Format */
   1977            /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
   1978          
   1979            if( pStr != NULL)
   \   00000F   E5..         MOV     A,?V2
   \   000011   45..         ORL     A,?V3
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??MT_ZdoBeaconIndCB_0 & 0xFFFF
   1980            {
   1981              if( pBeaconIndBuf == NULL )
   \   000018   90....       MOV     DPTR,#pBeaconIndBuf
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   E8           MOV     A,R0
   \   000021   49           ORL     A,R1
   \   000022   7030         JNZ     ??MT_ZdoBeaconIndCB_1
   1982              {
   1983                // If pBeaconIndBuf has not been allocated yet
   1984                // allocate memory now with MAX_UART_TX_BUFF
   1985                if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   7AFB         MOV     R2,#-0x5
   \   000026   7B00         MOV     R3,#0x0
   \   000028   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002B   90....       MOV     DPTR,#pBeaconIndBuf
   \   00002E   EA           MOV     A,R2
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   EB           MOV     A,R3
   \   000032   F0           MOVX    @DPTR,A
   \   000033   90....       MOV     DPTR,#pBeaconIndBuf
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   E8           MOV     A,R0
   \   00003C   49           ORL     A,R1
   \   00003D   7007         JNZ     ??MT_ZdoBeaconIndCB_2
   1986                {
   1987                  // Memory failure
   1988                  return NULL;
   \   00003F   7A00         MOV     R2,#0x0
   \   000041   7B00         MOV     R3,#0x0
   \   000043   02....       LJMP    ??MT_ZdoBeaconIndCB_3 & 0xFFFF
   1989                }
   1990                pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
   \                     ??MT_ZdoBeaconIndCB_2:
   \   000046   90....       MOV     DPTR,#pBeaconIndBuf
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F583         MOV     DPH,A
   \   00004F   8882         MOV     DPL,R0
   \   000051   7400         MOV     A,#0x0
   \   000053   F0           MOVX    @DPTR,A
   1991              }
   1992          
   1993              // Fill in the buffer with the beacon indication
   1994              pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
   \                     ??MT_ZdoBeaconIndCB_1:
   \   000054   90....       MOV     DPTR,#pBeaconIndBuf
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F8           MOV     R0,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F583         MOV     DPH,A
   \   00005D   8882         MOV     DPL,R0
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F8           MOV     R0,A
   \   000061   7900         MOV     R1,#0x0
   \   000063   E8           MOV     A,R0
   \   000064   75F015       MOV     B,#0x15
   \   000067   A4           MUL     AB
   \   000068   C8           XCH     A,R0
   \   000069   AAF0         MOV     R2,B
   \   00006B   75F000       MOV     B,#0x0
   \   00006E   A4           MUL     AB
   \   00006F   2A           ADD     A,R2
   \   000070   FA           MOV     R2,A
   \   000071   75F015       MOV     B,#0x15
   \   000074   E9           MOV     A,R1
   \   000075   A4           MUL     AB
   \   000076   2A           ADD     A,R2
   \   000077   F9           MOV     R1,A
   \   000078   90....       MOV     DPTR,#pBeaconIndBuf
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   28           ADD     A,R0
   \   00007D   FA           MOV     R2,A
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   39           ADDC    A,R1
   \   000081   8A82         MOV     DPL,R2
   \   000083   F583         MOV     DPH,A
   \   000085   A3           INC     DPTR
   \   000086   AE82         MOV     R6,DPL
   \   000088   AF83         MOV     R7,DPH
   1995              *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
   \   00008A   85..82       MOV     DPL,?V0
   \   00008D   85..83       MOV     DPH,?V1
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F8           MOV     R0,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095   E8           MOV     A,R0
   \   000096   C0E0         PUSH    A
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   D0E0         POP     A
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   A3           INC     DPTR
   \   0000A4   AE82         MOV     R6,DPL
   \   0000A6   AF83         MOV     R7,DPH
   1996              *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
   \   0000A8   85..82       MOV     DPL,?V0
   \   0000AB   85..83       MOV     DPH,?V1
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F8           MOV     R0,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   E4           CLR     A
   \   0000B4   C9           XCH     A,R1
   \   0000B5   F8           MOV     R0,A
   \   0000B6   E8           MOV     A,R0
   \   0000B7   C0E0         PUSH    A
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   D0E0         POP     A
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   8E82         MOV     DPL,R6
   \   0000C2   8F83         MOV     DPH,R7
   \   0000C4   A3           INC     DPTR
   \   0000C5   AE82         MOV     R6,DPL
   \   0000C7   AF83         MOV     R7,DPH
   1997              *pTmp++ = LO_UINT16(pBeacon->panID);
   \   0000C9   85..82       MOV     DPL,?V0
   \   0000CC   85..83       MOV     DPH,?V1
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F8           MOV     R0,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F9           MOV     R1,A
   \   0000D6   E8           MOV     A,R0
   \   0000D7   C0E0         PUSH    A
   \   0000D9   8E82         MOV     DPL,R6
   \   0000DB   8F83         MOV     DPH,R7
   \   0000DD   D0E0         POP     A
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   8E82         MOV     DPL,R6
   \   0000E2   8F83         MOV     DPH,R7
   \   0000E4   A3           INC     DPTR
   \   0000E5   AE82         MOV     R6,DPL
   \   0000E7   AF83         MOV     R7,DPH
   1998              *pTmp++ = HI_UINT16(pBeacon->panID);
   \   0000E9   85..82       MOV     DPL,?V0
   \   0000EC   85..83       MOV     DPH,?V1
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F8           MOV     R0,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F9           MOV     R1,A
   \   0000F6   E4           CLR     A
   \   0000F7   C9           XCH     A,R1
   \   0000F8   F8           MOV     R0,A
   \   0000F9   E8           MOV     A,R0
   \   0000FA   C0E0         PUSH    A
   \   0000FC   8E82         MOV     DPL,R6
   \   0000FE   8F83         MOV     DPH,R7
   \   000100   D0E0         POP     A
   \   000102   F0           MOVX    @DPTR,A
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   A3           INC     DPTR
   \   000108   AE82         MOV     R6,DPL
   \   00010A   AF83         MOV     R7,DPH
   1999              *pTmp++ = pBeacon->logicalChannel;
   \   00010C   85..82       MOV     DPL,?V0
   \   00010F   85..83       MOV     DPH,?V1
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   E0           MOVX    A,@DPTR
   \   000117   C0E0         PUSH    A
   \   000119   8E82         MOV     DPL,R6
   \   00011B   8F83         MOV     DPH,R7
   \   00011D   D0E0         POP     A
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   8E82         MOV     DPL,R6
   \   000122   8F83         MOV     DPH,R7
   \   000124   A3           INC     DPTR
   \   000125   AE82         MOV     R6,DPL
   \   000127   AF83         MOV     R7,DPH
   2000              *pTmp++ = pBeacon->permitJoining;
   \   000129   85..82       MOV     DPL,?V0
   \   00012C   85..83       MOV     DPH,?V1
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   C0E0         PUSH    A
   \   000137   8E82         MOV     DPL,R6
   \   000139   8F83         MOV     DPH,R7
   \   00013B   D0E0         POP     A
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   8E82         MOV     DPL,R6
   \   000140   8F83         MOV     DPH,R7
   \   000142   A3           INC     DPTR
   \   000143   AE82         MOV     R6,DPL
   \   000145   AF83         MOV     R7,DPH
   2001              *pTmp++ = pBeacon->routerCapacity;
   \   000147   85..82       MOV     DPL,?V0
   \   00014A   85..83       MOV     DPH,?V1
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   C0E0         PUSH    A
   \   000156   8E82         MOV     DPL,R6
   \   000158   8F83         MOV     DPH,R7
   \   00015A   D0E0         POP     A
   \   00015C   F0           MOVX    @DPTR,A
   \   00015D   8E82         MOV     DPL,R6
   \   00015F   8F83         MOV     DPH,R7
   \   000161   A3           INC     DPTR
   \   000162   AE82         MOV     R6,DPL
   \   000164   AF83         MOV     R7,DPH
   2002              *pTmp++ = pBeacon->deviceCapacity;
   \   000166   85..82       MOV     DPL,?V0
   \   000169   85..83       MOV     DPH,?V1
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   E0           MOVX    A,@DPTR
   \   000174   C0E0         PUSH    A
   \   000176   8E82         MOV     DPL,R6
   \   000178   8F83         MOV     DPH,R7
   \   00017A   D0E0         POP     A
   \   00017C   F0           MOVX    @DPTR,A
   \   00017D   8E82         MOV     DPL,R6
   \   00017F   8F83         MOV     DPH,R7
   \   000181   A3           INC     DPTR
   \   000182   AE82         MOV     R6,DPL
   \   000184   AF83         MOV     R7,DPH
   2003              *pTmp++ = pBeacon->protocolVersion;
   \   000186   85..82       MOV     DPL,?V0
   \   000189   85..83       MOV     DPH,?V1
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   E0           MOVX    A,@DPTR
   \   000195   C0E0         PUSH    A
   \   000197   8E82         MOV     DPL,R6
   \   000199   8F83         MOV     DPH,R7
   \   00019B   D0E0         POP     A
   \   00019D   F0           MOVX    @DPTR,A
   \   00019E   8E82         MOV     DPL,R6
   \   0001A0   8F83         MOV     DPH,R7
   \   0001A2   A3           INC     DPTR
   \   0001A3   AE82         MOV     R6,DPL
   \   0001A5   AF83         MOV     R7,DPH
   2004              *pTmp++ = pBeacon->stackProfile;
   \   0001A7   85..82       MOV     DPL,?V0
   \   0001AA   85..83       MOV     DPH,?V1
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   C0E0         PUSH    A
   \   0001B9   8E82         MOV     DPL,R6
   \   0001BB   8F83         MOV     DPH,R7
   \   0001BD   D0E0         POP     A
   \   0001BF   F0           MOVX    @DPTR,A
   \   0001C0   8E82         MOV     DPL,R6
   \   0001C2   8F83         MOV     DPH,R7
   \   0001C4   A3           INC     DPTR
   \   0001C5   AE82         MOV     R6,DPL
   \   0001C7   AF83         MOV     R7,DPH
   2005              *pTmp++ = pBeacon->LQI;
   \   0001C9   85..82       MOV     DPL,?V0
   \   0001CC   85..83       MOV     DPH,?V1
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   A3           INC     DPTR
   \   0001D6   A3           INC     DPTR
   \   0001D7   A3           INC     DPTR
   \   0001D8   A3           INC     DPTR
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   C0E0         PUSH    A
   \   0001DC   8E82         MOV     DPL,R6
   \   0001DE   8F83         MOV     DPH,R7
   \   0001E0   D0E0         POP     A
   \   0001E2   F0           MOVX    @DPTR,A
   \   0001E3   8E82         MOV     DPL,R6
   \   0001E5   8F83         MOV     DPH,R7
   \   0001E7   A3           INC     DPTR
   \   0001E8   AE82         MOV     R6,DPL
   \   0001EA   AF83         MOV     R7,DPH
   2006              *pTmp++ = pBeacon->depth;
   \   0001EC   E5..         MOV     A,?V0
   \   0001EE   240B         ADD     A,#0xb
   \   0001F0   F582         MOV     DPL,A
   \   0001F2   E4           CLR     A
   \   0001F3   35..         ADDC    A,?V1
   \   0001F5   F583         MOV     DPH,A
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   C0E0         PUSH    A
   \   0001FA   8E82         MOV     DPL,R6
   \   0001FC   8F83         MOV     DPH,R7
   \   0001FE   D0E0         POP     A
   \   000200   F0           MOVX    @DPTR,A
   \   000201   8E82         MOV     DPL,R6
   \   000203   8F83         MOV     DPH,R7
   \   000205   A3           INC     DPTR
   \   000206   AE82         MOV     R6,DPL
   \   000208   AF83         MOV     R7,DPH
   2007              *pTmp++ = pBeacon->updateID;
   \   00020A   E5..         MOV     A,?V0
   \   00020C   240C         ADD     A,#0xc
   \   00020E   F582         MOV     DPL,A
   \   000210   E4           CLR     A
   \   000211   35..         ADDC    A,?V1
   \   000213   F583         MOV     DPH,A
   \   000215   E0           MOVX    A,@DPTR
   \   000216   C0E0         PUSH    A
   \   000218   8E82         MOV     DPL,R6
   \   00021A   8F83         MOV     DPH,R7
   \   00021C   D0E0         POP     A
   \   00021E   F0           MOVX    @DPTR,A
   \   00021F   8E82         MOV     DPL,R6
   \   000221   8F83         MOV     DPH,R7
   \   000223   A3           INC     DPTR
   \   000224   AE82         MOV     R6,DPL
   \   000226   AF83         MOV     R7,DPH
   2008              osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
   \   000228                ; Setup parameters for call to function osal_memcpy
   \   000228   E5..         MOV     A,?V0
   \   00022A   240D         ADD     A,#0xd
   \   00022C   F5..         MOV     ?V4,A
   \   00022E   E4           CLR     A
   \   00022F   35..         ADDC    A,?V1
   \   000231   F5..         MOV     ?V5,A
   \   000233   75..00       MOV     ?V6,#0x0
   \   000236   78..         MOV     R0,#?V4
   \   000238   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00023B   7C08         MOV     R4,#0x8
   \   00023D   7D00         MOV     R5,#0x0
   \   00023F   EE           MOV     A,R6
   \   000240   FA           MOV     R2,A
   \   000241   EF           MOV     A,R7
   \   000242   FB           MOV     R3,A
   \   000243   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000246   7403         MOV     A,#0x3
   \   000248   12....       LCALL   ?DEALLOC_XSTACK8
   2009          
   2010              pBeaconIndBuf[0] += 1; // Increment the devCnt
   \   00024B   90....       MOV     DPTR,#pBeaconIndBuf
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   F8           MOV     R0,A
   \   000250   A3           INC     DPTR
   \   000251   E0           MOVX    A,@DPTR
   \   000252   F583         MOV     DPH,A
   \   000254   8882         MOV     DPL,R0
   \   000256   E0           MOVX    A,@DPTR
   \   000257   2401         ADD     A,#0x1
   \   000259   F0           MOVX    @DPTR,A
   2011          
   2012              // Check if the buffer can fit in another beacon
   2013              if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
   \   00025A   90....       MOV     DPTR,#pBeaconIndBuf
   \   00025D   E0           MOVX    A,@DPTR
   \   00025E   F8           MOV     R0,A
   \   00025F   A3           INC     DPTR
   \   000260   E0           MOVX    A,@DPTR
   \   000261   F583         MOV     DPH,A
   \   000263   8882         MOV     DPL,R0
   \   000265   E0           MOVX    A,@DPTR
   \   000266   F8           MOV     R0,A
   \   000267   7900         MOV     R1,#0x0
   \   000269   E8           MOV     A,R0
   \   00026A   75F015       MOV     B,#0x15
   \   00026D   A4           MUL     AB
   \   00026E   C8           XCH     A,R0
   \   00026F   AAF0         MOV     R2,B
   \   000271   75F000       MOV     B,#0x0
   \   000274   A4           MUL     AB
   \   000275   2A           ADD     A,R2
   \   000276   FA           MOV     R2,A
   \   000277   75F015       MOV     B,#0x15
   \   00027A   E9           MOV     A,R1
   \   00027B   A4           MUL     AB
   \   00027C   2A           ADD     A,R2
   \   00027D   F9           MOV     R1,A
   \   00027E   E8           MOV     A,R0
   \   00027F   2416         ADD     A,#0x16
   \   000281   F8           MOV     R0,A
   \   000282   5001         JNC     ??MT_ZdoBeaconIndCB_4
   \   000284   09           INC     R1
   \                     ??MT_ZdoBeaconIndCB_4:
   \   000285   C3           CLR     C
   \   000286   E8           MOV     A,R0
   \   000287   94FC         SUBB    A,#-0x4
   \   000289   E9           MOV     A,R1
   \   00028A   9400         SUBB    A,#0x0
   \   00028C   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00028E   65D0         XRL     A,PSW
   \   000290   33           RLC     A
   \   000291   5003         JNC     $+5
   \   000293   02....       LJMP    ??MT_ZdoBeaconIndCB_5 & 0xFFFF
   2014              {
   2015                // Packet full, send the packet over MT
   2016                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2017                                             MT_ZDO_BEACON_NOTIFY_IND,
   2018                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000296                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000296   90....       MOV     DPTR,#pBeaconIndBuf
   \   000299   E0           MOVX    A,@DPTR
   \   00029A   FC           MOV     R4,A
   \   00029B   A3           INC     DPTR
   \   00029C   E0           MOVX    A,@DPTR
   \   00029D   FD           MOV     R5,A
   \   00029E   75F015       MOV     B,#0x15
   \   0002A1   90....       MOV     DPTR,#pBeaconIndBuf
   \   0002A4   E0           MOVX    A,@DPTR
   \   0002A5   F8           MOV     R0,A
   \   0002A6   A3           INC     DPTR
   \   0002A7   E0           MOVX    A,@DPTR
   \   0002A8   F583         MOV     DPH,A
   \   0002AA   8882         MOV     DPL,R0
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   A4           MUL     AB
   \   0002AE   2401         ADD     A,#0x1
   \   0002B0   FB           MOV     R3,A
   \   0002B1   7AC5         MOV     R2,#-0x3b
   \   0002B3   7945         MOV     R1,#0x45
   \   0002B5   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2019                pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
   \   0002B8   90....       MOV     DPTR,#pBeaconIndBuf
   \   0002BB   E0           MOVX    A,@DPTR
   \   0002BC   F8           MOV     R0,A
   \   0002BD   A3           INC     DPTR
   \   0002BE   E0           MOVX    A,@DPTR
   \   0002BF   F583         MOV     DPH,A
   \   0002C1   8882         MOV     DPL,R0
   \   0002C3   7400         MOV     A,#0x0
   \   0002C5   F0           MOVX    @DPTR,A
   \   0002C6   805D         SJMP    ??MT_ZdoBeaconIndCB_5
   2020              }
   2021            }
   2022            else
   2023            {
   2024              if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
   \                     ??MT_ZdoBeaconIndCB_0:
   \   0002C8   90....       MOV     DPTR,#pBeaconIndBuf
   \   0002CB   E0           MOVX    A,@DPTR
   \   0002CC   F8           MOV     R0,A
   \   0002CD   A3           INC     DPTR
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   F9           MOV     R1,A
   \   0002D0   E8           MOV     A,R0
   \   0002D1   49           ORL     A,R1
   \   0002D2   6030         JZ      ??MT_ZdoBeaconIndCB_6
   \   0002D4   90....       MOV     DPTR,#pBeaconIndBuf
   \   0002D7   E0           MOVX    A,@DPTR
   \   0002D8   F8           MOV     R0,A
   \   0002D9   A3           INC     DPTR
   \   0002DA   E0           MOVX    A,@DPTR
   \   0002DB   F583         MOV     DPH,A
   \   0002DD   8882         MOV     DPL,R0
   \   0002DF   E0           MOVX    A,@DPTR
   \   0002E0   6022         JZ      ??MT_ZdoBeaconIndCB_6
   2025              {
   2026                // End of beacon indication, send the packet over MT
   2027                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2028                                             MT_ZDO_BEACON_NOTIFY_IND,
   2029                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   0002E2                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002E2   90....       MOV     DPTR,#pBeaconIndBuf
   \   0002E5   E0           MOVX    A,@DPTR
   \   0002E6   FC           MOV     R4,A
   \   0002E7   A3           INC     DPTR
   \   0002E8   E0           MOVX    A,@DPTR
   \   0002E9   FD           MOV     R5,A
   \   0002EA   75F015       MOV     B,#0x15
   \   0002ED   90....       MOV     DPTR,#pBeaconIndBuf
   \   0002F0   E0           MOVX    A,@DPTR
   \   0002F1   F8           MOV     R0,A
   \   0002F2   A3           INC     DPTR
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   F583         MOV     DPH,A
   \   0002F6   8882         MOV     DPL,R0
   \   0002F8   E0           MOVX    A,@DPTR
   \   0002F9   A4           MUL     AB
   \   0002FA   2401         ADD     A,#0x1
   \   0002FC   FB           MOV     R3,A
   \   0002FD   7AC5         MOV     R2,#-0x3b
   \   0002FF   7945         MOV     R1,#0x45
   \   000301   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2030              }
   2031              // Free the allocated memory
   2032              if(pBeaconIndBuf != NULL)
   \                     ??MT_ZdoBeaconIndCB_6:
   \   000304   90....       MOV     DPTR,#pBeaconIndBuf
   \   000307   E0           MOVX    A,@DPTR
   \   000308   F8           MOV     R0,A
   \   000309   A3           INC     DPTR
   \   00030A   E0           MOVX    A,@DPTR
   \   00030B   F9           MOV     R1,A
   \   00030C   E8           MOV     A,R0
   \   00030D   49           ORL     A,R1
   \   00030E   6015         JZ      ??MT_ZdoBeaconIndCB_5
   2033              {
   2034                osal_mem_free(pBeaconIndBuf);
   \   000310                ; Setup parameters for call to function osal_mem_free
   \   000310   90....       MOV     DPTR,#pBeaconIndBuf
   \   000313   E0           MOVX    A,@DPTR
   \   000314   FA           MOV     R2,A
   \   000315   A3           INC     DPTR
   \   000316   E0           MOVX    A,@DPTR
   \   000317   FB           MOV     R3,A
   \   000318   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2035                pBeaconIndBuf = NULL;
   \   00031B   90....       MOV     DPTR,#pBeaconIndBuf
   \   00031E   7400         MOV     A,#0x0
   \   000320   F0           MOVX    @DPTR,A
   \   000321   A3           INC     DPTR
   \   000322   7400         MOV     A,#0x0
   \   000324   F0           MOVX    @DPTR,A
   2036              }
   2037            }
   2038          
   2039            return NULL;
   \                     ??MT_ZdoBeaconIndCB_5:
   \   000325   7A00         MOV     R2,#0x0
   \   000327   7B00         MOV     R3,#0x0
   \                     ??MT_ZdoBeaconIndCB_3:
   \   000329   7F07         MOV     R7,#0x7
   \   00032B   02....       LJMP    ?BANKED_LEAVE_XDATA
   2040          }
   2041          
   2042          
   2043          
   2044          /***************************************************************************************************
   2045           * @fn          MT_ZdoJoinCnfCB
   2046           *
   2047           * @brief       Handle the ZDO Join Confirm from ZDO
   2048           *
   2049           * @param       pStr - pointer to a parameter and a structure of parameters
   2050           *
   2051           * @return      void
   2052           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2053          void *MT_ZdoJoinCnfCB ( void *pStr )
   \                     MT_ZdoJoinCnfCB:
   2054          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   2055            /* pStr: zdoJoinCnf_t* */
   2056            /* Packet Format */
   2057            /* Status (1) | device addr (2) | parent addr (2) */
   2058          
   2059            uint8 buf[MT_ZDO_JOIN_CNF_LEN];
   2060            zdoJoinCnf_t *joinCnf = pStr;
   \   00000E   AE..         MOV     R6,?V0
   \   000010   AF..         MOV     R7,?V1
   2061          
   2062            /* Join Complete. De-register the callback with ZDO */
   2063            ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
   \   000012                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000012   7904         MOV     R1,#0x4
   \   000014   12....       LCALL   `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   \   000017   E9           MOV     A,R1
   2064          
   2065            buf[0] = joinCnf->status;
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C0E0         PUSH    A
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   D0E0         POP     A
   \   000027   F0           MOVX    @DPTR,A
   2066            buf[1] = LO_UINT16( joinCnf->deviceAddr );
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F9           MOV     R1,A
   \   000032   E8           MOV     A,R0
   \   000033   C0E0         PUSH    A
   \   000035   7401         MOV     A,#0x1
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   D0E0         POP     A
   \   00003C   F0           MOVX    @DPTR,A
   2067            buf[2] = HI_UINT16( joinCnf->deviceAddr );
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F8           MOV     R0,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   E4           CLR     A
   \   000048   C9           XCH     A,R1
   \   000049   F8           MOV     R0,A
   \   00004A   E8           MOV     A,R0
   \   00004B   C0E0         PUSH    A
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   D0E0         POP     A
   \   000054   F0           MOVX    @DPTR,A
   2068            buf[3] = LO_UINT16( joinCnf->parentAddr );
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F8           MOV     R0,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   E8           MOV     A,R0
   \   000062   C0E0         PUSH    A
   \   000064   7403         MOV     A,#0x3
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   D0E0         POP     A
   \   00006B   F0           MOVX    @DPTR,A
   2069            buf[4] = HI_UINT16( joinCnf->parentAddr );
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F8           MOV     R0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   E4           CLR     A
   \   000079   C9           XCH     A,R1
   \   00007A   F8           MOV     R0,A
   \   00007B   E8           MOV     A,R0
   \   00007C   C0E0         PUSH    A
   \   00007E   7404         MOV     A,#0x4
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   D0E0         POP     A
   \   000085   F0           MOVX    @DPTR,A
   2070          
   2071            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2072                                         MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
   \   000086                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000086   AC..         MOV     R4,?XSP + 0
   \   000088   AD..         MOV     R5,?XSP + 1
   \   00008A   7B05         MOV     R3,#0x5
   \   00008C   7AC6         MOV     R2,#-0x3a
   \   00008E   7945         MOV     R1,#0x45
   \   000090   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2073          
   2074            return NULL;
   \   000093   7A00         MOV     R2,#0x0
   \   000095   7B00         MOV     R3,#0x0
   \   000097   7405         MOV     A,#0x5
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   7F02         MOV     R7,#0x2
   \   00009E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2075          }
   2076          
   2077          /*************************************************************************************************
   2078           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   2079           *
   2080           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   2081           *
   2082           * @param   pBuf  - MT message data
   2083           *
   2084           * @return  void
   2085           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2086          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   \                     MT_ZdoRegisterForZDOMsg:
   2087          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2088            uint8 cmd0, cmd1, tmp;
   2089            uint16 cId;
   2090          
   2091            /* parse header */
   2092            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V2,A
   2093            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V3,A
   2094            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001F   EE           MOV     A,R6
   \   000020   2403         ADD     A,#0x3
   \   000022   FE           MOV     R6,A
   \   000023   5001         JNC     ??MT_ZdoRegisterForZDOMsg_0
   \   000025   0F           INC     R7
   2095          
   2096            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_ZdoRegisterForZDOMsg_0:
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   88..         MOV     ?V0,R0
   \   000042   89..         MOV     ?V1,R1
   2097            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   \   000044                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000044   AA..         MOV     R2,?V0
   \   000046   AB..         MOV     R3,?V1
   \   000048   90....       MOV     DPTR,#MT_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000050   E9           MOV     A,R1
   \   000051   C0E0         PUSH    A
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   D0E0         POP     A
   \   00005B   F0           MOVX    @DPTR,A
   2098          
   2099            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \   00005C   74E0         MOV     A,#-0x20
   \   00005E   55..         ANL     A,?V2
   \   000060   6420         XRL     A,#0x20
   \   000062   700D         JNZ     ??MT_ZdoRegisterForZDOMsg_1
   2100            {
   2101              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   000064                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000064   AC..         MOV     R4,?XSP + 0
   \   000066   AD..         MOV     R5,?XSP + 1
   \   000068   7B01         MOV     R3,#0x1
   \   00006A   AA..         MOV     R2,?V3
   \   00006C   7965         MOV     R1,#0x65
   \   00006E   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2102            }
   2103          }
   \                     ??MT_ZdoRegisterForZDOMsg_1:
   \   000071   7401         MOV     A,#0x1
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   7F04         MOV     R7,#0x4
   \   000078   02....       LJMP    ?BANKED_LEAVE_XDATA
   2104          
   2105          /*************************************************************************************************
   2106           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   2107           *
   2108           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   2109           *
   2110           * @param   pBuf  - MT message data
   2111           *
   2112           * @return  void
   2113           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2114          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   \                     MT_ZdoRemoveRegisteredCB:
   2115          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2116            uint8 cmd0, cmd1, tmp;
   2117            uint16 cId;
   2118          
   2119            /* parse header */
   2120            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V2,A
   2121            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V3,A
   2122            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001F   EE           MOV     A,R6
   \   000020   2403         ADD     A,#0x3
   \   000022   FE           MOV     R6,A
   \   000023   5001         JNC     ??MT_ZdoRemoveRegisteredCB_0
   \   000025   0F           INC     R7
   2123          
   2124            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_ZdoRemoveRegisteredCB_0:
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   88..         MOV     ?V0,R0
   \   000042   89..         MOV     ?V1,R1
   2125            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   \   000044                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   000044   AA..         MOV     R2,?V0
   \   000046   AB..         MOV     R3,?V1
   \   000048   90....       MOV     DPTR,#MT_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??ZDO_RemoveRegisteredCB::?relay`; Banked call to: ZDO_RemoveRegisteredCB
   \   000050   E9           MOV     A,R1
   \   000051   C0E0         PUSH    A
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   D0E0         POP     A
   \   00005B   F0           MOVX    @DPTR,A
   2126          
   2127            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \   00005C   74E0         MOV     A,#-0x20
   \   00005E   55..         ANL     A,?V2
   \   000060   6420         XRL     A,#0x20
   \   000062   700D         JNZ     ??MT_ZdoRemoveRegisteredCB_1
   2128            {
   2129              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   000064                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000064   AC..         MOV     R4,?XSP + 0
   \   000066   AD..         MOV     R5,?XSP + 1
   \   000068   7B01         MOV     R3,#0x1
   \   00006A   AA..         MOV     R2,?V3
   \   00006C   7965         MOV     R1,#0x65
   \   00006E   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2130            }
   2131          }
   \                     ??MT_ZdoRemoveRegisteredCB_1:
   \   000071   7401         MOV     A,#0x1
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   7F04         MOV     R7,#0x4
   \   000078   02....       LJMP    ?BANKED_LEAVE_XDATA
   2132          
   2133          #endif /* MT_ZDO_FUNC */
   2134          
   2135          
   2136          /***************************************************************************************************
   2137           * Callback handling function
   2138           ***************************************************************************************************/
   2139          
   2140          #if defined (MT_ZDO_CB_FUNC)
   2141          
   2142          /***************************************************************************************************
   2143           * @fn      MT_ZdoStateChangeCB
   2144           *
   2145           * @brief   Handle state change OSAL message from ZDO.
   2146           *
   2147           * @param   pMsg  - Message data
   2148           *
   2149           * @return  void
   2150           */
   2151          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   2152          {
   2153            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2154                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   2155          }
   2156          
   2157          /***************************************************************************************************
   2158           * @fn     MT_ZdoDirectCB()
   2159           *
   2160           * @brief  ZDO direct callback.  Build an MT message directly from the
   2161           *         over-the-air ZDO message.
   2162           *
   2163           * @param  pData - Incoming AF frame.
   2164           *
   2165           * @return  none
   2166           ***************************************************************************************************/
   2167          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   2168          {
   2169            uint8 len, *pBuf;
   2170            uint16 origClusterId;
   2171          
   2172            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
   2173            origClusterId = pData->clusterId;
   2174          
   2175            // Is the message an exception or not a response?
   2176            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   2177            {
   2178              return;  // Handled somewhere else or not needed.
   2179            }
   2180          
   2181            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   2182             * two bytes for srcAddr.
   2183             */
   2184            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   2185          
   2186            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2187            {
   2188              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   2189          
   2190              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   2191              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   2192          
   2193              /* copy ZDO data, skipping one-byte sequence number */
   2194              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   2195          
   2196              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   2197              osal_mem_free(pBuf);
   2198            }
   2199          }
   2200          
   2201          /***************************************************************************************************
   2202           * @fn     MT_ZdoHandleExceptions()
   2203           *
   2204           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   2205           *
   2206           * @param  pData - Incoming AF frame.
   2207           *
   2208           * @return  TRUE if handled by this function, FALSE if not
   2209           ***************************************************************************************************/
   2210          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   2211          {
   2212            uint8 ret = TRUE;
   2213            ZDO_NwkIEEEAddrResp_t *nwkRsp;
   2214            ZDO_DeviceAnnce_t devAnnce;
   2215            uint8 doDefault = FALSE;
   2216          
   2217            switch ( inMsg->clusterID )
   2218            {
   2219              case NWK_addr_rsp:
   2220              case IEEE_addr_rsp:
   2221                if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
   2222                {
   2223                  if ( nwkRsp->status == ZDO_SUCCESS )
   2224                  {
   2225                    MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   2226                  }
   2227                  osal_mem_free( nwkRsp );
   2228                }
   2229                break;
   2230          
   2231              case Device_annce:
   2232                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   2233                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   2234                break;
   2235          
   2236              case Simple_Desc_rsp:
   2237                if ( pData->cmd.DataLength > 5 )
   2238                {
   2239                  ret = FALSE;
   2240                }
   2241                else
   2242                {
   2243                  doDefault = TRUE;
   2244                }
   2245                break;
   2246          
   2247              default:
   2248                ret = FALSE;
   2249                break;
   2250            }
   2251          
   2252            if ( doDefault )
   2253            {
   2254              ret = FALSE;
   2255              pData->clusterId = MtZdoDef_rsp;
   2256              pData->cmd.DataLength = 2;
   2257            }
   2258          
   2259            return ( ret );
   2260          }
   2261          
   2262          /***************************************************************************************************
   2263           * @fn      MT_ZdoAddrRspCB
   2264           *
   2265           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   2266           *
   2267           * @param   pMsg  - Message data
   2268           *
   2269           * @return  void
   2270           */
   2271          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   2272          {
   2273            uint8   listLen, len, *pBuf;
   2274          
   2275            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   2276          
   2277            /* get length, sanity check length */
   2278            listLen = pMsg->numAssocDevs;
   2279          
   2280            /* calculate msg length */
   2281            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   2282          
   2283            /* get buffer */
   2284            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2285            {
   2286              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   2287              uint8 *pTmp = pBuf;
   2288          
   2289              *pTmp++ = pMsg->status;
   2290          
   2291              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   2292              pTmp += Z_EXTADDR_LEN;
   2293          
   2294              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   2295              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   2296          
   2297              *pTmp++ = pMsg->startIndex;
   2298              *pTmp++ = listLen;
   2299          
   2300              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   2301          
   2302              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   2303              osal_mem_free(pBuf);
   2304            }
   2305          }
   2306          
   2307          /***************************************************************************************************
   2308           * @fn      MT_ZdoEndDevAnnceCB
   2309           *
   2310           * @brief   Handle end device announce OSAL message from ZDO.
   2311           *
   2312           * @param   pMsg  - Message data
   2313           *
   2314           * @return  void
   2315           */
   2316          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   2317          {
   2318            uint8 *pBuf;
   2319          
   2320            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   2321            {
   2322              uint8 *pTmp = pBuf;
   2323          
   2324              *pTmp++ = LO_UINT16(srcAddr);
   2325              *pTmp++ = HI_UINT16(srcAddr);
   2326          
   2327              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   2328              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   2329          
   2330              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   2331              pTmp += Z_EXTADDR_LEN;
   2332          
   2333              *pTmp = pMsg->capabilities;
   2334          
   2335              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2336                                                   MT_ZDO_END_DEVICE_ANNCE_IND,
   2337                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   2338              osal_mem_free(pBuf);
   2339            }
   2340          }
   2341          
   2342          /***************************************************************************************************
   2343           * @fn      MT_ZdoSrcRtgCB
   2344           *
   2345           * @brief   Handle Src Route from ZDO.
   2346           *
   2347           * @param   pStr  - pointer to the data structure for the src route
   2348           *
   2349           * @return  void*
   2350           */
   2351          void* MT_ZdoSrcRtgCB( void *pStr )
   2352          {
   2353            uint8 len, *pBuf;
   2354            zdoSrcRtg_t *pSrcRtg = pStr;
   2355          
   2356            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   2357            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   2358          
   2359            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2360            {
   2361              uint8 idx, *pTmp = pBuf;
   2362              uint16 *pRelay;
   2363          
   2364              // Packet payload
   2365              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   2366              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   2367              *pTmp++ = pSrcRtg->relayCnt;
   2368          
   2369              // Relay List
   2370              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   2371              {
   2372                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   2373                {
   2374                  *pTmp++ = LO_UINT16(*pRelay);
   2375                  *pTmp++ = HI_UINT16(*pRelay);
   2376                  pRelay++;
   2377                }
   2378              }
   2379              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2380                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   2381              osal_mem_free(pBuf);
   2382            }
   2383          
   2384            return NULL;
   2385          }
   2386          
   2387          /***************************************************************************************************
   2388           * @fn          MT_ZdoConcentratorIndCB
   2389           *
   2390           * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
   2391           *
   2392           * @param       pStr - pointer to a parameter and a structure of parameters
   2393           *
   2394           * @return      NULL
   2395           ***************************************************************************************************/
   2396          static void *MT_ZdoConcentratorIndCB(void *pStr)
   2397          {
   2398            uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
   2399            zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
   2400          
   2401            *pTmp++ = LO_UINT16(pInd->nwkAddr);
   2402            *pTmp++ = HI_UINT16(pInd->nwkAddr);
   2403            pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
   2404            *pTmp = pInd->pktCost;
   2405          
   2406            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2407                                              MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
   2408            return NULL;
   2409          }
   2410          
   2411          /***************************************************************************************************
   2412           * @fn          MT_ZdoLeaveInd
   2413           *
   2414           * @brief       Handle the ZDO Leave Indication callback from the ZDO.
   2415           *
   2416           * @param       vPtr - Pointer to the received Leave Indication message.
   2417           *
   2418           * @return      NULL
   2419           ***************************************************************************************************/
   2420          static void *MT_ZdoLeaveInd(void *vPtr)
   2421          {
   2422            NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
   2423            uint8 buf[sizeof(NLME_LeaveInd_t)];
   2424          
   2425            buf[0] = LO_UINT16(pInd->srcAddr);
   2426            buf[1] = HI_UINT16(pInd->srcAddr);
   2427            (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
   2428            buf[2+Z_EXTADDR_LEN] = pInd->request;
   2429            buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
   2430            buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
   2431          
   2432            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2433                                                 MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
   2434            return NULL;
   2435          }
   2436          
   2437          /***************************************************************************************************
   2438           * @fn          MT_ZdoTcDeviceInd
   2439           *
   2440           * @brief       Handle the ZDO TC Device Indication callback from the ZDO.
   2441           *
   2442           * @param       params - pointer to Trust Center joining device information
   2443           *
   2444           * @return      NULL
   2445           ***************************************************************************************************/
   2446          void *MT_ZdoTcDeviceInd( void *params )
   2447          {
   2448            ZDO_TC_Device_t *pDev = (ZDO_TC_Device_t *)params;
   2449            uint8 buf[12];
   2450          
   2451            buf[0] = LO_UINT16( pDev->nwkAddr );
   2452            buf[1] = HI_UINT16( pDev->nwkAddr );
   2453            (void)osal_memcpy( &buf[2], pDev->extAddr, Z_EXTADDR_LEN);
   2454            buf[2+Z_EXTADDR_LEN] = LO_UINT16( pDev->parentAddr );
   2455            buf[3+Z_EXTADDR_LEN] = HI_UINT16( pDev->parentAddr );
   2456          
   2457            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2458                                                 MT_ZDO_TC_DEVICE_IND, 12, buf );
   2459            
   2460            return ( NULL );
   2461          }
   2462          
   2463          /***************************************************************************************************
   2464           * @fn          MT_ZdoPermitJoinInd
   2465           *
   2466           * @brief       Handle the ZDO Permit Join Indication callback from the ZDO.
   2467           *
   2468           * @param       duration - permit join duration
   2469           *
   2470           * @return      NULL
   2471           ***************************************************************************************************/
   2472          void *MT_ZdoPermitJoinInd( void *duration )
   2473          {
   2474            if ( ignoreIndication == FALSE )
   2475            {
   2476              MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2477                                                 MT_ZDO_PERMIT_JOIN_IND, 1, (uint8 *)duration );
   2478            }
   2479            
   2480            return ( NULL );
   2481          }
   2482          #endif // MT_ZDO_CB_FUNC
   2483          
   2484          /***************************************************************************************************
   2485           * @fn      MT_ZdoSendMsgCB
   2486           *
   2487           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   2488           *
   2489           * @param   pMsg  - Message data
   2490           *
   2491           * @return  void
   2492           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2493          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   \                     MT_ZdoSendMsgCB:
   2494          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2495            uint8 len = pMsg->asduLen + 9;
   \   000009   E5..         MOV     A,?V0
   \   00000B   2410         ADD     A,#0x10
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   35..         ADDC    A,?V1
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   2409         ADD     A,#0x9
   \   000017   F5..         MOV     ?V7,A
   2496            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   AA..         MOV     R2,?V7
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000020   8A..         MOV     ?V4,R2
   \   000022   8B..         MOV     ?V5,R3
   \   000024   85....       MOV     ?V2,?V4
   \   000027   85....       MOV     ?V3,?V5
   2497          
   2498            if (pBuf != NULL)
   \   00002A   E5..         MOV     A,?V2
   \   00002C   45..         ORL     A,?V3
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??MT_ZdoSendMsgCB_0 & 0xFFFF
   2499            {
   2500              uint8 *pTmp = pBuf;
   \   000033   AE..         MOV     R6,?V2
   \   000035   AF..         MOV     R7,?V3
   2501          
   2502              // Assuming exclusive use of network short addresses.
   2503              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000037   85..82       MOV     DPL,?V0
   \   00003A   85..83       MOV     DPH,?V1
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F8           MOV     R0,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   E8           MOV     A,R0
   \   000045   C0E0         PUSH    A
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   D0E0         POP     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   A3           INC     DPTR
   \   000053   AE82         MOV     R6,DPL
   \   000055   AF83         MOV     R7,DPH
   2504              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000057   85..82       MOV     DPL,?V0
   \   00005A   85..83       MOV     DPH,?V1
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F8           MOV     R0,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   E4           CLR     A
   \   000065   C9           XCH     A,R1
   \   000066   F8           MOV     R0,A
   \   000067   E8           MOV     A,R0
   \   000068   C0E0         PUSH    A
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   D0E0         POP     A
   \   000070   F0           MOVX    @DPTR,A
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   A3           INC     DPTR
   \   000076   AE82         MOV     R6,DPL
   \   000078   AF83         MOV     R7,DPH
   2505              *pTmp++ = pMsg->wasBroadcast;
   \   00007A   E5..         MOV     A,?V0
   \   00007C   240B         ADD     A,#0xb
   \   00007E   F582         MOV     DPL,A
   \   000080   E4           CLR     A
   \   000081   35..         ADDC    A,?V1
   \   000083   F583         MOV     DPH,A
   \   000085   E0           MOVX    A,@DPTR
   \   000086   C0E0         PUSH    A
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   D0E0         POP     A
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   AE82         MOV     R6,DPL
   \   000096   AF83         MOV     R7,DPH
   2506              *pTmp++ = LO_UINT16(pMsg->clusterID);
   \   000098   E5..         MOV     A,?V0
   \   00009A   240C         ADD     A,#0xc
   \   00009C   F582         MOV     DPL,A
   \   00009E   E4           CLR     A
   \   00009F   35..         ADDC    A,?V1
   \   0000A1   F583         MOV     DPH,A
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F8           MOV     R0,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F9           MOV     R1,A
   \   0000A8   E8           MOV     A,R0
   \   0000A9   C0E0         PUSH    A
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   D0E0         POP     A
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   A3           INC     DPTR
   \   0000B7   AE82         MOV     R6,DPL
   \   0000B9   AF83         MOV     R7,DPH
   2507              *pTmp++ = HI_UINT16(pMsg->clusterID);
   \   0000BB   E5..         MOV     A,?V0
   \   0000BD   240C         ADD     A,#0xc
   \   0000BF   F582         MOV     DPL,A
   \   0000C1   E4           CLR     A
   \   0000C2   35..         ADDC    A,?V1
   \   0000C4   F583         MOV     DPH,A
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F8           MOV     R0,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F9           MOV     R1,A
   \   0000CB   E4           CLR     A
   \   0000CC   C9           XCH     A,R1
   \   0000CD   F8           MOV     R0,A
   \   0000CE   E8           MOV     A,R0
   \   0000CF   C0E0         PUSH    A
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   D0E0         POP     A
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   8E82         MOV     DPL,R6
   \   0000DA   8F83         MOV     DPH,R7
   \   0000DC   A3           INC     DPTR
   \   0000DD   AE82         MOV     R6,DPL
   \   0000DF   AF83         MOV     R7,DPH
   2508              *pTmp++ = pMsg->SecurityUse;
   \   0000E1   E5..         MOV     A,?V0
   \   0000E3   240E         ADD     A,#0xe
   \   0000E5   F582         MOV     DPL,A
   \   0000E7   E4           CLR     A
   \   0000E8   35..         ADDC    A,?V1
   \   0000EA   F583         MOV     DPH,A
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   C0E0         PUSH    A
   \   0000EF   8E82         MOV     DPL,R6
   \   0000F1   8F83         MOV     DPH,R7
   \   0000F3   D0E0         POP     A
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   A3           INC     DPTR
   \   0000FB   AE82         MOV     R6,DPL
   \   0000FD   AF83         MOV     R7,DPH
   2509              *pTmp++ = pMsg->TransSeq;
   \   0000FF   E5..         MOV     A,?V0
   \   000101   240F         ADD     A,#0xf
   \   000103   F582         MOV     DPL,A
   \   000105   E4           CLR     A
   \   000106   35..         ADDC    A,?V1
   \   000108   F583         MOV     DPH,A
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   C0E0         PUSH    A
   \   00010D   8E82         MOV     DPL,R6
   \   00010F   8F83         MOV     DPH,R7
   \   000111   D0E0         POP     A
   \   000113   F0           MOVX    @DPTR,A
   \   000114   8E82         MOV     DPL,R6
   \   000116   8F83         MOV     DPH,R7
   \   000118   A3           INC     DPTR
   \   000119   AE82         MOV     R6,DPL
   \   00011B   AF83         MOV     R7,DPH
   2510              // Skipping asduLen since it can be deduced from the RPC packet length.
   2511              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   \   00011D   E5..         MOV     A,?V0
   \   00011F   2411         ADD     A,#0x11
   \   000121   F582         MOV     DPL,A
   \   000123   E4           CLR     A
   \   000124   35..         ADDC    A,?V1
   \   000126   F583         MOV     DPH,A
   \   000128   E0           MOVX    A,@DPTR
   \   000129   F8           MOV     R0,A
   \   00012A   A3           INC     DPTR
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   F9           MOV     R1,A
   \   00012D   E8           MOV     A,R0
   \   00012E   C0E0         PUSH    A
   \   000130   8E82         MOV     DPL,R6
   \   000132   8F83         MOV     DPH,R7
   \   000134   D0E0         POP     A
   \   000136   F0           MOVX    @DPTR,A
   \   000137   8E82         MOV     DPL,R6
   \   000139   8F83         MOV     DPH,R7
   \   00013B   A3           INC     DPTR
   \   00013C   AE82         MOV     R6,DPL
   \   00013E   AF83         MOV     R7,DPH
   2512              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   \   000140   E5..         MOV     A,?V0
   \   000142   2411         ADD     A,#0x11
   \   000144   F582         MOV     DPL,A
   \   000146   E4           CLR     A
   \   000147   35..         ADDC    A,?V1
   \   000149   F583         MOV     DPH,A
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   F8           MOV     R0,A
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F9           MOV     R1,A
   \   000150   E4           CLR     A
   \   000151   C9           XCH     A,R1
   \   000152   F8           MOV     R0,A
   \   000153   E8           MOV     A,R0
   \   000154   C0E0         PUSH    A
   \   000156   8E82         MOV     DPL,R6
   \   000158   8F83         MOV     DPH,R7
   \   00015A   D0E0         POP     A
   \   00015C   F0           MOVX    @DPTR,A
   \   00015D   8E82         MOV     DPL,R6
   \   00015F   8F83         MOV     DPH,R7
   \   000161   A3           INC     DPTR
   \   000162   AE82         MOV     R6,DPL
   \   000164   AF83         MOV     R7,DPH
   2513              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   \   000166                ; Setup parameters for call to function osal_memcpy
   \   000166   E5..         MOV     A,?V0
   \   000168   2413         ADD     A,#0x13
   \   00016A   F582         MOV     DPL,A
   \   00016C   E4           CLR     A
   \   00016D   35..         ADDC    A,?V1
   \   00016F   F583         MOV     DPH,A
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F5..         MOV     ?V4,A
   \   000174   A3           INC     DPTR
   \   000175   E0           MOVX    A,@DPTR
   \   000176   F5..         MOV     ?V5,A
   \   000178   75..00       MOV     ?V6,#0x0
   \   00017B   78..         MOV     R0,#?V4
   \   00017D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000180   E5..         MOV     A,?V0
   \   000182   2410         ADD     A,#0x10
   \   000184   F582         MOV     DPL,A
   \   000186   E4           CLR     A
   \   000187   35..         ADDC    A,?V1
   \   000189   F583         MOV     DPH,A
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   FC           MOV     R4,A
   \   00018D   7D00         MOV     R5,#0x0
   \   00018F   EE           MOV     A,R6
   \   000190   FA           MOV     R2,A
   \   000191   EF           MOV     A,R7
   \   000192   FB           MOV     R3,A
   \   000193   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000196   7403         MOV     A,#0x3
   \   000198   12....       LCALL   ?DEALLOC_XSTACK8
   \   00019B   8A..         MOV     ?V8,R2
   \   00019D   8B..         MOV     ?V9,R3
   \   00019F   85....       MOV     ?V4,?V8
   \   0001A2   85....       MOV     ?V5,?V9
   2514          
   2515              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2516                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   \   0001A5                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001A5   AC..         MOV     R4,?V2
   \   0001A7   AD..         MOV     R5,?V3
   \   0001A9   AB..         MOV     R3,?V7
   \   0001AB   7AFF         MOV     R2,#-0x1
   \   0001AD   7945         MOV     R1,#0x45
   \   0001AF   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2517          
   2518              osal_mem_free(pBuf);
   \   0001B2                ; Setup parameters for call to function osal_mem_free
   \   0001B2   AA..         MOV     R2,?V2
   \   0001B4   AB..         MOV     R3,?V3
   \   0001B6   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2519            }
   2520          }
   \                     ??MT_ZdoSendMsgCB_0:
   \   0001B9   7F0A         MOV     R7,#0xa
   \   0001BB   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNWKAddressRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNWKAddressRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoIEEEAddrRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoIEEEAddrRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNodeDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNodeDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoPowerDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoPowerDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSimpleDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSimpleDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoActiveEpRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoActiveEpRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMatchDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMatchDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoComplexDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoComplexDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUserDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoServiceDiscRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoServiceDiscRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDeviceTimeoutRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDeviceTimeoutRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUnbindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUnbindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNwkAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoStartupFromApp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoStartupFromApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNwkDiscoveryCnfCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkDiscoveryCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBeaconIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBeaconIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoJoinCnfCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSendMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendMsgCB
   2521          
   2522          #if defined ( MT_ZDO_EXTENSIONS )
   2523          /***************************************************************************************************
   2524           * @fn          MT_ZdoSecUpdateNwkKey
   2525           *
   2526           * @brief       Handle the ZDO Security Update Network Key extension message
   2527           *
   2528           * @param       pBuf - Pointer to the received message data.
   2529           *
   2530           * @return      NULL
   2531           ***************************************************************************************************/
   2532          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf )
   2533          {
   2534            uint16 dstAddr;
   2535            uint8 keySeqNum;
   2536            uint8 status;
   2537          
   2538            pBuf += MT_RPC_FRAME_HDR_SZ;
   2539            
   2540            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2541            pBuf += 2;
   2542            keySeqNum = *pBuf++;
   2543          
   2544            status = ZDSecMgrUpdateNwkKey( pBuf, keySeqNum, dstAddr );
   2545          
   2546            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2547                                                 MT_ZDO_EXT_UPDATE_NWK_KEY, 1, &status );
   2548          }
   2549          
   2550          /***************************************************************************************************
   2551           * @fn          MT_ZdoSecSwitchNwkKey
   2552           *
   2553           * @brief       Handle the ZDO Security Switch Network Key extension message
   2554           *
   2555           * @param       pBuf - Pointer to the received message data.
   2556           *
   2557           * @return      NULL
   2558           ***************************************************************************************************/
   2559          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf )
   2560          {
   2561            uint16 dstAddr;
   2562            uint8 keySeqNum;
   2563            uint8 status;
   2564          
   2565            pBuf += MT_RPC_FRAME_HDR_SZ;
   2566            
   2567            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2568            pBuf += 2;
   2569            keySeqNum = *pBuf++;
   2570          
   2571            status = ZDSecMgrSwitchNwkKey( keySeqNum, dstAddr );
   2572          
   2573            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2574                                                 MT_ZDO_EXT_SWITCH_NWK_KEY, 1, &status );
   2575          }
   2576          
   2577          /***************************************************************************************************
   2578           * @fn          MT_ZdoSecAddLinkKey
   2579           *
   2580           * @brief       Handle the ZDO Security Add Link Key extension message
   2581           *
   2582           * @param       pBuf - Pointer to the received message data.
   2583           *
   2584           * @return      NULL
   2585           ***************************************************************************************************/
   2586          static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
   2587          {
   2588            uint16 shortAddr;
   2589            uint8 *pExtAddr;
   2590            uint8 status;
   2591          
   2592            pBuf += MT_RPC_FRAME_HDR_SZ;
   2593            
   2594            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2595            pBuf += 2;
   2596            pExtAddr = pBuf;
   2597            pBuf += Z_EXTADDR_LEN;
   2598          
   2599            status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
   2600          
   2601            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2602                                                 MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
   2603          }
   2604          
   2605          /***************************************************************************************************
   2606           * @fn          MT_ZdoSecEntryLookupExt
   2607           *
   2608           * @brief       Handle the ZDO Security Entry Lookup Extended extension message
   2609           *
   2610           * @param       pBuf - Pointer to the received message data.
   2611           *
   2612           * @return      NULL
   2613           ***************************************************************************************************/
   2614          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
   2615          {
   2616            ZDSecMgrEntry_t *pEntry = NULL;
   2617            uint8 buf[6] = {0};
   2618          
   2619            pBuf += MT_RPC_FRAME_HDR_SZ;
   2620            
   2621            // lookup entry index for specified EXT address
   2622            buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
   2623            if ( pEntry )
   2624            {
   2625              buf[1] = LO_UINT16( pEntry->ami );
   2626              buf[2] = HI_UINT16( pEntry->ami );
   2627              buf[3] = LO_UINT16( pEntry->keyNvId );
   2628              buf[4] = HI_UINT16( pEntry->keyNvId );
   2629              buf[5] = (uint8)pEntry->authenticateOption;
   2630            }
   2631          
   2632            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2633                                                 MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
   2634          }
   2635          
   2636          /***************************************************************************************************
   2637           * @fn          MT_ZdoSecDeviceRemove
   2638           *
   2639           * @brief       Handle the ZDO Security Remove Device extension message
   2640           *
   2641           * @param       pBuf - Pointer to the received message data.
   2642           *
   2643           * @return      NULL
   2644           ***************************************************************************************************/
   2645          static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
   2646          {
   2647            ZStatus_t status;
   2648          
   2649            pBuf += MT_RPC_FRAME_HDR_SZ;
   2650          
   2651            // lookup entry index for specified EXT address
   2652            status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
   2653          
   2654            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2655                                                 MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
   2656          }
   2657          
   2658          /***************************************************************************************************
   2659           * @fn          MT_ZdoExtRouteDisc
   2660           *
   2661           * @brief       Handle the ZDO Route Discovery extension message
   2662           *
   2663           * @param       pBuf - Pointer to the received message data.
   2664           *
   2665           * @return      NULL
   2666           ***************************************************************************************************/
   2667          static void MT_ZdoExtRouteDisc( uint8 *pBuf )
   2668          {
   2669            ZStatus_t status;
   2670            uint16 dstAddr;
   2671          
   2672            pBuf += MT_RPC_FRAME_HDR_SZ;
   2673          
   2674            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2675          
   2676            status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
   2677          
   2678          
   2679            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2680                                                 MT_ZDO_EXT_ROUTE_DISC, 1, &status );
   2681          }
   2682          
   2683          /***************************************************************************************************
   2684           * @fn          MT_ZdoExtRouteCheck
   2685           *
   2686           * @brief       Handle the ZDO Route Check extension message
   2687           *
   2688           * @param       pBuf - Pointer to the received message data.
   2689           *
   2690           * @return      NULL
   2691           ***************************************************************************************************/
   2692          static void MT_ZdoExtRouteCheck( uint8 *pBuf )
   2693          {
   2694            ZStatus_t status;
   2695            uint16 dstAddr;
   2696          
   2697            pBuf += MT_RPC_FRAME_HDR_SZ;
   2698            
   2699            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2700          
   2701            status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
   2702          
   2703            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2704                                                 MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
   2705          }
   2706          
   2707          /***************************************************************************************************
   2708           * @fn          MT_ZdoExtRemoveGroup
   2709           *
   2710           * @brief       Handle the ZDO extension Remove Group message
   2711           *
   2712           * @param       pBuf - Pointer to the received message data.
   2713           *
   2714           * @return      NULL
   2715           ***************************************************************************************************/
   2716          static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
   2717          {
   2718            ZStatus_t status;
   2719            uint8 endpoint;
   2720            uint16 groupID;
   2721          
   2722            pBuf += MT_RPC_FRAME_HDR_SZ;
   2723            
   2724            endpoint = *pBuf++;
   2725            groupID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2726          
   2727            if ( aps_RemoveGroup( endpoint, groupID ) )
   2728            {
   2729              status = ZSuccess;
   2730            }
   2731            else
   2732            {
   2733              status = ZFailure;
   2734            }
   2735          
   2736            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2737                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2738          }
   2739          
   2740          /***************************************************************************************************
   2741           * @fn          MT_ZdoExtRemoveAllGroup
   2742           *
   2743           * @brief       Handle the ZDO extension Remove All Groups message
   2744           *
   2745           * @param       pBuf - Pointer to the received message data.
   2746           *
   2747           * @return      NULL
   2748           ***************************************************************************************************/
   2749          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
   2750          {
   2751            ZStatus_t status = ZSuccess;
   2752          
   2753            pBuf += MT_RPC_FRAME_HDR_SZ;
   2754            
   2755            aps_RemoveAllGroup( *pBuf );
   2756          
   2757            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2758                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2759          }
   2760          
   2761          /***************************************************************************************************
   2762           * @fn          MT_ZdoExtFindAllGroupsEndpoint
   2763           *
   2764           * @brief       Handle the ZDO extension Find All Groups for Endpoint message
   2765           *
   2766           * @param       pBuf - Pointer to the received message data.
   2767           *
   2768           * @return      NULL
   2769           ***************************************************************************************************/
   2770          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
   2771          {
   2772            uint16 groupList[ APS_MAX_GROUPS ];
   2773            uint8 groups;
   2774            uint8 msgLen;
   2775            uint8 *pMsg;
   2776          
   2777            pBuf += MT_RPC_FRAME_HDR_SZ;
   2778            
   2779            groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
   2780          
   2781            msgLen = 1 + (2 * groups);
   2782            pMsg = osal_mem_alloc( msgLen );
   2783            if ( pMsg )
   2784            {
   2785              uint8 x;
   2786              uint8 *pBuf = pMsg;
   2787          
   2788              *pBuf++ = groups;
   2789              for ( x = 0; x < groups; x++ )
   2790              {
   2791                *pBuf++ = LO_UINT16( groupList[x] );
   2792                *pBuf++ = HI_UINT16( groupList[x] );
   2793              }
   2794          
   2795              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2796                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
   2797              osal_mem_free( pMsg );
   2798            }
   2799            else
   2800            {
   2801              groups = 0;
   2802              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2803                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
   2804            }
   2805          }
   2806          
   2807          /***************************************************************************************************
   2808           * @fn          MT_ZdoExtFindGroup
   2809           *
   2810           * @brief       Handle the ZDO extension Find Group message
   2811           *
   2812           * @param       pBuf - Pointer to the received message data.
   2813           *
   2814           * @return      NULL
   2815           ***************************************************************************************************/
   2816          static void MT_ZdoExtFindGroup( uint8 *pBuf )
   2817          {
   2818            uint8 endpoint;
   2819            uint16 groupID;
   2820            aps_Group_t *pGroup;
   2821            uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
   2822          
   2823            pBuf += MT_RPC_FRAME_HDR_SZ;
   2824            
   2825            endpoint = *pBuf++;
   2826            groupID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2827          
   2828            pGroup = aps_FindGroup( endpoint, groupID );
   2829            if ( pGroup  )
   2830            {
   2831              buf[0] = ZSuccess;
   2832              buf[1] = LO_UINT16( pGroup->ID );
   2833              buf[2] = HI_UINT16( pGroup->ID );
   2834              buf[3] = pGroup->name[0];
   2835              osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
   2836            }
   2837            else
   2838            {
   2839              buf[0] = ZFailure;
   2840            }
   2841          
   2842            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2843                                MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
   2844          }
   2845          
   2846          /***************************************************************************************************
   2847           * @fn          MT_ZdoExtAddGroup
   2848           *
   2849           * @brief       Handle the ZDO extension Add Group message
   2850           *
   2851           * @param       pBuf - Pointer to the received message data.
   2852           *
   2853           * @return      NULL
   2854           ***************************************************************************************************/
   2855          static void MT_ZdoExtAddGroup( uint8 *pBuf )
   2856          {
   2857            ZStatus_t status = ZSuccess;
   2858            aps_Group_t group = {0};
   2859            uint8 endpoint;
   2860          
   2861            pBuf += MT_RPC_FRAME_HDR_SZ;
   2862          
   2863            endpoint = *pBuf++;
   2864            group.ID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2865            group.name[0] = pBuf[2];
   2866            if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
   2867            {
   2868              group.name[0] = (APS_GROUP_NAME_LEN-1);
   2869            }
   2870          
   2871            if (group.name[0] > 0 )
   2872            {
   2873              osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
   2874            }
   2875          
   2876            status = aps_AddGroup( endpoint, &group );
   2877          
   2878            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2879                                                 MT_ZDO_EXT_ADD_GROUP, 1, &status );
   2880          }
   2881          
   2882          /***************************************************************************************************
   2883           * @fn          MT_ZdoExtCountAllGroups
   2884           *
   2885           * @brief       Handle the ZDO extension Count All Groups message
   2886           *
   2887           * @param       pBuf - Pointer to the received message data.
   2888           *
   2889           * @return      NULL
   2890           ***************************************************************************************************/
   2891          static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
   2892          {
   2893            ZStatus_t status = 0;
   2894          
   2895            pBuf += MT_RPC_FRAME_HDR_SZ;
   2896          
   2897            status = (ZStatus_t)aps_CountAllGroups();
   2898          
   2899            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2900                                                 MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
   2901          }
   2902          
   2903          
   2904          /***************************************************************************************************
   2905           * @fn          MT_ZdoExtRxIdle
   2906           *
   2907           * @brief       Handle the ZDO extension Get/Set RxOnIdle to ZMac message 
   2908           *
   2909           * @param       pBuf - Pointer to the received message data.
   2910           *
   2911           * @return      NULL
   2912           ***************************************************************************************************/
   2913          static void MT_ZdoExtRxIdle( uint8 *pBuf )
   2914          {
   2915            uint8 setFlag;
   2916            uint8 setValue;
   2917            
   2918            pBuf += MT_RPC_FRAME_HDR_SZ;
   2919          
   2920            setFlag = *pBuf++;
   2921            setValue = *pBuf++;
   2922            
   2923            if ( setFlag )
   2924            {
   2925              ZMacSetReq( ZMacRxOnIdle, &setValue );
   2926            }
   2927            else
   2928            {
   2929              ZMacGetReq( ZMacRxOnIdle, &setValue );
   2930            }
   2931           
   2932            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2933                                                 MT_ZDO_EXT_RX_IDLE, 1, &setValue );
   2934          }
   2935          
   2936          /***************************************************************************************************
   2937           * @fn          MT_ZdoExtNwkInfo
   2938           *
   2939           * @brief       Handle the ZDO extension Network Info Request message 
   2940           *
   2941           * @param       pBuf - Pointer to the received message data.
   2942           *
   2943           * @return      NULL
   2944           ***************************************************************************************************/
   2945          static void MT_ZdoExtNwkInfo( uint8 *pBuf )
   2946          {
   2947            uint8 buf[24];
   2948            uint8 *pMsg;
   2949            
   2950            pMsg = buf;
   2951            
   2952            *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
   2953            *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
   2954            
   2955            *pMsg++ = devState;
   2956            *pMsg++ = LO_UINT16( _NIB.nwkPanId );
   2957            *pMsg++ = HI_UINT16( _NIB.nwkPanId );
   2958            *pMsg++ = LO_UINT16( _NIB.nwkCoordAddress );
   2959            *pMsg++ = HI_UINT16( _NIB.nwkCoordAddress );
   2960            osal_memcpy( pMsg, _NIB.extendedPANID, 8 );
   2961            pMsg += 8;
   2962            osal_memcpy( pMsg, _NIB.nwkCoordExtAddress, 8 );
   2963            pMsg += 8;
   2964            *pMsg++ = _NIB.nwkLogicalChannel;
   2965           
   2966            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2967                                                 MT_ZDO_EXT_NWK_INFO, 24, buf );
   2968          }
   2969          
   2970          /***************************************************************************************************
   2971           * @fn          MT_ZdoExtSecApsRemoveReq
   2972           *
   2973           * @brief       Handle the ZDO extension Security Manager APS Remove Request message
   2974           *
   2975           * @param       pBuf - Pointer to the received message data.
   2976           *
   2977           * @return      NULL
   2978           ***************************************************************************************************/
   2979          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf )
   2980          {
   2981            ZStatus_t status = 0;
   2982            uint16 parentAddr;
   2983            uint16 nwkAddr;
   2984            
   2985            pBuf += MT_RPC_FRAME_HDR_SZ;
   2986          
   2987            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   2988            {
   2989              parentAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2990              pBuf += 2;
   2991              
   2992              nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2993              pBuf += 2;
   2994              
   2995              status = ZDSecMgrAPSRemove( nwkAddr, pBuf, parentAddr );
   2996            }
   2997            else
   2998            {
   2999              status = ZUnsupportedMode;
   3000            }
   3001            
   3002            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3003                                                 MT_ZDO_EXT_SEC_APS_REMOVE_REQ, 1, &status );
   3004          }
   3005          
   3006          /***************************************************************************************************
   3007           * @fn          MT_ZdoExtSetParams
   3008           *
   3009           * @brief       Set Parameters not settable through NV.
   3010           *
   3011           * @param       pBuf - Pointer to the received message data.
   3012           *
   3013           * @return      NULL
   3014           ***************************************************************************************************/
   3015          static void MT_ZdoExtSetParams( uint8 *pBuf )
   3016          {
   3017            ZStatus_t status = ZSuccess;
   3018            uint8 useMultiCast;
   3019            
   3020            pBuf += MT_RPC_FRAME_HDR_SZ;
   3021            
   3022            // Is the useMulticast in this message
   3023            useMultiCast = *pBuf++;
   3024            if ( useMultiCast & 0x80 )
   3025            {
   3026              if ( useMultiCast & 0x7F )
   3027              {
   3028                _NIB.nwkUseMultiCast = TRUE;
   3029              }
   3030              else
   3031              {
   3032                _NIB.nwkUseMultiCast = FALSE;
   3033              }
   3034            }
   3035            
   3036            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3037                                                 MT_ZDO_EXT_SET_PARAMS, 1, &status );
   3038          }
   3039          #endif // MT_ZDO_EXTENSIONS
   3040          
   3041          #endif   /*ZDO Command Processing in MT*/
   3042          /***************************************************************************************************
   3043          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     32   MT_ZdoActiveEpRequest
        0     22   -> MT_BuildAndSendZToolResponse
        0     23   -> ZDP_NWKAddrOfInterestReq
      1     27   MT_ZdoBeaconIndCB
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      1     56   MT_ZdoBindRequest
        0     39   -> MT_BuildAndSendZToolResponse
        0     47   -> ZDP_BindUnbindReq
        0     39   -> sAddrExtCpy
      0      9   MT_ZdoCommandProcessing
        0      9   -> MT_ZdoActiveEpRequest
        0      9   -> MT_ZdoBindRequest
        0      9   -> MT_ZdoComplexDescRequest
        0      9   -> MT_ZdoEndDevAnnce
        0      9   -> MT_ZdoEndDevBindRequest
        0      9   -> MT_ZdoEndDeviceTimeoutRequest
        0      9   -> MT_ZdoIEEEAddrRequest
        0      9   -> MT_ZdoJoinReq
        0      9   -> MT_ZdoMatchDescRequest
        0      9   -> MT_ZdoNWKAddressRequest
        0      9   -> MT_ZdoNetworkDiscoveryReq
        0      9   -> MT_ZdoNodeDescRequest
        0      9   -> MT_ZdoNwkAddrOfInterestReq
        0      9   -> MT_ZdoPowerDescRequest
        0      9   -> MT_ZdoRegisterForZDOMsg
        0      9   -> MT_ZdoRemoveRegisteredCB
        0      9   -> MT_ZdoSendData
        0      9   -> MT_ZdoServiceDiscRequest
        0      9   -> MT_ZdoSimpleDescRequest
        0      9   -> MT_ZdoStartupFromApp
        0      9   -> MT_ZdoUnbindRequest
        0      9   -> MT_ZdoUserDescRequest
        0      9   -> MT_ZdoUserDescSet
      1     32   MT_ZdoComplexDescRequest
        0     22   -> MT_BuildAndSendZToolResponse
        0     23   -> ZDP_NWKAddrOfInterestReq
      1     25   MT_ZdoEndDevAnnce
        0     15   -> MT_BuildAndSendZToolResponse
        0     16   -> ZDP_DeviceAnnce
      1    107   MT_ZdoEndDevBindRequest
        0     89   -> MT_BuildAndSendZToolResponse
        0     98   -> ZDP_EndDeviceBindReq
      1     23   MT_ZdoEndDeviceTimeoutRequest
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> ZDP_EndDeviceTimeoutReq
      1     23   MT_ZdoIEEEAddrRequest
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> ZDP_IEEEAddrReq
      0      0   MT_ZdoInit
      1     15   MT_ZdoJoinCnfCB
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> ZDO_DeregisterForZdoCB
      1     28   MT_ZdoJoinReq
        0     15   -> MT_BuildAndSendZToolResponse
        0     19   -> ZDApp_JoinReq
        0     15   -> ZDO_RegisterForZdoCB
      1    109   MT_ZdoMatchDescRequest
        0     92   -> MT_BuildAndSendZToolResponse
        0    100   -> ZDP_MatchDescReq
      1     23   MT_ZdoNWKAddressRequest
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> ZDP_NwkAddrReq
      1     30   MT_ZdoNetworkDiscoveryReq
        0     21   -> MT_BuildAndSendZToolResponse
        0     21   -> ZDApp_NetworkDiscoveryReq
        0     21   -> ZDO_RegisterForZdoCB
        0     21   -> osal_build_uint32
      1     32   MT_ZdoNodeDescRequest
        0     22   -> MT_BuildAndSendZToolResponse
        0     23   -> ZDP_NWKAddrOfInterestReq
      1     33   MT_ZdoNwkAddrOfInterestReq
        0     23   -> MT_BuildAndSendZToolResponse
        0     24   -> ZDP_NWKAddrOfInterestReq
      0      9   MT_ZdoNwkDiscoveryCnfCB
        0      9   -> MT_BuildAndSendZToolResponse
        0      9   -> MT_ZdoBeaconIndCB
        0      9   -> ZDO_DeregisterForZdoCB
      1     32   MT_ZdoPowerDescRequest
        0     22   -> MT_BuildAndSendZToolResponse
        0     23   -> ZDP_NWKAddrOfInterestReq
      1     22   MT_ZdoRegisterForZDOMsg
        0     13   -> MT_BuildAndSendZToolResponse
        0     13   -> ZDO_RegisterForZDOMsg
      1     22   MT_ZdoRemoveRegisteredCB
        0     13   -> MT_BuildAndSendZToolResponse
        0     13   -> ZDO_RemoveRegisteredCB
      1     38   MT_ZdoSendData
        0     24   -> MT_BuildAndSendZToolResponse
        0     29   -> ZDP_SendData
      1     21   MT_ZdoSendMsgCB
        0     18   -> MT_BuildAndSendZToolResponse
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     21   -> osal_memcpy
      1     21   MT_ZdoServiceDiscRequest
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> ZDP_ServerDiscReq
      1     33   MT_ZdoSimpleDescRequest
        0     23   -> MT_BuildAndSendZToolResponse
        0     24   -> ZDP_SimpleDescReq
      1     20   MT_ZdoStartupFromApp
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDOInitDevice
      1     56   MT_ZdoUnbindRequest
        0     39   -> MT_BuildAndSendZToolResponse
        0     47   -> ZDP_BindUnbindReq
        0     39   -> sAddrExtCpy
      1     32   MT_ZdoUserDescRequest
        0     22   -> MT_BuildAndSendZToolResponse
        0     23   -> ZDP_NWKAddrOfInterestReq
      1     54   MT_ZdoUserDescSet
        0     42   -> MT_BuildAndSendZToolResponse
        0     44   -> ZDP_UserDescSet
        0     45   -> osal_memcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     180  MT_ZdoActiveEpRequest
       6  MT_ZdoActiveEpRequest::?relay
     814  MT_ZdoBeaconIndCB
       6  MT_ZdoBeaconIndCB::?relay
     342  MT_ZdoBindRequest
       6  MT_ZdoBindRequest::?relay
     389  MT_ZdoCommandProcessing
       6  MT_ZdoCommandProcessing::?relay
     180  MT_ZdoComplexDescRequest
       6  MT_ZdoComplexDescRequest::?relay
     143  MT_ZdoEndDevAnnce
       6  MT_ZdoEndDevAnnce::?relay
     557  MT_ZdoEndDevBindRequest
       6  MT_ZdoEndDevBindRequest::?relay
     152  MT_ZdoEndDeviceTimeoutRequest
       6  MT_ZdoEndDeviceTimeoutRequest::?relay
     138  MT_ZdoIEEEAddrRequest
       6  MT_ZdoIEEEAddrRequest::?relay
       3  MT_ZdoInit
       6  MT_ZdoInit::?relay
     161  MT_ZdoJoinCnfCB
       6  MT_ZdoJoinCnfCB::?relay
     219  MT_ZdoJoinReq
       6  MT_ZdoJoinReq::?relay
     525  MT_ZdoMatchDescRequest
       6  MT_ZdoMatchDescRequest::?relay
     112  MT_ZdoNWKAddressRequest
       6  MT_ZdoNWKAddressRequest::?relay
     147  MT_ZdoNetworkDiscoveryReq
       6  MT_ZdoNetworkDiscoveryReq::?relay
     180  MT_ZdoNodeDescRequest
       6  MT_ZdoNodeDescRequest::?relay
     296  MT_ZdoNwkAddrOfInterestReq
       6  MT_ZdoNwkAddrOfInterestReq::?relay
      50  MT_ZdoNwkDiscoveryCnfCB
       6  MT_ZdoNwkDiscoveryCnfCB::?relay
     180  MT_ZdoPowerDescRequest
       6  MT_ZdoPowerDescRequest::?relay
     123  MT_ZdoRegisterForZDOMsg
       6  MT_ZdoRegisterForZDOMsg::?relay
     123  MT_ZdoRemoveRegisteredCB
       6  MT_ZdoRemoveRegisteredCB::?relay
     346  MT_ZdoSendData
       6  MT_ZdoSendData::?relay
     446  MT_ZdoSendMsgCB
       6  MT_ZdoSendMsgCB::?relay
     111  MT_ZdoServiceDiscRequest
       6  MT_ZdoServiceDiscRequest::?relay
     196  MT_ZdoSimpleDescRequest
       6  MT_ZdoSimpleDescRequest::?relay
      88  MT_ZdoStartupFromApp
       6  MT_ZdoStartupFromApp::?relay
     342  MT_ZdoUnbindRequest
       6  MT_ZdoUnbindRequest::?relay
     180  MT_ZdoUserDescRequest
       6  MT_ZdoUserDescRequest::?relay
     255  MT_ZdoUserDescSet
       6  MT_ZdoUserDescSet::?relay
       4  _zdoCallbackSub
       1  ignoreIndication
       2  pBeaconIndBuf

 
 6 978 bytes in segment BANKED_CODE
   174 bytes in segment BANK_RELAYS
     7 bytes in segment XDATA_Z
 
 7 152 bytes of CODE  memory
     7 bytes of XDATA memory

Errors: none
Warnings: none
