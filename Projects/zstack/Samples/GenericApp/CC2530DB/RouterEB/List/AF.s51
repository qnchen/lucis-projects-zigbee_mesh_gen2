///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               21/Apr/2017  17:48:37
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\stack\af\AF.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\stack\af\AF.c" -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC
//        -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE -D NV_INIT -D
//        OPEN_FCS -D PANID_INCREASE -lC "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List" -lA
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj" -e
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        --core=plain --dptr=16,1 --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -On --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\AF.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME AF

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,0203H
        PUBLIC `??AF_DataRequestSrcRtg::?relay`
        FUNCTION `??AF_DataRequestSrcRtg::?relay`,0203H
        PUBLIC `??afAPSF_ConfigGet::?relay`
        FUNCTION `??afAPSF_ConfigGet::?relay`,0203H
        PUBLIC `??afAPSF_ConfigSet::?relay`
        FUNCTION `??afAPSF_ConfigSet::?relay`,0203H
        FUNCTION `??afBuildMSGIncoming::?relay`,0203H
        PUBLIC `??afCopyAddress::?relay`
        FUNCTION `??afCopyAddress::?relay`,0203H
        PUBLIC `??afDataConfirm::?relay`
        FUNCTION `??afDataConfirm::?relay`,0203H
        PUBLIC `??afDataReqMTU::?relay`
        FUNCTION `??afDataReqMTU::?relay`,0203H
        PUBLIC `??afDelete::?relay`
        FUNCTION `??afDelete::?relay`,0203H
        PUBLIC `??afEndPoints::?relay`
        FUNCTION `??afEndPoints::?relay`,0203H
        PUBLIC `??afFindEndPointDesc::?relay`
        FUNCTION `??afFindEndPointDesc::?relay`,0203H
        FUNCTION `??afFindEndPointDescList::?relay`,0203H
        PUBLIC `??afFindSimpleDesc::?relay`
        FUNCTION `??afFindSimpleDesc::?relay`,0203H
        FUNCTION `??afGetDescCB::?relay`,0203H
        PUBLIC `??afGetMatch::?relay`
        FUNCTION `??afGetMatch::?relay`,0203H
        PUBLIC `??afIncomingData::?relay`
        FUNCTION `??afIncomingData::?relay`,0203H
        PUBLIC `??afNumEndPoints::?relay`
        FUNCTION `??afNumEndPoints::?relay`,0203H
        PUBLIC `??afReflectError::?relay`
        FUNCTION `??afReflectError::?relay`,0203H
        PUBLIC `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,0203H
        PUBLIC `??afRegisterExtended::?relay`
        FUNCTION `??afRegisterExtended::?relay`,0203H
        PUBLIC `??afSetApplCB::?relay`
        FUNCTION `??afSetApplCB::?relay`,0203H
        PUBLIC `??afSetMatch::?relay`
        FUNCTION `??afSetMatch::?relay`,0203H
        PUBLIC AF_DataRequest
        FUNCTION AF_DataRequest,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 56, STACK
        PUBLIC AF_DataRequestDiscoverRoute
        PUBLIC AF_DataRequestSrcRtg
        FUNCTION AF_DataRequestSrcRtg,0a1203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC afAPSF_ConfigGet
        FUNCTION afAPSF_ConfigGet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC afAPSF_ConfigSet
        FUNCTION afAPSF_ConfigSet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION afBuildMSGIncoming,0a1203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC afCopyAddress
        FUNCTION afCopyAddress,0a1203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afDataConfirm
        FUNCTION afDataConfirm,0a1203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC afDataReqMTU
        FUNCTION afDataReqMTU,0a1203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afDelete
        FUNCTION afDelete,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC afEndPoints
        FUNCTION afEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0a1203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION afFindEndPointDescList,0203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afFindSimpleDesc
        FUNCTION afFindSimpleDesc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION afGetDescCB,0203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afGetMatch
        FUNCTION afGetMatch,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afIncomingData
        FUNCTION afIncomingData,0a1203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 41, STACK
        PUBLIC afNumEndPoints
        FUNCTION afNumEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afReflectError
        FUNCTION afReflectError,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC afRegister
        FUNCTION afRegister,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afRegisterExtended
        FUNCTION afRegisterExtended,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afSetApplCB
        FUNCTION afSetApplCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afSetMatch
        FUNCTION afSetMatch,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC epList
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
APSDE_DataReq       SYMBOL "APSDE_DataReq"
`??APSDE_DataReq::?relay` SYMBOL "?relay", APSDE_DataReq
APSDE_DataReqMTU    SYMBOL "APSDE_DataReqMTU"
`??APSDE_DataReqMTU::?relay` SYMBOL "?relay", APSDE_DataReqMTU
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_IsAddressBroadcast SYMBOL "NLME_IsAddressBroadcast"
`??NLME_IsAddressBroadcast::?relay` SYMBOL "?relay", NLME_IsAddressBroadcast
RTG_AddSrcRtgEntry_Guaranteed SYMBOL "RTG_AddSrcRtgEntry_Guaranteed"
`??RTG_AddSrcRtgEntry_Guaranteed::?relay` SYMBOL "?relay", RTG_AddSrcRtgEntry_Guaranteed
RTG_CheckRtStatus   SYMBOL "RTG_CheckRtStatus"
`??RTG_CheckRtStatus::?relay` SYMBOL "?relay", RTG_CheckRtStatus
aps_FindGroupForEndpoint SYMBOL "aps_FindGroupForEndpoint"
`??aps_FindGroupForEndpoint::?relay` SYMBOL "?relay", aps_FindGroupForEndpoint
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
AF_DataRequestSrcRtg SYMBOL "AF_DataRequestSrcRtg"
`??AF_DataRequestSrcRtg::?relay` SYMBOL "?relay", AF_DataRequestSrcRtg
afAPSF_ConfigGet    SYMBOL "afAPSF_ConfigGet"
`??afAPSF_ConfigGet::?relay` SYMBOL "?relay", afAPSF_ConfigGet
afAPSF_ConfigSet    SYMBOL "afAPSF_ConfigSet"
`??afAPSF_ConfigSet::?relay` SYMBOL "?relay", afAPSF_ConfigSet
afCopyAddress       SYMBOL "afCopyAddress"
`??afCopyAddress::?relay` SYMBOL "?relay", afCopyAddress
afDataConfirm       SYMBOL "afDataConfirm"
`??afDataConfirm::?relay` SYMBOL "?relay", afDataConfirm
afDataReqMTU        SYMBOL "afDataReqMTU"
`??afDataReqMTU::?relay` SYMBOL "?relay", afDataReqMTU
afDelete            SYMBOL "afDelete"
`??afDelete::?relay` SYMBOL "?relay", afDelete
afEndPoints         SYMBOL "afEndPoints"
`??afEndPoints::?relay` SYMBOL "?relay", afEndPoints
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
`??afFindEndPointDesc::?relay` SYMBOL "?relay", afFindEndPointDesc
afFindSimpleDesc    SYMBOL "afFindSimpleDesc"
`??afFindSimpleDesc::?relay` SYMBOL "?relay", afFindSimpleDesc
afGetMatch          SYMBOL "afGetMatch"
`??afGetMatch::?relay` SYMBOL "?relay", afGetMatch
afIncomingData      SYMBOL "afIncomingData"
`??afIncomingData::?relay` SYMBOL "?relay", afIncomingData
afNumEndPoints      SYMBOL "afNumEndPoints"
`??afNumEndPoints::?relay` SYMBOL "?relay", afNumEndPoints
afReflectError      SYMBOL "afReflectError"
`??afReflectError::?relay` SYMBOL "?relay", afReflectError
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
afRegisterExtended  SYMBOL "afRegisterExtended"
`??afRegisterExtended::?relay` SYMBOL "?relay", afRegisterExtended
afSetApplCB         SYMBOL "afSetApplCB"
`??afSetApplCB::?relay` SYMBOL "?relay", afSetApplCB
afSetMatch          SYMBOL "afSetMatch"
`??afSetMatch::?relay` SYMBOL "?relay", afSetMatch

        EXTERN `??APSDE_DataReq::?relay`
        FUNCTION `??APSDE_DataReq::?relay`,00H
        EXTERN `??APSDE_DataReqMTU::?relay`
        FUNCTION `??APSDE_DataReqMTU::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_IsAddressBroadcast::?relay`
        FUNCTION `??NLME_IsAddressBroadcast::?relay`,00H
        EXTERN `??RTG_AddSrcRtgEntry_Guaranteed::?relay`
        FUNCTION `??RTG_AddSrcRtgEntry_Guaranteed::?relay`,00H
        EXTERN `??RTG_CheckRtStatus::?relay`
        FUNCTION `??RTG_CheckRtStatus::?relay`,00H
        EXTERN `??aps_FindGroupForEndpoint::?relay`
        FUNCTION `??aps_FindGroupForEndpoint::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN APSDE_DataReq
        FUNCTION APSDE_DataReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSDE_DataReqMTU
        FUNCTION APSDE_DataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_AddSrcRtgEntry_Guaranteed
        FUNCTION RTG_AddSrcRtgEntry_Guaranteed,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_CheckRtStatus
        FUNCTION RTG_CheckRtStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroupForEndpoint
        FUNCTION aps_FindGroupForEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN apsfSendFragmented
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\af\AF.c
//    1 /**************************************************************************************************
//    2   Filename:       AF.c
//    3   Revised:        $Date: 2014-06-30 16:29:17 -0700 (Mon, 30 Jun 2014) $
//    4   Revision:       $Revision: 39295 $
//    5 
//    6   Description:    Application Framework - Device Description helper functions
//    7 
//    8 
//    9   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "OSAL.h"
//   45 #include "AF.h"
//   46 #include "nwk_globals.h"
//   47 #include "nwk_util.h"
//   48 #include "aps_groups.h"
//   49 #include "ZDProfile.h"
//   50 #include "aps_frag.h"
//   51 #include "rtg.h"
//   52 
//   53 #if defined ( MT_AF_CB_FUNC )
//   54   #include "MT_AF.h"
//   55 #endif
//   56 
//   57 #if defined ( INTER_PAN )
//   58   #include "stub_aps.h"
//   59 #endif
//   60 
//   61 /*********************************************************************
//   62  * MACROS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * @fn      afSend
//   67  *
//   68  * @brief   Helper macro for V1 API to invoke V2 API.
//   69  *
//   70  * input parameters
//   71  *
//   72  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//   73  * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
//   74  * @param   cID - A valid cluster ID as specified by the Profile.
//   75  * @param   len - Number of bytes of data pointed to by next param.
//   76  * @param  *buf - A pointer to the data bytes to send.
//   77  * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
//   78  * @param  *transID - A pointer to a byte which can be modified and which will
//   79  *                    be used as the transaction sequence number of the msg.
//   80  *
//   81  * output parameters
//   82  *
//   83  * @param  *transID - Incremented by one if the return value is success.
//   84  *
//   85  * @return  afStatus_t - See previous definition of afStatus_... types.
//   86  */
//   87 #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \ 
//   88         AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \ 
//   89                           (cID), (len), (buf), (transID), (options), (radius) )
//   90 
//   91 /*********************************************************************
//   92  * GLOBAL VARIABLES
//   93  */
//   94 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   95 epList_t *epList;
epList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   96 
//   97 /*********************************************************************
//   98  * LOCAL FUNCTIONS
//   99  */
//  100 
//  101 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
//  102                 zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  103                 uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
//  104 
//  105 static epList_t *afFindEndPointDescList( uint8 EndPoint );
//  106 
//  107 static pDescCB afGetDescCB( endPointDesc_t *epDesc );
//  108 
//  109 /*********************************************************************
//  110  * PUBLIC FUNCTIONS
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * @fn      afInit
//  115  *
//  116  * @brief   Initialization function for the AF.
//  117  *
//  118  * @param   none
//  119  *
//  120  * @return  none
//  121 void afInit( void )
//  122 {
//  123 }
//  124  */
//  125 
//  126 /*********************************************************************
//  127  * @fn      afRegisterExtended
//  128  *
//  129  * @brief   Register an Application's EndPoint description.
//  130  *
//  131  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  132  * @param   descFn - pointer to descriptor callback function
//  133  * @param   applFn - pointer to the Application callback function
//  134  *
//  135  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  136  *
//  137  * @return  Pointer to epList_t on success, NULL otherwise.
//  138  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  139 epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
afRegisterExtended:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function afRegisterExtended
        CODE
//  140 {
        FUNCALL afRegisterExtended, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
//  141   epList_t *ep = osal_mem_alloc(sizeof(epList_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xb
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R2,?V4
        MOV     R3,?V5
//  142 
//  143   if (ep != NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??afRegisterExtended_0
//  144   {
//  145     ep->nextDesc = epList;
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  146     epList = ep;
        MOV     DPTR,#epList
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  147     ep->epDesc = epDesc;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//  148     ep->pfnDescCB = descFn;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  149     ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x32
        MOVX    @DPTR,A
//  150     ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
//  151     ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
//  152     ep->pfnApplCB = applFn;
        MOV     R0,?V2
        MOV     R1,?V3
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  153   }
//  154 
//  155   return ep;
??afRegisterExtended_0:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  156 }
          CFI EndBlock cfiBlock0
//  157 
//  158 /*********************************************************************
//  159  * @fn      afRegister
//  160  *
//  161  * @brief   Register an Application's EndPoint description.
//  162  *
//  163  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  164  *
//  165  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  166  *
//  167  * @return  afStatus_SUCCESS - Registered
//  168  *          afStatus_MEM_FAIL - not enough memory to add descriptor
//  169  *          afStatus_INVALID_PARAMETER - duplicate endpoint
//  170  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  171 afStatus_t afRegister( endPointDesc_t *epDesc )
afRegister:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function afRegister
        CODE
//  172 {
        FUNCALL afRegister, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afRegister, afRegisterExtended
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  173   if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??afRegister_0
//  174   {
//  175     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??afRegister_1
//  176   }
//  177 
//  178   return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
??afRegister_0:
        ; Setup parameters for call to function afRegisterExtended
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,?V0
        ORL     A,?V1
        JNZ     ??afRegister_2
        MOV     R1,#0x10
        SJMP    ??afRegister_1
??afRegister_2:
        MOV     R1,#0x0
??afRegister_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
//  179 }
          CFI EndBlock cfiBlock1
//  180 
//  181 /*********************************************************************
//  182  * @fn      afDelete
//  183  *
//  184  * @brief   Delete an Application's EndPoint descriptor and frees the memory
//  185  *
//  186  * @param   EndPoint - Application Endpoint to delete
//  187  *
//  188  * @return  afStatus_SUCCESS - endpoint deleted
//  189  *          afStatus_INVALID_PARAMETER - endpoint not found
//  190  *          afStatus_FAILED - endpoint list empty
//  191  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  192 afStatus_t afDelete( uint8 EndPoint )
afDelete:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function afDelete
        CODE
//  193 {
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     ?V2,R1
//  194   epList_t *epCurrent;
//  195   epList_t *epPrevious;
//  196 
//  197   if ( epList != NULL )
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??afDelete_0 & 0xFFFF
//  198   {
//  199     epPrevious = epCurrent = epList;
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     ?V0,R6
        MOV     ?V1,R7
//  200 
//  201     // first element of the list matches
//  202     if ( epCurrent->epDesc->endPoint == EndPoint )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        XRL     A,?V2
        JNZ     ??afDelete_1
//  203     {
//  204       epList = epCurrent->nextDesc;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#epList
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  205       osal_mem_free( epCurrent );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  206 
//  207       return ( afStatus_SUCCESS );
        MOV     R1,#0x0
        SJMP    ??afDelete_2
//  208     }
//  209     else
//  210     {
//  211       // search the list
//  212       for ( epCurrent = epPrevious->nextDesc;
??afDelete_1:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//  213             epCurrent != NULL;
??afDelete_3:
        MOV     A,R6
        ORL     A,R7
        JZ      ??afDelete_4
//  214             epCurrent = epCurrent->nextDesc )
//  215       {
//  216         if ( epCurrent->epDesc->endPoint == EndPoint )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        XRL     A,?V2
        JNZ     ??afDelete_5
//  217         {
//  218           epPrevious->nextDesc = epCurrent->nextDesc;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  219           osal_mem_free( epCurrent );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  220 
//  221           // delete the entry and free the memory
//  222           return ( afStatus_SUCCESS );
        MOV     R1,#0x0
        SJMP    ??afDelete_2
//  223         }
//  224         epPrevious = epCurrent;
??afDelete_5:
        MOV     ?V0,R6
        MOV     ?V1,R7
//  225       }
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        SJMP    ??afDelete_3
//  226     }
//  227 
//  228     // no endpoint found
//  229     return ( afStatus_INVALID_PARAMETER );
??afDelete_4:
        MOV     R1,#0x2
        SJMP    ??afDelete_2
//  230   }
//  231   else
//  232   {
//  233     // epList is empty
//  234     return ( afStatus_FAILED );
??afDelete_0:
        MOV     R1,#0x1
??afDelete_2:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
//  235   }
//  236 }
          CFI EndBlock cfiBlock2
//  237 
//  238 /*********************************************************************
//  239  * @fn          afDataConfirm
//  240  *
//  241  * @brief       This function will generate the Data Confirm back to
//  242  *              the application.
//  243  *
//  244  * @param       endPoint - confirm end point
//  245  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  246  * @param       status - status of APSDE_DATA_REQUEST
//  247  *
//  248  * @return      none
//  249  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  250 void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
afDataConfirm:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function afDataConfirm
        CODE
//  251 {
        FUNCALL afDataConfirm, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     ?V3,R2
        MOV     ?V4,R3
//  252   endPointDesc_t *epDesc;
//  253   afDataConfirm_t *msgPtr;
//  254 
//  255   // Find the endpoint description
//  256   epDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        MOV     R1,?V2
        LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V0,?V6
        MOV     ?V1,?V7
//  257   if ( epDesc == NULL )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??afDataConfirm_0
//  258     return;
//  259 
//  260   // Determine the incoming command type
//  261   msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R6,?V6
        MOV     R7,?V7
//  262   if ( msgPtr )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afDataConfirm_0
//  263   {
//  264     // Build the Data Confirm message
//  265     msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x3
        MOVX    @DPTR,A
//  266     msgPtr->hdr.status = status;
        MOV     A,?V4
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  267     msgPtr->endpoint = endPoint;
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  268     msgPtr->transID = transID;
        MOV     A,?V3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  269 
//  270 #if defined ( MT_AF_CB_FUNC )
//  271     /* If MT has subscribed for this callback, don't send as a message. */
//  272     if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
//  273     {
//  274       /* Send callback if it's subscribed */
//  275       MT_AfDataConfirm ((void *)msgPtr);
//  276       /* Release the memory. */
//  277       osal_msg_deallocate( (void *)msgPtr );
//  278     }
//  279     else
//  280 #endif
//  281     {
//  282       /* send message through task message */
//  283       osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        MOV     A,R1
//  284     }
//  285   }
//  286 }
??afDataConfirm_0:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  287 
//  288 /*********************************************************************
//  289  * @fn          afReflectError
//  290  *
//  291  * @brief       This function will generate the Reflect Error message to
//  292  *              the application.
//  293  *
//  294  * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
//  295  * @param       dstAddr - intended destination
//  296  * @param       endPoint - confirm end point
//  297  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  298  * @param       status - status of APSDE_DATA_REQUEST
//  299  *
//  300  * @return      none
//  301  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  302 void afReflectError( uint8 dstAddrMode, uint16 dstAddr, uint8 endPoint, uint8 transID, ZStatus_t status )
afReflectError:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function afReflectError
        CODE
//  303 {
        FUNCALL afReflectError, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afReflectError, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afReflectError, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V6,R1
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     ?V5,R4
        MOV     ?V7,R5
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V4,A
//  304   endPointDesc_t *epDesc;
//  305   afReflectError_t *msgPtr;
//  306 
//  307   // Find the endpoint description
//  308   epDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        MOV     R1,?V5
        LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     ?V0,?V8
        MOV     ?V1,?V9
//  309   if ( epDesc == NULL )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??afReflectError_0
//  310     return;
//  311 
//  312   // Determine the incoming command type
//  313   msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x7
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R6,?V8
        MOV     R7,?V9
//  314   if ( msgPtr )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afReflectError_0
//  315   {
//  316     // Build the Data Confirm message
//  317     msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  318     msgPtr->hdr.status = status;
        MOV     A,?V4
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  319     msgPtr->endpoint = endPoint;
        MOV     A,?V5
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  320     msgPtr->transID = transID;
        MOV     A,?V7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  321     msgPtr->dstAddrMode = dstAddrMode;
        MOV     A,?V6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  322     msgPtr->dstAddr = dstAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V3
        MOVX    @DPTR,A
//  323 
//  324 #if defined ( MT_AF_CB_FUNC )
//  325     /* If MT has subscribed for this callback, don't send as a message. */
//  326     if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
//  327     {
//  328       /* Send callback if it's subscribed */
//  329       MT_AfReflectError( (void *)msgPtr );
//  330       /* Release the memory. */
//  331       osal_msg_deallocate( (void *)msgPtr );
//  332     }
//  333     else
//  334 #endif
//  335     {
//  336       /* send message through task message */
//  337       osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        MOV     A,R1
//  338     }
//  339   }
//  340 }
??afReflectError_0:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  341 
//  342 /*********************************************************************
//  343  * @fn          afIncomingData
//  344  *
//  345  * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
//  346  *
//  347  * @param       aff  - pointer to APS frame format
//  348  * @param       SrcAddress  - Source address
//  349  * @param       SrcPanId  - Source PAN ID
//  350  * @param       sig - incoming message's link quality
//  351  * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
//  352  * @param       SecurityUse - Security enable/disable
//  353  * @param       timestamp - the MAC Timer2 timestamp at Rx.
//  354  * @param       radius - incoming messages received radius
//  355  *
//  356  * @return      none
//  357  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  358 void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
afIncomingData:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function afIncomingData
        CODE
//  359                      NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
//  360                      uint32 timestamp, uint8 radius )
//  361 {
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afBuildMSGIncoming
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V11,A
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
//  362   endPointDesc_t *epDesc = NULL;
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
//  363   epList_t *pList = epList;
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
//  364 #if !defined ( APS_NO_GROUPS )
//  365   uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
        MOV     ?V8,#-0x2
//  366 #endif
//  367 
//  368   if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ANL     A,#0xc
        XRL     A,#0xc
        JNZ     ??afIncomingData_0
//  369   {
//  370 #if !defined ( APS_NO_GROUPS )
//  371     // Find the first endpoint for this group
//  372     grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV     R1,#-0x2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
        MOV     A,R1
        MOV     ?V8,A
//  373     if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
        MOV     A,#-0x2
        XRL     A,?V8
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  374       return;   // No endpoint found
//  375 
//  376     epDesc = afFindEndPointDesc( grpEp );
        ; Setup parameters for call to function afFindEndPointDesc
        MOV     R1,?V8
        LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV     ?V12,R2
        MOV     ?V13,R3
        MOV     ?V0,?V12
        MOV     ?V1,?V13
//  377     if ( epDesc == NULL )
        MOV     A,?V0
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  378       return;   // Endpoint descriptor not found
//  379 
//  380     pList = afFindEndPointDescList( epDesc->endPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V12,R2
        MOV     ?V13,R3
        MOV     ?V2,?V12
        MOV     ?V3,?V13
        SJMP    ??afIncomingData_2
//  381 #else
//  382     return; // Not supported
//  383 #endif
//  384   }
//  385   else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
??afIncomingData_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??afIncomingData_3
//  386   {
//  387     // Set the list
//  388     if ( pList != NULL )
        MOV     A,?V2
        ORL     A,?V3
        JZ      ??afIncomingData_2
//  389     {
//  390       epDesc = pList->epDesc;
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
        SJMP    ??afIncomingData_2
//  391     }
//  392   }
//  393   else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
??afIncomingData_3:
        ; Setup parameters for call to function afFindEndPointDesc
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV     ?V12,R2
        MOV     ?V13,R3
        MOV     R0,?V12
        MOV     R1,?V13
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     A,R0
        ORL     A,R1
        JZ      ??afIncomingData_2
//  394   {
//  395     pList = afFindEndPointDescList( epDesc->endPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V12,R2
        MOV     ?V13,R3
        MOV     ?V2,?V12
        MOV     ?V3,?V13
//  396   }
//  397 
//  398   while ( epDesc )
??afIncomingData_2:
        MOV     A,?V0
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  399   {
//  400     uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  401 
//  402     if ( pList->pfnDescCB )
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??afIncomingData_4
//  403     {
//  404       uint16 *pID = (uint16 *)(pList->pfnDescCB(
//  405                                  AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
        ; Setup parameters for indirect call
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x2
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V12,R2
        MOV     ?V13,R3
        MOV     ?V14,?V12
        MOV     ?V15,?V13
//  406       if ( pID )
        MOV     A,?V14
        ORL     A,?V15
        JZ      ??afIncomingData_5
//  407       {
//  408         epProfileID = *pID;
        MOV     DPL,?V14
        MOV     DPH,?V15
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  409         osal_mem_free( pID );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V14
        MOV     R3,?V15
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??afIncomingData_5
//  410       }
//  411     }
//  412     else if ( epDesc->simpleDesc )
??afIncomingData_4:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??afIncomingData_5
//  413     {
//  414       epProfileID = epDesc->simpleDesc->AppProfId;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  415     }
//  416 
//  417     // First part of verification is to make sure that:
//  418     // the local Endpoint ProfileID matches the received ProfileID OR
//  419     // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
//  420     // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
//  421     if ( (aff->ProfileID == epProfileID) ||
//  422          ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
//  423          ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
??afIncomingData_5:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??afIncomingData_6
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??afIncomingData_6:
        JZ      ??afIncomingData_7
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        JNZ     ??afIncomingData_8
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??afIncomingData_7
??afIncomingData_8:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??afIncomingData_9 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??afIncomingData_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??afIncomingData_10:
        JNZ     ??afIncomingData_9
//  424     {
//  425       // Save original endpoint
//  426       uint8 endpoint = aff->DstEndPoint;
??afIncomingData_7:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
//  427 
//  428       // overwrite with descriptor's endpoint
//  429       aff->DstEndPoint = epDesc->endPoint;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  430 
//  431       afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
//  432                          nwkSeqNum, SecurityUse, timestamp, radius );
        ; Setup parameters for call to function afBuildMSGIncoming
        MOV     A,#0x26
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V12,A
        MOV     R0,#?V12
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,#0x26
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V12,A
        MOV     R0,#?V12
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R0,#?V10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
//  433 
//  434       // Restore with original endpoint
//  435       aff->DstEndPoint = endpoint;
        MOV     A,?V9
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  436     }
//  437 
//  438     if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
??afIncomingData_9:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ANL     A,#0xc
        XRL     A,#0xc
        JNZ     ??afIncomingData_11
//  439     {
//  440 #if !defined ( APS_NO_GROUPS )
//  441       // Find the next endpoint for this group
//  442       grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV     R1,?V8
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
        MOV     A,R1
        MOV     ?V8,A
//  443       if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
        MOV     A,#-0x2
        XRL     A,?V8
        JZ      ??afIncomingData_1
//  444         return;   // No endpoint found
//  445 
//  446       epDesc = afFindEndPointDesc( grpEp );
        ; Setup parameters for call to function afFindEndPointDesc
        MOV     R1,?V8
        LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV     ?V12,R2
        MOV     ?V13,R3
        MOV     ?V0,?V12
        MOV     ?V1,?V13
//  447       if ( epDesc == NULL )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??afIncomingData_1
//  448         return;   // Endpoint descriptor not found
//  449 
//  450       pList = afFindEndPointDescList( epDesc->endPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V12,R2
        MOV     ?V13,R3
        MOV     ?V2,?V12
        MOV     ?V3,?V13
        LJMP    ??afIncomingData_2 & 0xFFFF
//  451 #else
//  452       return;
//  453 #endif
//  454     }
//  455     else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
??afIncomingData_11:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??afIncomingData_12
//  456     {
//  457       pList = pList->nextDesc;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
//  458       if ( pList )
        MOV     A,?V2
        ORL     A,?V3
        JZ      ??afIncomingData_13
//  459         epDesc = pList->epDesc;
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
        LJMP    ??afIncomingData_2 & 0xFFFF
//  460       else
//  461         epDesc = NULL;
??afIncomingData_13:
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
        LJMP    ??afIncomingData_2 & 0xFFFF
//  462     }
//  463     else
//  464       epDesc = NULL;
??afIncomingData_12:
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
        LJMP    ??afIncomingData_2 & 0xFFFF
//  465   }
//  466 }
??afIncomingData_1:
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  467 
//  468 /*********************************************************************
//  469  * @fn          afBuildMSGIncoming
//  470  *
//  471  * @brief       Build the message for the app
//  472  *
//  473  * @param
//  474  *
//  475  * @return      pointer to next in data buffer
//  476  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  477 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
afBuildMSGIncoming:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function afBuildMSGIncoming
        CODE
//  478                  zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  479                  uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
//  480 {
        FUNCALL afBuildMSGIncoming, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, afCopyAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V14,R4
        MOV     ?V15,R5
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V13,A
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,#0x26
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V11,A
//  481   afIncomingMSGPacket_t *MSGpkt;
//  482   const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
        MOV     A,?V0
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x27
        MOV     ?V12,A
//  483   uint8 *asdu = aff->asdu;
        MOV     A,?V0
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  484   MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,?V12
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R6,?V8
        MOV     R7,?V9
//  485 
//  486   if ( MSGpkt == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
//  487   {
//  488     return;
//  489   }
//  490 
//  491   MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1a
        MOVX    @DPTR,A
//  492   MSGpkt->groupId = aff->GroupID;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  493   MSGpkt->clusterId = aff->ClusterID;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  494   afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
        ; Setup parameters for call to function afCopyAddress
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??afCopyAddress::?relay`; Banked call to: afCopyAddress
//  495   MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  496   MSGpkt->endPoint = epDesc->endPoint;
        MOV     DPL,?V14
        MOV     DPH,?V15
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  497   MSGpkt->wasBroadcast = aff->wasBroadcast;
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  498   MSGpkt->LinkQuality = sig->LinkQuality;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  499   MSGpkt->correlation = sig->correlation;
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  500   MSGpkt->rssi = sig->rssi;
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  501   MSGpkt->SecurityUse = SecurityUse;
        MOV     A,?V13
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  502   MSGpkt->timestamp = timestamp;
        MOV     A,R6
        ADD     A,#0x1a
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     R0,#?V4
        LCALL   ?L_MOV_TO_X
//  503   MSGpkt->nwkSeqNum = nwkSeqNum;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x1e
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  504   MSGpkt->macSrcAddr = aff->macSrcAddr;
        MOV     A,?V0
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x24
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  505   MSGpkt->macDestAddr = aff->macDestAddr;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  506   MSGpkt->srcAddr.panId = SrcPanId;
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  507   MSGpkt->cmd.TransSeqNumber = 0;
        MOV     A,R6
        ADD     A,#0x1f
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  508   MSGpkt->cmd.DataLength = aff->asduLength;
        MOV     A,?V0
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  509   MSGpkt->radius = radius;
        MOV     A,?V11
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x26
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  510 
//  511   if ( MSGpkt->cmd.DataLength )
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??afBuildMSGIncoming_1
//  512   {
//  513     MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
        MOV     A,R6
        ADD     A,#0x27
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  514     osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        SJMP    ??afBuildMSGIncoming_2
//  515   }
//  516   else
//  517   {
//  518     MSGpkt->cmd.Data = NULL;
??afBuildMSGIncoming_1:
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  519   }
//  520 
//  521 #if defined ( MT_AF_CB_FUNC )
//  522   // If ZDO or SAPI have registered for this endpoint, dont intercept it here
//  523   if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
//  524   {
//  525     MT_AfIncomingMsg( (void *)MSGpkt );
//  526     // Release the memory.
//  527     osal_msg_deallocate( (void *)MSGpkt );
//  528   }
//  529   else
//  530 #endif
//  531   {
//  532     // Send message through task message.
//  533     osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
??afBuildMSGIncoming_2:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,?V14
        MOV     DPH,?V15
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        MOV     A,R1
//  534   }
//  535 }
??afBuildMSGIncoming_0:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  536 
//  537 /*********************************************************************
//  538  * @fn      AF_DataRequest
//  539  *
//  540  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  541  *          SendMulti and MSG-Send.
//  542  *
//  543  * input parameters
//  544  *
//  545  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  546  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  547  * @param   cID - A valid cluster ID as specified by the Profile.
//  548  * @param   len - Number of bytes of data pointed to by next param.
//  549  * @param  *buf - A pointer to the data bytes to send.
//  550  * @param  *transID - A pointer to a byte which can be modified and which will
//  551  *                    be used as the transaction sequence number of the msg.
//  552  * @param   options - Valid bit mask of Tx options.
//  553  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  554  *
//  555  * output parameters
//  556  *
//  557  * @param  *transID - Incremented by one if the return value is success.
//  558  *
//  559  * @return  afStatus_t - See previous definition of afStatus_... types.
//  560  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  561 uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
AF_DataRequestDiscoverRoute:
        DATA8
        DS 1
        REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  562 afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequest:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function AF_DataRequest
        CODE
//  563                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  564                            uint8 options, uint8 radius )
//  565 {
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, RTG_CheckRtStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_IsAddressBroadcast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afGetDescCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, APSDE_DataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 56)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     ?V1,R1
        MOV     A,#0x3a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V14,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V15,A
        MOV     A,#0x3e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
        MOV     A,#0x40
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V12,A
//  566   pDescCB pfnDescCB;
//  567   ZStatus_t stat;
//  568   APSDE_DataReq_t req;
//  569   afDataReqMTU_t mtu;
//  570   epList_t *pList;
//  571 
//  572   // Verify source end point
//  573   if ( srcEP == NULL )
        MOV     A,?V2
        ORL     A,?V3
        JNZ     ??AF_DataRequest_0
//  574   {
//  575     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        LJMP    ??AF_DataRequest_1 & 0xFFFF
//  576   }
//  577 
//  578 #if !defined( REFLECTOR )
//  579   if ( dstAddr->addrMode == afAddrNotPresent )
//  580   {
//  581     return afStatus_INVALID_PARAMETER;
//  582   }
//  583 #endif
//  584 
//  585   // Check if route is available before sending data
//  586   if ( options & AF_LIMIT_CONCENTRATOR  )
??AF_DataRequest_0:
        MOV     A,?V1
        MOV     C,0xE0 /* A   */.3
        JNC     ??AF_DataRequest_2
//  587   {
//  588     if ( dstAddr->addrMode != afAddr16Bit )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??AF_DataRequest_3
//  589     {
//  590       return ( afStatus_INVALID_PARAMETER );
        MOV     R1,#0x2
        LJMP    ??AF_DataRequest_1 & 0xFFFF
//  591     }
//  592 
//  593     // First, make sure the destination is not its self, then check for an existing route.
//  594     if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
//  595         && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
??AF_DataRequest_3:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R0,?V6
        MOV     R1,?V7
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??AF_DataRequest_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??AF_DataRequest_4:
        JZ      ??AF_DataRequest_2
        ; Setup parameters for call to function RTG_CheckRtStatus
        MOV     R4,#0x3
        MOV     R1,#0x1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
        MOV     A,R1
        JZ      ??AF_DataRequest_2
//  596     {
//  597       // A valid route to a concentrator wasn't found
//  598       return ( afStatus_NO_ROUTE );
        MOV     R1,#-0x33
        LJMP    ??AF_DataRequest_1 & 0xFFFF
//  599     }
//  600   }
//  601 
//  602   // Validate broadcasting
//  603   if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
//  604        ( dstAddr->addrMode == afAddrBroadcast )    )
??AF_DataRequest_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??AF_DataRequest_5
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??AF_DataRequest_6
//  605   {
//  606     // Check for valid broadcast values
//  607     if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
??AF_DataRequest_5:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
        MOV     A,R1
        JZ      ??AF_DataRequest_7
//  608     {
//  609       // Force mode to broadcast
//  610       dstAddr->addrMode = afAddrBroadcast;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0xf
        MOVX    @DPTR,A
        SJMP    ??AF_DataRequest_8
//  611     }
//  612     else
//  613     {
//  614       // Address is not a valid broadcast type
//  615       if ( dstAddr->addrMode == afAddrBroadcast )
??AF_DataRequest_7:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??AF_DataRequest_8
//  616       {
//  617         return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        LJMP    ??AF_DataRequest_1 & 0xFFFF
//  618       }
//  619     }
//  620   }
//  621   else if ( dstAddr->addrMode != afAddr64Bit &&
//  622             dstAddr->addrMode != afAddrGroup &&
//  623             dstAddr->addrMode != afAddrNotPresent )
??AF_DataRequest_6:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??AF_DataRequest_8
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??AF_DataRequest_8
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??AF_DataRequest_8
//  624   {
//  625     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        LJMP    ??AF_DataRequest_1 & 0xFFFF
//  626   }
//  627 
//  628   // Set destination address
//  629   req.dstAddr.addrMode = dstAddr->addrMode;
??AF_DataRequest_8:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  630   if ( dstAddr->addrMode == afAddr64Bit )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??AF_DataRequest_9
//  631   {
//  632     osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP    ??AF_DataRequest_10
//  633   }
//  634   else
//  635   {
//  636     req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
??AF_DataRequest_9:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  637   }
//  638 
//  639   // This option is to use Wildcard ProfileID in outgoing packets
//  640   if ( options & AF_WILDCARD_PROFILEID )
??AF_DataRequest_10:
        MOV     A,?V1
        MOV     C,0xE0 /* A   */.1
        JNC     ??AF_DataRequest_11
//  641   {
//  642     req.profileID = ZDO_WILDCARD_PROFILE_ID;
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
        LJMP    ??AF_DataRequest_12 & 0xFFFF
//  643   }
//  644   else
//  645   {
//  646     req.profileID = ZDO_PROFILE_ID;
??AF_DataRequest_11:
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  647 
//  648     if ( (pfnDescCB = afGetDescCB( srcEP )) )
        ; Setup parameters for call to function afGetDescCB
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??afGetDescCB::?relay`; Banked call to: afGetDescCB
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R0,?V6
        MOV     R1,?V7
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??AF_DataRequest_13
//  649     {
//  650       uint16 *pID = (uint16 *)(pfnDescCB(
//  651                                    AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
        ; Setup parameters for indirect call
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x2
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     ?V6,?V10
        MOV     ?V7,?V11
//  652       if ( pID )
        MOV     A,?V6
        ORL     A,?V7
        JZ      ??AF_DataRequest_12
//  653       {
//  654         req.profileID = *pID;
        MOV     DPL,?V6
        MOV     DPH,?V7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  655         osal_mem_free( pID );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V6
        MOV     R3,?V7
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??AF_DataRequest_12
//  656       }
//  657     }
//  658     else if ( srcEP->simpleDesc )
??AF_DataRequest_13:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??AF_DataRequest_12
//  659     {
//  660       req.profileID = srcEP->simpleDesc->AppProfId;
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  661     }
//  662   }
//  663 
//  664   req.txOptions = 0;
??AF_DataRequest_12:
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  665 
//  666   if ( ( options & AF_ACK_REQUEST              ) &&
//  667        ( req.dstAddr.addrMode != AddrBroadcast ) &&
//  668        ( req.dstAddr.addrMode != AddrGroup     )    )
        MOV     A,?V1
        MOV     C,0xE0 /* A   */.4
        JNC     ??AF_DataRequest_14
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xf
        JZ      ??AF_DataRequest_14
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??AF_DataRequest_14
//  669   {
//  670     req.txOptions |=  APS_TX_OPTIONS_ACK;
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x4
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x0
        MOVX    @DPTR,A
//  671   }
//  672 
//  673   if ( options & AF_SKIP_ROUTING )
??AF_DataRequest_14:
        MOV     A,?V1
        MOV     C,0xE0 /* A   */.7
        JNC     ??AF_DataRequest_15
//  674   {
//  675     req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x10
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x0
        MOVX    @DPTR,A
//  676   }
//  677 
//  678   if ( options & AF_EN_SECURITY )
??AF_DataRequest_15:
        MOV     A,?V1
        MOV     C,0xE0 /* A   */.6
        JNC     ??AF_DataRequest_16
//  679   {
//  680     req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x0
        MOVX    @DPTR,A
//  681     mtu.aps.secure = TRUE;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??AF_DataRequest_17
//  682   }
//  683   else
//  684   {
//  685     mtu.aps.secure = FALSE;
??AF_DataRequest_16:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  686   }
//  687 
//  688   if ( options & AF_PREPROCESS )
??AF_DataRequest_17:
        MOV     A,?V1
        MOV     C,0xE0 /* A   */.2
        JNC     ??AF_DataRequest_18
//  689   {
//  690     req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x0
        MOVX    @DPTR,A
//  691   }
//  692 
//  693   mtu.kvp = FALSE;
??AF_DataRequest_18:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
//  694 
//  695   if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
        MOV     A,?V1
        MOV     C,0xE0 /* A   */.5
        JNC     ??AF_DataRequest_19
//  696   {
//  697     req.discoverRoute = DISC_ROUTE_INITIATE;
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
        SJMP    ??AF_DataRequest_20
//  698   }
//  699   else
//  700   {
//  701     req.discoverRoute = AF_DataRequestDiscoverRoute;
??AF_DataRequest_19:
        MOV     DPTR,#AF_DataRequestDiscoverRoute
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  702   }
//  703 
//  704   req.transID       = *transID;
??AF_DataRequest_20:
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  705   req.srcEP         = srcEP->endPoint;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  706   req.dstEP         = dstAddr->endPoint;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  707   req.clusterID     = cID;
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  708   req.asduLen       = len;
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V14
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V15
        MOVX    @DPTR,A
//  709   req.asdu          = buf;
        MOV     A,#0x3c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  710   req.radiusCounter = radius;
        MOV     A,?V12
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  711 #if defined ( INTER_PAN )
//  712   req.dstPanId      = dstAddr->panId;
//  713 #endif // INTER_PAN
//  714 
//  715   // Look if there is a Callback function registered for this endpoint
//  716   // The callback is used to control the AF Transaction ID used when sending messages
//  717   pList = afFindEndPointDescList( srcEP->endPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V4,?V6
        MOV     ?V5,?V7
//  718 
//  719   if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
        MOV     A,?V4
        ORL     A,?V5
        JZ      ??AF_DataRequest_21
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??AF_DataRequest_21
//  720   {
//  721     pList->pfnApplCB( &req );
        ; Setup parameters for indirect call
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  722   }
//  723 
//  724 #if defined ( INTER_PAN )
//  725   if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
//  726   {
//  727     if ( len > INTERP_DataReqMTU() )
//  728     {
//  729       stat = afStatus_INVALID_PARAMETER;
//  730     }
//  731     else
//  732     {
//  733       stat = INTERP_DataReq( &req );
//  734     }
//  735   }
//  736   else
//  737 #endif // INTER_PAN
//  738   {
//  739     if (len > afDataReqMTU( &mtu ) )
??AF_DataRequest_21:
        ; Setup parameters for call to function afDataReqMTU
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
        MOV     A,R1
        MOV     R0,A
        MOV     R1,#0x0
        CLR     C
        MOV     A,R0
        SUBB    A,?V14
        MOV     A,R1
        SUBB    A,?V15
        JNC     ??AF_DataRequest_22
//  740     {
//  741       if (apsfSendFragmented)
        MOV     DPTR,#apsfSendFragmented
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??AF_DataRequest_23
//  742       {
//  743         stat = (*apsfSendFragmented)( &req );
        ; Setup parameters for indirect call
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        MOV     DPTR,#apsfSendFragmented
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,R1
        MOV     ?V0,A
        SJMP    ??AF_DataRequest_24
//  744       }
//  745       else
//  746       {
//  747         stat = afStatus_INVALID_PARAMETER;
??AF_DataRequest_23:
        MOV     ?V0,#0x2
        SJMP    ??AF_DataRequest_24
//  748       }
//  749     }
//  750     else
//  751     {
//  752       stat = APSDE_DataReq( &req );
??AF_DataRequest_22:
        ; Setup parameters for call to function APSDE_DataReq
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
        MOV     A,R1
        MOV     ?V0,A
//  753     }
//  754   }
//  755 
//  756   /*
//  757    * If this is an EndPoint-to-EndPoint message on the same device, it will not
//  758    * get added to the NWK databufs. So it will not go OTA and it will not get
//  759    * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
//  760    * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
//  761    * message with the first in line TransSeqNumber, even on a multi message.
//  762    * Also note that a reflected msg will not have its confirmation generated
//  763    * here.
//  764    */
//  765   if ( (req.dstAddr.addrMode == Addr16Bit) &&
//  766        (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
??AF_DataRequest_24:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??AF_DataRequest_25
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R0,?V6
        MOV     R1,?V7
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??AF_DataRequest_26
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??AF_DataRequest_26:
        JNZ     ??AF_DataRequest_25
//  767   {
//  768     afDataConfirm( srcEP->endPoint, *transID, stat );
        ; Setup parameters for call to function afDataConfirm
        MOV     R3,?V0
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
//  769   }
//  770 
//  771   if ( stat == afStatus_SUCCESS )
??AF_DataRequest_25:
        MOV     A,?V0
        JNZ     ??AF_DataRequest_27
//  772   {
//  773     (*transID)++;
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  774   }
//  775 
//  776   return (afStatus_t)stat;
??AF_DataRequest_27:
        MOV     R1,?V0
??AF_DataRequest_1:
        MOV     A,#0x20
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
//  777 }
          CFI EndBlock cfiBlock7
//  778 
//  779 #if defined ( ZIGBEE_SOURCE_ROUTING )
//  780 /*********************************************************************
//  781  * @fn      AF_DataRequestSrcRtg
//  782  *
//  783  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  784  *          SendMulti and MSG-Send.
//  785  *
//  786  * input parameters
//  787  *
//  788  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  789  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  790  * @param   cID - A valid cluster ID as specified by the Profile.
//  791  * @param   len - Number of bytes of data pointed to by next param.
//  792  * @param  *buf - A pointer to the data bytes to send.
//  793  * @param  *transID - A pointer to a byte which can be modified and which will
//  794  *                    be used as the transaction sequence number of the msg.
//  795  * @param   options - Valid bit mask of Tx options.
//  796  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  797  * @param   relayCnt - Number of devices in the relay list
//  798  * @param   pRelayList - Pointer to the relay list
//  799  *
//  800  * output parameters
//  801  *
//  802  * @param  *transID - Incremented by one if the return value is success.
//  803  *
//  804  * @return  afStatus_t - See previous definition of afStatus_... types.
//  805  */
//  806 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  807 afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequestSrcRtg:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function AF_DataRequestSrcRtg
        CODE
//  808                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  809                            uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
//  810 {
        FUNCALL AF_DataRequestSrcRtg, RTG_AddSrcRtgEntry_Guaranteed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequestSrcRtg, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V10,R4
        MOV     ?V11,R5
        MOV     ?V5,R1
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V14,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V15,A
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V13,A
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
//  811   uint8 status;
//  812 
//  813   /* Add the source route to the source routing table */
//  814   status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
//  815                                          pRelayList );
        ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R1,?V3
        MOV     DPL,?V6
        MOV     DPH,?V7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
        MOV     A,R1
        MOV     ?V2,A
//  816 
//  817   if( status == RTG_SUCCESS)
        MOV     A,?V2
        JNZ     ??AF_DataRequestSrcRtg_0
//  818   {
//  819     /* Call AF_DataRequest to send the data */
//  820     status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
        ; Setup parameters for call to function AF_DataRequest
        MOV     A,?V4
        MOV     ?V8,A
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V8,?V12
        MOV     ?V9,?V13
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V8,?V14
        MOV     ?V9,?V15
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V8,R6
        MOV     ?V9,R7
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R1,?V5
        MOV     R4,?V10
        MOV     R5,?V11
        MOV     R2,?V6
        MOV     R3,?V7
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        MOV     ?V2,A
        SJMP    ??AF_DataRequestSrcRtg_1
//  821   }
//  822   else if( status == RTG_INVALID_PATH )
??AF_DataRequestSrcRtg_0:
        MOV     A,#0x5
        XRL     A,?V2
        JNZ     ??AF_DataRequestSrcRtg_2
//  823   {
//  824     /* The source route relay count is exceeding the network limit */
//  825     status = afStatus_INVALID_PARAMETER;
        MOV     ?V2,#0x2
        SJMP    ??AF_DataRequestSrcRtg_1
//  826   }
//  827   else
//  828   {
//  829     /* The guaranteed adding entry fails due to memory failure */
//  830     status = afStatus_MEM_FAIL;
??AF_DataRequestSrcRtg_2:
        MOV     ?V2,#0x10
//  831   }
//  832   return status;
??AF_DataRequestSrcRtg_1:
        MOV     R1,?V2
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
//  833 }
          CFI EndBlock cfiBlock8
//  834 
//  835 #endif
//  836 
//  837 /*********************************************************************
//  838  * @fn      afFindEndPointDescList
//  839  *
//  840  * @brief   Find the endpoint description entry from the endpoint
//  841  *          number.
//  842  *
//  843  * @param   EndPoint - Application Endpoint to look for
//  844  *
//  845  * @return  the address to the endpoint/interface description entry
//  846  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  847 static epList_t *afFindEndPointDescList( uint8 EndPoint )
afFindEndPointDescList:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function afFindEndPointDescList
        CODE
//  848 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  849   epList_t *epSearch;
//  850 
//  851   for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
??afFindEndPointDescList_0:
        MOV     A,R2
        ORL     A,R3
        JZ      ??afFindEndPointDescList_1
//  852   {
//  853     if (epSearch->epDesc->endPoint == EndPoint)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        XRL     A,R1
        JZ      ??afFindEndPointDescList_1
//  854     {
//  855       break;
//  856     }
//  857   }
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        SJMP    ??afFindEndPointDescList_0
//  858 
//  859   return epSearch;
??afFindEndPointDescList_1:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  860 }
          CFI EndBlock cfiBlock9
//  861 
//  862 /*********************************************************************
//  863  * @fn      afFindEndPointDesc
//  864  *
//  865  * @brief   Find the endpoint description entry from the endpoint
//  866  *          number.
//  867  *
//  868  * @param   EndPoint - Application Endpoint to look for
//  869  *
//  870  * @return  the address to the endpoint/interface description entry
//  871  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  872 endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
afFindEndPointDesc:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function afFindEndPointDesc
        CODE
//  873 {
        FUNCALL afFindEndPointDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R1
//  874   epList_t *epSearch;
//  875 
//  876   // Look for the endpoint
//  877   epSearch = afFindEndPointDescList( EndPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     R1,?V0
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
//  878 
//  879   if ( epSearch )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afFindEndPointDesc_0
//  880     return ( epSearch->epDesc );
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        SJMP    ??afFindEndPointDesc_1
//  881   else
//  882     return ( (endPointDesc_t *)NULL );
??afFindEndPointDesc_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??afFindEndPointDesc_1:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  883 }
          CFI EndBlock cfiBlock10
//  884 
//  885 /*********************************************************************
//  886  * @fn      afFindSimpleDesc
//  887  *
//  888  * @brief   Find the Simple Descriptor from the endpoint number.
//  889  *
//  890  * @param   EP - Application Endpoint to look for.
//  891  *
//  892  * @return  Non-zero to indicate that the descriptor memory must be freed.
//  893  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  894 uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
afFindSimpleDesc:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function afFindSimpleDesc
        CODE
//  895 {
        FUNCALL afFindSimpleDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V1,R1
//  896   epList_t *epItem = afFindEndPointDescList( EP );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     R1,?V1
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V2,?V4
        MOV     ?V3,?V5
//  897   uint8 rtrn = FALSE;
        MOV     ?V0,#0x0
//  898 
//  899   if ( epItem )
        MOV     A,?V2
        ORL     A,?V3
        JZ      ??afFindSimpleDesc_0
//  900   {
//  901     if ( epItem->pfnDescCB )
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??afFindSimpleDesc_1
//  902     {
//  903       *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
        ; Setup parameters for indirect call
        MOV     R2,?V1
        MOV     R1,#0x1
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  904       rtrn = TRUE;
        MOV     ?V0,#0x1
        SJMP    ??afFindSimpleDesc_2
//  905     }
//  906     else
//  907     {
//  908       *ppDesc = epItem->epDesc->simpleDesc;
??afFindSimpleDesc_1:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        SJMP    ??afFindSimpleDesc_2
//  909     }
//  910   }
//  911   else
//  912   {
//  913     *ppDesc = NULL;
??afFindSimpleDesc_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  914   }
//  915 
//  916   return rtrn;
??afFindSimpleDesc_2:
        MOV     R1,?V0
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  917 }
          CFI EndBlock cfiBlock11
//  918 
//  919 /*********************************************************************
//  920  * @fn      afGetDescCB
//  921  *
//  922  * @brief   Get the Descriptor callback function.
//  923  *
//  924  * @param   epDesc - pointer to the endpoint descriptor
//  925  *
//  926  * @return  function pointer or NULL
//  927  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  928 static pDescCB afGetDescCB( endPointDesc_t *epDesc )
afGetDescCB:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function afGetDescCB
        CODE
//  929 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
//  930   epList_t *epSearch;
//  931 
//  932   // Start at the beginning
//  933   epSearch = epList;
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  934 
//  935   // Look through the list until the end
//  936   while ( epSearch )
??afGetDescCB_0:
        MOV     A,R4
        ORL     A,R5
        JZ      ??afGetDescCB_1
//  937   {
//  938     // Is there a match?
//  939     if ( epSearch->epDesc == epDesc )
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R0
        XRL     A,R2
        JNZ     ??afGetDescCB_2
        MOV     A,R1
        XRL     A,R3
??afGetDescCB_2:
        JNZ     ??afGetDescCB_3
//  940     {
//  941       return ( epSearch->pfnDescCB );
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        SJMP    ??afGetDescCB_4
//  942     }
//  943     else
//  944       epSearch = epSearch->nextDesc;  // Next entry
??afGetDescCB_3:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        SJMP    ??afGetDescCB_0
//  945   }
//  946 
//  947   return ( (pDescCB)NULL );
??afGetDescCB_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
??afGetDescCB_4:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  948 }
          CFI EndBlock cfiBlock12
//  949 
//  950 /*********************************************************************
//  951  * @fn      afDataReqMTU
//  952  *
//  953  * @brief   Get the Data Request MTU(Max Transport Unit).
//  954  *
//  955  * @param   fields - afDataReqMTU_t
//  956  *
//  957  * @return  uint8(MTU)
//  958  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  959 uint8 afDataReqMTU( afDataReqMTU_t* fields )
afDataReqMTU:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function afDataReqMTU
        CODE
//  960 {
        FUNCALL afDataReqMTU, APSDE_DataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  961   uint8 len;
//  962   uint8 hdr;
//  963 
//  964   if ( fields->kvp == TRUE )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??afDataReqMTU_0
//  965   {
//  966     hdr = AF_HDR_KVP_MAX_LEN;
        MOV     ?V0,#0x8
        SJMP    ??afDataReqMTU_1
//  967   }
//  968   else
//  969   {
//  970     hdr = AF_HDR_V1_1_MAX_LEN;
??afDataReqMTU_0:
        MOV     ?V0,#0x0
//  971   }
//  972 
//  973   len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
??afDataReqMTU_1:
        ; Setup parameters for call to function APSDE_DataReqMTU
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
        MOV     A,R1
        CLR     C
        SUBB    A,?V0
        MOV     ?V1,A
//  974 
//  975   return len;
        MOV     R1,?V1
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
//  976 }
          CFI EndBlock cfiBlock13
//  977 
//  978 /*********************************************************************
//  979  * @fn      afGetMatch
//  980  *
//  981  * @brief   Set the allow response flag.
//  982  *
//  983  * @param   ep - Application Endpoint to look for
//  984  * @param   action - true - allow response, false - no response
//  985  *
//  986  * @return  TRUE allow responses, FALSE no response
//  987  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  988 uint8 afGetMatch( uint8 ep )
afGetMatch:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function afGetMatch
        CODE
//  989 {
        FUNCALL afGetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R1
//  990   epList_t *epSearch;
//  991 
//  992   // Look for the endpoint
//  993   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     R1,?V0
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
//  994 
//  995   if ( epSearch )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afGetMatch_0
//  996   {
//  997     if ( epSearch->flags & eEP_AllowMatch )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??afGetMatch_1
//  998       return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afGetMatch_2
//  999     else
// 1000       return ( FALSE );
??afGetMatch_1:
        MOV     R1,#0x0
        SJMP    ??afGetMatch_2
// 1001   }
// 1002   else
// 1003     return ( FALSE );
??afGetMatch_0:
        MOV     R1,#0x0
??afGetMatch_2:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
// 1004 }
          CFI EndBlock cfiBlock14
// 1005 
// 1006 /*********************************************************************
// 1007  * @fn      afSetMatch
// 1008  *
// 1009  * @brief   Set the allow response flag.
// 1010  *
// 1011  * @param   ep - Application Endpoint to look for
// 1012  * @param   action - true - allow response, false - no response
// 1013  *
// 1014  * @return  TRUE if success, FALSE if endpoint not found
// 1015  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1016 uint8 afSetMatch( uint8 ep, uint8 action )
afSetMatch:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function afSetMatch
        CODE
// 1017 {
        FUNCALL afSetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     ?V1,R2
// 1018   epList_t *epSearch;
// 1019 
// 1020   // Look for the endpoint
// 1021   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     R1,?V0
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 1022 
// 1023   if ( epSearch )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afSetMatch_0
// 1024   {
// 1025     if ( action )
        MOV     A,?V1
        JZ      ??afSetMatch_1
// 1026     {
// 1027       epSearch->flags |= eEP_AllowMatch;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
        SJMP    ??afSetMatch_2
// 1028     }
// 1029     else
// 1030     {
// 1031       epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
??afSetMatch_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        MOVX    @DPTR,A
// 1032     }
// 1033     return ( TRUE );
??afSetMatch_2:
        MOV     R1,#0x1
        SJMP    ??afSetMatch_3
// 1034   }
// 1035   else
// 1036     return ( FALSE );
??afSetMatch_0:
        MOV     R1,#0x0
??afSetMatch_3:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
// 1037 }
          CFI EndBlock cfiBlock15
// 1038 
// 1039 /*********************************************************************
// 1040  * @fn      afNumEndPoints
// 1041  *
// 1042  * @brief   Returns the number of endpoints defined (including 0)
// 1043  *
// 1044  * @param   none
// 1045  *
// 1046  * @return  number of endpoints
// 1047  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1048 uint8 afNumEndPoints( void )
afNumEndPoints:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function afNumEndPoints
        CODE
// 1049 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1050   epList_t *epSearch;
// 1051   uint8 endpoints;
// 1052 
// 1053   // Start at the beginning
// 1054   epSearch = epList;
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
// 1055   endpoints = 0;
        MOV     R1,#0x0
// 1056 
// 1057   while ( epSearch )
??afNumEndPoints_0:
        MOV     A,R2
        ORL     A,R3
        JZ      ??afNumEndPoints_1
// 1058   {
// 1059     endpoints++;
        INC     R1
// 1060     epSearch = epSearch->nextDesc;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        SJMP    ??afNumEndPoints_0
// 1061   }
// 1062 
// 1063   return ( endpoints );
??afNumEndPoints_1:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
// 1064 }
          CFI EndBlock cfiBlock16
// 1065 
// 1066 /*********************************************************************
// 1067  * @fn      afEndPoints
// 1068  *
// 1069  * @brief   Fills in the passed in buffer with the endpoint (numbers).
// 1070  *          Use afNumEndPoints to find out how big a buffer to supply.
// 1071  *
// 1072  * @param   epBuf - pointer to mem used
// 1073  *
// 1074  * @return  void
// 1075  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1076 void afEndPoints( uint8 *epBuf, uint8 skipZDO )
afEndPoints:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function afEndPoints
        CODE
// 1077 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1078   epList_t *epSearch;
// 1079   uint8 endPoint;
// 1080 
// 1081   // Start at the beginning
// 1082   epSearch = epList;
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
// 1083 
// 1084   while ( epSearch )
??afEndPoints_0:
        MOV     A,R4
        ORL     A,R5
        JZ      ??afEndPoints_1
// 1085   {
// 1086     endPoint = epSearch->epDesc->endPoint;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R6
        MOVX    A,@DPTR
        MOV     R0,A
// 1087 
// 1088     if ( !skipZDO || endPoint != 0 )
        MOV     A,R1
        JZ      ??afEndPoints_2
        MOV     A,R0
        JZ      ??afEndPoints_3
// 1089       *epBuf++ = endPoint;
??afEndPoints_2:
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 1090 
// 1091     epSearch = epSearch->nextDesc;
??afEndPoints_3:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        SJMP    ??afEndPoints_0
// 1092   }
// 1093 }
??afEndPoints_1:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock17
// 1094 
// 1095 /*********************************************************************
// 1096  * @fn      afCopyAddress
// 1097  *
// 1098  * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
// 1099  *          from the zAddrType_t parameter.
// 1100  *
// 1101  * @param   epBuf - pointer to mem used
// 1102  *
// 1103  * @return  void
// 1104  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1105 void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
afCopyAddress:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function afCopyAddress
        CODE
// 1106 {
        FUNCALL afCopyAddress, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
// 1107   afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1108   if ( zAddr->addrMode == Addr64Bit )
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??afCopyAddress_0
// 1109   {
// 1110     (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     DPL,?V2
        MOV     DPH,?V3
        SJMP    ??afCopyAddress_1
// 1111   }
// 1112   else
// 1113   {
// 1114     afAddr->addr.shortAddr = zAddr->addr.shortAddr;
??afCopyAddress_0:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1115   }
// 1116 
// 1117   // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
// 1118   afAddr->panId = 0;
??afCopyAddress_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1119 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock18
// 1120 
// 1121 /**************************************************************************************************
// 1122  * @fn          afAPSF_ConfigGet
// 1123  *
// 1124  * @brief       This function ascertains the fragmentation configuration that corresponds to
// 1125  *              the specified EndPoint.
// 1126  *
// 1127  * input parameters
// 1128  *
// 1129  * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
// 1130  *
// 1131  * output parameters
// 1132  *
// 1133  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1134  *
// 1135  * @return      None.
// 1136  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1137 void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigGet:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function afAPSF_ConfigGet
        CODE
// 1138 {
        FUNCALL afAPSF_ConfigGet, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afAPSF_ConfigGet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1139   epList_t *pList = afFindEndPointDescList(endPoint);
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     R1,?V2
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V0,?V4
        MOV     ?V1,?V5
// 1140 
// 1141   if (pList == NULL)
        MOV     A,?V0
        ORL     A,?V1
        JNZ     ??afAPSF_ConfigGet_0
// 1142   {
// 1143     pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x32
        MOVX    @DPTR,A
// 1144     pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??afAPSF_ConfigGet_1
// 1145   }
// 1146   else
// 1147   {
// 1148     (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigGet_0:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0
        ADD     A,#0x6
        MOV     ?V4,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     DPL,?V4
        MOV     DPH,?V5
// 1149   }
// 1150 }
??afAPSF_ConfigGet_1:
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock19
// 1151 
// 1152 /**************************************************************************************************
// 1153  * @fn          afAPSF_ConfigSet
// 1154  *
// 1155  * @brief       This function attempts to set the fragmentation configuration that corresponds to
// 1156  *              the specified EndPoint.
// 1157  *
// 1158  * input parameters
// 1159  *
// 1160  * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
// 1161  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1162  *
// 1163  * output parameters
// 1164  *
// 1165  * None.
// 1166  *
// 1167  * @return      afStatus_SUCCESS for success.
// 1168  *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
// 1169  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1170 afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigSet:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function afAPSF_ConfigSet
        CODE
// 1171 {
        FUNCALL afAPSF_ConfigSet, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afAPSF_ConfigSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1172   epList_t *pList = afFindEndPointDescList(endPoint);
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     R1,?V2
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V0,?V4
        MOV     ?V1,?V5
// 1173 
// 1174   if (pList == NULL)
        MOV     A,?V0
        ORL     A,?V1
        JNZ     ??afAPSF_ConfigSet_0
// 1175   {
// 1176     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??afAPSF_ConfigSet_1
// 1177   }
// 1178 
// 1179   (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigSet_0:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,?V0
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     DPL,?V4
        MOV     DPH,?V5
// 1180   return afStatus_SUCCESS;
        MOV     R1,#0x0
??afAPSF_ConfigSet_1:
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
// 1181 }
          CFI EndBlock cfiBlock20
// 1182 
// 1183 /**************************************************************************************************
// 1184  * @fn          afSetApplCB
// 1185  *
// 1186  * @brief       Sets the pointer to the Application Callback function for a
// 1187  *              specific EndPoint.
// 1188  *
// 1189  * input parameters
// 1190  *
// 1191  * @param       endPoint - The specific EndPoint for which to set Application Callback.
// 1192  * @param       pApplFn - A pointer to the Application Callback function.
// 1193  *
// 1194  * output parameters
// 1195  *
// 1196  * None.
// 1197  *
// 1198  * @return      TRUE if success, FALSE if endpoint not found
// 1199  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1200 uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
afSetApplCB:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function afSetApplCB
        CODE
// 1201 {
        FUNCALL afSetApplCB, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1202   if ( pApplFn != NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afSetApplCB_0
// 1203   {
// 1204     epList_t *epSearch;
// 1205 
// 1206     // Look for the endpoint
// 1207     epSearch = afFindEndPointDescList( endPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     R1,?V2
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V0,?V4
        MOV     ?V1,?V5
// 1208 
// 1209     if ( epSearch )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??afSetApplCB_0
// 1210     {
// 1211       epSearch->pfnApplCB = pApplFn;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1212 
// 1213       return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afSetApplCB_1
// 1214     }
// 1215   }
// 1216 
// 1217   return ( FALSE );
??afSetApplCB_0:
        MOV     R1,#0x0
??afSetApplCB_1:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
// 1218 }
          CFI EndBlock cfiBlock21

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for AF_DataRequestDiscoverRoute>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afRegisterExtended::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegisterExtended

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afRegister::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDelete::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDelete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDataConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afReflectError::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afReflectError

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afIncomingData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afIncomingData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afBuildMSGIncoming::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afBuildMSGIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AF_DataRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AF_DataRequestSrcRtg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequestSrcRtg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindEndPointDescList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDescList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindEndPointDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindSimpleDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindSimpleDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afGetDescCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afGetDescCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDataReqMTU::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataReqMTU

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afGetMatch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afGetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afSetMatch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afSetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afNumEndPoints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afNumEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afEndPoints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afCopyAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afCopyAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afAPSF_ConfigGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afAPSF_ConfigSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afSetApplCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afSetApplCB

        END
// 1219 
// 1220 /**************************************************************************************************
// 1221 */
// 
// 4 492 bytes in segment BANKED_CODE
//   132 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//     2 bytes in segment XDATA_Z
// 
// 4 625 bytes of CODE  memory
//     3 bytes of XDATA memory
//
//Errors: none
//Warnings: none
