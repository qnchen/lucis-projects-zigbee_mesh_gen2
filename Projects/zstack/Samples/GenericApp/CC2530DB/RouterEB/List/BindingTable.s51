///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               21/Apr/2017  17:48:37
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\stack\nwk\BindingTable.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\stack\nwk\BindingTable.c" -D ZTOOL_P1 -D MT_TASK -D
//        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE -D
//        NV_INIT -D OPEN_FCS -D PANID_INCREASE -lC "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List" -lA
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj" -e
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        --core=plain --dptr=16,1 --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -On --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\BindingTable.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME BindingTable

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_C_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??BindCopyBackupToNewNV::?relay`,0203H
        PUBLIC `??BindInitNV::?relay`
        FUNCTION `??BindInitNV::?relay`,0203H
        PUBLIC `??BindRestoreFromNV::?relay`
        FUNCTION `??BindRestoreFromNV::?relay`,0203H
        PUBLIC `??BindSetDefaultNV::?relay`
        FUNCTION `??BindSetDefaultNV::?relay`,0203H
        FUNCTION `??BindUpgradeTableInNV::?relay`,0203H
        PUBLIC `??BindWriteNV::?relay`
        FUNCTION `??BindWriteNV::?relay`,0203H
        PUBLIC `??GetBindingTableEntry::?relay`
        FUNCTION `??GetBindingTableEntry::?relay`,0203H
        PUBLIC `??InitBindingTable::?relay`
        FUNCTION `??InitBindingTable::?relay`,0203H
        PUBLIC `??bindAddClusterIdToList::?relay`
        FUNCTION `??bindAddClusterIdToList::?relay`,0203H
        PUBLIC `??bindAddEntry::?relay`
        FUNCTION `??bindAddEntry::?relay`,0203H
        PUBLIC `??bindAddrIndexGet::?relay`
        FUNCTION `??bindAddrIndexGet::?relay`,0203H
        PUBLIC `??bindAddrMgrLocalLoad::?relay`
        FUNCTION `??bindAddrMgrLocalLoad::?relay`,0203H
        PUBLIC `??bindAddressClear::?relay`
        FUNCTION `??bindAddressClear::?relay`,0203H
        PUBLIC `??bindCapacity::?relay`
        FUNCTION `??bindCapacity::?relay`,0203H
        PUBLIC `??bindFind::?relay`
        FUNCTION `??bindFind::?relay`,0203H
        PUBLIC `??bindFindEmpty::?relay`
        FUNCTION `??bindFindEmpty::?relay`,0203H
        PUBLIC `??bindFindExisting::?relay`
        FUNCTION `??bindFindExisting::?relay`,0203H
        PUBLIC `??bindIsClusterIDinList::?relay`
        FUNCTION `??bindIsClusterIDinList::?relay`,0203H
        PUBLIC `??bindNumBoundTo::?relay`
        FUNCTION `??bindNumBoundTo::?relay`,0203H
        PUBLIC `??bindNumOfEntries::?relay`
        FUNCTION `??bindNumOfEntries::?relay`,0203H
        PUBLIC `??bindNumReflections::?relay`
        FUNCTION `??bindNumReflections::?relay`,0203H
        PUBLIC `??bindRemoveClusterIdFromList::?relay`
        FUNCTION `??bindRemoveClusterIdFromList::?relay`,0203H
        PUBLIC `??bindRemoveDev::?relay`
        FUNCTION `??bindRemoveDev::?relay`,0203H
        PUBLIC `??bindRemoveEntry::?relay`
        FUNCTION `??bindRemoveEntry::?relay`,0203H
        PUBLIC `??bindRemoveSrcDev::?relay`
        FUNCTION `??bindRemoveSrcDev::?relay`,0203H
        PUBLIC `??bindUpdateAddr::?relay`
        FUNCTION `??bindUpdateAddr::?relay`,0203H
        PUBLIC `??bindingAddrMgsHelperConvert::?relay`
        FUNCTION `??bindingAddrMgsHelperConvert::?relay`,0203H
        PUBLIC `??bindingAddrMgsHelperConvertShort::?relay`
        FUNCTION `??bindingAddrMgsHelperConvertShort::?relay`,0203H
        PUBLIC `??bindingAddrMgsHelperFind::?relay`
        FUNCTION `??bindingAddrMgsHelperFind::?relay`,0203H
        FUNCTION BindCopyBackupToNewNV,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC BindInitNV
        FUNCTION BindInitNV,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC BindRestoreFromNV
        FUNCTION BindRestoreFromNV,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC BindSetDefaultNV
        FUNCTION BindSetDefaultNV,0a1603H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION BindUpgradeTableInNV,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC BindWriteNV
        FUNCTION BindWriteNV,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC GetBindingTableEntry
        FUNCTION GetBindingTableEntry,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC InitBindingTable
        FUNCTION InitBindingTable,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bindAddClusterIdToList
        FUNCTION bindAddClusterIdToList,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindAddEntry
        FUNCTION bindAddEntry,0a1603H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC bindAddrIndexGet
        FUNCTION bindAddrIndexGet,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bindAddrMgrLocalLoad
        FUNCTION bindAddrMgrLocalLoad,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC bindAddressClear
        FUNCTION bindAddressClear,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bindCapacity
        FUNCTION bindCapacity,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindFind
        FUNCTION bindFind,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindFindEmpty
        FUNCTION bindFindEmpty,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindFindExisting
        FUNCTION bindFindExisting,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC bindIsClusterIDinList
        FUNCTION bindIsClusterIDinList,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindNumBoundTo
        FUNCTION bindNumBoundTo,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC bindNumOfEntries
        FUNCTION bindNumOfEntries,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindNumReflections
        FUNCTION bindNumReflections,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bindRemoveClusterIdFromList
        FUNCTION bindRemoveClusterIdFromList,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC bindRemoveDev
        FUNCTION bindRemoveDev,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindRemoveEntry
        FUNCTION bindRemoveEntry,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindRemoveSrcDev
        FUNCTION bindRemoveSrcDev,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bindUpdateAddr
        FUNCTION bindUpdateAddr,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC bindingAddrMgsHelperConvert
        FUNCTION bindingAddrMgsHelperConvert,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC bindingAddrMgsHelperConvertShort
        FUNCTION bindingAddrMgsHelperConvertShort,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bindingAddrMgsHelperFind
        FUNCTION bindingAddrMgsHelperFind,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC pBindInitNV
        PUBLIC pBindRestoreFromNV
        PUBLIC pBindSetDefaultNV
        PUBLIC pBindWriteNV
        PUBLIC pbindAddEntry
        PUBLIC pbindNumOfEntries
        PUBLIC pbindRemoveDev
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
`??AddrMgrEntryGet::?relay` SYMBOL "?relay", AddrMgrEntryGet
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
`??AddrMgrEntryLookupNwk::?relay` SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
`??AddrMgrEntryRelease::?relay` SYMBOL "?relay", AddrMgrEntryRelease
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
`??AddrMgrEntryUpdate::?relay` SYMBOL "?relay", AddrMgrEntryUpdate
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
NLME_GetCoordExtAddr SYMBOL "NLME_GetCoordExtAddr"
`??NLME_GetCoordExtAddr::?relay` SYMBOL "?relay", NLME_GetCoordExtAddr
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
`??NLME_GetCoordShortAddr::?relay` SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
nwkCreateDuplicateNV SYMBOL "nwkCreateDuplicateNV"
`??nwkCreateDuplicateNV::?relay` SYMBOL "?relay", nwkCreateDuplicateNV
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_delete      SYMBOL "osal_nv_delete"
`??osal_nv_delete::?relay` SYMBOL "?relay", osal_nv_delete
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
BindInitNV          SYMBOL "BindInitNV"
`??BindInitNV::?relay` SYMBOL "?relay", BindInitNV
BindRestoreFromNV   SYMBOL "BindRestoreFromNV"
`??BindRestoreFromNV::?relay` SYMBOL "?relay", BindRestoreFromNV
BindSetDefaultNV    SYMBOL "BindSetDefaultNV"
`??BindSetDefaultNV::?relay` SYMBOL "?relay", BindSetDefaultNV
BindWriteNV         SYMBOL "BindWriteNV"
`??BindWriteNV::?relay` SYMBOL "?relay", BindWriteNV
GetBindingTableEntry SYMBOL "GetBindingTableEntry"
`??GetBindingTableEntry::?relay` SYMBOL "?relay", GetBindingTableEntry
InitBindingTable    SYMBOL "InitBindingTable"
`??InitBindingTable::?relay` SYMBOL "?relay", InitBindingTable
bindAddClusterIdToList SYMBOL "bindAddClusterIdToList"
`??bindAddClusterIdToList::?relay` SYMBOL "?relay", bindAddClusterIdToList
bindAddEntry        SYMBOL "bindAddEntry"
`??bindAddEntry::?relay` SYMBOL "?relay", bindAddEntry
bindAddrIndexGet    SYMBOL "bindAddrIndexGet"
`??bindAddrIndexGet::?relay` SYMBOL "?relay", bindAddrIndexGet
bindAddrMgrLocalLoad SYMBOL "bindAddrMgrLocalLoad"
`??bindAddrMgrLocalLoad::?relay` SYMBOL "?relay", bindAddrMgrLocalLoad
bindAddressClear    SYMBOL "bindAddressClear"
`??bindAddressClear::?relay` SYMBOL "?relay", bindAddressClear
bindCapacity        SYMBOL "bindCapacity"
`??bindCapacity::?relay` SYMBOL "?relay", bindCapacity
bindFind            SYMBOL "bindFind"
`??bindFind::?relay` SYMBOL "?relay", bindFind
bindFindEmpty       SYMBOL "bindFindEmpty"
`??bindFindEmpty::?relay` SYMBOL "?relay", bindFindEmpty
bindFindExisting    SYMBOL "bindFindExisting"
`??bindFindExisting::?relay` SYMBOL "?relay", bindFindExisting
bindIsClusterIDinList SYMBOL "bindIsClusterIDinList"
`??bindIsClusterIDinList::?relay` SYMBOL "?relay", bindIsClusterIDinList
bindNumBoundTo      SYMBOL "bindNumBoundTo"
`??bindNumBoundTo::?relay` SYMBOL "?relay", bindNumBoundTo
bindNumOfEntries    SYMBOL "bindNumOfEntries"
`??bindNumOfEntries::?relay` SYMBOL "?relay", bindNumOfEntries
bindNumReflections  SYMBOL "bindNumReflections"
`??bindNumReflections::?relay` SYMBOL "?relay", bindNumReflections
bindRemoveClusterIdFromList SYMBOL "bindRemoveClusterIdFromList"
`??bindRemoveClusterIdFromList::?relay` SYMBOL "?relay", bindRemoveClusterIdFromList
bindRemoveDev       SYMBOL "bindRemoveDev"
`??bindRemoveDev::?relay` SYMBOL "?relay", bindRemoveDev
bindRemoveEntry     SYMBOL "bindRemoveEntry"
`??bindRemoveEntry::?relay` SYMBOL "?relay", bindRemoveEntry
bindRemoveSrcDev    SYMBOL "bindRemoveSrcDev"
`??bindRemoveSrcDev::?relay` SYMBOL "?relay", bindRemoveSrcDev
bindUpdateAddr      SYMBOL "bindUpdateAddr"
`??bindUpdateAddr::?relay` SYMBOL "?relay", bindUpdateAddr
bindingAddrMgsHelperConvert SYMBOL "bindingAddrMgsHelperConvert"
`??bindingAddrMgsHelperConvert::?relay` SYMBOL "?relay", bindingAddrMgsHelperConvert
bindingAddrMgsHelperConvertShort SYMBOL "bindingAddrMgsHelperConvertShort"
`??bindingAddrMgsHelperConvertShort::?relay` SYMBOL "?relay", bindingAddrMgsHelperConvertShort
bindingAddrMgsHelperFind SYMBOL "bindingAddrMgsHelperFind"
`??bindingAddrMgsHelperFind::?relay` SYMBOL "?relay", bindingAddrMgsHelperFind

        EXTERN `??AddrMgrEntryGet::?relay`
        FUNCTION `??AddrMgrEntryGet::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryLookupNwk::?relay`
        FUNCTION `??AddrMgrEntryLookupNwk::?relay`,00H
        EXTERN `??AddrMgrEntryRelease::?relay`
        FUNCTION `??AddrMgrEntryRelease::?relay`,00H
        EXTERN `??AddrMgrEntryUpdate::?relay`
        FUNCTION `??AddrMgrEntryUpdate::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??NLME_GetCoordExtAddr::?relay`
        FUNCTION `??NLME_GetCoordExtAddr::?relay`,00H
        EXTERN `??NLME_GetCoordShortAddr::?relay`
        FUNCTION `??NLME_GetCoordShortAddr::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??nwkCreateDuplicateNV::?relay`
        FUNCTION `??nwkCreateDuplicateNV::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_delete::?relay`
        FUNCTION `??osal_nv_delete::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN BindingTable
        EXTERN NLME_GetCoordExtAddr
        FUNCTION NLME_GetCoordExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN gBIND_REC_SIZE
        EXTERN gMAX_BINDING_CLUSTER_IDS
        EXTERN gNWK_MAX_BINDING_ENTRIES
        EXTERN nwkCreateDuplicateNV
        FUNCTION nwkCreateDuplicateNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_delete
        FUNCTION osal_nv_delete,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\stack\nwk\BindingTable.c
//    1 /**************************************************************************************************
//    2   Filename:       BindingTable.c
//    3   Revised:        $Date: 2014-06-03 14:02:45 -0700 (Tue, 03 Jun 2014) $
//    4   Revision:       $Revision: 38776 $
//    5 
//    6   Description:    Device binding table functions.
//    7 
//    8 
//    9   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "OSAL_Nv.h"
//   46 #include "nwk_globals.h"
//   47 #include "AddrMgr.h"
//   48 #include "BindingTable.h"
//   49 #include "nwk_util.h"
//   50 
//   51 /*********************************************************************
//   52  * MACROS
//   53  */
//   54 
//   55 /*********************************************************************
//   56  * CONSTANTS
//   57  */
//   58 #define NV_BIND_EMPTY   0xFF
//   59 #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
//   60 #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
//   61 
//   62 /*********************************************************************
//   63  * TYPEDEFS
//   64  */
//   65 typedef struct
//   66 {
//   67   uint8        srcEP;
//   68   uint16       srcIndex;
//   69   uint16       dstIndex;
//   70   uint8        dstEP;
//   71   uint8        dstAddrMode;
//   72   uint8        clusterIDs;
//   73   uint16*      clusterIDList;
//   74 } bindFields_t;
//   75 
//   76 /*********************************************************************
//   77  * GLOBAL VARIABLES
//   78  */
//   79 
//   80 /*********************************************************************
//   81  * LOCAL FUNCTIONS
//   82  */
//   83 void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
//   84                     AddrMgrEntry_t *entryNew );
//   85 BindingEntry_t *bindFindEmpty( void );
//   86 uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
//   87 uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
//   88 void bindAddrMgrLocalLoad( void );
//   89 
//   90 static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen );
//   91 static uint8 BindUpgradeTableInNV( void );
//   92 
//   93 /*********************************************************************
//   94  * LOCAL VARIABLES
//   95  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   96 static uint8 bindAddrMgrLocalLoaded = FALSE;
bindAddrMgrLocalLoaded:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   97 
//   98 /*********************************************************************
//   99  * Function Pointers
//  100  */
//  101 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  102 BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
pbindAddEntry:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  103                                   zAddrType_t *dstAddr, byte dstEpInt,
//  104                                   byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  105 uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
pbindNumOfEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  106 void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
pbindRemoveDev:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  107 byte (*pBindInitNV)( void ) = (void*)NULL;
pBindInitNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  108 void (*pBindSetDefaultNV)( void ) = (void*)NULL;
pBindSetDefaultNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  109 uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
pBindRestoreFromNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  110 void (*pBindWriteNV)( void ) = (void*)NULL;
pBindWriteNV:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  111 
//  112 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  113 /*********************************************************************
//  114  * @fn      BindAddrMgrCB()
//  115  *
//  116  * @brief   Address Manager Callback function
//  117  *
//  118  * @param   update -
//  119  * @param   entry -
//  120  *
//  121  * @return  pointer to
//  122  */
//  123 void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
//  124                     AddrMgrEntry_t *entryOld )
//  125 {
//  126   // Check for either deleted items or changed Extended (Duplicate) addresses
//  127 }
//  128 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  129 
//  130 /*********************************************************************
//  131  * @fn      InitBindingTable()
//  132  *
//  133  * @brief
//  134  *
//  135  *   This function is used to initialise the binding table
//  136  *
//  137  * @param   none
//  138  *
//  139  * @return  none
//  140  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  141 void InitBindingTable( void )
InitBindingTable:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function InitBindingTable
        CODE
//  142 {
        FUNCALL InitBindingTable, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  143   osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
        ; Setup parameters for call to function osal_memset
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R4,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R5,A
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0,A
        MOV     ?V1,#0x0
        MOV     A,R4
        MOV     B,?V0
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,?V1
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,?V0
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     R1,#-0x1
        MOV     R2,#BindingTable & 0xff
        MOV     R3,#(BindingTable >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  144 
//  145   pbindAddEntry = bindAddEntry;
        MOV     DPTR,#pbindAddEntry
        MOV     A,#`??bindAddEntry::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??bindAddEntry::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  146   pbindNumOfEntries = bindNumOfEntries;
        MOV     DPTR,#pbindNumOfEntries
        MOV     A,#`??bindNumOfEntries::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??bindNumOfEntries::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  147   pbindRemoveDev = bindRemoveDev;
        MOV     DPTR,#pbindRemoveDev
        MOV     A,#`??bindRemoveDev::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??bindRemoveDev::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  148   pBindInitNV = BindInitNV;
        MOV     DPTR,#pBindInitNV
        MOV     A,#`??BindInitNV::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??BindInitNV::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  149   pBindSetDefaultNV = BindSetDefaultNV;
        MOV     DPTR,#pBindSetDefaultNV
        MOV     A,#`??BindSetDefaultNV::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??BindSetDefaultNV::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  150   pBindRestoreFromNV = BindRestoreFromNV;
        MOV     DPTR,#pBindRestoreFromNV
        MOV     A,#`??BindRestoreFromNV::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??BindRestoreFromNV::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  151   pBindWriteNV = BindWriteNV;
        MOV     DPTR,#pBindWriteNV
        MOV     A,#`??BindWriteNV::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??BindWriteNV::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  152 
//  153   bindAddrMgrLocalLoaded = FALSE;
        MOV     DPTR,#bindAddrMgrLocalLoaded
        MOV     A,#0x0
        MOVX    @DPTR,A
//  154 
//  155 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  156   // Register with the address manager
//  157   AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
//  158 #endif
//  159 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  160 
//  161 /*********************************************************************
//  162  * @fn      bindFindEmpty()
//  163  *
//  164  * @brief   This function returns a pointer to an empty binding slot
//  165  *
//  166  * @param   none
//  167  *
//  168  * @return  pointer to binding table entry, NULL if not added
//  169  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  170 BindingEntry_t *bindFindEmpty( void )
bindFindEmpty:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function bindFindEmpty
        CODE
//  171 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  172   bindTableIndex_t x;
//  173 
//  174   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R4,#0x0
??bindFindEmpty_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        JNC     ??bindFindEmpty_1
//  175   {
//  176     // It's empty if the index is "Not Found"
//  177     if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
        MOV     A,R4
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??bindFindEmpty_2
//  178     {
//  179       return ( &BindingTable[x] );
        MOV     A,R4
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        SJMP    ??bindFindEmpty_3
//  180     }
//  181   }
??bindFindEmpty_2:
        INC     R4
        SJMP    ??bindFindEmpty_0
//  182 
//  183   return ( (BindingEntry_t *)NULL );
??bindFindEmpty_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFindEmpty_3:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  184 }
          CFI EndBlock cfiBlock1
//  185 
//  186 /*********************************************************************
//  187  * @fn      bindNumOfEntries()
//  188  *
//  189  * @brief   This function returns the number of binding table entries.
//  190  *          The return for this is the number of clusters in the
//  191  *          table NOT the number of entries.
//  192  *
//  193  * @param   none
//  194  *
//  195  * @return  number of entries
//  196  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  197 uint16 bindNumOfEntries( void )
bindNumOfEntries:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function bindNumOfEntries
        CODE
//  198 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  199   bindTableIndex_t x;
//  200   uint16 found;
//  201 
//  202   for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#0x0
??bindNumOfEntries_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        JNC     ??bindNumOfEntries_1
//  203   {
//  204     // It's empty if the index is "Not Found"
//  205     if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
        MOV     A,R4
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R5,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R5
        MOV     R5,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R5
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JZ      ??bindNumOfEntries_2
//  206     {
//  207       found += BindingTable[x].numClusterIds;
        MOV     A,R4
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R5,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R5
        MOV     R5,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R5
        MOV     R1,A
        MOV     A,#(BindingTable + 5) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 5) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R3,A
//  208     }
//  209   }
??bindNumOfEntries_2:
        INC     R4
        SJMP    ??bindNumOfEntries_0
//  210 
//  211   return ( found );
??bindNumOfEntries_1:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  212 }
          CFI EndBlock cfiBlock2
//  213 
//  214 /*********************************************************************
//  215  * @fn      bindCapacity()
//  216  *
//  217  * @brief   This function returns the number of binding entries
//  218  *          possible and used.
//  219  *
//  220  * @param   maxEntries - pointer to a place to put the max entries
//  221  * @param   usedEntries - pointer to a place to put the number
//  222  *               of used entries
//  223  *
//  224  * @return  none
//  225  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  226 void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
bindCapacity:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function bindCapacity
        CODE
//  227 {
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  228   bindTableIndex_t x;
//  229   bindTableIndex_t used;
//  230 
//  231   for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
??bindCapacity_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R7
        CLR     C
        SUBB    A,R0
        JNC     ??bindCapacity_1
//  232   {
//  233     // It's empty if the index is "Not Found"
//  234     if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
        MOV     A,R7
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     ?V0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V0
        MOV     ?V0,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,?V0
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JZ      ??bindCapacity_2
//  235     {
//  236       used++;
        INC     R6
//  237     }
//  238   }
??bindCapacity_2:
        INC     R7
        SJMP    ??bindCapacity_0
//  239 
//  240   *maxEntries = gNWK_MAX_BINDING_ENTRIES;
??bindCapacity_1:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  241   *usedEntries = used;
        MOV     A,R6
        MOV     R0,A
        MOV     R1,#0x0
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  242 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  243 
//  244 /*********************************************************************
//  245  * @fn      bindAddEntry()
//  246  *
//  247  * @brief   This function is used to Add an entry to the binding table
//  248  *
//  249  * @param       srcEpInt - source endpoint
//  250  * @param       dstAddr - destination Address
//  251  * @param       dstEpInt - destination endpoint
//  252  * @param       numClusterIds - number of cluster Ids in the list
//  253  * @param       clusterIds - pointer to the Object ID list
//  254  *
//  255  * @return  pointer to binding table entry, NULL if not added
//  256  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  257 BindingEntry_t *bindAddEntry( byte srcEpInt,
bindAddEntry:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function bindAddEntry
        CODE
//  258                               zAddrType_t *dstAddr, byte dstEpInt,
//  259                               byte numClusterIds, uint16 *clusterIds )
//  260 {
        FUNCALL bindAddEntry, bindAddrMgrLocalLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddrIndexGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddClusterIdToList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindFindEmpty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V7,R1
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     ?V3,R4
        MOV     ?V1,R5
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
//  261   uint8            index;
//  262   bindTableIndex_t bindIdx;
//  263   BindingEntry_t*  entry;
//  264   bindFields_t     fields;
//  265 
//  266   // initialize results
//  267   entry = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  268 
//  269   // make sure local addresses have been loaded
//  270   bindAddrMgrLocalLoad();
        ; Setup parameters for call to function bindAddrMgrLocalLoad
        LCALL   `??bindAddrMgrLocalLoad::?relay`; Banked call to: bindAddrMgrLocalLoad
//  271 
//  272   // setup fields
//  273   fields.dstIndex = bindAddrIndexGet( dstAddr );
        ; Setup parameters for call to function bindAddrIndexGet
        MOV     R2,?V10
        MOV     R3,?V11
        LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  274   fields.srcEP    = srcEpInt;
        MOV     A,?V7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  275 
//  276   if ( dstAddr->addrMode == AddrGroup )
        MOV     DPL,?V10
        MOV     DPH,?V11
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindAddEntry_0
//  277   {
//  278     fields.dstAddrMode = DSTGROUPMODE_GROUP;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  279     fields.dstEP       = 0;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        SJMP    ??bindAddEntry_1
//  280   }
//  281   else
//  282   {
//  283     fields.dstAddrMode = DSTGROUPMODE_ADDR;
??bindAddEntry_0:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  284     fields.dstEP       = dstEpInt;
        MOV     A,?V3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  285   }
//  286 
//  287   if ( fields.dstIndex != INVALID_NODE_ADDR  )
??bindAddEntry_1:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??bindAddEntry_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??bindAddEntry_2:
        JNZ     $+5
        LJMP    ??bindAddEntry_3 & 0xFFFF
//  288   {
//  289     for ( bindIdx = 0; bindIdx < gNWK_MAX_BINDING_ENTRIES; bindIdx++ )
        MOV     ?V0,#0x0
??bindAddEntry_4:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??bindAddEntry_5 & 0xFFFF
//  290     {
//  291       if ( ( fields.srcEP       == BindingTable[bindIdx].srcEP        ) &&
//  292            ( fields.dstAddrMode == BindingTable[bindIdx].dstGroupMode ) &&
//  293            ( fields.dstIndex    == BindingTable[bindIdx].dstIdx       ) &&
//  294            ( fields.dstEP       == BindingTable[bindIdx].dstEP        )    )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R3
        JZ      $+5
        LJMP    ??bindAddEntry_6 & 0xFFFF
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 1) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 1) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R3
        JZ      $+5
        LJMP    ??bindAddEntry_6 & 0xFFFF
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R4,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     A,#(BindingTable + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bindAddEntry_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bindAddEntry_7:
        JNZ     ??bindAddEntry_6
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 4) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 4) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R3
        JNZ     ??bindAddEntry_6
//  295       {
//  296         entry = &BindingTable[bindIdx];
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//  297 
//  298         // break from loop
//  299         break;
        SJMP    ??bindAddEntry_5
//  300       }
//  301     }
??bindAddEntry_6:
        INC     ?V0
        LJMP    ??bindAddEntry_4 & 0xFFFF
//  302 
//  303     if ( entry != NULL )
??bindAddEntry_5:
        MOV     A,R6
        ORL     A,R7
        JZ      ??bindAddEntry_8
//  304     {
//  305       // Loop through the cluster IDs
//  306       for ( index = 0; index < numClusterIds; index++ )
        MOV     ?V2,#0x0
??bindAddEntry_9:
        MOV     A,?V2
        CLR     C
        SUBB    A,?V1
        JC      $+5
        LJMP    ??bindAddEntry_3 & 0xFFFF
//  307       {
//  308         // Found - is the cluster already defined?
//  309         if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V8
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V9
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
        MOV     A,R1
        JNZ     ??bindAddEntry_10
//  310         {
//  311           // Nope, add this cluster
//  312           if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
        ; Setup parameters for call to function bindAddClusterIdToList
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V8
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V9
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindAddClusterIdToList::?relay`; Banked call to: bindAddClusterIdToList
        MOV     A,R1
        JNZ     ??bindAddEntry_10
//  313           {
//  314             // Indicate error if cluster list was full
//  315             entry = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  316           }
//  317         }
//  318       }
??bindAddEntry_10:
        INC     ?V2
        SJMP    ??bindAddEntry_9
//  319     }
//  320     else
//  321     {
//  322       // Find an empty slot
//  323       entry = bindFindEmpty();
??bindAddEntry_8:
        ; Setup parameters for call to function bindFindEmpty
        LCALL   `??bindFindEmpty::?relay`; Banked call to: bindFindEmpty
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
//  324 
//  325       // Check against the maximum number allowed
//  326       if ( entry != NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??bindAddEntry_3 & 0xFFFF
//  327       {
//  328         // Add new entry
//  329         entry->srcEP         = fields.srcEP;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  330         entry->dstGroupMode  = fields.dstAddrMode;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  331         entry->dstIdx        = fields.dstIndex;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  332         entry->dstEP         = fields.dstEP;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  333 
//  334         if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
        MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR     A
        MOVC    A,@A+DPTR
        CLR     C
        SUBB    A,?V1
        JNC     ??bindAddEntry_11
//  335         {
//  336           numClusterIds = gMAX_BINDING_CLUSTER_IDS;
        MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V1,A
//  337         }
//  338 
//  339         entry->numClusterIds = numClusterIds;
??bindAddEntry_11:
        MOV     A,?V1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  340 
//  341         osal_memcpy( entry->clusterIdList,
//  342                      clusterIds,
//  343                      numClusterIds * sizeof(uint16) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V8
        MOV     ?V5,?V9
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,?V1
        MOV     R5,#0x0
        MOV     A,R4
        MOV     B,#0x2
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  344       }
//  345     }
//  346   }
//  347 
//  348   return entry;
??bindAddEntry_3:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
//  349 }
          CFI EndBlock cfiBlock4
//  350 
//  351 /*********************************************************************
//  352  * @fn      bindRemoveEntry
//  353  *
//  354  * @brief   Removes a binding table entry.
//  355  *
//  356  * @param   pBind - pointer to binding table entry to delete
//  357  *
//  358  * @return  TRUE if Removed, FALSE if not
//  359  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  360 byte bindRemoveEntry( BindingEntry_t *pBind )
bindRemoveEntry:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function bindRemoveEntry
        CODE
//  361 {
        FUNCALL bindRemoveEntry, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  362   osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
        ; Setup parameters for call to function osal_memset
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R4,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R5,A
        MOV     R1,#-0x1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  363   return ( TRUE );
        MOV     R1,#0x1
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  364 }
          CFI EndBlock cfiBlock5
//  365 
//  366 /*********************************************************************
//  367  * @fn      bindIsClusterIDinList()
//  368  *
//  369  * @brief   Is the clusterID in the clusterID list?
//  370  *
//  371  * @param   enter - binding table entry
//  372  * @param   clusterId  - Cluster ID to look for
//  373  *
//  374  * @return  TRUE if found, FALSE if not found
//  375  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  376 byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
bindIsClusterIDinList:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function bindIsClusterIDinList
        CODE
//  377 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  378   uint8 x;
//  379 
//  380   if ( entry != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindIsClusterIDinList_0
//  381   {
//  382     for ( x = 0; x < entry->numClusterIds; x++ )
        MOV     R6,#0x0
??bindIsClusterIDinList_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JNC     ??bindIsClusterIDinList_0
//  383     {
//  384       if ( entry->clusterIdList[x] == clusterId )
        MOV     A,R6
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R7,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R7
        MOV     R7,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R7
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindIsClusterIDinList_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindIsClusterIDinList_2:
        JNZ     ??bindIsClusterIDinList_3
//  385       {
//  386         return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindIsClusterIDinList_4
//  387       }
//  388     }
??bindIsClusterIDinList_3:
        INC     R6
        SJMP    ??bindIsClusterIDinList_1
//  389   }
//  390 
//  391   return ( FALSE );
??bindIsClusterIDinList_0:
        MOV     R1,#0x0
??bindIsClusterIDinList_4:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  392 }
          CFI EndBlock cfiBlock6
//  393 
//  394 /*********************************************************************
//  395  * @fn      bindRemoveClusterIdFromList()
//  396  *
//  397  * @brief   Removes a ClusterID from a list of ClusterIDs.
//  398  *
//  399  * @param   enter - binding table entry
//  400  * @param   clusterId  - Cluster ID to look for
//  401  *
//  402  * @return  TRUE if there are at least 1 clusterID left, FALSE if none
//  403  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  404 byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
bindRemoveClusterIdFromList:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function bindRemoveClusterIdFromList
        CODE
//  405 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  406   byte x;
//  407   uint16 *listPtr;
//  408   byte numIds;
//  409 
//  410   if ( entry )
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??bindRemoveClusterIdFromList_0 & 0xFFFF
//  411   {
//  412     if ( entry->numClusterIds > 0 )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??bindRemoveClusterIdFromList_0 & 0xFFFF
//  413     {
//  414       listPtr = entry->clusterIdList;
        MOV     A,R2
        ADD     A,#0x6
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//  415       numIds = entry->numClusterIds;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  416 
//  417       // Copy the new list over
//  418       for ( x = 0; x < numIds; x++ )
        MOV     ?V0,#0x0
??bindRemoveClusterIdFromList_1:
        MOV     A,?V0
        CLR     C
        SUBB    A,?V1
        JC      $+5
        LJMP    ??bindRemoveClusterIdFromList_0 & 0xFFFF
//  419       {
//  420         if ( entry->clusterIdList[x] != clusterId )
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     ?V2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V2
        MOV     ?V2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,?V2
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindRemoveClusterIdFromList_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindRemoveClusterIdFromList_2:
        JZ      ??bindRemoveClusterIdFromList_3
//  421         {
//  422           *listPtr++ = entry->clusterIdList[x];
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     ?V2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V2
        MOV     ?V2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,?V2
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        SJMP    ??bindRemoveClusterIdFromList_4
//  423         }
//  424         else
//  425         {
//  426           entry->numClusterIds--;
??bindRemoveClusterIdFromList_3:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
//  427           if ( entry->numClusterIds == 0 )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??bindRemoveClusterIdFromList_0
//  428           {
//  429             break;
//  430           }
//  431         }
//  432       }
??bindRemoveClusterIdFromList_4:
        INC     ?V0
        LJMP    ??bindRemoveClusterIdFromList_1 & 0xFFFF
//  433     }
//  434   }
//  435 
//  436   if ( entry && (entry->numClusterIds > 0) )
??bindRemoveClusterIdFromList_0:
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindRemoveClusterIdFromList_5
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??bindRemoveClusterIdFromList_5
//  437   {
//  438     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindRemoveClusterIdFromList_6
//  439   }
//  440   else
//  441   {
//  442     return ( FALSE );
??bindRemoveClusterIdFromList_5:
        MOV     R1,#0x0
??bindRemoveClusterIdFromList_6:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
//  443   }
//  444 }
          CFI EndBlock cfiBlock7
//  445 
//  446 /*********************************************************************
//  447  * @fn      bindAddClusterIdToList()
//  448  *
//  449  * @brief   Adds a ClusterID to a list of ClusterIDs.
//  450  *
//  451  * @param   enter - binding table entry
//  452  * @param   clusterId  - Cluster ID to Add
//  453  *
//  454  * @return  TRUE if Added, FALSE if not
//  455  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  456 byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
bindAddClusterIdToList:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function bindAddClusterIdToList
        CODE
//  457 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  458   if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindAddClusterIdToList_0
        MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JNC     ??bindAddClusterIdToList_0
//  459   {
//  460     // Add the new one
//  461     entry->clusterIdList[entry->numClusterIds] = clusterId;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  462     entry->numClusterIds++;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  463     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindAddClusterIdToList_1
//  464   }
//  465   return ( FALSE );
??bindAddClusterIdToList_0:
        MOV     R1,#0x0
??bindAddClusterIdToList_1:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
//  466 }
          CFI EndBlock cfiBlock8
//  467 
//  468 /*********************************************************************
//  469  * @fn      bindFindExisting
//  470  *
//  471  * @brief   Finds an existing src/epint to dst/epint bind record
//  472  *
//  473  * @param   srcAddr - Source address
//  474  * @param   srcEpInt - Source Endpoint/Interface
//  475  * @param   dstAddr - Destination address
//  476  * @param   dstEpInt - Destination Endpoint/Interface
//  477  *
//  478  * @return  pointer to existing entry or NULL
//  479  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  480 BindingEntry_t *bindFindExisting( byte srcEpInt,
bindFindExisting:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function bindFindExisting
        CODE
//  481                                   zAddrType_t *dstAddr, byte dstEpInt )
//  482 {
        FUNCALL bindFindExisting, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V3,R4
//  483   uint16 dstIdx;
//  484   bindTableIndex_t x;
//  485 
//  486   // Find the records in the assoc list
//  487   if ( dstAddr->addrMode == AddrGroup )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindFindExisting_0
//  488   {
//  489     dstIdx = dstAddr->addr.shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        SJMP    ??bindFindExisting_1
//  490   }
//  491   else
//  492   {
//  493     dstIdx = bindingAddrMgsHelperFind( dstAddr );
??bindFindExisting_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V0,?V6
        MOV     ?V1,?V7
//  494   }
//  495 
//  496   if ( dstIdx == INVALID_NODE_ADDR )
??bindFindExisting_1:
        MOV     A,#-0x2
        XRL     A,?V0
        JNZ     ??bindFindExisting_2
        MOV     A,#-0x1
        XRL     A,?V1
??bindFindExisting_2:
        JNZ     ??bindFindExisting_3
//  497   {
//  498     return ( (BindingEntry_t *)NULL );
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??bindFindExisting_4 & 0xFFFF
//  499   }
//  500 
//  501   // Start at the beginning
//  502   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
??bindFindExisting_3:
        MOV     ?V4,#0x0
??bindFindExisting_5:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V4
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??bindFindExisting_6 & 0xFFFF
//  503   {
//  504     if ( (BindingTable[x].srcEP == srcEpInt) )
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V2
        JZ      $+5
        LJMP    ??bindFindExisting_7 & 0xFFFF
//  505     {
//  506       if ( ((dstAddr->addrMode == AddrGroup)
//  507               && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
//  508               && (dstIdx == BindingTable[x].dstIdx))
//  509          || ((dstAddr->addrMode != AddrGroup)
//  510              && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
//  511              && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindFindExisting_8
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 1) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 1) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindFindExisting_8
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??bindFindExisting_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??bindFindExisting_9:
        JNZ     $+5
        LJMP    ??bindFindExisting_10 & 0xFFFF
??bindFindExisting_8:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     $+5
        LJMP    ??bindFindExisting_7 & 0xFFFF
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 1) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 1) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??bindFindExisting_7
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??bindFindExisting_11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??bindFindExisting_11:
        JNZ     ??bindFindExisting_7
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 4) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 4) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V3
        JNZ     ??bindFindExisting_7
//  512       {
//  513         return ( &BindingTable[x] );
??bindFindExisting_10:
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        SJMP    ??bindFindExisting_4
//  514       }
//  515     }
//  516   }
??bindFindExisting_7:
        INC     ?V4
        LJMP    ??bindFindExisting_5 & 0xFFFF
//  517 
//  518   return ( (BindingEntry_t *)NULL );
??bindFindExisting_6:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFindExisting_4:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
//  519 }
          CFI EndBlock cfiBlock9
//  520 
//  521 /*********************************************************************
//  522  * @fn       bindRemoveDev()
//  523  *
//  524  * @brief
//  525  *
//  526  *   Remove all bind(s) entries associated to a device address (destination).
//  527  *   Updates binding table.
//  528  *
//  529  * @param   Addr - address of device to be removed from Binding Table
//  530  *
//  531  * @return  none
//  532  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  533 void bindRemoveDev( zAddrType_t *Addr )
bindRemoveDev:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function bindRemoveDev
        CODE
//  534 {
        FUNCALL bindRemoveDev, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveDev, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveDev, bindAddressClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  535   uint16 idx;
//  536   bindTableIndex_t x;
//  537 
//  538   if ( Addr->addrMode == AddrGroup )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindRemoveDev_0
//  539   {
//  540     idx = Addr->addr.shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        SJMP    ??bindRemoveDev_1
//  541   }
//  542   else
//  543   {
//  544     idx = bindingAddrMgsHelperFind( Addr );
??bindRemoveDev_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V0,?V4
        MOV     ?V1,?V5
//  545   }
//  546 
//  547   if ( idx == INVALID_NODE_ADDR )
??bindRemoveDev_1:
        MOV     A,#-0x2
        XRL     A,?V0
        JNZ     ??bindRemoveDev_2
        MOV     A,#-0x1
        XRL     A,?V1
??bindRemoveDev_2:
        JNZ     $+5
        LJMP    ??bindRemoveDev_3 & 0xFFFF
//  548   {
//  549     return;
//  550   }
//  551 
//  552   // Removes all the entries that match the destination Address/Index
//  553   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V2,#0x0
??bindRemoveDev_4:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V2
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??bindRemoveDev_5 & 0xFFFF
//  554   {
//  555     if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
//  556                                          && (BindingTable[x].dstIdx == idx) ) ||
//  557          ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
//  558                                          && (BindingTable[x].dstIdx == idx) ) )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindRemoveDev_6
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 1) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 1) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindRemoveDev_6
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??bindRemoveDev_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??bindRemoveDev_7:
        JZ      ??bindRemoveDev_8
??bindRemoveDev_6:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bindRemoveDev_9
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 1) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 1) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??bindRemoveDev_9
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??bindRemoveDev_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??bindRemoveDev_10:
        JNZ     ??bindRemoveDev_9
//  559     {
//  560       bindRemoveEntry( &BindingTable[x] );
??bindRemoveDev_8:
        ; Setup parameters for call to function bindRemoveEntry
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
        MOV     A,R1
//  561     }
//  562   }
??bindRemoveDev_9:
        INC     ?V2
        LJMP    ??bindRemoveDev_4 & 0xFFFF
//  563 
//  564   // If this is the last Bind Entry for that idx then clear BINDING
//  565   // user from Address Manager
//  566   bindAddressClear( idx );
??bindRemoveDev_5:
        ; Setup parameters for call to function bindAddressClear
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??bindAddressClear::?relay`; Banked call to: bindAddressClear
//  567 }
??bindRemoveDev_3:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock10
//  568 
//  569 /*********************************************************************
//  570  * @fn       bindRemoveSrcDev()
//  571  *
//  572  * @brief
//  573  *
//  574  *   Remove binds(s) associated to device address (source).
//  575  *   Updates binding table.
//  576  *
//  577  * @param   srcAddr - address of device
//  578  * @param   ep - endpoint to remove, 0xFF is all endpoints
//  579  *
//  580  * @return  none
//  581  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  582 void bindRemoveSrcDev( uint8 ep )
bindRemoveSrcDev:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function bindRemoveSrcDev
        CODE
//  583 {
        FUNCALL bindRemoveSrcDev, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveSrcDev, bindAddressClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V1,R1
//  584   bindTableIndex_t x;
//  585 
//  586   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V0,#0x0
??bindRemoveSrcDev_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??bindRemoveSrcDev_1 & 0xFFFF
//  587   {
//  588     if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
        MOV     A,#-0x1
        XRL     A,?V1
        JZ      ??bindRemoveSrcDev_2
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V1
        JNZ     ??bindRemoveSrcDev_3
//  589     {
//  590       uint16 idx = BindingTable[x].dstIdx;
??bindRemoveSrcDev_2:
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  591 
//  592       bindRemoveEntry( &BindingTable[x] );
        ; Setup parameters for call to function bindRemoveEntry
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
        MOV     A,R1
//  593 
//  594       // If this is the last Bind Entry for that idx then clear BINDING
//  595       // user from Address Manager
//  596       bindAddressClear( idx );
        ; Setup parameters for call to function bindAddressClear
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindAddressClear::?relay`; Banked call to: bindAddressClear
//  597     }
//  598   }
??bindRemoveSrcDev_3:
        INC     ?V0
        LJMP    ??bindRemoveSrcDev_0 & 0xFFFF
//  599 }
??bindRemoveSrcDev_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
//  600 
//  601 /*********************************************************************
//  602  * @fn          bindNumBoundTo
//  603  *
//  604  * @brief       Calculate the number items this device is bound to.
//  605  *              When srcMode is set to TRUE, discard what value devAddr
//  606  *              has, it returns number count bound to the local dev.
//  607  *
//  608  * @param       devAddr - device Address
//  609  * @param       devEP - endpoint
//  610  * @param       srcMode - TRUE - assume devHandle is a source address
//  611  *                        FALSE - destination address
//  612  *
//  613  * @return      status
//  614  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  615 byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
bindNumBoundTo:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function bindNumBoundTo
        CODE
//  616 {
        FUNCALL bindNumBoundTo, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V6,R1
        MOV     ?V7,R4
//  617   BindingEntry_t *pBind;
//  618   uint16 idx;
//  619   byte   num;
//  620   bindTableIndex_t x;
//  621 
//  622   // Init
//  623   num = 0;
        MOV     ?V0,#0x0
//  624 
//  625   if ( devAddr->addrMode == AddrGroup )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindNumBoundTo_0
//  626   {
//  627     idx = devAddr->addr.shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        SJMP    ??bindNumBoundTo_1
//  628   }
//  629   else
//  630   {
//  631     idx = bindingAddrMgsHelperFind( devAddr );
??bindNumBoundTo_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     ?V4,?V8
        MOV     ?V5,?V9
//  632   }
//  633 
//  634   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
??bindNumBoundTo_1:
        MOV     ?V1,#0x0
??bindNumBoundTo_2:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V1
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??bindNumBoundTo_3 & 0xFFFF
//  635   {
//  636     pBind = &BindingTable[x];
        MOV     R0,?V1
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     ?V2,R0
        MOV     ?V3,R1
//  637     if ( srcMode )
        MOV     A,?V7
        JZ      ??bindNumBoundTo_4
//  638     {
//  639       if ( pBind->srcEP == devEpInt )
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        XRL     A,?V6
        JNZ     ??bindNumBoundTo_5
//  640       {
//  641         num++;
        INC     ?V0
        SJMP    ??bindNumBoundTo_5
//  642       }
//  643     }
//  644     else
//  645     {
//  646       if ( ((devAddr->addrMode == AddrGroup)
//  647               && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
//  648           || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
//  649                                 && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
??bindNumBoundTo_4:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindNumBoundTo_6
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindNumBoundTo_6
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V4
        JNZ     ??bindNumBoundTo_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V5
??bindNumBoundTo_7:
        JZ      ??bindNumBoundTo_8
??bindNumBoundTo_6:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bindNumBoundTo_5
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??bindNumBoundTo_5
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V4
        JNZ     ??bindNumBoundTo_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V5
??bindNumBoundTo_9:
        JNZ     ??bindNumBoundTo_5
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V6
        JNZ     ??bindNumBoundTo_5
//  650       {
//  651         num++;
??bindNumBoundTo_8:
        INC     ?V0
//  652       }
//  653     }
//  654   }
??bindNumBoundTo_5:
        INC     ?V1
        LJMP    ??bindNumBoundTo_2 & 0xFFFF
//  655 
//  656   return num;
??bindNumBoundTo_3:
        MOV     R1,?V0
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
//  657 }
          CFI EndBlock cfiBlock12
//  658 
//  659 /*********************************************************************
//  660  * @fn          bindNumReflections
//  661  *
//  662  * @brief       Counts the number of reflections needed for a
//  663  *              endpoint and cluster ID combo.
//  664  *
//  665  * @param       ep - source endpoint
//  666  * @param       clusterID - matching clusterID
//  667  *
//  668  * @return      number of reflections needed.
//  669  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  670 uint16 bindNumReflections( uint8 ep, uint16 clusterID )
bindNumReflections:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function bindNumReflections
        CODE
//  671 {
        FUNCALL bindNumReflections, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V6,R1
        MOV     ?V0,R2
        MOV     ?V1,R3
//  672   bindTableIndex_t x;
//  673   BindingEntry_t *pBind;
//  674   uint16 cnt = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  675   uint8 bindEP;
//  676 
//  677   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V4,#0x0
??bindNumReflections_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V4
        CLR     C
        SUBB    A,R0
        JNC     ??bindNumReflections_1
//  678   {
//  679     pBind = &BindingTable[x];
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     ?V2,R0
        MOV     ?V3,R1
//  680     bindEP = pBind->srcEP;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V5,A
//  681 
//  682     if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
        MOV     A,?V6
        XRL     A,?V5
        JNZ     ??bindNumReflections_2
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
        MOV     A,R1
        JZ      ??bindNumReflections_2
//  683     {
//  684       cnt++;
        INC     R6
        MOV     A,R6
        JNZ     ??bindNumReflections_2
        INC     R7
//  685     }
//  686   }
??bindNumReflections_2:
        INC     ?V4
        SJMP    ??bindNumReflections_0
//  687 
//  688   return ( cnt );
??bindNumReflections_1:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
//  689 }
          CFI EndBlock cfiBlock13
//  690 
//  691 /*********************************************************************
//  692  * @fn          bindFind
//  693  *
//  694  * @brief       Finds the binding entry for the source address, endpoint
//  695  *              and cluster ID passed in as a parameter.
//  696  *
//  697  * @param       ep - source endpoint
//  698  * @param       clusterID - matching clusterID
//  699  * @param       skip - number of matches to skip before returning
//  700  *
//  701  * @return      pointer to the binding table entry, NULL if not found
//  702  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  703 BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
bindFind:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function bindFind
        CODE
//  704 {
        FUNCALL bindFind, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V4,R1
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V5,R4
//  705   BindingEntry_t *pBind;
//  706   byte skipped = 0;
        MOV     ?V3,#0x0
//  707   bindTableIndex_t x;
//  708 
//  709   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V2,#0x0
??bindFind_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V2
        CLR     C
        SUBB    A,R0
        JNC     ??bindFind_1
//  710   {
//  711     pBind = &BindingTable[x];
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//  712 
//  713     if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,?V4
        JNZ     ??bindFind_2
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
        MOV     A,R1
        JZ      ??bindFind_2
//  714     {
//  715       if ( skipped < skipping )
        MOV     A,?V3
        CLR     C
        SUBB    A,?V5
        JNC     ??bindFind_3
//  716       {
//  717         skipped++;
        INC     ?V3
        SJMP    ??bindFind_2
//  718       }
//  719       else
//  720       {
//  721         return ( pBind );
??bindFind_3:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??bindFind_4
//  722       }
//  723     }
//  724   }
??bindFind_2:
        INC     ?V2
        SJMP    ??bindFind_0
//  725 
//  726   return ( (BindingEntry_t *)NULL );
??bindFind_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFind_4:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  727 }
          CFI EndBlock cfiBlock14
//  728 
//  729 /*********************************************************************
//  730  * @fn      bindAddressClear
//  731  *
//  732  * @brief   Lookup a binding entry by specific Idx, if none is found
//  733  *          clears the BINDING user from Address Manager.
//  734  *
//  735  * @param   dstIdx - Source Address Manager Index
//  736  *
//  737  * @return  none
//  738  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  739 void bindAddressClear( uint16 dstIdx )
bindAddressClear:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function bindAddressClear
        CODE
//  740 {
        FUNCALL bindAddressClear, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  741   bindTableIndex_t i;
//  742 
//  743   if ( dstIdx != INVALID_NODE_ADDR )
        MOV     A,#-0x2
        XRL     A,R6
        JNZ     ??bindAddressClear_0
        MOV     A,#-0x1
        XRL     A,R7
??bindAddressClear_0:
        JNZ     $+5
        LJMP    ??bindAddressClear_1 & 0xFFFF
//  744   {
//  745     // Looks for a specific Idx
//  746     for ( i = 0; i < gNWK_MAX_BINDING_ENTRIES; i++ )
        MOV     ?V0,#0x0
??bindAddressClear_2:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        JNC     ??bindAddressClear_3
//  747     {
//  748       if ( ( BindingTable[i].dstGroupMode != AddrGroup ) &&
//  749            ( BindingTable[i].dstGroupMode == DSTGROUPMODE_ADDR ) &&
//  750            ( BindingTable[i].dstIdx == dstIdx ) )
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 1) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 1) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bindAddressClear_4
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 1) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 1) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??bindAddressClear_4
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(BindingTable + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??bindAddressClear_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??bindAddressClear_5:
        JZ      ??bindAddressClear_3
//  751       {
//  752         break;  // found at least one
//  753       }
//  754     }
??bindAddressClear_4:
        INC     ?V0
        LJMP    ??bindAddressClear_2 & 0xFFFF
//  755 
//  756     if ( i == gNWK_MAX_BINDING_ENTRIES )
??bindAddressClear_3:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,?V0
        JNZ     ??bindAddressClear_1
//  757     {
//  758       // No binding entry is associated with dstIdx.
//  759       // Remove user binding bit from the address manager entry corresponding to dstIdx.
//  760       AddrMgrEntry_t addrEntry;
//  761 
//  762       addrEntry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  763       addrEntry.index = dstIdx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  764 
//  765       AddrMgrEntryRelease( &addrEntry );
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
        MOV     A,R1
//  766     }
//  767   }
//  768 }
??bindAddressClear_1:
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15
//  769 
//  770 /*********************************************************************
//  771  * @fn          BindInitNV
//  772  *
//  773  * @brief       Initialize the Binding NV Item
//  774  *
//  775  * @param       none
//  776  *
//  777  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  778  *              exist in NV, NV_OPER_FAILED if failure.
//  779  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  780 byte BindInitNV( void )
BindInitNV:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function BindInitNV
        CODE
//  781 {
        FUNCALL BindInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindInitNV, BindSetDefaultNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  782   byte ret;
//  783 
//  784   // Initialize the device list
//  785   ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
//  786                   (uint16)( sizeof( nvBindingHdr_t ) + NV_BIND_ITEM_SIZE ), NULL );
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0,A
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     B,?V0
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V1
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,?V0
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R6,A
//  787 
//  788   if ( ret != ZSUCCESS )
        MOV     A,R6
        JZ      ??BindInitNV_0
//  789   {
//  790     BindSetDefaultNV();
        ; Setup parameters for call to function BindSetDefaultNV
        LCALL   `??BindSetDefaultNV::?relay`; Banked call to: BindSetDefaultNV
//  791   }
//  792 
//  793   return ( ret );
??BindInitNV_0:
        MOV     A,R6
        MOV     R1,A
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
//  794 }
          CFI EndBlock cfiBlock16
//  795 
//  796 /*********************************************************************
//  797  * @fn          BindSetDefaultNV
//  798  *
//  799  * @brief       Write the defaults to NV
//  800  *
//  801  * @param       none
//  802  *
//  803  * @return      none
//  804  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  805 void BindSetDefaultNV( void )
BindSetDefaultNV:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function BindSetDefaultNV
        CODE
//  806 {
        FUNCALL BindSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  807   nvBindingHdr_t hdr;
//  808 
//  809   // Initialize the header
//  810   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  811 
//  812   // Save off the header
//  813   osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
//  814 }
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock17
//  815 
//  816 /*********************************************************************
//  817  * @fn          BindCopyBackupToNewNV
//  818  *
//  819  * @brief       Creates the New NV item, copies the backup data into
//  820  *              the New NV ID, and Deletes the duplicate NV item.
//  821  *
//  822  * @param       dupLen - NV item length of the old Binding table.
//  823  * @param       newLen - NV item length of the new Binding table to be created.
//  824  *
//  825  * @return      ZSuccess - All the actions were successful.
//  826  *              ZFailure - Any of the actions failed.
//  827  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  828 static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen )
BindCopyBackupToNewNV:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
        CODE
//  829 {
        FUNCALL BindCopyBackupToNewNV, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
//  830   uint16 bindLen;
//  831   uint8 status = ZSuccess;
        MOV     R6,#0x0
//  832 
//  833   bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V0,?V6
        MOV     ?V1,?V7
//  834 
//  835 
//  836   if ( ( bindLen > 0 ) && ( bindLen != newLen ) )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??BindCopyBackupToNewNV_0
        MOV     A,?V2
        XRL     A,?V0
        JNZ     ??BindCopyBackupToNewNV_1
        MOV     A,?V3
        XRL     A,?V1
??BindCopyBackupToNewNV_1:
        JZ      ??BindCopyBackupToNewNV_0
//  837   {
//  838     // The existing item does not match the New length
//  839     osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen );
        ; Setup parameters for call to function osal_nv_delete
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
        MOV     A,R1
//  840   }
//  841 
//  842   // Create Binding Table NV item with the NEW legth
//  843   if ( osal_nv_item_init( ZCD_NV_BINDING_TABLE, newLen, NULL ) != NV_OPER_FAILED )
??BindCopyBackupToNewNV_0:
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V6,A
        MOV     ?V7,A
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,?V2
        MOV     R5,?V3
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R1
        XRL     A,#0xa
        JNZ     $+5
        LJMP    ??BindCopyBackupToNewNV_2 & 0xFFFF
//  844   {
//  845     nvBindingHdr_t hdrBackup;
//  846 
//  847     // Copy ONLY the valid records from the duplicate NV table into the new table
//  848     // at the end of this process the table content will be compacted
//  849     if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdrBackup ) == ZSuccess )
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V6,R0
        MOV     ?V7,R1
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V6,#0x2
        MOV     ?V7,#0x0
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x3
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R1
        JZ      $+5
        LJMP    ??BindCopyBackupToNewNV_3 & 0xFFFF
//  850     {
//  851       bindTableIndex_t i;
//  852       uint16 validBackupRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  853       BindingEntry_t backupRec;
//  854 
//  855       // Read in the device list. This loop will stop when:
//  856       // The total number of valid records has been reached either because:
//  857       //          The new table is full of valid records OR
//  858       //          The old table has less valid records than the size of the table
//  859       for ( i = 0; ( validBackupRecs < gNWK_MAX_BINDING_ENTRIES ) && ( validBackupRecs < hdrBackup.numRecs ); i++ )
        MOV     R7,#0x0
??BindCopyBackupToNewNV_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     R1,#0x0
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JC      $+5
        LJMP    ??BindCopyBackupToNewNV_5 & 0xFFFF
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JC      $+5
        LJMP    ??BindCopyBackupToNewNV_5 & 0xFFFF
//  860       {
//  861         if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE,
//  862                           (uint16)(sizeof(nvBindingHdr_t) + (i * NV_BIND_REC_SIZE)),
//  863                           NV_BIND_REC_SIZE, &backupRec ) == ZSuccess )
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V6,R0
        MOV     ?V7,R1
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R7
        MOV     R0,A
        MOV     R1,#0x0
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V6,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     ?V7,A
        MOV     A,R0
        MOV     B,?V6
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V7
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,?V6
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x3
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R1
        JNZ     ??BindCopyBackupToNewNV_6
//  864         {
//  865           if ( backupRec.srcEP != NV_BIND_EMPTY )
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xff
        JZ      ??BindCopyBackupToNewNV_7
//  866           {
//  867             // Save the valid record into the NEW NV table.
//  868             if ( osal_nv_write( ZCD_NV_BINDING_TABLE,
//  869                                 (uint16)((sizeof(nvBindingHdr_t)) + (validBackupRecs * NV_BIND_REC_SIZE)),
//  870                                 NV_BIND_REC_SIZE, &backupRec ) != ZSuccess )
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V6,R0
        MOV     ?V7,R1
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V6,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     ?V7,A
        MOV     A,R0
        MOV     B,?V6
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V7
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,?V6
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R1
        JZ      ??BindCopyBackupToNewNV_8
//  871             {
//  872                status = ZFailure;
        MOV     R6,#0x1
//  873                break; // Terminate the loop as soon as a problem with NV is detected
        SJMP    ??BindCopyBackupToNewNV_5
//  874             }
//  875 
//  876             validBackupRecs++;
??BindCopyBackupToNewNV_8:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  877           }
//  878         }
??BindCopyBackupToNewNV_7:
        INC     R7
        LJMP    ??BindCopyBackupToNewNV_4 & 0xFFFF
//  879         else
//  880         {
//  881            status = ZFailure;
??BindCopyBackupToNewNV_6:
        MOV     R6,#0x1
//  882            break; // Terminate the loop as soon as a problem with NV is detected
//  883         }
//  884       }
//  885 
//  886       // Only save the header and delete the duplicate element if the previous
//  887       // process was successful
//  888       if ( status == ZSuccess )
??BindCopyBackupToNewNV_5:
        MOV     A,R6
        JNZ     ??BindCopyBackupToNewNV_9
//  889       {
//  890         // Save off the header
//  891         if ( osal_nv_write( ZCD_NV_BINDING_TABLE, 0,
//  892                             sizeof(nvBindingHdr_t), &validBackupRecs ) == ZSuccess )
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V6,R0
        MOV     ?V7,R1
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V6,#0x2
        MOV     ?V7,#0x0
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R1
        JNZ     ??BindCopyBackupToNewNV_10
//  893         {
//  894           // Delete the duplicate NV Item, once the data has been stored in the NEW table
//  895           if ( osal_nv_delete( ZCD_NV_DUPLICATE_BINDING_TABLE, dupLen ) != ZSuccess )
        ; Setup parameters for call to function osal_nv_delete
        MOV     R4,?V4
        MOV     R5,?V5
        MOV     R2,#0x0
        MOV     R3,#0x3
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
        MOV     A,R1
        JZ      ??BindCopyBackupToNewNV_9
//  896           {
//  897             status = ZFailure;
        MOV     R6,#0x1
        SJMP    ??BindCopyBackupToNewNV_9
//  898           }
//  899         }
//  900         else
//  901         {
//  902           status = ZFailure;
??BindCopyBackupToNewNV_10:
        MOV     R6,#0x1
        SJMP    ??BindCopyBackupToNewNV_9
//  903         }
//  904       }
//  905     }
//  906     else
//  907     {
//  908       status = ZFailure;
??BindCopyBackupToNewNV_3:
        MOV     R6,#0x1
        SJMP    ??BindCopyBackupToNewNV_9
//  909     }
//  910   }
//  911   else
//  912   {
//  913     status = ZFailure;
??BindCopyBackupToNewNV_2:
        MOV     R6,#0x1
//  914   }
//  915 
//  916   return ( status );
??BindCopyBackupToNewNV_9:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x12
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
//  917 }
          CFI EndBlock cfiBlock18
//  918 
//  919 /*********************************************************************
//  920  * @fn          BindUpgradeTableInNV
//  921  *
//  922  * @brief       Verifies if the existing table in NV has different size
//  923  *              than the table defined by parameters in the current code.
//  924  *              If different, creates a backup table, deletes the existing
//  925  *              table and creates the new table with the new size. After
//  926  *              this process is done ZCD_NV_BINDING_TABLE NV item contains
//  927  *              only valid records retrieved from the original table, up to
//  928  *              the maximum number of records defined by gNWK_MAX_BINDING_ENTRIES
//  929  *
//  930  * @param       none
//  931  *
//  932  * @return      ZSuccess - the Update process was sucessful.
//  933  *              ZFailure - otherwise.
//  934  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  935 static uint8 BindUpgradeTableInNV( void )
BindUpgradeTableInNV:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function BindUpgradeTableInNV
        CODE
//  936 {
        FUNCALL BindUpgradeTableInNV, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, nwkCreateDuplicateNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, BindCopyBackupToNewNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  937   nvBindingHdr_t hdr;
//  938   uint16 dupLen;
//  939   uint16 bindLen;
//  940   uint16 newLen;
//  941   uint8 status = ZSuccess;
        MOV     ?V2,#0x0
//  942   bool duplicateReady = FALSE;
        MOV     ?V3,#0x0
//  943 
//  944   // Size of the Binding table based on current paramenters in the code
//  945   newLen = sizeof(nvBindingHdr_t) + NV_BIND_ITEM_SIZE;
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V6,A
        MOV     ?V7,#0x0
        MOV     A,R0
        MOV     B,?V6
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V7
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,?V6
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R0,A
        JNC     ??BindUpgradeTableInNV_0
        INC     R1
??BindUpgradeTableInNV_0:
        MOV     ?V0,R0
        MOV     ?V1,R1
//  946 
//  947   // Size of the Binding table NV item, this is the whole size of the item,
//  948   // it could inculde invalid records also
//  949   bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R6,?V6
        MOV     R7,?V7
//  950 
//  951   // Get the number of valid records from the Binding table
//  952   osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V6,R0
        MOV     ?V7,R1
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V6,#0x2
        MOV     ?V7,#0x0
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
//  953 
//  954   // Identify if there is a duplicate NV item, if it is there, that means an
//  955   // Upgrade process did not finish properly last time
//  956   // The length function will return 0 if the Backup NV ID does not exist.
//  957   dupLen = osal_nv_item_len( ZCD_NV_DUPLICATE_BINDING_TABLE );
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x0
        MOV     R3,#0x3
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V4,?V6
        MOV     ?V5,?V7
//  958 
//  959   // A duplicate of the original Binding item will be done if:
//  960   // 1) A duplicate NV item DOES NOT exist AND the size of the original Binding
//  961   //    item in NV is different (larger/smaller) than the the length calculated
//  962   //    from the parameters in the code. If they are the same there is no need
//  963   //    to do the Upgrade process.
//  964   // 2) A duplicate NV item exists (probably because the previous upgrade
//  965   //    process was interrupted) and [the original Binding NV items exists AND
//  966   //    has valid recods (it is important to make sure that valid records exist
//  967   //    in the binding table because it is possible that the item was created
//  968   //    but the data was not copied in the previous upgrade process).
//  969   if ( ( ( dupLen == 0 ) && ( bindLen != newLen ) ) ||
//  970        ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs > 0 ) ) )
        MOV     A,?V4
        ORL     A,?V5
        JNZ     ??BindUpgradeTableInNV_1
        MOV     A,?V0
        XRL     A,R6
        JNZ     ??BindUpgradeTableInNV_2
        MOV     A,?V1
        XRL     A,R7
??BindUpgradeTableInNV_2:
        JNZ     ??BindUpgradeTableInNV_3
??BindUpgradeTableInNV_1:
        MOV     A,?V4
        ORL     A,?V5
        JZ      ??BindUpgradeTableInNV_4
        MOV     A,R6
        ORL     A,R7
        JZ      ??BindUpgradeTableInNV_4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??BindUpgradeTableInNV_4
//  971   {
//  972     // Create a copy from original NV item into a duplicate NV item
//  973     if ( ( status = nwkCreateDuplicateNV( ZCD_NV_BINDING_TABLE,
//  974                                           ZCD_NV_DUPLICATE_BINDING_TABLE ) ) == ZSuccess )
??BindUpgradeTableInNV_3:
        ; Setup parameters for call to function nwkCreateDuplicateNV
        MOV     R4,#0x0
        MOV     R5,#0x3
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??nwkCreateDuplicateNV::?relay`; Banked call to: nwkCreateDuplicateNV
        MOV     A,R1
        MOV     R0,A
        MOV     ?V2,R0
        MOV     A,R0
        JNZ     ??BindUpgradeTableInNV_5
//  975     {
//  976       // Delete the original NV item once the duplicate is ready
//  977       if ( osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen ) != ZSuccess )
        ; Setup parameters for call to function osal_nv_delete
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
        MOV     A,R1
        JZ      ??BindUpgradeTableInNV_6
//  978       {
//  979         status = ZFailure;
        MOV     ?V2,#0x1
        SJMP    ??BindUpgradeTableInNV_5
//  980       }
//  981       else
//  982       {
//  983         duplicateReady = TRUE;
??BindUpgradeTableInNV_6:
        MOV     ?V3,#0x1
        SJMP    ??BindUpgradeTableInNV_5
//  984       }
//  985     }
//  986   }
//  987   else if ( ( ( dupLen > 0 ) && ( bindLen == 0 ) ) ||
//  988             ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs == 0 ) ) )
??BindUpgradeTableInNV_4:
        MOV     A,?V4
        ORL     A,?V5
        JZ      ??BindUpgradeTableInNV_7
        MOV     A,R6
        ORL     A,R7
        JZ      ??BindUpgradeTableInNV_8
??BindUpgradeTableInNV_7:
        MOV     A,?V4
        ORL     A,?V5
        JZ      ??BindUpgradeTableInNV_5
        MOV     A,R6
        ORL     A,R7
        JZ      ??BindUpgradeTableInNV_5
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??BindUpgradeTableInNV_5
//  989   {
//  990     // If for some reason a duplicate NV item was left in the system from a
//  991     // previous upgrade process and:
//  992     // 1) The original Binding NV item DOES NOT exist OR
//  993     // 2) The original Binding NV item exist, but has no valid records.
//  994     // it is necessary to rely in the data in the Duplicate item to create
//  995     // the Binding table
//  996     bindLen = dupLen;
??BindUpgradeTableInNV_8:
        MOV     R6,?V4
        MOV     R7,?V5
//  997 
//  998     duplicateReady = TRUE;
        MOV     ?V3,#0x1
//  999   }
// 1000 
// 1001   if ( duplicateReady == TRUE )
??BindUpgradeTableInNV_5:
        MOV     A,#0x1
        XRL     A,?V3
        JNZ     ??BindUpgradeTableInNV_9
// 1002   {
// 1003     // Creates the New Binding table, Copy data from backup and Delete backup NV ID
// 1004     status = BindCopyBackupToNewNV( bindLen, newLen );
        ; Setup parameters for call to function BindCopyBackupToNewNV
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??BindCopyBackupToNewNV::?relay`; Banked call to: BindCopyBackupToNewNV
        MOV     A,R1
        MOV     ?V2,A
// 1005   }
// 1006 
// 1007   return ( status );
??BindUpgradeTableInNV_9:
        MOV     R1,?V2
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
// 1008 }
          CFI EndBlock cfiBlock19
// 1009 
// 1010 /*********************************************************************
// 1011  * @fn          BindRestoreFromNV
// 1012  *
// 1013  * @brief       Restore the binding table from NV
// 1014  *
// 1015  * @param       none
// 1016  *
// 1017  * @return      Number of entries restored
// 1018  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1019 uint16 BindRestoreFromNV( void )
BindRestoreFromNV:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function BindRestoreFromNV
        CODE
// 1020 {
        FUNCALL BindRestoreFromNV, BindUpgradeTableInNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1021   nvBindingHdr_t hdr;
// 1022 
// 1023   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1024 
// 1025   if ( BindUpgradeTableInNV() == ZSuccess )
        ; Setup parameters for call to function BindUpgradeTableInNV
        LCALL   `??BindUpgradeTableInNV::?relay`; Banked call to: BindUpgradeTableInNV
        MOV     A,R1
        JZ      $+5
        LJMP    ??BindRestoreFromNV_0 & 0xFFFF
// 1026   {
// 1027     if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JZ      $+5
        LJMP    ??BindRestoreFromNV_0 & 0xFFFF
// 1028     {
// 1029       bindTableIndex_t x;
// 1030       uint16 validRecsCount = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
// 1031 
// 1032       // Read in the device list
// 1033       for ( x = 0; ( x < gNWK_MAX_BINDING_ENTRIES ) && ( validRecsCount < hdr.numRecs ); x++ )
        MOV     ?V0,#0x0
??BindRestoreFromNV_1:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??BindRestoreFromNV_0 & 0xFFFF
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        JC      $+5
        LJMP    ??BindRestoreFromNV_0 & 0xFFFF
// 1034       {
// 1035         if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
// 1036                            (uint16)(sizeof(nvBindingHdr_t) + (x * NV_BIND_REC_SIZE)),
// 1037                            NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     ?V2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V3,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     ?V3,A
        MOV     A,R0
        MOV     B,?V2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V3
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,?V2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??BindRestoreFromNV_2
// 1038         {
// 1039           if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JZ      ??BindRestoreFromNV_2
// 1040           {
// 1041             validRecsCount++;
        INC     R6
        MOV     A,R6
        JNZ     ??BindRestoreFromNV_2
        INC     R7
// 1042           }
// 1043         }
// 1044       }
??BindRestoreFromNV_2:
        INC     ?V0
        LJMP    ??BindRestoreFromNV_1 & 0xFFFF
// 1045     }
// 1046   }
// 1047   return ( hdr.numRecs );
??BindRestoreFromNV_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
// 1048 }
          CFI EndBlock cfiBlock20
// 1049 
// 1050 /*********************************************************************
// 1051  * @fn          BindWriteNV
// 1052  *
// 1053  * @brief       Save the Binding Table in NV
// 1054  *
// 1055  * @param       none
// 1056  *
// 1057  * @return      none
// 1058  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1059 void BindWriteNV( void )
BindWriteNV:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function BindWriteNV
        CODE
// 1060 {
        FUNCALL BindWriteNV, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1061   BindingEntry_t *pBind;
// 1062   BindingEntry_t bind;
// 1063   nvBindingHdr_t hdr;
// 1064   bindTableIndex_t x;
// 1065 
// 1066   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1067 
// 1068   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R6,#0x0
??BindWriteNV_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??BindWriteNV_1 & 0xFFFF
// 1069   {
// 1070     pBind = &BindingTable[x];
        MOV     A,R6
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
// 1071 
// 1072     osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V0
        MOV     ?V5,?V1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R4,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R5,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1073 
// 1074     // Save the record to NV
// 1075     osal_nv_write( ZCD_NV_BINDING_TABLE,
// 1076                    (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
// 1077                    NV_BIND_REC_SIZE, &bind );
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R6
        MOV     R0,A
        MOV     R1,#0x0
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     ?V3,A
        MOV     A,R0
        MOV     B,?V2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V3
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,?V2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R1
// 1078 
// 1079     if ( pBind->srcEP != NV_BIND_EMPTY )
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        XRL     A,#0xff
        JZ      ??BindWriteNV_2
// 1080     {
// 1081       hdr.numRecs++;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
// 1082     }
// 1083   }
??BindWriteNV_2:
        INC     R6
        LJMP    ??BindWriteNV_0 & 0xFFFF
// 1084 
// 1085   // Save off the header
// 1086   osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
??BindWriteNV_1:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V2,#0x2
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R1
// 1087 }
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock21
// 1088 
// 1089 /*********************************************************************
// 1090  * @fn          bindUpdateAddr
// 1091  *
// 1092  * @brief       Update the network address in the binding table.
// 1093  *
// 1094  * @param       oldAddr - old network address
// 1095  * @param       newAddr - new network address
// 1096  *
// 1097  * @return      none
// 1098  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1099 void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
bindUpdateAddr:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function bindUpdateAddr
        CODE
// 1100 {
        FUNCALL bindUpdateAddr, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindUpdateAddr, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1101   uint16 oldIdx;
// 1102   uint16 newIdx;
// 1103   zAddrType_t addr;
// 1104   bindTableIndex_t x;
// 1105   BindingEntry_t *pBind;
// 1106 
// 1107   addr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1108   addr.addr.shortAddr = oldAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V3
        MOVX    @DPTR,A
// 1109   oldIdx = bindingAddrMgsHelperFind( &addr );
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     ?V0,?V10
        MOV     ?V1,?V11
// 1110   addr.addr.shortAddr = newAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1111   newIdx = bindingAddrMgsHelperFind( &addr );
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     ?V6,?V10
        MOV     ?V7,?V11
// 1112 
// 1113   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V8,#0x0
??bindUpdateAddr_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V8
        CLR     C
        SUBB    A,R0
        JNC     ??bindUpdateAddr_1
// 1114   {
// 1115     pBind = &BindingTable[x];
        MOV     R0,?V8
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     ?V4,R0
        MOV     ?V5,R1
// 1116 
// 1117     if ( pBind->dstIdx == oldIdx )
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??bindUpdateAddr_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??bindUpdateAddr_2:
        JNZ     ??bindUpdateAddr_3
// 1118     {
// 1119       pBind->dstIdx = newIdx;
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        MOV     A,?V6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V7
        MOVX    @DPTR,A
// 1120     }
// 1121   }
??bindUpdateAddr_3:
        INC     ?V8
        SJMP    ??bindUpdateAddr_0
// 1122 }
??bindUpdateAddr_1:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock22
// 1123 
// 1124 /*********************************************************************
// 1125  * @fn      bindingAddrMgsHelperFind
// 1126  *
// 1127  * @brief   Turns an zAddrType_t to an Addr Manager index
// 1128  *
// 1129  * @param   addr - zAddrType_t
// 1130  *
// 1131  * @return  INVALID_NODE_ADDR if not found, otherwise an index
// 1132  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1133 uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
bindingAddrMgsHelperFind:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
        CODE
// 1134 {
        FUNCALL bindingAddrMgsHelperFind, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperFind, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperFind, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1135   AddrMgrEntry_t entry;
// 1136 
// 1137   // Resolve addresses with the address manager
// 1138   entry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
// 1139   if ( addr->addrMode == Addr16Bit )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??bindingAddrMgsHelperFind_0
// 1140   {
// 1141     entry.nwkAddr = addr->addr.shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1142     AddrMgrEntryLookupNwk( &entry );
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV     A,R1
        SJMP    ??bindingAddrMgsHelperFind_1
// 1143   }
// 1144   else
// 1145   {
// 1146     AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
??bindingAddrMgsHelperFind_0:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
// 1147     AddrMgrEntryLookupExt( &entry );
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV     A,R1
// 1148   }
// 1149 
// 1150   return ( entry.index );
??bindingAddrMgsHelperFind_1:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
// 1151 }
          CFI EndBlock cfiBlock23
// 1152 
// 1153 /*********************************************************************
// 1154  * @fn      bindingAddrMgsHelperConvert
// 1155  *
// 1156  * @brief   Convert an index into an zAddrType_t
// 1157  *
// 1158  * @param   idx -
// 1159  * @param   addr - zAddrType_t
// 1160  *
// 1161  * @return  TRUE if found, FALSE if not
// 1162  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1163 uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
bindingAddrMgsHelperConvert:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function bindingAddrMgsHelperConvert
        CODE
// 1164 {
        FUNCALL bindingAddrMgsHelperConvert, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperConvert, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1165   AddrMgrEntry_t entry;
// 1166   uint8 stat;
// 1167 
// 1168   // Resolve addresses with the address manager
// 1169   entry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
// 1170   entry.index = idx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V3
        MOVX    @DPTR,A
// 1171   stat = AddrMgrEntryGet( &entry );
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
        MOV     A,R1
        MOV     ?V0,A
// 1172   if ( stat )
        MOV     A,?V0
        JZ      ??bindingAddrMgsHelperConvert_0
// 1173   {
// 1174     addr->addrMode = Addr64Bit;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1175     osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1176   }
// 1177 
// 1178   return ( stat );
??bindingAddrMgsHelperConvert_0:
        MOV     R1,?V0
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
// 1179 }
          CFI EndBlock cfiBlock24
// 1180 
// 1181 /*********************************************************************
// 1182  * @fn      bindingAddrMgsHelperConvertShort
// 1183  *
// 1184  * @brief   Convert an index into a short address
// 1185  *
// 1186  * @param   idx -
// 1187  *
// 1188  * @return  INVALID_NODE_ADDR if not available, otherwise the short address
// 1189  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1190 uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
bindingAddrMgsHelperConvertShort:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function bindingAddrMgsHelperConvertShort
        CODE
// 1191 {
        FUNCALL bindingAddrMgsHelperConvertShort, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1192   AddrMgrEntry_t entry;
// 1193 
// 1194   // Resolve addresses with the address manager
// 1195   entry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
// 1196   entry.index = idx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1197   AddrMgrEntryGet( &entry );
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
        MOV     A,R1
// 1198 
// 1199   return ( entry.nwkAddr );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
// 1200 }
          CFI EndBlock cfiBlock25
// 1201 
// 1202 /*********************************************************************
// 1203  * @fn      bindAddrMgrLocalLoad
// 1204  *
// 1205  * @brief   Load local(self and parent) address information into
// 1206  *          Address Manager
// 1207  *
// 1208  * @param   none
// 1209  *
// 1210  * @return  none
// 1211  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1212 void bindAddrMgrLocalLoad( void )
bindAddrMgrLocalLoad:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function bindAddrMgrLocalLoad
        CODE
// 1213 {
        FUNCALL bindAddrMgrLocalLoad, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, NLME_GetCoordExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
// 1214   AddrMgrEntry_t entry;
// 1215   uint16         parent;
// 1216 
// 1217   // add "local"(self and parent) address informtion into the Address
// 1218   // Manager
// 1219   if ( bindAddrMgrLocalLoaded == FALSE )
        MOV     DPTR,#bindAddrMgrLocalLoaded
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??bindAddrMgrLocalLoad_0 & 0xFFFF
// 1220   {
// 1221     // add the device's address information
// 1222     entry.user    = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
// 1223     entry.nwkAddr = _NIB.nwkDevAddress;
        MOV     DPTR,#_NIB + 20
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1224     AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
// 1225     AddrMgrEntryUpdate( &entry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV     A,R1
// 1226 
// 1227     // make sure parent address is valid
// 1228     parent = NLME_GetCoordShortAddr();
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 1229     if ( ( parent != entry.nwkAddr     ) &&
// 1230          ( parent != INVALID_NODE_ADDR )    )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??bindAddrMgrLocalLoad_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??bindAddrMgrLocalLoad_1:
        JZ      ??bindAddrMgrLocalLoad_2
        MOV     A,#-0x2
        XRL     A,R6
        JNZ     ??bindAddrMgrLocalLoad_3
        MOV     A,#-0x1
        XRL     A,R7
??bindAddrMgrLocalLoad_3:
        JZ      ??bindAddrMgrLocalLoad_2
// 1231     {
// 1232       // add the parent's address information
// 1233       entry.nwkAddr = parent;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1234       NLME_GetCoordExtAddr( entry.extAddr );
        ; Setup parameters for call to function NLME_GetCoordExtAddr
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
// 1235       AddrMgrEntryUpdate( &entry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV     A,R1
// 1236     }
// 1237 
// 1238     bindAddrMgrLocalLoaded = TRUE;
??bindAddrMgrLocalLoad_2:
        MOV     DPTR,#bindAddrMgrLocalLoaded
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1239   }
// 1240 }
??bindAddrMgrLocalLoad_0:
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock26
// 1241 
// 1242 /*********************************************************************
// 1243  * @fn      bindAddrIndexGet
// 1244  *
// 1245  * @brief   Get bind address index.
// 1246  *
// 1247  * @param   addr - <zAddrType_t>
// 1248  *
// 1249  * @return  (uint16) address index
// 1250  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1251 uint16 bindAddrIndexGet( zAddrType_t* addr )
bindAddrIndexGet:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function bindAddrIndexGet
        CODE
// 1252 {
        FUNCALL bindAddrIndexGet, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1253   AddrMgrEntry_t entry;
// 1254   uint8          update;
// 1255 
// 1256   update = FALSE;
        MOV     ?V0,#0x0
// 1257 
// 1258   // sync binding addresses with the address manager
// 1259   entry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
// 1260 
// 1261   if ( addr->addrMode == Addr16Bit )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??bindAddrIndexGet_0
// 1262   {
// 1263     entry.nwkAddr = addr->addr.shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1264 
// 1265     if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV     A,R1
        JNZ     ??bindAddrIndexGet_1
// 1266     {
// 1267       update = TRUE;
        MOV     ?V0,#0x1
        SJMP    ??bindAddrIndexGet_1
// 1268     }
// 1269   }
// 1270   else if ( addr->addrMode == Addr64Bit )
??bindAddrIndexGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??bindAddrIndexGet_2
// 1271   {
// 1272     AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
// 1273 
// 1274     if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV     A,R1
        JNZ     ??bindAddrIndexGet_1
// 1275     {
// 1276       update = TRUE;
        MOV     ?V0,#0x1
        SJMP    ??bindAddrIndexGet_1
// 1277     }
// 1278   }
// 1279   else if ( addr->addrMode == AddrGroup )
??bindAddrIndexGet_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindAddrIndexGet_3
// 1280   {
// 1281     entry.index = addr->addr.shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        SJMP    ??bindAddrIndexGet_1
// 1282   }
// 1283   else
// 1284   {
// 1285     entry.index = INVALID_NODE_ADDR;
??bindAddrIndexGet_3:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1286   }
// 1287 
// 1288   if ( update )
??bindAddrIndexGet_1:
        MOV     A,?V0
        JZ      ??bindAddrIndexGet_4
// 1289   {
// 1290     AddrMgrEntryUpdate( &entry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV     A,R1
// 1291   }
// 1292 
// 1293   return entry.index;
??bindAddrIndexGet_4:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
// 1294 }
          CFI EndBlock cfiBlock27
// 1295 
// 1296 /*********************************************************************
// 1297  * @fn      GetBindingTableEntry
// 1298  *
// 1299  * @brief   Get a pointer to the Nth valid binding table entry.
// 1300  *
// 1301  * @param   Nth valid entry being requested.
// 1302  *
// 1303  * @return  The Nth valid binding table entry.
// 1304  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1305 BindingEntry_t *GetBindingTableEntry( uint16 Nth )
GetBindingTableEntry:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function GetBindingTableEntry
        CODE
// 1306 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1307   BindingEntry_t *rtrn = NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
// 1308 
// 1309 #if defined ( REFLECTOR )
// 1310   bindTableIndex_t idx, cnt = 0;
        MOV     R4,#0x0
// 1311 
// 1312   for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
        MOV     R5,#0x0
??GetBindingTableEntry_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R5
        CLR     C
        SUBB    A,R0
        JNC     ??GetBindingTableEntry_1
// 1313   {
// 1314     if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
        MOV     A,R5
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     ?V0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V0
        MOV     ?V0,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,?V0
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JZ      ??GetBindingTableEntry_2
// 1315     {
// 1316       if ( cnt++ == Nth )
        MOV     ?V1,R4
        MOV     A,#0x1
        ADD     A,?V1
        MOV     R4,A
        MOV     R0,?V1
        MOV     R1,#0x0
        MOV     A,R6
        XRL     A,R0
        JNZ     ??GetBindingTableEntry_3
        MOV     A,R7
        XRL     A,R1
??GetBindingTableEntry_3:
        JNZ     ??GetBindingTableEntry_2
// 1317       {
// 1318         rtrn = BindingTable+idx;
        MOV     A,R5
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        XCH     A,R0
        MOV     ?V0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V0
        MOV     ?V0,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,?V0
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
// 1319         break;
        SJMP    ??GetBindingTableEntry_1
// 1320       }
// 1321     }
// 1322   }
??GetBindingTableEntry_2:
        INC     R5
        SJMP    ??GetBindingTableEntry_0
// 1323 #else
// 1324   (void)Nth;
// 1325 #endif
// 1326 
// 1327   return rtrn;
??GetBindingTableEntry_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
// 1328 }
          CFI EndBlock cfiBlock28

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??InitBindingTable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    InitBindingTable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindFindEmpty::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFindEmpty

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindNumOfEntries::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumOfEntries

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindCapacity::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindCapacity

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindIsClusterIDinList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindIsClusterIDinList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveClusterIdFromList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveClusterIdFromList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddClusterIdToList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddClusterIdToList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindFindExisting::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFindExisting

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveDev::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveDev

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveSrcDev::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveSrcDev

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindNumBoundTo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumBoundTo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindNumReflections::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumReflections

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindFind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddressClear::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddressClear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindInitNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindInitNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindSetDefaultNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindSetDefaultNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindCopyBackupToNewNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindCopyBackupToNewNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindUpgradeTableInNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindUpgradeTableInNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindRestoreFromNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindRestoreFromNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindWriteNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindWriteNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindUpdateAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindUpdateAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindingAddrMgsHelperFind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperFind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindingAddrMgsHelperConvert::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperConvert

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindingAddrMgsHelperConvertShort::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperConvertShort

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddrMgrLocalLoad::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddrMgrLocalLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddrIndexGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddrIndexGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GetBindingTableEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GetBindingTableEntry

        END
// 1329 
// 1330 /*********************************************************************
// 1331 *********************************************************************/
// 
// 5 823 bytes in segment BANKED_CODE
//   174 bytes in segment BANK_RELAYS
//    15 bytes in segment XDATA_Z
// 
// 5 997 bytes of CODE  memory
//    15 bytes of XDATA memory
//
//Errors: none
//Warnings: none
