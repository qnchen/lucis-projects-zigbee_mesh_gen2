###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Apr/2017  17:48:46
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\mt\MT_SYS.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Components\mt\MT_SYS.c" -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D
#        MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE -D NV_INIT -D
#        OPEN_FCS -D PANID_INCREASE -lC "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List" -lA
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj" -e
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
#        1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
#        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\MT_SYS.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
#        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj\MT_SYS.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\mt\MT_SYS.c
      1          /******************************************************************************
      2            Filename:       MT_SYS.c
      3            Revised:        $Date: 2014-08-04 15:38:03 -0700 (Mon, 04 Aug 2014) $
      4            Revision:       $Revision: 39653 $
      5          
      6            Description:   MonitorTest functions for SYS commands.
      7          
      8            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           *****************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT.h"
     45          #include "MT_SYS.h"
     46          #include "MT_VERSION.h"
     47          #include "OSAL.h"
     48          #include "OSAL_NV.h"
     49          #include "Onboard.h"  /* This is here because RAM read/write macros need it */

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     50          #include "hal_adc.h"
     51          #include "OSAL_Clock.h"
     52          #include "mac_low_level.h"
     53          #include "ZMAC.h"
     54          #include "mac_radio_defs.h"
     55          #if defined ( MT_SYS_JAMMER_FEATURE )
     56            #include "mac_rx.h"
     57          #endif
     58          #if !defined(CC253X_MACNP)
     59            #include "ZGlobals.h"
     60          #endif
     61          #if (defined INCLUDE_REVISION_INFORMATION) && ((defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)) //built for bootloader
     62            #include "hal_flash.h"
     63            #include "sb_shared.h"
     64          #endif
     65          #include "ZDiags.h"
     66          #include "MT_UART.h"
     67          //chaokw
     68          #include "AF.h"
     69          #include "GenericApp.h"
     70          #include "NodeAuth.h"
     71          #include "ZDSecMgr.h"
     72          
     73          
     74          /***************************************************************************************************
     75           * MACROS
     76           ***************************************************************************************************/
     77          
     78          /* Max possible MT response length, limited by TX buffer size and sizeof uint8 */
     79          #define MT_MAX_RSP_LEN  ( MIN( MT_UART_DEFAULT_MAX_TX_BUFF, 255 ) )
     80          
     81          /* Max possible MT response data length, MT protocol overhead */
     82          #define MT_MAX_RSP_DATA_LEN  ( (MT_MAX_RSP_LEN - 1) - SPI_0DATA_MSG_LEN )
     83            
     84          #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
     85          
     86          #if !defined HAL_GPIO || !HAL_GPIO
     87          #define GPIO_DIR_IN(IDX)
     88          #define GPIO_DIR_OUT(IDX)
     89          #define GPIO_TRI(IDX)
     90          #define GPIO_PULL_UP(IDX)
     91          #define GPIO_PULL_DN(IDX)
     92          #define GPIO_SET(IDX)
     93          #define GPIO_CLR(IDX)
     94          #define GPIO_TOG(IDX)
     95          #define GPIO_GET(IDX) 0
     96          #define GPIO_HiD_SET() (val = 0)
     97          #define GPIO_HiD_CLR() (val = 0)
     98          #endif
     99          
    100          #if defined ( MT_SYS_SNIFFER_FEATURE )
    101          #if defined ( HAL_MCU_CC2530 ) && !defined ( HAL_BOARD_CC2530USB )
    102            // This only work with the CC253x chips
    103            #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() st         \
    104            (                                                                                                                                                                                                                                   \
    105              OBSSEL3 = 0xFD;                                        \
    106              OBSSEL4 = 0xFC;                                        \
    107              RFC_OBS_CTRL1 = 0x09; /* 9 - sniff clk */              \
    108              RFC_OBS_CTRL2 = 0x08; /* 8 - sniff data */             \
    109              MDMTEST1 |= 0x04;                                      \
    110            )
    111          
    112            // This only work with the CC253x chips
    113            #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() st        \
    114            (                                                                                                                                                                                                                                   \
    115              OBSSEL3 &= ~0x80;                                                                                                                                                                             \
    116              OBSSEL4 &= ~0x80;                                                                                                                                                                             \
    117              RFC_OBS_CTRL1 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[1] */                                                                                   \
    118              RFC_OBS_CTRL2 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[2] */                                                                                   \
    119              MDMTEST1 &= ~0x04;                                                                                                                                                         \
    120            )
    121          #else
    122            #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
    123            #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
    124          #endif
    125          #endif // MT_SYS_SNIFFER_FEATURE
    126          
    127          #define RESET_HARD     0
    128          #define RESET_SOFT     1
    129          #define RESET_SHUTDOWN 2
    130          
    131          /***************************************************************************************************
    132           * CONSTANTS
    133           ***************************************************************************************************/
    134          
    135          #if !defined MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
    136          #define MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA  FALSE
    137          #endif
    138          

   \                                 In  segment XDATA_ROM_C, align 1
    139          const uint16 MT_SysOsalEventId [] = {
   \                     MT_SysOsalEventId:
   \   000000   0008         DW 2048
   \   000002   0004         DW 1024
   \   000004   0002         DW 512
   \   000006   0001         DW 256
    140                                                MT_SYS_OSAL_EVENT_0,
    141                                                MT_SYS_OSAL_EVENT_1,
    142                                                MT_SYS_OSAL_EVENT_2,
    143                                                MT_SYS_OSAL_EVENT_3
    144                                              };
    145          
    146          typedef enum {
    147            GPIO_DIR,
    148            GPIO_TRI,
    149            GPIO_SET,
    150            GPIO_CLR,
    151            GPIO_TOG,
    152            GPIO_GET,
    153            GPIO_HiD = 0x12
    154          } GPIO_Op_t;
    155          
    156          #if defined ( MT_SYS_JAMMER_FEATURE )
    157            #define JAMMER_CHECK_EVT                           0x0001
    158          
    159            #if !defined ( JAMMER_DETECT_CONTINUOUS_EVENTS )
    160              #define JAMMER_DETECT_CONTINUOUS_EVENTS          150
    161            #endif
    162            #if !defined ( JAMMER_DETECT_PERIOD_TIME )
    163              #define JAMMER_DETECT_PERIOD_TIME                100  // In milliseconds
    164            #endif
    165            #if !defined ( JAMMER_HIGH_NOISE_LEVEL )
    166              #define JAMMER_HIGH_NOISE_LEVEL                  -65
    167            #endif
    168          #endif // MT_SYS_JAMMER_FEATURE
    169          
    170          /***************************************************************************************************
    171           * LOCAL VARIABLES
    172           ***************************************************************************************************/
    173          #if defined ( MT_SYS_JAMMER_FEATURE )
    174            static uint8 jammerTaskID;
    175            static uint16 jammerContinuousEvents = JAMMER_DETECT_CONTINUOUS_EVENTS;
    176            static uint16 jammerDetections = JAMMER_DETECT_CONTINUOUS_EVENTS;
    177            static int8 jammerHighNoiseLevel = JAMMER_HIGH_NOISE_LEVEL;
    178            static uint32 jammerDetectPeriodTime = JAMMER_DETECT_PERIOD_TIME;
    179          #endif 
    180            
    181          #if defined ( MT_SYS_SNIFFER_FEATURE )
    182          static uint8 sniffer = FALSE;
    183          #endif
    184          
    185          /***************************************************************************************************
    186           * LOCAL FUNCTIONS
    187           ***************************************************************************************************/
    188          #if defined (MT_SYS_FUNC)
    189          void MT_SysReset(uint8 *pBuf);
    190          void MT_SysPing(void);
    191          void MT_SysVersion(void);
    192          void MT_SysSetExtAddr(uint8 *pBuf);
    193          void MT_SysGetExtAddr(void);
    194          void MT_SysOsalNVItemInit(uint8 *pBuf);
    195          void MT_SysOsalNVDelete(uint8 *pBuf);
    196          void MT_SysOsalNVLength(uint8 *pBuf);
    197          void MT_SysOsalNVRead(uint8 *pBuf);
    198          void MT_SysOsalNVWrite(uint8 *pBuf);
    199          void MT_SysOsalStartTimer(uint8 *pBuf);
    200          void MT_SysOsalStopTimer(uint8 *pBuf);
    201          void MT_SysRandom(void);
    202          void MT_SysAdcRead(uint8 *pBuf);
    203          void MT_SysGpio(uint8 *pBuf);
    204          void MT_SysStackTune(uint8 *pBuf);
    205          void MT_SysSetUtcTime(uint8 *pBuf);
    206          void MT_SysGetUtcTime(void);
    207          void MT_SysSetTxPower(uint8 *pBuf);
    208          #if defined ( MT_SYS_JAMMER_FEATURE )
    209            void MT_SysJammerParameters( uint8 *pBuf );
    210          #endif /* MT_SYS_JAMMER_FEATURE */
    211          #if defined ( MT_SYS_SNIFFER_FEATURE )
    212          void MT_SysSnifferParameters( uint8 *pBuf );
    213          #endif /* MT_SYS_SNIFFER_FEATURE */
    214          #if defined ( FEATURE_SYSTEM_STATS )
    215          void MT_SysZDiagsInitStats(void);
    216          void MT_SysZDiagsClearStats(uint8 *pBuf);
    217          void MT_SysZDiagsGetStatsAttr(uint8 *pBuf);
    218          void MT_SysZDiagsRestoreStatsFromNV(void);
    219          void MT_SysZDiagsSaveStatsToNV(void);
    220          #endif /* FEATURE_SYSTEM_STATS */
    221          #endif /* MT_SYS_FUNC */
    222          void powerOffSoc(void);
    223          //chaokw
    224          void MT_SysP2PTransfer(uint8 *pBuf);
    225          void MT_SysGroupTransfer(uint8 *pBuf);
    226          void MT_SysBroadCastTransfer(uint8 *pBuf);
    227          
    228          static void MT_SysPkgSendMsg( byte taskID, uint8 event, uint8 *pBuf, uint8 len, uint8 offset );
    229          static void MT_SysChannelUpdate( uint8 *pBuf );
    230          static void MT_SysMACReq( uint8 *pBuf );
    231          static void MT_SysNWKInfoReq( uint8 *pBuf );
    232          static void MT_SysActiveCntReq( uint8 *pBuf );
    233          static void MT_SysGetFWVersionReq( uint8 *pBuf );
    234          static void MT_SysFWUpdateReq( uint8 *pBuf );
    235          static void MT_SysMultiwaySetReq( uint8 *pBuf );
    236          static void MT_SysMultiwaySendReq( uint8 *pBuf );
    237          
    238          
    239          #if defined (MT_SYS_FUNC)
    240          /***************************************************************************************************
    241           * @fn      MT_SysProcessing
    242           *
    243           * @brief   Process all the SYS commands that are issued by test tool
    244           *
    245           * @param   pBuf - pointer to the msg buffer
    246           *
    247           *          | LEN  | CMD0  | CMD1  |  DATA  |
    248           *          |  1   |   1   |   1   |  0-255 |
    249           *
    250           * @return  status
    251           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    252          uint8 MT_SysCommandProcessing(uint8 *pBuf)
   \                     MT_SysCommandProcessing:
    253          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    254            uint8 status = MT_RPC_SUCCESS;
   \   000009   75..00       MOV     ?V0,#0x0
    255          
    256            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??MT_SysCommandProcessing_0 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??MT_SysCommandProcessing_1 & 0xFFFF
   \   00001E   14           DEC     A
   \   00001F   7003         JNZ     $+5
   \   000021   02....       LJMP    ??MT_SysCommandProcessing_2 & 0xFFFF
   \   000024   14           DEC     A
   \   000025   7003         JNZ     $+5
   \   000027   02....       LJMP    ??MT_SysCommandProcessing_3 & 0xFFFF
   \   00002A   14           DEC     A
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??MT_SysCommandProcessing_4 & 0xFFFF
   \   000030   24FD         ADD     A,#-0x3
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??MT_SysCommandProcessing_5 & 0xFFFF
   \   000037   14           DEC     A
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??MT_SysCommandProcessing_6 & 0xFFFF
   \   00003D   14           DEC     A
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??MT_SysCommandProcessing_7 & 0xFFFF
   \   000043   14           DEC     A
   \   000044   7003         JNZ     $+5
   \   000046   02....       LJMP    ??MT_SysCommandProcessing_8 & 0xFFFF
   \   000049   14           DEC     A
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??MT_SysCommandProcessing_9 & 0xFFFF
   \   00004F   14           DEC     A
   \   000050   7003         JNZ     $+5
   \   000052   02....       LJMP    ??MT_SysCommandProcessing_10 & 0xFFFF
   \   000055   14           DEC     A
   \   000056   7003         JNZ     $+5
   \   000058   02....       LJMP    ??MT_SysCommandProcessing_11 & 0xFFFF
   \   00005B   14           DEC     A
   \   00005C   7003         JNZ     $+5
   \   00005E   02....       LJMP    ??MT_SysCommandProcessing_12 & 0xFFFF
   \   000061   14           DEC     A
   \   000062   7003         JNZ     $+5
   \   000064   02....       LJMP    ??MT_SysCommandProcessing_13 & 0xFFFF
   \   000067   14           DEC     A
   \   000068   7003         JNZ     $+5
   \   00006A   02....       LJMP    ??MT_SysCommandProcessing_14 & 0xFFFF
   \   00006D   14           DEC     A
   \   00006E   7003         JNZ     $+5
   \   000070   02....       LJMP    ??MT_SysCommandProcessing_15 & 0xFFFF
   \   000073   14           DEC     A
   \   000074   7003         JNZ     $+5
   \   000076   02....       LJMP    ??MT_SysCommandProcessing_16 & 0xFFFF
   \   000079   14           DEC     A
   \   00007A   7003         JNZ     $+5
   \   00007C   02....       LJMP    ??MT_SysCommandProcessing_17 & 0xFFFF
   \   00007F   14           DEC     A
   \   000080   7003         JNZ     $+5
   \   000082   02....       LJMP    ??MT_SysCommandProcessing_18 & 0xFFFF
   \   000085   24F8         ADD     A,#-0x8
   \   000087   7003         JNZ     $+5
   \   000089   02....       LJMP    ??MT_SysCommandProcessing_19 & 0xFFFF
   \   00008C   14           DEC     A
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??MT_SysCommandProcessing_20 & 0xFFFF
   \   000092   24FD         ADD     A,#-0x3
   \   000094   7003         JNZ     $+5
   \   000096   02....       LJMP    ??MT_SysCommandProcessing_21 & 0xFFFF
   \   000099   24FE         ADD     A,#-0x2
   \   00009B   7003         JNZ     $+5
   \   00009D   02....       LJMP    ??MT_SysCommandProcessing_22 & 0xFFFF
   \   0000A0   14           DEC     A
   \   0000A1   7003         JNZ     $+5
   \   0000A3   02....       LJMP    ??MT_SysCommandProcessing_23 & 0xFFFF
   \   0000A6   24F3         ADD     A,#-0xd
   \   0000A8   7003         JNZ     $+5
   \   0000AA   02....       LJMP    ??MT_SysCommandProcessing_24 & 0xFFFF
   \   0000AD   14           DEC     A
   \   0000AE   7003         JNZ     $+5
   \   0000B0   02....       LJMP    ??MT_SysCommandProcessing_24 & 0xFFFF
   \   0000B3   14           DEC     A
   \   0000B4   7003         JNZ     $+5
   \   0000B6   02....       LJMP    ??MT_SysCommandProcessing_24 & 0xFFFF
   \   0000B9   14           DEC     A
   \   0000BA   7003         JNZ     $+5
   \   0000BC   02....       LJMP    ??MT_SysCommandProcessing_24 & 0xFFFF
   \   0000BF   14           DEC     A
   \   0000C0   7003         JNZ     $+5
   \   0000C2   02....       LJMP    ??MT_SysCommandProcessing_25 & 0xFFFF
   \   0000C5   14           DEC     A
   \   0000C6   7003         JNZ     $+5
   \   0000C8   02....       LJMP    ??MT_SysCommandProcessing_26 & 0xFFFF
   \   0000CB   14           DEC     A
   \   0000CC   7003         JNZ     $+5
   \   0000CE   02....       LJMP    ??MT_SysCommandProcessing_27 & 0xFFFF
   \   0000D1   14           DEC     A
   \   0000D2   7003         JNZ     $+5
   \   0000D4   02....       LJMP    ??MT_SysCommandProcessing_28 & 0xFFFF
   \   0000D7   14           DEC     A
   \   0000D8   7003         JNZ     $+5
   \   0000DA   02....       LJMP    ??MT_SysCommandProcessing_24 & 0xFFFF
   \   0000DD   24F8         ADD     A,#-0x8
   \   0000DF   7003         JNZ     $+5
   \   0000E1   02....       LJMP    ??MT_SysCommandProcessing_24 & 0xFFFF
   \   0000E4   14           DEC     A
   \   0000E5   7003         JNZ     $+5
   \   0000E7   02....       LJMP    ??MT_SysCommandProcessing_29 & 0xFFFF
   \   0000EA   14           DEC     A
   \   0000EB   7003         JNZ     $+5
   \   0000ED   02....       LJMP    ??MT_SysCommandProcessing_30 & 0xFFFF
   \   0000F0   14           DEC     A
   \   0000F1   7003         JNZ     $+5
   \   0000F3   02....       LJMP    ??MT_SysCommandProcessing_31 & 0xFFFF
   \   0000F6   24B3         ADD     A,#-0x4d
   \   0000F8   7003         JNZ     $+5
   \   0000FA   02....       LJMP    ??MT_SysCommandProcessing_32 & 0xFFFF
   \   0000FD   02....       LJMP    ??MT_SysCommandProcessing_33 & 0xFFFF
    257            {
    258              case MT_SYS_RESET_REQ:
    259                MT_SysReset(pBuf);
   \                     ??MT_SysCommandProcessing_0:
   \   000100                ; Setup parameters for call to function MT_SysReset
   \   000100   EE           MOV     A,R6
   \   000101   FA           MOV     R2,A
   \   000102   EF           MOV     A,R7
   \   000103   FB           MOV     R3,A
   \   000104   12....       LCALL   `??MT_SysReset::?relay`; Banked call to: MT_SysReset
    260                break;
   \   000107   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    261          
    262              case MT_SYS_PING:
    263                MT_SysPing();
   \                     ??MT_SysCommandProcessing_1:
   \   00010A                ; Setup parameters for call to function MT_SysPing
   \   00010A   12....       LCALL   `??MT_SysPing::?relay`; Banked call to: MT_SysPing
    264                break;
   \   00010D   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    265          
    266              case MT_SYS_VERSION:
    267                MT_SysVersion();
   \                     ??MT_SysCommandProcessing_2:
   \   000110                ; Setup parameters for call to function MT_SysVersion
   \   000110   12....       LCALL   `??MT_SysVersion::?relay`; Banked call to: MT_SysVersion
    268                break;
   \   000113   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    269          
    270              case MT_SYS_SET_EXTADDR:
    271                MT_SysSetExtAddr(pBuf);
   \                     ??MT_SysCommandProcessing_3:
   \   000116                ; Setup parameters for call to function MT_SysSetExtAddr
   \   000116   EE           MOV     A,R6
   \   000117   FA           MOV     R2,A
   \   000118   EF           MOV     A,R7
   \   000119   FB           MOV     R3,A
   \   00011A   12....       LCALL   `??MT_SysSetExtAddr::?relay`; Banked call to: MT_SysSetExtAddr
    272                break;
   \   00011D   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    273          
    274              case MT_SYS_GET_EXTADDR:
    275                MT_SysGetExtAddr();
   \                     ??MT_SysCommandProcessing_4:
   \   000120                ; Setup parameters for call to function MT_SysGetExtAddr
   \   000120   12....       LCALL   `??MT_SysGetExtAddr::?relay`; Banked call to: MT_SysGetExtAddr
    276                break;
   \   000123   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    277          
    278          // CC253X MAC Network Processor does not have NV support
    279          #if !defined(CC253X_MACNP)
    280              case MT_SYS_OSAL_NV_DELETE:
    281                MT_SysOsalNVDelete(pBuf);
   \                     ??MT_SysCommandProcessing_16:
   \   000126                ; Setup parameters for call to function MT_SysOsalNVDelete
   \   000126   EE           MOV     A,R6
   \   000127   FA           MOV     R2,A
   \   000128   EF           MOV     A,R7
   \   000129   FB           MOV     R3,A
   \   00012A   12....       LCALL   `??MT_SysOsalNVDelete::?relay`; Banked call to: MT_SysOsalNVDelete
    282                break;
   \   00012D   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    283          
    284              case MT_SYS_OSAL_NV_ITEM_INIT:
    285                MT_SysOsalNVItemInit(pBuf);
   \                     ??MT_SysCommandProcessing_5:
   \   000130                ; Setup parameters for call to function MT_SysOsalNVItemInit
   \   000130   EE           MOV     A,R6
   \   000131   FA           MOV     R2,A
   \   000132   EF           MOV     A,R7
   \   000133   FB           MOV     R3,A
   \   000134   12....       LCALL   `??MT_SysOsalNVItemInit::?relay`; Banked call to: MT_SysOsalNVItemInit
    286                break;
   \   000137   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    287          
    288              case MT_SYS_OSAL_NV_LENGTH:
    289                MT_SysOsalNVLength(pBuf);
   \                     ??MT_SysCommandProcessing_17:
   \   00013A                ; Setup parameters for call to function MT_SysOsalNVLength
   \   00013A   EE           MOV     A,R6
   \   00013B   FA           MOV     R2,A
   \   00013C   EF           MOV     A,R7
   \   00013D   FB           MOV     R3,A
   \   00013E   12....       LCALL   `??MT_SysOsalNVLength::?relay`; Banked call to: MT_SysOsalNVLength
    290                break;
   \   000141   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    291          
    292              case MT_SYS_OSAL_NV_READ:
    293                MT_SysOsalNVRead(pBuf);
   \                     ??MT_SysCommandProcessing_6:
   \   000144                ; Setup parameters for call to function MT_SysOsalNVRead
   \   000144   EE           MOV     A,R6
   \   000145   FA           MOV     R2,A
   \   000146   EF           MOV     A,R7
   \   000147   FB           MOV     R3,A
   \   000148   12....       LCALL   `??MT_SysOsalNVRead::?relay`; Banked call to: MT_SysOsalNVRead
    294                break;
   \   00014B   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    295          
    296              case MT_SYS_OSAL_NV_WRITE:
    297                MT_SysOsalNVWrite(pBuf);
   \                     ??MT_SysCommandProcessing_7:
   \   00014E                ; Setup parameters for call to function MT_SysOsalNVWrite
   \   00014E   EE           MOV     A,R6
   \   00014F   FA           MOV     R2,A
   \   000150   EF           MOV     A,R7
   \   000151   FB           MOV     R3,A
   \   000152   12....       LCALL   `??MT_SysOsalNVWrite::?relay`; Banked call to: MT_SysOsalNVWrite
    298                break;
   \   000155   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    299          
    300              case MT_SYS_OSAL_NV_READ_EXT:
    301                MT_SysOsalNVRead(pBuf);
   \                     ??MT_SysCommandProcessing_19:
   \   000158                ; Setup parameters for call to function MT_SysOsalNVRead
   \   000158   EE           MOV     A,R6
   \   000159   FA           MOV     R2,A
   \   00015A   EF           MOV     A,R7
   \   00015B   FB           MOV     R3,A
   \   00015C   12....       LCALL   `??MT_SysOsalNVRead::?relay`; Banked call to: MT_SysOsalNVRead
    302                break;
   \   00015F   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    303                
    304              case MT_SYS_OSAL_NV_WRITE_EXT:
    305                MT_SysOsalNVWrite(pBuf);
   \                     ??MT_SysCommandProcessing_20:
   \   000162                ; Setup parameters for call to function MT_SysOsalNVWrite
   \   000162   EE           MOV     A,R6
   \   000163   FA           MOV     R2,A
   \   000164   EF           MOV     A,R7
   \   000165   FB           MOV     R3,A
   \   000166   12....       LCALL   `??MT_SysOsalNVWrite::?relay`; Banked call to: MT_SysOsalNVWrite
    306                break;
   \   000169   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    307          #endif
    308          
    309              case MT_SYS_OSAL_START_TIMER:
    310                MT_SysOsalStartTimer(pBuf);
   \                     ??MT_SysCommandProcessing_8:
   \   00016C                ; Setup parameters for call to function MT_SysOsalStartTimer
   \   00016C   EE           MOV     A,R6
   \   00016D   FA           MOV     R2,A
   \   00016E   EF           MOV     A,R7
   \   00016F   FB           MOV     R3,A
   \   000170   12....       LCALL   `??MT_SysOsalStartTimer::?relay`; Banked call to: MT_SysOsalStartTimer
    311                break;
   \   000173   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    312          
    313              case MT_SYS_OSAL_STOP_TIMER:
    314                MT_SysOsalStopTimer(pBuf);
   \                     ??MT_SysCommandProcessing_9:
   \   000176                ; Setup parameters for call to function MT_SysOsalStopTimer
   \   000176   EE           MOV     A,R6
   \   000177   FA           MOV     R2,A
   \   000178   EF           MOV     A,R7
   \   000179   FB           MOV     R3,A
   \   00017A   12....       LCALL   `??MT_SysOsalStopTimer::?relay`; Banked call to: MT_SysOsalStopTimer
    315                break;
   \   00017D   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    316          
    317              case MT_SYS_RANDOM:
    318                MT_SysRandom();
   \                     ??MT_SysCommandProcessing_10:
   \   000180                ; Setup parameters for call to function MT_SysRandom
   \   000180   12....       LCALL   `??MT_SysRandom::?relay`; Banked call to: MT_SysRandom
    319                break;
   \   000183   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    320          
    321              case MT_SYS_ADC_READ:
    322                MT_SysAdcRead(pBuf);
   \                     ??MT_SysCommandProcessing_11:
   \   000186                ; Setup parameters for call to function MT_SysAdcRead
   \   000186   EE           MOV     A,R6
   \   000187   FA           MOV     R2,A
   \   000188   EF           MOV     A,R7
   \   000189   FB           MOV     R3,A
   \   00018A   12....       LCALL   `??MT_SysAdcRead::?relay`; Banked call to: MT_SysAdcRead
    323                break;
   \   00018D   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    324          
    325              case MT_SYS_GPIO:
    326                MT_SysGpio(pBuf);
   \                     ??MT_SysCommandProcessing_12:
   \   000190                ; Setup parameters for call to function MT_SysGpio
   \   000190   EE           MOV     A,R6
   \   000191   FA           MOV     R2,A
   \   000192   EF           MOV     A,R7
   \   000193   FB           MOV     R3,A
   \   000194   12....       LCALL   `??MT_SysGpio::?relay`; Banked call to: MT_SysGpio
    327                break;
   \   000197   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    328          
    329              case MT_SYS_STACK_TUNE:
    330                MT_SysStackTune(pBuf);
   \                     ??MT_SysCommandProcessing_13:
   \   00019A                ; Setup parameters for call to function MT_SysStackTune
   \   00019A   EE           MOV     A,R6
   \   00019B   FA           MOV     R2,A
   \   00019C   EF           MOV     A,R7
   \   00019D   FB           MOV     R3,A
   \   00019E   12....       LCALL   `??MT_SysStackTune::?relay`; Banked call to: MT_SysStackTune
    331                break;
   \   0001A1   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    332          
    333              case MT_SYS_SET_TIME:
    334                MT_SysSetUtcTime(pBuf);
   \                     ??MT_SysCommandProcessing_14:
   \   0001A4                ; Setup parameters for call to function MT_SysSetUtcTime
   \   0001A4   EE           MOV     A,R6
   \   0001A5   FA           MOV     R2,A
   \   0001A6   EF           MOV     A,R7
   \   0001A7   FB           MOV     R3,A
   \   0001A8   12....       LCALL   `??MT_SysSetUtcTime::?relay`; Banked call to: MT_SysSetUtcTime
    335                break;
   \   0001AB   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    336          
    337              case MT_SYS_GET_TIME:
    338                MT_SysGetUtcTime();
   \                     ??MT_SysCommandProcessing_15:
   \   0001AE                ; Setup parameters for call to function MT_SysGetUtcTime
   \   0001AE   12....       LCALL   `??MT_SysGetUtcTime::?relay`; Banked call to: MT_SysGetUtcTime
    339                break;
   \   0001B1   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    340          
    341              case MT_SYS_SET_TX_POWER:
    342                MT_SysSetTxPower(pBuf);
   \                     ??MT_SysCommandProcessing_18:
   \   0001B4                ; Setup parameters for call to function MT_SysSetTxPower
   \   0001B4   EE           MOV     A,R6
   \   0001B5   FA           MOV     R2,A
   \   0001B6   EF           MOV     A,R7
   \   0001B7   FB           MOV     R3,A
   \   0001B8   12....       LCALL   `??MT_SysSetTxPower::?relay`; Banked call to: MT_SysSetTxPower
    343                break;
   \   0001BB   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    344                
    345          #if defined ( MT_SYS_JAMMER_FEATURE )
    346              case MT_SYS_JAMMER_PARAMETERS:
    347                MT_SysJammerParameters( pBuf );
    348                break;
    349          #endif      
    350          
    351          #if defined ( MT_SYS_SNIFFER_FEATURE )
    352              case MT_SYS_SNIFFER_PARAMETERS:
    353                MT_SysSnifferParameters( pBuf );
    354                break;
    355          #endif      
    356          
    357          #if defined ( FEATURE_SYSTEM_STATS )
    358              case MT_SYS_ZDIAGS_INIT_STATS:
    359                MT_SysZDiagsInitStats();
    360                break;
    361          
    362              case MT_SYS_ZDIAGS_CLEAR_STATS:
    363                MT_SysZDiagsClearStats(pBuf);
    364                break;
    365          
    366              case MT_SYS_ZDIAGS_GET_STATS:
    367                MT_SysZDiagsGetStatsAttr(pBuf);
    368                 break;
    369          
    370              case MT_SYS_ZDIAGS_RESTORE_STATS_NV:
    371                MT_SysZDiagsRestoreStatsFromNV();
    372                break;
    373          
    374              case MT_SYS_ZDIAGS_SAVE_STATS_TO_NV:
    375                MT_SysZDiagsSaveStatsToNV();
    376                break;
    377          #endif /* FEATURE_SYSTEM_STATS */
    378          
    379          //chaokw
    380              case MT_SYS_P2P_TRANSFER:
    381                MT_SysP2PTransfer(pBuf);
   \                     ??MT_SysCommandProcessing_21:
   \   0001BE                ; Setup parameters for call to function MT_SysP2PTransfer
   \   0001BE   EE           MOV     A,R6
   \   0001BF   FA           MOV     R2,A
   \   0001C0   EF           MOV     A,R7
   \   0001C1   FB           MOV     R3,A
   \   0001C2   12....       LCALL   `??MT_SysP2PTransfer::?relay`; Banked call to: MT_SysP2PTransfer
    382                break;
   \   0001C5   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    383              case MT_SYS_GROUP_TRANSFER:
    384                MT_SysGroupTransfer(pBuf);
   \                     ??MT_SysCommandProcessing_22:
   \   0001C8                ; Setup parameters for call to function MT_SysGroupTransfer
   \   0001C8   EE           MOV     A,R6
   \   0001C9   FA           MOV     R2,A
   \   0001CA   EF           MOV     A,R7
   \   0001CB   FB           MOV     R3,A
   \   0001CC   12....       LCALL   `??MT_SysGroupTransfer::?relay`; Banked call to: MT_SysGroupTransfer
    385                break;
   \   0001CF   02....       LJMP    ??MT_SysCommandProcessing_34 & 0xFFFF
    386              case MT_SYS_BROADCAST_TRANSFER:
    387                MT_SysBroadCastTransfer(pBuf);
   \                     ??MT_SysCommandProcessing_23:
   \   0001D2                ; Setup parameters for call to function MT_SysBroadCastTransfer
   \   0001D2   EE           MOV     A,R6
   \   0001D3   FA           MOV     R2,A
   \   0001D4   EF           MOV     A,R7
   \   0001D5   FB           MOV     R3,A
   \   0001D6   12....       LCALL   `??MT_SysBroadCastTransfer::?relay`; Banked call to: MT_SysBroadCastTransfer
    388                break;
   \   0001D9   8079         SJMP    ??MT_SysCommandProcessing_34
    389          
    390              case MT_SYS_CHANNEL_UPDATE:
    391                MT_SysChannelUpdate( pBuf );
   \                     ??MT_SysCommandProcessing_25:
   \   0001DB                ; Setup parameters for call to function MT_SysChannelUpdate
   \   0001DB   EE           MOV     A,R6
   \   0001DC   FA           MOV     R2,A
   \   0001DD   EF           MOV     A,R7
   \   0001DE   FB           MOV     R3,A
   \   0001DF   12....       LCALL   `??MT_SysChannelUpdate::?relay`; Banked call to: MT_SysChannelUpdate
    392                break;
   \   0001E2   8070         SJMP    ??MT_SysCommandProcessing_34
    393          
    394              case MT_SYS_MAC_REQ:
    395                MT_SysMACReq( pBuf );
   \                     ??MT_SysCommandProcessing_26:
   \   0001E4                ; Setup parameters for call to function MT_SysMACReq
   \   0001E4   EE           MOV     A,R6
   \   0001E5   FA           MOV     R2,A
   \   0001E6   EF           MOV     A,R7
   \   0001E7   FB           MOV     R3,A
   \   0001E8   12....       LCALL   `??MT_SysMACReq::?relay`; Banked call to: MT_SysMACReq
    396                break;
   \   0001EB   8067         SJMP    ??MT_SysCommandProcessing_34
    397          
    398              case MT_SYS_ACTIVE_CNT_REQ:
    399                MT_SysActiveCntReq( pBuf );
   \                     ??MT_SysCommandProcessing_29:
   \   0001ED                ; Setup parameters for call to function MT_SysActiveCntReq
   \   0001ED   EE           MOV     A,R6
   \   0001EE   FA           MOV     R2,A
   \   0001EF   EF           MOV     A,R7
   \   0001F0   FB           MOV     R3,A
   \   0001F1   12....       LCALL   `??MT_SysActiveCntReq::?relay`; Banked call to: MT_SysActiveCntReq
    400                break;
   \   0001F4   805E         SJMP    ??MT_SysCommandProcessing_34
    401          
    402              case MT_SYS_FW_VERSION_REQ:
    403                MT_SysGetFWVersionReq( pBuf );
   \                     ??MT_SysCommandProcessing_27:
   \   0001F6                ; Setup parameters for call to function MT_SysGetFWVersionReq
   \   0001F6   EE           MOV     A,R6
   \   0001F7   FA           MOV     R2,A
   \   0001F8   EF           MOV     A,R7
   \   0001F9   FB           MOV     R3,A
   \   0001FA   12....       LCALL   `??MT_SysGetFWVersionReq::?relay`; Banked call to: MT_SysGetFWVersionReq
    404                break;
   \   0001FD   8055         SJMP    ??MT_SysCommandProcessing_34
    405          
    406              case MT_SYS_FW_UPDATE_REQ:
    407                MT_SysFWUpdateReq( pBuf );
   \                     ??MT_SysCommandProcessing_28:
   \   0001FF                ; Setup parameters for call to function MT_SysFWUpdateReq
   \   0001FF   EE           MOV     A,R6
   \   000200   FA           MOV     R2,A
   \   000201   EF           MOV     A,R7
   \   000202   FB           MOV     R3,A
   \   000203   12....       LCALL   `??MT_SysFWUpdateReq::?relay`; Banked call to: MT_SysFWUpdateReq
    408                break;
   \   000206   804C         SJMP    ??MT_SysCommandProcessing_34
    409          
    410              case MT_SYS_MULTIWAY_SET_REQ:
    411                MT_SysMultiwaySetReq( pBuf );
   \                     ??MT_SysCommandProcessing_30:
   \   000208                ; Setup parameters for call to function MT_SysMultiwaySetReq
   \   000208   EE           MOV     A,R6
   \   000209   FA           MOV     R2,A
   \   00020A   EF           MOV     A,R7
   \   00020B   FB           MOV     R3,A
   \   00020C   12....       LCALL   `??MT_SysMultiwaySetReq::?relay`; Banked call to: MT_SysMultiwaySetReq
    412                break;
   \   00020F   8043         SJMP    ??MT_SysCommandProcessing_34
    413          
    414              case MT_SYS_MULTIWAY_SEND_REQ:
    415                MT_SysMultiwaySendReq( pBuf );
   \                     ??MT_SysCommandProcessing_31:
   \   000211                ; Setup parameters for call to function MT_SysMultiwaySendReq
   \   000211   EE           MOV     A,R6
   \   000212   FA           MOV     R2,A
   \   000213   EF           MOV     A,R7
   \   000214   FB           MOV     R3,A
   \   000215   12....       LCALL   `??MT_SysMultiwaySendReq::?relay`; Banked call to: MT_SysMultiwaySendReq
    416                break;		
   \   000218   803A         SJMP    ??MT_SysCommandProcessing_34
    417          
    418              case NODE_AUTH_MSG_CMD_ADD:
    419              case NODE_AUTH_MSG_CMD_COUNT:
    420              case NODE_AUTH_MSG_CMD_GET:
    421              case NODE_AUTH_MSG_CMD_DEL:
    422              case NODE_AUTH_MSG_CMD_WIPE:
    423              case NODE_AUTH_MSG_CMD_RESET_NET:
    424                Node_auth_uart_msg_process(0, 
    425                      pBuf[MT_RPC_POS_CMD0], 
    426                      pBuf[MT_RPC_POS_CMD1], 
    427                      &pBuf[MT_RPC_POS_DAT0],
    428                      pBuf[MT_RPC_POS_LEN]);
   \                     ??MT_SysCommandProcessing_24:
   \   00021A                ; Setup parameters for call to function Node_auth_uart_msg_process
   \   00021A   8E82         MOV     DPL,R6
   \   00021C   8F83         MOV     DPH,R7
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   F5..         MOV     ?V1,A
   \   000221   78..         MOV     R0,#?V1
   \   000223   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000226   EE           MOV     A,R6
   \   000227   2403         ADD     A,#0x3
   \   000229   FC           MOV     R4,A
   \   00022A   E4           CLR     A
   \   00022B   3F           ADDC    A,R7
   \   00022C   FD           MOV     R5,A
   \   00022D   8E82         MOV     DPL,R6
   \   00022F   8F83         MOV     DPH,R7
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   E0           MOVX    A,@DPTR
   \   000234   FB           MOV     R3,A
   \   000235   8E82         MOV     DPL,R6
   \   000237   8F83         MOV     DPH,R7
   \   000239   A3           INC     DPTR
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   FA           MOV     R2,A
   \   00023C   7900         MOV     R1,#0x0
   \   00023E   12....       LCALL   `??Node_auth_uart_msg_process::?relay`; Banked call to: Node_auth_uart_msg_process
   \   000241   7401         MOV     A,#0x1
   \   000243   12....       LCALL   ?DEALLOC_XSTACK8
    429                break;
   \   000246   800C         SJMP    ??MT_SysCommandProcessing_34
    430          
    431              case MT_SYS_NWKINFO_REQ:
    432                MT_SysNWKInfoReq( pBuf );
   \                     ??MT_SysCommandProcessing_32:
   \   000248                ; Setup parameters for call to function MT_SysNWKInfoReq
   \   000248   EE           MOV     A,R6
   \   000249   FA           MOV     R2,A
   \   00024A   EF           MOV     A,R7
   \   00024B   FB           MOV     R3,A
   \   00024C   12....       LCALL   `??MT_SysNWKInfoReq::?relay`; Banked call to: MT_SysNWKInfoReq
    433                break;
   \   00024F   8003         SJMP    ??MT_SysCommandProcessing_34
    434          
    435              default:
    436                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_SysCommandProcessing_33:
   \   000251   75..02       MOV     ?V0,#0x2
    437                break;
    438            }
    439          
    440            return status;
   \                     ??MT_SysCommandProcessing_34:
   \   000254   A9..         MOV     R1,?V0
   \   000256   7F02         MOV     R7,#0x2
   \   000258   02....       LJMP    ?BANKED_LEAVE_XDATA
    441          }
    442          
    443          /**************************************************************************************************
    444           * @fn      MT_SysReset
    445           *
    446           * @brief   Reset the device.
    447           * @param   typID: 0=reset, 1=serial bootloader, 
    448           *
    449           * @return  None
    450           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    451          void MT_SysReset( uint8 *pBuf )
   \                     MT_SysReset:
    452          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    453            switch( pBuf[MT_RPC_POS_DAT0] )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   600B         JZ      ??MT_SysReset_0
   \   000013   14           DEC     A
   \   000014   6014         JZ      ??MT_SysReset_1
   \   000016   14           DEC     A
   \   000017   6016         JZ      ??MT_SysReset_2
   \   000019   14           DEC     A
   \   00001A   6018         JZ      ??MT_SysReset_3
   \   00001C   8019         SJMP    ??MT_SysReset_4
    454            {
    455              case MT_SYS_RESET_HARD:
    456                SystemReset();
   \                     ??MT_SysReset_0:
   \   00001E   C2AF         CLR     0xa8.7
   \   000020   C2AF         CLR     0xa8.7
   \   000022   75C9AB       MOV     0xc9,#-0x55
   \   000025   75C95B       MOV     0xc9,#0x5b
   \                     ??MT_SysReset_5:
   \   000028   80FE         SJMP    ??MT_SysReset_5
    457                break;
    458                
    459              case MT_SYS_RESET_SOFT:
    460          #if !(defined(HAL_BOARD_F2618) || defined(HAL_BOARD_F5438) || defined(HAL_BOARD_LM3S))
    461                SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
   \                     ??MT_SysReset_1:
   \   00002A                ; Setup parameters for call to function Onboard_soft_reset
   \   00002A   12....       LCALL   Onboard_soft_reset & 0xFFFF
    462          #endif
    463                break;
   \   00002D   8008         SJMP    ??MT_SysReset_4
    464                
    465              case MT_SYS_RESET_SHUTDOWN:
    466                {
    467                  // Disable interrupts and put into deep sleep, use hardware reset to wakeup
    468                  powerOffSoc();
   \                     ??MT_SysReset_2:
   \   00002F                ; Setup parameters for call to function powerOffSoc
   \   00002F   12....       LCALL   `??powerOffSoc::?relay`; Banked call to: powerOffSoc
    469                }
    470                break;
   \   000032   8003         SJMP    ??MT_SysReset_4
    471          
    472              case MT_SYS_RESET_CLEAR_NV:
    473          #if defined ( NV_RESTORE )		
    474                NLME_InitNV();
    475                NLME_SetDefaultNV();
    476                ZDSecMgrClearNVKeyValues();
    477          #endif	  
    478                Onboard_soft_reset();
   \                     ??MT_SysReset_3:
   \   000034                ; Setup parameters for call to function Onboard_soft_reset
   \   000034   12....       LCALL   Onboard_soft_reset & 0xFFFF
    479                break;  
    480            }
    481          
    482          }
   \                     ??MT_SysReset_4:
   \   000037   7F01         MOV     R7,#0x1
   \   000039   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00003C                REQUIRE _A_IEN0
   \   00003C                REQUIRE WDCTL
    483          
    484          /***************************************************************************************************
    485           * @fn      MT_SysPing
    486           *
    487           * @brief   Process the Ping command
    488           *
    489           * @param   None
    490           *
    491           * @return  None
    492           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    493          void MT_SysPing(void)
   \                     MT_SysPing:
    494          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    495            uint16 tmp16;
    496            uint8 retArray[2];
    497          
    498            /* Build Capabilities */
    499            tmp16 = MT_CAP_SYS | MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF | MT_CAP_ZDO |
    500                    MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG | MT_CAP_APP | MT_CAP_GP | MT_CAP_ZOAD;
   \   00000A   7E11         MOV     R6,#0x11
   \   00000C   7F00         MOV     R7,#0x0
    501          
    502            /* Convert to high byte first into temp buffer */
    503            retArray[0] = LO_UINT16( tmp16 );
   \   00000E   EE           MOV     A,R6
   \   00000F   C0E0         PUSH    A
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   D0E0         POP     A
   \   000019   F0           MOVX    @DPTR,A
    504            retArray[1] = HI_UINT16( tmp16 );
   \   00001A   EE           MOV     A,R6
   \   00001B   F8           MOV     R0,A
   \   00001C   EF           MOV     A,R7
   \   00001D   F9           MOV     R1,A
   \   00001E   E4           CLR     A
   \   00001F   C9           XCH     A,R1
   \   000020   F8           MOV     R0,A
   \   000021   E8           MOV     A,R0
   \   000022   C0E0         PUSH    A
   \   000024   7401         MOV     A,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   D0E0         POP     A
   \   00002B   F0           MOVX    @DPTR,A
    505          
    506            /* Build and send back the response */
    507            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_PING,
    508                                          sizeof (tmp16), retArray );
   \   00002C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00002C   AC..         MOV     R4,?XSP + 0
   \   00002E   AD..         MOV     R5,?XSP + 1
   \   000030   7B02         MOV     R3,#0x2
   \   000032   7A01         MOV     R2,#0x1
   \   000034   7961         MOV     R1,#0x61
   \   000036   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    509          }
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003E   7F01         MOV     R7,#0x1
   \   000040   02....       LJMP    ?BANKED_LEAVE_XDATA
    510          
    511          /***************************************************************************************************
    512           * @fn      MT_SysVersion
    513           *
    514           * @brief   Process the Version command
    515           *
    516           * @param   None
    517           *
    518           * @return  None
    519           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    520          void MT_SysVersion(void)
   \                     MT_SysVersion:
    521          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    522          #if !defined INCLUDE_REVISION_INFORMATION
    523            /* Build and send back the response */
    524            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
    525                                         sizeof(MTVersionString), (uint8 *)MTVersionString);
   \   000004                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000004   7C..         MOV     R4,#MTVersionString & 0xff
   \   000006   7D..         MOV     R5,#(MTVersionString >> 8) & 0xff
   \   000008   7B05         MOV     R3,#0x5
   \   00000A   7A02         MOV     R2,#0x2
   \   00000C   7961         MOV     R1,#0x61
   \   00000E   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    526          
    527          #else
    528            uint8 verStr[sizeof(MTVersionString) + 4];
    529            uint8 *pBuf = &verStr[sizeof(MTVersionString)];
    530            
    531          #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
    532            uint32 sblSig;
    533            uint32 sblRev;
    534          #endif
    535          
    536            osal_memcpy(verStr, (uint8 *)MTVersionString, sizeof(MTVersionString));
    537          
    538          #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
    539            HalFlashRead(SBL_SIG_ADDR / HAL_FLASH_PAGE_SIZE,
    540                         SBL_SIG_ADDR % HAL_FLASH_PAGE_SIZE,
    541                         (uint8 *)&sblSig, sizeof(sblSig));
    542          
    543            if (sblSig == SBL_SIGNATURE)
    544            {
    545              // SBL is supported and its revision is provided (in a known flash location)
    546              HalFlashRead(SBL_REV_ADDR / HAL_FLASH_PAGE_SIZE,
    547                           SBL_REV_ADDR % HAL_FLASH_PAGE_SIZE,
    548                           (uint8 *)&sblRev, sizeof(sblRev));
    549            }
    550            else
    551            {
    552              //  SBL is supported but its revision is not provided
    553              sblRev = 0x00000000;
    554            }
    555          #else
    556            // SBL is NOT supported
    557            sblRev = 0xFFFFFFFF;
    558          #endif
    559          
    560            // Plug the SBL revision indication
    561            UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,sblRev);
    562          
    563            /* Build and send back the response */
    564            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
    565                                         sizeof(verStr), verStr);
    566          
    567          #endif
    568          }
   \   000011   D083         POP     DPH
   \   000013   D082         POP     DPL
   \   000015   02....       LJMP    ?BRET
    569          
    570          /***************************************************************************************************
    571           * @fn      MT_SysSetExtAddr
    572           *
    573           * @brief   Set the Extended Address
    574           *
    575           * @param   pBuf
    576           *
    577           * @return  None
    578           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          void MT_SysSetExtAddr(uint8 *pBuf)
   \                     MT_SysSetExtAddr:
    580          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    581            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    582            uint8 cmdId;
    583          
    584            /* parse header */
    585            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   85..82       MOV     DPL,?V0
   \   00001A   85..83       MOV     DPH,?V1
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FE           MOV     R6,A
    586            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000021   E5..         MOV     A,?V0
   \   000023   2403         ADD     A,#0x3
   \   000025   F5..         MOV     ?V0,A
   \   000027   5002         JNC     ??MT_SysSetExtAddr_0
   \   000029   05..         INC     ?V1
    587          
    588            if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
   \                     ??MT_SysSetExtAddr_0:
   \   00002B                ; Setup parameters for call to function ZMacSetReq
   \   00002B   AA..         MOV     R2,?V0
   \   00002D   AB..         MOV     R3,?V1
   \   00002F   79E2         MOV     R1,#-0x1e
   \   000031   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000034   E9           MOV     A,R1
   \   000035   702C         JNZ     ??MT_SysSetExtAddr_1
    589            {
    590          // CC253X MAC Network Processor does not have NV support
    591          #if !defined(CC253X_MACNP)
    592              retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
   \   000037                ; Setup parameters for call to function osal_nv_write
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..08       MOV     ?V2,#0x8
   \   00003F   75..00       MOV     ?V3,#0x0
   \   000042   78..         MOV     R0,#?V2
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   7C00         MOV     R4,#0x0
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7A01         MOV     R2,#0x1
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   E9           MOV     A,R1
   \   000058   C0E0         PUSH    A
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   D0E0         POP     A
   \   000062   F0           MOVX    @DPTR,A
    593          #endif
    594            }
    595          
    596            /* Build and send back the response */
    597            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
   \                     ??MT_SysSetExtAddr_1:
   \   000063                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000063   AC..         MOV     R4,?XSP + 0
   \   000065   AD..         MOV     R5,?XSP + 1
   \   000067   7B01         MOV     R3,#0x1
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   7961         MOV     R1,#0x61
   \   00006D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    598          
    599          }
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
   \   000075   7F04         MOV     R7,#0x4
   \   000077   02....       LJMP    ?BANKED_LEAVE_XDATA
    600          
    601          /***************************************************************************************************
    602           * @fn      MT_SysGetExtAddr
    603           *
    604           * @brief   Get the Extended Address
    605           *
    606           * @param   None
    607           *
    608           * @return  None
    609           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    610          void MT_SysGetExtAddr(void)
   \                     MT_SysGetExtAddr:
    611          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV     A,#-0x8
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    612            uint8 extAddr[Z_EXTADDR_LEN];
    613          
    614            ZMacGetReq( ZMacExtAddr, extAddr );
   \   000009                ; Setup parameters for call to function ZMacGetReq
   \   000009   AA..         MOV     R2,?XSP + 0
   \   00000B   AB..         MOV     R3,?XSP + 1
   \   00000D   79E2         MOV     R1,#-0x1e
   \   00000F   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   000012   E9           MOV     A,R1
    615          
    616            /* Build and send back the response */
    617            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_GET_EXTADDR,
    618                                         Z_EXTADDR_LEN, extAddr);
   \   000013                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000013   AC..         MOV     R4,?XSP + 0
   \   000015   AD..         MOV     R5,?XSP + 1
   \   000017   7B08         MOV     R3,#0x8
   \   000019   7A04         MOV     R2,#0x4
   \   00001B   7961         MOV     R1,#0x61
   \   00001D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    619          }
   \   000020   7408         MOV     A,#0x8
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   D083         POP     DPH
   \   000027   D082         POP     DPL
   \   000029   02....       LJMP    ?BRET
    620          
    621          #if !defined(CC253X_MACNP)
    622          /***************************************************************************************************
    623           * @fn      MT_SysOsalNVRead
    624           *
    625           * @brief   Attempt to read an NV value
    626           *
    627           * @param   pBuf - pointer to the data
    628           *
    629           * @return  None
    630           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    631          void MT_SysOsalNVRead(uint8 *pBuf)
   \                     MT_SysOsalNVRead:
    632          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V8,R2
   \   00000C   8B..         MOV     ?V9,R3
    633            uint8 cmdId;
    634            uint16 nvId;
    635            uint16 dataLen;
    636            uint16 dataOfs;
    637            uint16 nvItemLen;
    638            uint8 error = ZSuccess;
   \   00000E   75..00       MOV     ?V0,#0x0
    639          
    640            /* MT command ID */
    641            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000011   85..82       MOV     DPL,?V8
   \   000014   85..83       MOV     DPH,?V9
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V12,A
    642            /* Skip over RPC header */
    643            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001C   E5..         MOV     A,?V8
   \   00001E   2403         ADD     A,#0x3
   \   000020   F5..         MOV     ?V8,A
   \   000022   5002         JNC     ??MT_SysOsalNVRead_0
   \   000024   05..         INC     ?V9
    644          
    645            /* NV item ID */
    646            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVRead_0:
   \   000026   85..82       MOV     DPL,?V8
   \   000029   85..83       MOV     DPH,?V9
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FA           MOV     R2,A
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   85..82       MOV     DPL,?V8
   \   000033   85..83       MOV     DPH,?V9
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   7900         MOV     R1,#0x0
   \   00003B   E4           CLR     A
   \   00003C   C8           XCH     A,R0
   \   00003D   F9           MOV     R1,A
   \   00003E   EA           MOV     A,R2
   \   00003F   28           ADD     A,R0
   \   000040   F8           MOV     R0,A
   \   000041   EB           MOV     A,R3
   \   000042   39           ADDC    A,R1
   \   000043   F9           MOV     R1,A
   \   000044   88..         MOV     ?V4,R0
   \   000046   89..         MOV     ?V5,R1
    647            /* Length of entire NV item data */
    648            nvItemLen = osal_nv_item_len(nvId);
   \   000048                ; Setup parameters for call to function osal_nv_item_len
   \   000048   AA..         MOV     R2,?V4
   \   00004A   AB..         MOV     R3,?V5
   \   00004C   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00004F   8A..         MOV     ?V6,R2
   \   000051   8B..         MOV     ?V7,R3
   \   000053   85....       MOV     ?V14,?V6
   \   000056   85....       MOV     ?V15,?V7
    649          
    650          #if !MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
    651            if ((ZCD_NV_IMPLICIT_CERTIFICATE == nvId) ||
    652                (ZCD_NV_CA_PUBLIC_KEY == nvId)        ||
    653                (ZCD_NV_DEVICE_PRIVATE_KEY == nvId))
   \   000059   7469         MOV     A,#0x69
   \   00005B   65..         XRL     A,?V4
   \   00005D   7004         JNZ     ??MT_SysOsalNVRead_1
   \   00005F   7400         MOV     A,#0x0
   \   000061   65..         XRL     A,?V5
   \                     ??MT_SysOsalNVRead_1:
   \   000063   6018         JZ      ??MT_SysOsalNVRead_2
   \   000065   746B         MOV     A,#0x6b
   \   000067   65..         XRL     A,?V4
   \   000069   7004         JNZ     ??MT_SysOsalNVRead_3
   \   00006B   7400         MOV     A,#0x0
   \   00006D   65..         XRL     A,?V5
   \                     ??MT_SysOsalNVRead_3:
   \   00006F   600C         JZ      ??MT_SysOsalNVRead_2
   \   000071   746A         MOV     A,#0x6a
   \   000073   65..         XRL     A,?V4
   \   000075   7004         JNZ     ??MT_SysOsalNVRead_4
   \   000077   7400         MOV     A,#0x0
   \   000079   65..         XRL     A,?V5
   \                     ??MT_SysOsalNVRead_4:
   \   00007B   7003         JNZ     ??MT_SysOsalNVRead_5
    654            {
    655              /* Access to Security Certificate Data is denied */
    656              error = ZInvalidParameter;
   \                     ??MT_SysOsalNVRead_2:
   \   00007D   75..02       MOV     ?V0,#0x2
    657            }
    658          #endif
    659          
    660          #if !MT_SYS_KEY_MANAGEMENT
    661            if ( (nvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
    662                 (nvId == ZCD_NV_NWK_ALTERN_KEY_INFO) ||
    663                ((nvId >= ZCD_NV_TCLK_TABLE_START) && (nvId <= ZCD_NV_TCLK_TABLE_END)) ||
    664                ((nvId >= ZCD_NV_APS_LINK_KEY_DATA_START) && (nvId <= ZCD_NV_APS_LINK_KEY_DATA_END)) ||
    665                 (nvId == ZCD_NV_PRECFGKEY) )
   \                     ??MT_SysOsalNVRead_5:
   \   000080   743A         MOV     A,#0x3a
   \   000082   65..         XRL     A,?V4
   \   000084   7004         JNZ     ??MT_SysOsalNVRead_6
   \   000086   7400         MOV     A,#0x0
   \   000088   65..         XRL     A,?V5
   \                     ??MT_SysOsalNVRead_6:
   \   00008A   6044         JZ      ??MT_SysOsalNVRead_7
   \   00008C   743B         MOV     A,#0x3b
   \   00008E   65..         XRL     A,?V4
   \   000090   7004         JNZ     ??MT_SysOsalNVRead_8
   \   000092   7400         MOV     A,#0x0
   \   000094   65..         XRL     A,?V5
   \                     ??MT_SysOsalNVRead_8:
   \   000096   6038         JZ      ??MT_SysOsalNVRead_7
   \   000098   C3           CLR     C
   \   000099   E5..         MOV     A,?V4
   \   00009B   9401         SUBB    A,#0x1
   \   00009D   E5..         MOV     A,?V5
   \   00009F   9401         SUBB    A,#0x1
   \   0000A1   400B         JC      ??MT_SysOsalNVRead_9
   \   0000A3   C3           CLR     C
   \   0000A4   E5..         MOV     A,?V4
   \   0000A6   9400         SUBB    A,#0x0
   \   0000A8   E5..         MOV     A,?V5
   \   0000AA   9402         SUBB    A,#0x2
   \   0000AC   4022         JC      ??MT_SysOsalNVRead_7
   \                     ??MT_SysOsalNVRead_9:
   \   0000AE   C3           CLR     C
   \   0000AF   E5..         MOV     A,?V4
   \   0000B1   9401         SUBB    A,#0x1
   \   0000B3   E5..         MOV     A,?V5
   \   0000B5   9402         SUBB    A,#0x2
   \   0000B7   400B         JC      ??MT_SysOsalNVRead_10
   \   0000B9   C3           CLR     C
   \   0000BA   E5..         MOV     A,?V4
   \   0000BC   9400         SUBB    A,#0x0
   \   0000BE   E5..         MOV     A,?V5
   \   0000C0   9403         SUBB    A,#0x3
   \   0000C2   400C         JC      ??MT_SysOsalNVRead_7
   \                     ??MT_SysOsalNVRead_10:
   \   0000C4   7462         MOV     A,#0x62
   \   0000C6   65..         XRL     A,?V4
   \   0000C8   7004         JNZ     ??MT_SysOsalNVRead_11
   \   0000CA   7400         MOV     A,#0x0
   \   0000CC   65..         XRL     A,?V5
   \                     ??MT_SysOsalNVRead_11:
   \   0000CE   7003         JNZ     ??MT_SysOsalNVRead_12
    666            {
    667              /* Access to Security Key Data is denied */
    668              error = ZInvalidParameter;
   \                     ??MT_SysOsalNVRead_7:
   \   0000D0   75..02       MOV     ?V0,#0x2
    669            }
    670          #endif //!MT_SYS_KEY_MANAGEMENT
    671            
    672            /* Get NV data offset */
    673            if (cmdId == MT_SYS_OSAL_NV_READ)
   \                     ??MT_SysOsalNVRead_12:
   \   0000D3   7408         MOV     A,#0x8
   \   0000D5   65..         XRL     A,?V12
   \   0000D7   7012         JNZ     ??MT_SysOsalNVRead_13
    674            {
    675              /* MT_SYS_OSAL_NV_READ has 1-byte offset */
    676              dataOfs = (uint16)pBuf[2];
   \   0000D9   85..82       MOV     DPL,?V8
   \   0000DC   85..83       MOV     DPH,?V9
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F8           MOV     R0,A
   \   0000E3   7900         MOV     R1,#0x0
   \   0000E5   88..         MOV     ?V2,R0
   \   0000E7   89..         MOV     ?V3,R1
   \   0000E9   8026         SJMP    ??MT_SysOsalNVRead_14
    677            }
    678            else
    679            {
    680              /* MT_SYS_OSAL_NV_READ_EXT has 2-byte offset */
    681              dataOfs = BUILD_UINT16(pBuf[2], pBuf[3]);
   \                     ??MT_SysOsalNVRead_13:
   \   0000EB   85..82       MOV     DPL,?V8
   \   0000EE   85..83       MOV     DPH,?V9
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   FA           MOV     R2,A
   \   0000F5   7B00         MOV     R3,#0x0
   \   0000F7   85..82       MOV     DPL,?V8
   \   0000FA   85..83       MOV     DPH,?V9
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   F8           MOV     R0,A
   \   000102   7900         MOV     R1,#0x0
   \   000104   E4           CLR     A
   \   000105   C8           XCH     A,R0
   \   000106   F9           MOV     R1,A
   \   000107   EA           MOV     A,R2
   \   000108   28           ADD     A,R0
   \   000109   F8           MOV     R0,A
   \   00010A   EB           MOV     A,R3
   \   00010B   39           ADDC    A,R1
   \   00010C   F9           MOV     R1,A
   \   00010D   88..         MOV     ?V2,R0
   \   00010F   89..         MOV     ?V3,R1
    682            }
    683            if (nvItemLen <= dataOfs)
   \                     ??MT_SysOsalNVRead_14:
   \   000111   C3           CLR     C
   \   000112   E5..         MOV     A,?V2
   \   000114   95..         SUBB    A,?V14
   \   000116   E5..         MOV     A,?V3
   \   000118   95..         SUBB    A,?V15
   \   00011A   4003         JC      ??MT_SysOsalNVRead_15
    684            {
    685              /* Offset is past end of data */
    686              error = ZInvalidParameter;
   \   00011C   75..02       MOV     ?V0,#0x2
    687            }
    688          
    689            if (error == ZSuccess)
   \                     ??MT_SysOsalNVRead_15:
   \   00011F   E5..         MOV     A,?V0
   \   000121   6003         JZ      $+5
   \   000123   02....       LJMP    ??MT_SysOsalNVRead_16 & 0xFFFF
    690            {
    691              uint8 *pRetBuf;
    692              uint8 respLen = 2;  /* Response header: [0]=status,[1]=length */
   \   000126   75..02       MOV     ?V1,#0x2
    693          
    694              dataLen = nvItemLen - dataOfs;
   \   000129   E5..         MOV     A,?V14
   \   00012B   C3           CLR     C
   \   00012C   95..         SUBB    A,?V2
   \   00012E   F8           MOV     R0,A
   \   00012F   E5..         MOV     A,?V15
   \   000131   95..         SUBB    A,?V3
   \   000133   F9           MOV     R1,A
   \   000134   E8           MOV     A,R0
   \   000135   FE           MOV     R6,A
   \   000136   E9           MOV     A,R1
   \   000137   FF           MOV     R7,A
    695              if (dataLen > (uint16)(MT_MAX_RSP_DATA_LEN - respLen))
   \   000138   A8..         MOV     R0,?V1
   \   00013A   7900         MOV     R1,#0x0
   \   00013C   74F9         MOV     A,#-0x7
   \   00013E   C3           CLR     C
   \   00013F   98           SUBB    A,R0
   \   000140   F8           MOV     R0,A
   \   000141   7400         MOV     A,#0x0
   \   000143   99           SUBB    A,R1
   \   000144   F9           MOV     R1,A
   \   000145   C3           CLR     C
   \   000146   E8           MOV     A,R0
   \   000147   9E           SUBB    A,R6
   \   000148   E9           MOV     A,R1
   \   000149   9F           SUBB    A,R7
   \   00014A   5011         JNC     ??MT_SysOsalNVRead_17
    696              {
    697                /* Data length is limited by TX buffer size and MT protocol */
    698                dataLen = (MT_MAX_RSP_DATA_LEN - respLen);
   \   00014C   A8..         MOV     R0,?V1
   \   00014E   7900         MOV     R1,#0x0
   \   000150   74F9         MOV     A,#-0x7
   \   000152   C3           CLR     C
   \   000153   98           SUBB    A,R0
   \   000154   F8           MOV     R0,A
   \   000155   7400         MOV     A,#0x0
   \   000157   99           SUBB    A,R1
   \   000158   F9           MOV     R1,A
   \   000159   E8           MOV     A,R0
   \   00015A   FE           MOV     R6,A
   \   00015B   E9           MOV     A,R1
   \   00015C   FF           MOV     R7,A
    699              }
    700              respLen += dataLen;
   \                     ??MT_SysOsalNVRead_17:
   \   00015D   EE           MOV     A,R6
   \   00015E   25..         ADD     A,?V1
   \   000160   F5..         MOV     ?V1,A
    701          
    702              pRetBuf = osal_mem_alloc(respLen);
   \   000162                ; Setup parameters for call to function osal_mem_alloc
   \   000162   AA..         MOV     R2,?V1
   \   000164   7B00         MOV     R3,#0x0
   \   000166   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000169   8A..         MOV     ?V10,R2
   \   00016B   8B..         MOV     ?V11,R3
   \   00016D   85....       MOV     ?V6,?V10
   \   000170   85....       MOV     ?V7,?V11
    703              if (pRetBuf != NULL)
   \   000173   E5..         MOV     A,?V6
   \   000175   45..         ORL     A,?V7
   \   000177   606F         JZ      ??MT_SysOsalNVRead_18
    704              {
    705                osal_memset(&pRetBuf[2], 0, dataLen);
   \   000179                ; Setup parameters for call to function osal_memset
   \   000179   EE           MOV     A,R6
   \   00017A   FC           MOV     R4,A
   \   00017B   EF           MOV     A,R7
   \   00017C   FD           MOV     R5,A
   \   00017D   7900         MOV     R1,#0x0
   \   00017F   E5..         MOV     A,?V6
   \   000181   2402         ADD     A,#0x2
   \   000183   FA           MOV     R2,A
   \   000184   E4           CLR     A
   \   000185   35..         ADDC    A,?V7
   \   000187   FB           MOV     R3,A
   \   000188   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    706                if (((osal_nv_read( nvId, dataOfs, dataLen, &pRetBuf[2])) == ZSUCCESS))
   \   00018B                ; Setup parameters for call to function osal_nv_read
   \   00018B   E5..         MOV     A,?V6
   \   00018D   2402         ADD     A,#0x2
   \   00018F   F5..         MOV     ?V10,A
   \   000191   E4           CLR     A
   \   000192   35..         ADDC    A,?V7
   \   000194   F5..         MOV     ?V11,A
   \   000196   78..         MOV     R0,#?V10
   \   000198   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019B   8E..         MOV     ?V10,R6
   \   00019D   8F..         MOV     ?V11,R7
   \   00019F   78..         MOV     R0,#?V10
   \   0001A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A4   AC..         MOV     R4,?V2
   \   0001A6   AD..         MOV     R5,?V3
   \   0001A8   AA..         MOV     R2,?V4
   \   0001AA   AB..         MOV     R3,?V5
   \   0001AC   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0001AF   7404         MOV     A,#0x4
   \   0001B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B4   E9           MOV     A,R1
   \   0001B5   7025         JNZ     ??MT_SysOsalNVRead_19
    707                {
    708                  pRetBuf[0] = ZSuccess;
   \   0001B7   85..82       MOV     DPL,?V6
   \   0001BA   85..83       MOV     DPH,?V7
   \   0001BD   7400         MOV     A,#0x0
   \   0001BF   F0           MOVX    @DPTR,A
    709                  pRetBuf[1] = dataLen;
   \   0001C0   EE           MOV     A,R6
   \   0001C1   C0E0         PUSH    A
   \   0001C3   85..82       MOV     DPL,?V6
   \   0001C6   85..83       MOV     DPH,?V7
   \   0001C9   A3           INC     DPTR
   \   0001CA   D0E0         POP     A
   \   0001CC   F0           MOVX    @DPTR,A
    710                  MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    711                                                 cmdId, respLen, pRetBuf );
   \   0001CD                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001CD   AC..         MOV     R4,?V6
   \   0001CF   AD..         MOV     R5,?V7
   \   0001D1   AB..         MOV     R3,?V1
   \   0001D3   AA..         MOV     R2,?V12
   \   0001D5   7961         MOV     R1,#0x61
   \   0001D7   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   0001DA   8003         SJMP    ??MT_SysOsalNVRead_20
    712                }
    713                else
    714                {
    715                  error = NV_OPER_FAILED;
   \                     ??MT_SysOsalNVRead_19:
   \   0001DC   75..0A       MOV     ?V0,#0xa
    716                }
    717                osal_mem_free(pRetBuf);
   \                     ??MT_SysOsalNVRead_20:
   \   0001DF                ; Setup parameters for call to function osal_mem_free
   \   0001DF   AA..         MOV     R2,?V6
   \   0001E1   AB..         MOV     R3,?V7
   \   0001E3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001E6   8003         SJMP    ??MT_SysOsalNVRead_16
    718              }
    719              else
    720              {
    721                /* Could not get buffer for NV data */
    722                error = ZMemError;
   \                     ??MT_SysOsalNVRead_18:
   \   0001E8   75..10       MOV     ?V0,#0x10
    723              }
    724            }
    725            
    726            if (error != ZSuccess)
   \                     ??MT_SysOsalNVRead_16:
   \   0001EB   E5..         MOV     A,?V0
   \   0001ED   6026         JZ      ??MT_SysOsalNVRead_21
    727            {
    728              uint8 tmp[2] = { error, 0 };
   \   0001EF   90....       MOV     DPTR,#`?<Constant {0, 0}>`
   \   0001F2   AC..         MOV     R4,?XSP + 0
   \   0001F4   AD..         MOV     R5,?XSP + 1
   \   0001F6   7402         MOV     A,#0x2
   \   0001F8   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   0001FB   E5..         MOV     A,?V0
   \   0001FD   C0E0         PUSH    A
   \   0001FF   85..82       MOV     DPL,?XSP + 0
   \   000202   85..83       MOV     DPH,?XSP + 1
   \   000205   D0E0         POP     A
   \   000207   F0           MOVX    @DPTR,A
    729              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    730                                             cmdId, 2, tmp);
   \   000208                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000208   AC..         MOV     R4,?XSP + 0
   \   00020A   AD..         MOV     R5,?XSP + 1
   \   00020C   7B02         MOV     R3,#0x2
   \   00020E   AA..         MOV     R2,?V12
   \   000210   7961         MOV     R1,#0x61
   \   000212   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    731            }
    732          }
   \                     ??MT_SysOsalNVRead_21:
   \   000215   7402         MOV     A,#0x2
   \   000217   12....       LCALL   ?DEALLOC_XSTACK8
   \   00021A   7F10         MOV     R7,#0x10
   \   00021C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
    733          
    734          /***************************************************************************************************
    735           * @fn      MT_SysOsalNVWrite
    736           *
    737           * @brief   Attempt to write an NV item
    738           *
    739           * @param   pBuf - pointer to the data
    740           *
    741           * @return  None
    742           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    743          void MT_SysOsalNVWrite(uint8 *pBuf)
   \                     MT_SysOsalNVWrite:
    744          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
    745            uint8 cmdId;
    746            uint16 nvId;
    747            uint16 dataLen;
    748            uint16 dataOfs;
    749            uint16 nvItemLen;
    750            uint8 rtrn = ZSuccess;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    751          
    752            /* MT command ID */
    753            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   85..82       MOV     DPL,?V6
   \   00001A   85..83       MOV     DPH,?V7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V2,A
    754            /* Skip over RPC header */
    755            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000022   E5..         MOV     A,?V6
   \   000024   2403         ADD     A,#0x3
   \   000026   F5..         MOV     ?V6,A
   \   000028   5002         JNC     ??MT_SysOsalNVWrite_0
   \   00002A   05..         INC     ?V7
    756          
    757            /* NV item ID */
    758            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVWrite_0:
   \   00002C   85..82       MOV     DPL,?V6
   \   00002F   85..83       MOV     DPH,?V7
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FA           MOV     R2,A
   \   000034   7B00         MOV     R3,#0x0
   \   000036   85..82       MOV     DPL,?V6
   \   000039   85..83       MOV     DPH,?V7
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   7900         MOV     R1,#0x0
   \   000041   E4           CLR     A
   \   000042   C8           XCH     A,R0
   \   000043   F9           MOV     R1,A
   \   000044   EA           MOV     A,R2
   \   000045   28           ADD     A,R0
   \   000046   F8           MOV     R0,A
   \   000047   EB           MOV     A,R3
   \   000048   39           ADDC    A,R1
   \   000049   F9           MOV     R1,A
   \   00004A   88..         MOV     ?V0,R0
   \   00004C   89..         MOV     ?V1,R1
    759            
    760            /* Get NV data offset & length */
    761            if ( cmdId == MT_SYS_OSAL_NV_WRITE )
   \   00004E   7409         MOV     A,#0x9
   \   000050   65..         XRL     A,?V2
   \   000052   702D         JNZ     ??MT_SysOsalNVWrite_1
    762            {
    763              /* MT_SYS_OSAL_NV_WRITE has 1-byte offset & length */
    764              dataOfs = (uint16)pBuf[2];
   \   000054   85..82       MOV     DPL,?V6
   \   000057   85..83       MOV     DPH,?V7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F8           MOV     R0,A
   \   00005E   7900         MOV     R1,#0x0
   \   000060   E8           MOV     A,R0
   \   000061   FE           MOV     R6,A
   \   000062   E9           MOV     A,R1
   \   000063   FF           MOV     R7,A
    765              dataLen = (uint16)pBuf[3];
   \   000064   85..82       MOV     DPL,?V6
   \   000067   85..83       MOV     DPH,?V7
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F8           MOV     R0,A
   \   00006F   7900         MOV     R1,#0x0
   \   000071   88..         MOV     ?V8,R0
   \   000073   89..         MOV     ?V9,R1
    766              pBuf += 4;
   \   000075   E5..         MOV     A,?V6
   \   000077   2404         ADD     A,#0x4
   \   000079   F5..         MOV     ?V6,A
   \   00007B   505E         JNC     ??MT_SysOsalNVWrite_2
   \   00007D   05..         INC     ?V7
   \   00007F   805A         SJMP    ??MT_SysOsalNVWrite_2
    767            }
    768            else
    769            {
    770              /* MT_SYS_OSAL_NV_WRITE_EXT has 2-byte offset & length */
    771              dataOfs = BUILD_UINT16(pBuf[2], pBuf[3]);
   \                     ??MT_SysOsalNVWrite_1:
   \   000081   85..82       MOV     DPL,?V6
   \   000084   85..83       MOV     DPH,?V7
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   FA           MOV     R2,A
   \   00008B   7B00         MOV     R3,#0x0
   \   00008D   85..82       MOV     DPL,?V6
   \   000090   85..83       MOV     DPH,?V7
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F8           MOV     R0,A
   \   000098   7900         MOV     R1,#0x0
   \   00009A   E4           CLR     A
   \   00009B   C8           XCH     A,R0
   \   00009C   F9           MOV     R1,A
   \   00009D   EA           MOV     A,R2
   \   00009E   28           ADD     A,R0
   \   00009F   F8           MOV     R0,A
   \   0000A0   EB           MOV     A,R3
   \   0000A1   39           ADDC    A,R1
   \   0000A2   F9           MOV     R1,A
   \   0000A3   E8           MOV     A,R0
   \   0000A4   FE           MOV     R6,A
   \   0000A5   E9           MOV     A,R1
   \   0000A6   FF           MOV     R7,A
    772              dataLen = BUILD_UINT16(pBuf[4], pBuf[5]);
   \   0000A7   85..82       MOV     DPL,?V6
   \   0000AA   85..83       MOV     DPH,?V7
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   FA           MOV     R2,A
   \   0000B3   7B00         MOV     R3,#0x0
   \   0000B5   85..82       MOV     DPL,?V6
   \   0000B8   85..83       MOV     DPH,?V7
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F8           MOV     R0,A
   \   0000C2   7900         MOV     R1,#0x0
   \   0000C4   E4           CLR     A
   \   0000C5   C8           XCH     A,R0
   \   0000C6   F9           MOV     R1,A
   \   0000C7   EA           MOV     A,R2
   \   0000C8   28           ADD     A,R0
   \   0000C9   F8           MOV     R0,A
   \   0000CA   EB           MOV     A,R3
   \   0000CB   39           ADDC    A,R1
   \   0000CC   F9           MOV     R1,A
   \   0000CD   88..         MOV     ?V8,R0
   \   0000CF   89..         MOV     ?V9,R1
    773              pBuf += 6;
   \   0000D1   E5..         MOV     A,?V6
   \   0000D3   2406         ADD     A,#0x6
   \   0000D5   F5..         MOV     ?V6,A
   \   0000D7   5002         JNC     ??MT_SysOsalNVWrite_2
   \   0000D9   05..         INC     ?V7
    774            }
    775          
    776            /* Length of entire NV item data */
    777            nvItemLen = osal_nv_item_len(nvId);
   \                     ??MT_SysOsalNVWrite_2:
   \   0000DB                ; Setup parameters for call to function osal_nv_item_len
   \   0000DB   AA..         MOV     R2,?V0
   \   0000DD   AB..         MOV     R3,?V1
   \   0000DF   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   0000E2   8A..         MOV     ?V10,R2
   \   0000E4   8B..         MOV     ?V11,R3
   \   0000E6   85....       MOV     ?V4,?V10
   \   0000E9   85....       MOV     ?V5,?V11
    778            if ((dataOfs + dataLen) <= nvItemLen)
   \   0000EC   EE           MOV     A,R6
   \   0000ED   25..         ADD     A,?V8
   \   0000EF   F8           MOV     R0,A
   \   0000F0   EF           MOV     A,R7
   \   0000F1   35..         ADDC    A,?V9
   \   0000F3   F9           MOV     R1,A
   \   0000F4   C3           CLR     C
   \   0000F5   E5..         MOV     A,?V4
   \   0000F7   98           SUBB    A,R0
   \   0000F8   E5..         MOV     A,?V5
   \   0000FA   99           SUBB    A,R1
   \   0000FB   4064         JC      ??MT_SysOsalNVWrite_3
    779            {
    780              if (dataOfs == 0)
   \   0000FD   EE           MOV     A,R6
   \   0000FE   4F           ORL     A,R7
   \   0000FF   7015         JNZ     ??MT_SysOsalNVWrite_4
    781              {
    782                /* Set the Z-Globals value of this NV item */
    783                zgSetItem( nvId, dataLen, pBuf );
   \   000101                ; Setup parameters for call to function zgSetItem
   \   000101   78..         MOV     R0,#?V6
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   AC..         MOV     R4,?V8
   \   000108   AD..         MOV     R5,?V9
   \   00010A   AA..         MOV     R2,?V0
   \   00010C   AB..         MOV     R3,?V1
   \   00010E   12....       LCALL   `??zgSetItem::?relay`; Banked call to: zgSetItem
   \   000111   7402         MOV     A,#0x2
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
    784              }
    785              
    786              if ((osal_nv_write(nvId, dataOfs, dataLen, pBuf)) == ZSUCCESS)
   \                     ??MT_SysOsalNVWrite_4:
   \   000116                ; Setup parameters for call to function osal_nv_write
   \   000116   78..         MOV     R0,#?V6
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   78..         MOV     R0,#?V8
   \   00011D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000120   EE           MOV     A,R6
   \   000121   FC           MOV     R4,A
   \   000122   EF           MOV     A,R7
   \   000123   FD           MOV     R5,A
   \   000124   AA..         MOV     R2,?V0
   \   000126   AB..         MOV     R3,?V1
   \   000128   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00012B   7404         MOV     A,#0x4
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000130   E9           MOV     A,R1
   \   000131   7023         JNZ     ??MT_SysOsalNVWrite_5
    787              {
    788                if (nvId == ZCD_NV_EXTADDR)
   \   000133   7401         MOV     A,#0x1
   \   000135   65..         XRL     A,?V0
   \   000137   7004         JNZ     ??MT_SysOsalNVWrite_6
   \   000139   7400         MOV     A,#0x0
   \   00013B   65..         XRL     A,?V1
   \                     ??MT_SysOsalNVWrite_6:
   \   00013D   702B         JNZ     ??MT_SysOsalNVWrite_7
    789                {
    790                  rtrn = ZMacSetReq(ZMacExtAddr, pBuf);
   \   00013F                ; Setup parameters for call to function ZMacSetReq
   \   00013F   AA..         MOV     R2,?V6
   \   000141   AB..         MOV     R3,?V7
   \   000143   79E2         MOV     R1,#-0x1e
   \   000145   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000148   E9           MOV     A,R1
   \   000149   C0E0         PUSH    A
   \   00014B   85..82       MOV     DPL,?XSP + 0
   \   00014E   85..83       MOV     DPH,?XSP + 1
   \   000151   D0E0         POP     A
   \   000153   F0           MOVX    @DPTR,A
   \   000154   8014         SJMP    ??MT_SysOsalNVWrite_7
    791                }
    792              }
    793              else
    794              {
    795                rtrn = NV_OPER_FAILED;
   \                     ??MT_SysOsalNVWrite_5:
   \   000156   85..82       MOV     DPL,?XSP + 0
   \   000159   85..83       MOV     DPH,?XSP + 1
   \   00015C   740A         MOV     A,#0xa
   \   00015E   F0           MOVX    @DPTR,A
   \   00015F   8009         SJMP    ??MT_SysOsalNVWrite_7
    796              }
    797            }
    798            else
    799            {
    800              /* Bad length or/and offset */
    801              rtrn = ZInvalidParameter;
   \                     ??MT_SysOsalNVWrite_3:
   \   000161   85..82       MOV     DPL,?XSP + 0
   \   000164   85..83       MOV     DPH,?XSP + 1
   \   000167   7402         MOV     A,#0x2
   \   000169   F0           MOVX    @DPTR,A
    802            }
    803          
    804            /* Build and send back the response */
    805            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    806                                           cmdId, 1, &rtrn);
   \                     ??MT_SysOsalNVWrite_7:
   \   00016A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00016A   AC..         MOV     R4,?XSP + 0
   \   00016C   AD..         MOV     R5,?XSP + 1
   \   00016E   7B01         MOV     R3,#0x1
   \   000170   AA..         MOV     R2,?V2
   \   000172   7961         MOV     R1,#0x61
   \   000174   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    807          }
   \   000177   7401         MOV     A,#0x1
   \   000179   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017C   7F0C         MOV     R7,#0xc
   \   00017E   02....       LJMP    ?BANKED_LEAVE_XDATA
    808          
    809          /***************************************************************************************************
    810           * @fn      MT_SysOsalNVItemInit
    811           *
    812           * @brief   Attempt to create an NV item
    813           *
    814           * @param   pBuf - pointer to the data
    815           *
    816           * @return  None
    817           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    818          void MT_SysOsalNVItemInit(uint8 *pBuf)
   \                     MT_SysOsalNVItemInit:
    819          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
    820            uint8 ret;
    821            uint8 idLen;
    822            uint16 nvId;
    823            uint16 nvLen;
    824          
    825            /* Skip over RPC header */
    826            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000E   E5..         MOV     A,?V4
   \   000010   2403         ADD     A,#0x3
   \   000012   F5..         MOV     ?V4,A
   \   000014   5002         JNC     ??MT_SysOsalNVItemInit_0
   \   000016   05..         INC     ?V5
    827          
    828            /* NV item ID */
    829            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVItemInit_0:
   \   000018   85..82       MOV     DPL,?V4
   \   00001B   85..83       MOV     DPH,?V5
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   7B00         MOV     R3,#0x0
   \   000022   85..82       MOV     DPL,?V4
   \   000025   85..83       MOV     DPH,?V5
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   E4           CLR     A
   \   00002E   C8           XCH     A,R0
   \   00002F   F9           MOV     R1,A
   \   000030   EA           MOV     A,R2
   \   000031   28           ADD     A,R0
   \   000032   F8           MOV     R0,A
   \   000033   EB           MOV     A,R3
   \   000034   39           ADDC    A,R1
   \   000035   F9           MOV     R1,A
   \   000036   88..         MOV     ?V0,R0
   \   000038   89..         MOV     ?V1,R1
    830            /* NV item length */
    831            nvLen = BUILD_UINT16(pBuf[2], pBuf[3]);
   \   00003A   85..82       MOV     DPL,?V4
   \   00003D   85..83       MOV     DPH,?V5
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   7B00         MOV     R3,#0x0
   \   000046   85..82       MOV     DPL,?V4
   \   000049   85..83       MOV     DPH,?V5
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   7900         MOV     R1,#0x0
   \   000053   E4           CLR     A
   \   000054   C8           XCH     A,R0
   \   000055   F9           MOV     R1,A
   \   000056   EA           MOV     A,R2
   \   000057   28           ADD     A,R0
   \   000058   F8           MOV     R0,A
   \   000059   EB           MOV     A,R3
   \   00005A   39           ADDC    A,R1
   \   00005B   F9           MOV     R1,A
   \   00005C   E8           MOV     A,R0
   \   00005D   FE           MOV     R6,A
   \   00005E   E9           MOV     A,R1
   \   00005F   FF           MOV     R7,A
    832            /* Initialization data length */
    833            idLen = pBuf[4];
   \   000060   85..82       MOV     DPL,?V4
   \   000063   85..83       MOV     DPH,?V5
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F5..         MOV     ?V2,A
    834            pBuf += 5;
   \   00006D   E5..         MOV     A,?V4
   \   00006F   2405         ADD     A,#0x5
   \   000071   F5..         MOV     ?V4,A
   \   000073   5002         JNC     ??MT_SysOsalNVItemInit_1
   \   000075   05..         INC     ?V5
    835          
    836            if ( idLen < nvLen )
   \                     ??MT_SysOsalNVItemInit_1:
   \   000077   A8..         MOV     R0,?V2
   \   000079   7900         MOV     R1,#0x0
   \   00007B   C3           CLR     C
   \   00007C   E8           MOV     A,R0
   \   00007D   9E           SUBB    A,R6
   \   00007E   E9           MOV     A,R1
   \   00007F   9F           SUBB    A,R7
   \   000080   5058         JNC     ??MT_SysOsalNVItemInit_2
    837            {
    838              /* Attempt to create a new NV item */
    839              ret = osal_nv_item_init( nvId, nvLen, NULL );
   \   000082                ; Setup parameters for call to function osal_nv_item_init
   \   000082   E4           CLR     A
   \   000083   F5..         MOV     ?V6,A
   \   000085   F5..         MOV     ?V7,A
   \   000087   78..         MOV     R0,#?V6
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008C   EE           MOV     A,R6
   \   00008D   FC           MOV     R4,A
   \   00008E   EF           MOV     A,R7
   \   00008F   FD           MOV     R5,A
   \   000090   AA..         MOV     R2,?V0
   \   000092   AB..         MOV     R3,?V1
   \   000094   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000097   7402         MOV     A,#0x2
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   E9           MOV     A,R1
   \   00009D   C0E0         PUSH    A
   \   00009F   85..82       MOV     DPL,?XSP + 0
   \   0000A2   85..83       MOV     DPH,?XSP + 1
   \   0000A5   D0E0         POP     A
   \   0000A7   F0           MOVX    @DPTR,A
    840              if ( (ret == NV_ITEM_UNINIT) && (idLen > 0) )
   \   0000A8   85..82       MOV     DPL,?XSP + 0
   \   0000AB   85..83       MOV     DPH,?XSP + 1
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   6409         XRL     A,#0x9
   \   0000B1   7048         JNZ     ??MT_SysOsalNVItemInit_3
   \   0000B3   E5..         MOV     A,?V2
   \   0000B5   6044         JZ      ??MT_SysOsalNVItemInit_3
    841              {
    842                /* Write initialization data to first part of new item */
    843                (void) osal_nv_write( nvId, 0, (uint16)idLen, pBuf );
   \   0000B7                ; Setup parameters for call to function osal_nv_write
   \   0000B7   78..         MOV     R0,#?V4
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BC   85....       MOV     ?V6,?V2
   \   0000BF   75..00       MOV     ?V7,#0x0
   \   0000C2   78..         MOV     R0,#?V6
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   7C00         MOV     R4,#0x0
   \   0000C9   7D00         MOV     R5,#0x0
   \   0000CB   AA..         MOV     R2,?V0
   \   0000CD   AB..         MOV     R3,?V1
   \   0000CF   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000D2   7404         MOV     A,#0x4
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV     A,R1
   \   0000D8   8021         SJMP    ??MT_SysOsalNVItemInit_3
    844              }
    845            }
    846            else
    847            {
    848              /* Attempt to create/initialize a new NV item */
    849              ret = osal_nv_item_init( nvId, nvLen, pBuf );
   \                     ??MT_SysOsalNVItemInit_2:
   \   0000DA                ; Setup parameters for call to function osal_nv_item_init
   \   0000DA   78..         MOV     R0,#?V4
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DF   EE           MOV     A,R6
   \   0000E0   FC           MOV     R4,A
   \   0000E1   EF           MOV     A,R7
   \   0000E2   FD           MOV     R5,A
   \   0000E3   AA..         MOV     R2,?V0
   \   0000E5   AB..         MOV     R3,?V1
   \   0000E7   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000EA   7402         MOV     A,#0x2
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EF   E9           MOV     A,R1
   \   0000F0   C0E0         PUSH    A
   \   0000F2   85..82       MOV     DPL,?XSP + 0
   \   0000F5   85..83       MOV     DPH,?XSP + 1
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
    850            }
    851          
    852            /* Build and send back the response */
    853            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    854                                           MT_SYS_OSAL_NV_ITEM_INIT, 1, &ret);
   \                     ??MT_SysOsalNVItemInit_3:
   \   0000FB                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000FB   AC..         MOV     R4,?XSP + 0
   \   0000FD   AD..         MOV     R5,?XSP + 1
   \   0000FF   7B01         MOV     R3,#0x1
   \   000101   7A07         MOV     R2,#0x7
   \   000103   7961         MOV     R1,#0x61
   \   000105   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    855          }
   \   000108   7401         MOV     A,#0x1
   \   00010A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010D   7F08         MOV     R7,#0x8
   \   00010F   02....       LJMP    ?BANKED_LEAVE_XDATA
    856          
    857          /***************************************************************************************************
    858           * @fn      MT_SysOsalNVDelete
    859           *
    860           * @brief   Attempt to delete an NV item
    861           *
    862           * @param   pBuf - pointer to the data
    863           *
    864           * @return  None
    865           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    866          void MT_SysOsalNVDelete(uint8 *pBuf)
   \                     MT_SysOsalNVDelete:
    867          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    868            uint16 nvId;
    869            uint16 nvLen;
    870            uint8 ret;
    871          
    872            /* Skip over RPC header */
    873            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000E   E5..         MOV     A,?V0
   \   000010   2403         ADD     A,#0x3
   \   000012   F5..         MOV     ?V0,A
   \   000014   5002         JNC     ??MT_SysOsalNVDelete_0
   \   000016   05..         INC     ?V1
    874          
    875            /* Get the ID */
    876            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVDelete_0:
   \   000018   85..82       MOV     DPL,?V0
   \   00001B   85..83       MOV     DPH,?V1
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   7B00         MOV     R3,#0x0
   \   000022   85..82       MOV     DPL,?V0
   \   000025   85..83       MOV     DPH,?V1
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   E4           CLR     A
   \   00002E   C8           XCH     A,R0
   \   00002F   F9           MOV     R1,A
   \   000030   EA           MOV     A,R2
   \   000031   28           ADD     A,R0
   \   000032   F8           MOV     R0,A
   \   000033   EB           MOV     A,R3
   \   000034   39           ADDC    A,R1
   \   000035   F9           MOV     R1,A
   \   000036   88..         MOV     ?V2,R0
   \   000038   89..         MOV     ?V3,R1
    877            /* Get the length */
    878            nvLen = BUILD_UINT16(pBuf[2], pBuf[3]);
   \   00003A   85..82       MOV     DPL,?V0
   \   00003D   85..83       MOV     DPH,?V1
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   7B00         MOV     R3,#0x0
   \   000046   85..82       MOV     DPL,?V0
   \   000049   85..83       MOV     DPH,?V1
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   7900         MOV     R1,#0x0
   \   000053   E4           CLR     A
   \   000054   C8           XCH     A,R0
   \   000055   F9           MOV     R1,A
   \   000056   EA           MOV     A,R2
   \   000057   28           ADD     A,R0
   \   000058   F8           MOV     R0,A
   \   000059   EB           MOV     A,R3
   \   00005A   39           ADDC    A,R1
   \   00005B   F9           MOV     R1,A
   \   00005C   E8           MOV     A,R0
   \   00005D   FE           MOV     R6,A
   \   00005E   E9           MOV     A,R1
   \   00005F   FF           MOV     R7,A
    879          
    880            /* Attempt to delete the NV item */
    881            ret = osal_nv_delete( nvId, nvLen );
   \   000060                ; Setup parameters for call to function osal_nv_delete
   \   000060   EE           MOV     A,R6
   \   000061   FC           MOV     R4,A
   \   000062   EF           MOV     A,R7
   \   000063   FD           MOV     R5,A
   \   000064   AA..         MOV     R2,?V2
   \   000066   AB..         MOV     R3,?V3
   \   000068   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   00006B   E9           MOV     A,R1
   \   00006C   C0E0         PUSH    A
   \   00006E   85..82       MOV     DPL,?XSP + 0
   \   000071   85..83       MOV     DPH,?XSP + 1
   \   000074   D0E0         POP     A
   \   000076   F0           MOVX    @DPTR,A
    882          
    883            /* Build and send back the response */
    884            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    885                                           MT_SYS_OSAL_NV_DELETE, 1, &ret);
   \   000077                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000077   AC..         MOV     R4,?XSP + 0
   \   000079   AD..         MOV     R5,?XSP + 1
   \   00007B   7B01         MOV     R3,#0x1
   \   00007D   7A12         MOV     R2,#0x12
   \   00007F   7961         MOV     R1,#0x61
   \   000081   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    886          }
   \   000084   7401         MOV     A,#0x1
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   7F04         MOV     R7,#0x4
   \   00008B   02....       LJMP    ?BANKED_LEAVE_XDATA
    887          
    888          /***************************************************************************************************
    889           * @fn      MT_SysOsalNVLength
    890           *
    891           * @brief   Attempt to get the length to an NV item
    892           *
    893           * @param   pBuf - pointer to the data
    894           *
    895           * @return  None
    896           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    897          void MT_SysOsalNVLength(uint8 *pBuf)
   \                     MT_SysOsalNVLength:
    898          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    899            uint16 nvId;
    900            uint16 nvLen;
    901            uint8 rsp[2];
    902          
    903            /* Skip over RPC header */
    904            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000E   E5..         MOV     A,?V0
   \   000010   2403         ADD     A,#0x3
   \   000012   F5..         MOV     ?V0,A
   \   000014   5002         JNC     ??MT_SysOsalNVLength_0
   \   000016   05..         INC     ?V1
    905          
    906            /* Get the ID */
    907            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVLength_0:
   \   000018   85..82       MOV     DPL,?V0
   \   00001B   85..83       MOV     DPH,?V1
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   7B00         MOV     R3,#0x0
   \   000022   85..82       MOV     DPL,?V0
   \   000025   85..83       MOV     DPH,?V1
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   E4           CLR     A
   \   00002E   C8           XCH     A,R0
   \   00002F   F9           MOV     R1,A
   \   000030   EA           MOV     A,R2
   \   000031   28           ADD     A,R0
   \   000032   F8           MOV     R0,A
   \   000033   EB           MOV     A,R3
   \   000034   39           ADDC    A,R1
   \   000035   F9           MOV     R1,A
   \   000036   88..         MOV     ?V2,R0
   \   000038   89..         MOV     ?V3,R1
    908          
    909            /* Attempt to get NV item length */
    910            nvLen = osal_nv_item_len( nvId );
   \   00003A                ; Setup parameters for call to function osal_nv_item_len
   \   00003A   AA..         MOV     R2,?V2
   \   00003C   AB..         MOV     R3,?V3
   \   00003E   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000041   8A..         MOV     ?V4,R2
   \   000043   8B..         MOV     ?V5,R3
   \   000045   AE..         MOV     R6,?V4
   \   000047   AF..         MOV     R7,?V5
    911            rsp[0] = LO_UINT16( nvLen );
   \   000049   EE           MOV     A,R6
   \   00004A   C0E0         PUSH    A
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   D0E0         POP     A
   \   000054   F0           MOVX    @DPTR,A
    912            rsp[1] = HI_UINT16( nvLen );
   \   000055   EE           MOV     A,R6
   \   000056   F8           MOV     R0,A
   \   000057   EF           MOV     A,R7
   \   000058   F9           MOV     R1,A
   \   000059   E4           CLR     A
   \   00005A   C9           XCH     A,R1
   \   00005B   F8           MOV     R0,A
   \   00005C   E8           MOV     A,R0
   \   00005D   C0E0         PUSH    A
   \   00005F   7401         MOV     A,#0x1
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   D0E0         POP     A
   \   000066   F0           MOVX    @DPTR,A
    913          
    914            /* Build and send back the response */
    915            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    916                                           MT_SYS_OSAL_NV_LENGTH, 2, rsp);
   \   000067                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000067   AC..         MOV     R4,?XSP + 0
   \   000069   AD..         MOV     R5,?XSP + 1
   \   00006B   7B02         MOV     R3,#0x2
   \   00006D   7A13         MOV     R2,#0x13
   \   00006F   7961         MOV     R1,#0x61
   \   000071   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    917          }
   \   000074   7402         MOV     A,#0x2
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   7F06         MOV     R7,#0x6
   \   00007B   02....       LJMP    ?BANKED_LEAVE_XDATA
    918          #endif // !defined(CC253X_MACNP)
    919          
    920          /***************************************************************************************************
    921           * @fn      MT_SysOsalStartTimer
    922           *
    923           * @brief
    924           *
    925           * @param   uint8 pBuf - pointer to the data
    926           *
    927           * @return  None
    928           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    929          void MT_SysOsalStartTimer(uint8 *pBuf)
   \                     MT_SysOsalStartTimer:
    930          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    931            uint16 eventId;
    932            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    933            uint8 cmdId;
    934          
    935            /* parse header */
    936            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V2,A
    937            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000020   EE           MOV     A,R6
   \   000021   2403         ADD     A,#0x3
   \   000023   FE           MOV     R6,A
   \   000024   5001         JNC     ??MT_SysOsalStartTimer_0
   \   000026   0F           INC     R7
    938          
    939            if (*pBuf <= 3)
   \                     ??MT_SysOsalStartTimer_0:
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   C3           CLR     C
   \   00002D   9404         SUBB    A,#0x4
   \   00002F   5075         JNC     ??MT_SysOsalStartTimer_1
    940            {
    941              eventId = (uint16) MT_SysOsalEventId[*pBuf];
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F8           MOV     R0,A
   \   000037   7900         MOV     R1,#0x0
   \   000039   E8           MOV     A,R0
   \   00003A   75F002       MOV     B,#0x2
   \   00003D   A4           MUL     AB
   \   00003E   C8           XCH     A,R0
   \   00003F   AAF0         MOV     R2,B
   \   000041   75F000       MOV     B,#0x0
   \   000044   A4           MUL     AB
   \   000045   2A           ADD     A,R2
   \   000046   FA           MOV     R2,A
   \   000047   75F002       MOV     B,#0x2
   \   00004A   E9           MOV     A,R1
   \   00004B   A4           MUL     AB
   \   00004C   2A           ADD     A,R2
   \   00004D   F9           MOV     R1,A
   \   00004E   74..         MOV     A,#MT_SysOsalEventId & 0xff
   \   000050   28           ADD     A,R0
   \   000051   F582         MOV     DPL,A
   \   000053   74..         MOV     A,#(MT_SysOsalEventId >> 8) & 0xff
   \   000055   39           ADDC    A,R1
   \   000056   F583         MOV     DPH,A
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F5..         MOV     ?V0,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F5..         MOV     ?V1,A
    942              retValue = osal_start_timerEx(MT_TaskID, eventId, BUILD_UINT16(pBuf[1], pBuf[2]));
   \   00005F                ; Setup parameters for call to function osal_start_timerEx
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FA           MOV     R2,A
   \   000066   7B00         MOV     R3,#0x0
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   7900         MOV     R1,#0x0
   \   000072   E4           CLR     A
   \   000073   C8           XCH     A,R0
   \   000074   F9           MOV     R1,A
   \   000075   EA           MOV     A,R2
   \   000076   28           ADD     A,R0
   \   000077   F5..         MOV     ?V4,A
   \   000079   EB           MOV     A,R3
   \   00007A   39           ADDC    A,R1
   \   00007B   F5..         MOV     ?V5,A
   \   00007D   E4           CLR     A
   \   00007E   F5..         MOV     ?V6,A
   \   000080   F5..         MOV     ?V7,A
   \   000082   78..         MOV     R0,#?V4
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000087   AA..         MOV     R2,?V0
   \   000089   AB..         MOV     R3,?V1
   \   00008B   90....       MOV     DPTR,#MT_TaskID
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F9           MOV     R1,A
   \   000090   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000093   7404         MOV     A,#0x4
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   E9           MOV     A,R1
   \   000099   C0E0         PUSH    A
   \   00009B   85..82       MOV     DPL,?XSP + 0
   \   00009E   85..83       MOV     DPH,?XSP + 1
   \   0000A1   D0E0         POP     A
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   8009         SJMP    ??MT_SysOsalStartTimer_2
    943            }
    944            else
    945            {
    946              retValue = ZInvalidParameter;
   \                     ??MT_SysOsalStartTimer_1:
   \   0000A6   85..82       MOV     DPL,?XSP + 0
   \   0000A9   85..83       MOV     DPH,?XSP + 1
   \   0000AC   7402         MOV     A,#0x2
   \   0000AE   F0           MOVX    @DPTR,A
    947            }
    948          
    949            /* Build and send back the response */
    950            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
   \                     ??MT_SysOsalStartTimer_2:
   \   0000AF                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000AF   AC..         MOV     R4,?XSP + 0
   \   0000B1   AD..         MOV     R5,?XSP + 1
   \   0000B3   7B01         MOV     R3,#0x1
   \   0000B5   AA..         MOV     R2,?V2
   \   0000B7   7961         MOV     R1,#0x61
   \   0000B9   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    951          }
   \   0000BC   7401         MOV     A,#0x1
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1   7F08         MOV     R7,#0x8
   \   0000C3   02....       LJMP    ?BANKED_LEAVE_XDATA
    952          
    953          /***************************************************************************************************
    954           * @fn      MT_SysOsalStopTimer
    955           *
    956           * @brief
    957           *
    958           * @param   uint8 pBuf - pointer to the data
    959           *
    960           * @return  None
    961           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    962          void MT_SysOsalStopTimer(uint8 *pBuf)
   \                     MT_SysOsalStopTimer:
    963          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    964            uint16 eventId;
    965            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    966            uint8 cmdId;
    967          
    968            /* parse header */
    969            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V2,A
    970            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000020   EE           MOV     A,R6
   \   000021   2403         ADD     A,#0x3
   \   000023   FE           MOV     R6,A
   \   000024   5001         JNC     ??MT_SysOsalStopTimer_0
   \   000026   0F           INC     R7
    971          
    972            if (*pBuf <= 3)
   \                     ??MT_SysOsalStopTimer_0:
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   C3           CLR     C
   \   00002D   9404         SUBB    A,#0x4
   \   00002F   5048         JNC     ??MT_SysOsalStopTimer_1
    973            {
    974              eventId = (uint16) MT_SysOsalEventId[*pBuf];
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F8           MOV     R0,A
   \   000037   7900         MOV     R1,#0x0
   \   000039   E8           MOV     A,R0
   \   00003A   75F002       MOV     B,#0x2
   \   00003D   A4           MUL     AB
   \   00003E   C8           XCH     A,R0
   \   00003F   AAF0         MOV     R2,B
   \   000041   75F000       MOV     B,#0x0
   \   000044   A4           MUL     AB
   \   000045   2A           ADD     A,R2
   \   000046   FA           MOV     R2,A
   \   000047   75F002       MOV     B,#0x2
   \   00004A   E9           MOV     A,R1
   \   00004B   A4           MUL     AB
   \   00004C   2A           ADD     A,R2
   \   00004D   F9           MOV     R1,A
   \   00004E   74..         MOV     A,#MT_SysOsalEventId & 0xff
   \   000050   28           ADD     A,R0
   \   000051   F582         MOV     DPL,A
   \   000053   74..         MOV     A,#(MT_SysOsalEventId >> 8) & 0xff
   \   000055   39           ADDC    A,R1
   \   000056   F583         MOV     DPH,A
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F5..         MOV     ?V0,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F5..         MOV     ?V1,A
    975              retValue = osal_stop_timerEx(MT_TaskID, eventId);
   \   00005F                ; Setup parameters for call to function osal_stop_timerEx
   \   00005F   AA..         MOV     R2,?V0
   \   000061   AB..         MOV     R3,?V1
   \   000063   90....       MOV     DPTR,#MT_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00006B   E9           MOV     A,R1
   \   00006C   C0E0         PUSH    A
   \   00006E   85..82       MOV     DPL,?XSP + 0
   \   000071   85..83       MOV     DPH,?XSP + 1
   \   000074   D0E0         POP     A
   \   000076   F0           MOVX    @DPTR,A
   \   000077   8009         SJMP    ??MT_SysOsalStopTimer_2
    976            }
    977            else
    978            {
    979              retValue = ZInvalidParameter;
   \                     ??MT_SysOsalStopTimer_1:
   \   000079   85..82       MOV     DPL,?XSP + 0
   \   00007C   85..83       MOV     DPH,?XSP + 1
   \   00007F   7402         MOV     A,#0x2
   \   000081   F0           MOVX    @DPTR,A
    980            }
    981          
    982            /* Build and send back the response */
    983            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue );
   \                     ??MT_SysOsalStopTimer_2:
   \   000082                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000082   AC..         MOV     R4,?XSP + 0
   \   000084   AD..         MOV     R5,?XSP + 1
   \   000086   7B01         MOV     R3,#0x1
   \   000088   AA..         MOV     R2,?V2
   \   00008A   7961         MOV     R1,#0x61
   \   00008C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    984          }
   \   00008F   7401         MOV     A,#0x1
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
   \   000094   7F03         MOV     R7,#0x3
   \   000096   02....       LJMP    ?BANKED_LEAVE_XDATA
    985          
    986          /***************************************************************************************************
    987           * @fn      MT_SysRandom
    988           *
    989           * @brief
    990           *
    991           * @param   uint8 pData - pointer to the data
    992           *
    993           * @return  None
    994           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    995          void MT_SysRandom()
   \                     MT_SysRandom:
    996          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    997            uint16 randValue = Onboard_rand();
   \   00000A                ; Setup parameters for call to function Onboard_rand
   \   00000A   12....       LCALL   `??Onboard_rand::?relay`; Banked call to: Onboard_rand
   \   00000D   8A..         MOV     ?V0,R2
   \   00000F   8B..         MOV     ?V1,R3
   \   000011   AE..         MOV     R6,?V0
   \   000013   AF..         MOV     R7,?V1
    998            uint8 retArray[2];
    999          
   1000            retArray[0] = LO_UINT16(randValue);
   \   000015   EE           MOV     A,R6
   \   000016   C0E0         PUSH    A
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   1001            retArray[1] = HI_UINT16(randValue);
   \   000021   EE           MOV     A,R6
   \   000022   F8           MOV     R0,A
   \   000023   EF           MOV     A,R7
   \   000024   F9           MOV     R1,A
   \   000025   E4           CLR     A
   \   000026   C9           XCH     A,R1
   \   000027   F8           MOV     R0,A
   \   000028   E8           MOV     A,R0
   \   000029   C0E0         PUSH    A
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   D0E0         POP     A
   \   000032   F0           MOVX    @DPTR,A
   1002          
   1003            /* Build and send back the response */
   1004            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_RANDOM, 2, retArray );
   \   000033                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000033   AC..         MOV     R4,?XSP + 0
   \   000035   AD..         MOV     R5,?XSP + 1
   \   000037   7B02         MOV     R3,#0x2
   \   000039   7A0C         MOV     R2,#0xc
   \   00003B   7961         MOV     R1,#0x61
   \   00003D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1005          }
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   7F02         MOV     R7,#0x2
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
   1006          
   1007          /***************************************************************************************************
   1008           * @fn      MT_SysAdcRead
   1009           *
   1010           * @brief   Reading ADC value, temperature sensor and voltage
   1011           *
   1012           * @param   uint8 pBuf - pointer to the data
   1013           *
   1014           * @return  None
   1015           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          void MT_SysAdcRead(uint8 *pBuf)
   \                     MT_SysAdcRead:
   1017          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1018          #ifndef HAL_BOARD_LM3S
   1019            uint8 channel, resolution;
   1020            uint16 tempValue;
   1021            uint8 retArray[2];
   1022            uint8 cmdId;
   1023          
   1024            /* parse header */
   1025            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   85..82       MOV     DPL,?V0
   \   000011   85..83       MOV     DPH,?V1
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V4,A
   1026            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000019   E5..         MOV     A,?V0
   \   00001B   2403         ADD     A,#0x3
   \   00001D   F5..         MOV     ?V0,A
   \   00001F   5002         JNC     ??MT_SysAdcRead_0
   \   000021   05..         INC     ?V1
   1027          
   1028            /* Channel */
   1029            channel = *pBuf++;
   \                     ??MT_SysAdcRead_0:
   \   000023   85..82       MOV     DPL,?V0
   \   000026   85..83       MOV     DPH,?V1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V2,A
   \   00002C   85..82       MOV     DPL,?V0
   \   00002F   85..83       MOV     DPH,?V1
   \   000032   A3           INC     DPTR
   \   000033   8582..       MOV     ?V0,DPL
   \   000036   8583..       MOV     ?V1,DPH
   1030          
   1031            /* Resolution */
   1032            resolution = *pBuf++;
   \   000039   85..82       MOV     DPL,?V0
   \   00003C   85..83       MOV     DPH,?V1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V3,A
   \   000042   85..82       MOV     DPL,?V0
   \   000045   85..83       MOV     DPH,?V1
   \   000048   A3           INC     DPTR
   \   000049   8582..       MOV     ?V0,DPL
   \   00004C   8583..       MOV     ?V1,DPH
   1033          
   1034            /* Voltage reading */
   1035            switch (channel)
   \   00004F   E5..         MOV     A,?V2
   \   000051   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for MT_SysAdcRead>_0`:
   \   000054   01           DB        1
   \   000055   00           DB        0
   \   000056   07           DB        7
   \   000057   ....         DW        ??MT_SysAdcRead_1
   \   000059   02           DB        2
   \   00005A   0E           DB        14
   \   00005B   ....         DW        ??MT_SysAdcRead_2
   \   00005D   0F           DB        15
   \   00005E   ....         DW        ??MT_SysAdcRead_3
   \   000060   ....         DW        ??MT_SysAdcRead_4
   1036            {
   1037              /* Analog input channel */
   1038              case HAL_ADC_CHANNEL_0:
   1039              case HAL_ADC_CHANNEL_1:
   1040              case HAL_ADC_CHANNEL_2:
   1041              case HAL_ADC_CHANNEL_3:
   1042              case HAL_ADC_CHANNEL_4:
   1043              case HAL_ADC_CHANNEL_5:
   1044              case HAL_ADC_CHANNEL_6:
   1045              case HAL_ADC_CHANNEL_7:
   1046                tempValue = HalAdcRead(channel, resolution);
   \                     ??MT_SysAdcRead_1:
   \   000062                ; Setup parameters for call to function HalAdcRead
   \   000062   AA..         MOV     R2,?V3
   \   000064   A9..         MOV     R1,?V2
   \   000066   12....       LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   000069   8A..         MOV     ?V6,R2
   \   00006B   8B..         MOV     ?V7,R3
   \   00006D   AE..         MOV     R6,?V6
   \   00006F   AF..         MOV     R7,?V7
   1047                break;
   \   000071   8026         SJMP    ??MT_SysAdcRead_5
   1048          
   1049              /* Temperature sensor */
   1050              case(HAL_ADC_CHANNEL_TEMP):
   1051                tempValue = HalAdcRead(HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
   \                     ??MT_SysAdcRead_2:
   \   000073                ; Setup parameters for call to function HalAdcRead
   \   000073   7A04         MOV     R2,#0x4
   \   000075   790E         MOV     R1,#0xe
   \   000077   12....       LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   00007A   8A..         MOV     ?V6,R2
   \   00007C   8B..         MOV     ?V7,R3
   \   00007E   AE..         MOV     R6,?V6
   \   000080   AF..         MOV     R7,?V7
   1052                break;
   \   000082   8015         SJMP    ??MT_SysAdcRead_5
   1053          
   1054              /* Voltage reading */
   1055              case(HAL_ADC_CHANNEL_VDD):
   1056                tempValue = HalAdcRead(HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
   \                     ??MT_SysAdcRead_3:
   \   000084                ; Setup parameters for call to function HalAdcRead
   \   000084   7A04         MOV     R2,#0x4
   \   000086   790F         MOV     R1,#0xf
   \   000088   12....       LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   00008B   8A..         MOV     ?V6,R2
   \   00008D   8B..         MOV     ?V7,R3
   \   00008F   AE..         MOV     R6,?V6
   \   000091   AF..         MOV     R7,?V7
   1057                break;
   \   000093   8004         SJMP    ??MT_SysAdcRead_5
   1058          
   1059              /* Undefined channels */
   1060              default:
   1061                tempValue = 0x00;
   \                     ??MT_SysAdcRead_4:
   \   000095   7E00         MOV     R6,#0x0
   \   000097   7F00         MOV     R7,#0x0
   1062                break;
   1063            }
   1064          
   1065            retArray[0] = LO_UINT16(tempValue);
   \                     ??MT_SysAdcRead_5:
   \   000099   EE           MOV     A,R6
   \   00009A   C0E0         PUSH    A
   \   00009C   85..82       MOV     DPL,?XSP + 0
   \   00009F   85..83       MOV     DPH,?XSP + 1
   \   0000A2   D0E0         POP     A
   \   0000A4   F0           MOVX    @DPTR,A
   1066            retArray[1] = HI_UINT16(tempValue);
   \   0000A5   EE           MOV     A,R6
   \   0000A6   F8           MOV     R0,A
   \   0000A7   EF           MOV     A,R7
   \   0000A8   F9           MOV     R1,A
   \   0000A9   E4           CLR     A
   \   0000AA   C9           XCH     A,R1
   \   0000AB   F8           MOV     R0,A
   \   0000AC   E8           MOV     A,R0
   \   0000AD   C0E0         PUSH    A
   \   0000AF   7401         MOV     A,#0x1
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   D0E0         POP     A
   \   0000B6   F0           MOVX    @DPTR,A
   1067          
   1068            /* Build and send back the response */
   1069            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, retArray);
   \   0000B7                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B7   AC..         MOV     R4,?XSP + 0
   \   0000B9   AD..         MOV     R5,?XSP + 1
   \   0000BB   7B02         MOV     R3,#0x2
   \   0000BD   AA..         MOV     R2,?V4
   \   0000BF   7961         MOV     R1,#0x61
   \   0000C1   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1070          #endif /* #ifndef HAL_BOARD_LM3S */
   1071          }
   \   0000C4   7402         MOV     A,#0x2
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C9   7F08         MOV     R7,#0x8
   \   0000CB   02....       LJMP    ?BANKED_LEAVE_XDATA
   1072          
   1073          /**************************************************************************************************
   1074           * @fn      MT_SysGpio
   1075           *
   1076           * @brief   ZAccel RPC interface for controlling the available GPIO pins.
   1077           *
   1078           * @param   uint8 pBuf - pointer to the data
   1079           *
   1080           * @return  None
   1081           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1082          void MT_SysGpio(uint8 *pBuf)
   \                     MT_SysGpio:
   1083          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1084            uint8 cmd, val;
   1085            GPIO_Op_t op;
   1086          
   1087            cmd = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V1,A
   1088            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_SysGpio_0
   \   00001D   0F           INC     R7
   1089          
   1090            op = (GPIO_Op_t)(*pBuf++);
   \                     ??MT_SysGpio_0:
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0,A
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   A3           INC     DPTR
   \   00002A   AE82         MOV     R6,DPL
   \   00002C   AF83         MOV     R7,DPH
   1091            val = *pBuf;
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   E0           MOVX    A,@DPTR
   \   000033   C0E0         PUSH    A
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   D0E0         POP     A
   \   00003D   F0           MOVX    @DPTR,A
   1092          
   1093            switch (op)
   \   00003E   E5..         MOV     A,?V0
   \   000040   606C         JZ      ??MT_SysGpio_1
   \   000042   14           DEC     A
   \   000043   6012         JZ      ??MT_SysGpio_2
   \   000045   14           DEC     A
   \   000046   6066         JZ      ??MT_SysGpio_1
   \   000048   14           DEC     A
   \   000049   6063         JZ      ??MT_SysGpio_1
   \   00004B   14           DEC     A
   \   00004C   6060         JZ      ??MT_SysGpio_1
   \   00004E   14           DEC     A
   \   00004F   605D         JZ      ??MT_SysGpio_1
   \   000051   24F3         ADD     A,#-0xd
   \   000053   6028         JZ      ??MT_SysGpio_3
   \   000055   8057         SJMP    ??MT_SysGpio_1
   1094            {
   1095              case GPIO_DIR:
   1096                if (val & BV(0)) {GPIO_DIR_OUT(0);} else {GPIO_DIR_IN(0);}
   1097                if (val & BV(1)) {GPIO_DIR_OUT(1);} else {GPIO_DIR_IN(1);}
   1098                if (val & BV(2)) {GPIO_DIR_OUT(2);} else {GPIO_DIR_IN(2);}
   1099                if (val & BV(3)) {GPIO_DIR_OUT(3);} else {GPIO_DIR_IN(3);}
   1100                break;
   1101          
   1102              case GPIO_TRI:
   1103                if(val & BV(0)) {GPIO_TRI(0);} else if(val & BV(4)) {GPIO_PULL_DN(0);} else {GPIO_PULL_UP(0);}
   \                     ??MT_SysGpio_2:
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   A2E0         MOV     C,0xE0 /* A   */.0
   1104                if(val & BV(1)) {GPIO_TRI(1);} else if(val & BV(5)) {GPIO_PULL_DN(1);} else {GPIO_PULL_UP(1);}
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   A2E1         MOV     C,0xE0 /* A   */.1
   1105                if(val & BV(2)) {GPIO_TRI(2);} else if(val & BV(6)) {GPIO_PULL_DN(2);} else {GPIO_PULL_UP(2);}
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   A2E2         MOV     C,0xE0 /* A   */.2
   1106                if(val & BV(3)) {GPIO_TRI(3);} else if(val & BV(7)) {GPIO_PULL_DN(3);} else {GPIO_PULL_UP(3);}
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   A2E3         MOV     C,0xE0 /* A   */.3
   1107                break;
   \   00007B   8031         SJMP    ??MT_SysGpio_1
   1108          
   1109              case GPIO_SET:
   1110                if (val & BV(0)) {GPIO_SET(0);}
   1111                if (val & BV(1)) {GPIO_SET(1);}
   1112                if (val & BV(2)) {GPIO_SET(2);}
   1113                if (val & BV(3)) {GPIO_SET(3);}
   1114                break;
   1115          
   1116              case GPIO_CLR:
   1117                if (val & BV(0)) {GPIO_CLR(0);}
   1118                if (val & BV(1)) {GPIO_CLR(1);}
   1119                if (val & BV(2)) {GPIO_CLR(2);}
   1120                if (val & BV(3)) {GPIO_CLR(3);}
   1121                break;
   1122          
   1123              case GPIO_TOG:
   1124                if (val & BV(0)) {GPIO_TOG(0);}
   1125                if (val & BV(1)) {GPIO_TOG(1);}
   1126                if (val & BV(2)) {GPIO_TOG(2);}
   1127                if (val & BV(3)) {GPIO_TOG(3);}
   1128                break;
   1129          
   1130              case GPIO_GET:
   1131                break;
   1132          
   1133              case GPIO_HiD:
   1134                (val) ? GPIO_HiD_SET() :  GPIO_HiD_CLR();
   \                     ??MT_SysGpio_3:
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   E0           MOVX    A,@DPTR
   \   000084   6015         JZ      ??MT_SysGpio_4
   \   000086   85..82       MOV     DPL,?XSP + 0
   \   000089   85..83       MOV     DPH,?XSP + 1
   \   00008C   7400         MOV     A,#0x0
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   85..82       MOV     DPL,?XSP + 0
   \   000092   85..83       MOV     DPH,?XSP + 1
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F8           MOV     R0,A
   \   000097   7900         MOV     R1,#0x0
   \   000099   8013         SJMP    ??MT_SysGpio_1
   \                     ??MT_SysGpio_4:
   \   00009B   85..82       MOV     DPL,?XSP + 0
   \   00009E   85..83       MOV     DPH,?XSP + 1
   \   0000A1   7400         MOV     A,#0x0
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F8           MOV     R0,A
   \   0000AC   7900         MOV     R1,#0x0
   1135                break;
   1136          
   1137              default:
   1138                break;
   1139            }
   1140          
   1141            val  = (GPIO_GET(0)) ? BV(0) : 0;
   \                     ??MT_SysGpio_1:
   \   0000AE   85..82       MOV     DPL,?XSP + 0
   \   0000B1   85..83       MOV     DPH,?XSP + 1
   \   0000B4   7400         MOV     A,#0x0
   \   0000B6   F0           MOVX    @DPTR,A
   1142            val |= (GPIO_GET(1)) ? BV(1) : 0;
   \   0000B7   85..82       MOV     DPL,?XSP + 0
   \   0000BA   85..83       MOV     DPH,?XSP + 1
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   C0E0         PUSH    A
   \   0000C0   85..82       MOV     DPL,?XSP + 0
   \   0000C3   85..83       MOV     DPH,?XSP + 1
   \   0000C6   D0E0         POP     A
   \   0000C8   F0           MOVX    @DPTR,A
   1143            val |= (GPIO_GET(2)) ? BV(2) : 0;
   \   0000C9   85..82       MOV     DPL,?XSP + 0
   \   0000CC   85..83       MOV     DPH,?XSP + 1
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   C0E0         PUSH    A
   \   0000D2   85..82       MOV     DPL,?XSP + 0
   \   0000D5   85..83       MOV     DPH,?XSP + 1
   \   0000D8   D0E0         POP     A
   \   0000DA   F0           MOVX    @DPTR,A
   1144            val |= (GPIO_GET(3)) ? BV(3) : 0;
   \   0000DB   85..82       MOV     DPL,?XSP + 0
   \   0000DE   85..83       MOV     DPH,?XSP + 1
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   C0E0         PUSH    A
   \   0000E4   85..82       MOV     DPL,?XSP + 0
   \   0000E7   85..83       MOV     DPH,?XSP + 1
   \   0000EA   D0E0         POP     A
   \   0000EC   F0           MOVX    @DPTR,A
   1145          
   1146            /* Build and send back the response */
   1147            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &val);
   \   0000ED                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000ED   AC..         MOV     R4,?XSP + 0
   \   0000EF   AD..         MOV     R5,?XSP + 1
   \   0000F1   7B01         MOV     R3,#0x1
   \   0000F3   AA..         MOV     R2,?V1
   \   0000F5   7961         MOV     R1,#0x61
   \   0000F7   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1148          }
   \   0000FA   7401         MOV     A,#0x1
   \   0000FC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FF   7F02         MOV     R7,#0x2
   \   000101   02....       LJMP    ?BANKED_LEAVE_XDATA
   1149          
   1150          /**************************************************************************************************
   1151           * @fn      MT_SysStackTune
   1152           *
   1153           * @brief   ZAccel RPC interface for tuning the stack parameters to adjust performance
   1154           *
   1155           * @param   uint8 pBuf - pointer to the data
   1156           *
   1157           * @return  None
   1158           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1159          void MT_SysStackTune(uint8 *pBuf)
   \                     MT_SysStackTune:
   1160          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1161            uint8 cmd, rtrn;
   1162          
   1163            cmd = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0,A
   1164            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_SysStackTune_0
   \   00001D   0F           INC     R7
   1165          
   1166            switch (*pBuf++)
   \                     ??MT_SysStackTune_0:
   \   00001E   EE           MOV     A,R6
   \   00001F   F8           MOV     R0,A
   \   000020   EF           MOV     A,R7
   \   000021   F9           MOV     R1,A
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   A3           INC     DPTR
   \   000027   AE82         MOV     R6,DPL
   \   000029   AF83         MOV     R7,DPH
   \   00002B   8882         MOV     DPL,R0
   \   00002D   8983         MOV     DPH,R1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6005         JZ      ??MT_SysStackTune_1
   \   000032   14           DEC     A
   \   000033   6019         JZ      ??MT_SysStackTune_2
   \   000035   804A         SJMP    ??MT_SysStackTune_3
   1167            {
   1168            case STK_TX_PWR:
   1169              rtrn = ZMacSetReq(ZMacPhyTransmitPowerSigned, pBuf);
   \                     ??MT_SysStackTune_1:
   \   000037                ; Setup parameters for call to function ZMacSetReq
   \   000037   EE           MOV     A,R6
   \   000038   FA           MOV     R2,A
   \   000039   EF           MOV     A,R7
   \   00003A   FB           MOV     R3,A
   \   00003B   79E0         MOV     R1,#-0x20
   \   00003D   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000040   E9           MOV     A,R1
   \   000041   C0E0         PUSH    A
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   D0E0         POP     A
   \   00004B   F0           MOVX    @DPTR,A
   1170              break;
   \   00004C   803C         SJMP    ??MT_SysStackTune_4
   1171          
   1172            case STK_RX_ON_IDLE:
   1173              if ((*pBuf != TRUE) && (*pBuf != FALSE))
   \                     ??MT_SysStackTune_2:
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6401         XRL     A,#0x1
   \   000055   6013         JZ      ??MT_SysStackTune_5
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   600C         JZ      ??MT_SysStackTune_5
   1174              {
   1175                (void)ZMacGetReq(ZMacRxOnIdle, &rtrn);
   \   00005E                ; Setup parameters for call to function ZMacGetReq
   \   00005E   AA..         MOV     R2,?XSP + 0
   \   000060   AB..         MOV     R3,?XSP + 1
   \   000062   7952         MOV     R1,#0x52
   \   000064   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   000067   E9           MOV     A,R1
   \   000068   8020         SJMP    ??MT_SysStackTune_4
   1176              }
   1177              else
   1178              {
   1179                rtrn = ZMacSetReq(ZMacRxOnIdle, pBuf);
   \                     ??MT_SysStackTune_5:
   \   00006A                ; Setup parameters for call to function ZMacSetReq
   \   00006A   EE           MOV     A,R6
   \   00006B   FA           MOV     R2,A
   \   00006C   EF           MOV     A,R7
   \   00006D   FB           MOV     R3,A
   \   00006E   7952         MOV     R1,#0x52
   \   000070   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000073   E9           MOV     A,R1
   \   000074   C0E0         PUSH    A
   \   000076   85..82       MOV     DPL,?XSP + 0
   \   000079   85..83       MOV     DPH,?XSP + 1
   \   00007C   D0E0         POP     A
   \   00007E   F0           MOVX    @DPTR,A
   1180              }
   1181              break;
   \   00007F   8009         SJMP    ??MT_SysStackTune_4
   1182          
   1183            default:
   1184              rtrn = ZInvalidParameter;
   \                     ??MT_SysStackTune_3:
   \   000081   85..82       MOV     DPL,?XSP + 0
   \   000084   85..83       MOV     DPH,?XSP + 1
   \   000087   7402         MOV     A,#0x2
   \   000089   F0           MOVX    @DPTR,A
   1185              break;
   1186            }
   1187          
   1188            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
   \                     ??MT_SysStackTune_4:
   \   00008A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008A   AC..         MOV     R4,?XSP + 0
   \   00008C   AD..         MOV     R5,?XSP + 1
   \   00008E   7B01         MOV     R3,#0x1
   \   000090   AA..         MOV     R2,?V0
   \   000092   7961         MOV     R1,#0x61
   \   000094   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1189          }
   \   000097   7401         MOV     A,#0x1
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   7F01         MOV     R7,#0x1
   \   00009E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1190          
   1191          /***************************************************************************************************
   1192           * @fn      MT_SysSetUtcTime
   1193           *
   1194           * @brief   Set the OSAL UTC Time. UTC rollover is: 06:28:16 02/07/2136
   1195           *
   1196           * @param   pBuf - pointer to time parameters
   1197           *
   1198           * @return  None
   1199           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1200          void MT_SysSetUtcTime(uint8 *pBuf)
   \                     MT_SysSetUtcTime:
   1201          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1202            uint8 cmdId;
   1203            uint8 retStat;
   1204            UTCTime utcSecs;
   1205          
   1206            /* Parse header */
   1207            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0,A
   1208            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_SysSetUtcTime_0
   \   00001D   0F           INC     R7
   1209          
   1210            utcSecs = osal_build_uint32( pBuf, 4 );
   \                     ??MT_SysSetUtcTime_0:
   \   00001E                ; Setup parameters for call to function osal_build_uint32
   \   00001E   7904         MOV     R1,#0x4
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000027   8A..         MOV     ?V8,R2
   \   000029   8B..         MOV     ?V9,R3
   \   00002B   8C..         MOV     ?V10,R4
   \   00002D   8D..         MOV     ?V11,R5
   \   00002F   85....       MOV     ?V4,?V8
   \   000032   85....       MOV     ?V5,?V9
   \   000035   85....       MOV     ?V6,?V10
   \   000038   85....       MOV     ?V7,?V11
   1211            if ( utcSecs == 0 )
   \   00003B   E5..         MOV     A,?V4
   \   00003D   45..         ORL     A,?V5
   \   00003F   45..         ORL     A,?V6
   \   000041   45..         ORL     A,?V7
   \   000043   6003         JZ      $+5
   \   000045   02....       LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
   1212            {
   1213              UTCTimeStruct utc;
   1214          
   1215              /* Skip past UTC time */
   1216              pBuf += 4;
   \   000048   EE           MOV     A,R6
   \   000049   2404         ADD     A,#0x4
   \   00004B   FE           MOV     R6,A
   \   00004C   5001         JNC     ??MT_SysSetUtcTime_2
   \   00004E   0F           INC     R7
   1217          
   1218              /* Get time and date parameters */
   1219              utc.hour = *pBuf++;
   \                     ??MT_SysSetUtcTime_2:
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   E0           MOVX    A,@DPTR
   \   000054   C0E0         PUSH    A
   \   000056   7403         MOV     A,#0x3
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   D0E0         POP     A
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   8E82         MOV     DPL,R6
   \   000060   8F83         MOV     DPH,R7
   \   000062   A3           INC     DPTR
   \   000063   AE82         MOV     R6,DPL
   \   000065   AF83         MOV     R7,DPH
   1220              utc.minutes = *pBuf++;
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   C0E0         PUSH    A
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   D0E0         POP     A
   \   000075   F0           MOVX    @DPTR,A
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   A3           INC     DPTR
   \   00007B   AE82         MOV     R6,DPL
   \   00007D   AF83         MOV     R7,DPH
   1221              utc.seconds = *pBuf++;
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   E0           MOVX    A,@DPTR
   \   000084   C0E0         PUSH    A
   \   000086   7401         MOV     A,#0x1
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   D0E0         POP     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   A3           INC     DPTR
   \   000093   AE82         MOV     R6,DPL
   \   000095   AF83         MOV     R7,DPH
   1222              utc.month = (*pBuf++) - 1;
   \   000097   8E82         MOV     DPL,R6
   \   000099   8F83         MOV     DPH,R7
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   24FF         ADD     A,#-0x1
   \   00009E   C0E0         PUSH    A
   \   0000A0   7405         MOV     A,#0x5
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   D0E0         POP     A
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   A3           INC     DPTR
   \   0000AD   AE82         MOV     R6,DPL
   \   0000AF   AF83         MOV     R7,DPH
   1223              utc.day = (*pBuf++) - 1;
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   24FF         ADD     A,#-0x1
   \   0000B8   C0E0         PUSH    A
   \   0000BA   7404         MOV     A,#0x4
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   D0E0         POP     A
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   A3           INC     DPTR
   \   0000C7   AE82         MOV     R6,DPL
   \   0000C9   AF83         MOV     R7,DPH
   1224              utc.year = osal_build_uint16 ( pBuf );
   \   0000CB                ; Setup parameters for call to function osal_build_uint16
   \   0000CB   EE           MOV     A,R6
   \   0000CC   FA           MOV     R2,A
   \   0000CD   EF           MOV     A,R7
   \   0000CE   FB           MOV     R3,A
   \   0000CF   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000D2   7406         MOV     A,#0x6
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   EA           MOV     A,R2
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   EB           MOV     A,R3
   \   0000DB   F0           MOVX    @DPTR,A
   1225          
   1226              if ((utc.hour < 24) && (utc.minutes < 60) && (utc.seconds < 60) &&
   1227                  (utc.month < 12) && (utc.day < 31) && (utc.year > 1999) && (utc.year < 2136))
   \   0000DC   7403         MOV     A,#0x3
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   C3           CLR     C
   \   0000E3   9418         SUBB    A,#0x18
   \   0000E5   4003         JC      $+5
   \   0000E7   02....       LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
   \   0000EA   7402         MOV     A,#0x2
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   C3           CLR     C
   \   0000F1   943C         SUBB    A,#0x3c
   \   0000F3   4003         JC      $+5
   \   0000F5   02....       LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
   \   0000F8   7401         MOV     A,#0x1
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   C3           CLR     C
   \   0000FF   943C         SUBB    A,#0x3c
   \   000101   4003         JC      $+5
   \   000103   02....       LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
   \   000106   7405         MOV     A,#0x5
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   C3           CLR     C
   \   00010D   940C         SUBB    A,#0xc
   \   00010F   4003         JC      $+5
   \   000111   02....       LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
   \   000114   7404         MOV     A,#0x4
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   C3           CLR     C
   \   00011B   941F         SUBB    A,#0x1f
   \   00011D   4003         JC      $+5
   \   00011F   02....       LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
   \   000122   7406         MOV     A,#0x6
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   C3           CLR     C
   \   000128   E0           MOVX    A,@DPTR
   \   000129   94D0         SUBB    A,#-0x30
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   9407         SUBB    A,#0x7
   \   00012F   5003         JNC     $+5
   \   000131   02....       LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
   \   000134   7406         MOV     A,#0x6
   \   000136   12....       LCALL   ?XSTACK_DISP0_8
   \   000139   C3           CLR     C
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   9458         SUBB    A,#0x58
   \   00013D   A3           INC     DPTR
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   9408         SUBB    A,#0x8
   \   000141   4003         JC      $+5
   \   000143   02....       LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
   1228              {
   1229                /* Got past the course filter, now check for leap year */
   1230                if ((utc.month != 1) || (utc.day < (IsLeapYear( utc.year ) ? 29 : 28)))
   \   000146   7405         MOV     A,#0x5
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   6401         XRL     A,#0x1
   \   00014E   7070         JNZ     ??MT_SysSetUtcTime_3
   \   000150   7406         MOV     A,#0x6
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F8           MOV     R0,A
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   F9           MOV     R1,A
   \   00015A   7A90         MOV     R2,#-0x70
   \   00015C   7B01         MOV     R3,#0x1
   \   00015E   12....       LCALL   ?US_DIV_MOD
   \   000161   8A..         MOV     ?V2,R2
   \   000163   8B..         MOV     ?V3,R3
   \   000165   E5..         MOV     A,?V2
   \   000167   45..         ORL     A,?V3
   \   000169   6036         JZ      ??MT_SysSetUtcTime_4
   \   00016B   7406         MOV     A,#0x6
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   E0           MOVX    A,@DPTR
   \   000171   F8           MOV     R0,A
   \   000172   A3           INC     DPTR
   \   000173   E0           MOVX    A,@DPTR
   \   000174   F9           MOV     R1,A
   \   000175   7A64         MOV     R2,#0x64
   \   000177   7B00         MOV     R3,#0x0
   \   000179   12....       LCALL   ?US_DIV_MOD
   \   00017C   8A..         MOV     ?V2,R2
   \   00017E   8B..         MOV     ?V3,R3
   \   000180   E5..         MOV     A,?V2
   \   000182   45..         ORL     A,?V3
   \   000184   6021         JZ      ??MT_SysSetUtcTime_5
   \   000186   7406         MOV     A,#0x6
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   F8           MOV     R0,A
   \   00018D   A3           INC     DPTR
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F9           MOV     R1,A
   \   000190   7A04         MOV     R2,#0x4
   \   000192   7B00         MOV     R3,#0x0
   \   000194   12....       LCALL   ?US_DIV_MOD
   \   000197   8A..         MOV     ?V2,R2
   \   000199   8B..         MOV     ?V3,R3
   \   00019B   E5..         MOV     A,?V2
   \   00019D   45..         ORL     A,?V3
   \   00019F   7006         JNZ     ??MT_SysSetUtcTime_5
   \                     ??MT_SysSetUtcTime_4:
   \   0001A1   7A1D         MOV     R2,#0x1d
   \   0001A3   7B00         MOV     R3,#0x0
   \   0001A5   8004         SJMP    ??MT_SysSetUtcTime_6
   \                     ??MT_SysSetUtcTime_5:
   \   0001A7   7A1C         MOV     R2,#0x1c
   \   0001A9   7B00         MOV     R3,#0x0
   \                     ??MT_SysSetUtcTime_6:
   \   0001AB   7404         MOV     A,#0x4
   \   0001AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   F8           MOV     R0,A
   \   0001B2   7900         MOV     R1,#0x0
   \   0001B4   C3           CLR     C
   \   0001B5   E8           MOV     A,R0
   \   0001B6   9A           SUBB    A,R2
   \   0001B7   E9           MOV     A,R1
   \   0001B8   9B           SUBB    A,R3
   \   0001B9   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0001BB   65D0         XRL     A,PSW
   \   0001BD   33           RLC     A
   \   0001BE   501C         JNC     ??MT_SysSetUtcTime_1
   1231                {
   1232                  /* Numbers look reasonable, convert to UTC */
   1233                  utcSecs = osal_ConvertUTCSecs( &utc );
   \                     ??MT_SysSetUtcTime_3:
   \   0001C0                ; Setup parameters for call to function osal_ConvertUTCSecs
   \   0001C0   7401         MOV     A,#0x1
   \   0001C2   12....       LCALL   ?XSTACK_DISP101_8
   \   0001C5   12....       LCALL   `??osal_ConvertUTCSecs::?relay`; Banked call to: osal_ConvertUTCSecs
   \   0001C8   8A..         MOV     ?V8,R2
   \   0001CA   8B..         MOV     ?V9,R3
   \   0001CC   8C..         MOV     ?V10,R4
   \   0001CE   8D..         MOV     ?V11,R5
   \   0001D0   85....       MOV     ?V4,?V8
   \   0001D3   85....       MOV     ?V5,?V9
   \   0001D6   85....       MOV     ?V6,?V10
   \   0001D9   85....       MOV     ?V7,?V11
   1234                }
   1235              }
   1236            }
   1237          
   1238            if ( utcSecs == 0 )
   \                     ??MT_SysSetUtcTime_1:
   \   0001DC   E5..         MOV     A,?V4
   \   0001DE   45..         ORL     A,?V5
   \   0001E0   45..         ORL     A,?V6
   \   0001E2   45..         ORL     A,?V7
   \   0001E4   700B         JNZ     ??MT_SysSetUtcTime_7
   1239            {
   1240              /* Bad parameter(s) */
   1241              retStat = ZInvalidParameter;
   \   0001E6   85..82       MOV     DPL,?XSP + 0
   \   0001E9   85..83       MOV     DPH,?XSP + 1
   \   0001EC   7402         MOV     A,#0x2
   \   0001EE   F0           MOVX    @DPTR,A
   \   0001EF   8014         SJMP    ??MT_SysSetUtcTime_8
   1242            }
   1243            else
   1244            {
   1245              /* Parameters accepted, set the time */
   1246              osal_setClock( utcSecs );
   \                     ??MT_SysSetUtcTime_7:
   \   0001F1                ; Setup parameters for call to function osal_setClock
   \   0001F1   AA..         MOV     R2,?V4
   \   0001F3   AB..         MOV     R3,?V5
   \   0001F5   AC..         MOV     R4,?V6
   \   0001F7   AD..         MOV     R5,?V7
   \   0001F9   12....       LCALL   `??osal_setClock::?relay`; Banked call to: osal_setClock
   1247              retStat = ZSuccess;
   \   0001FC   85..82       MOV     DPL,?XSP + 0
   \   0001FF   85..83       MOV     DPH,?XSP + 1
   \   000202   7400         MOV     A,#0x0
   \   000204   F0           MOVX    @DPTR,A
   1248            }
   1249          
   1250            /* Build and send back the response */
   1251            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1252                                           cmdId, 1, &retStat);
   \                     ??MT_SysSetUtcTime_8:
   \   000205                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000205   AC..         MOV     R4,?XSP + 0
   \   000207   AD..         MOV     R5,?XSP + 1
   \   000209   7B01         MOV     R3,#0x1
   \   00020B   AA..         MOV     R2,?V0
   \   00020D   7961         MOV     R1,#0x61
   \   00020F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1253          }
   \   000212   7408         MOV     A,#0x8
   \   000214   12....       LCALL   ?DEALLOC_XSTACK8
   \   000217   7F0C         MOV     R7,#0xc
   \   000219   02....       LJMP    ?BANKED_LEAVE_XDATA
   1254          
   1255          /***************************************************************************************************
   1256           * @fn      MT_SysGetUtcTime
   1257           *
   1258           * @brief   Get the OSAL UTC time
   1259           *
   1260           * @param   None
   1261           *
   1262           * @return  32-bit and Parsed UTC time
   1263           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1264          void MT_SysGetUtcTime(void)
   \                     MT_SysGetUtcTime:
   1265          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1266            uint8 len;
   1267            uint8 *buf;
   1268          
   1269            len = sizeof( UTCTime ) + sizeof( UTCTimeStruct );
   \   00000A   75..0B       MOV     ?V10,#0xb
   1270          
   1271            buf = osal_mem_alloc( len );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   AA..         MOV     R2,?V10
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV     ?V0,R2
   \   000016   8B..         MOV     ?V1,R3
   \   000018   85....       MOV     ?V8,?V0
   \   00001B   85....       MOV     ?V9,?V1
   1272            if ( buf )
   \   00001E   E5..         MOV     A,?V8
   \   000020   45..         ORL     A,?V9
   \   000022   7003         JNZ     $+5
   \   000024   02....       LJMP    ??MT_SysGetUtcTime_0 & 0xFFFF
   1273            {
   1274              uint8 *pBuf;
   1275              UTCTime utcSecs;
   1276              UTCTimeStruct utcTime;
   1277          
   1278              // Get current 32-bit UTC time and parse it
   1279              utcSecs = osal_getClock();
   \   000027                ; Setup parameters for call to function osal_getClock
   \   000027   12....       LCALL   `??osal_getClock::?relay`; Banked call to: osal_getClock
   \   00002A   8A..         MOV     ?V0,R2
   \   00002C   8B..         MOV     ?V1,R3
   \   00002E   8C..         MOV     ?V2,R4
   \   000030   8D..         MOV     ?V3,R5
   \   000032   85....       MOV     ?V4,?V0
   \   000035   85....       MOV     ?V5,?V1
   \   000038   85....       MOV     ?V6,?V2
   \   00003B   85....       MOV     ?V7,?V3
   1280              osal_ConvertUTCTime( &utcTime, utcSecs );
   \   00003E                ; Setup parameters for call to function osal_ConvertUTCTime
   \   00003E   78..         MOV     R0,#?V4
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?XSTACK_DISP101_8
   \   000048   12....       LCALL   `??osal_ConvertUTCTime::?relay`; Banked call to: osal_ConvertUTCTime
   \   00004B   7404         MOV     A,#0x4
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   1281          
   1282              // Start with 32-bit UTC time
   1283              pBuf = osal_buffer_uint32( buf, utcSecs );
   \   000050                ; Setup parameters for call to function osal_buffer_uint32
   \   000050   78..         MOV     R0,#?V4
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000055   AA..         MOV     R2,?V8
   \   000057   AB..         MOV     R3,?V9
   \   000059   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   8A..         MOV     ?V0,R2
   \   000063   8B..         MOV     ?V1,R3
   \   000065   AE..         MOV     R6,?V0
   \   000067   AF..         MOV     R7,?V1
   1284          
   1285              // Concatenate parsed UTC time fields
   1286              *pBuf++ = utcTime.hour;
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   C0E0         PUSH    A
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   D0E0         POP     A
   \   000077   F0           MOVX    @DPTR,A
   \   000078   8E82         MOV     DPL,R6
   \   00007A   8F83         MOV     DPH,R7
   \   00007C   A3           INC     DPTR
   \   00007D   AE82         MOV     R6,DPL
   \   00007F   AF83         MOV     R7,DPH
   1287              *pBuf++ = utcTime.minutes;
   \   000081   7401         MOV     A,#0x1
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   E0           MOVX    A,@DPTR
   \   000087   C0E0         PUSH    A
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   D0E0         POP     A
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   A3           INC     DPTR
   \   000095   AE82         MOV     R6,DPL
   \   000097   AF83         MOV     R7,DPH
   1288              *pBuf++ = utcTime.seconds;
   \   000099   85..82       MOV     DPL,?XSP + 0
   \   00009C   85..83       MOV     DPH,?XSP + 1
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   C0E0         PUSH    A
   \   0000A2   8E82         MOV     DPL,R6
   \   0000A4   8F83         MOV     DPH,R7
   \   0000A6   D0E0         POP     A
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   8E82         MOV     DPL,R6
   \   0000AB   8F83         MOV     DPH,R7
   \   0000AD   A3           INC     DPTR
   \   0000AE   AE82         MOV     R6,DPL
   \   0000B0   AF83         MOV     R7,DPH
   1289              *pBuf++ = utcTime.month + 1;  // Convert to human numbers
   \   0000B2   7404         MOV     A,#0x4
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   2401         ADD     A,#0x1
   \   0000BA   C0E0         PUSH    A
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   D0E0         POP     A
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   8E82         MOV     DPL,R6
   \   0000C5   8F83         MOV     DPH,R7
   \   0000C7   A3           INC     DPTR
   \   0000C8   AE82         MOV     R6,DPL
   \   0000CA   AF83         MOV     R7,DPH
   1290              *pBuf++ = utcTime.day + 1;
   \   0000CC   7403         MOV     A,#0x3
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   2401         ADD     A,#0x1
   \   0000D4   C0E0         PUSH    A
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   D0E0         POP     A
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   A3           INC     DPTR
   \   0000E2   AE82         MOV     R6,DPL
   \   0000E4   AF83         MOV     R7,DPH
   1291              *pBuf++ = LO_UINT16( utcTime.year );
   \   0000E6   7405         MOV     A,#0x5
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F8           MOV     R0,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F9           MOV     R1,A
   \   0000F0   E8           MOV     A,R0
   \   0000F1   C0E0         PUSH    A
   \   0000F3   8E82         MOV     DPL,R6
   \   0000F5   8F83         MOV     DPH,R7
   \   0000F7   D0E0         POP     A
   \   0000F9   F0           MOVX    @DPTR,A
   \   0000FA   8E82         MOV     DPL,R6
   \   0000FC   8F83         MOV     DPH,R7
   \   0000FE   A3           INC     DPTR
   \   0000FF   AE82         MOV     R6,DPL
   \   000101   AF83         MOV     R7,DPH
   1292              *pBuf++ = HI_UINT16( utcTime.year );
   \   000103   7405         MOV     A,#0x5
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F8           MOV     R0,A
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   F9           MOV     R1,A
   \   00010D   E4           CLR     A
   \   00010E   C9           XCH     A,R1
   \   00010F   F8           MOV     R0,A
   \   000110   E8           MOV     A,R0
   \   000111   C0E0         PUSH    A
   \   000113   8E82         MOV     DPL,R6
   \   000115   8F83         MOV     DPH,R7
   \   000117   D0E0         POP     A
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   8E82         MOV     DPL,R6
   \   00011C   8F83         MOV     DPH,R7
   \   00011E   A3           INC     DPTR
   \   00011F   AE82         MOV     R6,DPL
   \   000121   AF83         MOV     R7,DPH
   1293          
   1294              /* Build and send back the response */
   1295              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1296                                             MT_SYS_GET_TIME, (uint8)(pBuf-buf), buf);
   \   000123                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000123   AC..         MOV     R4,?V8
   \   000125   AD..         MOV     R5,?V9
   \   000127   A8..         MOV     R0,?V8
   \   000129   EE           MOV     A,R6
   \   00012A   C3           CLR     C
   \   00012B   98           SUBB    A,R0
   \   00012C   FB           MOV     R3,A
   \   00012D   7A11         MOV     R2,#0x11
   \   00012F   7961         MOV     R1,#0x61
   \   000131   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1297          
   1298              osal_mem_free( buf );
   \   000134                ; Setup parameters for call to function osal_mem_free
   \   000134   AA..         MOV     R2,?V8
   \   000136   AB..         MOV     R3,?V9
   \   000138   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1299            }
   1300          }
   \                     ??MT_SysGetUtcTime_0:
   \   00013B   7407         MOV     A,#0x7
   \   00013D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000140   7F0B         MOV     R7,#0xb
   \   000142   02....       LJMP    ?BANKED_LEAVE_XDATA
   1301          
   1302          /***************************************************************************************************
   1303           * @fn      MT_SysSetTxPower
   1304           *
   1305           * @brief   Set the transmit power.
   1306           *
   1307           * @param   pBuf - MT message containing the ZMacTransmitPower_t power level to set.
   1308           *
   1309           * @return  None
   1310           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1311          void MT_SysSetTxPower(uint8 *pBuf)
   \                     MT_SysSetTxPower:
   1312          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1313            /* A local variable to hold the signed dBm value of TxPower that is being requested. */
   1314            uint8 signed_dBm_of_TxPower_requeseted;
   1315          
   1316            /*
   1317             * A local variable to hold the signed dBm value of TxPower that can be set which is closest to
   1318             * the requested dBm value of TxPower, but which is also valid according to a complex set of
   1319             * compile-time and run-time configuration which is interpreted by the macRadioSetTxPower()
   1320             * function.
   1321             */
   1322            uint8 signed_dBm_of_TxPower_range_corrected;
   1323          
   1324            /* Parse the requested dBm from the RPC message. */
   1325            signed_dBm_of_TxPower_requeseted = pBuf[MT_RPC_POS_DAT0];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C0E0         PUSH    A
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   1326          
   1327            /*
   1328             * MAC_MlmeSetReq() will store an out-of-range dBm parameter value into the NIB. So it is not
   1329             * possible to learn the actual dBm value that will be set by invoking MACMlmeGetReq().
   1330             * But this actual dBm value is a required return value in the SRSP to this SREQ. Therefore,
   1331             * it is necessary to make this redundant pre-call to macRadioSetTxPower() here in order to run
   1332             * the code that will properly constrain the requested dBm to a valid range based on both the
   1333             * compile-time and the run-time configurations that affect the available valid ranges
   1334             * (i.e. MAC_MlmeSetReq() itself will invoke for a second time the macRadioSetTxPower() function).
   1335             */
   1336            signed_dBm_of_TxPower_range_corrected = macRadioSetTxPower(signed_dBm_of_TxPower_requeseted);
   \   000021                ; Setup parameters for call to function macRadioSetTxPower
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   `??macRadioSetTxPower::?relay`; Banked call to: macRadioSetTxPower
   \   00002C   E9           MOV     A,R1
   \   00002D   C0E0         PUSH    A
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   F0           MOVX    @DPTR,A
   1337          
   1338            /*
   1339             * Call the function to store the requested dBm in the MAC PIB and to set the TxPower as closely
   1340             * as possible within the TxPower range that is valid for the compile-time and run-time
   1341             * configuration.
   1342             */
   1343            (void)MAC_MlmeSetReq(MAC_PHY_TRANSMIT_POWER_SIGNED, &signed_dBm_of_TxPower_requeseted);
   \   000037                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000037   AA..         MOV     R2,?XSP + 0
   \   000039   AB..         MOV     R3,?XSP + 1
   \   00003B   79E0         MOV     R1,#-0x20
   \   00003D   12....       LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   \   000040   E9           MOV     A,R1
   \   000041   F5..         MOV     ?V0,A
   1344          
   1345            /* Build and send back the response that includes the actual dBm TxPower that can be set. */
   1346            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1347                                                 MT_SYS_SET_TX_POWER, 1,
   1348                                                 &signed_dBm_of_TxPower_range_corrected);
   \   000043                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000043   7401         MOV     A,#0x1
   \   000045   12....       LCALL   ?XSTACK_DISP102_8
   \   000048   7B01         MOV     R3,#0x1
   \   00004A   7A14         MOV     R2,#0x14
   \   00004C   7961         MOV     R1,#0x61
   \   00004E   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1349          }
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   7F01         MOV     R7,#0x1
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
   1350          
   1351          #if defined ( FEATURE_SYSTEM_STATS )
   1352          /***************************************************************************************************
   1353           * @fn      MT_SysZDiagsInitStats
   1354           *
   1355           * @brief   Initialize the statistics table in NV or restore values from
   1356           *          NV into the Statistics table in RAM
   1357           *
   1358           * @param   None
   1359           *
   1360           * @return  None
   1361           ***************************************************************************************************/
   1362          void MT_SysZDiagsInitStats(void)
   1363          {
   1364            uint8 retValue;
   1365          
   1366            retValue = ZDiagsInitStats();
   1367          
   1368            /* Build and send back the response */
   1369            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1370                                          MT_SYS_ZDIAGS_INIT_STATS, 1, &retValue);
   1371          }
   1372          
   1373          /***************************************************************************************************
   1374           * @fn      MT_SysZDiagsClearStats
   1375           *
   1376           * @brief   Clears the statistics table in RAM and NV if option flag set.
   1377           *
   1378           * @param   uint8 pBuf - pointer to the data
   1379           *
   1380           * @return  None
   1381           ***************************************************************************************************/
   1382          void MT_SysZDiagsClearStats(uint8 *pBuf)
   1383          {
   1384            uint8 cmdId;
   1385            uint8 clearNV;
   1386            uint32 sysClock;
   1387            uint8 retBuf[4];
   1388          
   1389            /* parse header */
   1390            cmdId = pBuf[MT_RPC_POS_CMD1];
   1391            pBuf += MT_RPC_FRAME_HDR_SZ;
   1392          
   1393            clearNV = *pBuf;
   1394          
   1395            /* returns the system clock of the time when the statistics were cleared */
   1396            sysClock = ZDiagsClearStats( clearNV );
   1397          
   1398            retBuf[0] = BREAK_UINT32( sysClock, 0);
   1399            retBuf[1] = BREAK_UINT32( sysClock, 1);
   1400            retBuf[2] = BREAK_UINT32( sysClock, 2);
   1401            retBuf[3] = BREAK_UINT32( sysClock, 3);
   1402          
   1403            /* Build and send back the response */
   1404            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1405                                         cmdId, 4, retBuf);
   1406          }
   1407          
   1408          /***************************************************************************************************
   1409           * @fn      MT_SysZDiagsGetStatsAttr
   1410           *
   1411           * @brief   Reads specific system (attribute) ID statistics and/or metrics.
   1412           *
   1413           * @param   uint8 pBuf - pointer to the data
   1414           *
   1415           * @return  None
   1416           ***************************************************************************************************/
   1417          void MT_SysZDiagsGetStatsAttr(uint8 *pBuf)
   1418          {
   1419            uint8 cmdId;
   1420            uint16 attributeId;
   1421            uint32 attrValue;
   1422            uint8 retBuf[4];
   1423          
   1424            /* parse header */
   1425            cmdId = pBuf[MT_RPC_POS_CMD1];
   1426            pBuf += MT_RPC_FRAME_HDR_SZ;
   1427          
   1428            /* Get the Attribute ID */
   1429            attributeId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1430          
   1431            attrValue = ZDiagsGetStatsAttr( attributeId );
   1432          
   1433            retBuf[0] = BREAK_UINT32( attrValue, 0);
   1434            retBuf[1] = BREAK_UINT32( attrValue, 1);
   1435            retBuf[2] = BREAK_UINT32( attrValue, 2);
   1436            retBuf[3] = BREAK_UINT32( attrValue, 3);
   1437          
   1438            /* Build and send back the response */
   1439            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1440                                         cmdId, 4, retBuf);
   1441          }
   1442          
   1443          /***************************************************************************************************
   1444           * @fn      MT_SysZDiagsRestoreStatsFromNV
   1445           *
   1446           * @brief   Restores the statistics table from NV into the RAM table.
   1447           *
   1448           * @param   None
   1449           *
   1450           * @return  None
   1451           ***************************************************************************************************/
   1452          void MT_SysZDiagsRestoreStatsFromNV(void)
   1453          {
   1454            uint8 retValue;
   1455          
   1456            retValue = ZDiagsRestoreStatsFromNV();
   1457          
   1458            /* Build and send back the response */
   1459            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1460                                          MT_SYS_ZDIAGS_RESTORE_STATS_NV, 1, &retValue);
   1461          }
   1462          
   1463          /***************************************************************************************************
   1464           * @fn      MT_SysZDiagsSaveStatsToNV
   1465           *
   1466           * @brief   Saves the statistics table from RAM to NV.
   1467           *
   1468           * @param   None
   1469           *
   1470           * @return  None
   1471           ***************************************************************************************************/
   1472          void MT_SysZDiagsSaveStatsToNV(void)
   1473          {
   1474            uint32 sysClock;
   1475            uint8 retBuf[4];
   1476          
   1477            /* returns the system clock of the time when the statistics were saved to NV */
   1478            sysClock = ZDiagsSaveStatsToNV();
   1479          
   1480            retBuf[0] = BREAK_UINT32( sysClock, 0);
   1481            retBuf[1] = BREAK_UINT32( sysClock, 1);
   1482            retBuf[2] = BREAK_UINT32( sysClock, 2);
   1483            retBuf[3] = BREAK_UINT32( sysClock, 3);
   1484          
   1485            /* Build and send back the response */
   1486            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1487                                         MT_SYS_ZDIAGS_SAVE_STATS_TO_NV, 4, retBuf);
   1488          }
   1489          #endif /* FEATURE_SYSTEM_STATS */
   1490          
   1491          #endif /* MT_SYS_FUNC */
   1492          
   1493          /***************************************************************************************************
   1494           * SUPPORT
   1495           ***************************************************************************************************/
   1496          
   1497          /***************************************************************************************************
   1498           * @fn      MT_SysResetInd()
   1499           *
   1500           * @brief   Sends a ZTOOL "reset response" message.
   1501           *
   1502           * @param   None
   1503           *
   1504           * @return  None
   1505           *
   1506           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1507          void MT_SysResetInd(void)
   \                     MT_SysResetInd:
   1508          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1509          #if 0   //chaokw
   1510            uint8 retArray[6];
   1511          
   1512            retArray[0] = ResetReason();   /* Reason */
   1513            osal_memcpy( &retArray[1], MTVersionString, 5 );   /* Revision info */
   1514            /* Send out Reset Response message */
   1515            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_RESET_IND,
   1516                                          sizeof(retArray), retArray);
   1517          #endif
   1518          }
   \   000000   02....       LJMP    ?BRET
   1519          
   1520          /***************************************************************************************************
   1521           * @fn      MT_SysOsalTimerExpired()
   1522           *
   1523           * @brief   Sends a SYS Osal Timer Expired
   1524           *
   1525           * @param   None
   1526           *
   1527           * @return  None
   1528           *
   1529           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1530          void MT_SysOsalTimerExpired(uint8 Id)
   \                     MT_SysOsalTimerExpired:
   1531          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   1532            uint8 retValue;
   1533            retValue = Id;
   \   00000C   EE           MOV     A,R6
   \   00000D   C0E0         PUSH    A
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   D0E0         POP     A
   \   000017   F0           MOVX    @DPTR,A
   1534            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_OSAL_TIMER_EXPIRED, 1, &retValue);
   \   000018                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000018   AC..         MOV     R4,?XSP + 0
   \   00001A   AD..         MOV     R5,?XSP + 1
   \   00001C   7B01         MOV     R3,#0x1
   \   00001E   7A81         MOV     R2,#-0x7f
   \   000020   7941         MOV     R1,#0x41
   \   000022   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1535          }
   \   000025   7401         MOV     A,#0x1
   \   000027   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002A   7F01         MOV     R7,#0x1
   \   00002C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1536          
   1537          #if defined ( MT_SYS_JAMMER_FEATURE )
   1538          /***************************************************************************************************
   1539           * @fn      MT_SysJammerParameters
   1540           *
   1541           * @brief   Set the Jammer detection parameters.
   1542           *
   1543           * @param   pBuf - MT message containing the parameters.
   1544           *
   1545           * @return  None
   1546           ***************************************************************************************************/
   1547          void MT_SysJammerParameters( uint8 *pBuf )
   1548          {
   1549            uint8 status = SUCCESS;
   1550            
   1551            // Adjust for the data
   1552            pBuf += MT_RPC_FRAME_HDR_SZ;
   1553            
   1554            // Number of continuous events needed to detect Jam
   1555            jammerContinuousEvents = BUILD_UINT16( pBuf[0], pBuf[1] );
   1556            jammerDetections = jammerContinuousEvents;
   1557            pBuf += 2;
   1558            
   1559            // Noise Level need to be a Jam
   1560            jammerHighNoiseLevel = *pBuf++;
   1561            
   1562            // The time between each noise level reading
   1563            jammerDetectPeriodTime = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   1564            
   1565            // Update the timer
   1566            osal_start_reload_timer( jammerTaskID, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
   1567            
   1568            /* Build and send back the response that includes the actual dBm TxPower that can be set. */
   1569            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1570                                                 MT_SYS_JAMMER_PARAMETERS, 1, &status );
   1571          }
   1572          
   1573          /***************************************************************************************************
   1574           * @fn      MT_SysJammerInd()
   1575           *
   1576           * @brief   Sends a jammer indication message.
   1577           *
   1578           * @param   jammerInd - TRUE if jammer detected, FALSE if changed to undetected
   1579           *
   1580           * @return  None
   1581           *
   1582           ***************************************************************************************************/
   1583          void MT_SysJammerInd( uint8 jammerInd )
   1584          {
   1585            /* Send out Reset Response message */
   1586            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_JAMMER_IND,
   1587                                          1, &jammerInd );
   1588          }
   1589          
   1590          /***************************************************************************************************
   1591           * @fn      jammerInit()
   1592           *
   1593           * @brief   Jammer Detection task initialization function
   1594           *
   1595           * @param   taskId - task ID 
   1596           *
   1597           * @return  None
   1598           *
   1599           ***************************************************************************************************/
   1600          void jammerInit( uint8 taskId )
   1601          {
   1602            jammerTaskID = taskId; 
   1603            
   1604            // Start the jammer check timer
   1605            osal_start_reload_timer( taskId, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
   1606          }
   1607          
   1608          /***************************************************************************************************
   1609           * @fn      jammerEventLoop()
   1610           *
   1611           * @brief   Jammer Detection task event processing function
   1612           *
   1613           * @param   taskId - task ID 
   1614           * @param   events - task events 
   1615           *
   1616           * @return  remaining events
   1617           *
   1618           ***************************************************************************************************/
   1619          uint16 jammerEventLoop( uint8 taskId, uint16 events )
   1620          {
   1621            osal_event_hdr_t  *pMsg;
   1622          
   1623            if (events & SYS_EVENT_MSG)
   1624            {
   1625              if ( (pMsg = (osal_event_hdr_t *) osal_msg_receive( taskId )) != NULL )
   1626              {
   1627                switch ( pMsg->event )
   1628                {
   1629                  default:
   1630                    break;
   1631                }
   1632          
   1633                osal_msg_deallocate( (byte *)pMsg );
   1634              }
   1635          
   1636              events ^= SYS_EVENT_MSG;
   1637            }
   1638            else if ( events & JAMMER_CHECK_EVT )
   1639            {
   1640              // Make sure we aren't currently receiving a message
   1641              // and the radio is active.
   1642              if ( MAC_RX_IS_PHYSICALLY_ACTIVE() == MAC_RX_ACTIVE_NO_ACTIVITY )
   1643              {
   1644                int8 rssiDbm = -128;
   1645                
   1646                // Read the noise level
   1647                if ( RSSISTAT & 0x01 )
   1648                {
   1649                  /* Add the RSSI offset */  
   1650                  rssiDbm = RSSI + MAC_RADIO_RSSI_OFFSET;
   1651          
   1652                  /* Adjust for external PA/LNA, if any */
   1653                  MAC_RADIO_RSSI_LNA_OFFSET( rssiDbm );
   1654                
   1655                  // Check for a noise level that's high
   1656                  if ( jammerDetections && (rssiDbm  > jammerHighNoiseLevel) )
   1657                  {
   1658                    jammerDetections--;
   1659                    if ( jammerDetections == 0 )
   1660                    {
   1661                      // Jam detected
   1662                      MT_SysJammerInd( TRUE );
   1663                    }
   1664                  }
   1665                  else if ( rssiDbm <= jammerHighNoiseLevel )
   1666                  {
   1667                    if ( jammerDetections == 0 )
   1668                    {
   1669                      // Jam cleared
   1670                      MT_SysJammerInd( FALSE );
   1671                    }
   1672                    jammerDetections = jammerContinuousEvents;
   1673                  }
   1674                }
   1675              }
   1676              events ^= JAMMER_CHECK_EVT;
   1677            }
   1678            else
   1679            {
   1680              events = 0;  /* Discard unknown events. */
   1681            }
   1682          
   1683            return ( events );
   1684          }
   1685          #endif // MT_SYS_JAMMER_FEATURE
   1686          
   1687          #if defined ( MT_SYS_SNIFFER_FEATURE )
   1688          /***************************************************************************************************
   1689           * @fn      MT_SysSnifferParameters
   1690           *
   1691           * @brief   Set the sniffer parameters.
   1692           *
   1693           * @param   pBuf - MT message containing the parameters.
   1694           *
   1695           * @return  None
   1696           ***************************************************************************************************/
   1697          void MT_SysSnifferParameters( uint8 *pBuf )
   1698          {
   1699            uint8 status = SUCCESS;
   1700            uint8 param;
   1701            
   1702            // Adjust for the data
   1703            pBuf += MT_RPC_FRAME_HDR_SZ;
   1704            
   1705            // Noise Level need to be a Jam
   1706            param = *pBuf++;
   1707            
   1708            if ( param == MT_SYS_SNIFFER_DISABLE )
   1709            {
   1710              // Disable Sniffer
   1711              HAL_BOARD_DISABLE_INTEGRATED_SNIFFER();
   1712              sniffer = FALSE;
   1713            }
   1714            else if ( param == MT_SYS_SNIFFER_ENABLE )
   1715            {
   1716              // Enable the Sniffer
   1717              HAL_BOARD_ENABLE_INTEGRATED_SNIFFER();
   1718              sniffer = TRUE;
   1719            }
   1720            else if ( param == MT_SYS_SNIFFER_GET_SETTING )
   1721            {
   1722              status = sniffer; // sniffer setting
   1723            }
   1724            else 
   1725            {
   1726              status = INVALIDPARAMETER;
   1727            }
   1728            
   1729            /* Build and send back the response that includes the actual dBm TxPower that can be set. */
   1730            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1731                                                 MT_SYS_SNIFFER_PARAMETERS, 1, &status );
   1732          }
   1733          #endif // MT_SYS_SNIFFER_FEATURE
   1734          
   1735          /**************************************************************************************************
   1736           * @fn          powerOffSoc
   1737           *
   1738           * @brief       put the device in lowest power mode infinitely.
   1739           *
   1740           * input parameters
   1741           *
   1742           * None.
   1743           *
   1744           * output parameters
   1745           *
   1746           * None.
   1747           *
   1748           * @return      None.
   1749           **************************************************************************************************
   1750           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1751          void powerOffSoc(void)
   \                     powerOffSoc:
   1752          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1753          #ifdef ENABLE_MT_SYS_RESET_SHUTDOWN
   1754            HAL_DISABLE_INTERRUPTS();
   1755          
   1756            /* turn off the RF front end device */
   1757            //TBD, based on the rf-front-end being used
   1758          
   1759            /* turn off the receiver */
   1760            MAC_RADIO_RXTX_OFF();
   1761            
   1762            /* just in case a receive was about to start, flush the receive FIFO */
   1763            MAC_RADIO_FLUSH_RX_FIFO();
   1764            
   1765            /* clear any receive interrupt that happened to squeak through */
   1766            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   1767            
   1768            /* put MAC timer to sleep */
   1769            MAC_RADIO_TIMER_SLEEP();
   1770            
   1771            /* power of radio */
   1772            MAC_RADIO_TURN_OFF_POWER();
   1773            
   1774            STIF = 0; //HAL_SLEEP_TIMER_CLEAR_INT;
   1775            
   1776            if (ZNP_CFG1_UART == znpCfg1)
   1777            {
   1778              HalUARTSuspend();
   1779            }
   1780            
   1781            /* Prep CC2530 power mode */
   1782            //HAL_SLEEP_PREP_POWER_MODE(3);
   1783            SLEEPCMD &= ~PMODE; /* clear mode bits */
   1784            SLEEPCMD |= 3;      /* set mode bits  to PM3 */
   1785            while (!(STLOAD & LDRDY));
   1786            
   1787            while (1) //just in case we wake up for some unknown reason
   1788            {
   1789              PCON = halSleepPconValue; //execution is suppose to halt with this command. Interrupts are disabled, so the only way to exit this state is using a hardware reset.
   1790              asm("NOP");
   1791            }
   1792          #endif
   1793          }
   \   000000   02....       LJMP    ?BRET
   1794          
   1795          
   1796          //chaokw

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1797          void MT_SysP2PTransfer(uint8 *pBuf)
   \                     MT_SysP2PTransfer:
   1798          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1799              afIncomingMSGPacket_t *MSGpkt;
   1800              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN); 
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   85..82       MOV     DPL,?V0
   \   00000C   85..83       MOV     DPH,?V1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   7900         MOV     R1,#0x0
   \   000013   E8           MOV     A,R0
   \   000014   242A         ADD     A,#0x2a
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00001D   8A..         MOV     ?V2,R2
   \   00001F   8B..         MOV     ?V3,R3
   \   000021   AE..         MOV     R6,?V2
   \   000023   AF..         MOV     R7,?V3
   1801              if(MSGpkt == NULL)
   \   000025   EE           MOV     A,R6
   \   000026   4F           ORL     A,R7
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??MT_SysP2PTransfer_0 & 0xFFFF
   1802              {
   1803                  return;
   1804              }	
   1805          	
   1806              MSGpkt->hdr.event = ZDO_P2P_REQ;	
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   74E1         MOV     A,#-0x1f
   \   000032   F0           MOVX    @DPTR,A
   1807              MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN ;   //cmd+len,  no 0xfe
   \   000033   85..82       MOV     DPL,?V0
   \   000036   85..83       MOV     DPH,?V1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   E8           MOV     A,R0
   \   00003E   2403         ADD     A,#0x3
   \   000040   F8           MOV     R0,A
   \   000041   5001         JNC     ??MT_SysP2PTransfer_1
   \   000043   09           INC     R1
   \                     ??MT_SysP2PTransfer_1:
   \   000044   EE           MOV     A,R6
   \   000045   2420         ADD     A,#0x20
   \   000047   F582         MOV     DPL,A
   \   000049   E4           CLR     A
   \   00004A   3F           ADDC    A,R7
   \   00004B   F583         MOV     DPH,A
   \   00004D   E8           MOV     A,R0
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   E9           MOV     A,R1
   \   000051   F0           MOVX    @DPTR,A
   1808              if ( MSGpkt->cmd.DataLength )
   \   000052   EE           MOV     A,R6
   \   000053   2420         ADD     A,#0x20
   \   000055   F582         MOV     DPL,A
   \   000057   E4           CLR     A
   \   000058   3F           ADDC    A,R7
   \   000059   F583         MOV     DPH,A
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   E8           MOV     A,R0
   \   000061   49           ORL     A,R1
   \   000062   6049         JZ      ??MT_SysP2PTransfer_2
   1809              {
   1810                  MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   000064   EE           MOV     A,R6
   \   000065   2427         ADD     A,#0x27
   \   000067   F8           MOV     R0,A
   \   000068   E4           CLR     A
   \   000069   3F           ADDC    A,R7
   \   00006A   F9           MOV     R1,A
   \   00006B   EE           MOV     A,R6
   \   00006C   2422         ADD     A,#0x22
   \   00006E   F582         MOV     DPL,A
   \   000070   E4           CLR     A
   \   000071   3F           ADDC    A,R7
   \   000072   F583         MOV     DPH,A
   \   000074   E8           MOV     A,R0
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   E9           MOV     A,R1
   \   000078   F0           MOVX    @DPTR,A
   1811                  osal_memcpy(MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_LEN], MSGpkt->cmd.DataLength);  
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   85....       MOV     ?V4,?V0
   \   00007C   85....       MOV     ?V5,?V1
   \   00007F   75..00       MOV     ?V6,#0x0
   \   000082   78..         MOV     R0,#?V4
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   EE           MOV     A,R6
   \   000088   2420         ADD     A,#0x20
   \   00008A   F582         MOV     DPL,A
   \   00008C   E4           CLR     A
   \   00008D   3F           ADDC    A,R7
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FC           MOV     R4,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   FD           MOV     R5,A
   \   000095   EE           MOV     A,R6
   \   000096   2422         ADD     A,#0x22
   \   000098   F582         MOV     DPL,A
   \   00009A   E4           CLR     A
   \   00009B   3F           ADDC    A,R7
   \   00009C   F583         MOV     DPH,A
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FA           MOV     R2,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FB           MOV     R3,A
   \   0000A3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A6   7403         MOV     A,#0x3
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   8010         SJMP    ??MT_SysP2PTransfer_3
   1812              }
   1813              else
   1814              {
   1815                  MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysP2PTransfer_2:
   \   0000AD   EE           MOV     A,R6
   \   0000AE   2422         ADD     A,#0x22
   \   0000B0   F582         MOV     DPL,A
   \   0000B2   E4           CLR     A
   \   0000B3   3F           ADDC    A,R7
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   7400         MOV     A,#0x0
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   7400         MOV     A,#0x0
   \   0000BC   F0           MOVX    @DPTR,A
   1816              }	
   1817              osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   \                     ??MT_SysP2PTransfer_3:
   \   0000BD                ; Setup parameters for call to function osal_msg_send
   \   0000BD   EE           MOV     A,R6
   \   0000BE   FA           MOV     R2,A
   \   0000BF   EF           MOV     A,R7
   \   0000C0   FB           MOV     R3,A
   \   0000C1   90....       MOV     DPTR,#GenericApp_TaskID
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000C9   E9           MOV     A,R1
   1818          }
   \                     ??MT_SysP2PTransfer_0:
   \   0000CA   7F07         MOV     R7,#0x7
   \   0000CC   02....       LJMP    ?BANKED_LEAVE_XDATA
   1819          
   1820          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1821          void MT_SysBroadCastTransfer(uint8 *pBuf)
   \                     MT_SysBroadCastTransfer:
   1822          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1823                afIncomingMSGPacket_t *MSGpkt;
   1824                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN); 
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   85..82       MOV     DPL,?V0
   \   00000C   85..83       MOV     DPH,?V1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   7900         MOV     R1,#0x0
   \   000013   E8           MOV     A,R0
   \   000014   242A         ADD     A,#0x2a
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00001D   8A..         MOV     ?V2,R2
   \   00001F   8B..         MOV     ?V3,R3
   \   000021   AE..         MOV     R6,?V2
   \   000023   AF..         MOV     R7,?V3
   1825                if(MSGpkt == NULL)
   \   000025   EE           MOV     A,R6
   \   000026   4F           ORL     A,R7
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??MT_SysBroadCastTransfer_0 & 0xFFFF
   1826                {
   1827          	  return;
   1828                }
   1829          
   1830                MSGpkt->hdr.event = ZDO_BROADCAST_REQ;
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   74EA         MOV     A,#-0x16
   \   000032   F0           MOVX    @DPTR,A
   1831                MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN; 
   \   000033   85..82       MOV     DPL,?V0
   \   000036   85..83       MOV     DPH,?V1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   E8           MOV     A,R0
   \   00003E   2403         ADD     A,#0x3
   \   000040   F8           MOV     R0,A
   \   000041   5001         JNC     ??MT_SysBroadCastTransfer_1
   \   000043   09           INC     R1
   \                     ??MT_SysBroadCastTransfer_1:
   \   000044   EE           MOV     A,R6
   \   000045   2420         ADD     A,#0x20
   \   000047   F582         MOV     DPL,A
   \   000049   E4           CLR     A
   \   00004A   3F           ADDC    A,R7
   \   00004B   F583         MOV     DPH,A
   \   00004D   E8           MOV     A,R0
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   E9           MOV     A,R1
   \   000051   F0           MOVX    @DPTR,A
   1832                if ( MSGpkt->cmd.DataLength )
   \   000052   EE           MOV     A,R6
   \   000053   2420         ADD     A,#0x20
   \   000055   F582         MOV     DPL,A
   \   000057   E4           CLR     A
   \   000058   3F           ADDC    A,R7
   \   000059   F583         MOV     DPH,A
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   E8           MOV     A,R0
   \   000061   49           ORL     A,R1
   \   000062   6049         JZ      ??MT_SysBroadCastTransfer_2
   1833                {
   1834          	   MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   000064   EE           MOV     A,R6
   \   000065   2427         ADD     A,#0x27
   \   000067   F8           MOV     R0,A
   \   000068   E4           CLR     A
   \   000069   3F           ADDC    A,R7
   \   00006A   F9           MOV     R1,A
   \   00006B   EE           MOV     A,R6
   \   00006C   2422         ADD     A,#0x22
   \   00006E   F582         MOV     DPL,A
   \   000070   E4           CLR     A
   \   000071   3F           ADDC    A,R7
   \   000072   F583         MOV     DPH,A
   \   000074   E8           MOV     A,R0
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   E9           MOV     A,R1
   \   000078   F0           MOVX    @DPTR,A
   1835          	   osal_memcpy(MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_LEN], MSGpkt->cmd.DataLength);  
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   85....       MOV     ?V4,?V0
   \   00007C   85....       MOV     ?V5,?V1
   \   00007F   75..00       MOV     ?V6,#0x0
   \   000082   78..         MOV     R0,#?V4
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   EE           MOV     A,R6
   \   000088   2420         ADD     A,#0x20
   \   00008A   F582         MOV     DPL,A
   \   00008C   E4           CLR     A
   \   00008D   3F           ADDC    A,R7
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FC           MOV     R4,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   FD           MOV     R5,A
   \   000095   EE           MOV     A,R6
   \   000096   2422         ADD     A,#0x22
   \   000098   F582         MOV     DPL,A
   \   00009A   E4           CLR     A
   \   00009B   3F           ADDC    A,R7
   \   00009C   F583         MOV     DPH,A
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FA           MOV     R2,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FB           MOV     R3,A
   \   0000A3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A6   7403         MOV     A,#0x3
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   8010         SJMP    ??MT_SysBroadCastTransfer_3
   1836                }
   1837                else
   1838                {
   1839           	   MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysBroadCastTransfer_2:
   \   0000AD   EE           MOV     A,R6
   \   0000AE   2422         ADD     A,#0x22
   \   0000B0   F582         MOV     DPL,A
   \   0000B2   E4           CLR     A
   \   0000B3   3F           ADDC    A,R7
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   7400         MOV     A,#0x0
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   7400         MOV     A,#0x0
   \   0000BC   F0           MOVX    @DPTR,A
   1840                }	
   1841                osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   \                     ??MT_SysBroadCastTransfer_3:
   \   0000BD                ; Setup parameters for call to function osal_msg_send
   \   0000BD   EE           MOV     A,R6
   \   0000BE   FA           MOV     R2,A
   \   0000BF   EF           MOV     A,R7
   \   0000C0   FB           MOV     R3,A
   \   0000C1   90....       MOV     DPTR,#GenericApp_TaskID
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000C9   E9           MOV     A,R1
   1842          }
   \                     ??MT_SysBroadCastTransfer_0:
   \   0000CA   7F07         MOV     R7,#0x7
   \   0000CC   02....       LJMP    ?BANKED_LEAVE_XDATA
   1843          
   1844          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1845          void MT_SysGroupTransfer(uint8 *pBuf)  //chaokw
   \                     MT_SysGroupTransfer:
   1846          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1847              afIncomingMSGPacket_t *MSGpkt;
   1848              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN); 
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   85..82       MOV     DPL,?V0
   \   00000C   85..83       MOV     DPH,?V1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   7900         MOV     R1,#0x0
   \   000013   E8           MOV     A,R0
   \   000014   242A         ADD     A,#0x2a
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00001D   8A..         MOV     ?V2,R2
   \   00001F   8B..         MOV     ?V3,R3
   \   000021   AE..         MOV     R6,?V2
   \   000023   AF..         MOV     R7,?V3
   1849              if(MSGpkt == NULL)
   \   000025   EE           MOV     A,R6
   \   000026   4F           ORL     A,R7
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??MT_SysGroupTransfer_0 & 0xFFFF
   1850              {
   1851                  return;
   1852              }
   1853          	
   1854              MSGpkt->hdr.event = ZDO_GROUP_REQ;
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   74E3         MOV     A,#-0x1d
   \   000032   F0           MOVX    @DPTR,A
   1855              MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN] + MT_UART_HEAD_LEN;
   \   000033   85..82       MOV     DPL,?V0
   \   000036   85..83       MOV     DPH,?V1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   E8           MOV     A,R0
   \   00003E   2403         ADD     A,#0x3
   \   000040   F8           MOV     R0,A
   \   000041   5001         JNC     ??MT_SysGroupTransfer_1
   \   000043   09           INC     R1
   \                     ??MT_SysGroupTransfer_1:
   \   000044   EE           MOV     A,R6
   \   000045   2420         ADD     A,#0x20
   \   000047   F582         MOV     DPL,A
   \   000049   E4           CLR     A
   \   00004A   3F           ADDC    A,R7
   \   00004B   F583         MOV     DPH,A
   \   00004D   E8           MOV     A,R0
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   E9           MOV     A,R1
   \   000051   F0           MOVX    @DPTR,A
   1856              if ( MSGpkt->cmd.DataLength )
   \   000052   EE           MOV     A,R6
   \   000053   2420         ADD     A,#0x20
   \   000055   F582         MOV     DPL,A
   \   000057   E4           CLR     A
   \   000058   3F           ADDC    A,R7
   \   000059   F583         MOV     DPH,A
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   E8           MOV     A,R0
   \   000061   49           ORL     A,R1
   \   000062   6049         JZ      ??MT_SysGroupTransfer_2
   1857              {
   1858                  MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   000064   EE           MOV     A,R6
   \   000065   2427         ADD     A,#0x27
   \   000067   F8           MOV     R0,A
   \   000068   E4           CLR     A
   \   000069   3F           ADDC    A,R7
   \   00006A   F9           MOV     R1,A
   \   00006B   EE           MOV     A,R6
   \   00006C   2422         ADD     A,#0x22
   \   00006E   F582         MOV     DPL,A
   \   000070   E4           CLR     A
   \   000071   3F           ADDC    A,R7
   \   000072   F583         MOV     DPH,A
   \   000074   E8           MOV     A,R0
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   E9           MOV     A,R1
   \   000078   F0           MOVX    @DPTR,A
   1859                  osal_memcpy(MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_LEN], MSGpkt->cmd.DataLength);  
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   85....       MOV     ?V4,?V0
   \   00007C   85....       MOV     ?V5,?V1
   \   00007F   75..00       MOV     ?V6,#0x0
   \   000082   78..         MOV     R0,#?V4
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   EE           MOV     A,R6
   \   000088   2420         ADD     A,#0x20
   \   00008A   F582         MOV     DPL,A
   \   00008C   E4           CLR     A
   \   00008D   3F           ADDC    A,R7
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FC           MOV     R4,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   FD           MOV     R5,A
   \   000095   EE           MOV     A,R6
   \   000096   2422         ADD     A,#0x22
   \   000098   F582         MOV     DPL,A
   \   00009A   E4           CLR     A
   \   00009B   3F           ADDC    A,R7
   \   00009C   F583         MOV     DPH,A
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FA           MOV     R2,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FB           MOV     R3,A
   \   0000A3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A6   7403         MOV     A,#0x3
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   8010         SJMP    ??MT_SysGroupTransfer_3
   1860              }
   1861              else
   1862              {
   1863                  MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysGroupTransfer_2:
   \   0000AD   EE           MOV     A,R6
   \   0000AE   2422         ADD     A,#0x22
   \   0000B0   F582         MOV     DPL,A
   \   0000B2   E4           CLR     A
   \   0000B3   3F           ADDC    A,R7
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   7400         MOV     A,#0x0
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   7400         MOV     A,#0x0
   \   0000BC   F0           MOVX    @DPTR,A
   1864              }	
   1865              osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   \                     ??MT_SysGroupTransfer_3:
   \   0000BD                ; Setup parameters for call to function osal_msg_send
   \   0000BD   EE           MOV     A,R6
   \   0000BE   FA           MOV     R2,A
   \   0000BF   EF           MOV     A,R7
   \   0000C0   FB           MOV     R3,A
   \   0000C1   90....       MOV     DPTR,#GenericApp_TaskID
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000C9   E9           MOV     A,R1
   1866          }
   \                     ??MT_SysGroupTransfer_0:
   \   0000CA   7F07         MOV     R7,#0x7
   \   0000CC   02....       LJMP    ?BANKED_LEAVE_XDATA
   1867          
   1868          
   1869          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1870          static void MT_SysChannelUpdate( uint8 *pBuf )
   \                     MT_SysChannelUpdate:
   1871          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1872          	afIncomingMSGPacket_t *MSGpkt;
   1873          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t )  + pBuf[MT_RPC_POS_LEN] );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   85..82       MOV     DPL,?V0
   \   00000C   85..83       MOV     DPH,?V1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   7900         MOV     R1,#0x0
   \   000013   E8           MOV     A,R0
   \   000014   2427         ADD     A,#0x27
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00001D   8A..         MOV     ?V2,R2
   \   00001F   8B..         MOV     ?V3,R3
   \   000021   AE..         MOV     R6,?V2
   \   000023   AF..         MOV     R7,?V3
   1874          	if ( MSGpkt == NULL )
   \   000025   EE           MOV     A,R6
   \   000026   4F           ORL     A,R7
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??MT_SysChannelUpdate_0 & 0xFFFF
   1875          	{
   1876          		return;
   1877          	}
   1878          	MSGpkt->hdr.event = ZDO_CHANNEL_UPDATE;
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   74E6         MOV     A,#-0x1a
   \   000032   F0           MOVX    @DPTR,A
   1879          	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
   \   000033   85..82       MOV     DPL,?V0
   \   000036   85..83       MOV     DPH,?V1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   EE           MOV     A,R6
   \   00003E   2420         ADD     A,#0x20
   \   000040   F582         MOV     DPL,A
   \   000042   E4           CLR     A
   \   000043   3F           ADDC    A,R7
   \   000044   F583         MOV     DPH,A
   \   000046   E8           MOV     A,R0
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E9           MOV     A,R1
   \   00004A   F0           MOVX    @DPTR,A
   1880          	if ( MSGpkt->cmd.DataLength )
   \   00004B   EE           MOV     A,R6
   \   00004C   2420         ADD     A,#0x20
   \   00004E   F582         MOV     DPL,A
   \   000050   E4           CLR     A
   \   000051   3F           ADDC    A,R7
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   6055         JZ      ??MT_SysChannelUpdate_1
   1881          	{
   1882          		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   00005D   EE           MOV     A,R6
   \   00005E   2427         ADD     A,#0x27
   \   000060   F8           MOV     R0,A
   \   000061   E4           CLR     A
   \   000062   3F           ADDC    A,R7
   \   000063   F9           MOV     R1,A
   \   000064   EE           MOV     A,R6
   \   000065   2422         ADD     A,#0x22
   \   000067   F582         MOV     DPL,A
   \   000069   E4           CLR     A
   \   00006A   3F           ADDC    A,R7
   \   00006B   F583         MOV     DPH,A
   \   00006D   E8           MOV     A,R0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   F0           MOVX    @DPTR,A
   1883          		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
   \   000072                ; Setup parameters for call to function osal_memcpy
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A982         MOV     R1,DPL
   \   00007D   AA83         MOV     R2,DPH
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   89..         MOV     ?V4,R1
   \   000083   8A..         MOV     ?V5,R2
   \   000085   8B..         MOV     ?V6,R3
   \   000087   78..         MOV     R0,#?V4
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008C   EE           MOV     A,R6
   \   00008D   2420         ADD     A,#0x20
   \   00008F   F582         MOV     DPL,A
   \   000091   E4           CLR     A
   \   000092   3F           ADDC    A,R7
   \   000093   F583         MOV     DPH,A
   \   000095   E0           MOVX    A,@DPTR
   \   000096   FC           MOV     R4,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   FD           MOV     R5,A
   \   00009A   EE           MOV     A,R6
   \   00009B   2422         ADD     A,#0x22
   \   00009D   F582         MOV     DPL,A
   \   00009F   E4           CLR     A
   \   0000A0   3F           ADDC    A,R7
   \   0000A1   F583         MOV     DPH,A
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FA           MOV     R2,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AB   7403         MOV     A,#0x3
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   8010         SJMP    ??MT_SysChannelUpdate_2
   1884          	}
   1885          	else
   1886          	{
   1887          		MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysChannelUpdate_1:
   \   0000B2   EE           MOV     A,R6
   \   0000B3   2422         ADD     A,#0x22
   \   0000B5   F582         MOV     DPL,A
   \   0000B7   E4           CLR     A
   \   0000B8   3F           ADDC    A,R7
   \   0000B9   F583         MOV     DPH,A
   \   0000BB   7400         MOV     A,#0x0
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   7400         MOV     A,#0x0
   \   0000C1   F0           MOVX    @DPTR,A
   1888          	}
   1889          	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   \                     ??MT_SysChannelUpdate_2:
   \   0000C2                ; Setup parameters for call to function osal_msg_send
   \   0000C2   EE           MOV     A,R6
   \   0000C3   FA           MOV     R2,A
   \   0000C4   EF           MOV     A,R7
   \   0000C5   FB           MOV     R3,A
   \   0000C6   90....       MOV     DPTR,#GenericApp_TaskID
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F9           MOV     R1,A
   \   0000CB   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000CE   E9           MOV     A,R1
   1890          }
   \                     ??MT_SysChannelUpdate_0:
   \   0000CF   7F07         MOV     R7,#0x7
   \   0000D1   02....       LJMP    ?BANKED_LEAVE_XDATA
   1891          
   1892          
   1893          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1894          static void MT_SysMACReq( uint8 *pBuf )
   \                     MT_SysMACReq:
   1895          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1896          	afIncomingMSGPacket_t *MSGpkt;
   1897          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   85..82       MOV     DPL,?V0
   \   00000C   85..83       MOV     DPH,?V1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   7900         MOV     R1,#0x0
   \   000013   E8           MOV     A,R0
   \   000014   2427         ADD     A,#0x27
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00001D   8A..         MOV     ?V2,R2
   \   00001F   8B..         MOV     ?V3,R3
   \   000021   AE..         MOV     R6,?V2
   \   000023   AF..         MOV     R7,?V3
   1898          	if ( MSGpkt == NULL )
   \   000025   EE           MOV     A,R6
   \   000026   4F           ORL     A,R7
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??MT_SysMACReq_0 & 0xFFFF
   1899          	{
   1900          		return;
   1901          	}
   1902          	MSGpkt->hdr.event = ZDO_MAC_REQ;
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   74E7         MOV     A,#-0x19
   \   000032   F0           MOVX    @DPTR,A
   1903          	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
   \   000033   85..82       MOV     DPL,?V0
   \   000036   85..83       MOV     DPH,?V1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   EE           MOV     A,R6
   \   00003E   2420         ADD     A,#0x20
   \   000040   F582         MOV     DPL,A
   \   000042   E4           CLR     A
   \   000043   3F           ADDC    A,R7
   \   000044   F583         MOV     DPH,A
   \   000046   E8           MOV     A,R0
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E9           MOV     A,R1
   \   00004A   F0           MOVX    @DPTR,A
   1904          	if ( MSGpkt->cmd.DataLength )
   \   00004B   EE           MOV     A,R6
   \   00004C   2420         ADD     A,#0x20
   \   00004E   F582         MOV     DPL,A
   \   000050   E4           CLR     A
   \   000051   3F           ADDC    A,R7
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   6055         JZ      ??MT_SysMACReq_1
   1905          	{
   1906          		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   00005D   EE           MOV     A,R6
   \   00005E   2427         ADD     A,#0x27
   \   000060   F8           MOV     R0,A
   \   000061   E4           CLR     A
   \   000062   3F           ADDC    A,R7
   \   000063   F9           MOV     R1,A
   \   000064   EE           MOV     A,R6
   \   000065   2422         ADD     A,#0x22
   \   000067   F582         MOV     DPL,A
   \   000069   E4           CLR     A
   \   00006A   3F           ADDC    A,R7
   \   00006B   F583         MOV     DPH,A
   \   00006D   E8           MOV     A,R0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   F0           MOVX    @DPTR,A
   1907          		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
   \   000072                ; Setup parameters for call to function osal_memcpy
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A982         MOV     R1,DPL
   \   00007D   AA83         MOV     R2,DPH
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   89..         MOV     ?V4,R1
   \   000083   8A..         MOV     ?V5,R2
   \   000085   8B..         MOV     ?V6,R3
   \   000087   78..         MOV     R0,#?V4
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008C   EE           MOV     A,R6
   \   00008D   2420         ADD     A,#0x20
   \   00008F   F582         MOV     DPL,A
   \   000091   E4           CLR     A
   \   000092   3F           ADDC    A,R7
   \   000093   F583         MOV     DPH,A
   \   000095   E0           MOVX    A,@DPTR
   \   000096   FC           MOV     R4,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   FD           MOV     R5,A
   \   00009A   EE           MOV     A,R6
   \   00009B   2422         ADD     A,#0x22
   \   00009D   F582         MOV     DPL,A
   \   00009F   E4           CLR     A
   \   0000A0   3F           ADDC    A,R7
   \   0000A1   F583         MOV     DPH,A
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FA           MOV     R2,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AB   7403         MOV     A,#0x3
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   8010         SJMP    ??MT_SysMACReq_2
   1908          	}
   1909          	else
   1910          	{
   1911          		MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysMACReq_1:
   \   0000B2   EE           MOV     A,R6
   \   0000B3   2422         ADD     A,#0x22
   \   0000B5   F582         MOV     DPL,A
   \   0000B7   E4           CLR     A
   \   0000B8   3F           ADDC    A,R7
   \   0000B9   F583         MOV     DPH,A
   \   0000BB   7400         MOV     A,#0x0
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   7400         MOV     A,#0x0
   \   0000C1   F0           MOVX    @DPTR,A
   1912          	}
   1913          	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   \                     ??MT_SysMACReq_2:
   \   0000C2                ; Setup parameters for call to function osal_msg_send
   \   0000C2   EE           MOV     A,R6
   \   0000C3   FA           MOV     R2,A
   \   0000C4   EF           MOV     A,R7
   \   0000C5   FB           MOV     R3,A
   \   0000C6   90....       MOV     DPTR,#GenericApp_TaskID
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F9           MOV     R1,A
   \   0000CB   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000CE   E9           MOV     A,R1
   1914          }
   \                     ??MT_SysMACReq_0:
   \   0000CF   7F07         MOV     R7,#0x7
   \   0000D1   02....       LJMP    ?BANKED_LEAVE_XDATA
   1915          
   1916          
   1917          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1918          static void MT_SysActiveCntReq( uint8 *pBuf )
   \                     MT_SysActiveCntReq:
   1919          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1920          	afIncomingMSGPacket_t *MSGpkt;
   1921          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   85..82       MOV     DPL,?V0
   \   00000C   85..83       MOV     DPH,?V1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   7900         MOV     R1,#0x0
   \   000013   E8           MOV     A,R0
   \   000014   2427         ADD     A,#0x27
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00001D   8A..         MOV     ?V2,R2
   \   00001F   8B..         MOV     ?V3,R3
   \   000021   AE..         MOV     R6,?V2
   \   000023   AF..         MOV     R7,?V3
   1922          	if ( MSGpkt == NULL )
   \   000025   EE           MOV     A,R6
   \   000026   4F           ORL     A,R7
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??MT_SysActiveCntReq_0 & 0xFFFF
   1923          	{
   1924          		return;
   1925          	}
   1926          	MSGpkt->hdr.event = ZDO_ACTIVE_CNT_REQ;
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   74ED         MOV     A,#-0x13
   \   000032   F0           MOVX    @DPTR,A
   1927          	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
   \   000033   85..82       MOV     DPL,?V0
   \   000036   85..83       MOV     DPH,?V1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   EE           MOV     A,R6
   \   00003E   2420         ADD     A,#0x20
   \   000040   F582         MOV     DPL,A
   \   000042   E4           CLR     A
   \   000043   3F           ADDC    A,R7
   \   000044   F583         MOV     DPH,A
   \   000046   E8           MOV     A,R0
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E9           MOV     A,R1
   \   00004A   F0           MOVX    @DPTR,A
   1928          	if ( MSGpkt->cmd.DataLength )
   \   00004B   EE           MOV     A,R6
   \   00004C   2420         ADD     A,#0x20
   \   00004E   F582         MOV     DPL,A
   \   000050   E4           CLR     A
   \   000051   3F           ADDC    A,R7
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   6055         JZ      ??MT_SysActiveCntReq_1
   1929          	{
   1930          		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   00005D   EE           MOV     A,R6
   \   00005E   2427         ADD     A,#0x27
   \   000060   F8           MOV     R0,A
   \   000061   E4           CLR     A
   \   000062   3F           ADDC    A,R7
   \   000063   F9           MOV     R1,A
   \   000064   EE           MOV     A,R6
   \   000065   2422         ADD     A,#0x22
   \   000067   F582         MOV     DPL,A
   \   000069   E4           CLR     A
   \   00006A   3F           ADDC    A,R7
   \   00006B   F583         MOV     DPH,A
   \   00006D   E8           MOV     A,R0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   F0           MOVX    @DPTR,A
   1931          		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
   \   000072                ; Setup parameters for call to function osal_memcpy
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A982         MOV     R1,DPL
   \   00007D   AA83         MOV     R2,DPH
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   89..         MOV     ?V4,R1
   \   000083   8A..         MOV     ?V5,R2
   \   000085   8B..         MOV     ?V6,R3
   \   000087   78..         MOV     R0,#?V4
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008C   EE           MOV     A,R6
   \   00008D   2420         ADD     A,#0x20
   \   00008F   F582         MOV     DPL,A
   \   000091   E4           CLR     A
   \   000092   3F           ADDC    A,R7
   \   000093   F583         MOV     DPH,A
   \   000095   E0           MOVX    A,@DPTR
   \   000096   FC           MOV     R4,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   FD           MOV     R5,A
   \   00009A   EE           MOV     A,R6
   \   00009B   2422         ADD     A,#0x22
   \   00009D   F582         MOV     DPL,A
   \   00009F   E4           CLR     A
   \   0000A0   3F           ADDC    A,R7
   \   0000A1   F583         MOV     DPH,A
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FA           MOV     R2,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AB   7403         MOV     A,#0x3
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   8010         SJMP    ??MT_SysActiveCntReq_2
   1932          	}
   1933          	else
   1934          	{
   1935          		MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysActiveCntReq_1:
   \   0000B2   EE           MOV     A,R6
   \   0000B3   2422         ADD     A,#0x22
   \   0000B5   F582         MOV     DPL,A
   \   0000B7   E4           CLR     A
   \   0000B8   3F           ADDC    A,R7
   \   0000B9   F583         MOV     DPH,A
   \   0000BB   7400         MOV     A,#0x0
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   7400         MOV     A,#0x0
   \   0000C1   F0           MOVX    @DPTR,A
   1936          	}
   1937          	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   \                     ??MT_SysActiveCntReq_2:
   \   0000C2                ; Setup parameters for call to function osal_msg_send
   \   0000C2   EE           MOV     A,R6
   \   0000C3   FA           MOV     R2,A
   \   0000C4   EF           MOV     A,R7
   \   0000C5   FB           MOV     R3,A
   \   0000C6   90....       MOV     DPTR,#GenericApp_TaskID
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F9           MOV     R1,A
   \   0000CB   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000CE   E9           MOV     A,R1
   1938          }
   \                     ??MT_SysActiveCntReq_0:
   \   0000CF   7F07         MOV     R7,#0x7
   \   0000D1   02....       LJMP    ?BANKED_LEAVE_XDATA
   1939          
   1940          
   1941          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1942          static void MT_SysGetFWVersionReq( uint8 *pBuf )
   \                     MT_SysGetFWVersionReq:
   1943          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1944          	MT_SysPkgSendMsg( GenericApp_TaskID, ZDO_FW_VERSION_REQ, pBuf, 0, MT_RPC_POS_DAT0 );
   \   000009                ; Setup parameters for call to function MT_SysPkgSendMsg
   \   000009   75..03       MOV     ?V0,#0x3
   \   00000C   78..         MOV     R0,#?V0
   \   00000E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000011   7B00         MOV     R3,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FC           MOV     R4,A
   \   000015   EF           MOV     A,R7
   \   000016   FD           MOV     R5,A
   \   000017   7AE8         MOV     R2,#-0x18
   \   000019   90....       MOV     DPTR,#GenericApp_TaskID
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??MT_SysPkgSendMsg::?relay`; Banked call to: MT_SysPkgSendMsg
   \   000021   7401         MOV     A,#0x1
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
   1945          }
   \   000026   7F01         MOV     R7,#0x1
   \   000028   02....       LJMP    ?BANKED_LEAVE_XDATA
   1946          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1947          static void MT_SysFWUpdateReq( uint8 *pBuf )
   \                     MT_SysFWUpdateReq:
   1948          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1949          	MT_SysPkgSendMsg( GenericApp_TaskID, ZDO_FW_UPDATE_REQ, pBuf, 0, MT_RPC_POS_DAT0 );
   \   000009                ; Setup parameters for call to function MT_SysPkgSendMsg
   \   000009   75..03       MOV     ?V0,#0x3
   \   00000C   78..         MOV     R0,#?V0
   \   00000E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000011   7B00         MOV     R3,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FC           MOV     R4,A
   \   000015   EF           MOV     A,R7
   \   000016   FD           MOV     R5,A
   \   000017   7AE9         MOV     R2,#-0x17
   \   000019   90....       MOV     DPTR,#GenericApp_TaskID
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??MT_SysPkgSendMsg::?relay`; Banked call to: MT_SysPkgSendMsg
   \   000021   7401         MOV     A,#0x1
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
   1950          }
   \   000026   7F01         MOV     R7,#0x1
   \   000028   02....       LJMP    ?BANKED_LEAVE_XDATA
   1951          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1952          static void MT_SysPkgSendMsg( byte taskID, uint8 event, uint8 *pBuf, uint8 len, uint8 offset )
   \                     MT_SysPkgSendMsg:
   1953          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V3,R2
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   8B..         MOV     ?V7,R3
   \   00000F   7411         MOV     A,#0x11
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V8,A
   1954          	afIncomingMSGPacket_t *MSGpkt;
   1955          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) + len );
   \   000017                ; Setup parameters for call to function osal_msg_allocate
   \   000017   A8..         MOV     R0,?V7
   \   000019   7900         MOV     R1,#0x0
   \   00001B   E8           MOV     A,R0
   \   00001C   2427         ADD     A,#0x27
   \   00001E   FA           MOV     R2,A
   \   00001F   E4           CLR     A
   \   000020   39           ADDC    A,R1
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000025   8A..         MOV     ?V4,R2
   \   000027   8B..         MOV     ?V5,R3
   \   000029   AE..         MOV     R6,?V4
   \   00002B   AF..         MOV     R7,?V5
   1956          	if ( MSGpkt == NULL )
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   7003         JNZ     $+5
   \   000031   02....       LJMP    ??MT_SysPkgSendMsg_0 & 0xFFFF
   1957          	{
   1958          		return;
   1959          	}
   1960          	MSGpkt->hdr.event = event;
   \   000034   E5..         MOV     A,?V3
   \   000036   C0E0         PUSH    A
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
   1961          	MSGpkt->cmd.DataLength = len;
   \   00003F   A8..         MOV     R0,?V7
   \   000041   7900         MOV     R1,#0x0
   \   000043   EE           MOV     A,R6
   \   000044   2420         ADD     A,#0x20
   \   000046   F582         MOV     DPL,A
   \   000048   E4           CLR     A
   \   000049   3F           ADDC    A,R7
   \   00004A   F583         MOV     DPH,A
   \   00004C   E8           MOV     A,R0
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   E9           MOV     A,R1
   \   000050   F0           MOVX    @DPTR,A
   1962          	if ( MSGpkt->cmd.DataLength )
   \   000051   EE           MOV     A,R6
   \   000052   2420         ADD     A,#0x20
   \   000054   F582         MOV     DPL,A
   \   000056   E4           CLR     A
   \   000057   3F           ADDC    A,R7
   \   000058   F583         MOV     DPH,A
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   E8           MOV     A,R0
   \   000060   49           ORL     A,R1
   \   000061   6051         JZ      ??MT_SysPkgSendMsg_1
   1963          	{
   1964          		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   000063   EE           MOV     A,R6
   \   000064   2427         ADD     A,#0x27
   \   000066   F8           MOV     R0,A
   \   000067   E4           CLR     A
   \   000068   3F           ADDC    A,R7
   \   000069   F9           MOV     R1,A
   \   00006A   EE           MOV     A,R6
   \   00006B   2422         ADD     A,#0x22
   \   00006D   F582         MOV     DPL,A
   \   00006F   E4           CLR     A
   \   000070   3F           ADDC    A,R7
   \   000071   F583         MOV     DPH,A
   \   000073   E8           MOV     A,R0
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   E9           MOV     A,R1
   \   000077   F0           MOVX    @DPTR,A
   1965          		osal_memcpy( MSGpkt->cmd.Data, &pBuf[offset], MSGpkt->cmd.DataLength );
   \   000078                ; Setup parameters for call to function osal_memcpy
   \   000078   A8..         MOV     R0,?V8
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   E5..         MOV     A,?V0
   \   00007E   28           ADD     A,R0
   \   00007F   F5..         MOV     ?V4,A
   \   000081   E5..         MOV     A,?V1
   \   000083   39           ADDC    A,R1
   \   000084   F5..         MOV     ?V5,A
   \   000086   75..00       MOV     ?V6,#0x0
   \   000089   78..         MOV     R0,#?V4
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008E   EE           MOV     A,R6
   \   00008F   2420         ADD     A,#0x20
   \   000091   F582         MOV     DPL,A
   \   000093   E4           CLR     A
   \   000094   3F           ADDC    A,R7
   \   000095   F583         MOV     DPH,A
   \   000097   E0           MOVX    A,@DPTR
   \   000098   FC           MOV     R4,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FD           MOV     R5,A
   \   00009C   EE           MOV     A,R6
   \   00009D   2422         ADD     A,#0x22
   \   00009F   F582         MOV     DPL,A
   \   0000A1   E4           CLR     A
   \   0000A2   3F           ADDC    A,R7
   \   0000A3   F583         MOV     DPH,A
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FA           MOV     R2,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FB           MOV     R3,A
   \   0000AA   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AD   7403         MOV     A,#0x3
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B2   8010         SJMP    ??MT_SysPkgSendMsg_2
   1966          	}
   1967          	else
   1968          	{
   1969          		MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysPkgSendMsg_1:
   \   0000B4   EE           MOV     A,R6
   \   0000B5   2422         ADD     A,#0x22
   \   0000B7   F582         MOV     DPL,A
   \   0000B9   E4           CLR     A
   \   0000BA   3F           ADDC    A,R7
   \   0000BB   F583         MOV     DPH,A
   \   0000BD   7400         MOV     A,#0x0
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   7400         MOV     A,#0x0
   \   0000C3   F0           MOVX    @DPTR,A
   1970          	}
   1971          	osal_msg_send( taskID, (uint8 *)MSGpkt );
   \                     ??MT_SysPkgSendMsg_2:
   \   0000C4                ; Setup parameters for call to function osal_msg_send
   \   0000C4   EE           MOV     A,R6
   \   0000C5   FA           MOV     R2,A
   \   0000C6   EF           MOV     A,R7
   \   0000C7   FB           MOV     R3,A
   \   0000C8   A9..         MOV     R1,?V2
   \   0000CA   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000CD   E9           MOV     A,R1
   1972          }
   \                     ??MT_SysPkgSendMsg_0:
   \   0000CE   7F09         MOV     R7,#0x9
   \   0000D0   02....       LJMP    ?BANKED_LEAVE_XDATA
   1973          
   1974          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1975          static void MT_SysMultiwaySetReq( uint8 *pBuf )
   \                     MT_SysMultiwaySetReq:
   1976          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1977          	afIncomingMSGPacket_t *MSGpkt;
   1978          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   85..82       MOV     DPL,?V0
   \   00000C   85..83       MOV     DPH,?V1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   7900         MOV     R1,#0x0
   \   000013   E8           MOV     A,R0
   \   000014   2427         ADD     A,#0x27
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00001D   8A..         MOV     ?V2,R2
   \   00001F   8B..         MOV     ?V3,R3
   \   000021   AE..         MOV     R6,?V2
   \   000023   AF..         MOV     R7,?V3
   1979          	if ( MSGpkt == NULL )
   \   000025   EE           MOV     A,R6
   \   000026   4F           ORL     A,R7
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??MT_SysMultiwaySetReq_0 & 0xFFFF
   1980          	{
   1981          		return;
   1982          	}
   1983          	MSGpkt->hdr.event = ZDO_MULTIWAY_SET_REQ;
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   74EC         MOV     A,#-0x14
   \   000032   F0           MOVX    @DPTR,A
   1984          	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
   \   000033   85..82       MOV     DPL,?V0
   \   000036   85..83       MOV     DPH,?V1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   EE           MOV     A,R6
   \   00003E   2420         ADD     A,#0x20
   \   000040   F582         MOV     DPL,A
   \   000042   E4           CLR     A
   \   000043   3F           ADDC    A,R7
   \   000044   F583         MOV     DPH,A
   \   000046   E8           MOV     A,R0
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E9           MOV     A,R1
   \   00004A   F0           MOVX    @DPTR,A
   1985          	if ( MSGpkt->cmd.DataLength )
   \   00004B   EE           MOV     A,R6
   \   00004C   2420         ADD     A,#0x20
   \   00004E   F582         MOV     DPL,A
   \   000050   E4           CLR     A
   \   000051   3F           ADDC    A,R7
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   6055         JZ      ??MT_SysMultiwaySetReq_1
   1986          	{
   1987          		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   00005D   EE           MOV     A,R6
   \   00005E   2427         ADD     A,#0x27
   \   000060   F8           MOV     R0,A
   \   000061   E4           CLR     A
   \   000062   3F           ADDC    A,R7
   \   000063   F9           MOV     R1,A
   \   000064   EE           MOV     A,R6
   \   000065   2422         ADD     A,#0x22
   \   000067   F582         MOV     DPL,A
   \   000069   E4           CLR     A
   \   00006A   3F           ADDC    A,R7
   \   00006B   F583         MOV     DPH,A
   \   00006D   E8           MOV     A,R0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   F0           MOVX    @DPTR,A
   1988          		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
   \   000072                ; Setup parameters for call to function osal_memcpy
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A982         MOV     R1,DPL
   \   00007D   AA83         MOV     R2,DPH
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   89..         MOV     ?V4,R1
   \   000083   8A..         MOV     ?V5,R2
   \   000085   8B..         MOV     ?V6,R3
   \   000087   78..         MOV     R0,#?V4
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008C   EE           MOV     A,R6
   \   00008D   2420         ADD     A,#0x20
   \   00008F   F582         MOV     DPL,A
   \   000091   E4           CLR     A
   \   000092   3F           ADDC    A,R7
   \   000093   F583         MOV     DPH,A
   \   000095   E0           MOVX    A,@DPTR
   \   000096   FC           MOV     R4,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   FD           MOV     R5,A
   \   00009A   EE           MOV     A,R6
   \   00009B   2422         ADD     A,#0x22
   \   00009D   F582         MOV     DPL,A
   \   00009F   E4           CLR     A
   \   0000A0   3F           ADDC    A,R7
   \   0000A1   F583         MOV     DPH,A
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FA           MOV     R2,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AB   7403         MOV     A,#0x3
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   8010         SJMP    ??MT_SysMultiwaySetReq_2
   1989          	}
   1990          	else
   1991          	{
   1992          		MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysMultiwaySetReq_1:
   \   0000B2   EE           MOV     A,R6
   \   0000B3   2422         ADD     A,#0x22
   \   0000B5   F582         MOV     DPL,A
   \   0000B7   E4           CLR     A
   \   0000B8   3F           ADDC    A,R7
   \   0000B9   F583         MOV     DPH,A
   \   0000BB   7400         MOV     A,#0x0
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   7400         MOV     A,#0x0
   \   0000C1   F0           MOVX    @DPTR,A
   1993          	}
   1994          	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   \                     ??MT_SysMultiwaySetReq_2:
   \   0000C2                ; Setup parameters for call to function osal_msg_send
   \   0000C2   EE           MOV     A,R6
   \   0000C3   FA           MOV     R2,A
   \   0000C4   EF           MOV     A,R7
   \   0000C5   FB           MOV     R3,A
   \   0000C6   90....       MOV     DPTR,#GenericApp_TaskID
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F9           MOV     R1,A
   \   0000CB   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000CE   E9           MOV     A,R1
   1995          }
   \                     ??MT_SysMultiwaySetReq_0:
   \   0000CF   7F07         MOV     R7,#0x7
   \   0000D1   02....       LJMP    ?BANKED_LEAVE_XDATA
   1996          
   1997          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1998          static void MT_SysMultiwaySendReq( uint8 *pBuf )
   \                     MT_SysMultiwaySendReq:
   1999          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2000          	MT_SysGroupTransfer(pBuf);
   \   000009                ; Setup parameters for call to function MT_SysGroupTransfer
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   `??MT_SysGroupTransfer::?relay`; Banked call to: MT_SysGroupTransfer
   2001          }
   \   000010   7F01         MOV     R7,#0x1
   \   000012   02....       LJMP    ?BANKED_LEAVE_XDATA
   2002          
   2003          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2004          static void MT_SysNWKInfoReq( uint8 *pBuf )
   \                     MT_SysNWKInfoReq:
   2005          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2006          	afIncomingMSGPacket_t *MSGpkt;
   2007          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( sizeof ( afIncomingMSGPacket_t ) +  pBuf[MT_RPC_POS_LEN] );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   85..82       MOV     DPL,?V0
   \   00000C   85..83       MOV     DPH,?V1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   7900         MOV     R1,#0x0
   \   000013   E8           MOV     A,R0
   \   000014   2427         ADD     A,#0x27
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00001D   8A..         MOV     ?V2,R2
   \   00001F   8B..         MOV     ?V3,R3
   \   000021   AE..         MOV     R6,?V2
   \   000023   AF..         MOV     R7,?V3
   2008          	if ( MSGpkt == NULL )
   \   000025   EE           MOV     A,R6
   \   000026   4F           ORL     A,R7
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??MT_SysNWKInfoReq_0 & 0xFFFF
   2009          	{
   2010          		return;
   2011          	}
   2012          	MSGpkt->hdr.event = ZDO_NWKINFO_REQ;
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   74EE         MOV     A,#-0x12
   \   000032   F0           MOVX    @DPTR,A
   2013          	MSGpkt->cmd.DataLength = pBuf[MT_RPC_POS_LEN];
   \   000033   85..82       MOV     DPL,?V0
   \   000036   85..83       MOV     DPH,?V1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   EE           MOV     A,R6
   \   00003E   2420         ADD     A,#0x20
   \   000040   F582         MOV     DPL,A
   \   000042   E4           CLR     A
   \   000043   3F           ADDC    A,R7
   \   000044   F583         MOV     DPH,A
   \   000046   E8           MOV     A,R0
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E9           MOV     A,R1
   \   00004A   F0           MOVX    @DPTR,A
   2014          	if ( MSGpkt->cmd.DataLength )
   \   00004B   EE           MOV     A,R6
   \   00004C   2420         ADD     A,#0x20
   \   00004E   F582         MOV     DPL,A
   \   000050   E4           CLR     A
   \   000051   3F           ADDC    A,R7
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   6055         JZ      ??MT_SysNWKInfoReq_1
   2015          	{
   2016          		MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   00005D   EE           MOV     A,R6
   \   00005E   2427         ADD     A,#0x27
   \   000060   F8           MOV     R0,A
   \   000061   E4           CLR     A
   \   000062   3F           ADDC    A,R7
   \   000063   F9           MOV     R1,A
   \   000064   EE           MOV     A,R6
   \   000065   2422         ADD     A,#0x22
   \   000067   F582         MOV     DPL,A
   \   000069   E4           CLR     A
   \   00006A   3F           ADDC    A,R7
   \   00006B   F583         MOV     DPH,A
   \   00006D   E8           MOV     A,R0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   F0           MOVX    @DPTR,A
   2017          		osal_memcpy( MSGpkt->cmd.Data, &pBuf[MT_RPC_POS_DAT0], MSGpkt->cmd.DataLength );
   \   000072                ; Setup parameters for call to function osal_memcpy
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A982         MOV     R1,DPL
   \   00007D   AA83         MOV     R2,DPH
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   89..         MOV     ?V4,R1
   \   000083   8A..         MOV     ?V5,R2
   \   000085   8B..         MOV     ?V6,R3
   \   000087   78..         MOV     R0,#?V4
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008C   EE           MOV     A,R6
   \   00008D   2420         ADD     A,#0x20
   \   00008F   F582         MOV     DPL,A
   \   000091   E4           CLR     A
   \   000092   3F           ADDC    A,R7
   \   000093   F583         MOV     DPH,A
   \   000095   E0           MOVX    A,@DPTR
   \   000096   FC           MOV     R4,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   FD           MOV     R5,A
   \   00009A   EE           MOV     A,R6
   \   00009B   2422         ADD     A,#0x22
   \   00009D   F582         MOV     DPL,A
   \   00009F   E4           CLR     A
   \   0000A0   3F           ADDC    A,R7
   \   0000A1   F583         MOV     DPH,A
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FA           MOV     R2,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AB   7403         MOV     A,#0x3
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   8010         SJMP    ??MT_SysNWKInfoReq_2
   2018          	}
   2019          	else
   2020          	{
   2021          		MSGpkt->cmd.Data = NULL;
   \                     ??MT_SysNWKInfoReq_1:
   \   0000B2   EE           MOV     A,R6
   \   0000B3   2422         ADD     A,#0x22
   \   0000B5   F582         MOV     DPL,A
   \   0000B7   E4           CLR     A
   \   0000B8   3F           ADDC    A,R7
   \   0000B9   F583         MOV     DPH,A
   \   0000BB   7400         MOV     A,#0x0
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   7400         MOV     A,#0x0
   \   0000C1   F0           MOVX    @DPTR,A
   2022          	}
   2023          	osal_msg_send( GenericApp_TaskID, (uint8 *)MSGpkt );
   \                     ??MT_SysNWKInfoReq_2:
   \   0000C2                ; Setup parameters for call to function osal_msg_send
   \   0000C2   EE           MOV     A,R6
   \   0000C3   FA           MOV     R2,A
   \   0000C4   EF           MOV     A,R7
   \   0000C5   FB           MOV     R3,A
   \   0000C6   90....       MOV     DPTR,#GenericApp_TaskID
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F9           MOV     R1,A
   \   0000CB   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000CE   E9           MOV     A,R1
   2024          }
   \                     ??MT_SysNWKInfoReq_0:
   \   0000CF   7F07         MOV     R7,#0x7
   \   0000D1   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysPing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysPing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysVersion::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysVersion

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysSetExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGetExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGetExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVItemInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVItemInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalStartTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalStartTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalStopTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalStopTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysRandom::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysRandom

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysAdcRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysAdcRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGpio::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGpio

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysStackTune::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysStackTune

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysSetUtcTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetUtcTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGetUtcTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGetUtcTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysSetTxPower::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetTxPower

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysResetInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysResetInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalTimerExpired::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalTimerExpired

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??powerOffSoc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    powerOffSoc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysP2PTransfer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysP2PTransfer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysBroadCastTransfer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysBroadCastTransfer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGroupTransfer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGroupTransfer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysChannelUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysChannelUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysMACReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysMACReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysActiveCntReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysActiveCntReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGetFWVersionReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGetFWVersionReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysFWUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysFWUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysPkgSendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysPkgSendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysMultiwaySetReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysMultiwaySetReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysMultiwaySendReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysMultiwaySendReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysNWKInfoReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysNWKInfoReq
   2025          
   2026          /***************************************************************************************************
   2027           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     28   MT_SysActiveCntReq
        0     18   -> osal_memcpy
        0     15   -> osal_msg_allocate
        0     15   -> osal_msg_send
      1     28   MT_SysAdcRead
        0     18   -> HalAdcRead
        0     18   -> MT_BuildAndSendZToolResponse
      0     28   MT_SysBroadCastTransfer
        0     18   -> osal_memcpy
        0     15   -> osal_msg_allocate
        0     15   -> osal_msg_send
      0     28   MT_SysChannelUpdate
        0     18   -> osal_memcpy
        0     15   -> osal_msg_allocate
        0     15   -> osal_msg_send
      0     11   MT_SysCommandProcessing
        0     10   -> MT_SysActiveCntReq
        0     10   -> MT_SysAdcRead
        0     10   -> MT_SysBroadCastTransfer
        0     10   -> MT_SysChannelUpdate
        0     10   -> MT_SysFWUpdateReq
        0     10   -> MT_SysGetExtAddr
        0     10   -> MT_SysGetFWVersionReq
        0     10   -> MT_SysGetUtcTime
        0     10   -> MT_SysGpio
        0     10   -> MT_SysGroupTransfer
        0     10   -> MT_SysMACReq
        0     10   -> MT_SysMultiwaySendReq
        0     10   -> MT_SysMultiwaySetReq
        0     10   -> MT_SysNWKInfoReq
        0     10   -> MT_SysOsalNVDelete
        0     10   -> MT_SysOsalNVItemInit
        0     10   -> MT_SysOsalNVLength
        0     10   -> MT_SysOsalNVRead
        0     10   -> MT_SysOsalNVWrite
        0     10   -> MT_SysOsalStartTimer
        0     10   -> MT_SysOsalStopTimer
        0     10   -> MT_SysP2PTransfer
        0     10   -> MT_SysPing
        0     10   -> MT_SysRandom
        0     10   -> MT_SysReset
        0     10   -> MT_SysSetExtAddr
        0     10   -> MT_SysSetTxPower
        0     10   -> MT_SysSetUtcTime
        0     10   -> MT_SysStackTune
        0     10   -> MT_SysVersion
        0     11   -> Node_auth_uart_msg_process
      0     20   MT_SysFWUpdateReq
        0     10   -> MT_SysPkgSendMsg
      2     18   MT_SysGetExtAddr
        2      8   -> MT_BuildAndSendZToolResponse
        2      8   -> ZMacGetReq
      0     20   MT_SysGetFWVersionReq
        0     10   -> MT_SysPkgSendMsg
      1     40   MT_SysGetUtcTime
        0     26   -> MT_BuildAndSendZToolResponse
        0     30   -> osal_ConvertUTCTime
        0     30   -> osal_buffer_uint32
        0     26   -> osal_getClock
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
      1     21   MT_SysGpio
        0     11   -> MT_BuildAndSendZToolResponse
      0     28   MT_SysGroupTransfer
        0     18   -> osal_memcpy
        0     15   -> osal_msg_allocate
        0     15   -> osal_msg_send
      0     28   MT_SysMACReq
        0     18   -> osal_memcpy
        0     15   -> osal_msg_allocate
        0     15   -> osal_msg_send
      0     19   MT_SysMultiwaySendReq
        0      9   -> MT_SysGroupTransfer
      0     28   MT_SysMultiwaySetReq
        0     18   -> osal_memcpy
        0     15   -> osal_msg_allocate
        0     15   -> osal_msg_send
      0     28   MT_SysNWKInfoReq
        0     18   -> osal_memcpy
        0     15   -> osal_msg_allocate
        0     15   -> osal_msg_send
      1     23   MT_SysOsalNVDelete
        0     13   -> MT_BuildAndSendZToolResponse
        0     13   -> osal_nv_delete
      1     31   MT_SysOsalNVItemInit
        0     17   -> MT_BuildAndSendZToolResponse
        0     19   -> osal_nv_item_init
        0     21   -> osal_nv_write
      1     26   MT_SysOsalNVLength
        0     16   -> MT_BuildAndSendZToolResponse
        0     16   -> osal_nv_item_len
      1     40   MT_SysOsalNVRead
        0     26   -> MT_BuildAndSendZToolResponse
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     26   -> osal_memset
        0     26   -> osal_nv_item_len
        0     30   -> osal_nv_read
      1     35   MT_SysOsalNVWrite
        0     21   -> MT_BuildAndSendZToolResponse
        0     21   -> ZMacSetReq
        0     21   -> osal_nv_item_len
        0     25   -> osal_nv_write
        0     23   -> zgSetItem
      1     31   MT_SysOsalStartTimer
        0     17   -> MT_BuildAndSendZToolResponse
        0     21   -> osal_start_timerEx
      1     22   MT_SysOsalStopTimer
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> osal_stop_timerEx
      1     10   MT_SysOsalTimerExpired
        0     10   -> MT_BuildAndSendZToolResponse
      0     28   MT_SysP2PTransfer
        0     18   -> osal_memcpy
        0     15   -> osal_msg_allocate
        0     15   -> osal_msg_send
      1     21   MT_SysPing
        0     11   -> MT_BuildAndSendZToolResponse
      1     30   MT_SysPkgSendMsg
        0     20   -> osal_memcpy
        0     17   -> osal_msg_allocate
        0     17   -> osal_msg_send
      1     22   MT_SysRandom
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> Onboard_rand
      0     19   MT_SysReset
        0      9   -> Onboard_soft_reset
        0      9   -> powerOffSoc
      0      0   MT_SysResetInd
      1     27   MT_SysSetExtAddr
        0     13   -> MT_BuildAndSendZToolResponse
        0     13   -> ZMacSetReq
        0     17   -> osal_nv_write
      1     21   MT_SysSetTxPower
        0     11   -> MAC_MlmeSetReq
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> macRadioSetTxPower
      1     38   MT_SysSetUtcTime
        0     28   -> MT_BuildAndSendZToolResponse
        0     28   -> osal_ConvertUTCSecs
        0     28   -> osal_build_uint16
        0     28   -> osal_build_uint32
        0     28   -> osal_setClock
      1     20   MT_SysStackTune
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZMacGetReq
        0     10   -> ZMacSetReq
      2     10   MT_SysVersion
        2      0   -> MT_BuildAndSendZToolResponse
      0      9   powerOffSoc


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
     212  MT_SysActiveCntReq
       6  MT_SysActiveCntReq::?relay
     206  MT_SysAdcRead
       6  MT_SysAdcRead::?relay
     207  MT_SysBroadCastTransfer
       6  MT_SysBroadCastTransfer::?relay
     212  MT_SysChannelUpdate
       6  MT_SysChannelUpdate::?relay
     603  MT_SysCommandProcessing
       6  MT_SysCommandProcessing::?relay
      43  MT_SysFWUpdateReq
       6  MT_SysFWUpdateReq::?relay
      44  MT_SysGetExtAddr
       6  MT_SysGetExtAddr::?relay
      43  MT_SysGetFWVersionReq
       6  MT_SysGetFWVersionReq::?relay
     325  MT_SysGetUtcTime
       6  MT_SysGetUtcTime::?relay
     260  MT_SysGpio
       6  MT_SysGpio::?relay
     207  MT_SysGroupTransfer
       6  MT_SysGroupTransfer::?relay
     212  MT_SysMACReq
       6  MT_SysMACReq::?relay
      21  MT_SysMultiwaySendReq
       6  MT_SysMultiwaySendReq::?relay
     212  MT_SysMultiwaySetReq
       6  MT_SysMultiwaySetReq::?relay
     212  MT_SysNWKInfoReq
       6  MT_SysNWKInfoReq::?relay
       8  MT_SysOsalEventId
     142  MT_SysOsalNVDelete
       6  MT_SysOsalNVDelete::?relay
     274  MT_SysOsalNVItemInit
       6  MT_SysOsalNVItemInit::?relay
     126  MT_SysOsalNVLength
       6  MT_SysOsalNVLength::?relay
     543  MT_SysOsalNVRead
       6  MT_SysOsalNVRead::?relay
     385  MT_SysOsalNVWrite
       6  MT_SysOsalNVWrite::?relay
     198  MT_SysOsalStartTimer
       6  MT_SysOsalStartTimer::?relay
     153  MT_SysOsalStopTimer
       6  MT_SysOsalStopTimer::?relay
      47  MT_SysOsalTimerExpired
       6  MT_SysOsalTimerExpired::?relay
     207  MT_SysP2PTransfer
       6  MT_SysP2PTransfer::?relay
      67  MT_SysPing
       6  MT_SysPing::?relay
     211  MT_SysPkgSendMsg
       6  MT_SysPkgSendMsg::?relay
      74  MT_SysRandom
       6  MT_SysRandom::?relay
      60  MT_SysReset
       6  MT_SysReset::?relay
       3  MT_SysResetInd
       6  MT_SysResetInd::?relay
     122  MT_SysSetExtAddr
       6  MT_SysSetExtAddr::?relay
      91  MT_SysSetTxPower
       6  MT_SysSetTxPower::?relay
     540  MT_SysSetUtcTime
       6  MT_SysSetUtcTime::?relay
     161  MT_SysStackTune
       6  MT_SysStackTune::?relay
      24  MT_SysVersion
       6  MT_SysVersion::?relay
       1  WDCTL
       1  _A_IEN0
       3  powerOffSoc
       6  powerOffSoc::?relay

 
 6 450 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
    10 bytes in segment XDATA_ROM_C
 
 6 660 bytes of CODE  memory
    10 bytes of CONST memory
     0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
