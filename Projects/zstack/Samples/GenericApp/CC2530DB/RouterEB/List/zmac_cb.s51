///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               21/Apr/2017  17:48:55
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\zmac\f8w\zmac_cb.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0085
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=5
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -DCHANNEL_CNT=0x01 "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Components\zmac\f8w\zmac_cb.c" -D ZTOOL_P1 -D MT_TASK -D
//        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xNV_RESTORE -D
//        NV_INIT -D OPEN_FCS -D PANID_INCREASE -lC "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List" -lA
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj" -e
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        --core=plain --dptr=16,1 --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
//        1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh
//        1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Application\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack
//        Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -On --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh
//        1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\zmac_cb.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zmac_cb

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?US_DIV_MOD
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??MAC_CbackCheckPending::?relay`
        FUNCTION `??MAC_CbackCheckPending::?relay`,0203H
        PUBLIC `??MAC_CbackEvent::?relay`
        FUNCTION `??MAC_CbackEvent::?relay`,0203H
        PUBLIC `??MAC_CbackQueryRetransmit::?relay`
        FUNCTION `??MAC_CbackQueryRetransmit::?relay`,0203H
        FUNCTION `??ZMacLqiAdjust::?relay`,0203H
        PUBLIC `??ZMacLqiAdjustMode::?relay`
        FUNCTION `??ZMacLqiAdjustMode::?relay`,0203H
        PUBLIC MAC_CbackCheckPending
        FUNCTION MAC_CbackCheckPending,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MAC_CbackEvent
        FUNCTION MAC_CbackEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC MAC_CbackQueryRetransmit
        FUNCTION MAC_CbackQueryRetransmit,0203H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION ZMacLqiAdjust,080203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZMacLqiAdjustMode
        FUNCTION ZMacLqiAdjustMode,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK _A_IEN0
        PUBLIC pZMac_AppCallback
        PUBLIC zmacCBSizeTable
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
MAC_MlmeGetReq      SYMBOL "MAC_MlmeGetReq"
`??MAC_MlmeGetReq::?relay` SYMBOL "?relay", MAC_MlmeGetReq
mac_msg_deallocate  SYMBOL "mac_msg_deallocate"
`??mac_msg_deallocate::?relay` SYMBOL "?relay", mac_msg_deallocate
nwkDB_ReturnIndirectHoldingCnt SYMBOL "nwkDB_ReturnIndirectHoldingCnt"
`??nwkDB_ReturnIndirectHoldingCnt::?relay` SYMBOL "?relay", nwkDB_ReturnIndirectHoldingCnt
nwk_broadcastSend   SYMBOL "nwk_broadcastSend"
`??nwk_broadcastSend::?relay` SYMBOL "?relay", nwk_broadcastSend
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
MAC_CbackCheckPending SYMBOL "MAC_CbackCheckPending"
`??MAC_CbackCheckPending::?relay` SYMBOL "?relay", MAC_CbackCheckPending
MAC_CbackEvent      SYMBOL "MAC_CbackEvent"
`??MAC_CbackEvent::?relay` SYMBOL "?relay", MAC_CbackEvent
MAC_CbackQueryRetransmit SYMBOL "MAC_CbackQueryRetransmit"
`??MAC_CbackQueryRetransmit::?relay` SYMBOL "?relay", MAC_CbackQueryRetransmit
ZMacLqiAdjustMode   SYMBOL "ZMacLqiAdjustMode"
`??ZMacLqiAdjustMode::?relay` SYMBOL "?relay", ZMacLqiAdjustMode

        EXTERN `??MAC_MlmeGetReq::?relay`
        FUNCTION `??MAC_MlmeGetReq::?relay`,00H
        EXTERN `??mac_msg_deallocate::?relay`
        FUNCTION `??mac_msg_deallocate::?relay`,00H
        EXTERN `??nwkDB_ReturnIndirectHoldingCnt::?relay`
        FUNCTION `??nwkDB_ReturnIndirectHoldingCnt::?relay`,00H
        EXTERN `??nwk_broadcastSend::?relay`
        FUNCTION `??nwk_broadcastSend::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN MAC_MlmeGetReq
        FUNCTION MAC_MlmeGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NWK_TaskID
        EXTERN ZMac_ScanBuf
        EXTERN _NIB
        EXTERN mac_msg_deallocate
        FUNCTION mac_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkDB_ReturnIndirectHoldingCnt
        FUNCTION nwkDB_ReturnIndirectHoldingCnt,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_broadcastSend
        FUNCTION nwk_broadcastSend,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Mesh 1.0.0_chaokw_20160317\Z-Stack Mesh 1.0.0_chaokw_20160316\Z-Stack Mesh 1.0.0_LCDOK\Z-Stack Mesh 1.0.0\Components\zmac\f8w\zmac_cb.c
//    1 /**************************************************************************************************
//    2   Filename:       zmac_cb.c
//    3   Revised:        $Date: 2014-06-04 08:52:26 -0700 (Wed, 04 Jun 2014) $
//    4   Revision:       $Revision: 38796 $
//    5 
//    6   Description:    This file contains the NWK functions that the ZMAC calls
//    7 
//    8 
//    9   Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /********************************************************************************************************
//   41  *                                               INCLUDES
//   42  ********************************************************************************************************/
//   43 
//   44 #include "ZComDef.h"
//   45 #include "OSAL.h"
//   46 #include "ZMAC.h"
//   47 #include "MT_MAC.h"
//   48 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//   49 
//   50 #if !defined NONWK
//   51 #include "nwk.h"
//   52 #include "nwk_bufs.h"
//   53 #include "ZGlobals.h"
//   54 #endif
//   55 
//   56 #if defined( MACSIM )
//   57   #include "mac_sim.h"
//   58 #endif
//   59 
//   60 #include "mac_security.h"
//   61 
//   62 #include "mac_main.h"
//   63 extern void *ZMac_ScanBuf;
//   64 
//   65 /********************************************************************************************************
//   66  *                                               CONSTANTS
//   67  ********************************************************************************************************/
//   68 
//   69 #if !defined NONWK
//   70 /* Lookup table for size of structures. Must match with the order of MAC callback events */

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//   71 const uint8 CODE zmacCBSizeTable [] = {
zmacCBSizeTable:
        DB 0
        DB 22
        DB 15
        DB 0
        DB 0
        DB 11
        DB 21
        DB 11
        DB 2
        DB 0
        DB 2
        DB 34
        DB 15
        DB 51
        DB 0
        DB 0
        DB 14
//   72   0,
//   73   sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
//   74   sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
//   75   0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
//   76   0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
//   77   sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
//   78   sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
//   79   sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
//   80   sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
//   81   0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
//   82   sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
//   83   sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
//   84   sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
//   85   sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
//   86   0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
//   87   0,                                // MAC_PWR_ON_CNF              15  Power on confirm
//   88   sizeof(ZMacPollInd_t)             // MAC_MLME_POLL_IND           16  Poll indication
//   89 };
//   90 #endif /* !defined NONWK */
//   91 
//   92 /********************************************************************************************************
//   93  *                                               LOCALS
//   94  ********************************************************************************************************/
//   95 
//   96 /* LQI Adjustment Mode */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   97 static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
lqiAdjMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   98 
//   99 #if !defined NONWK
//  100 /* LQI Adjustment Function */
//  101 static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
//  102 #endif
//  103 
//  104 /*********************************************************************
//  105  * ZMAC Function Pointers
//  106  */
//  107 
//  108 /*
//  109  * ZMac Application callback function. This function will be called
//  110  * for every MAC message that is received over-the-air or generated
//  111  * locally by MAC for the application.
//  112  *
//  113  * The callback function should return TRUE if it has handled the
//  114  * MAC message and no further action should be taken with it. It
//  115  * should return FALSE if it has not handled the MAC message and
//  116  * normal processing should take place.
//  117  *
//  118  * NOTE: The processing in this function should be kept to the
//  119  *       minimum.
//  120  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  121 uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
pZMac_AppCallback:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  122 
//  123 
//  124 /*********************************************************************
//  125  * ZMAC Functions
//  126  */
//  127 
//  128 /**************************************************************************************************
//  129  * @fn       MAC_CbackEvent()
//  130  *
//  131  * @brief    convert MAC data confirm and indication to ZMac and send to NWK
//  132  *
//  133  * @param    pData - pointer to macCbackEvent_t
//  134  *
//  135  * @return   none
//  136  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  137 void MAC_CbackEvent(macCbackEvent_t *pData)
MAC_CbackEvent:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MAC_CbackEvent
        CODE
//  138 #ifndef MT_MAC_CB_FUNC
//  139 {
        FUNCALL MAC_CbackEvent, MAC_MlmeGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, mac_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, mac_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, mac_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, ZMacLqiAdjust
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, nwk_broadcastSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, mac_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, ZMacLqiAdjust
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, mac_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  140 #if !defined NONWK
//  141   uint8 event = pData->hdr.event;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     ?V2,A
//  142   uint16 tmp = zmacCBSizeTable[event];
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,#zmacCBSizeTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(zmacCBSizeTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  143   macCbackEvent_t *msgPtr;
//  144 
//  145   /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
//  146    * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
//  147    */
//  148   if (tmp == 0)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??MAC_CbackEvent_0 & 0xFFFF
//  149   {
//  150     return;
//  151   }
//  152 
//  153   // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
//  154   if ( event == MAC_MCPS_DATA_IND )
        MOV     A,#0xd
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_1
//  155   {
//  156 #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
//  157     // This feature limits the number of unprocessed MAC Data Indications that can be queued
//  158     // into the Network Task's OSAL message queue. To enable ZMAC_MAX_DATA_IND filtering, the
//  159     // command-line option specifies the threshold setting where MAC_MCPS_DATD_IND callback
//  160     // messages will be dropped. For example, adding ZMAC_MAX_DATA_IND=5 to the commnad-line
//  161     // options allows up to five messages to be passed up and queued in the NWK layer buffer.
//  162     uint8 diCount = osal_msg_count( NWK_TaskID, MAC_MCPS_DATA_IND );
//  163 #endif // ZMAC_MAX_DATA_IND
//  164     MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
        ; Setup parameters for call to function MAC_MlmeGetReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x53
        LCALL   `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
        MOV     A,R1
//  165     if ( (tmp == INVALID_NODE_ADDR) ||
//  166          (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
//  167 #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
//  168          (diCount > ZMAC_MAX_DATA_IND) ||
//  169 #endif // ZMAC_MAX_DATA_IND
//  170          (pData->dataInd.msdu.len == 0) )
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??MAC_CbackEvent_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??MAC_CbackEvent_2:
        JZ      ??MAC_CbackEvent_3
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??MAC_CbackEvent_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??MAC_CbackEvent_4:
        JZ      ??MAC_CbackEvent_3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??MAC_CbackEvent_5
//  171     {
//  172       mac_msg_deallocate( (uint8 **)&pData );
??MAC_CbackEvent_3:
        ; Setup parameters for call to function mac_msg_deallocate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
//  173       return;
        LJMP    ??MAC_CbackEvent_0 & 0xFFFF
//  174     }
//  175     msgPtr = pData;
??MAC_CbackEvent_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        LJMP    ??MAC_CbackEvent_6 & 0xFFFF
//  176   }
//  177   else
//  178   {
//  179     if (event == MAC_MLME_BEACON_NOTIFY_IND )
??MAC_CbackEvent_1:
        MOV     A,#0x5
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_7
//  180     {
//  181       tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        ADD     A,#0x21
        MOV     R0,A
        JNC     ??MAC_CbackEvent_8
        INC     R1
??MAC_CbackEvent_8:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOVX    @DPTR,A
        SJMP    ??MAC_CbackEvent_9
//  182     }
//  183     else if (event == MAC_MLME_SCAN_CNF)
??MAC_CbackEvent_7:
        MOV     A,#0x7
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_9
//  184     {
//  185       if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??MAC_CbackEvent_10
//  186       {
//  187         tmp += ZMAC_ED_SCAN_MAXCHANNELS;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x1b
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        SJMP    ??MAC_CbackEvent_9
//  188       }
//  189       else
//  190       {
//  191         tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
??MAC_CbackEvent_10:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x21
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x21
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOVX    @DPTR,A
//  192       }
//  193     }
//  194 
//  195     if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
??MAC_CbackEvent_9:
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
        MOV     A,R6
        ORL     A,R7
        JNZ     ??MAC_CbackEvent_11
//  196     {
//  197       // Not enough memory. If data confirm - try again
//  198       if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
        MOV     A,#0xc
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_12
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??MAC_CbackEvent_12
//  199       {
//  200         halIntState_t intState;
//  201 
//  202         // This is not normally deallocated here because the pZMac_AppCallback()
//  203         // application may need it.
//  204         HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0,A
        CLR     0xa8.7
//  205 
//  206         mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
        ; Setup parameters for call to function mac_msg_deallocate
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
//  207         if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
        MOV     A,R6
        ORL     A,R7
        JNZ     ??MAC_CbackEvent_13
//  208         {
//  209           // Still no allocation, something is wrong
//  210           HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
        MOV     ?V7,?V0
        MOV     A,?V0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  211           return;
        LJMP    ??MAC_CbackEvent_0 & 0xFFFF
//  212         }
//  213         HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
??MAC_CbackEvent_13:
        MOV     ?V3,?V0
        MOV     A,?V0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
        SJMP    ??MAC_CbackEvent_11
//  214       }
//  215       else
//  216       {
//  217         // This message is dropped
//  218         return;
??MAC_CbackEvent_12:
        LJMP    ??MAC_CbackEvent_0 & 0xFFFF
//  219       }
//  220     }
//  221     osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
??MAC_CbackEvent_11:
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,#zmacCBSizeTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(zmacCBSizeTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  222   }
//  223 
//  224   if ( event == MAC_MLME_BEACON_NOTIFY_IND )
??MAC_CbackEvent_6:
        MOV     A,#0x5
        XRL     A,?V2
        JZ      $+5
        LJMP    ??MAC_CbackEvent_14 & 0xFFFF
//  225   {
//  226     macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
        MOV     ?V0,R6
        MOV     ?V1,R7
//  227 
//  228     osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R4,#0x21
        MOV     R5,#0x0
        MOV     A,?V0
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  229     pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
        MOV     A,?V0
        ADD     A,#0xb
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  230     osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x21
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  231     pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x21
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        LJMP    ??MAC_CbackEvent_15 & 0xFFFF
//  232   }
//  233   else if (event == MAC_MLME_SCAN_CNF)
??MAC_CbackEvent_14:
        MOV     A,#0x7
        XRL     A,?V2
        JZ      $+5
        LJMP    ??MAC_CbackEvent_15 & 0xFFFF
//  234   {
//  235     macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
        MOV     ?V0,R6
        MOV     ?V1,R7
//  236 
//  237     if (ZMac_ScanBuf != NULL)
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??MAC_CbackEvent_15 & 0xFFFF
//  238     {
//  239       void *pTmp = ZMac_ScanBuf;
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
//  240       ZMac_ScanBuf = NULL;
        MOV     DPTR,#ZMac_ScanBuf
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  241 
//  242       if (pScan->scanType == ZMAC_ED_SCAN)
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??MAC_CbackEvent_16
//  243       {
//  244         pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
        MOV     A,?V0
        ADD     A,#0xb
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  245         osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V8
        MOV     ?V5,?V9
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R4,#0x1b
        MOV     R5,#0x0
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        SJMP    ??MAC_CbackEvent_17
//  246       }
//  247       else
//  248       {
//  249         pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
??MAC_CbackEvent_16:
        MOV     A,?V0
        ADD     A,#0xb
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  250         osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V8
        MOV     ?V5,?V9
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R4
        MOV     B,#0x21
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x21
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     A,?V0
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  251       }
//  252 
//  253       osal_mem_free(pTmp);
??MAC_CbackEvent_17:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  254     }
//  255   }
//  256 
//  257   if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
??MAC_CbackEvent_15:
        MOV     DPTR,#pZMac_AppCallback
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??MAC_CbackEvent_18
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#pZMac_AppCallback
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,R1
        JZ      $+5
        LJMP    ??MAC_CbackEvent_19 & 0xFFFF
//  258   {
//  259     // Filter out non-zigbee packets
//  260     if ( event == MAC_MCPS_DATA_IND )
??MAC_CbackEvent_18:
        MOV     A,#0xd
        XRL     A,?V2
        JZ      $+5
        LJMP    ??MAC_CbackEvent_20 & 0xFFFF
//  261     {
//  262       uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        ANL     A,#0x3
        MOV     ?V4,A
//  263       uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        ANL     A,#0x3f
        ANL     A,#0xf
        MOV     ?V5,A
//  264       uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xE0);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xe0
        MOV     ?V6,A
//  265       if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
//  266           || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
        MOV     A,?V4
        CLR     C
        SUBB    A,#0x2
        JNC     ??MAC_CbackEvent_21
        MOV     DPTR,#_NIB + 17
        MOVX    A,@DPTR
        XRL     A,?V5
        JNZ     ??MAC_CbackEvent_21
        MOV     A,?V6
        JNZ     ??MAC_CbackEvent_21
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x1b
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??MAC_CbackEvent_22
//  267       {
//  268         // Drop the message
//  269         mac_msg_deallocate( (uint8 **)&pData );
??MAC_CbackEvent_21:
        ; Setup parameters for call to function mac_msg_deallocate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
//  270         return;
        LJMP    ??MAC_CbackEvent_0 & 0xFFFF
//  271       }
//  272       else
//  273       {
//  274         macDataInd_t *pInd = &msgPtr->dataInd.mac;
??MAC_CbackEvent_22:
        MOV     A,R6
        ADD     A,#0x13
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
//  275         // See if LQI needs adjustment due to frame correlation
//  276         ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
        ; Setup parameters for call to function ZMacLqiAdjust
        MOV     A,?V0
        ADD     A,#0x1c
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        MOV     A,?V0
        ADD     A,#0x1d
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
//  277 
//  278         // Look for broadcast message that has a radius of greater 1
//  279         if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
//  280                && (pData->dataInd.msdu.p[6] > 1) )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x1c
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??MAC_CbackEvent_23
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??MAC_CbackEvent_23:
        JZ      $+5
        LJMP    ??MAC_CbackEvent_24 & 0xFFFF
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x6
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x2
        JC      ??MAC_CbackEvent_24
//  281         {
//  282           // Send the messsage to a special broadcast queue
//  283           if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
        ; Setup parameters for call to function nwk_broadcastSend
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
        MOV     A,R1
        JZ      ??MAC_CbackEvent_25
//  284           {
//  285             // Drop the message, too many broadcast messages to process
//  286             mac_msg_deallocate( (uint8 **)&pData );
        ; Setup parameters for call to function mac_msg_deallocate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
//  287           }
//  288           return;
??MAC_CbackEvent_25:
        LJMP    ??MAC_CbackEvent_0 & 0xFFFF
//  289         }
//  290       }
//  291     }
//  292     else if ((event == MAC_MCPS_DATA_CNF) && (pData->hdr.status != MAC_NO_RESOURCES))
??MAC_CbackEvent_20:
        MOV     A,#0xc
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_24
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1a
        JZ      ??MAC_CbackEvent_24
//  293     {
//  294       macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
        MOV     ?V0,R6
        MOV     ?V1,R7
//  295       
//  296       if ( pCnf->pDataReq && (pCnf->pDataReq->internal.txOptions & MAC_TXOPTION_ACK) )
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??MAC_CbackEvent_24
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0xe
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     C,0xE0 /* A   */.0
        JNC     ??MAC_CbackEvent_24
//  297       {
//  298         // See if LQI needs adjustment due to frame correlation
//  299         ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
        ; Setup parameters for call to function ZMacLqiAdjust
        MOV     A,?V0
        ADD     A,#0xc
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        MOV     A,?V0
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
//  300       }
//  301     }
//  302 
//  303     // Application hasn't already processed this message. Send it to NWK task.
//  304     osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
??MAC_CbackEvent_24:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        MOV     A,R1
//  305   }
//  306 
//  307   if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
??MAC_CbackEvent_19:
        MOV     A,#0xc
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??MAC_CbackEvent_0
//  308   {
//  309     // If the application needs 'pDataReq' then we cannot free it here.
//  310     // The application must free it after using it. Note that 'pDataReq'
//  311     // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
//  312 
//  313     mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
        ; Setup parameters for call to function mac_msg_deallocate
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
//  314   }
//  315 #endif
//  316 }
??MAC_CbackEvent_0:
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
        REQUIRE _A_IEN0
//  317 #else  // ifdef MT_MAC_CB_FUNC
//  318 {
//  319   /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
//  320   switch (pData->hdr.event)
//  321   {
//  322     case MAC_MLME_ASSOCIATE_IND:
//  323       if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
//  324         nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
//  325       break;
//  326 
//  327     case MAC_MLME_ASSOCIATE_CNF:
//  328       if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
//  329         nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
//  330       break;
//  331 
//  332     case MAC_MLME_DISASSOCIATE_IND:
//  333       if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
//  334         nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
//  335       break;
//  336 
//  337     case MAC_MLME_DISASSOCIATE_CNF:
//  338       if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
//  339         nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
//  340       break;
//  341 
//  342     case MAC_MLME_BEACON_NOTIFY_IND:
//  343       if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
//  344         nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
//  345       break;
//  346 
//  347     case MAC_MLME_ORPHAN_IND:
//  348       if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
//  349         nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
//  350       break;
//  351 
//  352     case MAC_MLME_SCAN_CNF:
//  353       if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
//  354       {
//  355         pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
//  356         nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
//  357       }
//  358 
//  359       if (ZMac_ScanBuf != NULL)
//  360       {
//  361         void *pTmp = ZMac_ScanBuf;
//  362         ZMac_ScanBuf = NULL;
//  363         osal_mem_free(pTmp);
//  364       }
//  365       break;
//  366 
//  367     case MAC_MLME_START_CNF:
//  368       if ( _macCallbackSub & CB_ID_NWK_START_CNF )
//  369         nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
//  370       break;
//  371 
//  372     case MAC_MLME_SYNC_LOSS_IND:
//  373       if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
//  374        nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
//  375       break;
//  376 
//  377     case MAC_MLME_POLL_CNF:
//  378       if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
//  379          nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
//  380       break;
//  381 
//  382     case MAC_MLME_COMM_STATUS_IND:
//  383       if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
//  384         nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
//  385       break;
//  386 
//  387     case MAC_MCPS_DATA_CNF:
//  388       if (pData->dataCnf.pDataReq != NULL)
//  389         mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
//  390 
//  391       if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
//  392         nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
//  393       break;
//  394 
//  395     case MAC_MCPS_DATA_IND:
//  396       {
//  397         /*
//  398            Data Ind is unconventional: to save an alloc/copy, reuse the MAC
//  399            buffer and re-organize the contents into ZMAC format.
//  400         */
//  401         ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
//  402         uint8 event, status, len, *msdu;
//  403 
//  404         /* Store parameters */
//  405         event = pData->hdr.event;
//  406         status = pData->hdr.status;
//  407         len = pData->dataInd.msdu.len;
//  408         msdu = pData->dataInd.msdu.p;
//  409 
//  410         /* Copy security fields */
//  411         osal_memcpy(&pDataInd->Sec, &pData->dataInd.sec, sizeof(ZMacSec_t));
//  412         
//  413         /* Copy mac fields one by one since the two buffers overlap. */
//  414         osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac.srcAddr, sizeof(zAddrType_t));
//  415         osal_memcpy(&pDataInd->DstAddr, &pData->dataInd.mac.dstAddr, sizeof(zAddrType_t));
//  416         pDataInd->Timestamp = pData->dataInd.mac.timestamp;
//  417         pDataInd->Timestamp2 = pData->dataInd.mac.timestamp2;
//  418         pDataInd->SrcPANId = pData->dataInd.mac.srcPanId;
//  419         pDataInd->DstPANId = pData->dataInd.mac.dstPanId;
//  420         pDataInd->mpduLinkQuality = pData->dataInd.mac.mpduLinkQuality;
//  421         pDataInd->Correlation = pData->dataInd.mac.correlation;
//  422         pDataInd->Rssi = pData->dataInd.mac.rssi;
//  423         pDataInd->Dsn = pData->dataInd.mac.dsn;
//  424 
//  425         /* Restore parameters */
//  426         pDataInd->hdr.Status = status;
//  427         pDataInd->hdr.Event = event;
//  428         pDataInd->msduLength = len;
//  429 
//  430         if (len)
//  431           pDataInd->msdu = msdu;
//  432         else
//  433           pDataInd->msdu = NULL;
//  434 
//  435         if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
//  436           nwk_MTCallbackSubNwkDataInd ( pDataInd );
//  437       }
//  438 
//  439       /* free buffer */
//  440       mac_msg_deallocate( (uint8 **)&pData );
//  441       break;
//  442 
//  443     case MAC_MCPS_PURGE_CNF:
//  444       if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
//  445         nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
//  446       break;
//  447 
//  448     case MAC_MLME_POLL_IND:
//  449       if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
//  450          nwk_MTCallbackSubNwkPollInd( (ZMacPollInd_t *)pData );
//  451       break;
//  452 
//  453     default:
//  454       break;
//  455   }
//  456 }
//  457 #endif
//  458 
//  459 /********************************************************************************************************
//  460  * @fn      MAC_CbackCheckPending
//  461  *
//  462  * @brief   Return number of pending indirect msg
//  463  *
//  464  * @param   None
//  465  *
//  466  * @return  Number of indirect msg holding
//  467  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  468 uint8 MAC_CbackCheckPending(void)
MAC_CbackCheckPending:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function MAC_CbackCheckPending
        CODE
//  469 {
        FUNCALL MAC_CbackCheckPending, nwkDB_ReturnIndirectHoldingCnt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  470 #if !defined (NONWK)
//  471   if ( ZSTACK_ROUTER_BUILD )
//  472   {
//  473     return (nwkDB_ReturnIndirectHoldingCnt());
        ; Setup parameters for call to function nwkDB_ReturnIndirectHoldingCnt
        LCALL   `??nwkDB_ReturnIndirectHoldingCnt::?relay`; Banked call to: nwkDB_ReturnIndirectHoldingCnt
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  474   }
//  475   else
//  476   {
//  477     return (0);
//  478   }
//  479 #else
//  480   return (0);
//  481 #endif
//  482 }
          CFI EndBlock cfiBlock1
//  483 
//  484 /**************************************************************************************************
//  485  * @fn          MAC_CbackQueryRetransmit
//  486  *
//  487  * @brief       This function callback function returns whether or not to continue MAC
//  488  *              retransmission.
//  489  *              A return value '0x00' will indicate no continuation of retry and a return value
//  490  *              '0x01' will indicate to continue retransmission. This callback function shall be
//  491  *              used to stop continuing retransmission for RF4CE.
//  492  *              MAC shall call this callback function whenever it finishes transmitting a packet
//  493  *              for macMaxFrameRetries times.
//  494  *
//  495  * input parameters
//  496  *
//  497  * None.
//  498  *
//  499  * output parameters
//  500  *
//  501  * None.
//  502  *
//  503  * @return      0x00 to stop retransmission, 0x01 to continue retransmission.
//  504  **************************************************************************************************
//  505 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  506 uint8 MAC_CbackQueryRetransmit(void)
MAC_CbackQueryRetransmit:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function MAC_CbackQueryRetransmit
        CODE
//  507 {
        ; Saved register size: 0
        ; Auto size: 0
//  508   return(0);
        MOV     R1,#0x0
        LJMP    ?BRET
//  509 }
          CFI EndBlock cfiBlock2
//  510 
//  511 /********************************************************************************************************
//  512  * @fn      ZMacLqiAdjustMode
//  513  *
//  514  * @brief   Sets/return LQI adjust mode
//  515  *
//  516  * @param   mode - LQI_ADJ_GET = return current mode only
//  517  *                 LQI_ADJ_OFF = disable LQI adjusts
//  518  *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
//  519  *
//  520  * @return  current LQI adjust mode
//  521  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  522 ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
ZMacLqiAdjustMode:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ZMacLqiAdjustMode
        CODE
//  523 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  524   if ( mode != LQI_ADJ_GET )
        MOV     A,#-0x1
        XRL     A,R0
        JZ      ??ZMacLqiAdjustMode_0
//  525   {
//  526     lqiAdjMode = mode;
        MOV     A,R0
        MOV     DPTR,#lqiAdjMode
        MOVX    @DPTR,A
//  527   }
//  528   return ( lqiAdjMode );
??ZMacLqiAdjustMode_0:
        MOV     DPTR,#lqiAdjMode
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  529 }
          CFI EndBlock cfiBlock3
//  530 
//  531 #if !defined NONWK
//  532 /********************************************************************************************************
//  533  * @fn      ZMacLqiAdjust
//  534  *
//  535  * @brief   Adjust LQI according to correlation value
//  536  *
//  537  * @notes - the IEEE 802.15.4 specification provides some general statements on
//  538  *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
//  539  *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
//  540  *          802.15.4 signals detectable by the receiver, and LQ values should be
//  541  *          uniformly distributed between these two limits." Section E.2.3: "The
//  542  *          LQI (see 6.7.8) measures the received energy and/or SNR for each
//  543  *          received packet. When energy level and SNR information are combined,
//  544  *          they can indicate whether a corrupt packet resulted from low signal
//  545  *          strength or from high signal strength plus interference."
//  546  *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
//  547  *          packet correlation value (related to SNR) to scale incoming LQI value
//  548  *          (related to signal strength) to 'derate' noisy packets.
//  549  *        - LQI Adjustment Mode2 provided below is a location for a developer to
//  550  *          implement their own proprietary LQI adjustment algorithm.
//  551  *
//  552  * @param   corr - packet correlation value
//  553  * @param   lqi  - ptr to link quality (scaled rssi)
//  554  *
//  555  * @return  *lqi - adjusted link quality
//  556  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  557 static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
ZMacLqiAdjust:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ZMacLqiAdjust
        CODE
//  558 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  559   if ( lqiAdjMode != LQI_ADJ_OFF )
        MOV     DPTR,#lqiAdjMode
        MOVX    A,@DPTR
        JZ      ??ZMacLqiAdjust_0
//  560   {
//  561     uint16 adjLqi = *lqi;
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
//  562 
//  563     // Keep correlation within theoretical limits
//  564     if ( corr < LQI_CORR_MIN )
        MOV     A,R6
        CLR     C
        SUBB    A,#0x32
        JNC     ??ZMacLqiAdjust_1
//  565     {
//  566        corr = LQI_CORR_MIN;
        MOV     R6,#0x32
        SJMP    ??ZMacLqiAdjust_2
//  567     }
//  568     else if ( corr > LQI_CORR_MAX )
??ZMacLqiAdjust_1:
        MOV     A,R6
        CLR     C
        SUBB    A,#0x6f
        JC      ??ZMacLqiAdjust_2
//  569     {
//  570        corr = LQI_CORR_MAX;
        MOV     R6,#0x6e
//  571     }
//  572 
//  573     if ( lqiAdjMode == LQI_ADJ_MODE1 )
??ZMacLqiAdjust_2:
        MOV     DPTR,#lqiAdjMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZMacLqiAdjust_3
//  574     {
//  575       /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
//  576                  which is computed from the incoming correlation value between
//  577                  theorectical minimum/maximum values. This is a very simple way
//  578                  of 'derating' the incoming LQI as correlation value drops. */
//  579       adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
        MOV     A,R6
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R2
        ADD     A,#-0x32
        MOV     ?V0,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     ?V1,A
        MOV     A,R0
        MOV     B,?V0
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V1
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,?V0
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     R2,#0x3c
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,?V0
        MOV     R1,?V1
//  580     }
//  581     else if ( lqiAdjMode == LQI_ADJ_MODE2 )
//  582     {
//  583       /* MODE2 - location for developer to implement a proprietary algorithm */
//  584     }
//  585 
//  586     // Replace incoming LQI with scaled value
//  587     *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
??ZMacLqiAdjust_3:
        CLR     C
        MOV     A,R0
        SUBB    A,#0x0
        MOV     A,R1
        SUBB    A,#0x1
        JC      ??ZMacLqiAdjust_4
        MOV     A,#-0x1
        SJMP    ??ZMacLqiAdjust_5
??ZMacLqiAdjust_4:
        MOV     A,R0
??ZMacLqiAdjust_5:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R4
        MOV     DPH,R5
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  588   }
//  589 }
??ZMacLqiAdjust_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MAC_CbackEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MAC_CbackEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MAC_CbackCheckPending::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MAC_CbackCheckPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MAC_CbackQueryRetransmit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MAC_CbackQueryRetransmit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacLqiAdjustMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacLqiAdjustMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacLqiAdjust::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacLqiAdjust

        END
//  590 #endif
// 
// 1 625 bytes in segment BANKED_CODE
//    30 bytes in segment BANK_RELAYS
//    17 bytes in segment CODE_C
//     1 byte  in segment SFR_AN
//     3 bytes in segment XDATA_Z
// 
// 1 672 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 1 byte shared)
//     3 bytes of XDATA memory
//
//Errors: none
//Warnings: none
